[
    {
        "title": "Finding 3-Digit Even Numbers",
        "question_content": "You are given an integer array digits, where each element is a digit. The array may contain duplicates.\nYou need to find all the unique integers that follow the given requirements:\n\n\tThe integer consists of the concatenation of three elements from digits in any arbitrary order.\n\tThe integer does not have leading zeros.\n\tThe integer is even.\n\nFor example, if the given digits were [1, 2, 3], integers 132 and 312 follow the requirements.\nReturn a sorted array of the unique integers.\n&nbsp;\nExample 1:\n\nInput: digits = [2,1,3,0]\nOutput: [102,120,130,132,210,230,302,310,312,320]\nExplanation: All the possible integers that follow the requirements are in the output array. \nNotice that there are no odd integers or integers with leading zeros.\n\nExample 2:\n\nInput: digits = [2,2,8,8,2]\nOutput: [222,228,282,288,822,828,882]\nExplanation: The same digit can be used as many times as it appears in digits. \nIn this example, the digit 8 is used twice each time in 288, 828, and 882. \n\nExample 3:\n\nInput: digits = [3,7,5]\nOutput: []\nExplanation: No even integers can be formed using the given digits.\n\n&nbsp;\nConstraints:\n\n\t3 <= digits.length <= 100\n\t0 <= digits[i] <= 9",
        "solutions": [
            {
                "id": 1612135,
                "title": "c-with-explanation-o-n-solution-easy-to-understand",
                "content": "The Approach: \\n\\nFind count of all elements in given digits array.\\n\\n**Check for all numbers between 100 to 999 whether it can be formed by the digits present in *digits vector*.**\\n\\nWe are using 2 maps for the same. If we are able to make it, Then we can add it to the answer.\\n\\nAt the end we will Sort the answer vector and return it.\\n\\n```\\nclass Solution {\\n public:\\n  vector<int> findEvenNumbers(vector<int>& digits) {\\n    // generating frequency map of the given digits\\n    vector<int> count(10, 0);\\n    for (auto& d : digits) count[d]++;\\n\\n    vector<int> res;\\n\\n    for (int num = 100; num < 999; num += 2) {\\n      // generating frequency map of the current number\\n      vector<int> currCount(10, 0);\\n      int temp = num;\\n\\n      while (temp) {\\n        currCount[temp % 10]++;\\n        temp /= 10;\\n      }\\n\\n      // checking if the number can be generated or not\\n      bool flag = true;\\n      for (int i = 0; i < 10; i++) {\\n        if (currCount[i] > count[i]) {\\n          flag = false;\\n          break;\\n        }\\n      }\\n\\n      if (flag) {\\n        res.push_back(num);\\n      }\\n    }\\n    return res;\\n  }\\n};\\n```\\n\\nIf you like the solution, don\\'t forget to upvote. Thanks! \\nIf you have any questions, feel free to comment down below.\\nCredits for cleaner code: @mycoding1729\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n public:\\n  vector<int> findEvenNumbers(vector<int>& digits) {\\n    // generating frequency map of the given digits\\n    vector<int> count(10, 0);\\n    for (auto& d : digits) count[d]++;\\n\\n    vector<int> res;\\n\\n    for (int num = 100; num < 999; num += 2) {\\n      // generating frequency map of the current number\\n      vector<int> currCount(10, 0);\\n      int temp = num;\\n\\n      while (temp) {\\n        currCount[temp % 10]++;\\n        temp /= 10;\\n      }\\n\\n      // checking if the number can be generated or not\\n      bool flag = true;\\n      for (int i = 0; i < 10; i++) {\\n        if (currCount[i] > count[i]) {\\n          flag = false;\\n          break;\\n        }\\n      }\\n\\n      if (flag) {\\n        res.push_back(num);\\n      }\\n    }\\n    return res;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612150,
                "title": "three-cycles",
                "content": "**C++**\\n```cpp\\nvector<int> findEvenNumbers(vector<int>& digits) {\\n    vector<int> res;\\n    int cnt[10] = {};\\n    for (auto d : digits)\\n        ++cnt[d];\\n    for (int i = 1; i < 10; ++i)\\n        for (int j = 0; cnt[i] > 0 && j < 10; ++j)\\n            for (int k = 0; cnt[j] > (i == j) && k < 10; k += 2)\\n                if (cnt[k] > (k == i) + (k == j))\\n                    res.push_back(i * 100 + j * 10 + k);\\n    return res;\\n}\\n```\\n**Python 3**\\nFor brevity, we check for `cnt` at the very end. It is faster to prune earier, but here we only need to check 450 numbers. \\n\\n```python\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        res, cnt = [], Counter(digits)\\n        for i in range(1, 10):\\n            for j in range(0, 10):\\n                for k in range(0, 10, 2):\\n                    if cnt[i] > 0 and cnt[j] > (i == j) and cnt[k] > (k == i) + (k == j):\\n                        res.append(i * 100 + j * 10 + k)\\n        return res\\n```",
                "solutionTags": [
                    "Python3",
                    "C"
                ],
                "code": "```cpp\\nvector<int> findEvenNumbers(vector<int>& digits) {\\n    vector<int> res;\\n    int cnt[10] = {};\\n    for (auto d : digits)\\n        ++cnt[d];\\n    for (int i = 1; i < 10; ++i)\\n        for (int j = 0; cnt[i] > 0 && j < 10; ++j)\\n            for (int k = 0; cnt[j] > (i == j) && k < 10; k += 2)\\n                if (cnt[k] > (k == i) + (k == j))\\n                    res.push_back(i * 100 + j * 10 + k);\\n    return res;\\n}\\n```\n```python\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        res, cnt = [], Counter(digits)\\n        for i in range(1, 10):\\n            for j in range(0, 10):\\n                for k in range(0, 10, 2):\\n                    if cnt[i] > 0 and cnt[j] > (i == j) and cnt[k] > (k == i) + (k == j):\\n                        res.append(i * 100 + j * 10 + k)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1611987,
                "title": "python3-brute-force",
                "content": "Please check out this [commit](https://github.com/gaosanyong/leetcode/commit/b1948f8814bebeca475cbb354cd44d19092dff59) for solutions of weekly 270.\\n\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        ans = set()\\n        for x, y, z in permutations(digits, 3): \\n            if x != 0 and z & 1 == 0: \\n                ans.add(100*x + 10*y + z) \\n        return sorted(ans)\\n```\\n\\nAlternative `O(N)` approach \\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        ans = []\\n        freq = Counter(digits)\\n        for x in range(100, 1000, 2): \\n            if not Counter(int(d) for d in str(x)) - freq: ans.append(x)\\n        return ans \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        ans = set()\\n        for x, y, z in permutations(digits, 3): \\n            if x != 0 and z & 1 == 0: \\n                ans.add(100*x + 10*y + z) \\n        return sorted(ans)\\n```\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        ans = []\\n        freq = Counter(digits)\\n        for x in range(100, 1000, 2): \\n            if not Counter(int(d) for d in str(x)) - freq: ans.append(x)\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612576,
                "title": "c-time-100-space-100-easy-solution",
                "content": "\\n```\\n//Runtime: 4 ms, faster than 100.00% of C++ online submissions for Finding 3-Digit Even Numbers.\\n//Memory Usage: 9 MB, less than 100.00% of C++ online submissions for Finding 3-Digit Even Numbers.\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> ans;\\n        int A[10]={0};                                                 //Array for 10 digits (0,1,2,3...)\\n        \\n        for(auto &x:digits) A[x]++;                                    //Fill our array\\n        \\n        for(int i=100;i<999;i+=2)                                      //Look through only correct numbers\\n        {\\n            int d1=i/100,d2=i/10%10,d3=i%10;\\n            if(--A[d1]>=0 & --A[d2]>=0 & --A[d3]>=0) ans.push_back(i); //Here we do 2 actions at the same time(we decrease all digits from our array A and also we check if after the decreasing we have enough digits in our array)\\n            A[d1]++,A[d2]++,A[d3]++;                                   //Refresh our array to start position\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n//Runtime: 4 ms, faster than 100.00% of C++ online submissions for Finding 3-Digit Even Numbers.\\n//Memory Usage: 9 MB, less than 100.00% of C++ online submissions for Finding 3-Digit Even Numbers.\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> ans;\\n        int A[10]={0};                                                 //Array for 10 digits (0,1,2,3...)\\n        \\n        for(auto &x:digits) A[x]++;                                    //Fill our array\\n        \\n        for(int i=100;i<999;i+=2)                                      //Look through only correct numbers\\n        {\\n            int d1=i/100,d2=i/10%10,d3=i%10;\\n            if(--A[d1]>=0 & --A[d2]>=0 & --A[d3]>=0) ans.push_back(i); //Here we do 2 actions at the same time(we decrease all digits from our array A and also we check if after the decreasing we have enough digits in our array)\\n            A[d1]++,A[d2]++,A[d3]++;                                   //Refresh our array to start position\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1616571,
                "title": "o-digits-length-solution-easy-code-with-detailed-explanation",
                "content": "**Please Upvote,it helps a lot**\\n```\\n/*\\n\\nAs we know that we want unique numbers of 3 digits only that too only even.  so first we \\ngather the frequency of all the digits we have, then we iterate from 100 to 999 ( all possible 3 digits numbers, 100,102,104...\\nall possible even 3 digit numbers).  for ex  we are iterating and we are\\nat 104  so we will see that if we have  digits\\n1,0,4 in our database if yes then we can make this number from our\\navailable digits given to us.\\n\\n\\nTime complexity : O(digits.length)  // due to making of frequency map\\nSpace Complexity : O(1) //fixed map array space for digits 0 to 9\\n*/\\n\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int [] map = new int[10]; // for freq of 0 to 9 (digits are fixed)\\n        \\n        for(int i = 0;i<digits.length;i++){ //make a frequency map of digits\\n            map[digits[i]]++;\\n        }\\n        \\n        List<Integer> arr = new ArrayList<>();\\n        \\n        for(int i = 100;i<=999;i = i + 2){ //will always runs from 100 to 999 \\n            int num = i;\\n            int [] freq = new int[10];\\n            while(num > 0){  // will always run 3 times\\n                int rem = num % 10;\\n                freq[rem]++;\\n                num = num/10;\\n            }\\n            \\n            boolean res = findans(freq,map);\\n            if(res) arr.add(i);\\n        }\\n        \\n        int [] ans = new int[arr.size()]; //logic for arraylist to array conversion\\n        for(int i = 0;i<arr.size();i++){ // at max we can have all num from 100 to 998 only\\n            ans[i] = arr.get(i);\\n        }\\n        \\n        return ans;\\n    }\\n    \\n    private boolean findans(int [] currentNum,int [] database){\\n        \\n        for(int i = 0;i<10;i++){  //it will always run for at max 10 times\\n            if(currentNum[i] > database[i]) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/*\\n\\nAs we know that we want unique numbers of 3 digits only that too only even.  so first we \\ngather the frequency of all the digits we have, then we iterate from 100 to 999 ( all possible 3 digits numbers, 100,102,104...\\nall possible even 3 digit numbers).  for ex  we are iterating and we are\\nat 104  so we will see that if we have  digits\\n1,0,4 in our database if yes then we can make this number from our\\navailable digits given to us.\\n\\n\\nTime complexity : O(digits.length)  // due to making of frequency map\\nSpace Complexity : O(1) //fixed map array space for digits 0 to 9\\n*/\\n\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int [] map = new int[10]; // for freq of 0 to 9 (digits are fixed)\\n        \\n        for(int i = 0;i<digits.length;i++){ //make a frequency map of digits\\n            map[digits[i]]++;\\n        }\\n        \\n        List<Integer> arr = new ArrayList<>();\\n        \\n        for(int i = 100;i<=999;i = i + 2){ //will always runs from 100 to 999 \\n            int num = i;\\n            int [] freq = new int[10];\\n            while(num > 0){  // will always run 3 times\\n                int rem = num % 10;\\n                freq[rem]++;\\n                num = num/10;\\n            }\\n            \\n            boolean res = findans(freq,map);\\n            if(res) arr.add(i);\\n        }\\n        \\n        int [] ans = new int[arr.size()]; //logic for arraylist to array conversion\\n        for(int i = 0;i<arr.size();i++){ // at max we can have all num from 100 to 998 only\\n            ans[i] = arr.get(i);\\n        }\\n        \\n        return ans;\\n    }\\n    \\n    private boolean findans(int [] currentNum,int [] database){\\n        \\n        for(int i = 0;i<10;i++){  //it will always run for at max 10 times\\n            if(currentNum[i] > database[i]) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612866,
                "title": "intuitive-bt-treeset",
                "content": "\\u25CF **Idea**\\nUse classic backtracking for combonation generation. Look out for optimizations.\\n\\n`TreeSet` - sort + unique conditions.\\n`count == 0 && digits[i] == 0` - first digit should not be a zero\\n`count == 2 && digits[i] % 2 != 0` - last should be even\\n`seen` - use boolean array to track what is already in the current subset.\\n\\n\\u25CF **Code**\\n\\n```java\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        Set<Integer> answers = new TreeSet<>();\\n        gen(0, 0, -1, digits, answers, new boolean[digits.length]);\\n        return answers.stream().mapToInt(i->i).toArray();\\n    }\\n    \\n    private void gen(int ans, int count, int last, int[] digits, Set<Integer> answers, boolean[] seen) {\\n        if (count == 3) {\\n            answers.add(ans);\\n        } else {\\n            for (int i = 0; i < digits.length; i++) {\\n                if (seen[i] || (count == 0 && digits[i] == 0) || (count == 2 && digits[i] % 2 != 0)) continue;\\n                seen[i] = true;\\n                gen(ans * 10 + digits[i], count + 1, i, digits, answers, seen);\\n                seen[i] = false;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Backtracking",
                    "Tree",
                    "Ordered Set"
                ],
                "code": "```java\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        Set<Integer> answers = new TreeSet<>();\\n        gen(0, 0, -1, digits, answers, new boolean[digits.length]);\\n        return answers.stream().mapToInt(i->i).toArray();\\n    }\\n    \\n    private void gen(int ans, int count, int last, int[] digits, Set<Integer> answers, boolean[] seen) {\\n        if (count == 3) {\\n            answers.add(ans);\\n        } else {\\n            for (int i = 0; i < digits.length; i++) {\\n                if (seen[i] || (count == 0 && digits[i] == 0) || (count == 2 && digits[i] % 2 != 0)) continue;\\n                seen[i] = true;\\n                gen(ans * 10 + digits[i], count + 1, i, digits, answers, seen);\\n                seen[i] = false;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2233399,
                "title": "c-easy-solution-w-simple-math-100-faster-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int freq[10] = {0}; // to store frequency of each digit\\n        vector<int> outVector; // to return\\n        for (int digit: digits) freq[digit]++;\\n        \\n        for (int num=100; num<999; num+=2) {\\n            int ones = num % 10;\\n            int tens = (num / 10) % 10;\\n            int hundreds = (num / 100);\\n            \\n            // checking if required number of each digit is there or not\\n            freq[ones]--;\\n            freq[tens]--;\\n            freq[hundreds]--;\\n            \\n            if (freq[ones] >= 0 && freq[tens] >= 0 && freq[hundreds] >= 0) outVector.push_back(num);\\n            \\n            // Undo the subtractions done earlier\\n            freq[ones]++;\\n            freq[tens]++;\\n            freq[hundreds]++;\\n            \\n        }\\n        \\n        return outVector;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Backtracking"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int freq[10] = {0}; // to store frequency of each digit\\n        vector<int> outVector; // to return\\n        for (int digit: digits) freq[digit]++;\\n        \\n        for (int num=100; num<999; num+=2) {\\n            int ones = num % 10;\\n            int tens = (num / 10) % 10;\\n            int hundreds = (num / 100);\\n            \\n            // checking if required number of each digit is there or not\\n            freq[ones]--;\\n            freq[tens]--;\\n            freq[hundreds]--;\\n            \\n            if (freq[ones] >= 0 && freq[tens] >= 0 && freq[hundreds] >= 0) outVector.push_back(num);\\n            \\n            // Undo the subtractions done earlier\\n            freq[ones]++;\\n            freq[tens]++;\\n            freq[hundreds]++;\\n            \\n        }\\n        \\n        return outVector;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612094,
                "title": "python-o-n-solution",
                "content": "I try to use O(n^3) in the contest,  and it fails me so many times.  \\nThen I am forced to use this solution.\\nYou only need to count the frequency of each number,  and pick up each number for each digit,  if the rest frequency of this digit is 0,  skip it.   If the first digit is 0 or last digit is odd number,  skip it. \\n\\nTime complexity (O(n)+1000),  since there are only 3 digits,  and each from 0 - 9\\n\\n\\n\\n\\n```\\nclass Solution(object):\\n    def findEvenNumbers(self, digits):\\n        \"\"\"\\n        :type digits: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        n = len(digits)\\n        fre = [0]*10\\n        for i in range(n):\\n            fre[digits[i]] += 1\\n        ans = []\\n        for i in range(1,10):\\n            if fre[i]==0: continue \\n            fre[i] -= 1\\n            for j in range(10):\\n                if fre[j]==0: continue \\n                fre[j] -= 1\\n                for k in range(0,10,2):\\n                    if fre[k]==0: continue \\n                    fre[k] -= 1\\n                    ans.append(i*100+j*10+k)\\n                    fre[k] += 1            \\n                fre[j] += 1        \\n            fre[i] += 1   \\n        return ans\\n```\\nAnd below is the backtracking version,  you can find any k digits number by this.\\n```\\nclass Solution(object):\\n    def findEvenNumbers(self, digits):\\n        \"\"\"\\n        :type digits: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        n = len(digits)\\n        k = 3\\n        fre = [0]*10      \\n        for i in range(n):\\n            fre[digits[i]] += 1     \\n        ans = []\\n            \\n        def getnext(index,pre):\\n            if index==k-1:\\n                for d in range(0,10,2):\\n                    if fre[d]==0: continue \\n                    ans.append(pre*10+d)   \\n                return   \\n            for d in range(10):\\n                if index==0 and d==0: continue\\n                if fre[d]==0: continue \\n                fre[d] -= 1\\n                getnext(index+1,pre*10+d)\\n                fre[d] += 1\\n                   \\n        getnext(0,0)\\n        \\n        return ans\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def findEvenNumbers(self, digits):\\n        \"\"\"\\n        :type digits: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        n = len(digits)\\n        fre = [0]*10\\n        for i in range(n):\\n            fre[digits[i]] += 1\\n        ans = []\\n        for i in range(1,10):\\n            if fre[i]==0: continue \\n            fre[i] -= 1\\n            for j in range(10):\\n                if fre[j]==0: continue \\n                fre[j] -= 1\\n                for k in range(0,10,2):\\n                    if fre[k]==0: continue \\n                    fre[k] -= 1\\n                    ans.append(i*100+j*10+k)\\n                    fre[k] += 1            \\n                fre[j] += 1        \\n            fre[i] += 1   \\n        return ans\\n```\n```\\nclass Solution(object):\\n    def findEvenNumbers(self, digits):\\n        \"\"\"\\n        :type digits: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        n = len(digits)\\n        k = 3\\n        fre = [0]*10      \\n        for i in range(n):\\n            fre[digits[i]] += 1     \\n        ans = []\\n            \\n        def getnext(index,pre):\\n            if index==k-1:\\n                for d in range(0,10,2):\\n                    if fre[d]==0: continue \\n                    ans.append(pre*10+d)   \\n                return   \\n            for d in range(10):\\n                if index==0 and d==0: continue\\n                if fre[d]==0: continue \\n                fre[d] -= 1\\n                getnext(index+1,pre*10+d)\\n                fre[d] += 1\\n                   \\n        getnext(0,0)\\n        \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612025,
                "title": "java-results-are-limited-between-100-998-use-this",
                "content": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] counts = new int[10];\\n        for (int one : digits) {\\n            counts[one]++;\\n        }\\n        \\n        List<Integer> list = new ArrayList<>();\\n        \\n        for (int i = 100; i <= 998; i += 2) {\\n            int[] curCounts = new int[10];\\n            String val = i + \"\";\\n            for (int j = 0; j < 3; j++) {\\n                curCounts[val.charAt(j) - \\'0\\']++;\\n            }\\n            boolean flag = true;\\n            for (int j = 0; j < counts.length; j++) {\\n                if (curCounts[j] > counts[j]) {\\n                    flag = false;\\n                    break;\\n                }\\n            }\\n            if (flag) list.add(i);\\n        }\\n        int[] ret = new int[list.size()];\\n        for (int i = 0; i < list.size(); i++) {\\n            ret[i] = list.get(i);\\n        }\\n      \\n        return ret;\\n    }\\n}\\n",
                "solutionTags": [],
                "code": "class Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] counts = new int[10];\\n        for (int one : digits) {\\n            counts[one]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1613945,
                "title": "python-simple-hashmap-solution-o-n",
                "content": "* We need 3 digit numbers so we travese form 100 to 999\\n* For every num in range we check if its digits are in digits array and frequency of its digits is less than or equal to frequency of digits in digits array.\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        hmap, res = defaultdict(int), []\\n        for num in digits:\\n            hmap[num] += 1   #counting frequency of digits of digits array\\n        \\n        for num in range(100, 999, 2):  #step 2 because we need even numbers\\n            checker = defaultdict(int)\\n            for digit in str(num):\\n                checker[int(digit)] += 1    #counting frequency of digits of num\\n            \\n\\t\\t\\t#check if every digit in num is in digits array and its frequency is less than or equal to its frequency in digits array\\n            if all(map(lambda x: x in hmap and checker[x] <= hmap[x], checker)):\\n                res.append(num)\\n        \\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        hmap, res = defaultdict(int), []\\n        for num in digits:\\n            hmap[num] += 1   #counting frequency of digits of digits array\\n        \\n        for num in range(100, 999, 2):  #step 2 because we need even numbers\\n            checker = defaultdict(int)\\n            for digit in str(num):\\n                checker[int(digit)] += 1    #counting frequency of digits of num\\n            \\n\\t\\t\\t#check if every digit in num is in digits array and its frequency is less than or equal to its frequency in digits array\\n            if all(map(lambda x: x in hmap and checker[x] <= hmap[x], checker)):\\n                res.append(num)\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1629985,
                "title": "c-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) \\n    {\\n        vector<int>count(10,0);\\n        for(auto x:digits)\\n            count[x]++;\\n        vector<int>res;\\n        for(int i=1;i<=9;i++)\\n        {\\n            for(int j=0;j<=9;j++)\\n            {\\n                for(int k=0;k<9;k+=2)\\n                {\\n                    count[i]--;count[j]--;count[k]--;\\n                    if(count[i]>=0 && count[j]>=0 && count[k]>=0)\\n                    {\\n                        int x=i*100+j*10+k;\\n                        res.push_back(x);\\n                    }\\n                    count[i]++;count[j]++;count[k]++;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) \\n    {\\n        vector<int>count(10,0);\\n        for(auto x:digits)\\n            count[x]++;\\n        vector<int>res;\\n        for(int i=1;i<=9;i++)\\n        {\\n            for(int j=0;j<=9;j++)\\n            {\\n                for(int k=0;k<9;k+=2)\\n                {\\n                    count[i]--;count[j]--;count[k]--;\\n                    if(count[i]>=0 && count[j]>=0 && count[k]>=0)\\n                    {\\n                        int x=i*100+j*10+k;\\n                        res.push_back(x);\\n                    }\\n                    count[i]++;count[j]++;count[k]++;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1623219,
                "title": "c-based-approach-easy-understanding-explaination-alternate-approach-in-comments",
                "content": "**Explaination :**\\n* s1 stores even digits from the array \\n* s2 stores the ten\\'s digit - doesn\\'t matter what it is\\n* s3 stores the hundred\\'s digit - can\\'t be 0 \\n\\nWe just need to add all the places and make sure we don\\'t use the same digits (where in the code I have used continue statement) .\\n\\n**Code :**\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        set<int> s;\\n        int size = digits.size();\\n        for (int i = 0; i < size; i++) \\n        {\\n            if (digits[i] % 2 == 0) \\n            {\\n                int s1 = digits[i];\\n                for (int j = 0; j < size; j++) \\n                {\\n                    if (j == i)\\n                        continue;\\n                    int s2 = digits[j] * 10 + s1;\\n                    for (int k = 0; k < size; k++) \\n                    {\\n                        if (k == i or k == j or digits[k] == 0)\\n                            continue;\\n                        int s3 = digits[k] * 100 + s2;\\n                        s.insert(s3);\\n                    }\\n                }\\n            }\\n        }\\n        vector<int> res;\\n        for (int str : s) {\\n            res.emplace_back(str);\\n        } \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        set<int> s;\\n        int size = digits.size();\\n        for (int i = 0; i < size; i++) \\n        {\\n            if (digits[i] % 2 == 0) \\n            {\\n                int s1 = digits[i];\\n                for (int j = 0; j < size; j++) \\n                {\\n                    if (j == i)\\n                        continue;\\n                    int s2 = digits[j] * 10 + s1;\\n                    for (int k = 0; k < size; k++) \\n                    {\\n                        if (k == i or k == j or digits[k] == 0)\\n                            continue;\\n                        int s3 = digits[k] * 100 + s2;\\n                        s.insert(s3);\\n                    }\\n                }\\n            }\\n        }\\n        vector<int> res;\\n        for (int str : s) {\\n            res.emplace_back(str);\\n        } \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612079,
                "title": "c-set",
                "content": "```\\nclass Solution {\\npublic:\\n  vector<int> findEvenNumbers(vector<int>& digits) {\\n    int n = digits.size();\\n    set<int> res;\\n    for (int i = 0; i < n; ++i) {\\n      for (int j = 0; j < n; ++j) {\\n        for (int k = 0; k < n; ++k) {\\n          if (i == j || j == k || i == k) continue;\\n          if (digits[i] == 0) continue;\\n          if (digits[k] % 2 == 1) continue;\\n          int x = digits[i] * 100 + digits[j] * 10 + digits[k];\\n          res.insert(x);\\n        }\\n      }\\n    }\\n    vector<int>ans;\\n    for(auto i:res){\\n        ans.push_back(i);\\n    }\\n      return ans;\\n  }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n  vector<int> findEvenNumbers(vector<int>& digits) {\\n    int n = digits.size();\\n    set<int> res;\\n    for (int i = 0; i < n; ++i) {\\n      for (int j = 0; j < n; ++j) {\\n        for (int k = 0; k < n; ++k) {\\n          if (i == j || j == k || i == k) continue;\\n          if (digits[i] == 0) continue;\\n          if (digits[k] % 2 == 1) continue;\\n          int x = digits[i] * 100 + digits[j] * 10 + digits[k];\\n          res.insert(x);\\n        }\\n      }\\n    }\\n    vector<int>ans;\\n    for(auto i:res){\\n        ans.push_back(i);\\n    }\\n      return ans;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3626795,
                "title": "o-n-solution-beats-100",
                "content": "# Intuition\\n\\nFirst we checked the frequency of all digits available in the digits vector.\\n\\nThen we check for every 3-digit number if it can be formed using those digits or not, for that we first get the frequency of all the digits of $$i$$ and check if the frequency of that digit in the digits array is greater or not. If it is less than that required then we cannot make that number using digits in the digits array.\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    using vi = vector<int>;\\n    vi findEvenNumbers(vi& digits) {\\n        vi ans;\\n        vi freq(10,0);\\n        for(auto digit: digits) ++freq[digit];\\n\\n        for(int i=100;i<=999;i+=2){\\n\\n            string s1 = to_string(i);\\n\\n            vi ifreq(10,0);\\n            for(auto ch: s1) ++ifreq[ch-\\'0\\'];\\n\\n            bool flag = true;\\n            for(int j=0;j<10;++j){\\n                if(freq[j]<ifreq[j]){\\n                    flag=false;\\n                    break;\\n                }\\n            }\\n\\n            if(flag) ans.emplace_back(i);\\n\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    using vi = vector<int>;\\n    vi findEvenNumbers(vi& digits) {\\n        vi ans;\\n        vi freq(10,0);\\n        for(auto digit: digits) ++freq[digit];\\n\\n        for(int i=100;i<=999;i+=2){\\n\\n            string s1 = to_string(i);\\n\\n            vi ifreq(10,0);\\n            for(auto ch: s1) ++ifreq[ch-\\'0\\'];\\n\\n            bool flag = true;\\n            for(int j=0;j<10;++j){\\n                if(freq[j]<ifreq[j]){\\n                    flag=false;\\n                    break;\\n                }\\n            }\\n\\n            if(flag) ans.emplace_back(i);\\n\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612313,
                "title": "functional-java",
                "content": "```\\nclass Solution {\\n    public static int[] digitsCounter;\\n    public static int[] findEvenNumbers(int[] digits) {\\n        digitsCounter = new int[10];\\n        Arrays.stream(digits).forEach(d->digitsCounter[d]++);\\n        return IntStream.range(100,999)\\n                .filter(num->num%2==0)\\n                .filter(Solution::matcher)\\n                .toArray();\\n\\n    }\\n    public static boolean matcher(int possibleNumber){\\n        int[] possibleNumberCounter = new int[10];\\n        while(possibleNumber>0){\\n            possibleNumberCounter[possibleNumber%10]++;\\n            possibleNumber/=10;\\n        }\\n        return doesItContains(possibleNumberCounter);\\n    }\\n    public static boolean doesItContains(int[] possibleNumberCounter){\\n        return IntStream.range(0,10).allMatch(d->possibleNumberCounter[d]<=digitsCounter[d]);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public static int[] digitsCounter;\\n    public static int[] findEvenNumbers(int[] digits) {\\n        digitsCounter = new int[10];\\n        Arrays.stream(digits).forEach(d->digitsCounter[d]++);\\n        return IntStream.range(100,999)\\n                .filter(num->num%2==0)\\n                .filter(Solution::matcher)\\n                .toArray();\\n\\n    }\\n    public static boolean matcher(int possibleNumber){\\n        int[] possibleNumberCounter = new int[10];\\n        while(possibleNumber>0){\\n            possibleNumberCounter[possibleNumber%10]++;\\n            possibleNumber/=10;\\n        }\\n        return doesItContains(possibleNumberCounter);\\n    }\\n    public static boolean doesItContains(int[] possibleNumberCounter){\\n        return IntStream.range(0,10).allMatch(d->possibleNumberCounter[d]<=digitsCounter[d]);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612189,
                "title": "finding-3-digit-even-number",
                "content": "unordered_set<int> st;\\n    \\n    void solve(vector<int>& digits,int ans,int len,vector<bool> &vis)\\n    {\\n        if(len==3)\\n        {\\n            if(ans%2==0)\\n            st.insert(ans);\\n            return ;\\n        }\\n\\n        for(int i=0;i<digits.size();i++)\\n        {\\n            if (vis[i] || (len==0 && digits[i]==0 ) || (len==2 && digits[i]%2!=0)) \\n                continue;\\n            vis[i]=true;\\n            auto temp=ans*10+digits[i];\\n            solve(digits,temp,len + 1,vis);\\n            vis[i]=false;\\n        }\\n    }\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int n=digits.size();\\n        vector<int> v;\\n        if(n==0)\\n            return {};\\n        \\n        vector<bool> vis(n,false);\\n        solve(digits,0,0,vis);\\n        \\n        for(auto i:st)\\n        {\\n            v.push_back(i);\\n        }\\n        sort(v.begin(),v.end());\\n        return v;\\n    }",
                "solutionTags": [
                    "C++",
                    "Backtracking"
                ],
                "code": "unordered_set<int> st;\\n    \\n    void solve(vector<int>& digits,int ans,int len,vector<bool> &vis)\\n    {\\n        if(len==3)\\n        {\\n            if(ans%2==0)\\n            st.insert(ans);\\n            return ;\\n        }\\n\\n        for(int i=0;i<digits.size();i++)\\n        {\\n            if (vis[i] || (len==0 && digits[i]==0 ) || (len==2 && digits[i]%2!=0)) \\n                continue;\\n            vis[i]=true;\\n            auto temp=ans*10+digits[i];\\n            solve(digits,temp,len + 1,vis);\\n            vis[i]=false;\\n        }\\n    }\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int n=digits.size();\\n        vector<int> v;\\n        if(n==0)\\n            return {};\\n        \\n        vector<bool> vis(n,false);\\n        solve(digits,0,0,vis);\\n        \\n        for(auto i:st)\\n        {\\n            v.push_back(i);\\n        }\\n        sort(v.begin(),v.end());\\n        return v;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1612044,
                "title": "java-bruteforce",
                "content": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        Set<Integer> result = new HashSet<>();\\n        \\n        for(int i=0; i < digits.length; i++) {\\n                if(digits[i] != 0) {\\n                    for(int j = 0; j < digits.length; j++) {\\n                        if(j != i) {\\n                            for(int k = 0; k < digits.length; k++) {\\n                                if(digits[k] %2 ==0 && k != j && k != i) {\\n                                    int num = digits[i] * 100 + digits[j] * 10 + digits[k];\\n                                    result.add(num);\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n                \\n        }\\n        int[] res = result.stream().mapToInt(Number::intValue).toArray();\\n        Arrays.sort(res);\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        Set<Integer> result = new HashSet<>();\\n        \\n        for(int i=0; i < digits.length; i++) {\\n                if(digits[i] != 0) {\\n                    for(int j = 0; j < digits.length; j++) {\\n                        if(j != i) {\\n                            for(int k = 0; k < digits.length; k++) {\\n                                if(digits[k] %2 ==0 && k != j && k != i) {\\n                                    int num = digits[i] * 100 + digits[j] * 10 + digits[k];\\n                                    result.add(num);\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n                \\n        }\\n        int[] res = result.stream().mapToInt(Number::intValue).toArray();\\n        Arrays.sort(res);\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1729458,
                "title": "java-o-n-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] dc = new int[10];\\n        List<Integer> res = new ArrayList<Integer>();\\n        for(int d : digits){\\n            dc[d]++; // Counting number of occurrences of each digit\\n        }\\n\\t\\t\\n\\t\\t// Looping only 3 digit even numbers\\n        for(int i = 100; i < 999; i += 2){\\n            // Getting digits on place value 1\\'s, 10\\'s and 100\\'s \\n\\t\\t\\tint n = i;\\n            int b1 = n % 10;\\n            n = n / 10;\\n            int b10 = n % 10;\\n            n = n / 10;\\n            int b100 = n % 10;\\n\\t\\t\\t\\n            dc[b1]--;\\n            dc[b10]--;\\n            dc[b100]--;\\n\\t\\t\\t\\n            if(dc[b1] >= 0 && dc[b10] >= 0 && dc[b100] >= 0){\\n                res.add(i);\\n            }\\n\\t\\t\\t\\n            dc[b1]++;\\n            dc[b10]++;\\n            dc[b100]++;\\n        }\\n        return res.stream().mapToInt(i -> i).toArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] dc = new int[10];\\n        List<Integer> res = new ArrayList<Integer>();\\n        for(int d : digits){\\n            dc[d]++; // Counting number of occurrences of each digit\\n        }\\n\\t\\t\\n\\t\\t// Looping only 3 digit even numbers\\n        for(int i = 100; i < 999; i += 2){\\n            // Getting digits on place value 1\\'s, 10\\'s and 100\\'s \\n\\t\\t\\tint n = i;\\n            int b1 = n % 10;\\n            n = n / 10;\\n            int b10 = n % 10;\\n            n = n / 10;\\n            int b100 = n % 10;\\n\\t\\t\\t\\n            dc[b1]--;\\n            dc[b10]--;\\n            dc[b100]--;\\n\\t\\t\\t\\n            if(dc[b1] >= 0 && dc[b10] >= 0 && dc[b100] >= 0){\\n                res.add(i);\\n            }\\n\\t\\t\\t\\n            dc[b1]++;\\n            dc[b10]++;\\n            dc[b100]++;\\n        }\\n        return res.stream().mapToInt(i -> i).toArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1659057,
                "title": "c-simple-dfs-no-duplicates-solution-100-time-99-space",
                "content": "Okay, this might be seen, as several other combinatorics problem, as a tree  traversal one.\\n\\nLet\\'s assume we are given initially as viable values `{0, 1, 5, 5, 6, 6, 8}`; we know we should not start with a `0`, so we have initially four different options: `1`, `5`, `6` or `8`.\\n\\nWe go down one level and we can now pick any of the remaning options in the tree, plus `0`; if we picked `1` before, for example, we might use any other of the provided values, but that; if we picked `6`, we might repeat that digit now, and so on.\\n\\nOne last step and we have to close with an even number: `6` or `8` (assuming we did not use them twice already).\\n\\nNow that we see the tree to navigate, we just have to create some logic to do so; and to do so efficiently :)\\n\\nWe will create a couple of class variables to help us:\\n* `res` is going to be our usual accumulator variable - I thought about building the logic to have it sized by the right amount initially and avoid painful reallocations, but then I was \"nah, overkill for permutations of three elements\", although it is a fascinating sub-problem to crack;\\n* `freq` will store the frequencies of each digit provided to us, aptly sized to be `10` slots (all preset to `0`), given the constraints telling us we might get any single digit provided (multiple times, possibly).\\n\\nIn our main function we are going to populate `freq` rather trivially and then we will call the helper function `dfs` to help us populate `res`.\\n\\nThis helper function takes a sole optional parameter `n`, defaulted to `0`, and will then recursively:\\n* check for our base case, when `n > 99` (ie: we have three digits), we will:\\n\\t* check if the number is even and, in case, add it to `res`;\\n\\t* quit the function with a `return`;\\n* alternatively, we will go to our general case and use a `for` loop and go for all the elements with `i` - starting from `0` if `n` has a non `0` value of with `1` otherwise (remember: no leading `0`s in our solutions!) and provided `freq[i]` is non `0` as well:\\n\\t* mark `i` as used once (more), reducing its frequency;\\n\\t* call `dfs` recursively with the updated value of `n`, now `10` times the previous value, plus `1`;\\n\\t* backtrack restoring the previous frequence of `i` in `freq` after the recursive call is closed.\\n\\nOnce done, we can just `return` `res` :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\n    vector<int> res;\\n    int freq[10] = {};\\n    void dfs(int n = 0) {\\n        if (n > 99) {\\n            if (!(n & 1)) res.push_back(n);\\n            return;\\n        }\\n        // looping through freq to find matches\\n        for (int i = !n; i < 10; i++) {\\n            if (freq[i]) {\\n                // marking i as used\\n                freq[i]--;\\n                dfs(n * 10 + i);\\n                // backtracking i\\n                freq[i]++;\\n            }\\n        }\\n    }\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        for (int d: digits) freq[d]++;\\n        dfs();\\n        return res;\\n    }\\n};\\n```\\n\\nMicro-optimisation in the `for` loop, to call only even digits for the last level of the traversal:\\n\\n```cpp\\n        for (int i = !n, j = n > 9 ? 2 : 1; i < 10; i += j) {\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Combinatorics",
                    "Probability and Statistics"
                ],
                "code": "```cpp\\nclass Solution {\\n    vector<int> res;\\n    int freq[10] = {};\\n    void dfs(int n = 0) {\\n        if (n > 99) {\\n            if (!(n & 1)) res.push_back(n);\\n            return;\\n        }\\n        // looping through freq to find matches\\n        for (int i = !n; i < 10; i++) {\\n            if (freq[i]) {\\n                // marking i as used\\n                freq[i]--;\\n                dfs(n * 10 + i);\\n                // backtracking i\\n                freq[i]++;\\n            }\\n        }\\n    }\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        for (int d: digits) freq[d]++;\\n        dfs();\\n        return res;\\n    }\\n};\\n```\n```cpp\\n        for (int i = !n, j = n > 9 ? 2 : 1; i < 10; i += j) {\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1615404,
                "title": "c-2094-finding-3-digit-even-numbers",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> freq(10), ans; \\n        for (auto& x : digits) ++freq[x]; \\n        for (int val = 100; val < 1000; val += 2) {\\n            vector<int> f = freq; \\n            for (int x = val; x; x /= 10) --f[x % 10]; \\n            if (all_of(f.begin(), f.end(), [&](int x) { return x >= 0; })) ans.push_back(val); \\n        }\\n        return ans; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> freq(10), ans; \\n        for (auto& x : digits) ++freq[x]; \\n        for (int val = 100; val < 1000; val += 2) {\\n            vector<int> f = freq; \\n            for (int x = val; x; x /= 10) --f[x % 10]; \\n            if (all_of(f.begin(), f.end(), [&](int x) { return x >= 0; })) ans.push_back(val); \\n        }\\n        return ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612300,
                "title": "python-one-line-solution",
                "content": "# One Line with Itertools module \\n```\\nreturn sorted(set((first*100 ) + (second*10) + third for first, second, third in itertools.permutations(digits, 3) if first and not third & 1))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nreturn sorted(set((first*100 ) + (second*10) + third for first, second, third in itertools.permutations(digits, 3) if first and not third & 1))\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2438970,
                "title": "c-code-with-explanation-o-n-solution-easy-to-understand",
                "content": "***The Approach:***\\n\\n* Find count of all elements in given digits array.\\n* `Check for all numbers between 100 to 999 whether it can be formed by the digits present in digits vector.`\\n* We are using 2 maps for the same. If we are able to make it, Then we can add it to the answer.\\n* At the end we will Sort the answer vector and return it.\\n\\n***Here is a much cleaner code using the same logic in C++:***\\n```\\nclass Solution {\\n public:\\n  vector<int> findEvenNumbers(vector<int>& digits) {\\n    // generating frequency map of the given digits\\n    vector<int> count(10, 0);\\n    for (auto& d : digits) count[d]++;\\n\\n    vector<int> res;\\n\\n    for (int num = 100; num < 999; num += 2) {\\n      // generating frequency map of the current number\\n      vector<int> currCount(10, 0);\\n      int temp = num;\\n\\n      while (temp) {\\n        currCount[temp % 10]++;\\n        temp /= 10;\\n      }\\n\\n      // checking if the number can be generated or not\\n      bool flag = true;\\n      for (int i = 0; i < 10; i++) {\\n        if (currCount[i] > count[i]) {\\n          flag = false;\\n          break;\\n        }\\n      }\\n\\n      if (flag) {\\n        res.push_back(num);\\n      }\\n    }\\n    return res;\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n public:\\n  vector<int> findEvenNumbers(vector<int>& digits) {\\n    // generating frequency map of the given digits\\n    vector<int> count(10, 0);\\n    for (auto& d : digits) count[d]++;\\n\\n    vector<int> res;\\n\\n    for (int num = 100; num < 999; num += 2) {\\n      // generating frequency map of the current number\\n      vector<int> currCount(10, 0);\\n      int temp = num;\\n\\n      while (temp) {\\n        currCount[temp % 10]++;\\n        temp /= 10;\\n      }\\n\\n      // checking if the number can be generated or not\\n      bool flag = true;\\n      for (int i = 0; i < 10; i++) {\\n        if (currCount[i] > count[i]) {\\n          flag = false;\\n          break;\\n        }\\n      }\\n\\n      if (flag) {\\n        res.push_back(num);\\n      }\\n    }\\n    return res;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612171,
                "title": "three-loop-brute-force-java-simple-solution",
                "content": "```java\\n// AC: Runtime: 332 ms, faster than 25.00% of Java online submissions for Finding 3-Digit Even Numbers.\\n// Memory Usage: 39.7 MB, less than 25.00% of Java online submissions for Finding 3-Digit Even Numbers.\\n// brute-force.\\n// T:O(n^3), S:O(10^3)\\n// \\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int size = digits.length;\\n        HashSet<Integer> record = new HashSet<>();\\n        for (int i = 0; i < size; i++) {\\n            if (digits[i] == 0) {\\n                continue;\\n            }\\n            for (int j = 0; j < size; j++) {\\n                if (j == i) {\\n                    continue;\\n                }\\n                for (int k = 0; k < size; k++) {\\n                    if (k == j || k == i) {\\n                        continue;\\n                    }\\n                    if (digits[k] % 2 == 0) {\\n                        int temp = digits[i] * 100 + digits[j] * 10 + digits[k];\\n                        record.add(temp);\\n                    }\\n                }\\n            }\\n        }\\n        List<Integer> retList = new ArrayList<>(record);\\n        Collections.sort(retList);\\n        int[] ret = new int[record.size()];\\n        int pos = 0;\\n        for (int i: retList) {\\n            ret[pos++] = i;\\n        }\\n\\n        return ret;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\n// AC: Runtime: 332 ms, faster than 25.00% of Java online submissions for Finding 3-Digit Even Numbers.\\n// Memory Usage: 39.7 MB, less than 25.00% of Java online submissions for Finding 3-Digit Even Numbers.\\n// brute-force.\\n// T:O(n^3), S:O(10^3)\\n// \\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int size = digits.length;\\n        HashSet<Integer> record = new HashSet<>();\\n        for (int i = 0; i < size; i++) {\\n            if (digits[i] == 0) {\\n                continue;\\n            }\\n            for (int j = 0; j < size; j++) {\\n                if (j == i) {\\n                    continue;\\n                }\\n                for (int k = 0; k < size; k++) {\\n                    if (k == j || k == i) {\\n                        continue;\\n                    }\\n                    if (digits[k] % 2 == 0) {\\n                        int temp = digits[i] * 100 + digits[j] * 10 + digits[k];\\n                        record.add(temp);\\n                    }\\n                }\\n            }\\n        }\\n        List<Integer> retList = new ArrayList<>(record);\\n        Collections.sort(retList);\\n        int[] ret = new int[record.size()];\\n        int pos = 0;\\n        for (int i: retList) {\\n            ret[pos++] = i;\\n        }\\n\\n        return ret;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612130,
                "title": "explained-easy-to-understand-trick",
                "content": "here we can only form digits of length 3. So those digits are in rang 100 to 999. We will iterate over them and check if they can be formed using digits given in input;\\n```\\nclass Solution {\\npublic:\\n    multiset<int> set;\\n    bool canForm(int i)\\n    {\\n       vector<int> fre(10);\\n        while(i>0)\\n        {\\n            fre[i%10]++;\\n            i = i/10;\\n        }\\n        for(int i=0; i<10; i++)\\n        {\\n            if(set.count(i)<fre[i])\\n                return false;\\n        }\\n        return true;\\n    }\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> ans;\\n        for(auto it:digits)\\n            set.insert(it);\\n        for(int i=100; i<1000; i++)\\n        {\\n            if(i%2!=0) continue;\\n            if(canForm(i))\\n                ans.push_back(i);\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    multiset<int> set;\\n    bool canForm(int i)\\n    {\\n       vector<int> fre(10);\\n        while(i>0)\\n        {\\n            fre[i%10]++;\\n            i = i/10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1611994,
                "title": "easy-to-understand",
                "content": "class Solution {\\npublic:\\n \\n    \\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        \\n        int n=digits.size();\\n        \\n        set<int> s;\\n        \\n        for(int i=0;i<n;i++){\\n            int x=digits[i]*100;\\n            if(digits[i]==0)continue;\\n            for(int j=0;j<n;j++){\\n                \\n                if(j!=i){\\n                    x+=(digits[j]*10);\\n                    for(int k=0;k<n;k++){\\n                    \\n                    if(k!=j && k!=i){\\n                        x+=(digits[k]);\\n                        if(x%2==0)s.insert(x);                        \\n                        x-=digits[k];\\n                    }\\n                    \\n                    \\n                }\\n                    x-=(digits[j]*10);\\n                }\\n                else{\\n                    continue;\\n                }\\n              \\n                \\n                \\n            }\\n          \\n        }\\n        \\n        vector<int> ans;\\n        \\n        for(auto i:s){\\n            ans.push_back(i);\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n \\n    \\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        \\n        int n=digits.size();\\n        \\n        set<int> s;\\n        \\n        for(int i=0;i<n;i++){\\n            int x=digits[i]*100;\\n            if(digits[i]==0)continue;\\n            for(int j=0;j<n;j++){\\n                \\n                if(j!=i){\\n                    x+=(digits[j]*10);\\n                    for(int k=0;k<n;k++){\\n                    \\n                    if(k!=j && k!=i){\\n                        x+=(digits[k]);\\n                        if(x%2==0)s.insert(x);                        \\n                        x-=digits[k];\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 3506766,
                "title": "finding-3-digit-even-numbers-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^3)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        unordered_set<int> s1;\\n        vector<int> ans;\\n        int i, j, k, num=0;\\n\\n        sort(digits.begin(), digits.end());\\n        for(i=0 ; i<digits.size() ; i++)\\n        {\\n            if(digits[i]!=0)\\n            {\\n                for(j=0 ; j<digits.size() ; j++)\\n                {\\n                    if(i!=j)\\n                    {\\n                        for(k=0 ; k<digits.size() ; k++)\\n                        {\\n                            if(i!=k && j!=k && digits[k]%2==0)\\n                            {\\n                                num = digits[i]*100+digits[j]*10+digits[k];\\n                                s1.insert(num);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        auto it = s1.begin();\\n        for(i=0 ; i<s1.size() ; i++)\\n        {\\n            if(*it%2==0)\\n            {\\n                ans.push_back(*it);\\n            }\\n            it++;\\n        }\\n        sort(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/1b0c1d34-1db3-4e7a-aa25-c809f7e52480_1683687211.4150155.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        unordered_set<int> s1;\\n        vector<int> ans;\\n        int i, j, k, num=0;\\n\\n        sort(digits.begin(), digits.end());\\n        for(i=0 ; i<digits.size() ; i++)\\n        {\\n            if(digits[i]!=0)\\n            {\\n                for(j=0 ; j<digits.size() ; j++)\\n                {\\n                    if(i!=j)\\n                    {\\n                        for(k=0 ; k<digits.size() ; k++)\\n                        {\\n                            if(i!=k && j!=k && digits[k]%2==0)\\n                            {\\n                                num = digits[i]*100+digits[j]*10+digits[k];\\n                                s1.insert(num);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        auto it = s1.begin();\\n        for(i=0 ; i<s1.size() ; i++)\\n        {\\n            if(*it%2==0)\\n            {\\n                ans.push_back(*it);\\n            }\\n            it++;\\n        }\\n        sort(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3470017,
                "title": "c-easy-solution-using-hash-map",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n                 *****   Written by Gangstar @ dame *********\\nAs we have to find the three digit even number we will start from 100 and end at 999. We will check if all the digits of the even number in between 100 and 999 are present in digits array. If yes, then we will push the number in our answer. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:  O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int H[10]={0};\\n        for(auto e:digits)\\n        {\\n            H[e]++;\\n        }\\n        vector<int> ans;\\n        bool to_know;\\n        int temp;\\n        unordered_map<int,int>::iterator itr;\\n        for(int i=100;i<1000;)\\n        {\\n            temp=i;\\n            to_know=true;\\n            unordered_map<int,int> m;\\n            while(temp!=0)\\n            {\\n                m[temp%10]++;\\n                temp/=10;\\n            }\\n            for(auto e:m){\\n                if(e.second>H[e.first])\\n                {\\n                    to_know=false;\\n                }}\\n            if(to_know)\\n                ans.push_back(i);\\n            i=i+2;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int H[10]={0};\\n        for(auto e:digits)\\n        {\\n            H[e]++;\\n        }\\n        vector<int> ans;\\n        bool to_know;\\n        int temp;\\n        unordered_map<int,int>::iterator itr;\\n        for(int i=100;i<1000;)\\n        {\\n            temp=i;\\n            to_know=true;\\n            unordered_map<int,int> m;\\n            while(temp!=0)\\n            {\\n                m[temp%10]++;\\n                temp/=10;\\n            }\\n            for(auto e:m){\\n                if(e.second>H[e.first])\\n                {\\n                    to_know=false;\\n                }}\\n            if(to_know)\\n                ans.push_back(i);\\n            i=i+2;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2717008,
                "title": "three-cycles-java-solution-brute-force",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        List<Integer> list = new ArrayList<>();\\n        int[] count = new int[10];\\n        for(int val: digits) count[val]++;\\n        \\n        \\n        for(int first=1;first<=9;first++){\\n            count[first]--;\\n            for(int second=0;second<=9;second++){\\n                count[second]--;\\n                for(int third=0;third<=8;third+=2){\\n                    count[third]--;\\n                    \\n                    if(count[first]>=0 && count[second]>=0 && count[third]>=0)\\n                        list.add(first*100+second*10+third);\\n                    \\n                    count[third]++;\\n                }\\n                count[second]++;\\n            }\\n            count[first]++;\\n        }\\n        \\n        \\n        int[] res = new int[list.size()];\\n        for(int i=0;i<list.size();i++)\\n            res[i] = list.get(i);\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        List<Integer> list = new ArrayList<>();\\n        int[] count = new int[10];\\n        for(int val: digits) count[val]++;\\n        \\n        \\n        for(int first=1;first<=9;first++){\\n            count[first]--;\\n            for(int second=0;second<=9;second++){\\n                count[second]--;\\n                for(int third=0;third<=8;third+=2){\\n                    count[third]--;\\n                    \\n                    if(count[first]>=0 && count[second]>=0 && count[third]>=0)\\n                        list.add(first*100+second*10+third);\\n                    \\n                    count[third]++;\\n                }\\n                count[second]++;\\n            }\\n            count[first]++;\\n        }\\n        \\n        \\n        int[] res = new int[list.size()];\\n        for(int i=0;i<list.size();i++)\\n            res[i] = list.get(i);\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2387223,
                "title": "python-3-lines-solution",
                "content": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        dic = Counter(str(digits))\\n        l1 = [i for i in range(100,1000,2)]\\n        return list(filter(lambda x:Counter(str(x)) <= dic,l1))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        dic = Counter(str(digits))\\n        l1 = [i for i in range(100,1000,2)]\\n        return list(filter(lambda x:Counter(str(x)) <= dic,l1))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2035113,
                "title": "c-simple-solution-backtracking",
                "content": "class Solution {\\npublic:\\n    set<vector<int>> ans;\\n    \\n    void backtrack(vector<int>& digits, int k, int len, vector<int>& temp, vector<bool>& visited) {\\n        if(temp.size() == len) {\\n            ans.insert(temp);\\n            return;\\n        }\\n        \\n        for(int i = 0; i < digits.size(); i++) {\\n            if(!visited[i]) {\\n                if((k == 2) && (digits[i]&1)){\\n                    continue;\\n                } else if(k == 0 && digits[i] == 0) {\\n                    continue;\\n                }\\n                 else {\\n                    visited[i] = true;\\n                    temp.push_back(digits[i]);\\n                    \\n                    backtrack(digits, k+1, len, temp, visited);\\n                    auto it = temp.end();\\n                    it--;\\n                    temp.erase(it);\\n                    visited[i] = false;\\n                }\\n            }\\n        }\\n    }\\n    \\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int length = 3;\\n        vector<int> temp;\\n        vector<bool> visited(digits.size(), false);\\n        \\n        backtrack(digits, 0, length, temp, visited);\\n        \\n        vector<int> result;\\n        \\n        while(!ans.empty()){\\n            auto it = ans.begin();\\n            vector<int> nums(*it);\\n            ans.erase(it);\\n            int num = 0;\\n            for(int i = 0; i < nums.size(); i++) {\\n                num = num*10 + nums[i];\\n            }\\n            result.push_back(num);\\n        }\\n        sort(result.begin(), result.end());\\n        return result;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Backtracking"
                ],
                "code": "class Solution {\\npublic:\\n    set<vector<int>> ans;\\n    \\n    void backtrack(vector<int>& digits, int k, int len, vector<int>& temp, vector<bool>& visited) {\\n        if(temp.size() == len) {\\n            ans.insert(temp);\\n            return;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1895718,
                "title": "c-backtracking",
                "content": "Everytime there is a problem about generating multiple combinations, I think backtracking.\\n\\n```cpp\\nvector<int> findEvenNumbers(const vector<int>& digits) {\\n\\tvector<int> result;\\n\\tarray<int, 10> freq{};\\n\\tfor(auto d: digits)\\n\\t\\t++freq[d];\\n\\tfind_even_numbers(freq, result);\\n\\treturn result;\\n}\\n\\nvoid find_even_numbers(array<int, 10>& freq, vector<int>& result, int curr=0, int i=0) {\\n\\tif(i == 3 && curr%2==0) \\n\\t\\tresult.push_back(curr);\\n\\telse if(i < 3) {\\n\\t\\tfor(int d = 0; d < 10; ++freq[d++]) {\\n\\t\\t\\tif(--freq[d] >= 0 && (curr || d))\\n\\t\\t\\t\\tfind_even_numbers(freq, result, curr * 10 + d, i+1);\\n\\t\\t}\\n\\t}\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nvector<int> findEvenNumbers(const vector<int>& digits) {\\n\\tvector<int> result;\\n\\tarray<int, 10> freq{};\\n\\tfor(auto d: digits)\\n\\t\\t++freq[d];\\n\\tfind_even_numbers(freq, result);\\n\\treturn result;\\n}\\n\\nvoid find_even_numbers(array<int, 10>& freq, vector<int>& result, int curr=0, int i=0) {\\n\\tif(i == 3 && curr%2==0) \\n\\t\\tresult.push_back(curr);\\n\\telse if(i < 3) {\\n\\t\\tfor(int d = 0; d < 10; ++freq[d++]) {\\n\\t\\t\\tif(--freq[d] >= 0 && (curr || d))\\n\\t\\t\\t\\tfind_even_numbers(freq, result, curr * 10 + d, i+1);\\n\\t\\t}\\n\\t}\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1722942,
                "title": "c-dfs-backtracking-memorization-solution",
                "content": "**Basic Idea**\\nUsing DFS, Backtring and memorization to solve this question. \\nI think most people downvote this qestion because of TLE.\\nMemorization will speed up DFS process and avoid TLE.\\n```\\nclass Solution {\\n    int visited[100] ={0};\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        bool is_valid = false;\\n        for(int i=0;i<(int)digits.size();i++){\\n            if(digits[i]%2==0){\\n                is_valid = true;\\n                break;\\n            }\\n        }\\n        if(!is_valid) return {};\\n        std::unordered_set<std::string>set;\\n        std::vector<int>result;\\n        std::string temp;\\n        DFS(digits,temp,set,result);\\n        std::sort(result.begin(),result.end());\\n        return result;\\n    }\\n    void DFS(const std::vector<int>&arr,std::string& temp,std::unordered_set<std::string>&set,std::vector<int>&result){\\n        if(temp.length()==3){\\n            int temp_num = std::stoi(temp);\\n            if(temp_num%2==0 && set.find(temp)==set.end())\\n            {\\n                set.insert(temp);\\n                result.push_back(temp_num);\\n            }\\n        }\\n        else{\\n            for(int i=0;i<(int)arr.size();i++){\\n                if(set.find(temp)!=set.end()) return;\\n\\t\\t\\t\\t// Handle the case for leading zero\\n                else if((int)temp.length()==0 && arr[i]==0) continue;\\n\\t\\t\\t\\t// For any even number, the last digit of the number can\\'t be a odd digits.\\n\\t\\t\\t\\t// e.g, 221, 223, 225.. They are odd number.\\n                else if((int)temp.length() ==2 && arr[i]%2!=0) continue;\\n                else if(visited[i] == 1) continue;\\n                visited[i] =1;\\n                temp.push_back(arr[i]+\\'0\\');\\n                DFS(arr,temp,set,result);\\n                temp.pop_back();\\n                visited[i] = 0;\\n            }\\n\\t\\t\\t// Memorization\\n\\t\\t\\t// See Note * below\\n            set.insert(temp);\\n        }\\n    }\\n};\\n```\\n\\nNote *:\\nConsider the test case has a lot of duplicate digits\\nSay, [2,2,2,2,2,2,2,2,2,2,2,2,2...,4,6,8,....]\\n2, 22 or 222 may be generated many times.\\nFor example, when the DFS function has the depth 2,\\nall the answer begin with 22 should be generated.\\nIn other word, 224, 226, 228, and 22(x) should be added in the result already.\\nTherefore, we should ignore 22(x) in the next time.",
                "solutionTags": [
                    "Backtracking",
                    "Depth-First Search",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    int visited[100] ={0};\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        bool is_valid = false;\\n        for(int i=0;i<(int)digits.size();i++){\\n            if(digits[i]%2==0){\\n                is_valid = true;\\n                break;\\n            }\\n        }\\n        if(!is_valid) return {};\\n        std::unordered_set<std::string>set;\\n        std::vector<int>result;\\n        std::string temp;\\n        DFS(digits,temp,set,result);\\n        std::sort(result.begin(),result.end());\\n        return result;\\n    }\\n    void DFS(const std::vector<int>&arr,std::string& temp,std::unordered_set<std::string>&set,std::vector<int>&result){\\n        if(temp.length()==3){\\n            int temp_num = std::stoi(temp);\\n            if(temp_num%2==0 && set.find(temp)==set.end())\\n            {\\n                set.insert(temp);\\n                result.push_back(temp_num);\\n            }\\n        }\\n        else{\\n            for(int i=0;i<(int)arr.size();i++){\\n                if(set.find(temp)!=set.end()) return;\\n\\t\\t\\t\\t// Handle the case for leading zero\\n                else if((int)temp.length()==0 && arr[i]==0) continue;\\n\\t\\t\\t\\t// For any even number, the last digit of the number can\\'t be a odd digits.\\n\\t\\t\\t\\t// e.g, 221, 223, 225.. They are odd number.\\n                else if((int)temp.length() ==2 && arr[i]%2!=0) continue;\\n                else if(visited[i] == 1) continue;\\n                visited[i] =1;\\n                temp.push_back(arr[i]+\\'0\\');\\n                DFS(arr,temp,set,result);\\n                temp.pop_back();\\n                visited[i] = 0;\\n            }\\n\\t\\t\\t// Memorization\\n\\t\\t\\t// See Note * below\\n            set.insert(temp);\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1709553,
                "title": "python3-hash-table-backtracking-easy-understanding",
                "content": "```\\ndef findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        freq = Counter(digits)\\n        ans = []\\n        \\n        def dfs(length: int, num: int) -> None:\\n            if length == 0:\\n                if num % 2 == 0:\\n                    ans.append(num)\\n                return\\n            \\n            for i in range(10):\\n                if freq[i] == 0 or not freq[i]:\\n                    continue\\n                \\n                if length == 3 and i == 0:\\n                    continue\\n                    \\n                freq[i] -= 1\\n                dfs(length - 1, 10 * num + i)\\n                freq[i] += 1\\n        dfs(3, 0)\\n        \\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "Backtracking",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\ndef findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        freq = Counter(digits)\\n        ans = []\\n        \\n        def dfs(length: int, num: int) -> None:\\n            if length == 0:\\n                if num % 2 == 0:\\n                    ans.append(num)\\n                return\\n            \\n            for i in range(10):\\n                if freq[i] == 0 or not freq[i]:\\n                    continue\\n                \\n                if length == 3 and i == 0:\\n                    continue\\n                    \\n                freq[i] -= 1\\n                dfs(length - 1, 10 * num + i)\\n                freq[i] += 1\\n        dfs(3, 0)\\n        \\n        return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1660122,
                "title": "python-solution",
                "content": "```\\nfrom collections import defaultdict\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        arr = [0]*10\\n        for i in digits:\\n            arr[i]+=1\\n        def ok(n,arr):\\n            dic = defaultdict(int)\\n            while n:\\n                dic[n%10]+=1\\n                n//=10\\n            return all(arr[key]>=val for key,val in dic.items())\\n        ans = []\\n        for i in range(100,1000,2):\\n            if ok(i,arr):\\n                ans.append(i)\\n        return ans \\n```",
                "solutionTags": [],
                "code": "```\\nfrom collections import defaultdict\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        arr = [0]*10\\n        for i in digits:\\n            arr[i]+=1\\n        def ok(n,arr):\\n            dic = defaultdict(int)\\n            while n:\\n                dic[n%10]+=1\\n                n//=10\\n            return all(arr[key]>=val for key,val in dic.items())\\n        ans = []\\n        for i in range(100,1000,2):\\n            if ok(i,arr):\\n                ans.append(i)\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1649893,
                "title": "rust-solution-with-itertools-won-t-work-on-the-website",
                "content": "```\\nuse itertools::Itertools;\\nstruct Solution {}\\nimpl Solution {\\n    pub fn find_even_numbers(digits: Vec<i32>) -> Vec<i32> {\\n        digits.into_iter()\\n            .permutations(3)\\n            .map(|v| {\\n                v[0]*100 + v[1]*10 + v[2]\\n            })\\n            .filter(|x| *x >= 100)\\n            .filter(|x| *x % 2 == 0)\\n            .sorted()\\n            .unique()\\n            .collect()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse itertools::Itertools;\\nstruct Solution {}\\nimpl Solution {\\n    pub fn find_even_numbers(digits: Vec<i32>) -> Vec<i32> {\\n        digits.into_iter()\\n            .permutations(3)\\n            .map(|v| {\\n                v[0]*100 + v[1]*10 + v[2]\\n            })\\n            .filter(|x| *x >= 100)\\n            .filter(|x| *x % 2 == 0)\\n            .sorted()\\n            .unique()\\n            .collect()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1649401,
                "title": "java-with-explanation-beat-98",
                "content": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n\\t\\t// Record the frequency of each digits, you can also use a hashmap\\n        int[] count = new int[10];\\n        for (int d : digits) {\\n            count[d]++;\\n        }\\n\\t\\t\\n\\t\\t// Since we want to find 3-Digit, we iterate from 100 to 999\\n        List<Integer> res = new ArrayList<>();\\n        for (int i = 100; i <= 999; i++) {\\n            if (i % 2 == 0) { // Check whether i is even\\n                int j = i;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Record the frequency for each digit of i\\n                int[] tmp = new int[10];\\n                while (i > 0) {\\n                    int d = i % 10;\\n                    tmp[d]++;\\n                    i /= 10;\\n                }\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Check whether i is valid\\n                boolean has = true;\\n                for (int d = 0; d < 10; d++) {\\n                    if (tmp[d] > count[d]) {\\n                        has = false;\\n                        break;\\n                    }\\n                }\\n                if (has) res.add(j);\\n                i = j;\\n            }\\n        }\\n\\t\\t\\n\\t\\t// convert the list to an array\\n        int[] ans = new int[res.size()];\\n        for (int i = 0; i < res.size(); i++) {\\n            ans[i] = res.get(i);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n\\t\\t// Record the frequency of each digits, you can also use a hashmap\\n        int[] count = new int[10];\\n        for (int d : digits) {\\n            count[d]++;\\n        }\\n\\t\\t\\n\\t\\t// Since we want to find 3-Digit, we iterate from 100 to 999\\n        List<Integer> res = new ArrayList<>();\\n        for (int i = 100; i <= 999; i++) {\\n            if (i % 2 == 0) { // Check whether i is even\\n                int j = i;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Record the frequency for each digit of i\\n                int[] tmp = new int[10];\\n                while (i > 0) {\\n                    int d = i % 10;\\n                    tmp[d]++;\\n                    i /= 10;\\n                }\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Check whether i is valid\\n                boolean has = true;\\n                for (int d = 0; d < 10; d++) {\\n                    if (tmp[d] > count[d]) {\\n                        has = false;\\n                        break;\\n                    }\\n                }\\n                if (has) res.add(j);\\n                i = j;\\n            }\\n        }\\n\\t\\t\\n\\t\\t// convert the list to an array\\n        int[] ans = new int[res.size()];\\n        for (int i = 0; i < res.size(); i++) {\\n            ans[i] = res.get(i);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1622320,
                "title": "java-check-all-3-digit-even-numbers",
                "content": "The overall idea is to check if the current array contains enough digits to form a given number\\n\\n```\\npublic int[] findEvenNumbers(int[] digits) {\\n\\t// convert the array into a map of digits and their frequencies\\n\\tint[] counts = new int[10];\\n\\tfor (int digit : digits) {\\n\\t\\tcounts[digit]++;\\n\\t}\\n\\n\\tList<Integer> res = new ArrayList<>();\\n\\tint highest, middle, lowest;\\n\\tboolean isTarget = false;\\n\\n\\t// only checking even numbers with a step size of 2\\n\\tfor (int i = 100; i < 999; i += 2) {\\n\\t\\thighest = i / 100;\\n\\t\\tmiddle = i / 10 % 10;\\n\\t\\tlowest = i % 10;\\n\\t\\tisTarget = true;\\n\\n\\t\\tif (--counts[highest] < 0) isTarget = false;\\n\\t\\tif (--counts[middle] < 0) isTarget = false; \\n\\t\\tif (--counts[lowest] < 0) isTarget = false; \\n\\n\\t\\tif (isTarget) res.add(i);\\n\\n\\t\\tcounts[highest]++;\\n\\t\\tcounts[middle]++;\\n\\t\\tcounts[lowest]++;\\n\\t}\\n\\n\\t// convert to array\\n\\tint[] arr = new int[res.size()];\\n\\tfor (int i = 0; i < res.size(); i++) {\\n\\t\\tarr[i] = res.get(i);\\n\\t}\\n\\treturn arr;\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int[] findEvenNumbers(int[] digits) {\\n\\t// convert the array into a map of digits and their frequencies\\n\\tint[] counts = new int[10];\\n\\tfor (int digit : digits) {\\n\\t\\tcounts[digit]++;\\n\\t}\\n\\n\\tList<Integer> res = new ArrayList<>();\\n\\tint highest, middle, lowest;\\n\\tboolean isTarget = false;\\n\\n\\t// only checking even numbers with a step size of 2\\n\\tfor (int i = 100; i < 999; i += 2) {\\n\\t\\thighest = i / 100;\\n\\t\\tmiddle = i / 10 % 10;\\n\\t\\tlowest = i % 10;\\n\\t\\tisTarget = true;\\n\\n\\t\\tif (--counts[highest] < 0) isTarget = false;\\n\\t\\tif (--counts[middle] < 0) isTarget = false; \\n\\t\\tif (--counts[lowest] < 0) isTarget = false; \\n\\n\\t\\tif (isTarget) res.add(i);\\n\\n\\t\\tcounts[highest]++;\\n\\t\\tcounts[middle]++;\\n\\t\\tcounts[lowest]++;\\n\\t}\\n\\n\\t// convert to array\\n\\tint[] arr = new int[res.size()];\\n\\tfor (int i = 0; i < res.size(); i++) {\\n\\t\\tarr[i] = res.get(i);\\n\\t}\\n\\treturn arr;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1615242,
                "title": "python-a-short-counter-based-solution",
                "content": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        digits = Counter(digits)\\n        result = []\\n        for d1 in range(1, 10):\\n            for d2 in range(10):              \\n                for d3 in range(0, 10, 2):               \\n                    if not Counter([d1, d2, d3]) - digits:\\n                        result.append(100 * d1 + 10 * d2 + d3)\\n                    \\n        return result\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        digits = Counter(digits)\\n        result = []\\n        for d1 in range(1, 10):\\n            for d2 in range(10):              \\n                for d3 in range(0, 10, 2):               \\n                    if not Counter([d1, d2, d3]) - digits:\\n                        result.append(100 * d1 + 10 * d2 + d3)\\n                    \\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1614928,
                "title": "c-two-easy-solutions-using-set-and-map-o-n-2-and-o-n-3",
                "content": "### **Solution No. 1:** **Brute force - O(n^3)**\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        set<int>s;\\n        vector<int>v;\\n        int n = digits.size();\\n        for(int i=0; i<n; i++){\\n            if(digits[i] == 0)\\n                continue;\\n            for(int j=0; j<n; j++){\\n                if(j == i)\\n                    continue;\\n                for(int k=0; k<n; k++){\\n                    if(k == i or k == j)\\n                        continue;\\n                    s.insert(digits[i]*100+digits[j]*10+digits[k]);\\n                }\\n            }\\n        }\\n        for(auto it: s){\\n            if(it%2 == 0)\\n                v.push_back(it);\\n        }\\n        return v;\\n    }\\n};\\n```\\n\\n### **Solution No. 2:** **Optimal - O(n^2)**\\n* We are storing the occurences of all the elements of `digits`  in a map.\\n* Because, the 3 digits even number will always come between 100 and 999, we are traversing through all the even numbers from 100 to 999.\\n* In the second loop, we are storing occurences of all the digits of the number in another map.\\n* Because, if occurence of any digit in the number is greater than the occurence of that digit in the `digits` vector, that\\'s why we are breaking the loop and not pushing that particular number in the `result` vector.\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        map<int, int> m1;\\n        vector<int> result;\\n        for(auto &it: digits)\\n            m1[it]++;\\n        \\n        for(int i = 100; i < 999; i+= 2){\\n            map<int, int> mp;\\n            int num = i;\\n            while(num){\\n                int l = num%10;\\n                mp[l]++;\\n                if(mp[l] > m1[l])\\n                    break;\\n                num /= 10;\\n            }\\n            if(num == 0)\\n                result.push_back(i);\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        set<int>s;\\n        vector<int>v;\\n        int n = digits.size();\\n        for(int i=0; i<n; i++){\\n            if(digits[i] == 0)\\n                continue;\\n            for(int j=0; j<n; j++){\\n                if(j == i)\\n                    continue;\\n                for(int k=0; k<n; k++){\\n                    if(k == i or k == j)\\n                        continue;\\n                    s.insert(digits[i]*100+digits[j]*10+digits[k]);\\n                }\\n            }\\n        }\\n        for(auto it: s){\\n            if(it%2 == 0)\\n                v.push_back(it);\\n        }\\n        return v;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        map<int, int> m1;\\n        vector<int> result;\\n        for(auto &it: digits)\\n            m1[it]++;\\n        \\n        for(int i = 100; i < 999; i+= 2){\\n            map<int, int> mp;\\n            int num = i;\\n            while(num){\\n                int l = num%10;\\n                mp[l]++;\\n                if(mp[l] > m1[l])\\n                    break;\\n                num /= 10;\\n            }\\n            if(num == 0)\\n                result.push_back(i);\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1614110,
                "title": "easy-java-solution-o-n-solution",
                "content": "# Logic :\\n1) 3 digit number can be from 100 to 999\\n2) Iterate on every 3 digit even number and find whether it can be formed from given digits or not\\n3) The step 2 can be done by maintaing a frequency array of size 10 as we have digits only from 0 to 9.\\n```\\nclass Solution {\\n    static boolean canThisFormed(int n, int a[]){\\n        while(n>0){\\n            a[n%10]--;\\n            n=n/10;\\n        }\\n        for(int v:a){\\n            if(v<0)\\n                return false;\\n        }\\n        return true;\\n    }\\n\\n    public int[] findEvenNumbers(int[] digits) {\\n        int f[]=new int[10];\\n        for(int i=0;i<digits.length;i++){\\n            f[digits[i]]++;\\n        }\\n        ArrayList<Integer>l=new ArrayList<Integer>();\\n        for(int i=100;i<=999;i++){\\n            int c[]=Arrays.copyOf(f, f.length);\\n    \\n            if(canThisFormed(i,c)&&i%2==0){\\n                l.add(i);\\n            }   \\n        }\\n        int ans[]=new int[l.size()];\\n        int index=0;\\n        for(int val:l){\\n            ans[index++]=val;\\n        }\\n        Arrays.sort(ans);\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    static boolean canThisFormed(int n, int a[]){\\n        while(n>0){\\n            a[n%10]--;\\n            n=n/10;\\n        }\\n        for(int v:a){\\n            if(v<0)\\n                return false;\\n        }\\n        return true;\\n    }\\n\\n    public int[] findEvenNumbers(int[] digits) {\\n        int f[]=new int[10];\\n        for(int i=0;i<digits.length;i++){\\n            f[digits[i]]++;\\n        }\\n        ArrayList<Integer>l=new ArrayList<Integer>();\\n        for(int i=100;i<=999;i++){\\n            int c[]=Arrays.copyOf(f, f.length);\\n    \\n            if(canThisFormed(i,c)&&i%2==0){\\n                l.add(i);\\n            }   \\n        }\\n        int ans[]=new int[l.size()];\\n        int index=0;\\n        for(int val:l){\\n            ans[index++]=val;\\n        }\\n        Arrays.sort(ans);\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1613815,
                "title": "rust-o-n",
                "content": "```\\nimpl Solution {\\n    pub fn find_even_numbers(mut digits: Vec<i32>) -> Vec<i32> {\\n        let mut counts = vec![0; 10];\\n        for i in 0..digits.len() {\\n            counts[digits[i] as usize] += 1;\\n        }\\n\\n        let mut res = Vec::with_capacity(450);\\n        for n in (100..1000 as usize).step_by(2) {\\n            let ones = n % 10;\\n            let tens = n / 10 % 10;\\n            let hundreds = n / 100;\\n\\n            counts[ones] -= 1;\\n            counts[tens] -= 1;\\n            counts[hundreds] -= 1;\\n\\n            if counts[ones] >= 0 && counts[tens] >= 0 && counts[hundreds] >= 0 {\\n                res.push(n as i32);\\n            }\\n\\n            counts[ones] += 1;\\n            counts[tens] += 1;\\n            counts[hundreds] += 1;\\n        }\\n\\n        res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn find_even_numbers(mut digits: Vec<i32>) -> Vec<i32> {\\n        let mut counts = vec![0; 10];\\n        for i in 0..digits.len() {\\n            counts[digits[i] as usize] += 1;\\n        }\\n\\n        let mut res = Vec::with_capacity(450);\\n        for n in (100..1000 as usize).step_by(2) {\\n            let ones = n % 10;\\n            let tens = n / 10 % 10;\\n            let hundreds = n / 100;\\n\\n            counts[ones] -= 1;\\n            counts[tens] -= 1;\\n            counts[hundreds] -= 1;\\n\\n            if counts[ones] >= 0 && counts[tens] >= 0 && counts[hundreds] >= 0 {\\n                res.push(n as i32);\\n            }\\n\\n            counts[ones] += 1;\\n            counts[tens] += 1;\\n            counts[hundreds] += 1;\\n        }\\n\\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1613520,
                "title": "c-o-n-explained-with-comments-maps",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        map<int,int> counts;\\n        vector<int> ans;\\n        for(auto &i:digits)\\n            counts[i]++;  //count occurences of each element and store in map\\n        for(int i=100;i<999;i+=2)  // as 3 digits number go through each 3 digit even no.\\n        {\\n            int ones=i%10;  //ones place of digit\\n            int tens=(i/10)%10;  //tens place of digit\\n            int hundreds=(i/100);  //hundred place of digit\\n\\t\\t\\t//check if hundred place digit exist.we are decrementing because if only 1\\n\\t\\t\\t//occurence was there we cannot use it for tens or ones place after used in \\n\\t\\t\\t//hundreds   place similarly if used in tens place we cannot use in ones place.\\n            int chundreds=--counts[hundreds];  \\n            int ctens=--counts[tens];  //similarly for tens\\n            int cones=--counts[ones]; //similarly for ones\\n            if(chundreds>=0&&ctens>=0&&cones>=0)  //now check count for each place \\n\\t\\t\\t//and insert the num if count exists.\\n                ans.push_back(i);\\n\\t\\t\\t//increment the decremented count as its to be used for different numbers now.\\n            counts[ones]++;\\n            counts[tens]++;\\n            counts[hundreds]++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        map<int,int> counts;\\n        vector<int> ans;\\n        for(auto &i:digits)\\n            counts[i]++;  //count occurences of each element and store in map\\n        for(int i=100;i<999;i+=2)  // as 3 digits number go through each 3 digit even no.\\n        {\\n            int ones=i%10;  //ones place of digit\\n            int tens=(i/10)%10;  //tens place of digit\\n            int hundreds=(i/100);  //hundred place of digit\\n\\t\\t\\t//check if hundred place digit exist.we are decrementing because if only 1\\n\\t\\t\\t//occurence was there we cannot use it for tens or ones place after used in \\n\\t\\t\\t//hundreds   place similarly if used in tens place we cannot use in ones place.\\n            int chundreds=--counts[hundreds];  \\n            int ctens=--counts[tens];  //similarly for tens\\n            int cones=--counts[ones]; //similarly for ones\\n            if(chundreds>=0&&ctens>=0&&cones>=0)  //now check count for each place \\n\\t\\t\\t//and insert the num if count exists.\\n                ans.push_back(i);\\n\\t\\t\\t//increment the decremented count as its to be used for different numbers now.\\n            counts[ones]++;\\n            counts[tens]++;\\n            counts[hundreds]++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1613268,
                "title": "easy-python-solution-using-counter",
                "content": "Simple method using `Counter` :\\n* Create a dict for digits and count of number of digits\\n* Run a loop from 100 to 999 with increment of 2\\n* Check if all digits in the number are present in digits list and count of digits in both match as well\\n\\n```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        ans = []\\n        dc = Counter(digits)\\n        for n in range(100, 999, 2):\\n            s = [int(i) for i in str(n)]\\n            ds = Counter(s)\\n            if all([i in dc for i in s]) and all([ds[i] <= dc[i] for i in s]):\\n                ans.append(n)\\n        return ans\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        ans = []\\n        dc = Counter(digits)\\n        for n in range(100, 999, 2):\\n            s = [int(i) for i in str(n)]\\n            ds = Counter(s)\\n            if all([i in dc for i in s]) and all([ds[i] <= dc[i] for i in s]):\\n                ans.append(n)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612173,
                "title": "c-simple-solution-with-explanation",
                "content": "```\\nvector<int> findEvenNumbers(vector<int>& digits) {\\n        int n=digits.size();\\n        \\n        vector<int> res;\\n        \\n\\t\\t//sort and reverse to check if digits all contains zeros\\n        sort(digits.begin(),digits.end());\\n        reverse(digits.begin(),digits.end());\\n        \\n        if(digits[0]==0)\\n        {\\n            return res;\\n        }\\n        \\n\\t\\t//set used to get unique digits\\n        unordered_set<int> s;\\n        \\n\\t\\t//i for hundered position\\n\\t\\t//j for tens position\\n\\t\\t//k for unit position\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                for(int k=0;k<n;k++)\\n                {\\n\\t\\t\\t\\t\\t//avoid 0\\'s at ith position, odd at kth position\\n                    if(digits[k]%2==0 and digits[i]!=0 and i!=j and j!=k and k!=i)\\n                    {\\n                        s.insert(digits[i]*100+digits[j]*10+digits[k]);\\n                    }\\n                }\\n            }\\n        }\\n        \\n\\t\\t//inserting unique elements\\n        for(auto x:s)\\n        {\\n            res.push_back(x);\\n        }\\n        \\n        sort(res.begin(),res.end());\\n        \\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nvector<int> findEvenNumbers(vector<int>& digits) {\\n        int n=digits.size();\\n        \\n        vector<int> res;\\n        \\n\\t\\t//sort and reverse to check if digits all contains zeros\\n        sort(digits.begin(),digits.end());\\n        reverse(digits.begin(),digits.end());\\n        \\n        if(digits[0]==0)\\n        {\\n            return res;\\n        }\\n        \\n\\t\\t//set used to get unique digits\\n        unordered_set<int> s;\\n        \\n\\t\\t//i for hundered position\\n\\t\\t//j for tens position\\n\\t\\t//k for unit position\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                for(int k=0;k<n;k++)\\n                {\\n\\t\\t\\t\\t\\t//avoid 0\\'s at ith position, odd at kth position\\n                    if(digits[k]%2==0 and digits[i]!=0 and i!=j and j!=k and k!=i)\\n                    {\\n                        s.insert(digits[i]*100+digits[j]*10+digits[k]);\\n                    }\\n                }\\n            }\\n        }\\n        \\n\\t\\t//inserting unique elements\\n        for(auto x:s)\\n        {\\n            res.push_back(x);\\n        }\\n        \\n        sort(res.begin(),res.end());\\n        \\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1612120,
                "title": "finding-3-digits-using-brute-force",
                "content": "```\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int i, j, k, n = digits.size(), temp;\\n        set<int>ans;\\n        for (i = 0; i < n; i++) {\\n            if (digits[i] != 0) {\\n                for (j = 0; j < n; j++) {\\n                    if (j != i) {\\n                        for (k = 0; k < n; k++) {\\n                            if (i != k && j != k && digits[k] % 2 == 0) {\\n                                temp = (100 * digits[i]) + (10 * digits[j]) + digits[k];\\n                                ans.insert(temp);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        vector<int>v;\\n        for (auto it = ans.begin(); it != ans.end(); it++)\\n            v.push_back(*it);\\n        return v;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int i, j, k, n = digits.size(), temp;\\n        set<int>ans;\\n        for (i = 0; i < n; i++) {\\n            if (digits[i] != 0) {\\n                for (j = 0; j < n; j++) {\\n                    if (j != i) {\\n                        for (k = 0; k < n; k++) {\\n                            if (i != k && j != k && digits[k] % 2 == 0) {\\n                                temp = (100 * digits[i]) + (10 * digits[j]) + digits[k];\\n                                ans.insert(temp);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        vector<int>v;\\n        for (auto it = ans.begin(); it != ans.end(); it++)\\n            v.push_back(*it);\\n        return v;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1612073,
                "title": "c-the-simplest-solution-simple-for-loops",
                "content": "Key Idea: \\n1.  Candidate numbers are from 100 to 999.\\n2.  Save the count of digits in a vector\\n3.  Find all even numbers like *i*  such that 100<=*i*<=999, and *i* also satisfy the digit constraints. \\n4.  :)\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> vc(10,0);\\n        for(int i=0; i< digits.size(); i++) {\\n            vc[digits[i]]++;\\n        }\\n        \\n        vector<int> result;\\n        for(int i = 100; i <= 999; i +=2) { \\n            int d0 = i%10;\\n            int d1 = (i/10)%10;\\n            int d2 = (i/100);\\n            \\n            vector<int> temp(10,0);\\n            \\n            temp[d0]++;\\n            temp[d1]++;\\n            temp[d2]++;\\n            \\n            if(temp[d0] <= vc[d0] && temp[d1]<= vc[d1] && temp[d2]<= vc[d2])\\n                result.push_back(i);\\n        }\\n        \\n        return result;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> vc(10,0);\\n        for(int i=0; i< digits.size(); i++) {\\n            vc[digits[i]]++;\\n        }\\n        \\n        vector<int> result;\\n        for(int i = 100; i <= 999; i +=2) { \\n            int d0 = i%10;\\n            int d1 = (i/10)%10;\\n            int d2 = (i/100);\\n            \\n            vector<int> temp(10,0);\\n            \\n            temp[d0]++;\\n            temp[d1]++;\\n            temp[d2]++;\\n            \\n            if(temp[d0] <= vc[d0] && temp[d1]<= vc[d1] && temp[d2]<= vc[d2])\\n                result.push_back(i);\\n        }\\n        \\n        return result;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612058,
                "title": "javascript-simple",
                "content": "```\\nvar findEvenNumbers = function(digits) {\\n  const result = [];\\n  \\n  const counts = new Array(10).fill(0);\\n  \\n  // count how many instances of each digit we have\\n  for (const digit of digits) {\\n    counts[digit]++;\\n  }\\n  \\n  // we are only concerned with 3 digit even numbers that don\\'t have leading zeroes\\n  // so we can start at 100 and increment by 2 until we reach 1000\\n  for (let num = 100; num < 1000; num += 2) {\\n    let number = num;\\n    const onesDigit = number % 10;\\n    number = Math.floor(number / 10);\\n    const tensDigit = number % 10;\\n    number = Math.floor(number / 10);\\n    const hundredsDigit = number;\\n    \\n    // each time we use a digit we update our counts\\n    counts[onesDigit]--;\\n    counts[tensDigit]--;\\n    counts[hundredsDigit]--;\\n    \\n    // check if we have enough of each digit to construct the number\\n    if (counts[onesDigit] >= 0 && counts[tensDigit] >= 0 && counts[hundredsDigit] >= 0)\\n      result.push(num);\\n    \\n    // restore the original counts\\n    counts[onesDigit]++;\\n    counts[tensDigit]++;\\n    counts[hundredsDigit]++;\\n  }\\n  \\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar findEvenNumbers = function(digits) {\\n  const result = [];\\n  \\n  const counts = new Array(10).fill(0);\\n  \\n  // count how many instances of each digit we have\\n  for (const digit of digits) {\\n    counts[digit]++;\\n  }\\n  \\n  // we are only concerned with 3 digit even numbers that don\\'t have leading zeroes\\n  // so we can start at 100 and increment by 2 until we reach 1000\\n  for (let num = 100; num < 1000; num += 2) {\\n    let number = num;\\n    const onesDigit = number % 10;\\n    number = Math.floor(number / 10);\\n    const tensDigit = number % 10;\\n    number = Math.floor(number / 10);\\n    const hundredsDigit = number;\\n    \\n    // each time we use a digit we update our counts\\n    counts[onesDigit]--;\\n    counts[tensDigit]--;\\n    counts[hundredsDigit]--;\\n    \\n    // check if we have enough of each digit to construct the number\\n    if (counts[onesDigit] >= 0 && counts[tensDigit] >= 0 && counts[hundredsDigit] >= 0)\\n      result.push(num);\\n    \\n    // restore the original counts\\n    counts[onesDigit]++;\\n    counts[tensDigit]++;\\n    counts[hundredsDigit]++;\\n  }\\n  \\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1612049,
                "title": "using-python-permutations",
                "content": "Using permuations to calculate different 3 digit numbers\\n```\\nfrom itertools import permutations\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        #using set to remove duplicates\\n        ans = set()\\n        \\n        perm = permutations(digits,3)\\n        \\n        for p in perm:\\n            #only even 3-digit numbers \\n            if p[0]==0 or p[2]%2!=0:\\n                continue\\n            #adding the digits in valid case\\n            ans.add((100*p[0])+(10*p[1])+p[2])\\n        \\n        #returning sorted list\\n        return sorted(list(ans))\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "Using permuations to calculate different 3 digit numbers\\n```\\nfrom itertools import permutations\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        #using set to remove duplicates\\n        ans = set()\\n        \\n        perm = permutations(digits,3)\\n        \\n        for p in perm:\\n            #only even 3-digit numbers \\n            if p[0]==0 or p[2]%2!=0:\\n                continue\\n            #adding the digits in valid case\\n            ans.add((100*p[0])+(10*p[1])+p[2])\\n        \\n        #returning sorted list\\n        return sorted(list(ans))\\n",
                "codeTag": "Java"
            },
            {
                "id": 3910261,
                "title": "c-super-easy-clean-code-easy-to-grasp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        \\n        int freq[10] = {0};\\n\\n        int di = digits.size();\\n        for(int i=0; i<di; i++){\\n            freq[digits[i]]++;\\n        }\\n\\n        vector<int> ans;\\n        for(int i=1; i<10; i++){\\n            if(freq[i]){\\n                for(int j=0; j<10; j++){\\n                    if(freq[j] > (i==j)){\\n                        for(int k=0; k<10; k+=2){\\n                            if(freq[k] > ((i==k) + (j==k))){\\n                                ans.push_back(i*100 + j*10 + k);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        \\n        int freq[10] = {0};\\n\\n        int di = digits.size();\\n        for(int i=0; i<di; i++){\\n            freq[digits[i]]++;\\n        }\\n\\n        vector<int> ans;\\n        for(int i=1; i<10; i++){\\n            if(freq[i]){\\n                for(int j=0; j<10; j++){\\n                    if(freq[j] > (i==j)){\\n                        for(int k=0; k<10; k+=2){\\n                            if(freq[k] > ((i==k) + (j==k))){\\n                                ans.push_back(i*100 + j*10 + k);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3724547,
                "title": "java-hashing-explained",
                "content": "**Idea:**\\n* Enumerate all 3 digit even numbers and see if their digits exist in `digits` array\\n* Note that digits may contain duplicates\\n* Also note that reusing a digit isn\\'t allowed, so we need to use a hash table and not a hash set\\n>**T/S:** O(n)/O(1), where n = size(digits)\\n```\\npublic int[] findEvenNumbers(int[] digits) {\\n\\tvar unique = new ArrayList<Integer>();\\n\\tvar count = new int[10];\\n\\n\\tfor (var digit : digits)\\n\\t\\tcount[digit]++;\\n\\n\\tfor (var i = 100; i < 999; i += 2) {\\n\\t\\tvar unit = i % 10;\\n\\t\\tvar ten = (i / 10) % 10;\\n\\t\\tvar hundred = (i / 100) % 10;\\n\\t\\tcount[unit]--;\\n\\t\\tcount[ten]--;\\n\\t\\tcount[hundred]--;\\n\\n\\t\\tif (count[unit] >= 0 && count[ten] >= 0 && count[hundred] >= 0)\\n\\t\\t\\tunique.add(i);\\n\\n\\t\\t// restore the hash for next iteration\\n\\t\\tcount[unit]++;\\n\\t\\tcount[ten]++;\\n\\t\\tcount[hundred]++;\\n\\t}\\n\\n\\treturn unique.stream()\\n\\t\\t\\t\\t .mapToInt(i -> i)\\n\\t\\t\\t\\t .toArray();\\n}\\n```\\n***Please upvote if this helps***\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int[] findEvenNumbers(int[] digits) {\\n\\tvar unique = new ArrayList<Integer>();\\n\\tvar count = new int[10];\\n\\n\\tfor (var digit : digits)\\n\\t\\tcount[digit]++;\\n\\n\\tfor (var i = 100; i < 999; i += 2) {\\n\\t\\tvar unit = i % 10;\\n\\t\\tvar ten = (i / 10) % 10;\\n\\t\\tvar hundred = (i / 100) % 10;\\n\\t\\tcount[unit]--;\\n\\t\\tcount[ten]--;\\n\\t\\tcount[hundred]--;\\n\\n\\t\\tif (count[unit] >= 0 && count[ten] >= 0 && count[hundred] >= 0)\\n\\t\\t\\tunique.add(i);\\n\\n\\t\\t// restore the hash for next iteration\\n\\t\\tcount[unit]++;\\n\\t\\tcount[ten]++;\\n\\t\\tcount[hundred]++;\\n\\t}\\n\\n\\treturn unique.stream()\\n\\t\\t\\t\\t .mapToInt(i -> i)\\n\\t\\t\\t\\t .toArray();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3611248,
                "title": "simplest-solution-c-100-efficient",
                "content": "# Intuition & Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSince we need to find 3 digit even numbers using the digits given to us, we can ***simply iterate from 100 to 998 and check if each digit can be found (individually, i.e. digit + it\\'s occurence count) in the digit array given.***\\n\\n![Screenshot 2023-06-08 075844.png](https://assets.leetcode.com/users/images/69e6e779-7586-43bf-8532-cf5ee748683b_1686191387.0465884.png)\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(900 * N) --> O(N) - as we loop over the digits array\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1) - as we do not use any extra memory ***other than what the function is demanding (to return array of numbers), like any extra hashset/dictionary***\\n\\n## Please upvote if you like the approach\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[] FindEvenNumbers(int[] digits) {\\n        List<int> result = new List<int>();\\n\\n        for (int num = 100; num < 999; num += 2)\\n        {\\n            //get 3 digits..\\n            int onesD = num % 10;\\n            int tensD = (num / 10) % 10;\\n            int hunsD = num / 100;\\n\\n            //to check if 3 digits found..\\n            bool onesF = false;\\n            bool tensF = false;\\n            bool hunsF = false;\\n\\n            for (int i = 0; i < digits.Length; i++)\\n            {\\n                if (!onesF && onesD == digits[i])\\n                {\\n                    onesF = true;\\n                }\\n                else if (!tensF && tensD == digits[i])\\n                {\\n                    tensF = true;\\n                }\\n                else if (!hunsF && hunsD == digits[i])\\n                {\\n                    hunsF = true;\\n                }\\n                \\n                //if all digits are found..\\n                if (onesF && tensF && hunsF)\\n                {\\n                    result.Add(num);\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return result.ToArray();\\n    }\\n}\\n```\\n\\n## Please upvote if you like the approach\\n![Upvote please - do this.jpg](https://assets.leetcode.com/users/images/14062779-8126-48f4-af4e-c60985ec5071_1686191571.1234672.jpeg)\\n",
                "solutionTags": [
                    "C#",
                    "Array",
                    "Enumeration"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] FindEvenNumbers(int[] digits) {\\n        List<int> result = new List<int>();\\n\\n        for (int num = 100; num < 999; num += 2)\\n        {\\n            //get 3 digits..\\n            int onesD = num % 10;\\n            int tensD = (num / 10) % 10;\\n            int hunsD = num / 100;\\n\\n            //to check if 3 digits found..\\n            bool onesF = false;\\n            bool tensF = false;\\n            bool hunsF = false;\\n\\n            for (int i = 0; i < digits.Length; i++)\\n            {\\n                if (!onesF && onesD == digits[i])\\n                {\\n                    onesF = true;\\n                }\\n                else if (!tensF && tensD == digits[i])\\n                {\\n                    tensF = true;\\n                }\\n                else if (!hunsF && hunsD == digits[i])\\n                {\\n                    hunsF = true;\\n                }\\n                \\n                //if all digits are found..\\n                if (onesF && tensF && hunsF)\\n                {\\n                    result.Add(num);\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return result.ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3482476,
                "title": "c-easy-intuitive-using-map",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        map<int,int> m;\\n        for(auto it:digits) m[it]++;\\n        vector<int> ans;\\n        for(int i=1;i<=9;i++){\\n            for(int j=0;j<=9;j++){\\n                for(int k=0;k<=8;k+=2){\\n                    if(m[i]>0){\\n                        m[i]--;\\n                        if(m[j]>0){\\n                            m[j]--;\\n                            if(m[k]>0){\\n                                ans.push_back(i*100+j*10+k);\\n                            }\\n                            m[j]++;\\n                        }\\n                        m[i]++;\\n                    }\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        map<int,int> m;\\n        for(auto it:digits) m[it]++;\\n        vector<int> ans;\\n        for(int i=1;i<=9;i++){\\n            for(int j=0;j<=9;j++){\\n                for(int k=0;k<=8;k+=2){\\n                    if(m[i]>0){\\n                        m[i]--;\\n                        if(m[j]>0){\\n                            m[j]--;\\n                            if(m[k]>0){\\n                                ans.push_back(i*100+j*10+k);\\n                            }\\n                            m[j]++;\\n                        }\\n                        m[i]++;\\n                    }\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3235826,
                "title": "reduce-2-for-set-sort-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar findEvenNumbers = function(digits) {\\n    return Array.from(digits.reduce((acc, digit, i) => {\\n        if (digit % 2 === 0) {\\n            for (let j = 0; j < digits.length; j++) {\\n                if (j === i) {\\n                    continue;\\n                }\\n                for (let k = 0; k < digits.length; k++) {\\n                    if (k === i || k === j || digits[k] === 0) {\\n                        continue;\\n                    }\\n                    acc.add(Number(\\'\\' + digits[k] + digits[j] + digits[i]));\\n                }\\n            }\\n        }\\n        return acc;\\n    }, new Set())).sort((a, b) => a - b);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar findEvenNumbers = function(digits) {\\n    return Array.from(digits.reduce((acc, digit, i) => {\\n        if (digit % 2 === 0) {\\n            for (let j = 0; j < digits.length; j++) {\\n                if (j === i) {\\n                    continue;\\n                }\\n                for (let k = 0; k < digits.length; k++) {\\n                    if (k === i || k === j || digits[k] === 0) {\\n                        continue;\\n                    }\\n                    acc.add(Number(\\'\\' + digits[k] + digits[j] + digits[i]));\\n                }\\n            }\\n        }\\n        return acc;\\n    }, new Set())).sort((a, b) => a - b);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2863765,
                "title": "c-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> ans;\\n        vector<int> temp(10,0);\\n        \\n       for(int i=0;i<digits.size();i++){\\n           temp[digits[i]]++;\\n       }       \\n        for(int i=100;i<999;i+=2)                   \\n        {\\n            int d1=i/100;\\n            int d2=i/10%10;\\n            int d3=i%10;\\n            if(--temp[d1]>=0 & --temp[d2]>=0 & --temp[d3]>=0){\\n                ans.push_back(i); \\n            }\\n             temp[d1]++;\\n             temp[d2]++;\\n             temp[d3]++;                               \\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Enumeration"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> ans;\\n        vector<int> temp(10,0);\\n        \\n       for(int i=0;i<digits.size();i++){\\n           temp[digits[i]]++;\\n       }       \\n        for(int i=100;i<999;i+=2)                   \\n        {\\n            int d1=i/100;\\n            int d2=i/10%10;\\n            int d3=i%10;\\n            if(--temp[d1]>=0 & --temp[d2]>=0 & --temp[d3]>=0){\\n                ans.push_back(i); \\n            }\\n             temp[d1]++;\\n             temp[d2]++;\\n             temp[d3]++;                               \\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2751480,
                "title": "cpp-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& arr) \\n{\\n\\tvector<int>ans;\\n\\tvector<int>check(10,0);\\n\\tfor(int i=0;i<arr.size();i++)\\n\\t{\\n\\t\\tcheck[arr[i]]++;\\n\\t}\\n\\tfor(int i=100;i<=999;i++)\\n\\t{\\n\\t\\tif((i%2)!=0) continue;\\n\\t\\t\\n\\t\\tvector<int>v(10,0);\\n\\t\\tint num = i;\\n\\t    string str = to_string(num);\\n\\t    \\n\\t    for(int j=0;j<str.length();j++)\\n\\t    {\\n\\t    \\tint digit = str[j] - \\'0\\';\\n\\t    \\tv[digit]++;\\n\\t\\t}\\n\\t\\tbool flag=true;\\n\\t\\tfor(int i=0;i<10;i++)\\n\\t\\t{\\n\\t\\t   if(v[i] > check[i])\\n\\t\\t   {\\n\\t\\t     flag=false;\\n\\t\\t\\t break;\\t\\n\\t       }\\t\\n\\t\\t}\\n\\t\\tif(flag==true)\\n\\t\\t{\\n\\t\\t\\tans.push_back(i);\\n\\t\\t}\\n\\t}\\n\\treturn ans;\\n}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& arr) \\n{\\n\\tvector<int>ans;\\n\\tvector<int>check(10,0);\\n\\tfor(int i=0;i<arr.size();i++)\\n\\t{\\n\\t\\tcheck[arr[i]]++;\\n\\t}\\n\\tfor(int i=100;i<=999;i++)\\n\\t{\\n\\t\\tif((i%2)!=0) continue;\\n\\t\\t\\n\\t\\tvector<int>v(10,0);\\n\\t\\tint num = i;\\n\\t    string str = to_string(num);\\n\\t    \\n\\t    for(int j=0;j<str.length();j++)\\n\\t    {\\n\\t    \\tint digit = str[j] - \\'0\\';\\n\\t    \\tv[digit]++;\\n\\t\\t}\\n\\t\\tbool flag=true;\\n\\t\\tfor(int i=0;i<10;i++)\\n\\t\\t{\\n\\t\\t   if(v[i] > check[i])\\n\\t\\t   {\\n\\t\\t     flag=false;\\n\\t\\t\\t break;\\t\\n\\t       }\\t\\n\\t\\t}\\n\\t\\tif(flag==true)\\n\\t\\t{\\n\\t\\t\\tans.push_back(i);\\n\\t\\t}\\n\\t}\\n\\treturn ans;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2460637,
                "title": "java-solution",
                "content": "\\tclass Solution {\\n\\t\\tpublic int[] findEvenNumbers(int[] digits) {\\n\\t\\t\\tint[] digitsCount = new int[10];\\n\\t\\t\\tfor(int i : digits) digitsCount[i]++;\\n\\n\\t\\t\\tList<Integer> list = new ArrayList<>();\\n\\n\\t\\t\\tfor(int i=100; i<=998; i=i+2) {\\n\\t\\t\\t\\tif(checkNum(i, digitsCount)) list.add(i);\\n\\t\\t\\t} \\n\\t\\t\\treturn list.stream().mapToInt(x -> x).toArray();\\n\\t\\t}\\n\\n\\t\\tpublic boolean checkNum(int num, int[] digitsCount) {\\n\\t\\t\\tint[] numCount = new int[10];\\n\\n\\t\\t\\twhile(num != 0) {\\n\\t\\t\\t\\tnumCount[num%10]++;\\n\\t\\t\\t\\tnum/=10;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor(int i=0; i<10; i++)\\n\\t\\t\\t\\tif(numCount[i] > digitsCount[i]) return false;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}",
                "solutionTags": [],
                "code": "class Solution {\\n\\t\\tpublic int[] findEvenNumbers(int[] digits) {\\n\\t\\t\\tint[] digitsCount = new int[10];\\n\\t\\t\\tfor(int i : digits) digitsCount[i]++;\\n\\n\\t\\t\\tList<Integer> list = new ArrayList<>();\\n\\n\\t\\t\\tfor(int i=100; i<=998; i=i+2) {\\n\\t\\t\\t\\tif(checkNum(i, digitsCount)) list.add(i);\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2396303,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int freq[10] = {0};  \\n        vector<int> outVector;  \\n        for (int digit: digits) freq[digit]++;\\n        \\n        for (int num=100; num<999; num+=2) {\\n            int ones = num % 10;\\n            int tens = (num / 10) % 10;\\n            int hundreds = (num / 100);\\n            \\n            freq[ones]--;\\n            freq[tens]--;\\n            freq[hundreds]--;\\n            \\n            if (freq[ones] >= 0 && freq[tens] >= 0 && freq[hundreds] >= 0) outVector.push_back(num);\\n            \\n            freq[ones]++;\\n            freq[tens]++;\\n            freq[hundreds]++;\\n            \\n        }\\n        \\n        return outVector;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int freq[10] = {0};  \\n        vector<int> outVector;  \\n        for (int digit: digits) freq[digit]++;\\n        \\n        for (int num=100; num<999; num+=2) {\\n            int ones = num % 10;\\n            int tens = (num / 10) % 10;\\n            int hundreds = (num / 100);\\n            \\n            freq[ones]--;\\n            freq[tens]--;\\n            freq[hundreds]--;\\n            \\n            if (freq[ones] >= 0 && freq[tens] >= 0 && freq[hundreds] >= 0) outVector.push_back(num);\\n            \\n            freq[ones]++;\\n            freq[tens]++;\\n            freq[hundreds]++;\\n            \\n        }\\n        \\n        return outVector;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2373017,
                "title": "c-counting-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& a) \\n    {\\n       vector<int> cnt(10,0);\\n        for(int i=0;i<a.size();i++)\\n        {\\n            cnt[a[i]]++;\\n        }\\n        vector<int> res;\\n        for(int num=100;num<1000;num+=2)\\n        {\\n            vector<int> curr_cnt(10,0);\\n            int temp=num;\\n            \\n            while(temp)\\n            {\\n                curr_cnt[temp%10]++;\\n                temp/=10;\\n            }\\n            bool flag=true;\\n            for(int i=0;i<10;i++)\\n            {\\n                if(curr_cnt[i]>cnt[i])\\n                {\\n                    flag=false;\\n                    break;\\n                }\\n            }\\n            if(flag)\\n            {\\n                res.push_back(num);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n//if you like the solution plz upvote.",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& a) \\n    {\\n       vector<int> cnt(10,0);\\n        for(int i=0;i<a.size();i++)\\n        {\\n            cnt[a[i]]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2354942,
                "title": "python-short-simple-dict-sorting",
                "content": "```\\ndef findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        res = []\\n        dic = Counter(digits) \\n        for num in range(100,1000,2):\\n            flag = 0\\n            for i,j in Counter(str(num)).items():\\n                if dic[int(i)] < j:\\n                    flag = 1\\n            if flag == 0:\\n                res.append(num)\\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        res = []\\n        dic = Counter(digits) \\n        for num in range(100,1000,2):\\n            flag = 0\\n            for i,j in Counter(str(num)).items():\\n                if dic[int(i)] < j:\\n                    flag = 1\\n            if flag == 0:\\n                res.append(num)\\n        return res\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2156932,
                "title": "python-one-line-solution",
                "content": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        \\n        return sorted({i*100 + j*10 + k for i,j,k in permutations(digits,3) if i!=0 and k%2==0})\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        \\n        return sorted({i*100 + j*10 + k for i,j,k in permutations(digits,3) if i!=0 and k%2==0})\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2053624,
                "title": "linear-solution-in-golang",
                "content": "```go\\nfunc findEvenNumbers(digits []int) []int {\\n  var counts [10]int\\n  for _, digit := range digits {\\n    counts[digit]++\\n  }\\n  var res []int\\n  for num := 100; num <= 998; num = num+2 {\\n    var numc [10]int\\n    numc[num%10]++\\n    numc[(num/10)%10]++\\n    numc[(num/100)%10]++\\n    found := true\\n    for i := 0; i < 10; i++ {\\n      if counts[i] < numc[i] {\\n        found = false\\n        break\\n      }\\n    }\\n    if found {\\n      res = append(res, num)\\n    }\\n  }\\n  return res\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc findEvenNumbers(digits []int) []int {\\n  var counts [10]int\\n  for _, digit := range digits {\\n    counts[digit]++\\n  }\\n  var res []int\\n  for num := 100; num <= 998; num = num+2 {\\n    var numc [10]int\\n    numc[num%10]++\\n    numc[(num/10)%10]++\\n    numc[(num/100)%10]++\\n    found := true\\n    for i := 0; i < 10; i++ {\\n      if counts[i] < numc[i] {\\n        found = false\\n        break\\n      }\\n    }\\n    if found {\\n      res = append(res, num)\\n    }\\n  }\\n  return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1975467,
                "title": "explainable-python-code-with-minimum-in-built-functions-for-faang-interviews",
                "content": "\\'\\'\\'\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n\\t\\n        List = []\\n        for i in range(len(digits)):\\n            for j in range(len(digits)):\\n                for k in range(len(digits)):\\n                    if i != j != k and i != k and digits[i] %2 == 0 and digits[k] != 0:\\n                        List.append(digits[k]*100 + digits[j]*10 + digits[i])\\n        return sorted(set(List))\\n        \\n\\'\\'\\'\\n",
                "solutionTags": [],
                "code": "\\'\\'\\'\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n\\t\\n        List = []\\n        for i in range(len(digits)):\\n            for j in range(len(digits)):\\n                for k in range(len(digits)):\\n                    if i != j != k and i != k and digits[i] %2 == 0 and digits[k] != 0:\\n                        List.append(digits[k]*100 + digits[j]*10 + digits[i])\\n        return sorted(set(List))\\n        \\n\\'\\'\\'\\n",
                "codeTag": "Java"
            },
            {
                "id": 1927731,
                "title": "java-counting-easy-solution",
                "content": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] count = new int[10];\\n        List<Integer> res = new LinkedList();\\n        for(int d: digits)\\n            count[d]++;\\n        for(int i=1; i<=9; i++){\\n            if(count[i]==0)\\n                continue;\\n            count[i]--;\\n            for(int j=0; j<=9; j++){\\n                if(count[j]==0)\\n                    continue;\\n                count[j]--;\\n                for(int k=0; k<=9; k+=2){\\n                    if(count[k]==0)\\n                        continue;\\n                    res.add(i*100+j*10+k);\\n                }\\n                count[j]++;\\n            }\\n            count[i]++;\\n        }\\n        return res.stream().mapToInt(i->i).toArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] count = new int[10];\\n        List<Integer> res = new LinkedList();\\n        for(int d: digits)\\n            count[d]++;\\n        for(int i=1; i<=9; i++){\\n            if(count[i]==0)\\n                continue;\\n            count[i]--;\\n            for(int j=0; j<=9; j++){\\n                if(count[j]==0)\\n                    continue;\\n                count[j]--;\\n                for(int k=0; k<=9; k+=2){\\n                    if(count[k]==0)\\n                        continue;\\n                    res.add(i*100+j*10+k);\\n                }\\n                count[j]++;\\n            }\\n            count[i]++;\\n        }\\n        return res.stream().mapToInt(i->i).toArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1857712,
                "title": "1-line-python-solution-40-faster-memory-less-than-70",
                "content": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        return [\\'\\'.join([str(i) for i in x]) for x in sorted(set(permutations(digits,3))) if x[2]%2==0 and x[0]!=0]\\n```\\n-------------------\\n***----- Taha Choura -----***\\n*taha.choura@outlook.com*",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        return [\\'\\'.join([str(i) for i in x]) for x in sorted(set(permutations(digits,3))) if x[2]%2==0 and x[0]!=0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1786352,
                "title": "c-permutation-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> freq(10);\\n        for(int e: digits){\\n            freq[e]++;\\n        }\\n        \\n        vector<int> ans;\\n        \\n        for(int i=1; i<=9; i++){\\n            if(freq[i] == 0){\\n                continue;\\n            }\\n            freq[i]--;\\n            int ones = i;\\n            for(int j=0; j<=9; j++){\\n                if(freq[j] == 0){\\n                    continue;\\n                }\\n                freq[j]--;\\n                int tens = ones*10 + j;\\n                \\n                for(int k=0 ; k < 9; k+=2 ){\\n                    if(freq[k] == 0){\\n                        continue;\\n                    }\\n                    freq[k]--;\\n                    int num = tens*10 + k;\\n                    ans.push_back(num);\\n                    freq[k]++;\\n                }\\n                freq[j]++;\\n            }\\n            freq[i]++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Array",
                    "Backtracking"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> freq(10);\\n        for(int e: digits){\\n            freq[e]++;\\n        }\\n        \\n        vector<int> ans;\\n        \\n        for(int i=1; i<=9; i++){\\n            if(freq[i] == 0){\\n                continue;\\n            }\\n            freq[i]--;\\n            int ones = i;\\n            for(int j=0; j<=9; j++){\\n                if(freq[j] == 0){\\n                    continue;\\n                }\\n                freq[j]--;\\n                int tens = ones*10 + j;\\n                \\n                for(int k=0 ; k < 9; k+=2 ){\\n                    if(freq[k] == 0){\\n                        continue;\\n                    }\\n                    freq[k]--;\\n                    int num = tens*10 + k;\\n                    ans.push_back(num);\\n                    freq[k]++;\\n                }\\n                freq[j]++;\\n            }\\n            freq[i]++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1773738,
                "title": "python-faster-than-80-easy-to-understand",
                "content": "1. We sort the digits list and form the greatest 3 digit number that can be made from the list and traverse from 100 to the number we formerd ( or ) 100 to 999.\\n1. Each iteration, `i` is incremented by 2, since only even number is asked\\n1. We convert the number into a string and store the digits as `a` ,`b`and `c` respectively\\n1. For each even number we first check whether their digits (i.e `a` ,`b`and `c` ) are present in the `digits` list, if not next iteration continues\\n1. To check if any repeated digits like 222 , 224, 886 etc.., we check `a`  is equal to `b` or  `c` or `b` == `c`, so if digits are repeated we check their count in `digits`, if the count in `digits` is equal or greater than that in `i` we append it to `l`\\n1. If not digits are repeated append it to `l`\\n\\n\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        l=[]\\n        digits.sort()\\n        maxi=digits[-1]*100+digits[-2]*10+digits[-3]\\n        for i in range(100,maxi+1,2):\\n            s=str(i)\\n            a=int(s[0])\\n            b=int(s[1])\\n            c=int(s[2])\\n            if(a not in digits or b not in digits or c not in digits):\\n                continue\\n            if(a==b or b==c or a==c):\\n                if(a==b and b==c):\\n                    if(digits.count(a)>=3):\\n                        l.append(i)\\n                elif(a==b):\\n                    if(digits.count(a)>=2):\\n                        l.append(i)\\n                elif a==c:\\n                    if(digits.count(a)>=2):\\n                        l.append(i)\\n                elif b==c:\\n                    if(digits.count(b)>=2):\\n                        l.append(i)\\n            else:\\n                l.append(i)\\n        return l\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        l=[]\\n        digits.sort()\\n        maxi=digits[-1]*100+digits[-2]*10+digits[-3]\\n        for i in range(100,maxi+1,2):\\n            s=str(i)\\n            a=int(s[0])\\n            b=int(s[1])\\n            c=int(s[2])\\n            if(a not in digits or b not in digits or c not in digits):\\n                continue\\n            if(a==b or b==c or a==c):\\n                if(a==b and b==c):\\n                    if(digits.count(a)>=3):\\n                        l.append(i)\\n                elif(a==b):\\n                    if(digits.count(a)>=2):\\n                        l.append(i)\\n                elif a==c:\\n                    if(digits.count(a)>=2):\\n                        l.append(i)\\n                elif b==c:\\n                    if(digits.count(b)>=2):\\n                        l.append(i)\\n            else:\\n                l.append(i)\\n        return l\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1741217,
                "title": "ruby-2-lines",
                "content": "```\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef find_even_numbers(digits)\\n  h = digits.tally\\n  100.step(999, 2).filter { |x| x.digits.tally.all? { |d, c| h.fetch(d, 0) >= c } }\\nend\\n```",
                "solutionTags": [],
                "code": "```\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef find_even_numbers(digits)\\n  h = digits.tally\\n  100.step(999, 2).filter { |x| x.digits.tally.all? { |d, c| h.fetch(d, 0) >= c } }\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1712422,
                "title": "python-easy-8-lines-effective-5-lines",
                "content": "```\\nfrom collections import Counter\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        even, freq, res = list(range(100, 999, 2)), Counter(digits), []\\n        for num in even:\\n            if not Counter(int(digit) for digit in str(num)) - freq:\\n                res.append(num)\\n        return res\\n```\\n",
                "solutionTags": [],
                "code": "```\\nfrom collections import Counter\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        even, freq, res = list(range(100, 999, 2)), Counter(digits), []\\n        for num in even:\\n            if not Counter(int(digit) for digit in str(num)) - freq:\\n                res.append(num)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1636339,
                "title": "java-o-n-99-70-faster-2-ms",
                "content": "```\\npublic int[] findEvenNumbers(int[] digits) {\\n        int num, arr[] = new int[10];\\n        for (int x : digits)\\n            arr[x]++;\\n        List<Integer> list = new ArrayList<>(1000);\\n        for (int i = 1; i < 10; i++) \\n            if (arr[i] > 0) {\\n                arr[i]--;\\n                for (int j = 0; j < 10; j++) \\n                    if (arr[j] > 0) {\\n                        arr[j]--;\\n                        num = i * 100 + j * 10;\\n                        for (int k = 0; k < 10; k += 2)\\n                            if (arr[k] > 0) {\\n                                list.add(num + k);\\n                            }\\n                        arr[j]++;\\n                    }\\n                ++arr[i];\\n            }\\n        int i = 0;\\n        int ans[] = new int[list.size()];\\n        for (int x : list) {\\n            ans[i++] = x;\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int[] findEvenNumbers(int[] digits) {\\n        int num, arr[] = new int[10];\\n        for (int x : digits)\\n            arr[x]++;\\n        List<Integer> list = new ArrayList<>(1000);\\n        for (int i = 1; i < 10; i++) \\n            if (arr[i] > 0) {\\n                arr[i]--;\\n                for (int j = 0; j < 10; j++) \\n                    if (arr[j] > 0) {\\n                        arr[j]--;\\n                        num = i * 100 + j * 10;\\n                        for (int k = 0; k < 10; k += 2)\\n                            if (arr[k] > 0) {\\n                                list.add(num + k);\\n                            }\\n                        arr[j]++;\\n                    }\\n                ++arr[i];\\n            }\\n        int i = 0;\\n        int ans[] = new int[list.size()];\\n        for (int x : list) {\\n            ans[i++] = x;\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1628893,
                "title": "backtracking-unordered-set-time-complexity-off-the-charts",
                "content": "```\\nclass Solution {\\npublic:\\n    unordered_set<int> uset;\\n    void func(vector<int>& digits,int index,int num,int adds,const int &n,vector<bool> &v){\\n        if(adds==3){\\n            if((num&1)==0)\\n                uset.insert(num);\\n            return;\\n        }\\n        int f=(num *10);\\n        for(int i=0;i<n;++i){\\n            if((v[i]) or (adds==0 and digits[i]==0) or (adds==2 and (digits[i]&1)))continue;\\n            v[i]=1;\\n            func(digits,i+1,(f + digits[i]),adds+1,n,v);\\n            v[i]=0;\\n        }\\n    }\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        const int n=digits.size();\\n        vector<bool> v(n,0);\\n        func(digits,0,0,0,n,v);\\n        vector<int> ans;\\n        for(auto &it :uset){\\n            ans.push_back(it);\\n        }\\n        sort(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    unordered_set<int> uset;\\n    void func(vector<int>& digits,int index,int num,int adds,const int &n,vector<bool> &v){\\n        if(adds==3){\\n            if((num&1)==0)\\n                uset.insert(num);\\n            return;\\n        }\\n        int f=(num *10);\\n        for(int i=0;i<n;++i){\\n            if((v[i]) or (adds==0 and digits[i]==0) or (adds==2 and (digits[i]&1)))continue;\\n            v[i]=1;\\n            func(digits,i+1,(f + digits[i]),adds+1,n,v);\\n            v[i]=0;\\n        }\\n    }\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        const int n=digits.size();\\n        vector<bool> v(n,0);\\n        func(digits,0,0,0,n,v);\\n        vector<int> ans;\\n        for(auto &it :uset){\\n            ans.push_back(it);\\n        }\\n        sort(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1628535,
                "title": "python-intutive-solution",
                "content": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        l = set()\\n        for i in range(len(digits)):\\n            s = digits[i]*100\\n            if s==0:\\n                continue\\n            for j in range(len(digits)):\\n                if i==j:\\n                    continue\\n                s1 = s + digits[j]*10\\n            \\n                for k in range(len(digits)):\\n                    if j==k or i==k:\\n                        continue\\n                    if digits[k]%2!=0:\\n                        continue\\n                    \\n                    s2 = s1 + digits[k]\\n                    if s2%2==0:\\n                        l.add(s2)\\n                        \\n        return sorted(l)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        l = set()\\n        for i in range(len(digits)):\\n            s = digits[i]*100\\n            if s==0:\\n                continue\\n            for j in range(len(digits)):\\n                if i==j:\\n                    continue\\n                s1 = s + digits[j]*10\\n            \\n                for k in range(len(digits)):\\n                    if j==k or i==k:\\n                        continue\\n                    if digits[k]%2!=0:\\n                        continue\\n                    \\n                    s2 = s1 + digits[k]\\n                    if s2%2==0:\\n                        l.add(s2)\\n                        \\n        return sorted(l)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1628076,
                "title": "java-easy-solution-without-backtracking",
                "content": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int count[]=new int[10];\\n        for(int i:digits)\\n            count[i]++;\\n        boolean flag;\\n        ArrayList<Integer> result=new ArrayList<>();\\n        for(int i=100;i<=999;i++){\\n            count[i/100]--;\\n            count[i%10]--;\\n            count[i/10%10]--;\\n            flag=true;\\n            for(int j:count) if(j<0) flag=false;\\n            if(flag&&i%2==0) result.add(i);\\n            count[i/100]++;\\n            count[i%10]++;\\n            count[i/10%10]++;\\n            \\n        }\\n        int res[]=new int[result.size()];\\n        for(int i=0;i<res.length;i++)\\n            res[i]=result.get(i);\\n        return res;\\n    }\\n    \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int count[]=new int[10];\\n        for(int i:digits)\\n            count[i]++;\\n        boolean flag;\\n        ArrayList<Integer> result=new ArrayList<>();\\n        for(int i=100;i<=999;i++){\\n            count[i/100]--;\\n            count[i%10]--;\\n            count[i/10%10]--;\\n            flag=true;\\n            for(int j:count) if(j<0) flag=false;\\n            if(flag&&i%2==0) result.add(i);\\n            count[i/100]++;\\n            count[i%10]++;\\n            count[i/10%10]++;\\n            \\n        }\\n        int res[]=new int[result.size()];\\n        for(int i=0;i<res.length;i++)\\n            res[i]=result.get(i);\\n        return res;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1626219,
                "title": "javascript-backtracking",
                "content": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\n var findEvenNumbers = function(digits) {\\n    const set = new Set();\\n    const isUsed = new Array(digits.length).fill(false);\\n    backtrack(digits, 0, \\'\\', isUsed, set);\\n    return Array.from(set).sort((a, b) => a - b);\\n};\\n\\nvar backtrack = function(digits, idx, curr, isUsed, set) {\\n    if (idx == 3) {\\n        const val = parseInt(curr);\\n        set.add(val);\\n        return;\\n    } \\n    for (let i = 0; i < digits.length; i++) {\\n        if (isUsed[i] ||\\n            (idx == 0 && digits[i] == 0 ) ||\\n            ( idx == 2 && digits[i] % 2 != 0)) {\\n            continue;\\n        }\\n        isUsed[i] = true;\\n        backtrack(digits, idx + 1, curr + digits[i], isUsed, set);\\n        isUsed[i] = false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Backtracking"
                ],
                "code": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\n var findEvenNumbers = function(digits) {\\n    const set = new Set();\\n    const isUsed = new Array(digits.length).fill(false);\\n    backtrack(digits, 0, \\'\\', isUsed, set);\\n    return Array.from(set).sort((a, b) => a - b);\\n};\\n\\nvar backtrack = function(digits, idx, curr, isUsed, set) {\\n    if (idx == 3) {\\n        const val = parseInt(curr);\\n        set.add(val);\\n        return;\\n    } \\n    for (let i = 0; i < digits.length; i++) {\\n        if (isUsed[i] ||\\n            (idx == 0 && digits[i] == 0 ) ||\\n            ( idx == 2 && digits[i] % 2 != 0)) {\\n            continue;\\n        }\\n        isUsed[i] = true;\\n        backtrack(digits, idx + 1, curr + digits[i], isUsed, set);\\n        isUsed[i] = false;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1620455,
                "title": "java-2ms-99-explanations",
                "content": "```\\nclass Solution {\\n    /** Algorithm\\n\\tNote: Doing permutations is a solution but there are up to 100 digits. This would to be too slow.\\n     *  1. Count how many unique digits there are in digits[] array. (x 0s, y 1s, z 2s etc).\\n     *  2. Loop from 100 to 998 by 2 and check if the number can be formed.\\n     *  3. For each number, determine if each of its digits count is lower or equal than the digit count of the given array\\n     */\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] digitCount = new int[10];\\n        for (int digit : digits) {\\n            digitCount[digit]++;\\n        }\\n        int[] evenNrs = new int[450];\\n        int index = 0;\\n        for (int i = 100; i <= 998; i += 2) {\\n            if (canBeFormed(i, digitCount)) {\\n                evenNrs[index++] = i;\\n            }\\n        }\\n        return Arrays.copyOf(evenNrs, index);\\n    }\\n\\n    private boolean canBeFormed(int number, int[] digitCount) {\\n        int[] numberDigits = new int[10];\\n        int modulo;\\n        while (number > 0) {\\n            modulo = number % 10;\\n            numberDigits[modulo]++;\\n            number /= 10;\\n        }\\n        for (int i = 0; i < numberDigits.length; i++) {\\n            if (numberDigits[i] > digitCount[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    /** Algorithm\\n\\tNote: Doing permutations is a solution but there are up to 100 digits. This would to be too slow.\\n     *  1. Count how many unique digits there are in digits[] array. (x 0s, y 1s, z 2s etc).\\n     *  2. Loop from 100 to 998 by 2 and check if the number can be formed.\\n     *  3. For each number, determine if each of its digits count is lower or equal than the digit count of the given array\\n     */\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] digitCount = new int[10];\\n        for (int digit : digits) {\\n            digitCount[digit]++;\\n        }\\n        int[] evenNrs = new int[450];\\n        int index = 0;\\n        for (int i = 100; i <= 998; i += 2) {\\n            if (canBeFormed(i, digitCount)) {\\n                evenNrs[index++] = i;\\n            }\\n        }\\n        return Arrays.copyOf(evenNrs, index);\\n    }\\n\\n    private boolean canBeFormed(int number, int[] digitCount) {\\n        int[] numberDigits = new int[10];\\n        int modulo;\\n        while (number > 0) {\\n            modulo = number % 10;\\n            numberDigits[modulo]++;\\n            number /= 10;\\n        }\\n        for (int i = 0; i < numberDigits.length; i++) {\\n            if (numberDigits[i] > digitCount[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1618811,
                "title": "python3-fast-straightforward-and-easily-extendable",
                "content": "There are explanations as comments in the code\\n\\n```\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n\\t\\t\\n\\t\\t# counter of the digits\\n        dictD = Counter(str(d) for d in digits)\\n\\t\\t\\n\\t\\t# 1-digit even numbers as strings\\n        listS = [*filter(lambda x: not int(x)&1, dictD)]\\n\\t\\t\\n\\t\\t# iterate twice more so that listS has 3-digit even numbers as strings\\n        for _ in range(2):\\n            listS = [ d+s for d in dictD for s in listS if dictD[d]>s.count(d) ]\\n        \\n        return sorted([ int(s) for s in setS if int(s)>99 ])\\n```",
                "solutionTags": [],
                "code": "```\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n\\t\\t\\n\\t\\t# counter of the digits\\n        dictD = Counter(str(d) for d in digits)\\n\\t\\t\\n\\t\\t# 1-digit even numbers as strings\\n        listS = [*filter(lambda x: not int(x)&1, dictD)]\\n\\t\\t\\n\\t\\t# iterate twice more so that listS has 3-digit even numbers as strings\\n        for _ in range(2):\\n            listS = [ d+s for d in dictD for s in listS if dictD[d]>s.count(d) ]\\n        \\n        return sorted([ int(s) for s in setS if int(s)>99 ])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1615296,
                "title": "2094-finding-3-digit-even-numbers",
                "content": "```\\nclass Solution {\\n    public boolean check(int i,int freq[]){\\n        int freq2[]=new int[10];\\n        while(i!=0){\\n            freq2[i%10]++;\\n            i=i/10;\\n        }\\n        for(int j=0;j<=9;j++)\\n            if(freq2[j]>freq[j])\\n                return false;\\n        return true;\\n    }\\n    public int[] findEvenNumbers(int[] digits) {\\n        ArrayList<Integer> a=new ArrayList<Integer>();\\n        int[] freq=new int[10];\\n        for(int i:digits)\\n            freq[i]++;\\n        for(int i=100;i<=998;i+=2){\\n            if(check(i,freq))\\n                a.add(i);\\n        }\\n        int[] ans=new int[a.size()];\\n        int index=0;\\n        for(int r:a){\\n            ans[index++]=r;\\n        }\\n        Arrays.sort(ans);\\n        return ans;\\n    }\\n}\\n```\\n\\n**Upvote if you liked the approach and yes learnt this approach from @striver_79 . So, one upvote for him**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean check(int i,int freq[]){\\n        int freq2[]=new int[10];\\n        while(i!=0){\\n            freq2[i%10]++;\\n            i=i/10;\\n        }\\n        for(int j=0;j<=9;j++)\\n            if(freq2[j]>freq[j])\\n                return false;\\n        return true;\\n    }\\n    public int[] findEvenNumbers(int[] digits) {\\n        ArrayList<Integer> a=new ArrayList<Integer>();\\n        int[] freq=new int[10];\\n        for(int i:digits)\\n            freq[i]++;\\n        for(int i=100;i<=998;i+=2){\\n            if(check(i,freq))\\n                a.add(i);\\n        }\\n        int[] ans=new int[a.size()];\\n        int index=0;\\n        for(int r:a){\\n            ans[index++]=r;\\n        }\\n        Arrays.sort(ans);\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1614423,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn find_even_numbers(mut digits: Vec<i32>) -> Vec<i32> {\\n        let mut res = Vec::new();\\n        digits.sort_unstable();\\n\\n        let mut prev_x = -1;\\n        for (i, &x) in digits.iter().enumerate().filter(|(_, &x)| x % 2 == 0) {\\n            match x == prev_x {\\n                true => continue,\\n                false => prev_x = x,\\n            }\\n\\n            let mut prev_y = -1;\\n            for (j, &y) in digits.iter().enumerate().filter(|(j, _)| *j != i) {\\n                match y == prev_y {\\n                    true => continue,\\n                    false => prev_y = y,\\n                }\\n\\n                let mut prev_z = -1;\\n                for (_, &z) in digits\\n                    .iter()\\n                    .enumerate()\\n                    .filter(|&(k, z)| k != i && k != j && *z > 0)\\n                {\\n                    match z == prev_z {\\n                        true => continue,\\n                        false => {\\n                            res.push(x + 10 * y + 100 * z);\\n                            prev_z = z;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        res.sort_unstable();\\n        res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn find_even_numbers(mut digits: Vec<i32>) -> Vec<i32> {\\n        let mut res = Vec::new();\\n        digits.sort_unstable();\\n\\n        let mut prev_x = -1;\\n        for (i, &x) in digits.iter().enumerate().filter(|(_, &x)| x % 2 == 0) {\\n            match x == prev_x {\\n                true => continue,\\n                false => prev_x = x,\\n            }\\n\\n            let mut prev_y = -1;\\n            for (j, &y) in digits.iter().enumerate().filter(|(j, _)| *j != i) {\\n                match y == prev_y {\\n                    true => continue,\\n                    false => prev_y = y,\\n                }\\n\\n                let mut prev_z = -1;\\n                for (_, &z) in digits\\n                    .iter()\\n                    .enumerate()\\n                    .filter(|&(k, z)| k != i && k != j && *z > 0)\\n                {\\n                    match z == prev_z {\\n                        true => continue,\\n                        false => {\\n                            res.push(x + 10 * y + 100 * z);\\n                            prev_z = z;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        res.sort_unstable();\\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1614260,
                "title": "c-simplest-solution-o-n-time-o-1-space-easy-to-understand-100-faster",
                "content": "**Runtime:** 0 ms, faster than **100.00%** of C++ online submissions for Finding 3-Digit Even Numbers.\\n**Memory Usage:** 9 MB, less than **100.00%** of C++ online submissions for Finding 3-Digit Even Numbers.\\n\\nExplaination:\\n\\ncount all elements in given digits array.\\nCheck for all numbers between 100 to 999 whether it can be formed by the digits present in digits vector.\\n```\\nvector<int>ans;\\n        vector<int>t(10,0);\\n        for(int i:digits) t[i]++;\\n        for(int i=1;i<10;i++){\\n            if(t[i] == 0) continue;\\n            else t[i]--;\\n            for(int j=0;j<10;j++){\\n                if(t[j] == 0) continue;\\n                else t[j]--;\\n                for(int k=0;k<10;k++){\\n                    if(k%2 != 0 || t[k]==0) continue;\\n                    ans.push_back(i*100 + j*10 + k);\\n                }\\n                t[j]++;\\n            }\\n            t[i]++;\\n        }\\n        return ans;\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nvector<int>ans;\\n        vector<int>t(10,0);\\n        for(int i:digits) t[i]++;\\n        for(int i=1;i<10;i++){\\n            if(t[i] == 0) continue;\\n            else t[i]--;\\n            for(int j=0;j<10;j++){\\n                if(t[j] == 0) continue;\\n                else t[j]--;\\n                for(int k=0;k<10;k++){\\n                    if(k%2 != 0 || t[k]==0) continue;\\n                    ans.push_back(i*100 + j*10 + k);\\n                }\\n                t[j]++;\\n            }\\n            t[i]++;\\n        }\\n        return ans;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1614143,
                "title": "c-dp-brute-force",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    unordered_set<int>uset;\\n    unordered_set<string>dp;\\n    void dfs(vector<int>&digits,string num,vector<bool>visited){\\n        if(num.size()>3) return ;\\n        if(num.size()==2 and dp.count(num)>0) return;\\n        if(num.size()==3){\\n            return;\\n        }\\n        for(int i=0;i<digits.size();i++){\\n            if(!visited[i]){\\n                if(num.size()==0){\\n                    if(digits[i]!=0){\\n                        visited[i]=true;\\n                        string str=num+to_string(digits[i]);\\n                        dfs(digits,str,visited);\\n                        visited[i]=false;\\n                    }\\n                }else if(num.size()==2 and digits[i]%2==0){\\n                    uset.insert(stol(num+to_string(digits[i])));\\n                }else{\\n                    visited[i]=true;\\n                    string str=num+to_string(digits[i]);\\n                    dfs(digits,str,visited);\\n                    visited[i]=false;\\n                }\\n            }\\n        }\\n        if(num.size()==2) dp.insert(num);\\n    }\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int n=digits.size();\\n        vector<bool>visited(n,false);\\n        dfs(digits,\"\",visited);\\n        vector<int>ans;\\n        for(auto& it:uset) ans.push_back(it);\\n        sort(begin(ans),end(ans));\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Dynamic Programming",
                    "Backtracking",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    unordered_set<int>uset;\\n    unordered_set<string>dp;\\n    void dfs(vector<int>&digits,string num,vector<bool>visited){\\n        if(num.size()>3) return ;\\n        if(num.size()==2 and dp.count(num)>0) return;\\n        if(num.size()==3){\\n            return;\\n        }\\n        for(int i=0;i<digits.size();i++){\\n            if(!visited[i]){\\n                if(num.size()==0){\\n                    if(digits[i]!=0){\\n                        visited[i]=true;\\n                        string str=num+to_string(digits[i]);\\n                        dfs(digits,str,visited);\\n                        visited[i]=false;\\n                    }\\n                }else if(num.size()==2 and digits[i]%2==0){\\n                    uset.insert(stol(num+to_string(digits[i])));\\n                }else{\\n                    visited[i]=true;\\n                    string str=num+to_string(digits[i]);\\n                    dfs(digits,str,visited);\\n                    visited[i]=false;\\n                }\\n            }\\n        }\\n        if(num.size()==2) dp.insert(num);\\n    }\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int n=digits.size();\\n        vector<bool>visited(n,false);\\n        dfs(digits,\"\",visited);\\n        vector<int>ans;\\n        for(auto& it:uset) ans.push_back(it);\\n        sort(begin(ans),end(ans));\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1613861,
                "title": "python-slightly-different-solution-in-case-anyone-s-interested",
                "content": "Really amazing solutions from various participants. I am sharing mine as I felt mine was a slightly different approach - *just in case anyone\\'s interested*. This solution won\\'t scale very well with increasing the number of digits\\n\\nGeneral Idea:\\n* Since it\\'s 3 digit even numbers, rather than trying to form numbers with the given digits, I check the inverse - Between 100 to 998, which of the even numbers can be formed by the given digits.\\n* I convert the digits array into a counter and for each number between 100 to 998, I check whether the number can be formed by the digit_counter. \\n* Run time wise, my solution runs in 81ms where other optimized python 3 solutions take 81ms. Memorywise, I am slightly better at 14.2Mb where as optimized python 3 solutions take 14.4Mb.\\n\\n\\n```\\ndef findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        digit_counter = {}\\n        for d in digits:\\n            digit_counter[d] = digit_counter.get(d,0) + 1\\n        \\n        results = []\\n        \\n        for num in range(100, 999, 2):\\n            local_counter = {}\\n            temp = num\\n            while temp:\\n                local_dig = temp%10\\n                temp = temp//10\\n                local_counter[local_dig] = local_counter.get(local_dig,0) + 1\\n            \\n            flag = True\\n            for lc in local_counter.keys():\\n                if local_counter[lc] > digit_counter.get(lc,0):\\n                    flag = False\\n                    break\\n                \\n            if flag:\\n                results.append(num)\\n        \\n        return results\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        digit_counter = {}\\n        for d in digits:\\n            digit_counter[d] = digit_counter.get(d,0) + 1\\n        \\n        results = []\\n        \\n        for num in range(100, 999, 2):\\n            local_counter = {}\\n            temp = num\\n            while temp:\\n                local_dig = temp%10\\n                temp = temp//10\\n                local_counter[local_dig] = local_counter.get(local_dig,0) + 1\\n            \\n            flag = True\\n            for lc in local_counter.keys():\\n                if local_counter[lc] > digit_counter.get(lc,0):\\n                    flag = False\\n                    break\\n                \\n            if flag:\\n                results.append(num)\\n        \\n        return results\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1613709,
                "title": "java-o-n-3-loops",
                "content": "1) Count the number of digits:\\ne.g. [0,1,2,2]\\ndigits: 0 1 2 3 4 5 6 7 8 9\\nnums: 1 1 2 0 0 0 0 0 0 0\\n\\n2) Run 3 loops and for each loop decrease a digit from nums.\\n3) When each loop ends remember to increase a digit to not lose it.\\n\\n```\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] nums = new int[10];\\n        List<Integer> result = new ArrayList<>();\\n        \\n        for (int i = 0; i < digits.length; i++) {\\n            nums[digits[i]]++;\\n        }\\n        \\n        for (int digit = 1; digit <= 9; digit++) {\\n            \\n            int num = 0;\\n            if (nums[digit] > 0) {\\n                nums[digit]--;\\n                \\n                for (int digit2 = 0; digit2 <= 9; digit2++) {\\n                    if (nums[digit2] > 0) {\\n                        nums[digit2]--;\\n                        \\n                        for (int digit3 = 0; digit3 <= 8; digit3 += 2) {\\n                            if (nums[digit3] > 0) {\\n                                num = digit*100 + digit2*10 + digit3;\\n                                result.add(num);\\n                            }\\n                        }\\n                        nums[digit2]++;\\n                    }\\n                }\\n                nums[digit]++;   \\n            }        \\n        }\\n        \\n        int[] arr = new int[result.size()];\\n        for (int i = 0; i < result.size(); i++)\\n            arr[i] = result.get(i);\\n        \\n        return arr;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] nums = new int[10];\\n        List<Integer> result = new ArrayList<>();\\n        \\n        for (int i = 0; i < digits.length; i++) {\\n            nums[digits[i]]++;\\n        }\\n        \\n        for (int digit = 1; digit <= 9; digit++) {\\n            \\n            int num = 0;\\n            if (nums[digit] > 0) {\\n                nums[digit]--;\\n                \\n                for (int digit2 = 0; digit2 <= 9; digit2++) {\\n                    if (nums[digit2] > 0) {\\n                        nums[digit2]--;\\n                        \\n                        for (int digit3 = 0; digit3 <= 8; digit3 += 2) {\\n                            if (nums[digit3] > 0) {\\n                                num = digit*100 + digit2*10 + digit3;\\n                                result.add(num);\\n                            }\\n                        }\\n                        nums[digit2]++;\\n                    }\\n                }\\n                nums[digit]++;   \\n            }        \\n        }\\n        \\n        int[] arr = new int[result.size()];\\n        for (int i = 0; i < result.size(); i++)\\n            arr[i] = result.get(i);\\n        \\n        return arr;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1613497,
                "title": "backtrack-java",
                "content": "```\\npublic int[] findEvenNumbers(int[] digits) {\\n        Arrays.sort(digits);\\n        boolean[] used = new boolean[digits.length];\\n        List<Integer> list = new ArrayList<>();\\n        StringBuilder sb = new StringBuilder();\\n        backtrack(digits, used, list, sb, 0);\\n        int[] res = new int[list.size()];\\n        for(int i = 0; i < list.size(); i++) {\\n            res[i] = list.get(i);\\n        }\\n        return res;\\n    }\\n    public void backtrack(int[] digits, boolean[] used, List<Integer> list, StringBuilder sb, int start) {\\n        if(sb.length() == 3) {\\n            if(Integer.valueOf(sb.toString()) % 2 == 0) {\\n                list.add(Integer.valueOf(sb.toString()));\\n                return;\\n            } else {\\n                return;\\n            }\\n        }\\n        for(int i = start; i < digits.length; i++) {\\n            if(used[i]) continue;\\n            if(sb.length() != 0 || digits[i] != 0) {\\n                if(i > 0 && digits[i] == digits[i - 1] && !used[i - 1]) continue;\\n                sb.append(String.valueOf(digits[i]));\\n                used[i] = true;                \\n                backtrack(digits, used, list, sb, 0);\\n                sb.deleteCharAt(sb.length() - 1);\\n                used[i] = false;\\n            }\\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int[] findEvenNumbers(int[] digits) {\\n        Arrays.sort(digits);\\n        boolean[] used = new boolean[digits.length];\\n        List<Integer> list = new ArrayList<>();\\n        StringBuilder sb = new StringBuilder();\\n        backtrack(digits, used, list, sb, 0);\\n        int[] res = new int[list.size()];\\n        for(int i = 0; i < list.size(); i++) {\\n            res[i] = list.get(i);\\n        }\\n        return res;\\n    }\\n    public void backtrack(int[] digits, boolean[] used, List<Integer> list, StringBuilder sb, int start) {\\n        if(sb.length() == 3) {\\n            if(Integer.valueOf(sb.toString()) % 2 == 0) {\\n                list.add(Integer.valueOf(sb.toString()));\\n                return;\\n            } else {\\n                return;\\n            }\\n        }\\n        for(int i = start; i < digits.length; i++) {\\n            if(used[i]) continue;\\n            if(sb.length() != 0 || digits[i] != 0) {\\n                if(i > 0 && digits[i] == digits[i - 1] && !used[i - 1]) continue;\\n                sb.append(String.valueOf(digits[i]));\\n                used[i] = true;                \\n                backtrack(digits, used, list, sb, 0);\\n                sb.deleteCharAt(sb.length() - 1);\\n                used[i] = false;\\n            }\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1613156,
                "title": "c-easy-understanding-three-cycles",
                "content": "```\\npublic class Solution {\\n    public int[] FindEvenNumbers(int[] digits) {\\n        var map = new HashSet<int>();\\n\\n        for (int i = 0; i < digits.Length; i++) {\\n            if (digits[i] == 0) continue;\\n            for (int j = 0; j < digits.Length; j++) {\\n                for (int k = 0; k < digits.Length; k++) {\\n                    if (i == j || j == k || i == k) continue;\\n                    int val = digits[i] * 100 + digits[j] * 10 + digits[k];\\n                    if (val % 2 == 0) map.Add(val);\\n                }\\n            }\\n        }\\n\\n        return map.OrderBy(r => r).ToArray();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int[] FindEvenNumbers(int[] digits) {\\n        var map = new HashSet<int>();\\n\\n        for (int i = 0; i < digits.Length; i++) {\\n            if (digits[i] == 0) continue;\\n            for (int j = 0; j < digits.Length; j++) {\\n                for (int k = 0; k < digits.Length; k++) {\\n                    if (i == j || j == k || i == k) continue;\\n                    int val = digits[i] * 100 + digits[j] * 10 + digits[k];\\n                    if (val % 2 == 0) map.Add(val);\\n                }\\n            }\\n        }\\n\\n        return map.OrderBy(r => r).ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612988,
                "title": "simple-java-solution-with-constant-time",
                "content": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        \\n        ArrayList<Integer> al=new ArrayList<>();\\n        TreeMap<Integer,Integer> am=new TreeMap<>();\\n        for(int i=0;i<digits.length;i++)\\n            am.put(digits[i],am.getOrDefault(digits[i],0)+1);\\n        \\n        for(int i=100;i<1000;i=i+2){\\n            TreeMap<Integer,Integer> tm=new TreeMap<>();\\n            String s=String.valueOf(i);\\n            for(int j=0;j<3;j++){\\n                tm.put(s.charAt(j)-\\'0\\',tm.getOrDefault(s.charAt(j)-\\'0\\',0)+1);\\n            }\\n            if(compareMap(am,tm))\\n                al.add(i);\\n        }\\n        int arr[]=new int[al.size()];\\n        for(int i=0;i<al.size();i++)\\n            arr[i]=al.get(i);\\n \\n        return arr;\\n    }\\n  //function to compare two maps  \\n    public boolean compareMap(TreeMap<Integer,Integer> a, TreeMap<Integer, Integer> b){\\n        for(Map.Entry<Integer,Integer> e:b.entrySet()){\\n            if(a.containsKey(e.getKey())){\\n                if(a.get(e.getKey())<e.getValue()){\\n                   return false; \\n                }       \\n            }\\n            else\\n                return false;\\n        }\\n        return true; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        \\n        ArrayList<Integer> al=new ArrayList<>();\\n        TreeMap<Integer,Integer> am=new TreeMap<>();\\n        for(int i=0;i<digits.length;i++)\\n            am.put(digits[i],am.getOrDefault(digits[i],0)+1);\\n        \\n        for(int i=100;i<1000;i=i+2){\\n            TreeMap<Integer,Integer> tm=new TreeMap<>();\\n            String s=String.valueOf(i);\\n            for(int j=0;j<3;j++){\\n                tm.put(s.charAt(j)-\\'0\\',tm.getOrDefault(s.charAt(j)-\\'0\\',0)+1);\\n            }\\n            if(compareMap(am,tm))\\n                al.add(i);\\n        }\\n        int arr[]=new int[al.size()];\\n        for(int i=0;i<al.size();i++)\\n            arr[i]=al.get(i);\\n \\n        return arr;\\n    }\\n  //function to compare two maps  \\n    public boolean compareMap(TreeMap<Integer,Integer> a, TreeMap<Integer, Integer> b){\\n        for(Map.Entry<Integer,Integer> e:b.entrySet()){\\n            if(a.containsKey(e.getKey())){\\n                if(a.get(e.getKey())<e.getValue()){\\n                   return false; \\n                }       \\n            }\\n            else\\n                return false;\\n        }\\n        return true; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612973,
                "title": "c-heavy-commenting-two-solutions",
                "content": "This solution is for those who are finding it difficult understanding the problem and how to approach it. Let\\'s understand the question first.\\nWe have an array of numbers from 0-9, where any number can be repeated any number of times. We need to make 3 digit even numbers from that array. So, if an array has 3,4,4,5.\\n344, 345, 354, 435 and so on... All these are valid 3 digit numbers, so we store them in array. Let\\'s have a walkthrough of solution.\\n\\n```\\nclass Solution {\\npublic:\\n    // Trash solution, neither a good question... Passes in 16ms, 70% fast. Comment under if you have something optimal.\\n    vector<int> findEvenNumbers(vector<int>& a) {\\n        // Map mp to save frequency of elements in the vector (PS: You can use a frequency array too.)\\n        unordered_map<int,int> mp, temp;\\n        // res vector for result\\n        vector<int> res;\\n        // Iterating over array elements and storing frequencies\\n        for(auto i: a) mp[i]++;\\n        // Since, we need 3 digit elements we will check from 100 to 999 manually, skipping odd numbers.\\n        // Why this approach will work because our constraint array size is 3 to 100. So, no tle problem. Also it makes sure that our result is in sorted manner.\\n        for(int i=100; i<1000; i+=2) {\\n            // Why another temporary map? Because we need to check for every particular i and we need to modify frequency of every digit. So, we shouldn\\'t alter our original map and work on this temporary one.\\n            temp = mp;\\n            // ones, tens, hund basically stores the digits of i.\\n            int ones = i%10, tens = (i/10)%10, hund = i/100;\\n            // This nested if-else block will check for our main condition!!!\\n            // So, if we find digits at ones place in map we.....\\n            if(temp.find(ones)!=temp.end()) {\\n                // check if it\\'s key value is greater than 0. Since, we are decreasing frequency in temp for every digit if we found that one.\\n                if(temp[ones] > 0) temp[ones]--;\\n                else continue;\\n                // else block makes sure if frequency drops to zero then it will not form i with array.\\n                if(temp.find(tens)!=temp.end()) {\\n                    if(temp[tens] > 0) temp[tens]--;\\n                    else continue;\\n                    // Doing similar thing for tens and hundreds position in nested fashion. SO, if one goes wrong, we can skip iteration for that i.\\n                    if(temp.find(hund)!=temp.end()) {\\n                        if(temp[hund] > 0) res.push_back(i); // All our condition satisfies, so we add i in our resultant vector.\\n                        else continue;\\n                    }\\n                }\\n            }\\n        }\\n        // return the result, at max it may contain all 3 digit even elements.\\n        return res;\\n    }\\n};\\n\\n// Let\\'s do a dry run check.\\n\\n// For 2,1,3,0. We save the digits\\' frequency in our map.\\n    \\n// We start with 100.\\n// Hund-> So, is 1 present in our map? Yes. We decrease it\\'s frequency in original map. For 1 key, value in temp goes 0.\\n// tens->Is 0 present? Yes, for 0 key, value in temp drops 0.\\n// ones->Is 0 present? Yes, but for 0 key, value is not greater than 0. SO, we cannot add it. Thus, we skip for this iteration.\\n    \\n// Now, i jumps to 102.\\n// We can confirm all our condition gets satisfied, so we push i=102, in our resultant vector.\\n\\n// Similarly, 104 doesn\\'t gets pushed but 120 does...\\n    \\n// So, this is my code explanation.\\n\\n// We can have many optimisations... Say,\\n// Map\\'s maximum key is 3, so once we find any larger value than that we can skip. ALso, instead of using two maps, we can make it in one. Or, we can check with three nested for loops for each digit.\\n    \\n// Multiple solutions exist, but doesn\\'t makes sense. This question is not one useful. Dislike count says for it.\\n```\\n\\n\\nBelow under is shorter and cleaner code with frequency array. SImilar approach but more time and space optimal.\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& a) {\\n        vector<int> v(10,0);\\n        for(auto i: a) v[i]++;\\n        vector<int> res;\\n        for(int i=100; i<1000; i+=2) {\\n            int x = i%10, y = (i/10)%10, z = i/100;\\n            vector<int> temp(10,0);\\n            temp[x]++; temp[y]++; temp[z]++;\\n            if(temp[x] <= v[x] and temp[y] <= v[y] and temp[z] <= v[z])\\n                res.push_back(i);\\n        }\\n        return res;\\n    }\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    // Trash solution, neither a good question... Passes in 16ms, 70% fast. Comment under if you have something optimal.\\n    vector<int> findEvenNumbers(vector<int>& a) {\\n        // Map mp to save frequency of elements in the vector (PS: You can use a frequency array too.)\\n        unordered_map<int,int> mp, temp;\\n        // res vector for result\\n        vector<int> res;\\n        // Iterating over array elements and storing frequencies\\n        for(auto i: a) mp[i]++;\\n        // Since, we need 3 digit elements we will check from 100 to 999 manually, skipping odd numbers.\\n        // Why this approach will work because our constraint array size is 3 to 100. So, no tle problem. Also it makes sure that our result is in sorted manner.\\n        for(int i=100; i<1000; i+=2) {\\n            // Why another temporary map? Because we need to check for every particular i and we need to modify frequency of every digit. So, we shouldn\\'t alter our original map and work on this temporary one.\\n            temp = mp;\\n            // ones, tens, hund basically stores the digits of i.\\n            int ones = i%10, tens = (i/10)%10, hund = i/100;\\n            // This nested if-else block will check for our main condition!!!\\n            // So, if we find digits at ones place in map we.....\\n            if(temp.find(ones)!=temp.end()) {\\n                // check if it\\'s key value is greater than 0. Since, we are decreasing frequency in temp for every digit if we found that one.\\n                if(temp[ones] > 0) temp[ones]--;\\n                else continue;\\n                // else block makes sure if frequency drops to zero then it will not form i with array.\\n                if(temp.find(tens)!=temp.end()) {\\n                    if(temp[tens] > 0) temp[tens]--;\\n                    else continue;\\n                    // Doing similar thing for tens and hundreds position in nested fashion. SO, if one goes wrong, we can skip iteration for that i.\\n                    if(temp.find(hund)!=temp.end()) {\\n                        if(temp[hund] > 0) res.push_back(i); // All our condition satisfies, so we add i in our resultant vector.\\n                        else continue;\\n                    }\\n                }\\n            }\\n        }\\n        // return the result, at max it may contain all 3 digit even elements.\\n        return res;\\n    }\\n};\\n\\n// Let\\'s do a dry run check.\\n\\n// For 2,1,3,0. We save the digits\\' frequency in our map.\\n    \\n// We start with 100.\\n// Hund-> So, is 1 present in our map? Yes. We decrease it\\'s frequency in original map. For 1 key, value in temp goes 0.\\n// tens->Is 0 present? Yes, for 0 key, value in temp drops 0.\\n// ones->Is 0 present? Yes, but for 0 key, value is not greater than 0. SO, we cannot add it. Thus, we skip for this iteration.\\n    \\n// Now, i jumps to 102.\\n// We can confirm all our condition gets satisfied, so we push i=102, in our resultant vector.\\n\\n// Similarly, 104 doesn\\'t gets pushed but 120 does...\\n    \\n// So, this is my code explanation.\\n\\n// We can have many optimisations... Say,\\n// Map\\'s maximum key is 3, so once we find any larger value than that we can skip. ALso, instead of using two maps, we can make it in one. Or, we can check with three nested for loops for each digit.\\n    \\n// Multiple solutions exist, but doesn\\'t makes sense. This question is not one useful. Dislike count says for it.\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& a) {\\n        vector<int> v(10,0);\\n        for(auto i: a) v[i]++;\\n        vector<int> res;\\n        for(int i=100; i<1000; i+=2) {\\n            int x = i%10, y = (i/10)%10, z = i/100;\\n            vector<int> temp(10,0);\\n            temp[x]++; temp[y]++; temp[z]++;\\n            if(temp[x] <= v[x] and temp[y] <= v[y] and temp[z] <= v[z])\\n                res.push_back(i);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612609,
                "title": "swift-easy-to-understand-solution",
                "content": "```\\nclass Solution {\\n    func findEvenNumbers(_ digits: [Int]) -> [Int] {\\n        \\n    var answer: Set<Int> = []\\n    \\n    for (index1,element1) in digits.enumerated() where element1 != 0 {\\n        \\n        for (index2,element2) in digits.enumerated() where index2 != index1 {\\n            \\n            for (index3,element3) in digits.enumerated() where\\n            index3 != index1 &&\\n            index3 != index2 &&\\n            element3 % 2 != 1 {\\n                \\n                let string = String(element1) + String(element2) + String(element3)\\n                answer.insert(Int(string)!)\\n            }\\n        }\\n    }\\n    \\n    return answer.sorted()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func findEvenNumbers(_ digits: [Int]) -> [Int] {\\n        \\n    var answer: Set<Int> = []\\n    \\n    for (index1,element1) in digits.enumerated() where element1 != 0 {\\n        \\n        for (index2,element2) in digits.enumerated() where index2 != index1 {\\n            \\n            for (index3,element3) in digits.enumerated() where\\n            index3 != index1 &&\\n            index3 != index2 &&\\n            element3 % 2 != 1 {\\n                \\n                let string = String(element1) + String(element2) + String(element3)\\n                answer.insert(Int(string)!)\\n            }\\n        }\\n    }\\n    \\n    return answer.sorted()\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612577,
                "title": "javascript-easy-solution",
                "content": "```\\nvar findEvenNumbers = function(digits) {\\n    let arr = [];\\n    for(let i =0; i<digits.length; i++) {\\n        if(digits[i]%2 == 0) { // check the units digit is pural      \\n            for(let j = 0;j < digits.length; j++) {\\n                if(i !== j && digits[j] !== 0) { // exclude the hundreds digit which is zero\\n                    for(let k =0; k< digits.length; k++) {\\n                        if(k !== i && k!==j){\\n                            arr.push(digits[j]*100+digits[k]*10+digits[i])\\n                        }\\n                    }\\n                    \\n                }\\n            }\\n        }\\n    }\\n\\n    let unique = [...new Set(arr)]\\n    return unique.sort()\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nvar findEvenNumbers = function(digits) {\\n    let arr = [];\\n    for(let i =0; i<digits.length; i++) {\\n        if(digits[i]%2 == 0) { // check the units digit is pural      \\n            for(let j = 0;j < digits.length; j++) {\\n                if(i !== j && digits[j] !== 0) { // exclude the hundreds digit which is zero\\n                    for(let k =0; k< digits.length; k++) {\\n                        if(k !== i && k!==j){\\n                            arr.push(digits[j]*100+digits[k]*10+digits[i])\\n                        }\\n                    }\\n                    \\n                }\\n            }\\n        }\\n    }\\n\\n    let unique = [...new Set(arr)]\\n    return unique.sort()\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1612381,
                "title": "c-dfs-simple-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    void dfs(int data, int val,int length, vector<int>& digits, vector<bool>& seen, set<int>& ans)\\n    {\\n        val = val * 10 + data;\\n        if(length==3){\\n            if(data %2 == 0) ans.insert(val);\\n            return;\\n        }\\n        for(int i=0; i< digits.size(); ++i){\\n            if(length == 0 && digits[i]==0) continue;\\n            if(seen[i]) continue;\\n            seen[i]=true;\\n            dfs(digits[i], val, length+1, digits, seen, ans );    \\n            seen[i]=false;\\n        }\\n    }\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        set<int> ans;\\n        vector<bool> seen(digits.size(), false);\\n        dfs(0, 0, 0, digits, seen, ans );          \\n        return {ans.begin(), ans.end()};\\n    }\\n};\\n```",
                "solutionTags": [
                    "Backtracking",
                    "Depth-First Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void dfs(int data, int val,int length, vector<int>& digits, vector<bool>& seen, set<int>& ans)\\n    {\\n        val = val * 10 + data;\\n        if(length==3){\\n            if(data %2 == 0) ans.insert(val);\\n            return;\\n        }\\n        for(int i=0; i< digits.size(); ++i){\\n            if(length == 0 && digits[i]==0) continue;\\n            if(seen[i]) continue;\\n            seen[i]=true;\\n            dfs(digits[i], val, length+1, digits, seen, ans );    \\n            seen[i]=false;\\n        }\\n    }\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        set<int> ans;\\n        vector<bool> seen(digits.size(), false);\\n        dfs(0, 0, 0, digits, seen, ans );          \\n        return {ans.begin(), ans.end()};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612369,
                "title": "easy-c-solution",
                "content": "\\'\\'\\'\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int>ans;\\n        set<int>st;\\n        for(int i=0;i<digits.size();i++){\\n            for(int j=0;j<digits.size();j++){\\n                for(int k=0;k<digits.size();k++){\\n                    if(i==j||j==k||k==i)  continue;\\n                    int sum=digits[i]*100+digits[j]*10+digits[k];\\n                    if(sum<100) sum=0;\\n                    if(sum==0) continue;\\n                    if(sum%2==0){\\n                        st.insert(sum);\\n                    }\\n                }\\n            }\\n        }\\n        for(int x:st){\\n            ans.push_back(x);\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int>ans;\\n        set<int>st;\\n        for(int i=0;i<digits.size();i++){\\n            for(int j=0;j<digits.size();j++){\\n                for(int k=0;k<digits.size();k++){\\n                    if(i==j||j==k||k==i)  continue;\\n                    int sum=digits[i]*100+digits[j]*10+digits[k];\\n                    if(sum<100) sum=0;\\n                    if(sum==0) continue;\\n                    if(sum%2==0){\\n                        st.insert(sum);\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 1612251,
                "title": "c-easy-but-o-n3",
                "content": "```\\n//  Go by index by index just be careful when i,j and k all are one index. \\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> v;\\n        set<int> s;\\n        int n=digits.size();\\n        int no=0;\\n     for(int i=0; i<n;i++){\\n         if(digits[i]==0)\\n             continue;\\n         for(int j=0; j<n;j++){\\n             if(j==i)\\n                 continue;\\n             for(int k=0;k<n;k++){\\n                 if(k==j|| k==i  ){\\n                     continue;\\n                 } no= digits[i]*100+digits[j]*10+digits[k];\\n                 if(no>=100 && no%2==0)\\n                     s.insert(no);\\n             }\\n         }\\n      \\n     }\\n           int k=0;\\n        \\n         for(auto itr=s.begin(); itr!= s.end();itr++){\\n           k= *itr;\\n             v.push_back(k);\\n         }\\n        sort(v.begin(), v.end());\\n        return v;\\n    }\\n};",
                "solutionTags": [
                    "Ordered Set"
                ],
                "code": "```\\n//  Go by index by index just be careful when i,j and k all are one index. \\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> v;\\n        set<int> s;\\n        int n=digits.size();\\n        int no=0;\\n     for(int i=0; i<n;i++){\\n         if(digits[i]==0)\\n             continue;\\n         for(int j=0; j<n;j++){\\n             if(j==i)\\n                 continue;\\n             for(int k=0;k<n;k++){\\n                 if(k==j|| k==i  ){\\n                     continue;\\n                 } no= digits[i]*100+digits[j]*10+digits[k];\\n                 if(no>=100 && no%2==0)\\n                     s.insert(no);\\n             }\\n         }\\n      \\n     }\\n           int k=0;\\n        \\n         for(auto itr=s.begin(); itr!= s.end();itr++){\\n           k= *itr;\\n             v.push_back(k);\\n         }\\n        sort(v.begin(), v.end());\\n        return v;\\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1612206,
                "title": "java-treeset-brute-force",
                "content": "```\\nclass Solution\\n{\\n    public int[] findEvenNumbers(int[] digits)\\n    {\\n        int N = digits.length;\\n        TreeSet<Integer> uniq = new TreeSet<>();\\n        for(int i = 0; i < N; i++)\\n        {\\n            if(digits[i] == 0)\\n                continue;\\n            for(int j = 0; j < N; j++)\\n            {\\n                if(i == j)\\n                    continue;\\n                for(int k = 0; k < N; k++)\\n                {\\n                    if(i == k || j == k || digits[k] % 2 != 0)\\n                        continue;\\n                    uniq.add(digits[i]*100+digits[j]*10+digits[k]);\\n                }\\n            }\\n        }\\n        int[] ret = new int[uniq.size()];\\n        int id = 0;\\n        for(int i : uniq)\\n            ret[id++] = i;\\n        return ret;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n{\\n    public int[] findEvenNumbers(int[] digits)\\n    {\\n        int N = digits.length;\\n        TreeSet<Integer> uniq = new TreeSet<>();\\n        for(int i = 0; i < N; i++)\\n        {\\n            if(digits[i] == 0)\\n                continue;\\n            for(int j = 0; j < N; j++)\\n            {\\n                if(i == j)\\n                    continue;\\n                for(int k = 0; k < N; k++)\\n                {\\n                    if(i == k || j == k || digits[k] % 2 != 0)\\n                        continue;\\n                    uniq.add(digits[i]*100+digits[j]*10+digits[k]);\\n                }\\n            }\\n        }\\n        int[] ret = new int[uniq.size()];\\n        int id = 0;\\n        for(int i : uniq)\\n            ret[id++] = i;\\n        return ret;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612148,
                "title": "java-easy-understand-explained-with-diagram",
                "content": "First of all, if we use combination math, it will too complex to code.\\n\\nMy math is poor, so I give up after thinking with math for a while.\\n\\nThen I come up a brute force method with trick in contest.\\n\\nWe can check whether digit count of number [100, 998] is enough from original digits.\\n\\nFor example:\\n![image](https://assets.leetcode.com/users/images/fda1e099-c7ad-4510-ac7b-dbaffc184a7d_1638796244.8594847.png)\\n\\nFor 888 is invalid, as we don\\'t have enough **8(2 < 3)** from original digits.\\nFor 282 and 228 are valid, as we have enough digit from  original digits.\\n\\nPS: If the condition change to 4 digits, we just check [1000, 9998], nothing else should be changed.\\n\\n```\\nclass Solution {\\n  public int[] findEvenNumbers(int[] digits) {\\n    // count digit of original digits\\n    int[] count = new int[10];\\n    for (int digit : digits) {\\n      count[digit]++;\\n    }\\n\\n    // list will be sorted, as we check it in order\\n    List<Integer> list = new ArrayList<>();\\n    // 3 digits even number is between [100, 998]\\n    for (int i = 100; i < 999; i += 2) {\\n      if (valid(i, count)) {\\n        list.add(i);\\n      }\\n    }\\n\\n    int n = list.size();\\n    int[] result = new int[n];\\n    for (int i = 0; i < n; i++) {\\n      result[i] = list.get(i);\\n    }\\n\\n    return result;\\n  }\\n\\n  private boolean valid(int number, int[] count) {\\n    // count digit of one number\\n    int[] c = new int[10];\\n    while (number != 0) {\\n      c[number % 10]++;\\n      number /= 10;\\n    }\\n    // check number\\'s digit count is enough\\n    for (int i = 0; i < 10; i++) {\\n      if (c[i] > count[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public int[] findEvenNumbers(int[] digits) {\\n    // count digit of original digits\\n    int[] count = new int[10];\\n    for (int digit : digits) {\\n      count[digit]++;\\n    }\\n\\n    // list will be sorted, as we check it in order\\n    List<Integer> list = new ArrayList<>();\\n    // 3 digits even number is between [100, 998]\\n    for (int i = 100; i < 999; i += 2) {\\n      if (valid(i, count)) {\\n        list.add(i);\\n      }\\n    }\\n\\n    int n = list.size();\\n    int[] result = new int[n];\\n    for (int i = 0; i < n; i++) {\\n      result[i] = list.get(i);\\n    }\\n\\n    return result;\\n  }\\n\\n  private boolean valid(int number, int[] count) {\\n    // count digit of one number\\n    int[] c = new int[10];\\n    while (number != 0) {\\n      c[number % 10]++;\\n      number /= 10;\\n    }\\n    // check number\\'s digit count is enough\\n    for (int i = 0; i < 10; i++) {\\n      if (c[i] > count[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612066,
                "title": "python-backtracking",
                "content": "The most important part is  \"3-Digit\". So instead of backtrack the whole array, I rearrange the array first\\n\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        freq_tb = dict(Counter(digits))\\n        ans = set()\\n        new_digits = []\\n        for key, value in freq_tb.items():\\n            if key != 0 and value >= 3 and key % 2 == 0:\\n                ans.add(key*100 + key*10 + key)\\n            if value >= 2:\\n                new_digits.append(key)\\n                new_digits.append(key)\\n            else:\\n                new_digits.append(key)\\n                \\n        self.helper([], new_digits, ans)\\n        return sorted(list(ans))\\n        \\n    def helper(self, cur_num, curr_digit, ans):\\n        # prune\\n        if cur_num and cur_num[0] == 0 or len(cur_num) > 3:\\n            return\\n        # ans\\n        if len(cur_num) == 3:\\n            output = self.createNum(cur_num)\\n            if output != 0 and output % 2 == 0:\\n                ans.add(output)\\n            return \\n                \\n        for i in range(len(curr_digit)):\\n            cur_num.append(curr_digit[i])\\n            self.helper(cur_num, curr_digit[:i] + curr_digit[i+1:], ans)\\n            cur_num.pop()\\n            \\n    def createNum(self, num_arr):\\n        output = 0\\n        for num in num_arr:\\n            output = output * 10 + num\\n        return output\\n```",
                "solutionTags": [
                    "Python",
                    "Backtracking"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        freq_tb = dict(Counter(digits))\\n        ans = set()\\n        new_digits = []\\n        for key, value in freq_tb.items():\\n            if key != 0 and value >= 3 and key % 2 == 0:\\n                ans.add(key*100 + key*10 + key)\\n            if value >= 2:\\n                new_digits.append(key)\\n                new_digits.append(key)\\n            else:\\n                new_digits.append(key)\\n                \\n        self.helper([], new_digits, ans)\\n        return sorted(list(ans))\\n        \\n    def helper(self, cur_num, curr_digit, ans):\\n        # prune\\n        if cur_num and cur_num[0] == 0 or len(cur_num) > 3:\\n            return\\n        # ans\\n        if len(cur_num) == 3:\\n            output = self.createNum(cur_num)\\n            if output != 0 and output % 2 == 0:\\n                ans.add(output)\\n            return \\n                \\n        for i in range(len(curr_digit)):\\n            cur_num.append(curr_digit[i])\\n            self.helper(cur_num, curr_digit[:i] + curr_digit[i+1:], ans)\\n            cur_num.pop()\\n            \\n    def createNum(self, num_arr):\\n        output = 0\\n        for num in num_arr:\\n            output = output * 10 + num\\n        return output\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612064,
                "title": "java-3-loop",
                "content": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int sumOne = 0, sumTwo = 0;\\n        Set<Integer> set = new HashSet<>();\\n        for (int i = 0; i < digits.length; i++) {\\n            if (digits[i] == 0)\\n                continue;\\n            sumOne = digits[i];\\n            for (int j = 0; j < digits.length; j++) {\\n                if (i == j)\\n                    continue;\\n                sumTwo = sumOne * 10 + digits[j];\\n                for (int k = 0; k < digits.length; k++) {\\n                    if (k == i || k == j)\\n                        continue;\\n                    int sumThree = sumTwo * 10 + digits[k];\\n                    if (sumThree % 2 == 0)\\n                        set.add(sumThree);\\n                }\\n            }\\n        }\\n        \\n        int[] res = new int[set.size()];\\n        int idx = 0;\\n        for (int val : set)\\n            res[idx++] = val;\\n        Arrays.sort(res);\\n        return res;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int sumOne = 0, sumTwo = 0;\\n        Set<Integer> set = new HashSet<>();\\n        for (int i = 0; i < digits.length; i++) {\\n            if (digits[i] == 0)\\n                continue;\\n            sumOne = digits[i];\\n            for (int j = 0; j < digits.length; j++) {\\n                if (i == j)\\n                    continue;\\n                sumTwo = sumOne * 10 + digits[j];\\n                for (int k = 0; k < digits.length; k++) {\\n                    if (k == i || k == j)\\n                        continue;\\n                    int sumThree = sumTwo * 10 + digits[k];\\n                    if (sumThree % 2 == 0)\\n                        set.add(sumThree);\\n                }\\n            }\\n        }\\n        \\n        int[] res = new int[set.size()];\\n        int idx = 0;\\n        for (int val : set)\\n            res[idx++] = val;\\n        Arrays.sort(res);\\n        return res;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612053,
                "title": "javascript-brute-force",
                "content": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar findEvenNumbers = function(digits) {\\n    //edge case - digits lenght smaller than 3\\n    if(digits.length < 3) return [];\\n    //edge case - no even number\\n    let hasEven = false;\\n    //edge case - all zero\\n    let allZero = true;\\n    for(let i = 0; i < digits.length; i++){\\n        digits[i] % 2 === 0 ? hasEven=true : hasEven;\\n        digits[i] !== 0 ? allZero=false : allZero;\\n    }\\n    if(!hasEven || allZero) return [];\\n    \\n    \\n    \\n    let hash = {};\\n    let set = new Set();\\n    let result = [];\\n    let first;\\n    let second;\\n    let third;\\n    let num;\\n    for(let i = 0; i < digits.length; i++){\\n        if(digits[i] %2 === 0){\\n            third = digits[i];\\n            for(let j = 0; j < digits.length; j++){\\n                if(j !== i && digits[j] !== 0) {\\n                    first = digits[j];\\n                    for(let k = 0; k < digits.length; k++){\\n                        if(j!==i && j!==k && k!==i) {\\n                            second = digits[k];\\n                            let num1 = first.toString();\\n                            let num2 = second.toString();\\n                            let num3 = third.toString();\\n                            let numString = num1.concat(num2, num3)\\n                            num = parseInt(numString);\\n                            set.add(num);\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    } \\n    set.forEach(n=>result.push(n));\\n    result.sort((a,b)=>a-b);\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar findEvenNumbers = function(digits) {\\n    //edge case - digits lenght smaller than 3\\n    if(digits.length < 3) return [];\\n    //edge case - no even number\\n    let hasEven = false;\\n    //edge case - all zero\\n    let allZero = true;\\n    for(let i = 0; i < digits.length; i++){\\n        digits[i] % 2 === 0 ? hasEven=true : hasEven;\\n        digits[i] !== 0 ? allZero=false : allZero;\\n    }\\n    if(!hasEven || allZero) return [];\\n    \\n    \\n    \\n    let hash = {};\\n    let set = new Set();\\n    let result = [];\\n    let first;\\n    let second;\\n    let third;\\n    let num;\\n    for(let i = 0; i < digits.length; i++){\\n        if(digits[i] %2 === 0){\\n            third = digits[i];\\n            for(let j = 0; j < digits.length; j++){\\n                if(j !== i && digits[j] !== 0) {\\n                    first = digits[j];\\n                    for(let k = 0; k < digits.length; k++){\\n                        if(j!==i && j!==k && k!==i) {\\n                            second = digits[k];\\n                            let num1 = first.toString();\\n                            let num2 = second.toString();\\n                            let num3 = third.toString();\\n                            let numString = num1.concat(num2, num3)\\n                            num = parseInt(numString);\\n                            set.add(num);\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    } \\n    set.forEach(n=>result.push(n));\\n    result.sort((a,b)=>a-b);\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1612030,
                "title": "java-backtracking-with-explanation",
                "content": "```\\nclass Solution {\\n    TreeSet<Integer> retval;\\n    HashSet<Integer> exist_position;\\n    HashSet<Integer> visited;\\n    int[] digits;\\n    public int[] findEvenNumbers(int[] digits) {\\n        this.digits = digits;\\n        //store the value which match requirement\\n        this.retval = new TreeSet<>();\\n        \\n        //store the position which we have already walk through\\n        this.exist_position = new HashSet<Integer>();\\n\\n        //store the subvalue which we had already check\\n        //ex: if we had visited value start with 12, then we do not need to walk through again value start with 12\\n        //cause the result will be the same\\n        //it can help us save execution time\\n        this.visited = new HashSet<Integer>();\\n        \\n        //use backtracking to solve it\\n        //first parameter is the sum so far\\n        //second parameter is the requirement which need 3 digits\\n        backTracking(0, 3);\\n        \\n        int[] result = new int[retval.size()];\\n        int k = 0;\\n        //store it to array\\n        for(int i : retval){\\n            result[k++] = i; \\n        }\\n        return result;\\n    }\\n    \\n    public void backTracking(int cur, int digit){\\n        //check if visited\\n        if(!visited.add(cur)){\\n            return;\\n        }\\n        //if we get 3 digit\\n        if(digit == 0){\\n            //cur / 100 => check if leading 0\\n            //cur % 2 => check if even\\n            if(cur / 100 > 0 && cur % 2 == 0){\\n                retval.add(cur);\\n            }\\n            return;\\n        }\\n        //this is the next level, so we need to * 10\\n        //the initial value is 0, so it will not influenct the result\\n        cur *= 10;\\n        for(int i = 0; i < digits.length; i++){\\n            //check if we the current value already have this position value\\n            if(exist_position.add(i)){\\n                //go to next digit\\n                backTracking(cur + digits[i], digit - 1);\\n                //after using this value we need to remove it from exist_position\\n                //so the behind value can use it\\n                exist_position.remove(i);\\n            }\\n        }\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    TreeSet<Integer> retval;\\n    HashSet<Integer> exist_position;\\n    HashSet<Integer> visited;\\n    int[] digits;\\n    public int[] findEvenNumbers(int[] digits) {\\n        this.digits = digits;\\n        //store the value which match requirement\\n        this.retval = new TreeSet<>();\\n        \\n        //store the position which we have already walk through\\n        this.exist_position = new HashSet<Integer>();\\n\\n        //store the subvalue which we had already check\\n        //ex: if we had visited value start with 12, then we do not need to walk through again value start with 12\\n        //cause the result will be the same\\n        //it can help us save execution time\\n        this.visited = new HashSet<Integer>();\\n        \\n        //use backtracking to solve it\\n        //first parameter is the sum so far\\n        //second parameter is the requirement which need 3 digits\\n        backTracking(0, 3);\\n        \\n        int[] result = new int[retval.size()];\\n        int k = 0;\\n        //store it to array\\n        for(int i : retval){\\n            result[k++] = i; \\n        }\\n        return result;\\n    }\\n    \\n    public void backTracking(int cur, int digit){\\n        //check if visited\\n        if(!visited.add(cur)){\\n            return;\\n        }\\n        //if we get 3 digit\\n        if(digit == 0){\\n            //cur / 100 => check if leading 0\\n            //cur % 2 => check if even\\n            if(cur / 100 > 0 && cur % 2 == 0){\\n                retval.add(cur);\\n            }\\n            return;\\n        }\\n        //this is the next level, so we need to * 10\\n        //the initial value is 0, so it will not influenct the result\\n        cur *= 10;\\n        for(int i = 0; i < digits.length; i++){\\n            //check if we the current value already have this position value\\n            if(exist_position.add(i)){\\n                //go to next digit\\n                backTracking(cur + digits[i], digit - 1);\\n                //after using this value we need to remove it from exist_position\\n                //so the behind value can use it\\n                exist_position.remove(i);\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1612023,
                "title": "c-easy-solution-next-permutation",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        string v;\\n        for(int i=0;i<digits.size();i++)\\n        {\\n            v.push_back(digits[i]+\\'0\\');\\n        }\\n        unordered_map<int,int>mp;\\n        vector<int>ans;\\n        for(int i=0;i<=v.size()-3;i++)\\n        {\\n            for(int j=i+1;j<=v.size()-2;j++)\\n            {\\n                for(int k=j+1;k<v.size();k++)\\n                {\\n                    string g;\\n                    g.push_back(v[i]);\\n                    g.push_back(v[j]);\\n                    g.push_back(v[k]);\\n                    sort(g.begin(),g.end());\\n                    if(g[0]!=\\'0\\' && (g[2]-\\'0\\')%2==0)\\n                    {\\n                        int t = stoi(g);\\n                        if(mp.find(t)==mp.end())\\n                        {\\n                            mp[t]=1;\\n                            ans.push_back(t);\\n                        }\\n                    }\\n                    while(next_permutation(g.begin(),g.end()))\\n                    {\\n                        if(g[0]==\\'0\\')\\n                        {\\n                            continue;\\n                        }\\n                        else if((g[2]-\\'0\\')%2!=0)\\n                        {\\n                            continue;\\n                        }\\n                        else\\n                        {\\n                            int t = stoi(g);\\n                            if(mp.find(t)==mp.end())\\n                            {\\n                                mp[t]=1;\\n                                ans.push_back(t);\\n                            }\\n                        }\\n                   }\\n                }\\n            }\\n        }\\n        sort(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        string v;\\n        for(int i=0;i<digits.size();i++)\\n        {\\n            v.push_back(digits[i]+\\'0\\');\\n        }\\n        unordered_map<int,int>mp;\\n        vector<int>ans;\\n        for(int i=0;i<=v.size()-3;i++)\\n        {\\n            for(int j=i+1;j<=v.size()-2;j++)\\n            {\\n                for(int k=j+1;k<v.size();k++)\\n                {\\n                    string g;\\n                    g.push_back(v[i]);\\n                    g.push_back(v[j]);\\n                    g.push_back(v[k]);\\n                    sort(g.begin(),g.end());\\n                    if(g[0]!=\\'0\\' && (g[2]-\\'0\\')%2==0)\\n                    {\\n                        int t = stoi(g);\\n                        if(mp.find(t)==mp.end())\\n                        {\\n                            mp[t]=1;\\n                            ans.push_back(t);\\n                        }\\n                    }\\n                    while(next_permutation(g.begin(),g.end()))\\n                    {\\n                        if(g[0]==\\'0\\')\\n                        {\\n                            continue;\\n                        }\\n                        else if((g[2]-\\'0\\')%2!=0)\\n                        {\\n                            continue;\\n                        }\\n                        else\\n                        {\\n                            int t = stoi(g);\\n                            if(mp.find(t)==mp.end())\\n                            {\\n                                mp[t]=1;\\n                                ans.push_back(t);\\n                            }\\n                        }\\n                   }\\n                }\\n            }\\n        }\\n        sort(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1611990,
                "title": "python-brute-force-solution",
                "content": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        n = len(digits)\\n        res = []\\n        \\n        for i in range(n):\\n            if digits[i] != 0:\\n                for j in range(n):\\n                    if j != i:\\n                        for k in range(n):\\n                            if digits[k] % 2 == 0 and k not in (i, j):\\n                                res.append(digits[i]*100+digits[j]*10+digits[k])\\n                            \\n        res = list(set(res))\\n        res.sort()\\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        n = len(digits)\\n        res = []\\n        \\n        for i in range(n):\\n            if digits[i] != 0:\\n                for j in range(n):\\n                    if j != i:\\n                        for k in range(n):\\n                            if digits[k] % 2 == 0 and k not in (i, j):\\n                                res.append(digits[i]*100+digits[j]*10+digits[k])\\n                            \\n        res = list(set(res))\\n        res.sort()\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079158,
                "title": "easy-cpp-solution-using-recursion-beginner-friendly",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    void solve(vector<int>& digits, vector<int>& vis, map<int, int>& mp, int tmp){\\n        if(tmp >= 100){\\n            if((tmp&1) == 0) mp[tmp]++;\\n            return;\\n        }\\n        for(int i=0; i<digits.size(); i++){\\n            if(vis[i] == 0){\\n                vis[i] = 1;\\n                solve(digits, vis, mp, digits[i] + (tmp * 10));\\n                vis[i] = 0;\\n            }\\n        }\\n    }\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int cnt = 0;\\n        for(auto i : digits) if((i&1) == 0) cnt++;\\n        if(cnt == 0) return {};\\n\\n        vector<int> ans;\\n        map<int, int> mp;\\n        vector<int> vis(digits.size(), 0);\\n        for(int i=0; i<digits.size(); i++){\\n            vis[i] = 1;\\n            if(digits[i] != 0) solve(digits, vis, mp, digits[i]);\\n            vis[i] = 0;\\n        }\\n\\n        for(auto i : mp) ans.push_back(i.first);\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void solve(vector<int>& digits, vector<int>& vis, map<int, int>& mp, int tmp){\\n        if(tmp >= 100){\\n            if((tmp&1) == 0) mp[tmp]++;\\n            return;\\n        }\\n        for(int i=0; i<digits.size(); i++){\\n            if(vis[i] == 0){\\n                vis[i] = 1;\\n                solve(digits, vis, mp, digits[i] + (tmp * 10));\\n                vis[i] = 0;\\n            }\\n        }\\n    }\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int cnt = 0;\\n        for(auto i : digits) if((i&1) == 0) cnt++;\\n        if(cnt == 0) return {};\\n\\n        vector<int> ans;\\n        map<int, int> mp;\\n        vector<int> vis(digits.size(), 0);\\n        for(int i=0; i<digits.size(); i++){\\n            vis[i] = 1;\\n            if(digits[i] != 0) solve(digits, vis, mp, digits[i]);\\n            vis[i] = 0;\\n        }\\n\\n        for(auto i : mp) ans.push_back(i.first);\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4078523,
                "title": "ruby-solution",
                "content": "# Approach\\nIterate numbers from 100 to 999 and check the inclusion of all digits in given array\\n\\n# Complexity\\n- Time complexity:\\n $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n$$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef find_even_numbers(digits)\\n    arr = []\\n    (50...500).each do |i|\\n        num = i *= 2\\n        h, res = num.divmod 100\\n        t, o = res.divmod 10\\n\\n        dig = digits.dup\\n        arr << num if [h,t,o].all? do |n|\\n          dig.index(n) && dig.delete_at(dig.index(n))\\n        end\\n    end\\n\\n    arr\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef find_even_numbers(digits)\\n    arr = []\\n    (50...500).each do |i|\\n        num = i *= 2\\n        h, res = num.divmod 100\\n        t, o = res.divmod 10\\n\\n        dig = digits.dup\\n        arr << num if [h,t,o].all? do |n|\\n          dig.index(n) && dig.delete_at(dig.index(n))\\n        end\\n    end\\n\\n    arr\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4065566,
                "title": "two-lines-solution",
                "content": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        cnt = Counter(digits)\\n        return [n for n in range(100, 1000, 2) if not Counter((n//100, n//10%10, n%10))-cnt]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        cnt = Counter(digits)\\n        return [n for n in range(100, 1000, 2) if not Counter((n//100, n//10%10, n%10))-cnt]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4061259,
                "title": "bruteforce-3-cycle-javascript-solution-56ms-top-100",
                "content": "Creates a frequency table for each digit, and then loops over all possible digits and checks if they should exist. Gets around 62-65ms average on testing. Caps out at 56ms which is top 100% for js. Due to going in numeric order during the bruteforce operation, no sorting is necessary.\\n\\n# Code\\n```\\nvar findEvenNumbers = function(digits) {\\n    let output = []\\n    let count = _.countBy(digits);\\n\\n    let aCompute, bCompute;\\n\\n    for (let a = 1; a < 10; a++) {\\n        aCompute = a*100;\\n        for (let b = 0; b < 10; b++) {\\n            bCompute = b*10;\\n            for (let c = 0; c < 9; c+=2) {\\n                if (count[a] && count[b] > (b==a) && count[c] > (c==a) + (c==b)) {\\n                    output.push(aCompute + bCompute + c)\\n                }\\n            }\\n        }\\n    }\\n                    \\n    return output\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar findEvenNumbers = function(digits) {\\n    let output = []\\n    let count = _.countBy(digits);\\n\\n    let aCompute, bCompute;\\n\\n    for (let a = 1; a < 10; a++) {\\n        aCompute = a*100;\\n        for (let b = 0; b < 10; b++) {\\n            bCompute = b*10;\\n            for (let c = 0; c < 9; c+=2) {\\n                if (count[a] && count[b] > (b==a) && count[c] > (c==a) + (c==b)) {\\n                    output.push(aCompute + bCompute + c)\\n                }\\n            }\\n        }\\n    }\\n                    \\n    return output\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4056224,
                "title": "java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int frequency[]=new int[10];\\n        for(int i=0;i<digits.length;i++)\\n        {\\n            frequency[digits[i]]++;\\n        }\\n        ArrayList<Integer> list=new ArrayList<>();\\n        for(int i=100;i<999;i+=2)\\n        {\\n            int tempfrequency[]=new int[10];\\n            int temp=i;\\n            while(temp>0)\\n            {\\n               int rem=temp%10;\\n               tempfrequency[rem]++;\\n               temp/=10;\\n            }\\n            if(isEqual(frequency,tempfrequency))\\n            list.add(i);\\n        }\\n        int resArray[]= list.stream().mapToInt(i -> i).toArray();\\n        return resArray;\\n    }\\n    public boolean isEqual(int arr1[],int arr2[])\\n    {\\n        for(int i=0;i<arr1.length;i++)\\n        {\\n            if(arr1[i]<arr2[i])\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Sorting",
                    "Enumeration"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int frequency[]=new int[10];\\n        for(int i=0;i<digits.length;i++)\\n        {\\n            frequency[digits[i]]++;\\n        }\\n        ArrayList<Integer> list=new ArrayList<>();\\n        for(int i=100;i<999;i+=2)\\n        {\\n            int tempfrequency[]=new int[10];\\n            int temp=i;\\n            while(temp>0)\\n            {\\n               int rem=temp%10;\\n               tempfrequency[rem]++;\\n               temp/=10;\\n            }\\n            if(isEqual(frequency,tempfrequency))\\n            list.add(i);\\n        }\\n        int resArray[]= list.stream().mapToInt(i -> i).toArray();\\n        return resArray;\\n    }\\n    public boolean isEqual(int arr1[],int arr2[])\\n    {\\n        for(int i=0;i<arr1.length;i++)\\n        {\\n            if(arr1[i]<arr2[i])\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4056163,
                "title": "98-runtime-91-memory-one-liner-with-3-loops-and-counter-solution",
                "content": "![image.png](https://assets.leetcode.com/users/images/236164b0-aa50-4ef9-a440-6f4fa2cab8ae_1694961637.2136545.png)\\n\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        c = Counter(digits)\\n    \\n        return [\\n            i*100+j*10+k \\n            for i in range(1,10) \\n            for j in range(0,10) \\n            for k in range(0,10,2) \\n            if c[i]>0 and c[j]>(i==j) and c[k]>(k==i)+(k==j)\\n        ]\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        c = Counter(digits)\\n    \\n        return [\\n            i*100+j*10+k \\n            for i in range(1,10) \\n            for j in range(0,10) \\n            for k in range(0,10,2) \\n            if c[i]>0 and c[j]>(i==j) and c[k]>(k==i)+(k==j)\\n        ]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4054995,
                "title": "0-ms-o-n-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nIterate over 100 ... 999 and check if the number could be composed from input numbers. Use digit frequencies for a quick check.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n![image.png](https://assets.leetcode.com/users/images/45d9ca8d-5ad8-4281-b07c-f429b1ce8602_1694940503.0807343.png)\\n\\n# Code\\n```go\\n// https://leetcode.com/problems/finding-3-digit-even-numbers/\\nfunc findEvenNumbers(digits []int) []int {\\n\\tdigitsFrequencies := [10]int{}\\n\\tfor _, digit := range digits {\\n\\t\\tdigitsFrequencies[digit]++\\n\\t}\\n\\n\\tvar result []int\\n\\tfor n1 := 1; n1 <= 9; n1++ {\\n\\t\\tfor n2 := 0; n2 <= 9; n2++ {\\n\\t\\t\\tfor n3 := 0; n3 <= 9; n3 = n3 + 2 {\\n\\t\\t\\t\\tdigitsFrequencies[n1]--\\n\\t\\t\\t\\tdigitsFrequencies[n2]--\\n\\t\\t\\t\\tdigitsFrequencies[n3]--\\n\\n\\t\\t\\t\\tif 0 <= digitsFrequencies[n1] && 0 <= digitsFrequencies[n2] && 0 <= digitsFrequencies[n3] {\\n\\t\\t\\t\\t\\tresult = append(result, 100*n1+10*n2+n3)\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tdigitsFrequencies[n1]++\\n\\t\\t\\t\\tdigitsFrequencies[n2]++\\n\\t\\t\\t\\tdigitsFrequencies[n3]++\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn result\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\n// https://leetcode.com/problems/finding-3-digit-even-numbers/\\nfunc findEvenNumbers(digits []int) []int {\\n\\tdigitsFrequencies := [10]int{}\\n\\tfor _, digit := range digits {\\n\\t\\tdigitsFrequencies[digit]++\\n\\t}\\n\\n\\tvar result []int\\n\\tfor n1 := 1; n1 <= 9; n1++ {\\n\\t\\tfor n2 := 0; n2 <= 9; n2++ {\\n\\t\\t\\tfor n3 := 0; n3 <= 9; n3 = n3 + 2 {\\n\\t\\t\\t\\tdigitsFrequencies[n1]--\\n\\t\\t\\t\\tdigitsFrequencies[n2]--\\n\\t\\t\\t\\tdigitsFrequencies[n3]--\\n\\n\\t\\t\\t\\tif 0 <= digitsFrequencies[n1] && 0 <= digitsFrequencies[n2] && 0 <= digitsFrequencies[n3] {\\n\\t\\t\\t\\t\\tresult = append(result, 100*n1+10*n2+n3)\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tdigitsFrequencies[n1]++\\n\\t\\t\\t\\tdigitsFrequencies[n2]++\\n\\t\\t\\t\\tdigitsFrequencies[n3]++\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn result\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038378,
                "title": "very-nive-approch",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n3)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        Set<Integer> set = new HashSet<>();\\n        for(int i=0; i<digits.length; i++){\\n            if(digits[i]!=0){\\n                for(int j=0; j<digits.length; j++){\\n                    if(i==j) continue;\\n                    for(int k=0; k<digits.length; k++){\\n                        if(k==i || k==j) continue;\\n\\n                        int temp = (digits[i]*100)+(digits[j]*10)+digits[k];\\n                        if(temp%2==0) set.add(temp);\\n                    }\\n                }\\n            }\\n        }\\n\\n        int[] arr = new int[set.size()];\\n        int x=0;\\n        for(int i : set){\\n            arr[x]=i;\\n            x++;\\n        }\\n        Arrays.sort(arr);\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Sorting",
                    "Enumeration"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        Set<Integer> set = new HashSet<>();\\n        for(int i=0; i<digits.length; i++){\\n            if(digits[i]!=0){\\n                for(int j=0; j<digits.length; j++){\\n                    if(i==j) continue;\\n                    for(int k=0; k<digits.length; k++){\\n                        if(k==i || k==j) continue;\\n\\n                        int temp = (digits[i]*100)+(digits[j]*10)+digits[k];\\n                        if(temp%2==0) set.add(temp);\\n                    }\\n                }\\n            }\\n        }\\n\\n        int[] arr = new int[set.size()];\\n        int x=0;\\n        for(int i : set){\\n            arr[x]=i;\\n            x++;\\n        }\\n        Arrays.sort(arr);\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3909761,
                "title": "python3-optimized-counter-39ms-beats-100",
                "content": "# Code\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        counter = [0] * 10\\n        for digit in digits:\\n            counter[digit] += 1\\n\\n        result = []\\n        for i in range(100, 999, 2):\\n            a, b, c = i // 100, (i // 10) % 10, i % 10\\n            if (counter[a] >= 1 + (a == b) + (a == c) and \\n                counter[b] >= 1 + (b == a) + (b == c) and \\n                counter[c] >= 1 + (a == c) + (b == c)):\\n                result.append(i)\\n\\n        return result\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        counter = [0] * 10\\n        for digit in digits:\\n            counter[digit] += 1\\n\\n        result = []\\n        for i in range(100, 999, 2):\\n            a, b, c = i // 100, (i // 10) % 10, i % 10\\n            if (counter[a] >= 1 + (a == b) + (a == c) and \\n                counter[b] >= 1 + (b == a) + (b == c) and \\n                counter[c] >= 1 + (a == c) + (b == c)):\\n                result.append(i)\\n\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3882318,
                "title": "simple-java-solution-using-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMay be able to solve using HashSet and ArrayList\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFindout the possible permutations using ArrayList and then storing to Hashset.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)^3\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n\\n     List<Integer> list = new ArrayList<>() ; \\n\\n     for(int i = 0 ;i<digits.length ;i++){\\n         if(digits[i]==0){\\n             continue ;\\n         }\\n         for(int j = 0 ;j<digits.length;j++){\\n             if(j == i) continue ;\\n             for(int k = 0 ;k<digits.length;k++){\\n                 if(k ==i || k==j) continue ;\\n\\n                 int x = (digits[i]*100 + digits[j]*10 +digits[k]);\\n                 if(x%2 == 0)\\n                 list.add(x);\\n             }\\n         }\\n     }\\n\\n     Set<Integer> set = new HashSet<>(list);\\n     int[] arr = new int[set.size()];\\n     int m = 0;\\n     for(int num : set){\\n         arr[m++] = num;\\n     }\\n     Arrays.sort(arr);\\n     return arr;\\n    }\\n\\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n\\n     List<Integer> list = new ArrayList<>() ; \\n\\n     for(int i = 0 ;i<digits.length ;i++){\\n         if(digits[i]==0){\\n             continue ;\\n         }\\n         for(int j = 0 ;j<digits.length;j++){\\n             if(j == i) continue ;\\n             for(int k = 0 ;k<digits.length;k++){\\n                 if(k ==i || k==j) continue ;\\n\\n                 int x = (digits[i]*100 + digits[j]*10 +digits[k]);\\n                 if(x%2 == 0)\\n                 list.add(x);\\n             }\\n         }\\n     }\\n\\n     Set<Integer> set = new HashSet<>(list);\\n     int[] arr = new int[set.size()];\\n     int m = 0;\\n     for(int num : set){\\n         arr[m++] = num;\\n     }\\n     Arrays.sort(arr);\\n     return arr;\\n    }\\n\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3872902,
                "title": "finding-3-digit-even-numbers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& arr) {\\n        int n = arr.size();\\n        vector<int> ans;\\n        unordered_map<int,int> m;\\n        for(int ele:arr){\\n            m[ele]++;\\n        }\\n        for(int i=100;i<=999;i+=2){\\n            int x = i;\\n            int a = x%10;  //one\\'s place digit\\n            x = x/10;\\n            int b = x%10;   //tens place digit\\n            x = x/10;\\n            int c = x;      //Hundred\\'s place digit\\n            if(m.find(a)!=m.end()){\\n                    m[a]--;\\n                    if(m[a]==0) m.erase(a);\\n                    if(m.find(b)!=m.end()){\\n                        m[b]--;\\n                         if(m[b]==0) m.erase(b);\\n                        if(m.find(c)!=m.end()) ans.push_back(i);\\n                        m[b]++;\\n                    }\\n                    m[a]++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& arr) {\\n        int n = arr.size();\\n        vector<int> ans;\\n        unordered_map<int,int> m;\\n        for(int ele:arr){\\n            m[ele]++;\\n        }\\n        for(int i=100;i<=999;i+=2){\\n            int x = i;\\n            int a = x%10;  //one\\'s place digit\\n            x = x/10;\\n            int b = x%10;   //tens place digit\\n            x = x/10;\\n            int c = x;      //Hundred\\'s place digit\\n            if(m.find(a)!=m.end()){\\n                    m[a]--;\\n                    if(m[a]==0) m.erase(a);\\n                    if(m.find(b)!=m.end()){\\n                        m[b]--;\\n                         if(m[b]==0) m.erase(b);\\n                        if(m.find(c)!=m.end()) ans.push_back(i);\\n                        m[b]++;\\n                    }\\n                    m[a]++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3835539,
                "title": "easy-solution-using-stringbuilder-class-in-c",
                "content": "\\n# Code\\n```\\n\\npublic class Solution {\\n    public int[] FindEvenNumbers(int[] digits) {\\n        List<int> ans = new List<int>();\\n        for(int i = 100 ; i < 999 ; i += 2)\\n        {\\n            bool process = true;\\n            StringBuilder sb = new StringBuilder(String.Join(\"\", digits));\\n            String iAsString = i.ToString();\\n            foreach(char ch in iAsString)\\n            {\\n                if(sb.ToString().Contains(ch))\\n                {\\n                    sb.Remove(sb.ToString().IndexOf(ch), 1);\\n                }\\n                else\\n                {\\n                    process = false;\\n                    break;\\n                }\\n            }\\n            if(process)\\n                ans.Add(i);\\n            \\n        }\\n        return ans.ToArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\n\\npublic class Solution {\\n    public int[] FindEvenNumbers(int[] digits) {\\n        List<int> ans = new List<int>();\\n        for(int i = 100 ; i < 999 ; i += 2)\\n        {\\n            bool process = true;\\n            StringBuilder sb = new StringBuilder(String.Join(\"\", digits));\\n            String iAsString = i.ToString();\\n            foreach(char ch in iAsString)\\n            {\\n                if(sb.ToString().Contains(ch))\\n                {\\n                    sb.Remove(sb.ToString().IndexOf(ch), 1);\\n                }\\n                else\\n                {\\n                    process = false;\\n                    break;\\n                }\\n            }\\n            if(process)\\n                ans.Add(i);\\n            \\n        }\\n        return ans.ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3835139,
                "title": "easy-to-understand-solution-with-backtracking-python",
                "content": "# Code\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        nums = {}\\n\\n        # create a dict of each number in digits and the\\n        # number of times it appears in the array\\n        for digit in digits:\\n            if digit not in nums:\\n                nums[digit] = 0\\n            nums[digit] += 1\\n\\n        nums_keys = list(nums.keys())\\n        # sorting the keys allows having sorted enumerations\\n        nums_keys.sort()\\n        return self.fill_enumerations(nums, nums_keys, \"\")\\n\\n    def fill_enumerations(self, nums, nums_keys, curr_enum):\\n        enumerations = []\\n        if len(curr_enum) == 3:\\n            if int(curr_enum) % 2 == 0:\\n                return [int(curr_enum)]\\n            else:\\n                return []\\n\\n        for key in nums_keys:\\n            # if this key is 0 and the current enumeration is still empty,\\n            # skip because we can\\'t have leading zeros, or if the key has\\n            # already been added to the enumeration the total number of \\n            # times it appears in the input array, also skip it\\n            if (len(curr_enum) == 0 and key == 0) or nums[key] == 0:\\n                continue\\n\\n            # append the current key to the enumeration\\n            curr_enum += str(key)\\n            # decrement the number of times this number can still be used\\n            nums[key] -= 1\\n            # continue filling the next numbers of the enumeration    \\n            enumerations.extend(self.fill_enumerations(nums, nums_keys, curr_enum))\\n            # return the number we decremented to keep the original values\\n            nums[key] += 1\\n            # remove the last added number to the enumeration to\\n            # replace it with another one\\n            curr_enum = curr_enum[:-1]\\n\\n        return enumerations\\n```",
                "solutionTags": [
                    "Python3",
                    "Backtracking"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        nums = {}\\n\\n        # create a dict of each number in digits and the\\n        # number of times it appears in the array\\n        for digit in digits:\\n            if digit not in nums:\\n                nums[digit] = 0\\n            nums[digit] += 1\\n\\n        nums_keys = list(nums.keys())\\n        # sorting the keys allows having sorted enumerations\\n        nums_keys.sort()\\n        return self.fill_enumerations(nums, nums_keys, \"\")\\n\\n    def fill_enumerations(self, nums, nums_keys, curr_enum):\\n        enumerations = []\\n        if len(curr_enum) == 3:\\n            if int(curr_enum) % 2 == 0:\\n                return [int(curr_enum)]\\n            else:\\n                return []\\n\\n        for key in nums_keys:\\n            # if this key is 0 and the current enumeration is still empty,\\n            # skip because we can\\'t have leading zeros, or if the key has\\n            # already been added to the enumeration the total number of \\n            # times it appears in the input array, also skip it\\n            if (len(curr_enum) == 0 and key == 0) or nums[key] == 0:\\n                continue\\n\\n            # append the current key to the enumeration\\n            curr_enum += str(key)\\n            # decrement the number of times this number can still be used\\n            nums[key] -= 1\\n            # continue filling the next numbers of the enumeration    \\n            enumerations.extend(self.fill_enumerations(nums, nums_keys, curr_enum))\\n            # return the number we decremented to keep the original values\\n            nums[key] += 1\\n            # remove the last added number to the enumeration to\\n            # replace it with another one\\n            curr_enum = curr_enum[:-1]\\n\\n        return enumerations\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3835056,
                "title": "basic-java-soln",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        Set<Integer> set=new HashSet<>();\\n        for(int i=0;i<digits.length;i++){\\n            if(digits[i]%2==0){\\n                for(int j=0;j<digits.length;j++){\\n                    if(j!=i){\\n                        for(int k=0;k<digits.length;k++){\\n                            if(k!=j&&k!=i){\\n                                int n=digits[j]*100+digits[k]*10+digits[i];\\n                                if(n>99&&n<1000)\\n                                    set.add(n);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        int ans[]=new int[set.size()];\\n        int k=0;\\n        for(int i:set)\\n            ans[k++]=i;\\n        Arrays.sort(ans);\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        Set<Integer> set=new HashSet<>();\\n        for(int i=0;i<digits.length;i++){\\n            if(digits[i]%2==0){\\n                for(int j=0;j<digits.length;j++){\\n                    if(j!=i){\\n                        for(int k=0;k<digits.length;k++){\\n                            if(k!=j&&k!=i){\\n                                int n=digits[j]*100+digits[k]*10+digits[i];\\n                                if(n>99&&n<1000)\\n                                    set.add(n);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        int ans[]=new int[set.size()];\\n        int k=0;\\n        for(int i:set)\\n            ans[k++]=i;\\n        Arrays.sort(ans);\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3820949,
                "title": "simplepythoncode3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfrom itertools import permutations\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        l=[]\\n        d1=list(map(str,digits))\\n        d=set(permutations(d1,3))\\n        d2=list(map(\\'\\'.join,d))\\n        for i in d2:\\n            if i[0]!=str(0):\\n                if int(i)%2==0:\\n                    l.append(int(i))\\n        l.sort()\\n        return l\\n           \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom itertools import permutations\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        l=[]\\n        d1=list(map(str,digits))\\n        d=set(permutations(d1,3))\\n        d2=list(map(\\'\\'.join,d))\\n        for i in d2:\\n            if i[0]!=str(0):\\n                if int(i)%2==0:\\n                    l.append(int(i))\\n        l.sort()\\n        return l\\n           \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3815651,
                "title": "simple-brute-force-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> ans;\\n        for(int i = 0; i<digits.size();i++){\\n             for(int j = 0; j<digits.size();j++){\\n                  for(int k = 0; k<digits.size();k++){\\n                      if((i!=j)&&(i!=k)&&(j!=k)&&(digits[i]!=0)){ \\n                          int num = digits[i]*100 + digits[j]*10 + digits[k];\\n                          if(num%2==0){\\n                          ans.push_back(num);}\\n                      }\\n                  }\\n             }\\n\\n        }\\n        //Sorting and removing duplicates from the vector \\n        sort(ans.begin(), ans.end());\\n        ans.erase(unique(ans.begin(), ans.end()), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> ans;\\n        for(int i = 0; i<digits.size();i++){\\n             for(int j = 0; j<digits.size();j++){\\n                  for(int k = 0; k<digits.size();k++){\\n                      if((i!=j)&&(i!=k)&&(j!=k)&&(digits[i]!=0)){ \\n                          int num = digits[i]*100 + digits[j]*10 + digits[k];\\n                          if(num%2==0){\\n                          ans.push_back(num);}\\n                      }\\n                  }\\n             }\\n\\n        }\\n        //Sorting and removing duplicates from the vector \\n        sort(ans.begin(), ans.end());\\n        ans.erase(unique(ans.begin(), ans.end()), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3813628,
                "title": "python-simple-python-solution-sorting-hash-map",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 84 ms, faster than 86.55% of Python3 online submissions for Finding 3-Digit Even Numbers.\\n# Memory Usage: 16.2 MB, less than 95.52% of Python3 online submissions for Finding 3-Digit Even Numbers.\\n\\n\\tclass Solution:\\n\\t\\tdef findEvenNumbers(self, digits: List[int]) -> List[int]:\\n\\n\\t\\t\\tresult = []\\n\\n\\t\\t\\thash_map = defaultdict(int)\\n\\n\\t\\t\\tfor digit in digits:\\n\\n\\t\\t\\t\\thash_map[digit] = hash_map[digit] + 1\\n\\n\\t\\t\\tfor number in range(100 , 1000, 2):\\n\\n\\t\\t\\t\\tcheck = True    \\n\\t\\t\\t\\tnum = number\\n\\t\\t\\t\\tfrequency = defaultdict(int)\\n\\n\\t\\t\\t\\twhile num > 0:\\n\\t\\t\\t\\t\\tfrequency[num % 10] = frequency[num % 10] + 1\\n\\t\\t\\t\\t\\tnum = num // 10\\n\\n\\t\\t\\t\\tfor key in frequency:\\n\\n\\t\\t\\t\\t\\tif frequency[key] > hash_map[key]:\\n\\t\\t\\t\\t\\t\\tcheck = False\\n\\t\\t\\t\\t\\t\\tbreak\\n\\n\\t\\t\\t\\tif check == True:\\n\\t\\t\\t\\t\\tresult.append(number)\\n\\n\\t\\t\\tresult = sorted(result)\\n\\n\\t\\t\\treturn result\\n\\t\\t\\t\\n\\tTime complexity: O(n\\u22C5logn)\\n\\tSpace Complexity: O(n)\\n\\t\\nThank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sorting"
                ],
                "code": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 84 ms, faster than 86.55% of Python3 online submissions for Finding 3-Digit Even Numbers.\\n# Memory Usage: 16.2 MB, less than 95.52% of Python3 online submissions for Finding 3-Digit Even Numbers.\\n\\n\\tclass Solution:\\n\\t\\tdef findEvenNumbers(self, digits: List[int]) -> List[int]:\\n\\n\\t\\t\\tresult = []\\n\\n\\t\\t\\thash_map = defaultdict(int)\\n\\n\\t\\t\\tfor digit in digits:\\n\\n\\t\\t\\t\\thash_map[digit] = hash_map[digit] + 1\\n\\n\\t\\t\\tfor number in range(100 , 1000, 2):\\n\\n\\t\\t\\t\\tcheck = True    \\n\\t\\t\\t\\tnum = number\\n\\t\\t\\t\\tfrequency = defaultdict(int)\\n\\n\\t\\t\\t\\twhile num > 0:\\n\\t\\t\\t\\t\\tfrequency[num % 10] = frequency[num % 10] + 1\\n\\t\\t\\t\\t\\tnum = num // 10\\n\\n\\t\\t\\t\\tfor key in frequency:\\n\\n\\t\\t\\t\\t\\tif frequency[key] > hash_map[key]:\\n\\t\\t\\t\\t\\t\\tcheck = False\\n\\t\\t\\t\\t\\t\\tbreak\\n\\n\\t\\t\\t\\tif check == True:\\n\\t\\t\\t\\t\\tresult.append(number)\\n\\n\\t\\t\\tresult = sorted(result)\\n\\n\\t\\t\\treturn result\\n\\t\\t\\t\\n\\tTime complexity: O(n\\u22C5logn)\\n\\tSpace Complexity: O(n)\\n\\t\\nThank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "codeTag": "Java"
            },
            {
                "id": 3791759,
                "title": "c-easy-and-concise-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n**step-1**:Store all elements of given array with frequency in ***store***\\n**step-2**:for 3 digit(upto 999)run a loop and again store the digits of number with frequency in ***check***\\n**step-3**:Then compare store and check array if frequency of required number is less in store then it do not store ans array and if it\\'s frequency gteater or equal then it will store the number in ans array\\n**step-4**:increase i=i+2 bcoz for obvious reason,requirement of even number is said\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int n=digits.size();\\n        int store[10]={0};\\n        for(int i=0;i<n;i++){\\n            store[digits[i]]++;\\n        }\\n        vector<int>ans;\\n        int i=100;\\n        while(i<1000){\\n            int a=i;\\n            int check[10]={0};\\n            while(a>0){\\n                int r=a%10;\\n                check[r]++;\\n                a/=10;\\n            }\\n            \\n            bool flag=true;\\n            for(int i=0;i<10;i++){\\n                if(store[i]<check[i])flag=false;\\n            }\\n            if(flag==true)ans.push_back(i);\\n            i+=2;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        int n=digits.size();\\n        int store[10]={0};\\n        for(int i=0;i<n;i++){\\n            store[digits[i]]++;\\n        }\\n        vector<int>ans;\\n        int i=100;\\n        while(i<1000){\\n            int a=i;\\n            int check[10]={0};\\n            while(a>0){\\n                int r=a%10;\\n                check[r]++;\\n                a/=10;\\n            }\\n            \\n            bool flag=true;\\n            for(int i=0;i<10;i++){\\n                if(store[i]<check[i])flag=false;\\n            }\\n            if(flag==true)ans.push_back(i);\\n            i+=2;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3786133,
                "title": "java-code-using-hash-table-and-3-for-loops",
                "content": "# Intuition\\n- Count digits and place them in 100s, 10s and 1s place one by one\\n\\n# Approach\\n- Get counts for all digits from 0 to 9\\n- Set 100s , 10s, 1s place using 3 for loops\\n- Each time you pick the digit for a place, decrement it so that it is not picked by the next place \\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] counter = new int[10];\\n        for (int digit : digits) {\\n            counter[digit]++;\\n        }\\n\\n        ArrayList<Integer> result = new ArrayList<>();\\n        int[] number = new int[]{-1, -1, -1};\\n        for (int first = 1 ; first <= 9 ; first++) {\\n            if (counter[first] == 0) continue;\\n            counter[first]--;\\n            number[0] = first;\\n            for (int second = 0 ; second <= 9; second++) {\\n                if (counter[second] == 0) continue;\\n                counter[second]--;\\n                number[1] = second;\\n                for (int third = 0 ; third <= 8 ; third += 2) {\\n                    if (counter[third] == 0) continue;\\n                    counter[third]--;\\n                    number[2] = third;\\n                    result.add( (number[0] * 100)  + (number[1] * 10) + (number[2]) );\\n                    counter[third]++;\\n                }\\n                counter[second]++;\\n            }\\n            counter[first]++;\\n        }\\n\\n        int[] resultArray = new int[result.size()];\\n        for (int i = 0 ; i < resultArray.length ; i++) {\\n            resultArray[i] = result.get(i);\\n        }\\n\\n        return resultArray;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] counter = new int[10];\\n        for (int digit : digits) {\\n            counter[digit]++;\\n        }\\n\\n        ArrayList<Integer> result = new ArrayList<>();\\n        int[] number = new int[]{-1, -1, -1};\\n        for (int first = 1 ; first <= 9 ; first++) {\\n            if (counter[first] == 0) continue;\\n            counter[first]--;\\n            number[0] = first;\\n            for (int second = 0 ; second <= 9; second++) {\\n                if (counter[second] == 0) continue;\\n                counter[second]--;\\n                number[1] = second;\\n                for (int third = 0 ; third <= 8 ; third += 2) {\\n                    if (counter[third] == 0) continue;\\n                    counter[third]--;\\n                    number[2] = third;\\n                    result.add( (number[0] * 100)  + (number[1] * 10) + (number[2]) );\\n                    counter[third]++;\\n                }\\n                counter[second]++;\\n            }\\n            counter[first]++;\\n        }\\n\\n        int[] resultArray = new int[result.size()];\\n        for (int i = 0 ; i < resultArray.length ; i++) {\\n            resultArray[i] = result.get(i);\\n        }\\n\\n        return resultArray;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3725300,
                "title": "nested-for-loops",
                "content": "# Code\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        counter = Counter(digits)\\n        result = []\\n        for i in range(1, 10):\\n            for j in range(0, 10):\\n                for k in range(0, 10, 2):\\n                    digit = Counter([i, j, k])\\n                    if (digit[i] <= counter[i]\\n                        and digit[j] <= counter[j]\\n                        and digit[k] <= counter[k]):\\n                        result.append(i * 100 + j * 10 + k)\\n        return result\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        counter = Counter(digits)\\n        result = []\\n        for i in range(1, 10):\\n            for j in range(0, 10):\\n                for k in range(0, 10, 2):\\n                    digit = Counter([i, j, k])\\n                    if (digit[i] <= counter[i]\\n                        and digit[j] <= counter[j]\\n                        and digit[k] <= counter[k]):\\n                        result.append(i * 100 + j * 10 + k)\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3674715,
                "title": "py3-backtracking-solution-clean-and-easy",
                "content": "# Intuition\\n    \\n![download.jpg](https://assets.leetcode.com/users/images/43020dbb-b143-427e-924c-a4d470b4de58_1687544800.0074813.jpeg)\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n    O(n log n + n)\\n\\n- Space complexity:\\n    O(n).\\n# Code\\n```\\nclass Solution:\\n    def __init__(self):\\n        self.ans = []\\n    def backtracing_solution(self , digits , path):\\n        if len(path) == 3:\\n            if int(path) % 2==0 and path[0] != \"0\":\\n                self.ans.append(int(path))\\n            return\\n        \\n        for idx , val in enumerate(digits):\\n            if idx > 0 and digits[idx] == digits[idx-1]: ## avoid duplicate numbers\\n                continue\\n            self.backtracing_solution(digits[:idx] + digits[idx+1:] , path+str(val))\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        digits.sort()\\n        self.backtracing_solution(digits , \\'\\')\\n        return self.ans\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "Backtracking",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def __init__(self):\\n        self.ans = []\\n    def backtracing_solution(self , digits , path):\\n        if len(path) == 3:\\n            if int(path) % 2==0 and path[0] != \"0\":\\n                self.ans.append(int(path))\\n            return\\n        \\n        for idx , val in enumerate(digits):\\n            if idx > 0 and digits[idx] == digits[idx-1]: ## avoid duplicate numbers\\n                continue\\n            self.backtracing_solution(digits[:idx] + digits[idx+1:] , path+str(val))\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        digits.sort()\\n        self.backtracing_solution(digits , \\'\\')\\n        return self.ans\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3640838,
                "title": "python-o-n-easy-short",
                "content": "# Code\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        freq, ans = Counter(digits), []\\n        for num in range(100, 999, 2):\\n            num_freq = Counter([int(c) for c in str(num)])\\n            if num_freq == num_freq & freq: ans.append(num)\\n        return ans\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table",
                    "Counting"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        freq, ans = Counter(digits), []\\n        for num in range(100, 999, 2):\\n            num_freq = Counter([int(c) for c in str(num)])\\n            if num_freq == num_freq & freq: ans.append(num)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3626563,
                "title": "c-nested-loop",
                "content": "# Intuition\\nthe maximum number of times you need to check is 450 times, (999-100+1)/2 = 450 (only even numbers)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. record the numbers with array \\n2. use nested loop to check each digit, if we don\\'t have enough numbers in record, we skip all numbers have the same type\\n3. the unit digit add 2 each time (even number), the hundred digit start from 1(no leading 0)\\n4. we check from 100 to 999, so we don\\'t need to sort the result\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution\\n        {\\n            public int[] FindEvenNumbers(int[] digits)\\n            {\\n                List<int> result = new List<int>();\\n                int[] record = new int[11];\\n\\n                foreach(int digit in digits)\\n                    record[digit]++;\\n\\n\\n                for (int i = 1;i<10;i++)\\n                {\\n                    if (record[i]>0)\\n                        for(int j = 0; j < 10; j++)\\n                        {\\n                            if(record[j] > ((i==j)?1:0))\\n                                for(int k = 0; k < 10; k = k+2)\\n                                {\\n                                    if (record[k] > ((i == j) && (k==j) ? 2 :\\n                                                        (k == j) ? 1 :\\n                                                        (k == i) ? 1 : 0))\\n                                    {\\n                                        result.Add(i*100+j*10+k);\\n                                    }\\n                                }\\n                        }\\n                }\\n\\n                return result.ToArray();\\n            }\\n        }\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n        {\\n            public int[] FindEvenNumbers(int[] digits)\\n            {\\n                List<int> result = new List<int>();\\n                int[] record = new int[11];\\n\\n                foreach(int digit in digits)\\n                    record[digit]++;\\n\\n\\n                for (int i = 1;i<10;i++)\\n                {\\n                    if (record[i]>0)\\n                        for(int j = 0; j < 10; j++)\\n                        {\\n                            if(record[j] > ((i==j)?1:0))\\n                                for(int k = 0; k < 10; k = k+2)\\n                                {\\n                                    if (record[k] > ((i == j) && (k==j) ? 2 :\\n                                                        (k == j) ? 1 :\\n                                                        (k == i) ? 1 : 0))\\n                                    {\\n                                        result.Add(i*100+j*10+k);\\n                                    }\\n                                }\\n                        }\\n                }\\n\\n                return result.ToArray();\\n            }\\n        }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573036,
                "title": "easy-c-solution-hashing",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n```O(n^2)```\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n```O(n)```\\n# Code\\n```\\n// if it helps plzz upvote it \\uD83D\\uDE09\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> ans;\\n        vector<int> hash(10,0);\\n        for(auto it: digits){\\n            hash[it]++;\\n        }\\n        for(int i = 100; i < 999; i+=2){\\n            vector<int> temp(10,0);\\n            int num = i;\\n            \\n            while(num>0){\\n                temp[num % 10]++;\\n                num /= 10;\\n            }\\n            // Checking the num\\n            bool flag = true;\\n            for(int j = 0; j < 10; j++){\\n                if(temp[j] > hash[j]){\\n                    flag = false;\\n                    break;\\n                }\\n            }\\n            if(flag){\\n                ans.push_back(i);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n// if it helps plzz upvote it \\uD83D\\uDE09\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table"
                ],
                "code": "```O(n^2)```\n```O(n)```\n```\\n// if it helps plzz upvote it \\uD83D\\uDE09\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> ans;\\n        vector<int> hash(10,0);\\n        for(auto it: digits){\\n            hash[it]++;\\n        }\\n        for(int i = 100; i < 999; i+=2){\\n            vector<int> temp(10,0);\\n            int num = i;\\n            \\n            while(num>0){\\n                temp[num % 10]++;\\n                num /= 10;\\n            }\\n            // Checking the num\\n            bool flag = true;\\n            for(int j = 0; j < 10; j++){\\n                if(temp[j] > hash[j]){\\n                    flag = false;\\n                    break;\\n                }\\n            }\\n            if(flag){\\n                ans.push_back(i);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n// if it helps plzz upvote it \\uD83D\\uDE09\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3565310,
                "title": "self-explanatory-easier-to-understand-code",
                "content": "# People on leetcode : \"Self-Explanatory Code\"\\n\\n# Their Code :\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& ________) {\\n        vector<int> ____; map<int,int> ___;\\n        for(auto &_ : ________) ___[_]++;\\n        for(int _ = 100; _ < 999; _ += 2){\\n            map<int,int> __;\\n            int _____ = _;\\n            while(_____){\\n                __[_____ % 10]++;\\n                _____ /= 10;\\n            }\\n            bool ______ = true;\\n            for(auto & _______ : __){\\n                if(___[_______.first] < _______.second) ______ = false;\\n            }\\n            if(______) ____.push_back(_);\\n\\n        } return ____;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& ________) {\\n        vector<int> ____; map<int,int> ___;\\n        for(auto &_ : ________) ___[_]++;\\n        for(int _ = 100; _ < 999; _ += 2){\\n            map<int,int> __;\\n            int _____ = _;\\n            while(_____){\\n                __[_____ % 10]++;\\n                _____ /= 10;\\n            }\\n            bool ______ = true;\\n            for(auto & _______ : __){\\n                if(___[_______.first] < _______.second) ______ = false;\\n            }\\n            if(______) ____.push_back(_);\\n\\n        } return ____;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3540144,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        res, cnt = [], Counter(digits)\\n        for i in range(1, 10):\\n            for j in range(0, 10):\\n                for k in range(0, 10, 2):\\n                    if cnt[i] > 0 and cnt[j] > (i == j) and cnt[k] > (k == i) + (k == j):\\n                        res.append(i * 100 + j * 10 + k)\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        res, cnt = [], Counter(digits)\\n        for i in range(1, 10):\\n            for j in range(0, 10):\\n                for k in range(0, 10, 2):\\n                    if cnt[i] > 0 and cnt[j] > (i == j) and cnt[k] > (k == i) + (k == j):\\n                        res.append(i * 100 + j * 10 + k)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3523004,
                "title": "using-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        HashSet<Integer> hs = new HashSet<>();\\n\\n        for(int i=0; i<digits.length; i++){\\n            if(digits[i]==0){\\n                continue;\\n            }\\n            for(int j=0; j<digits.length; j++){\\n                for(int k=0; k<digits.length; k++){\\n                    int num = digits[i]*100 + digits[j]*10 + digits[k];\\n                    if((num&1)==0 && i!=j && j!=k && i!=k){\\n                        hs.add(num);\\n                    }\\n                }\\n            }\\n        }\\n        // System.out.println(hs);\\n\\n        int[] arr = new int[hs.size()];\\n        Iterator<Integer> it = hs.iterator();\\n        int i = 0;\\n        while(it.hasNext()){\\n            arr[i++] = it.next();\\n        }\\n        Arrays.sort(arr);\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        HashSet<Integer> hs = new HashSet<>();\\n\\n        for(int i=0; i<digits.length; i++){\\n            if(digits[i]==0){\\n                continue;\\n            }\\n            for(int j=0; j<digits.length; j++){\\n                for(int k=0; k<digits.length; k++){\\n                    int num = digits[i]*100 + digits[j]*10 + digits[k];\\n                    if((num&1)==0 && i!=j && j!=k && i!=k){\\n                        hs.add(num);\\n                    }\\n                }\\n            }\\n        }\\n        // System.out.println(hs);\\n\\n        int[] arr = new int[hs.size()];\\n        Iterator<Integer> it = hs.iterator();\\n        int i = 0;\\n        while(it.hasNext()){\\n            arr[i++] = it.next();\\n        }\\n        Arrays.sort(arr);\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3518572,
                "title": "java-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) \\n    {\\n      // keep count of each integer\\n      int[] map = new int[10];\\n\\n        for(int x : digits)\\n        {\\n            map[x]++;\\n        }\\n        \\n        ArrayList<Integer> al = new ArrayList<>();\\n\\n        // sorting array to get the max and min element\\n        Arrays.sort(digits);\\n\\n        // upper limit to limit the iteration\\n        int upperLimit = getUpperLimit(digits[digits.length-1]);\\n        // lower limit to start loop iteration\\n        int lowerLimit = digits[0]==0 ? 100 : digits[0]*100; \\n\\n        // checking each integer in between lower limit and upper limit if it satisfies given conditions or not. If true then add it to the arrayList\\n        for(int i = lowerLimit; i<=upperLimit; i = i+2)\\n        {\\n            if(checkDigit(i, map))\\n            {\\n                al.add(i);\\n            }\\n        }\\n\\n        int len = al.size();\\n\\n        int[] iRet = new int[len];\\n\\n        for(int i = 0; i<len; i++)\\n        {\\n            iRet[i] = al.get(i);\\n        }\\n\\n        return iRet;\\n    }\\n\\n    private int getUpperLimit(int n)\\n    {   \\n      // this function returns the 3 digit upper limit \\n      // Example if n = 8 then the return value will be 888\\n        int temp = n;\\n        for(int i = 0; i<2; i++)\\n        {\\n            temp = n + (temp*10);\\n        }\\n\\n        return temp;\\n    }\\n\\n    private boolean checkDigit(int n, int[] map)\\n    {\\n      // This function basically check if the occurance of individual digit in a nummber is not greater than the occurance of that digit in the digits array\\n      // for example [2,1,3,0] in this array every digit is occurred at once only but if the number 111 the digit 1 occurred 3 times so 111 is not the desired digit so this function will return false \\n        int[] currentMap = new int[10];\\n\\n        while(n>0)\\n        {\\n            currentMap[n%10]++;    \\n            n = n/10;\\n        }\\n\\n        for(int i = 0; i<10; i++)\\n        {\\n            if(currentMap[i] > map[i])\\n            {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) \\n    {\\n      // keep count of each integer\\n      int[] map = new int[10];\\n\\n        for(int x : digits)\\n        {\\n            map[x]++;\\n        }\\n        \\n        ArrayList<Integer> al = new ArrayList<>();\\n\\n        // sorting array to get the max and min element\\n        Arrays.sort(digits);\\n\\n        // upper limit to limit the iteration\\n        int upperLimit = getUpperLimit(digits[digits.length-1]);\\n        // lower limit to start loop iteration\\n        int lowerLimit = digits[0]==0 ? 100 : digits[0]*100; \\n\\n        // checking each integer in between lower limit and upper limit if it satisfies given conditions or not. If true then add it to the arrayList\\n        for(int i = lowerLimit; i<=upperLimit; i = i+2)\\n        {\\n            if(checkDigit(i, map))\\n            {\\n                al.add(i);\\n            }\\n        }\\n\\n        int len = al.size();\\n\\n        int[] iRet = new int[len];\\n\\n        for(int i = 0; i<len; i++)\\n        {\\n            iRet[i] = al.get(i);\\n        }\\n\\n        return iRet;\\n    }\\n\\n    private int getUpperLimit(int n)\\n    {   \\n      // this function returns the 3 digit upper limit \\n      // Example if n = 8 then the return value will be 888\\n        int temp = n;\\n        for(int i = 0; i<2; i++)\\n        {\\n            temp = n + (temp*10);\\n        }\\n\\n        return temp;\\n    }\\n\\n    private boolean checkDigit(int n, int[] map)\\n    {\\n      // This function basically check if the occurance of individual digit in a nummber is not greater than the occurance of that digit in the digits array\\n      // for example [2,1,3,0] in this array every digit is occurred at once only but if the number 111 the digit 1 occurred 3 times so 111 is not the desired digit so this function will return false \\n        int[] currentMap = new int[10];\\n\\n        while(n>0)\\n        {\\n            currentMap[n%10]++;    \\n            n = n/10;\\n        }\\n\\n        for(int i = 0; i<10; i++)\\n        {\\n            if(currentMap[i] > map[i])\\n            {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3508766,
                "title": "efficient-and-easy-to-understand-typescript-solution-beats-100",
                "content": "# Intuition\\nThe key intuition behind this approach is to leverage digit frequency information for efficiently identifying even 3-digit numbers that can be formed using the input digits. By iterating through all even 3-digit numbers and comparing their digit frequencies with the input array\\'s digit frequencies, we can quickly find and store all valid even numbers.\\n\\n# Approach\\n1. Create a digit frequency map (digitFrequency) for the input array.\\n2. Iterate through even 3-digit numbers from 100 to 998.\\n3. Calculate the digit frequency of the current number (currentIntFrequency).\\n4. Compare currentIntFrequency with digitFrequency to check if the current number can be formed using input digits.\\n5. If the current number can be formed, add it to the evenNumbers array.\\nReturn the evenNumbers array as the final output.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nfunction findEvenNumbers(digits: number[]): number[] {\\n    const evenNumbers = [];\\n\\n    const digitFrequency: Map<number, number> = new Map();\\n\\n    for (let digit of digits) {\\n        digitFrequency.set(digit, (digitFrequency.get(digit) || 0) + 1);\\n    }\\n\\n    const currentIntFrequency: Map<number, number> = new Map();\\n\\n    for (let currentInt = 100; currentInt < 999; currentInt += 2) {\\n        const currentIntAsString = `${currentInt}`;\\n\\n        for (let intDigit of currentIntAsString) {\\n            currentIntFrequency.set(+intDigit, (currentIntFrequency.get(+intDigit) || 0) + 1);\\n        }\\n\\n        if (\\n            digitFrequency.get(+currentIntAsString[0]) >= currentIntFrequency.get(+currentIntAsString[0])\\n            && digitFrequency.get(+currentIntAsString[1]) >= currentIntFrequency.get(+currentIntAsString[1])\\n            && digitFrequency.get(+currentIntAsString[2]) >= currentIntFrequency.get(+currentIntAsString[2])\\n        ) {\\n            evenNumbers.push(currentInt);\\n        }\\n\\n        currentIntFrequency.clear();\\n    }\\n\\n    return evenNumbers;\\n};\\n\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction findEvenNumbers(digits: number[]): number[] {\\n    const evenNumbers = [];\\n\\n    const digitFrequency: Map<number, number> = new Map();\\n\\n    for (let digit of digits) {\\n        digitFrequency.set(digit, (digitFrequency.get(digit) || 0) + 1);\\n    }\\n\\n    const currentIntFrequency: Map<number, number> = new Map();\\n\\n    for (let currentInt = 100; currentInt < 999; currentInt += 2) {\\n        const currentIntAsString = `${currentInt}`;\\n\\n        for (let intDigit of currentIntAsString) {\\n            currentIntFrequency.set(+intDigit, (currentIntFrequency.get(+intDigit) || 0) + 1);\\n        }\\n\\n        if (\\n            digitFrequency.get(+currentIntAsString[0]) >= currentIntFrequency.get(+currentIntAsString[0])\\n            && digitFrequency.get(+currentIntAsString[1]) >= currentIntFrequency.get(+currentIntAsString[1])\\n            && digitFrequency.get(+currentIntAsString[2]) >= currentIntFrequency.get(+currentIntAsString[2])\\n        ) {\\n            evenNumbers.push(currentInt);\\n        }\\n\\n        currentIntFrequency.clear();\\n    }\\n\\n    return evenNumbers;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3489957,
                "title": "find-all-the-unique-even-numbers-in-an-array",
                "content": "# Intuition\\nWe need to find all unique even numbers by concatenating three elements of the given array. We can use a set to store the unique even numbers as we generate them, and finally, convert the set into a sorted vector to return as the result.\\n\\n# Approach\\n1. Create an empty set to store unique even numbers.\\n2. For each element in the input array:\\n    a) Check if the element is zero. If yes, continue to next element.\\n    b) For each unique combination of three elements (i, j, k) in the array, where i, j, and k are distinct indices and i < j < k : Check if the concatenated number i*100 + j*10 + k is even, if yes, then insert it into the set.\\n3. Convert the set into a vector and return the sorted vector. \\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the algorithm is O(n^3), as we are generating all possible unique combinations of three elements in the array.\\n\\n- Space complexity:\\nThe space complexity of the algorithm is O(n), as we are using a set to store the unique even numbers.\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        set<int> s;\\n        int n = digits.size();\\n        for(int i = 0; i<n; i++){\\n            if(digits[i]==0) continue;\\n            for(int j = 0; j<n; j++){\\n                for(int k = 0; k<n; k++){\\n                    if(i!=j && j!=k && k!=i && (digits[i]*100 + digits[j]*10 + digits[k])%2==0){\\n                        s.insert(digits[i]*100 + digits[j]*10 + digits[k]);\\n                    }\\n                }\\n            }\\n        }\\n\\n        vector <int> ans;\\n        for(auto i: s)\\n        {\\n            ans.push_back(i);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        set<int> s;\\n        int n = digits.size();\\n        for(int i = 0; i<n; i++){\\n            if(digits[i]==0) continue;\\n            for(int j = 0; j<n; j++){\\n                for(int k = 0; k<n; k++){\\n                    if(i!=j && j!=k && k!=i && (digits[i]*100 + digits[j]*10 + digits[k])%2==0){\\n                        s.insert(digits[i]*100 + digits[j]*10 + digits[k]);\\n                    }\\n                }\\n            }\\n        }\\n\\n        vector <int> ans;\\n        for(auto i: s)\\n        {\\n            ans.push_back(i);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489396,
                "title": "python3-counter-brute-force",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        \\n        ans=[]\\n        count=Counter(digits)\\n        \\n        for i in range(100,1000):\\n            if i%2==1:\\n                continue\\n                \\n            c=Counter(int(ch) for ch in str(i))\\n            if all(c[int(ch)]<=count[int(ch)] for ch in str(i)):\\n                ans.append(i)\\n        \\n        return ans\\n            \\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Counting"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        \\n        ans=[]\\n        count=Counter(digits)\\n        \\n        for i in range(100,1000):\\n            if i%2==1:\\n                continue\\n                \\n            c=Counter(int(ch) for ch in str(i))\\n            if all(c[int(ch)]<=count[int(ch)] for ch in str(i)):\\n                ans.append(i)\\n        \\n        return ans\\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3464566,
                "title": "finding-3-digit-even-numbers",
                "content": "# Code\\n```\\nclass Solution:\\n    def findEvenNumbers(self, d: List[int]) -> List[int]:\\n        a = [str(i) for i in d]\\n        l = []\\n        for i in range(100,1000,2):\\n            b = str(i)\\n            count = 0\\n            for j in b:\\n                if b.count(j)<=a.count(j):\\n                    pass\\n                else:\\n                    count+=1\\n                    break\\n            if count==0:\\n                l.append(int(b))\\n        return l\\n\\n\\n            \\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, d: List[int]) -> List[int]:\\n        a = [str(i) for i in d]\\n        l = []\\n        for i in range(100,1000,2):\\n            b = str(i)\\n            count = 0\\n            for j in b:\\n                if b.count(j)<=a.count(j):\\n                    pass\\n                else:\\n                    count+=1\\n                    break\\n            if count==0:\\n                l.append(int(b))\\n        return l\\n\\n\\n            \\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3436892,
                "title": "java-simple-solution-bruteforce-counting",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] allDigitsCount = new int[10];\\n        for (int digit : digits) {\\n            allDigitsCount[digit]++;\\n        }\\n\\n        List<Integer> evenNumbersList = new ArrayList<>();\\n        for (int num = 100; num <= 999; num += 2) {\\n            int currentNumber = num;\\n\\n            int[] currentNumberDigits = new int[10];\\n            while (currentNumber > 0) {\\n                currentNumberDigits[currentNumber % 10]++;\\n                currentNumber = currentNumber / 10;\\n            }\\n\\n            if (canBuildNumberFromDigits(currentNumberDigits, allDigitsCount)) {\\n                evenNumbersList.add(num);\\n            }\\n        }\\n\\n        return evenNumbersList\\n                .stream()\\n                .mapToInt(num -> num)\\n                .toArray();\\n    }\\n\\n    private boolean canBuildNumberFromDigits(int[] currentNum, int[] database) {\\n        for (int i = 0; i < 10; i++) {\\n            if (currentNum[i] > database[i]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Simulation",
                    "Enumeration"
                ],
                "code": "```\\nclass Solution {\\n\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] allDigitsCount = new int[10];\\n        for (int digit : digits) {\\n            allDigitsCount[digit]++;\\n        }\\n\\n        List<Integer> evenNumbersList = new ArrayList<>();\\n        for (int num = 100; num <= 999; num += 2) {\\n            int currentNumber = num;\\n\\n            int[] currentNumberDigits = new int[10];\\n            while (currentNumber > 0) {\\n                currentNumberDigits[currentNumber % 10]++;\\n                currentNumber = currentNumber / 10;\\n            }\\n\\n            if (canBuildNumberFromDigits(currentNumberDigits, allDigitsCount)) {\\n                evenNumbersList.add(num);\\n            }\\n        }\\n\\n        return evenNumbersList\\n                .stream()\\n                .mapToInt(num -> num)\\n                .toArray();\\n    }\\n\\n    private boolean canBuildNumberFromDigits(int[] currentNum, int[] database) {\\n        for (int i = 0; i < 10; i++) {\\n            if (currentNum[i] > database[i]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3389829,
                "title": "python-solution",
                "content": "\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        ans = []\\n        ds = Counter(digits)\\n        for n in range(100,999,2):\\n            s = [int(i) for i in str(n)]\\n            dc = Counter(s)\\n            if all([i in ds for i in s]) and all([dc[i] <= ds[i] for i in s]):\\n                ans.append(n)\\n            \\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        ans = []\\n        ds = Counter(digits)\\n        for n in range(100,999,2):\\n            s = [int(i) for i in str(n)]\\n            dc = Counter(s)\\n            if all([i in ds for i in s]) and all([dc[i] <= ds[i] for i in s]):\\n                ans.append(n)\\n            \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3354807,
                "title": "java-easy-solution",
                "content": "class Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n\\n        List<Integer> myList = new ArrayList<Integer>();\\n\\n        Map<Integer, Integer> myMap = new HashMap<Integer, Integer>();\\n\\n        for (int i = 0 ; i < digits.length ; i++){\\n            int a = digits[i];\\n            myMap.put(a, myMap.getOrDefault(a, 0) + 1);\\n        }\\n\\n        for (int i = 100 ; i < 999 ; i = i + 2){\\n\\n            int[] arr = String.valueOf(i).chars().map(c -> c - \\'0\\').toArray();\\n\\n            boolean status = checkStatus(new HashMap<Integer, Integer>(myMap), arr);\\n\\n            if (status == true){\\n                myList.add(i);\\n            }\\n\\n        }\\n\\n        return myList.stream().mapToInt(i -> i).toArray();   \\n        \\n    }\\n\\n    public static boolean checkStatus(Map<Integer, Integer> myMap, int[] arr){\\n        int k = 0;\\n        for (int i = 0 ; i < arr.length ; i++){\\n            if (myMap.containsKey(arr[i]) && myMap.get(arr[i]) > 0){\\n                int value = myMap.get(arr[i]);                \\n                k++;\\n                myMap.put(arr[i], value - 1);                \\n            }\\n        }\\n        if (k == 3) return true;\\n        return false;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n\\n        List<Integer> myList = new ArrayList<Integer>();\\n\\n        Map<Integer, Integer> myMap = new HashMap<Integer, Integer>();\\n\\n        for (int i = 0 ; i < digits.length ; i++){\\n            int a = digits[i];\\n            myMap.put(a, myMap.getOrDefault(a, 0) + 1);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3339873,
                "title": "very-easy-jebasraja-karunya",
                "content": "# Intuition:Karunya university:Accenture\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) \\n    {\\n         int[] find=new int[10];\\n\\t   \\n\\t   List<Integer> car=new ArrayList<Integer>(); \\n\\t     \\n\\t  for ( int i=0;i<digits.length;i++)\\n\\t  {\\n\\t      find[digits[i]]++;    \\n\\t  }\\n\\t  \\n\\t  \\n\\t  for (int i=1;i<=9;i++)\\n\\t  { \\n\\t         find[i]--;\\n\\t      for (int j=0;j<=9;j++)\\n\\t      {\\n\\t          find[j]--;\\n\\t          for (int k=0;k<=8;k=k+2)\\n\\t          {   \\n\\t              find[k]--;\\n\\t                \\n\\t                if (find[i]>=0 && find[j]>=0 && find[k]>=0)\\n\\t                {\\n\\t                     car.add(i*100+j*10+k);    \\n\\t                     System.out.println(i*100+j*10+k);\\n \\t                }\\n\\t          \\n\\t             find[k]++;\\n\\t          }\\n\\t          find[j]++;\\n\\t      }\\n\\t      find[i]++;\\n\\t  }\\n\\t    \\n\\tint[] finalanswer=new int[car.size()];\\n\\t/*\\n\\tfor (int i=0;i<find.length;i++)\\n\\t{\\n\\t   System.out.println(find[i]); \\n\\t}\\n\\t*/\\n\\tfor (int i=0;i<car.size();i++)\\n\\t{\\n\\t    //System.out.println(car.get(i));\\n\\t     finalanswer[i]=car.get(i);\\n\\t}\\n\\t  \\n      return finalanswer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) \\n    {\\n         int[] find=new int[10];\\n\\t   \\n\\t   List<Integer> car=new ArrayList<Integer>(); \\n\\t     \\n\\t  for ( int i=0;i<digits.length;i++)\\n\\t  {\\n\\t      find[digits[i]]++;    \\n\\t  }\\n\\t  \\n\\t  \\n\\t  for (int i=1;i<=9;i++)\\n\\t  { \\n\\t         find[i]--;\\n\\t      for (int j=0;j<=9;j++)\\n\\t      {\\n\\t          find[j]--;\\n\\t          for (int k=0;k<=8;k=k+2)\\n\\t          {   \\n\\t              find[k]--;\\n\\t                \\n\\t                if (find[i]>=0 && find[j]>=0 && find[k]>=0)\\n\\t                {\\n\\t                     car.add(i*100+j*10+k);    \\n\\t                     System.out.println(i*100+j*10+k);\\n \\t                }\\n\\t          \\n\\t             find[k]++;\\n\\t          }\\n\\t          find[j]++;\\n\\t      }\\n\\t      find[i]++;\\n\\t  }\\n\\t    \\n\\tint[] finalanswer=new int[car.size()];\\n\\t/*\\n\\tfor (int i=0;i<find.length;i++)\\n\\t{\\n\\t   System.out.println(find[i]); \\n\\t}\\n\\t*/\\n\\tfor (int i=0;i<car.size();i++)\\n\\t{\\n\\t    //System.out.println(car.get(i));\\n\\t     finalanswer[i]=car.get(i);\\n\\t}\\n\\t  \\n      return finalanswer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3329223,
                "title": "python3",
                "content": "# Code\\n```\\nfrom sortedcontainers import SortedSet\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        seen = [False] * len(digits)\\n        ans = SortedSet()\\n        @lru_cache(maxsize=None)\\n        def backtrack(num):\\n            if num and num[0] == \"0\":\\n                return \\n            \\n            if len(num) == 3:\\n                if int(num[-1]) % 2 == 0:\\n                    ans.add(int(num))\\n                return\\n\\n            for i in range(len(digits)):\\n                if not seen[i]:\\n                    seen[i] = True\\n                    num += str(digits[i])\\n                    backtrack(num)\\n                    num = num[:-1]\\n                    seen[i] = False\\n\\n        backtrack(\"\")\\n        return ans\\n\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Backtracking",
                    "Memoization",
                    "Sorting"
                ],
                "code": "```\\nfrom sortedcontainers import SortedSet\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        seen = [False] * len(digits)\\n        ans = SortedSet()\\n        @lru_cache(maxsize=None)\\n        def backtrack(num):\\n            if num and num[0] == \"0\":\\n                return \\n            \\n            if len(num) == 3:\\n                if int(num[-1]) % 2 == 0:\\n                    ans.add(int(num))\\n                return\\n\\n            for i in range(len(digits)):\\n                if not seen[i]:\\n                    seen[i] = True\\n                    num += str(digits[i])\\n                    backtrack(num)\\n                    num = num[:-1]\\n                    seen[i] = False\\n\\n        backtrack(\"\")\\n        return ans\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3301737,
                "title": "trivial-c-beats-100",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> result;\\n        unordered_set<int> set;\\n        const auto size = digits.size();\\n        sort(begin(digits), end(digits));\\n        for (auto i = 0; i < size; ++i) {\\n            if (digits[i] == 0) continue;\\n            for (auto j = 0; j < size; ++j) {\\n                if (j == i) continue;\\n                for (auto k = 0; k < size; ++k) {\\n                    if (k == i || k == j || digits[k] % 2) continue;\\n                    const auto num = digits[i] * 100 + digits[j] * 10 + digits[k];\\n                    if (!set.count(num)) {\\n                        set.insert(num);\\n                        result.push_back(num);\\n                    }\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> result;\\n        unordered_set<int> set;\\n        const auto size = digits.size();\\n        sort(begin(digits), end(digits));\\n        for (auto i = 0; i < size; ++i) {\\n            if (digits[i] == 0) continue;\\n            for (auto j = 0; j < size; ++j) {\\n                if (j == i) continue;\\n                for (auto k = 0; k < size; ++k) {\\n                    if (k == i || k == j || digits[k] % 2) continue;\\n                    const auto num = digits[i] * 100 + digits[j] * 10 + digits[k];\\n                    if (!set.count(num)) {\\n                        set.insert(num);\\n                        result.push_back(num);\\n                    }\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3290094,
                "title": "java-hash-map",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    private final int MIN = 100;\\n    private final int MAX = 999;\\n\\n    public int[] findEvenNumbers(int[] digits) {\\n        Map<Integer, Integer> counter = getCount(digits);\\n        List<Integer> ans = new ArrayList<>();\\n\\n        for (int num = MIN; num <= MAX; num++) {\\n            if (num % 2 != 0)\\n                continue;\\n\\n            String numStr = String.valueOf(num);\\n            int first = Character.getNumericValue(numStr.charAt(0));\\n            int second = Character.getNumericValue(numStr.charAt(1));\\n            int third = Character.getNumericValue(numStr.charAt(2));\\n\\n            Map<Integer, Integer> counterTwo = new HashMap<>();\\n            updateMap(counterTwo, first);\\n            updateMap(counterTwo, second);\\n            updateMap(counterTwo, third);\\n            boolean flag = true;\\n\\n            for (int key: counterTwo.keySet()) {\\n                if (!counter.containsKey(key) ||\\n                counter.get(key) < counterTwo.get(key))\\n                    flag = false;\\n            }\\n\\n            if (flag)\\n                ans.add(num);\\n        }\\n\\n        return ans\\n            .stream()\\n            .mapToInt(x -> x)\\n            .toArray();\\n    }\\n\\n    private Map<Integer, Integer> getCount(int[] digits) {\\n        Map<Integer, Integer> counter = new HashMap<>();\\n\\n        for (int digit: digits)\\n            updateMap(counter, digit);\\n        \\n        return counter;\\n    }\\n\\n    private void updateMap(Map<Integer, Integer> map, int key) {\\n        map.put(key, map.getOrDefault(key, 0) + 1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    private final int MIN = 100;\\n    private final int MAX = 999;\\n\\n    public int[] findEvenNumbers(int[] digits) {\\n        Map<Integer, Integer> counter = getCount(digits);\\n        List<Integer> ans = new ArrayList<>();\\n\\n        for (int num = MIN; num <= MAX; num++) {\\n            if (num % 2 != 0)\\n                continue;\\n\\n            String numStr = String.valueOf(num);\\n            int first = Character.getNumericValue(numStr.charAt(0));\\n            int second = Character.getNumericValue(numStr.charAt(1));\\n            int third = Character.getNumericValue(numStr.charAt(2));\\n\\n            Map<Integer, Integer> counterTwo = new HashMap<>();\\n            updateMap(counterTwo, first);\\n            updateMap(counterTwo, second);\\n            updateMap(counterTwo, third);\\n            boolean flag = true;\\n\\n            for (int key: counterTwo.keySet()) {\\n                if (!counter.containsKey(key) ||\\n                counter.get(key) < counterTwo.get(key))\\n                    flag = false;\\n            }\\n\\n            if (flag)\\n                ans.add(num);\\n        }\\n\\n        return ans\\n            .stream()\\n            .mapToInt(x -> x)\\n            .toArray();\\n    }\\n\\n    private Map<Integer, Integer> getCount(int[] digits) {\\n        Map<Integer, Integer> counter = new HashMap<>();\\n\\n        for (int digit: digits)\\n            updateMap(counter, digit);\\n        \\n        return counter;\\n    }\\n\\n    private void updateMap(Map<Integer, Integer> map, int key) {\\n        map.put(key, map.getOrDefault(key, 0) + 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3261421,
                "title": "3-digit-even-numbers-javascript-check-all-numbers-100-999",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar findEvenNumbers = function(digits) {\\n    arr = []\\n\\n    for (let i = 100; i <= 999; i++)       \\n        if (check_digits(i)) arr.push(i)    \\n\\n    return arr\\n\\n    function check_digits(n) {\\n        if (n % 2 != 0) return false\\n\\n        n = n.toString()\\n\\n        temp = digits.slice()\\n\\n        if (temp.indexOf(parseInt(n[0])) == -1) return false\\n        else temp.splice(temp.indexOf(parseInt(n[0])), 1)\\n        if (temp.indexOf(parseInt(n[1])) == -1) return false\\n        else temp.splice(temp.indexOf(parseInt(n[1])), 1)\\n        if (temp.indexOf(parseInt(n[2])) == -1) return false\\n        else temp.splice(temp.indexOf(parseInt(n[2])), 1)\\n        \\n        return true\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar findEvenNumbers = function(digits) {\\n    arr = []\\n\\n    for (let i = 100; i <= 999; i++)       \\n        if (check_digits(i)) arr.push(i)    \\n\\n    return arr\\n\\n    function check_digits(n) {\\n        if (n % 2 != 0) return false\\n\\n        n = n.toString()\\n\\n        temp = digits.slice()\\n\\n        if (temp.indexOf(parseInt(n[0])) == -1) return false\\n        else temp.splice(temp.indexOf(parseInt(n[0])), 1)\\n        if (temp.indexOf(parseInt(n[1])) == -1) return false\\n        else temp.splice(temp.indexOf(parseInt(n[1])), 1)\\n        if (temp.indexOf(parseInt(n[2])) == -1) return false\\n        else temp.splice(temp.indexOf(parseInt(n[2])), 1)\\n        \\n        return true\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3242877,
                "title": "pythonic-way",
                "content": "# Code\\n```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        digits = Counter(digits)\\n        result = []\\n        for d1 in range(1, 10):\\n            for d2 in range(10):              \\n                for d3 in range(0, 10, 2):               \\n                    if not Counter([d1, d2, d3]) - digits:\\n                        result.append(100 * d1 + 10 * d2 + d3)\\n                    \\n        return result\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        digits = Counter(digits)\\n        result = []\\n        for d1 in range(1, 10):\\n            for d2 in range(10):              \\n                for d3 in range(0, 10, 2):               \\n                    if not Counter([d1, d2, d3]) - digits:\\n                        result.append(100 * d1 + 10 * d2 + d3)\\n                    \\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3228442,
                "title": "java-solution-using-collection-arraylist-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n        for(int i=0;i<digits.length;i++)   \\n        {\\n            if(digits[i]==0)\\n                continue;\\n            for(int j=0;j<digits.length;j++)\\n            {   \\n                if(i==j)\\n                    continue;\\n                for(int k=0;k<digits.length;k++)\\n                {                        \\n                    if(k==i || k==j)\\n                        continue;\\n                    int x=((digits[i]*10)+digits[j])*10+digits[k];\\n                    if(x%2==0)\\n                        list.add(x);\\n                }\\n            }\\n        }\\n        Collections.sort(list);\\n        LinkedHashSet<Integer> set=new LinkedHashSet<>(list);\\n        int arr[]=new int[set.size()];\\n        int i=0;\\n        for(int j:set)\\n        {\\n            arr[i++]=j;\\n        }\\n        return arr;\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n        for(int i=0;i<digits.length;i++)   \\n        {\\n            if(digits[i]==0)\\n                continue;\\n            for(int j=0;j<digits.length;j++)\\n            {   \\n                if(i==j)\\n                    continue;\\n                for(int k=0;k<digits.length;k++)\\n                {                        \\n                    if(k==i || k==j)\\n                        continue;\\n                    int x=((digits[i]*10)+digits[j])*10+digits[k];\\n                    if(x%2==0)\\n                        list.add(x);\\n                }\\n            }\\n        }\\n        Collections.sort(list);\\n        LinkedHashSet<Integer> set=new LinkedHashSet<>(list);\\n        int arr[]=new int[set.size()];\\n        int i=0;\\n        for(int j:set)\\n        {\\n            arr[i++]=j;\\n        }\\n        return arr;\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3223543,
                "title": "python3-good-enough",
                "content": "``` Python3 []\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        final = set()\\n        for i in range(len(digits)):\\n            for j in range(len(digits)):\\n                if j != i:\\n                    for k in range(len(digits)):\\n                        if k != j and k != i:\\n                            temp = digits[i]*100 + digits[j]*10 + digits[k]\\n                            if temp >= 100 and not temp % 2:\\n                                final.add(temp)\\n        \\n        return sorted(list(final))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "``` Python3 []\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        final = set()\\n        for i in range(len(digits)):\\n            for j in range(len(digits)):\\n                if j != i:\\n                    for k in range(len(digits)):\\n                        if k != j and k != i:\\n                            temp = digits[i]*100 + digits[j]*10 + digits[k]\\n                            if temp >= 100 and not temp % 2:\\n                                final.add(temp)\\n        \\n        return sorted(list(final))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3207725,
                "title": "java-javascript-solution-jw",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\nJava:\\n```\\npublic int[] findEvenNumbers(int[] digits) {\\n    int [] map = new int[10];\\n    \\n    for (int i = 0;i < digits.length;i++) {\\n        map[digits[i]]++;\\n    }\\n    \\n    List<Integer> arr = new ArrayList<>();\\n    \\n    for (int i = 100;i <= 999;i = i + 2) {\\n        int num = i;\\n        int [] freq = new int[10];\\n        while (num > 0) {\\n            int rem = num % 10;\\n            freq[rem]++;\\n            num = num / 10;\\n        }\\n        boolean res = findans(freq, map);\\n        if (res) {\\n            arr.add(i);\\n        }\\n    }\\n    \\n    int [] ans = new int[arr.size()];\\n    for (int i = 0;i < arr.size();i++) {\\n        ans[i] = arr.get(i);\\n    }\\n    \\n    return ans;\\n}\\n\\nprivate boolean findans(int [] currentNum,int [] database){\\n    for (int i = 0;i < 10;i++) {\\n        if (currentNum[i] > database[i]) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n```\\nJavascript:\\n```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar findEvenNumbers = function(digits) {\\n    let map = new Array(10).fill(0);\\n    \\n    for (let i = 0;i < digits.length;i++) {\\n        map[digits[i]]++;\\n    }\\n    \\n    let arr = [];\\n    \\n    for (let i = 100;i <= 999;i = i + 2) {\\n        let num = i;\\n        let freq = new Array(10).fill(0);\\n        while (num > 0) {\\n            let rem = num % 10;\\n            freq[rem]++;\\n            num = Math.floor(num / 10);\\n        }\\n        let res = findans(freq, map);\\n        if (res) {\\n            arr.push(i);\\n        }\\n    }\\n    \\n    let ans = new Array(arr.length).fill(0);\\n    for (let i = 0;i < arr.length;i++) {\\n        ans[i] = arr[i];\\n    }\\n    \\n    return ans; \\n};\\n\\nfunction findans(currentNum, database) {\\n    for (let i = 0;i < 10;i++) {\\n        if (currentNum[i] > database[i]) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "JavaScript"
                ],
                "code": "```\\npublic int[] findEvenNumbers(int[] digits) {\\n    int [] map = new int[10];\\n    \\n    for (int i = 0;i < digits.length;i++) {\\n        map[digits[i]]++;\\n    }\\n    \\n    List<Integer> arr = new ArrayList<>();\\n    \\n    for (int i = 100;i <= 999;i = i + 2) {\\n        int num = i;\\n        int [] freq = new int[10];\\n        while (num > 0) {\\n            int rem = num % 10;\\n            freq[rem]++;\\n            num = num / 10;\\n        }\\n        boolean res = findans(freq, map);\\n        if (res) {\\n            arr.add(i);\\n        }\\n    }\\n    \\n    int [] ans = new int[arr.size()];\\n    for (int i = 0;i < arr.size();i++) {\\n        ans[i] = arr.get(i);\\n    }\\n    \\n    return ans;\\n}\\n\\nprivate boolean findans(int [] currentNum,int [] database){\\n    for (int i = 0;i < 10;i++) {\\n        if (currentNum[i] > database[i]) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n```\n```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar findEvenNumbers = function(digits) {\\n    let map = new Array(10).fill(0);\\n    \\n    for (let i = 0;i < digits.length;i++) {\\n        map[digits[i]]++;\\n    }\\n    \\n    let arr = [];\\n    \\n    for (let i = 100;i <= 999;i = i + 2) {\\n        let num = i;\\n        let freq = new Array(10).fill(0);\\n        while (num > 0) {\\n            let rem = num % 10;\\n            freq[rem]++;\\n            num = Math.floor(num / 10);\\n        }\\n        let res = findans(freq, map);\\n        if (res) {\\n            arr.push(i);\\n        }\\n    }\\n    \\n    let ans = new Array(arr.length).fill(0);\\n    for (let i = 0;i < arr.length;i++) {\\n        ans[i] = arr[i];\\n    }\\n    \\n    return ans; \\n};\\n\\nfunction findans(currentNum, database) {\\n    for (let i = 0;i < 10;i++) {\\n        if (currentNum[i] > database[i]) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3179916,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& v) {\\n      vector<int> cnt(10,0), ans;\\n\\tfor (int d: v) cnt[d]++;  \\n\\n\\tfor (int i=1; i<10; i++) {\\n\\t\\tif (cnt[i]==0) continue;\\n\\t\\tcnt[i]--;\\n\\t\\tfor (int j=0; j<10; j++) {\\n\\t\\t\\tif (cnt[j]==0) continue;\\n\\t\\t\\tcnt[j]--;\\n\\t\\t\\tfor (int k=0; k<10; k+=2) {\\n\\t\\t\\t\\tif (cnt[k]==0) continue;\\n\\t\\t\\t\\tans.push_back(100*i+10*j+k);\\n\\t\\t\\t}\\n\\t\\t\\tcnt[j]++; // backtrack\\n\\t\\t}\\n\\t\\tcnt[i]++;     // backtrack\\n\\t}\\n\\treturn ans;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& v) {\\n      vector<int> cnt(10,0), ans;\\n\\tfor (int d: v) cnt[d]++;  \\n\\n\\tfor (int i=1; i<10; i++) {\\n\\t\\tif (cnt[i]==0) continue;\\n\\t\\tcnt[i]--;\\n\\t\\tfor (int j=0; j<10; j++) {\\n\\t\\t\\tif (cnt[j]==0) continue;\\n\\t\\t\\tcnt[j]--;\\n\\t\\t\\tfor (int k=0; k<10; k+=2) {\\n\\t\\t\\t\\tif (cnt[k]==0) continue;\\n\\t\\t\\t\\tans.push_back(100*i+10*j+k);\\n\\t\\t\\t}\\n\\t\\t\\tcnt[j]++; // backtrack\\n\\t\\t}\\n\\t\\tcnt[i]++;     // backtrack\\n\\t}\\n\\treturn ans;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3140687,
                "title": "simplest-solution-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar findEvenNumbers = function(arr) {\\n         arr.sort((a, b) => a - b);\\n  let map = new Map();\\n  for (let i = 0; i < arr.length; i++) {\\n    for (let j = 0; j < arr.length; j++) {\\n      for (let k = 0; k < arr.length; k++) {\\n        if (i !== j && j !== k && i !== k) {\\n          if (arr[i] !== 0) {\\n            let current = [arr[i], arr[j], arr[k]];\\n            current = +current.join(\"\");\\n            if (current % 2 == 0) {\\n              !map.has(current) && map.set(current);\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n  return [...map.keys()] || [];\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar findEvenNumbers = function(arr) {\\n         arr.sort((a, b) => a - b);\\n  let map = new Map();\\n  for (let i = 0; i < arr.length; i++) {\\n    for (let j = 0; j < arr.length; j++) {\\n      for (let k = 0; k < arr.length; k++) {\\n        if (i !== j && j !== k && i !== k) {\\n          if (arr[i] !== 0) {\\n            let current = [arr[i], arr[j], arr[k]];\\n            current = +current.join(\"\");\\n            if (current % 2 == 0) {\\n              !map.has(current) && map.set(current);\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n  return [...map.keys()] || [];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3137038,
                "title": "python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n    \\n\\n        from itertools import permutations\\n        \\n        \\n        c1 = permutations(digits,3)\\n        \\n        lst1 = []\\n        \\n        for x,y,z in c1:\\n            if x != 0  and z % 2 == 0:\\n                a = int(str(x)+str(y)+str(z))\\n                lst1.append(a)\\n        \\n        \\n        s1 = set(lst1)\\n        lst1 = list(s1)\\n        lst1.sort()\\n        return(lst1)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n    \\n\\n        from itertools import permutations\\n        \\n        \\n        c1 = permutations(digits,3)\\n        \\n        lst1 = []\\n        \\n        for x,y,z in c1:\\n            if x != 0  and z % 2 == 0:\\n                a = int(str(x)+str(y)+str(z))\\n                lst1.append(a)\\n        \\n        \\n        s1 = set(lst1)\\n        lst1 = list(s1)\\n        lst1.sort()\\n        return(lst1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3122266,
                "title": "java-c-o-n-time-complexity-hashmap-easy-to-understand",
                "content": "# Java\\n---\\n```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        List<Integer> list=new ArrayList<>();\\n        int[] arr=new int[10];\\n        for(int digit:digits){\\n            arr[digit]++;\\n        }\\n        for(int i=100;i<999;i+=2){\\n            int num=i;\\n            int[] freq=new int[10];\\n            while(num>0){\\n                freq[num%10]++;\\n                num/=10;\\n            }\\n            if(canAdd(freq,arr)){\\n                list.add(i);\\n            }\\n        }\\n        int[] res=new int[list.size()];\\n        for(int i=0;i<list.size();i++){\\n            res[i]=list.get(i);\\n        }\\n        return res;\\n    }\\n\\n\\n    public boolean canAdd(int[] freq, int[] arr){\\n        for(int i=0;i<10;i++){\\n            if(freq[i]>arr[i]) return false;\\n        }\\n        return true;\\n    }\\n}\\n```\\n# C++\\n---\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> res;\\n        unordered_map<int,int> m;\\n        for(auto &digit: digits){\\n            m[digit]++;\\n        }\\n        for(int i=100;i<=998;i+=2){\\n            int num=i;\\n            unordered_map<int,int> freq;\\n            while(num>0){\\n                freq[num%10]++;\\n                num/=10;\\n            }\\n            if(canAdd(freq,m)){\\n                res.push_back(i);\\n            }\\n        }\\n        return res;\\n    }\\n\\n    bool canAdd(unordered_map<int,int> freq, unordered_map<int,int> m){\\n        for(auto p:freq){\\n            if(m.count(p.first)==0 || p.second>m[p.first]) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        List<Integer> list=new ArrayList<>();\\n        int[] arr=new int[10];\\n        for(int digit:digits){\\n            arr[digit]++;\\n        }\\n        for(int i=100;i<999;i+=2){\\n            int num=i;\\n            int[] freq=new int[10];\\n            while(num>0){\\n                freq[num%10]++;\\n                num/=10;\\n            }\\n            if(canAdd(freq,arr)){\\n                list.add(i);\\n            }\\n        }\\n        int[] res=new int[list.size()];\\n        for(int i=0;i<list.size();i++){\\n            res[i]=list.get(i);\\n        }\\n        return res;\\n    }\\n\\n\\n    public boolean canAdd(int[] freq, int[] arr){\\n        for(int i=0;i<10;i++){\\n            if(freq[i]>arr[i]) return false;\\n        }\\n        return true;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> res;\\n        unordered_map<int,int> m;\\n        for(auto &digit: digits){\\n            m[digit]++;\\n        }\\n        for(int i=100;i<=998;i+=2){\\n            int num=i;\\n            unordered_map<int,int> freq;\\n            while(num>0){\\n                freq[num%10]++;\\n                num/=10;\\n            }\\n            if(canAdd(freq,m)){\\n                res.push_back(i);\\n            }\\n        }\\n        return res;\\n    }\\n\\n    bool canAdd(unordered_map<int,int> freq, unordered_map<int,int> m){\\n        for(auto p:freq){\\n            if(m.count(p.first)==0 || p.second>m[p.first]) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3104402,
                "title": "js-backtracking-approach",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar findEvenNumbers = function(digits) {\\n    var map = Array.apply(null, { length: 10 }).fill(0);\\n\\n    for(var i = 0; i < digits.length; i++) {\\n        map[digits[i]]++;\\n    }\\n\\n    var result = [];\\n\\n    function traverse(n, num, start) {\\n        if (n === 3) {\\n            if (num % 2 === 0) {\\n                result.push(num);\\n            }\\n        } else {\\n            for(var i = start; i < map.length; i++) {\\n                if (map[i] !== 0) {\\n                    map[i]--;\\n                    traverse(n + 1, num * 10 + i, 0);\\n                    map[i]++;\\n                }\\n            }\\n        }\\n    }\\n\\n    traverse(0, 0, 1);\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar findEvenNumbers = function(digits) {\\n    var map = Array.apply(null, { length: 10 }).fill(0);\\n\\n    for(var i = 0; i < digits.length; i++) {\\n        map[digits[i]]++;\\n    }\\n\\n    var result = [];\\n\\n    function traverse(n, num, start) {\\n        if (n === 3) {\\n            if (num % 2 === 0) {\\n                result.push(num);\\n            }\\n        } else {\\n            for(var i = start; i < map.length; i++) {\\n                if (map[i] !== 0) {\\n                    map[i]--;\\n                    traverse(n + 1, num * 10 + i, 0);\\n                    map[i]++;\\n                }\\n            }\\n        }\\n    }\\n\\n    traverse(0, 0, 1);\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3093775,
                "title": "wrote-a-recursive-solution-gives-tle-but-another-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        allEvenNumbers = []\\n\\n        self.findEven(digits, \"\", allEvenNumbers)\\n\\n        return sorted(allEvenNumbers)\\n    \\n    def findEven(self, digits, currString, allEvenNumbers):\\n        if len(currString) == 3:\\n            number = int(currString)\\n\\n            if number % 2 == 0 and number > 99 and number not in allEvenNumbers:\\n                allEvenNumbers.append(number)\\n            \\n            return\\n        \\n        for i in range(len(digits)):\\n            \\n            newArray = digits[:i] + digits[i+1:]\\n            newString = currString + str(digits[i])\\n            self.findEven(newArray, newString, allEvenNumbers)\\n        \\n        return\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\\n        allEvenNumbers = []\\n\\n        self.findEven(digits, \"\", allEvenNumbers)\\n\\n        return sorted(allEvenNumbers)\\n    \\n    def findEven(self, digits, currString, allEvenNumbers):\\n        if len(currString) == 3:\\n            number = int(currString)\\n\\n            if number % 2 == 0 and number > 99 and number not in allEvenNumbers:\\n                allEvenNumbers.append(number)\\n            \\n            return\\n        \\n        for i in range(len(digits)):\\n            \\n            newArray = digits[:i] + digits[i+1:]\\n            newString = currString + str(digits[i])\\n            self.findEven(newArray, newString, allEvenNumbers)\\n        \\n        return\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3077183,
                "title": "simple-kotlin-solution-for-beginners",
                "content": "```\\nclass Solution {\\n    fun findEvenNumbers(digits: IntArray): IntArray {\\n        val count = IntArray(10)\\n        for (d in digits) { count[d]++ }\\n\\n        val arr = ArrayList<Int>()\\n        loop@ for (num in 100..999 step 2) {\\n            var d = num\\n            val dd = count.clone()\\n            while (d != 0) {\\n                if (--dd[d%10] < 0) continue@loop\\n                d /= 10\\n            }\\n            arr.add(num)\\n        }\\n\\n        return arr.toIntArray()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun findEvenNumbers(digits: IntArray): IntArray {\\n        val count = IntArray(10)\\n        for (d in digits) { count[d]++ }\\n\\n        val arr = ArrayList<Int>()\\n        loop@ for (num in 100..999 step 2) {\\n            var d = num\\n            val dd = count.clone()\\n            while (d != 0) {\\n                if (--dd[d%10] < 0) continue@loop\\n                d /= 10\\n            }\\n            arr.add(num)\\n        }\\n\\n        return arr.toIntArray()\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3072982,
                "title": "c-solution-easy-and-very-fast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> v1;\\n        int arr[10]={0};\\n        for(auto &it: digits)\\n        arr[it]++;\\n\\n        for(int i=100; i<999; i+=2)\\n        {\\n            int a1=i/100,a2=i/10%10,a3=i%10;\\n            if(--arr[a1]>=0 & --arr[a2]>=0 & --arr[a3]>=0)\\n            v1.push_back(i);\\n            arr[a1]++,arr[a2]++,arr[a3]++;\\n        }\\n\\n        return v1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> v1;\\n        int arr[10]={0};\\n        for(auto &it: digits)\\n        arr[it]++;\\n\\n        for(int i=100; i<999; i+=2)\\n        {\\n            int a1=i/100,a2=i/10%10,a3=i%10;\\n            if(--arr[a1]>=0 & --arr[a2]>=0 & --arr[a3]>=0)\\n            v1.push_back(i);\\n            arr[a1]++,arr[a2]++,arr[a3]++;\\n        }\\n\\n        return v1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1936714,
                "content": [
                    {
                        "username": "_jaguar",
                        "content": "We can easily solve question with bruteforce with three loops easily. Easyily solved by bruteforce."
                    },
                    {
                        "username": "Abhishekprasadsingh",
                        "content": "yes."
                    },
                    {
                        "username": "YusenPeng",
                        "content": "\"Pure\" brute force is NOT accepted though. lol "
                    },
                    {
                        "username": "ovidiu_mura",
                        "content": "[@suren_yeager](/suren_yeager)  I got \"Time Limit Exceeded\" on my Brute Force solution, :(\n\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\n        p = []\n        r = []\n        self.permute(digits, 0, 3, p)\n        for i in p:\n            if i[0] != 0 and (i[2] % 2) == 0:\n                r.append(i)\n        t = set()\n        for n in r:\n            tt = 0\n            for nn in n:\n                tt += nn\n                tt *= 10\n            tt //= 10\n            t.add(tt)\n        st = list(t)\n        self.insertion_sorting(st)\n        return st\n\n    def permute(self, nums: List[int], i, k, permutations):\n        if i == k:\n            c = nums.copy()\n            permutations.append(c[:k])\n        for j in range(i, len(nums)):\n            nums[i], nums[j] = nums[j], nums[i]\n            self.permute(nums, i+1, k, permutations)\n            nums[i], nums[j] = nums[j], nums[i]\n\n    def insertion_sorting(self, a):\n        for i in range(1, len(a)):\n            x = a[i]\n            j = i - 1\n            while a[j] > x and j >= 0:\n                a[j+1] = a[j]\n                j = j - 1\n            j = j + 1\n            a[j] = x"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "it was accepted for me !!\\n\\n        map<int,int>mp;\\n        int n=digits.size();\\n        for(int i=0;i<n;i++){\\n            if(digits[i]==0) continue;\\n            int one=digits[i];\\n            for(int j=0;j<n;j++){\\n                if(j==i) continue;\\n                int two=digits[j];\\n                for(int k=0;k<n;k++){\\n                    if(k==i || k==j) continue;\\n                    int three=digits[k];\\n                    int res=one*100+two*10+three;\\n                    if(res%2==0) mp[res]=1;\\n                }\\n            }\\n        }\\n\\n        vector<int>res;\\n        for(auto [k,v]:mp) res.push_back(k);\\n        return res;"
                    }
                ]
            },
            {
                "id": 1722824,
                "content": [
                    {
                        "username": "_jaguar",
                        "content": "We can easily solve question with bruteforce with three loops easily. Easyily solved by bruteforce."
                    },
                    {
                        "username": "Abhishekprasadsingh",
                        "content": "yes."
                    },
                    {
                        "username": "YusenPeng",
                        "content": "\"Pure\" brute force is NOT accepted though. lol "
                    },
                    {
                        "username": "ovidiu_mura",
                        "content": "[@suren_yeager](/suren_yeager)  I got \"Time Limit Exceeded\" on my Brute Force solution, :(\n\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\n        p = []\n        r = []\n        self.permute(digits, 0, 3, p)\n        for i in p:\n            if i[0] != 0 and (i[2] % 2) == 0:\n                r.append(i)\n        t = set()\n        for n in r:\n            tt = 0\n            for nn in n:\n                tt += nn\n                tt *= 10\n            tt //= 10\n            t.add(tt)\n        st = list(t)\n        self.insertion_sorting(st)\n        return st\n\n    def permute(self, nums: List[int], i, k, permutations):\n        if i == k:\n            c = nums.copy()\n            permutations.append(c[:k])\n        for j in range(i, len(nums)):\n            nums[i], nums[j] = nums[j], nums[i]\n            self.permute(nums, i+1, k, permutations)\n            nums[i], nums[j] = nums[j], nums[i]\n\n    def insertion_sorting(self, a):\n        for i in range(1, len(a)):\n            x = a[i]\n            j = i - 1\n            while a[j] > x and j >= 0:\n                a[j+1] = a[j]\n                j = j - 1\n            j = j + 1\n            a[j] = x"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "it was accepted for me !!\\n\\n        map<int,int>mp;\\n        int n=digits.size();\\n        for(int i=0;i<n;i++){\\n            if(digits[i]==0) continue;\\n            int one=digits[i];\\n            for(int j=0;j<n;j++){\\n                if(j==i) continue;\\n                int two=digits[j];\\n                for(int k=0;k<n;k++){\\n                    if(k==i || k==j) continue;\\n                    int three=digits[k];\\n                    int res=one*100+two*10+three;\\n                    if(res%2==0) mp[res]=1;\\n                }\\n            }\\n        }\\n\\n        vector<int>res;\\n        for(auto [k,v]:mp) res.push_back(k);\\n        return res;"
                    }
                ]
            }
        ]
    }
]