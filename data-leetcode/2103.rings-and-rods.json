[
    {
        "title": "Rings and Rods",
        "question_content": "There are n rings and each ring is either red, green, or blue. The rings are distributed across ten rods labeled from 0 to 9.\nYou are given a string rings of length 2n that describes the n rings that are placed onto the rods. Every two characters in rings forms a color-position pair that is used to describe each ring where:\n\n\tThe first character of the ith pair denotes the ith ring's color ('R', 'G', 'B').\n\tThe second character of the ith pair denotes the rod that the ith ring is placed on ('0' to '9').\n\nFor example, \"R3G2B1\" describes n == 3 rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.\nReturn the number of rods that have all three colors of rings on them.\n&nbsp;\nExample 1:\n\nInput: rings = \"B0B6G0R6R0R6G9\"\nOutput: 1\nExplanation: \n- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.\n- The rod labeled 6 holds 3 rings, but it only has red and blue.\n- The rod labeled 9 holds only a green ring.\nThus, the number of rods with all three colors is 1.\n\nExample 2:\n\nInput: rings = \"B0R0G0R9R0B0G0\"\nOutput: 1\nExplanation: \n- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.\n- The rod labeled 9 holds only a red ring.\nThus, the number of rods with all three colors is 1.\n\nExample 3:\n\nInput: rings = \"G4\"\nOutput: 0\nExplanation: \nOnly one ring is given. Thus, no rods have all three colors.\n\n&nbsp;\nConstraints:\n\n\trings.length == 2 * n\n\t1 <= n <= 100\n\trings[i] where i is even is either 'R', 'G', or 'B' (0-indexed).\n\trings[i] where i is odd is a digit from '0' to '9' (0-indexed).",
        "solutions": [
            {
                "id": 1624277,
                "title": "bitmask-counter",
                "content": "Code colors with bits (1, 2 and 4), and use the OR operation for each rod.\\n\\nReturn number of rods that have all 3 bits (colors) set - which value of `7`.\\n\\n**C++**\\n```cpp\\nint countPoints(string rings) {\\n    int rods[10] = {};\\n    for (int i = 0; i < rings.size(); i += 2) {\\n        int color = rings[i] == \\'R\\' ? 1 : rings[i] == \\'G\\' ? 2 : 4;\\n        rods[rings[i + 1] - \\'0\\'] |= color;\\n    }\\n    return count(begin(rods), end(rods), 7);\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nint countPoints(string rings) {\\n    int rods[10] = {};\\n    for (int i = 0; i < rings.size(); i += 2) {\\n        int color = rings[i] == \\'R\\' ? 1 : rings[i] == \\'G\\' ? 2 : 4;\\n        rods[rings[i + 1] - \\'0\\'] |= color;\\n    }\\n    return count(begin(rods), end(rods), 7);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1624275,
                "title": "java-c-easy-solution-explained-with-comments",
                "content": "We make 3 arrays for every colour rod and store the position of rings according to index there. If a position has one or more than one ring for each colour we count it.\\n\\n **JAVA:**\\n \\n\\'\\'\\'class Solution {\\n\\n    public int countPoints(String rings) {\\n        int r[] = new int[10];\\n        int g[] = new int[10];\\n        int b[] = new int[10];\\n        \\n        int n = rings.length();\\n        \\n        for(int i=0; i<n; i+=2){\\n            \\n            //convert char to integer\\n            int a = rings.charAt(i+1)-\\'0\\';\\n            \\n            //System.out.println(rings.charAt(i) + \" \" + rings.charAt(i+1));\\n            \\n            //wherever rings are present add it in that colour array\\n            if(rings.charAt(i) == \\'R\\'){\\n                r[a]++;\\n            }\\n            else if(rings.charAt(i) == \\'G\\'){\\n                g[a]++;\\n            }\\n            else if(rings.charAt(i) == \\'B\\'){\\n                b[a]++;\\n            }\\n        }\\n        \\n        //if all three rings are present increase count\\n        int count=0;\\n        for(int j=0; j<10; j++){\\n            if(r[j] > 0 && g[j] > 0 && b[j] > 0)\\n                count++;\\n        }\\n        \\n        return count;\\n    }\\n}\\n\\n\\n**C++ :**\\n\\n\\'\\'\\'class Solution {\\npublic:\\n\\n    int countPoints(string rings) {\\n        int r[10] = {0};\\n        int g[10] = {0};\\n        int b[10] = {0};\\n        \\n        int rod;\\n        for(int i=0; i<rings.size(); i+=2){\\n            \\n            //convert char to integer\\n            rod = rings[i+1]-\\'0\\';\\n            \\n            //wherever rings are present add it in that colour array\\n            if(rings[i] == \\'R\\'){\\n                r[rod]++;\\n            }\\n            else if(rings[i] == \\'G\\'){\\n                g[rod]++;\\n            }\\n            else if(rings[i] == \\'B\\'){\\n                b[rod]++;\\n            }\\n        }\\n        \\n        //if all three rings are present increase count\\n        int count=0;\\n        for(int j=0; j<10; j++){\\n            if(r[j] > 0 && g[j] > 0 && b[j] > 0){\\n                count++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};",
                "solutionTags": [
                    "Java",
                    "C",
                    "Array"
                ],
                "code": "class Solution {\\n\\n    public int countPoints(String rings) {\\n        int r[] = new int[10];\\n        int g[] = new int[10];\\n        int b[] = new int[10];\\n        \\n        int n = rings.length();\\n        \\n        for(int i=0; i<n; i+=2){\\n            \\n            //convert char to integer\\n            int a = rings.charAt(i+1)-\\'0\\';\\n            \\n            //System.out.println(rings.charAt(i) + \" \" + rings.charAt(i+1));\\n            \\n            //wherever rings are present add it in that colour array\\n            if(rings.charAt(i) == \\'R\\'){\\n                r[a]++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1624331,
                "title": "python-4-liner-solution",
                "content": "```python\\nh = defaultdict(set)\\nfor i in range(0, len(rings) - 1, 2):\\n\\th[rings[i + 1]].add(rings[i])\\nreturn sum(len(v) == 3 for v in h.values())\\n```",
                "solutionTags": [],
                "code": "```python\\nh = defaultdict(set)\\nfor i in range(0, len(rings) - 1, 2):\\n\\th[rings[i + 1]].add(rings[i])\\nreturn sum(len(v) == 3 for v in h.values())\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2044864,
                "title": "python-simple-solution",
                "content": "```\\nclass Solution:\\n    def countPoints(self, r: str) -> int:\\n        ans = 0\\n        for i in range(10):\\n            i = str(i)\\n            if \\'R\\'+i in r and \\'G\\'+i in r and \\'B\\'+i in r:\\n                ans += 1\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, r: str) -> int:\\n        ans = 0\\n        for i in range(10):\\n            i = str(i)\\n            if \\'R\\'+i in r and \\'G\\'+i in r and \\'B\\'+i in r:\\n                ans += 1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1777323,
                "title": "java-short-simple-and-concise-bit-manipulation-beats-100",
                "content": "Consider each rod to be an integer , we traverse the string and turn on the bit corresponding to the colour found in the respective rod integer, at the end we count how many rods have R , G and B turned on (which turns out to be 131138).\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int rods[] = new int[10];\\n        \\n        // Traverse and turn bit corresponding to the character found\\n        // in the respective ring\\n        for(int i = 0; i < rings.length(); i+=2) \\n            rods[rings.charAt(i+1) - \\'0\\'] |= (1<<(rings.charAt(i) - \\'A\\'));\\n        \\n        // Count rods with all 3 bits turned on\\n        int count = 0;\\n        for(int i : rods) if(i == 131138) count++;\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int rods[] = new int[10];\\n        \\n        // Traverse and turn bit corresponding to the character found\\n        // in the respective ring\\n        for(int i = 0; i < rings.length(); i+=2) \\n            rods[rings.charAt(i+1) - \\'0\\'] |= (1<<(rings.charAt(i) - \\'A\\'));\\n        \\n        // Count rods with all 3 bits turned on\\n        int count = 0;\\n        for(int i : rods) if(i == 131138) count++;\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2650818,
                "title": "java-easy-hashset-solution-1ms",
                "content": "# Please Upvote guys \\u2728\\u2728\\u2728\\n\\n```\\n\\t\\tSet<Integer> r = new HashSet<>(), g = new HashSet<>(), b = new HashSet<>();\\n        for(int i = 0; i < rings.length(); i += 2){\\n            if(rings.charAt(i) == \\'R\\')\\n                r.add(rings.charAt(i + 1) - \\'0\\');\\n            else if(rings.charAt(i) == \\'B\\')\\n                b.add(rings.charAt(i + 1) - \\'0\\');\\n            else\\n                g.add(rings.charAt(i + 1) - \\'0\\');\\n        }\\n        int ans = 0;\\n        for(int i = 0; i <= 9; i++){\\n            if(r.contains(i) && g.contains(i) && b.contains(i))\\n                ans++;\\n        }\\n        return ans;\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\t\\tSet<Integer> r = new HashSet<>(), g = new HashSet<>(), b = new HashSet<>();\\n        for(int i = 0; i < rings.length(); i += 2){\\n            if(rings.charAt(i) == \\'R\\')\\n                r.add(rings.charAt(i + 1) - \\'0\\');\\n            else if(rings.charAt(i) == \\'B\\')\\n                b.add(rings.charAt(i + 1) - \\'0\\');\\n            else\\n                g.add(rings.charAt(i + 1) - \\'0\\');\\n        }\\n        int ans = 0;\\n        for(int i = 0; i <= 9; i++){\\n            if(r.contains(i) && g.contains(i) && b.contains(i))\\n                ans++;\\n        }\\n        return ans;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1624296,
                "title": "simple-c-with-maps-and-sets",
                "content": "\\n```\\n\\n```class Solution {\\npublic:\\n    int countPoints(string rings) {\\n        unordered_map<int,set<char>>m;\\n        for(int i=0;i<rings.size();i+=2){\\n            m[rings[i+1]-\\'0\\'].insert(rings[i]);\\n        }\\n        int count=0;\\n        for(auto it:m){\\n            if(it.second.size()==3)count++;\\n        }\\n        return count;\\n    }\\n};",
                "solutionTags": [],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2184222,
                "title": "javascript-simple-understandable-explained",
                "content": "```\\nvar countPoints = function(rings) {\\n    let rods = \\'0123456789\\';\\n    let count = 0;\\n    for (let rod of rods) { // looping over the variable, rods\\n        if (rings.includes(`R${rod}`) && \\n          rings.includes(`G${rod}`) && \\n          rings.includes(`B${rod}`)) count++; // checking if rings includes\\n\\t\\t\\t// R, G, & B on that rod\\n\\t\\t\\t// if so, add to count\\n    } return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPoints = function(rings) {\\n    let rods = \\'0123456789\\';\\n    let count = 0;\\n    for (let rod of rods) { // looping over the variable, rods\\n        if (rings.includes(`R${rod}`) && \\n          rings.includes(`G${rod}`) && \\n          rings.includes(`B${rod}`)) count++; // checking if rings includes\\n\\t\\t\\t// R, G, & B on that rod\\n\\t\\t\\t// if so, add to count\\n    } return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1643445,
                "title": "java-c-explained-in-place-o-1-space-faster-than-100-simple",
                "content": "# **Please Upvote if you got any help from the provided solution!!!**\\n\\n<u><strong>Refer to the following github repsitory for more leetcode solutions<strong></u>\\nhttps://github.com/Akshaya-Amar/LeetCodeSolutions\\n\\n<u><strong>COMPLEXITY:</strong></u>\\n\\n* **Time: O(n)**, where **n** is the length of given string(rings)\\n* **Space: O(1)**, i.e. in-place because though we are using array of size 10, but still it will be same for all cases as the array size of 10 doesn\\'t depend on the input.\\n\\n<u><strong>ALGORITHM:</strong></u>\\n* Start iterating the given string(rings) and **choose even indexes so as to select the ring\\'s color(\\'R\\', \\'G, \\'B\\')**.\\n\\t* **Assign a color code to each color** i.e. **1 for \\'R\\'**, **2 for \\'G\\'** and **4 for \\'B\\'**.\\n\\t* **Add the color code at it\\'s appropriate rod**(0-9) **using OR(|) operator**.\\n\\n* Now, iterate over all the rods \\n\\t* **if any of the rod is having all the colors available**(i.e. **<u>sum of color codes</u> is 7**, which we previously got by addition of **<u>color code of each color</u>** (i.e. **1 for \\'R\\'**, **2 for \\'G\\'** and **4 for \\'B\\'**) using OR operator, **then increment the count**(of rods with all colors).\\n\\n<u>**JAVA CODE:**</u>\\n<img src = \"https://assets.leetcode.com/users/images/cd0c6924-240e-433f-b254-21223d633826_1641481306.4531176.png\" width = \"95%\">\\n**Do you want to copy and run the code?**\\n<a href = \"https://github.com/Akshaya-Amar/LeetCodeSolutions/blob/master/Java/RingsandRods.java\"><u>JAVA CODE</u></a> &#9756;\\n<br>\\n<u>**C++ CODE:**</u>\\n<img src = \"https://assets.leetcode.com/users/images/804bf313-45bf-45a8-b6e7-44a1cafce2ee_1641481351.3296652.png\" width = \"95%\">\\n\\n**Do you want to copy and run the code?**\\n<a href = \"https://github.com/Akshaya-Amar/LeetCodeSolutions/blob/master/C++/RingsandRods.cpp\"><u>C++ CODE</u></a> &#9756;\\n\\n**NOTE**: We can take any color code which is a **power of 2** i.e. 1, 2, 4, 8, 16, 32, 64............but, <u>**each color code**</u> **must have a unique value** and the <u>**sum of color codes**</u> **must be equal to the addition of all those color codes** so as **to increment the counter** of rods having all colors.\\n\\n**eg:**\\nIn our algorithm, we have taken color code as **1 for \\'R\\'**, **2 for \\'G\\'** and **4 for \\'B\\'**. Now, to satisfy the condition i.e.\\n```\\nif(colorCodesSum == 7) {\\n\\t++rodsWithAllColors;\\n}\\n```\\n\\n**if the addition(using bitwise OR(|)) of all color code(1 | 2 | 4) is equal to 7** , then it can be said that a **rod is having all the colors(\\'R\\', \\'G\\', \\'B\\')** and thus **increment the counter**.\\n\\nIf we take **color code** for\\n**\\'R\\' as 8, \\'G\\' as 16 and \\'B\\' as 32**, then **their sum(using bitwise OR(|)) must be equal to 56**(from (8 | 16 | 32)) so as to satisfy the condition for their sum in order to increment the counter.\\n\\n**1 more eg to getter better clarity**\\nIf color code for **\\'R\\' as 256, \\'G\\' as 64 and \\'B\\' as 512**, then **their sum must be equal to 832**\\n\\n<u><strong>Refer to the following github repsitory for more leetcode solutions<strong></u>\\nhttps://github.com/Akshaya-Amar/LeetCodeSolutions\\n\\n# **Please Upvote if you got any help from the provided solution!!!**",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nif(colorCodesSum == 7) {\\n\\t++rodsWithAllColors;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1684094,
                "title": "easy-python-solution-for-beginners",
                "content": "```\\ndef countPoints(self, rings: str) -> int:\\n        c=0\\n        l=[\"\"]*10\\n        for i in range(1,len(rings),+2):\\n            l[int(rings[i])]+=rings[i-1]\\n        for j in l:\\n            if \\'R\\' in j and \\'G\\' in j and \\'B\\' in j:\\n                c+=1\\n        return c\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef countPoints(self, rings: str) -> int:\\n        c=0\\n        l=[\"\"]*10\\n        for i in range(1,len(rings),+2):\\n            l[int(rings[i])]+=rings[i-1]\\n        for j in l:\\n            if \\'R\\' in j and \\'G\\' in j and \\'B\\' in j:\\n                c+=1\\n        return c\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1624823,
                "title": "java-using-hashmap",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        Map<Integer,Set<Character>> m=new HashMap<>();\\n        for(int i=0;i<rings.length();i=i+2){\\n            char c=rings.charAt(i);\\n            int index=(int)rings.charAt(i+1);\\n            if(m.containsKey(index)){\\n                Set<Character> x=m.get(index);\\n                x.add(c);\\n                m.put(index,x);\\n            }else{\\n                Set<Character> x=new HashSet<>();\\n                x.add(c);\\n                m.put(index,x);\\n            }\\n        }\\n        int count=0;\\n        for(Set<Character> k : m.values()){\\n            if(k.size()==3) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        Map<Integer,Set<Character>> m=new HashMap<>();\\n        for(int i=0;i<rings.length();i=i+2){\\n            char c=rings.charAt(i);\\n            int index=(int)rings.charAt(i+1);\\n            if(m.containsKey(index)){\\n                Set<Character> x=m.get(index);\\n                x.add(c);\\n                m.put(index,x);\\n            }else{\\n                Set<Character> x=new HashSet<>();\\n                x.add(c);\\n                m.put(index,x);\\n            }\\n        }\\n        int count=0;\\n        for(Set<Character> k : m.values()){\\n            if(k.size()==3) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2099643,
                "title": "5-line-python-solution-very-simple",
                "content": "```class Solution:\\n    def countPoints(self, rings: str) -> int:\\n        out =0\\n        for i in range(0,10):\\n            if rings.count(\\'R\\'+str(i)) and rings.count(\\'G\\'+str(i)) and rings.count(\\'B\\'+str(i)):\\n                out +=1\\n        return out\\n\\t\\t\\n\\t\\t",
                "solutionTags": [
                    "Python"
                ],
                "code": "```class Solution:\\n    def countPoints(self, rings: str) -> int:\\n        out =0\\n        for i in range(0,10):\\n            if rings.count(\\'R\\'+str(i)) and rings.count(\\'G\\'+str(i)) and rings.count(\\'B\\'+str(i)):\\n                out +=1\\n        return out\\n\\t\\t\\n\\t\\t",
                "codeTag": "Java"
            },
            {
                "id": 1684100,
                "title": "c-easy-bitwise",
                "content": "The whole idea is to assign \\'R\\'=1 and \\'G\\'=2 and \\'B\\'=4 and using bitwise OR to add them to get maximum value of 7\\n```\\nR=001\\nG=010\\nB=100\\n```\\nwhose sum up is `111=>7` and on using biwise or value `never exceed 7 so in last we check weather 7 present or not to count the value.`\\n\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        \\n        int n=rings.length();\\n\\t\\t//It is given that number of rod is 10 0 to 9 so we have to place ring any of these\\n        vector<int>vp(10,0);//store the no of rings\\n        for(int i=0;i<n;i+=2)\\n        {\\n            char col=rings[i];\\n            vp[rings[i+1]-\\'0\\']|=(col==\\'R\\'? 1: col ==\\'G\\' ? 2 : 4);//checking for rings\\n            \\n        }\\n        int count=0;\\n        for(int i=0;i<10;i++)\\n        {\\n            if(vp[i]==7)\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```\\nR=001\\nG=010\\nB=100\\n```\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        \\n        int n=rings.length();\\n\\t\\t//It is given that number of rod is 10 0 to 9 so we have to place ring any of these\\n        vector<int>vp(10,0);//store the no of rings\\n        for(int i=0;i<n;i+=2)\\n        {\\n            char col=rings[i];\\n            vp[rings[i+1]-\\'0\\']|=(col==\\'R\\'? 1: col ==\\'G\\' ? 2 : 4);//checking for rings\\n            \\n        }\\n        int count=0;\\n        for(int i=0;i<10;i++)\\n        {\\n            if(vp[i]==7)\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1632900,
                "title": "java-clean-1ms-array-of-rings",
                "content": "```\\nclass Solution {\\n    public class Ring {\\n        boolean hasRead;\\n        boolean hasGreen;\\n        boolean hasBlue;\\n    }\\n    public int countPoints(String rings) {\\n        // Initialize\\n        Ring[] arr = new Ring[10];\\n        for(int i = 0; i < 10; i++){\\n            arr[i] = new Ring();\\n        }\\n        \\n        // Check every pair of chars\\n        int index = 0;\\n        int size = rings.length();\\n        while (index < size){\\n            int target = Integer.parseInt(String.valueOf(rings.charAt(index + 1)));\\n            char color = rings.charAt(index);\\n            if(color == \\'R\\'){\\n                arr[target].hasRead = true;\\n            } else if (color == \\'G\\') {\\n                arr[target].hasGreen = true;\\n            } else {\\n                arr[target].hasBlue = true;\\n            }\\n            index = index + 2;\\n        }\\n        \\n        // Count them\\n        int count = 0;\\n        for(int i = 0; i < 10; i++){\\n            if(arr[i].hasRead  && arr[i].hasGreen  && arr[i].hasBlue){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public class Ring {\\n        boolean hasRead;\\n        boolean hasGreen;\\n        boolean hasBlue;\\n    }\\n    public int countPoints(String rings) {\\n        // Initialize\\n        Ring[] arr = new Ring[10];\\n        for(int i = 0; i < 10; i++){\\n            arr[i] = new Ring();\\n        }\\n        \\n        // Check every pair of chars\\n        int index = 0;\\n        int size = rings.length();\\n        while (index < size){\\n            int target = Integer.parseInt(String.valueOf(rings.charAt(index + 1)));\\n            char color = rings.charAt(index);\\n            if(color == \\'R\\'){\\n                arr[target].hasRead = true;\\n            } else if (color == \\'G\\') {\\n                arr[target].hasGreen = true;\\n            } else {\\n                arr[target].hasBlue = true;\\n            }\\n            index = index + 2;\\n        }\\n        \\n        // Count them\\n        int count = 0;\\n        for(int i = 0; i < 10; i++){\\n            if(arr[i].hasRead  && arr[i].hasGreen  && arr[i].hasBlue){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1624396,
                "title": "c-simple-brute-force-approach-tc-o-n",
                "content": "```\\nint countPoints(string rings) {\\n        int n=rings.size();\\n        \\n        int red[10]={0};\\n        int blue[10]={0};\\n        int green[10]={0};\\n        \\n        for(int i=0;i<n;i+=2){\\n            if(rings[i]==\\'R\\'){\\n                red[rings[i+1]-\\'0\\']=true;\\n            }\\n            else if(rings[i]==\\'B\\'){\\n                blue[rings[i+1]-\\'0\\']=true;\\n            }\\n            else if(rings[i]==\\'G\\'){\\n                green[rings[i+1]-\\'0\\']=true;\\n            }\\n        }\\n        int res=0;\\n        for(int i=0;i<10;i++){\\n            if(red[i]==1 and green[i]==1 and blue[i]==1){\\n                res++;\\n            }\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint countPoints(string rings) {\\n        int n=rings.size();\\n        \\n        int red[10]={0};\\n        int blue[10]={0};\\n        int green[10]={0};\\n        \\n        for(int i=0;i<n;i+=2){\\n            if(rings[i]==\\'R\\'){\\n                red[rings[i+1]-\\'0\\']=true;\\n            }\\n            else if(rings[i]==\\'B\\'){\\n                blue[rings[i+1]-\\'0\\']=true;\\n            }\\n            else if(rings[i]==\\'G\\'){\\n                green[rings[i+1]-\\'0\\']=true;\\n            }\\n        }\\n        int res=0;\\n        for(int i=0;i<10;i++){\\n            if(red[i]==1 and green[i]==1 and blue[i]==1){\\n                res++;\\n            }\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2939845,
                "title": "c-100-bitwise-or",
                "content": "R --> 1 --> 001\\nG --> 2 --> 010\\nB --> 4 --> 101\\n\\nR and G --> 1|2 --> 001|010 --> 011\\nR and B --> 1|4 --> 001|100 --> 101\\n\\nALL COLORS --> 1|2|4 --> 001|010|100 --> 111 (7)\\n\\n```C++\\n    int countPoints(string rings) {\\n        char rods[10];\\n        for(short i=0 ; i<rings.size()-1 ; i+=2){\\n            char clr = rings[i]==\\'R\\'?1:rings[i]==\\'G\\'?2:4;\\n            char rod = rings[i+1]-\\'0\\';\\n            rods[rod] = rods[rod] | clr;\\n        }\\n        char ans=0;\\n        for(char &rod : rods)\\n            ans += rod == 7;\\n        return ans;\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```C++\\n    int countPoints(string rings) {\\n        char rods[10];\\n        for(short i=0 ; i<rings.size()-1 ; i+=2){\\n            char clr = rings[i]==\\'R\\'?1:rings[i]==\\'G\\'?2:4;\\n            char rod = rings[i+1]-\\'0\\';\\n            rods[rod] = rods[rod] | clr;\\n        }\\n        char ans=0;\\n        for(char &rod : rods)\\n            ans += rod == 7;\\n        return ans;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1624322,
                "title": "python3-array-of-sets",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        rods=[set() for _ in range(10)]\\n        n=len(rings)\\n        for i in range(0,n,2):\\n            color=rings[i]\\n            rod=int(rings[i+1])\\n            rods[rod].add(color)\\n        return sum(len(s)==3 for s in rods)        \\n```\\nSame solution, less lines of code:\\n```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        rods=[set() for _ in range(10)]\\n        for i in range(0,len(rings),2):\\n            rods[int(rings[i+1])].add(rings[i])\\n        return sum(len(s)==3 for s in rods)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        rods=[set() for _ in range(10)]\\n        n=len(rings)\\n        for i in range(0,n,2):\\n            color=rings[i]\\n            rod=int(rings[i+1])\\n            rods[rod].add(color)\\n        return sum(len(s)==3 for s in rods)        \\n```\n```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        rods=[set() for _ in range(10)]\\n        for i in range(0,len(rings),2):\\n            rods[int(rings[i+1])].add(rings[i])\\n        return sum(len(s)==3 for s in rods)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1624218,
                "title": "c-counting",
                "content": "See my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n## Solution 1. Counting\\n\\n```cpp\\n// OJ: https://leetcode.com/problems/rings-and-rods/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int countPoints(string s) {\\n        bool cnt[10][3] = {};\\n        for (int i = 0; i < s.size(); i += 2) {\\n            int color = s[i] == \\'R\\' ? 0 : (s[i] == \\'G\\' ? 1 : 2), index = s[i + 1] - \\'0\\';\\n            cnt[index][color] = true;\\n        }\\n        int ans = 0;\\n        for (int i = 0; i < 10; ++i) {\\n            ans += cnt[i][0] && cnt[i][1] && cnt[i][2];\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n## Solution 2. Counting with Bitmask\\n\\n```cpp\\n// OJ: https://leetcode.com/problems/rings-and-rods/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int countPoints(string s) {\\n        char cnt[10] = {};\\n        for (int i = 0; i < s.size(); i += 2) {\\n            int color = s[i] == \\'R\\' ? 0 : (s[i] == \\'G\\' ? 1 : 2), index = s[i + 1] - \\'0\\';\\n            cnt[index] |= 1 << color;\\n        }\\n        int ans = 0;\\n        for (int i = 0; i < 10; ++i) ans += cnt[i] == 0b111;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/problems/rings-and-rods/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int countPoints(string s) {\\n        bool cnt[10][3] = {};\\n        for (int i = 0; i < s.size(); i += 2) {\\n            int color = s[i] == \\'R\\' ? 0 : (s[i] == \\'G\\' ? 1 : 2), index = s[i + 1] - \\'0\\';\\n            cnt[index][color] = true;\\n        }\\n        int ans = 0;\\n        for (int i = 0; i < 10; ++i) {\\n            ans += cnt[i][0] && cnt[i][1] && cnt[i][2];\\n        }\\n        return ans;\\n    }\\n};\\n```\n```cpp\\n// OJ: https://leetcode.com/problems/rings-and-rods/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int countPoints(string s) {\\n        char cnt[10] = {};\\n        for (int i = 0; i < s.size(); i += 2) {\\n            int color = s[i] == \\'R\\' ? 0 : (s[i] == \\'G\\' ? 1 : 2), index = s[i + 1] - \\'0\\';\\n            cnt[index] |= 1 << color;\\n        }\\n        int ans = 0;\\n        for (int i = 0; i < 10; ++i) ans += cnt[i] == 0b111;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2720810,
                "title": "c-three-approaches-map-counting-bitmask-easy-solution",
                "content": "**Approach 1: (Map and Set) \\u2705**\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n       unordered_map<int,set<char>>m;\\n        for(int i=0;i<rings.size();i+=2){\\n            m[rings[i+1]-\\'0\\'].insert(rings[i]);\\n        }\\n        int count=0;\\n        for(auto it:m){\\n            if(it.second.size()==3)count++;\\n        }\\n        return count;\\n    }\\n};\\n```\\n**Approach 2: (Counting Arrays ) \\u2705**\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int r[10] = {0};\\n        int g[10] = {0};\\n        int b[10] = {0};\\n        \\n        int rod  = 0;\\n        for(int i=0;i<rings.size();i+=2){\\n\\t\\t //convert char to integer\\n            rod = rings[i+1] - \\'0\\';\\n            \\n\\t\\t\\t//wherever rings are present add it in that colour array\\n            if(rings[i] == \\'R\\'){\\n                r[rod]++;\\n            }\\n            else if(rings[i] == \\'G\\'){\\n                g[rod]++;\\n            }\\n            else if(rings[i]== \\'B\\'){\\n                b[rod]++;\\n            }\\n        }\\n        \\n\\t\\t //if all three rings are present increase count\\n        int count = 0;\\n        \\n        for(int j=0;j<10;j++){\\n            if(r[j] > 0 && g[j] > 0 && b[j] > 0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```\\n**Approach 1: (Bits) \\u2705**\\nCode colors with bits (1, 2 and 4), and use the OR operation for each rod.\\n\\nReturn number of rods that have all 3 bits (colors) set - which value of 7.\\n```\\nint countPoints(string rings) {\\n    int rods[10] = {};\\n    for (int i = 0; i < rings.size(); i += 2) {\\n        int color = rings[i] == \\'R\\' ? 1 : rings[i] == \\'G\\' ? 2 : 4;\\n        rods[rings[i + 1] - \\'0\\'] |= color;\\n    }\\n    return count(begin(rods), end(rods), 7);\\n}\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n       unordered_map<int,set<char>>m;\\n        for(int i=0;i<rings.size();i+=2){\\n            m[rings[i+1]-\\'0\\'].insert(rings[i]);\\n        }\\n        int count=0;\\n        for(auto it:m){\\n            if(it.second.size()==3)count++;\\n        }\\n        return count;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int r[10] = {0};\\n        int g[10] = {0};\\n        int b[10] = {0};\\n        \\n        int rod  = 0;\\n        for(int i=0;i<rings.size();i+=2){\\n\\t\\t //convert char to integer\\n            rod = rings[i+1] - \\'0\\';\\n            \\n\\t\\t\\t//wherever rings are present add it in that colour array\\n            if(rings[i] == \\'R\\'){\\n                r[rod]++;\\n            }\\n            else if(rings[i] == \\'G\\'){\\n                g[rod]++;\\n            }\\n            else if(rings[i]== \\'B\\'){\\n                b[rod]++;\\n            }\\n        }\\n        \\n\\t\\t //if all three rings are present increase count\\n        int count = 0;\\n        \\n        for(int j=0;j<10;j++){\\n            if(r[j] > 0 && g[j] > 0 && b[j] > 0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```\n```\\nint countPoints(string rings) {\\n    int rods[10] = {};\\n    for (int i = 0; i < rings.size(); i += 2) {\\n        int color = rings[i] == \\'R\\' ? 1 : rings[i] == \\'G\\' ? 2 : 4;\\n        rods[rings[i + 1] - \\'0\\'] |= color;\\n    }\\n    return count(begin(rods), end(rods), 7);\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2612592,
                "title": "c-easy-solution",
                "content": "int countPoints(string rings) {\\n        \\n        int ans[10][3]={0};\\n        int res = 0 ;\\n        \\n        for(int i = 0 ; i < rings.size() ; i+=2)\\n        {\\n            if(rings[i]==\\'B\\')\\n                ans[(rings[i+1]) - \\'0\\'][0]=1;\\n            \\n            else if(rings[i]==\\'G\\')\\n                ans[rings[i+1]-\\'0\\'][1]=1;\\n            \\n            else \\n                ans[rings[i+1]-\\'0\\'][2]=1;\\n        }\\n        \\n        \\n        for(int i = 0 ; i < 10 ; i++)\\n        {\\n            if(ans[i][0]==1 && ans[i][1]==1 && ans[i][2]==1)\\n                res++;\\n        }\\n        \\n        return res;\\n    }",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "int countPoints(string rings) {\\n        \\n        int ans[10][3]={0};\\n        int res = 0 ;\\n        \\n        for(int i = 0 ; i < rings.size() ; i+=2)\\n        {\\n            if(rings[i]==\\'B\\')\\n                ans[(rings[i+1]) - \\'0\\'][0]=1;\\n            \\n            else if(rings[i]==\\'G\\')\\n                ans[rings[i+1]-\\'0\\'][1]=1;\\n            \\n            else \\n                ans[rings[i+1]-\\'0\\'][2]=1;\\n        }\\n        \\n        \\n        for(int i = 0 ; i < 10 ; i++)\\n        {\\n            if(ans[i][0]==1 && ans[i][1]==1 && ans[i][2]==1)\\n                res++;\\n        }\\n        \\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1804296,
                "title": "python-solution-using-dictionary-explained-95-faster-and-80-memory-efficient-than-others",
                "content": "Take an empty dictionary and keeping on adding color strings as we iterate over the string.\\nThen we check whether the values have all the colors \"RGB\" using set and increase the count accordingly.\\n\\n```\\ndef countPoints(self, rings: str) -> int:\\n        n = len(rings)\\n        mydict = {}\\n        for i in range(0,n,2):\\n            mydict[rings[i+1]] = mydict.get(rings[i+1], \\'\\') + rings[i]\\n        count = 0\\n        for value in mydict.values():\\n            if set(value) == {\\'R\\',\\'G\\',\\'B\\'}:\\n                count += 1\\n        return count\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef countPoints(self, rings: str) -> int:\\n        n = len(rings)\\n        mydict = {}\\n        for i in range(0,n,2):\\n            mydict[rings[i+1]] = mydict.get(rings[i+1], \\'\\') + rings[i]\\n        count = 0\\n        for value in mydict.values():\\n            if set(value) == {\\'R\\',\\'G\\',\\'B\\'}:\\n                count += 1\\n        return count\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1624271,
                "title": "javascript-2103-rings-and-rods",
                "content": "---\\n\\n- Weekly Contest 271 - https://leetcode.com/contest/weekly-contest-271/ranking/83/\\n  - Q1 answer\\n    - https://leetcode.com/problems/rings-and-rods/discuss/1624271/JavaScript-2103.-Rings-and-Rods\\n    - below\\n  - Q2 answer\\n    - https://leetcode.com/problems/sum-of-subarray-ranges/discuss/1624314/JavaScript-2104.-Sum-of-Subarray-Ranges\\n  - Q3 answer\\n    - https://leetcode.com/problems/watering-plants-ii/discuss/1624383/JavaScript-2105.-Watering-Plants-II\\n  - Q4 answer\\n    - https://leetcode.com/problems/maximum-fruits-harvested-after-at-most-k-steps/discuss/1626153/JavaScript-2106.-Maximum-Fruits-Harvested-After-at-Most-K-Steps\\n\\n---\\n\\n![image](https://assets.leetcode.com/users/images/bfacf9f0-2182-4996-a5b6-7282d4914dce_1639285517.5501564.png)\\n\\n---\\n\\nHope it is simple to understand.\\n\\n---\\n\\n```\\nvar countPoints = function (rings) {\\n    let n = rings.length;\\n\\n    let map = new Map(); // map of  rod nums  to their  set of colors\\n    for (let i = 0; i < n; i += 2) {\\n        let color = rings[i];\\n        let rod = +rings[i + 1];\\n\\n        if (!map.has(rod)) map.set(rod, new Set());\\n        map.get(rod).add(color);\\n    }\\n\\n    let count = 0;\\n    for (let [rod, setColors] of map) {\\n        if (setColors.size == 3) count++;\\n    }\\n    return count;\\n};\\n```\\n\\n---\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPoints = function (rings) {\\n    let n = rings.length;\\n\\n    let map = new Map(); // map of  rod nums  to their  set of colors\\n    for (let i = 0; i < n; i += 2) {\\n        let color = rings[i];\\n        let rod = +rings[i + 1];\\n\\n        if (!map.has(rod)) map.set(rod, new Set());\\n        map.get(rod).add(color);\\n    }\\n\\n    let count = 0;\\n    for (let [rod, setColors] of map) {\\n        if (setColors.size == 3) count++;\\n    }\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2549168,
                "title": "java-map-value-as-set",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        Map<Character, Set<Character>> map = new HashMap();\\n        for(int i = 0; i< rings.length(); i=i+2){\\n            char color = rings.charAt(i);\\n            char rod = rings.charAt(i+1);\\n            Set<Character> set=map.getOrDefault(rod, new HashSet<>());\\n            set.add(color);\\n            map.put(rod,set);\\n        }\\n        int result = 0;\\n        for(Set<Character> set: map.values())\\n            if (set.size()==3)\\n                result++;\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        Map<Character, Set<Character>> map = new HashMap();\\n        for(int i = 0; i< rings.length(); i=i+2){\\n            char color = rings.charAt(i);\\n            char rod = rings.charAt(i+1);\\n            Set<Character> set=map.getOrDefault(rod, new HashSet<>());\\n            set.add(color);\\n            map.put(rod,set);\\n        }\\n        int result = 0;\\n        for(Set<Character> set: map.values())\\n            if (set.size()==3)\\n                result++;\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1690894,
                "title": "java-solution-beginner-friendly",
                "content": "**Time Complexity : O(n)**\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int count = 0;\\n        int[] r = new int[10];\\n        int[] b = new int[10];\\n        int[] g = new int[10];\\n        for(int i=0; i<rings.length(); i+=2){\\n            int a = rings.charAt(i+1) - \\'0\\';\\n            if(rings.charAt(i) == \\'R\\'){\\n                r[a]++;\\n            }\\n            if(rings.charAt(i) == \\'G\\'){\\n                g[a]++;\\n            }\\n            if(rings.charAt(i) == \\'B\\'){\\n                b[a]++;\\n            }\\n        }\\n        for(int i=0; i<10; i++){\\n            if(r[i] != 0 && b[i] != 0 && g[i] != 0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int count = 0;\\n        int[] r = new int[10];\\n        int[] b = new int[10];\\n        int[] g = new int[10];\\n        for(int i=0; i<rings.length(); i+=2){\\n            int a = rings.charAt(i+1) - \\'0\\';\\n            if(rings.charAt(i) == \\'R\\'){\\n                r[a]++;\\n            }\\n            if(rings.charAt(i) == \\'G\\'){\\n                g[a]++;\\n            }\\n            if(rings.charAt(i) == \\'B\\'){\\n                b[a]++;\\n            }\\n        }\\n        for(int i=0; i<10; i++){\\n            if(r[i] != 0 && b[i] != 0 && g[i] != 0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1626214,
                "title": "c-full-explanation-with-comments-faster-than-100-o-n",
                "content": "Explanation -\\nFirst, we need to know what we have to return :-\\n**the number of rods that have all three colors of rings on them**\\nand also there is a statement to notice is that\\n **The rings are distributed across ten rods labeled from 0 to 9.**\\n so, we make a array name `store` which tells us that how many colors are their on every rod from 0 to 9.\\n \\n since, there is only three colors i.e `R,G,B` so we traverse loops three times and see for every rod whether this rod contains this particular colour or not. \\n If yes!!, then simply at that index we increase a value by 1;\\n \\n And, at last, we traverse from the whole `store array` and see for a particular index if there is a `value of 3 `is present or not, if yes then add it to our answer.\\n \\n For more clarification, see comments in code/\\n\\nEnough talking, time for code -\\n```\\n//Runtime: 0 ms, faster than 100.00% of C++ online submissions for Rings and Rods.\\n//Memory Usage: 6.3 MB, less than 42.86% of C++ online submissions for Rings and Rods.\\n\\nclass Solution {\\npublic:\\n    int countPoints(string arr) {\\n        int n = arr.length(); // take the size of the array\\n        if(n == 2) // if size is 2, then it is not possible, simply retun 0\\n        {\\n            return 0;\\n        }\\n        \\n        vector<int> store(10); // making store array\\n        \\n        // running loop for three times\\n        // one thing is here to notice that, colors are present on even index only and their corrsponding rod on odd index. so we run the loop a/c to that\\n\\t\\t\\n        for(int i = 0; i < n - 1; i = i + 2)\\n        {\\n            if(arr[i] == \\'B\\' &&  store[arr[i+1] - \\'0\\'] == 0) // condition\\n            {\\n                store[arr[i+1] - \\'0\\']++;\\n            }\\n        }\\n        \\n        for(int i = 0; i < n - 1; i = i + 2)\\n        {\\n            if(arr[i] == \\'G\\' && (store[arr[i+1] - \\'0\\'] == 1))\\n            {\\n                store[arr[i+1] - \\'0\\']++;\\n            }\\n        }\\n        \\n         for(int i = 0; i < n - 1; i = i + 2)\\n        {\\n            if(arr[i] == \\'R\\' && (store[arr[i+1] - \\'0\\'] == 2))\\n            {\\n                store[arr[i+1] - \\'0\\']++;\\n            }\\n        }\\n        \\n        int ans = 0; // intiliaze our answer as zero\\n        for(int i = 0; i < 10; i++)\\n        {\\n            if(store[i] == 3) // if rod stores three, i.e all three colors,\\n                ans++;        // simply, increment answer\\n        }\\n        return ans;\\n        \\n    }\\n};\\n\\n// if u like this, please give me an upvote\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n//Runtime: 0 ms, faster than 100.00% of C++ online submissions for Rings and Rods.\\n//Memory Usage: 6.3 MB, less than 42.86% of C++ online submissions for Rings and Rods.\\n\\nclass Solution {\\npublic:\\n    int countPoints(string arr) {\\n        int n = arr.length(); // take the size of the array\\n        if(n == 2) // if size is 2, then it is not possible, simply retun 0\\n        {\\n            return 0;\\n        }\\n        \\n        vector<int> store(10); // making store array\\n        \\n        // running loop for three times\\n        // one thing is here to notice that, colors are present on even index only and their corrsponding rod on odd index. so we run the loop a/c to that\\n\\t\\t\\n        for(int i = 0; i < n - 1; i = i + 2)\\n        {\\n            if(arr[i] == \\'B\\' &&  store[arr[i+1] - \\'0\\'] == 0) // condition\\n            {\\n                store[arr[i+1] - \\'0\\']++;\\n            }\\n        }\\n        \\n        for(int i = 0; i < n - 1; i = i + 2)\\n        {\\n            if(arr[i] == \\'G\\' && (store[arr[i+1] - \\'0\\'] == 1))\\n            {\\n                store[arr[i+1] - \\'0\\']++;\\n            }\\n        }\\n        \\n         for(int i = 0; i < n - 1; i = i + 2)\\n        {\\n            if(arr[i] == \\'R\\' && (store[arr[i+1] - \\'0\\'] == 2))\\n            {\\n                store[arr[i+1] - \\'0\\']++;\\n            }\\n        }\\n        \\n        int ans = 0; // intiliaze our answer as zero\\n        for(int i = 0; i < 10; i++)\\n        {\\n            if(store[i] == 3) // if rod stores three, i.e all three colors,\\n                ans++;        // simply, increment answer\\n        }\\n        return ans;\\n        \\n    }\\n};\\n\\n// if u like this, please give me an upvote\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1625016,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn count_points(rings: String) -> i32 {\\n        let mut rods = [0; 10];\\n        rings.as_bytes().chunks(2).for_each(|pair| {\\n            rods[(pair[1] - b\\'0\\') as usize] |= match pair[0] {\\n                b\\'R\\' => 0b001,\\n                b\\'G\\' => 0b010,\\n                _ => 0b100,\\n            };\\n        });\\n        rods.iter().filter(|&&x| x == 0b111).count() as _\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn count_points(rings: String) -> i32 {\\n        let mut rods = [0; 10];\\n        rings.as_bytes().chunks(2).for_each(|pair| {\\n            rods[(pair[1] - b\\'0\\') as usize] |= match pair[0] {\\n                b\\'R\\' => 0b001,\\n                b\\'G\\' => 0b010,\\n                _ => 0b100,\\n            };\\n        });\\n        rods.iter().filter(|&&x| x == 0b111).count() as _\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3463572,
                "title": "java-easy-100-fastest-nested-hashing-explained-fully-with-diagram",
                "content": "# Intuition\\n- Obviously we need to record some values corresponding some key, the first thought is to go for HashMap but the main question arises on deciding what the value will be and what the key will be.\\n- Approach 1 - (key, value) --> (color, rod) where we record number of rods that have a particular color.\\n  - There will be only 3 key values this way and we only need to record the rod value for each color.\\n  - After that We iterate through all the 3 keys and increase the value of return integer by one once there exists a rod number in all of the 3 key values.\\n- Approach 2 - (key, value) --> (rod, color) where we record if a particular rod has all the 3 colors init, we use a hashset so to remove any repeated color appended into the hashset and when traversing through the hashmap, we can just validate if the nested hashset has onl;y 3 elements init. if so - the only possible values can be <\"R\",\"G\",\"B\"> and hence we add one onto returning integer and then return.\\n- - - \\nLet\\'s understand the approach\\n\\n![images.jpeg](https://assets.leetcode.com/users/images/48e951e6-4d90-48c2-9b72-fc19969154c2_1682688351.3055496.jpeg)\\n\\n\\n# Approach\\n- Our approach is the second one as the traversal through the HashMap at the end is easier and there are less things to validate or look for.\\n- We have a nested HashSet in a HashMap in this solution\\n- The function is as follows -\\n  - Key value for HashMap - rod <Character type>\\n  - Value corresponding to key - HashSet <Character type>\\n```\\nHashMap - for main string \"R0B0G0R9G0\"\\n\\nIteration 1 - for \"R0\" \\n\\n      Key   |    Value\\n      \"0\"   |    HashSet<\"R\">\\n\\nIteration 2 - for \"B0\"\\n\\n      Key   |    Value\\n      \"0\"   |    HashSet<\"R\",\"B\">\\n\\nIteration 3 - for \"G0\"\\n\\n      Key   |    Value\\n      \"0\"   |    HashSet<\"R\",\"B\",\"G\">\\n\\nIteration 4 - for \"R9\"\\n\\n      Key   |    Value\\n      \"0\"   |    HashSet<\"R\",\"B\",\"G\">\\n      \"9\"   |    HashSet<\"R\">\\n\\nIteration 5 - for \"G0\"\\n\\n      Key   |    Value\\n      \"0\"   |    HashSet<\"R\",\"B\",\"G\"> // No change, G already inside HashSet\\n      \"9\"   |    HashSet<\"R\">\\n```\\n- Hopefully The reason for opting nested hashset is clear, now moving further\\n- Each iteration step in the main String has a jump of 2 where we evaluate two things at a time - \\n```\\nMain String Iteration - for \"R0B0G0R9G0\"\\n\\nIteration 1 -  \"R0\" , color = \"R\", rod = \"0\"\\n\\nIteration 1 -  \"B0\" , color = \"B\", rod = \"0\"\\n\\nIteration 1 -  \"G0\" , color = \"G\", rod = \"0\"\\n\\nIteration 1 -  \"R9\" , color = \"R\", rod = \"9\"\\n\\nIteration 1 -  \"G0\" , color = \"G\", rod = \"0\"\\n\\n```\\n- After iterating through the main string setting up our nested hashset in out hashmap, it\\'s time for counting how many rods have all the colors and return that number.\\n```\\nHashSet - for main string \"R0B0G0R9G0\"\\n\\n      Key   |    Value\\n    --------+---------------------------\\n      \"0\"   |    HashSet<\"R\",\"B\",\"G\"> \\n      \"9\"   |    HashSet<\"R\">\\n            |\\n\\nfor Key - \"0\", HashSet.size = 3 // meaning all colors in rod 0\\n    ret = ret + 1 // 0 + 1 = 1\\nfor Key - \"0\", HashSet.size = 1 // only one color in rod 9\\n    ret = ret + 0 // 1 + 0 = 1\\n\\nreturn ret\\n```\\n\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        HashMap<Character, HashSet<Character>> map = new HashMap<>();\\n        for(int i = 0;i<rings.length();i+=2){\\n            Character color = rings.charAt(i);\\n            Character rod = rings.charAt(i+1);\\n            if(map.containsKey(rod) == true){\\n                HashSet<Character> value = map.get(rod);\\n                value.add(color);\\n            }else{\\n                HashSet<Character> value = new HashSet<>();\\n                value.add(color);\\n                map.put(rod,value);\\n            }\\n        }\\n        int ret = 0;\\n        for(Character curr: map.keySet()){\\n            if(map.get(curr).size() == 3){\\n                ret++;\\n            }\\n        }\\n\\n        return ret;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nHashMap - for main string \"R0B0G0R9G0\"\\n\\nIteration 1 - for \"R0\" \\n\\n      Key   |    Value\\n      \"0\"   |    HashSet<\"R\">\\n\\nIteration 2 - for \"B0\"\\n\\n      Key   |    Value\\n      \"0\"   |    HashSet<\"R\",\"B\">\\n\\nIteration 3 - for \"G0\"\\n\\n      Key   |    Value\\n      \"0\"   |    HashSet<\"R\",\"B\",\"G\">\\n\\nIteration 4 - for \"R9\"\\n\\n      Key   |    Value\\n      \"0\"   |    HashSet<\"R\",\"B\",\"G\">\\n      \"9\"   |    HashSet<\"R\">\\n\\nIteration 5 - for \"G0\"\\n\\n      Key   |    Value\\n      \"0\"   |    HashSet<\"R\",\"B\",\"G\"> // No change, G already inside HashSet\\n      \"9\"   |    HashSet<\"R\">\\n```\n```\\nMain String Iteration - for \"R0B0G0R9G0\"\\n\\nIteration 1 -  \"R0\" , color = \"R\", rod = \"0\"\\n\\nIteration 1 -  \"B0\" , color = \"B\", rod = \"0\"\\n\\nIteration 1 -  \"G0\" , color = \"G\", rod = \"0\"\\n\\nIteration 1 -  \"R9\" , color = \"R\", rod = \"9\"\\n\\nIteration 1 -  \"G0\" , color = \"G\", rod = \"0\"\\n\\n```\n```\\nHashSet - for main string \"R0B0G0R9G0\"\\n\\n      Key   |    Value\\n    --------+---------------------------\\n      \"0\"   |    HashSet<\"R\",\"B\",\"G\"> \\n      \"9\"   |    HashSet<\"R\">\\n            |\\n\\nfor Key - \"0\", HashSet.size = 3 // meaning all colors in rod 0\\n    ret = ret + 1 // 0 + 1 = 1\\nfor Key - \"0\", HashSet.size = 1 // only one color in rod 9\\n    ret = ret + 0 // 1 + 0 = 1\\n\\nreturn ret\\n```\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        HashMap<Character, HashSet<Character>> map = new HashMap<>();\\n        for(int i = 0;i<rings.length();i+=2){\\n            Character color = rings.charAt(i);\\n            Character rod = rings.charAt(i+1);\\n            if(map.containsKey(rod) == true){\\n                HashSet<Character> value = map.get(rod);\\n                value.add(color);\\n            }else{\\n                HashSet<Character> value = new HashSet<>();\\n                value.add(color);\\n                map.put(rod,value);\\n            }\\n        }\\n        int ret = 0;\\n        for(Character curr: map.keySet()){\\n            if(map.get(curr).size() == 3){\\n                ret++;\\n            }\\n        }\\n\\n        return ret;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3358360,
                "title": "simplest-python-solution-using-sets",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        r,g,b = [],[],[]\\n        for i in range(len(rings)):\\n            if rings[i] == \"R\": r.append(rings[i+1])\\n            if rings[i] == \"G\": g.append(rings[i+1])\\n            if rings[i] == \"B\": b.append(rings[i+1])\\n        return len((set(r).intersection(set(g))).intersection(set(b)))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        r,g,b = [],[],[]\\n        for i in range(len(rings)):\\n            if rings[i] == \"R\": r.append(rings[i+1])\\n            if rings[i] == \"G\": g.append(rings[i+1])\\n            if rings[i] == \"B\": b.append(rings[i+1])\\n        return len((set(r).intersection(set(g))).intersection(set(b)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2873163,
                "title": "python-short-simple",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        count = 0\\n        for i in range(10):\\n            c = str(i)\\n            if \"B\"+c in rings and \"G\"+c in rings and \"R\"+c in rings:\\n                count += 1\\n        return count\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        count = 0\\n        for i in range(10):\\n            c = str(i)\\n            if \"B\"+c in rings and \"G\"+c in rings and \"R\"+c in rings:\\n                count += 1\\n        return count\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2662743,
                "title": "java-o-n-beginners-friendly",
                "content": "String[] arr = new String[10];\\n        \\n        for(int i=1;i<rings.length();i+=2){    //  odd positions \\n            \\n            int index  =  rings.charAt(i)-\\'0\\';\\n            char c = rings.charAt(i-1);     // even positions\\n            if(arr[index]!=null){\\n                arr[index] += \"\"+c;\\n            }else{\\n                arr[index] = \"\"+c;\\n            }\\n        }\\n        int count=0;\\n        \\n        for(int i=0;i<arr.length;i++){\\n            if(arr[i]!=null){\\n                String s = arr[i];\\n                if(s.contains(\"R\") && s.contains(\"G\") && s.contains(\"B\")){\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;",
                "solutionTags": [
                    "Java"
                ],
                "code": "String[] arr = new String[10];\\n        \\n        for(int i=1;i<rings.length();i+=2){    //  odd positions \\n            \\n            int index  =  rings.charAt(i)-\\'0\\';\\n            char c = rings.charAt(i-1);     // even positions\\n            if(arr[index]!=null){\\n                arr[index] += \"\"+c;\\n            }else{\\n                arr[index] = \"\"+c;\\n            }\\n        }\\n        int count=0;\\n        \\n        for(int i=0;i<arr.length;i++){\\n            if(arr[i]!=null){\\n                String s = arr[i];\\n                if(s.contains(\"R\") && s.contains(\"G\") && s.contains(\"B\")){\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;",
                "codeTag": "Unknown"
            },
            {
                "id": 2468767,
                "title": "simple-java-solution-5-lines-runtime-3ms",
                "content": "```\\npublic int countPoints(String rings) {\\nint count=0;\\n        for(int i=0;i<10;i++){\\n            if(rings.contains(\"R\"+String.valueOf(i)) && rings.contains(\"G\"+String.valueOf(i)) && rings.contains(\"B\"+String.valueOf(i)))\\n                count ++;\\n        }\\n        return count;\\n\\t}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\npublic int countPoints(String rings) {\\nint count=0;\\n        for(int i=0;i<10;i++){\\n            if(rings.contains(\"R\"+String.valueOf(i)) && rings.contains(\"G\"+String.valueOf(i)) && rings.contains(\"B\"+String.valueOf(i)))\\n                count ++;\\n        }\\n        return count;\\n\\t}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2232502,
                "title": "c-map-100-faster-easy-to-understand",
                "content": "\\t// create a unordered_map of in order to do mapping of rods with colors (unique)\\n\\t// since we have to see whether te rods contains all three colors or not \\n\\t// for every color mapped with rods, color will be stored in set uniquely\\n\\t// iterate through the map and if size of set>=3 then this means \\n\\t// three diffrent colors are there in the set for this corresponding rod we will increase out count \\n\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint countPoints(string rings) {\\n\\t\\t\\tint cnt=0;\\n\\t\\t\\tunordered_map<int,unordered_set<char>>m;\\n\\t\\t\\tfor(int i=0;i<rings.size();i+=2)\\n\\t\\t\\t{\\n\\t\\t\\t\\tchar color=rings[i];\\n\\t\\t\\t\\tint rod=rings[i+1];\\n\\t\\t\\t\\tm[rod].insert(color);\\n\\t\\t\\t}\\n\\t\\t\\tfor(auto &i:m)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(m[i.first].size()>=3)\\n\\t\\t\\t\\t\\tcnt++;\\n\\t\\t\\t}\\n\\t\\t\\treturn cnt;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint countPoints(string rings) {\\n\\t\\t\\tint cnt=0;\\n\\t\\t\\tunordered_map<int,unordered_set<char>>m;\\n\\t\\t\\tfor(int i=0;i<rings.size();i+=2)\\n\\t\\t\\t{\\n\\t\\t\\t\\tchar color=rings[i];\\n\\t\\t\\t\\tint rod=rings[i+1];\\n\\t\\t\\t\\tm[rod].insert(color);\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2021554,
                "title": "0-ms-solution-using-map-set-with-explanation",
                "content": "```\\n/*  1) 1st create a map with key char (numbers) and value -> a set of char ...\\n\\t2) just iterate over the given string rings ... (only rod number)\\n\\t3) insert the given color according to the rod number in the set ...\\n\\t4) as we know set dosent contain duplicate value so after creating the map just iterate the map\\n       and when you find the set size is 3 calculate the count ...\\n*/\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        map<char,set<char>> mpp;\\n        for(int i = 1 ; i < rings.size() ; i += 2){\\n            mpp[rings[i]].insert(rings[i-1]);\\n        }\\n        int cnt = 0;\\n        for(auto it : mpp) if(it.second.size() == 3) cnt++;\\n        \\n        return cnt;\\n    }\\n};\\n```\\n\\n**please upvote if you like this**\\n\\n\\n\\n\\n![image](https://assets.leetcode.com/users/images/26f2721f-d57b-4ec4-ad57-8727e3b182ad_1652075088.8204334.png)\\n\\n",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\n/*  1) 1st create a map with key char (numbers) and value -> a set of char ...\\n\\t2) just iterate over the given string rings ... (only rod number)\\n\\t3) insert the given color according to the rod number in the set ...\\n\\t4) as we know set dosent contain duplicate value so after creating the map just iterate the map\\n       and when you find the set size is 3 calculate the count ...\\n*/\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        map<char,set<char>> mpp;\\n        for(int i = 1 ; i < rings.size() ; i += 2){\\n            mpp[rings[i]].insert(rings[i-1]);\\n        }\\n        int cnt = 0;\\n        for(auto it : mpp) if(it.second.size() == 3) cnt++;\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1710281,
                "title": "java-easy-array-approach",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        \\n        int count=0;\\n        int[] r = new int[10];\\n        int[] b = new int[10];\\n        int[] g = new int[10];\\n        \\n\\t\\t// Check R,G,B at even places\\n        for(int i=0;i<rings.length();i+=2)\\n        {\\n            int a=rings.charAt(i+1)-\\'0\\';\\n            \\n            if(rings.charAt(i)==\\'R\\')  \\n                r[a]++;\\n            if(rings.charAt(i)==\\'G\\')  \\n                g[a]++;\\n            if(rings.charAt(i)==\\'B\\') \\n                b[a]++;\\n         }\\n\\t\\t \\n\\t\\t //Check numbers 0-9 at odd places\\n            for(int i=0;i<10;i++)\\n            {\\n                \\n\\t\\t\\t\\t//If not 0 , then they have all 3 color rings\\n               if(r[i]!=0 && b[i]!=0 && g[i]!=0) \\n               {\\n                   count++;\\n               }\\n            }\\n        \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        \\n        int count=0;\\n        int[] r = new int[10];\\n        int[] b = new int[10];\\n        int[] g = new int[10];\\n        \\n\\t\\t// Check R,G,B at even places\\n        for(int i=0;i<rings.length();i+=2)\\n        {\\n            int a=rings.charAt(i+1)-\\'0\\';\\n            \\n            if(rings.charAt(i)==\\'R\\')  \\n                r[a]++;\\n            if(rings.charAt(i)==\\'G\\')  \\n                g[a]++;\\n            if(rings.charAt(i)==\\'B\\') \\n                b[a]++;\\n         }\\n\\t\\t \\n\\t\\t //Check numbers 0-9 at odd places\\n            for(int i=0;i<10;i++)\\n            {\\n                \\n\\t\\t\\t\\t//If not 0 , then they have all 3 color rings\\n               if(r[i]!=0 && b[i]!=0 && g[i]!=0) \\n               {\\n                   count++;\\n               }\\n            }\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1671030,
                "title": "javascript-100-simple-solution",
                "content": "```\\n/**\\n * @param {string} rings\\n * @return {number}\\n */\\nvar countPoints = function(rings) {\\n    let rods = Array(10).fill(\"\");\\n    for(let i = 0; i < rings.length; i += 2){\\n        if(!(rods[rings[i+1]].includes(rings[i]))) rods[rings[i+1]] += rings[i]\\n    }\\n    return rods.filter(rod => rod.length > 2).length\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} rings\\n * @return {number}\\n */\\nvar countPoints = function(rings) {\\n    let rods = Array(10).fill(\"\");\\n    for(let i = 0; i < rings.length; i += 2){\\n        if(!(rods[rings[i+1]].includes(rings[i]))) rods[rings[i+1]] += rings[i]\\n    }\\n    return rods.filter(rod => rod.length > 2).length\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1662883,
                "title": "python3-simple-using-defaultdict-and-set",
                "content": "```python\\ndef countPoints(self, rings: str) -> int:\\n        dict_ = defaultdict(set)\\n        for i in range(0,len(rings),2):\\n            color, ring = rings[i], rings[i+1]\\n            dict_[ring].add(color)\\n        return sum(len(v) == 3 for v in dict_.values())\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\ndef countPoints(self, rings: str) -> int:\\n        dict_ = defaultdict(set)\\n        for i in range(0,len(rings),2):\\n            color, ring = rings[i], rings[i+1]\\n            dict_[ring].add(color)\\n        return sum(len(v) == 3 for v in dict_.values())\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1625395,
                "title": "java-solution-using-map",
                "content": "class Solution {\\n    public int countPoints(String rings) {\\n        HashMap<Character,HashSet<Character>> m=new HashMap<>();\\n        int d=0;\\n        for(int i=0;i<rings.length();i+=2){\\n            if(m.containsKey(rings.charAt(i+1))==false){\\n                m.put(rings.charAt(i+1),new HashSet<Character>());\\n            }\\n            m.get(rings.charAt(i+1)).add(rings.charAt(i));\\n        }\\n        for(Set<Character> s:m.values()){\\n            if(s.size()==3){\\n                d++;\\n            }\\n        }\\n        return d;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int countPoints(String rings) {\\n        HashMap<Character,HashSet<Character>> m=new HashMap<>();\\n        int d=0;\\n        for(int i=0;i<rings.length();i+=2){\\n            if(m.containsKey(rings.charAt(i+1))==false){\\n                m.put(rings.charAt(i+1),new HashSet<Character>());\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1624675,
                "title": "kotlin-bit-mask-without-map-or-set",
                "content": "```\\nclass Solution {\\n    fun countPoints(rings: String): Int {\\n        val rods = IntArray(10)\\n        for (i in 0..rings.lastIndex step 2) {\\n            val position = rings[i + 1] - \\'0\\'\\n            rods[position] = rods[position] or rings[i].colorMask\\n        }\\n        val fullMask = \\'R\\'.colorMask or \\'G\\'.colorMask or \\'B\\'.colorMask\\n        return rods.count { it == fullMask }\\n    }\\n    \\n    private val Char.colorMask\\n        get() = \\n            when (this) {\\n                \\'R\\' -> 1\\n                \\'G\\' -> 1 shl 1\\n                \\'B\\' -> 1 shl 2\\n                else -> error(\"Not a valid color char $this\")\\n            }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun countPoints(rings: String): Int {\\n        val rods = IntArray(10)\\n        for (i in 0..rings.lastIndex step 2) {\\n            val position = rings[i + 1] - \\'0\\'\\n            rods[position] = rods[position] or rings[i].colorMask\\n        }\\n        val fullMask = \\'R\\'.colorMask or \\'G\\'.colorMask or \\'B\\'.colorMask\\n        return rods.count { it == fullMask }\\n    }\\n    \\n    private val Char.colorMask\\n        get() = \\n            when (this) {\\n                \\'R\\' -> 1\\n                \\'G\\' -> 1 shl 1\\n                \\'B\\' -> 1 shl 2\\n                else -> error(\"Not a valid color char $this\")\\n            }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1624238,
                "title": "c-with-explanation",
                "content": "**Explanation:-**\\nCreate a array of size 10 in which ```ith index``` represent ```ith rod``` and for each rod ```create another array of size 3 for storing information of three colors.```\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string r) {\\n        int size=r.size(),ans=0;\\n        vector<vector<int>>nums(10,vector<int>(3,0));\\n        for(int i=0;i<size;i=i+2){\\n            if(r[i]==\\'R\\')\\n                nums[r[i+1]-\\'0\\'][0]=1;\\n            else if(r[i]==\\'G\\')\\n                nums[r[i+1]-\\'0\\'][1]=1;\\n            else\\n                nums[r[i+1]-\\'0\\'][2]=1;\\n        }\\n        for(auto & i:nums){\\n            if(i[0]==1 && i[1]==1 && i[2]==1)\\n                ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```\\nDo **UPVOTE** if it helps :)",
                "solutionTags": [
                    "C"
                ],
                "code": "```ith index```\n```ith rod```\n```create another array of size 3 for storing information of three colors.```\n```\\nclass Solution {\\npublic:\\n    int countPoints(string r) {\\n        int size=r.size(),ans=0;\\n        vector<vector<int>>nums(10,vector<int>(3,0));\\n        for(int i=0;i<size;i=i+2){\\n            if(r[i]==\\'R\\')\\n                nums[r[i+1]-\\'0\\'][0]=1;\\n            else if(r[i]==\\'G\\')\\n                nums[r[i+1]-\\'0\\'][1]=1;\\n            else\\n                nums[r[i+1]-\\'0\\'][2]=1;\\n        }\\n        for(auto & i:nums){\\n            if(i[0]==1 && i[1]==1 && i[2]==1)\\n                ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3787128,
                "title": "most-unique-c-solution-with-explanation-unordered-map-int-unordered-set-char",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        unordered_map<int, unordered_set<char>> mp; // Create an unordered_map with int as key and unordered_set as value\\n        for(int i = 1; i < rings.size(); i += 2)\\n            mp[rings[i]-\\'0\\'].insert(rings[i-1]); // For every rod number, insert the colour of the ring in the set\\n        int ans = 0;\\n        for(int i=0; i<10; i++){\\n            if(mp.find(i) != mp.end()) // First check if the rod number is present in the map\\n                if(mp.at(i).size() == 3) // If set size is 3, i.e. it contains all the 3 coloured rings then increment ans\\n                    ans++;\\n        }\\n        return ans;\\n    }\\n};\\n\\n// Edited simplified version\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        set<char> s[10];\\n        for(int i = 0; i<rings.size(); i += 2)\\n            s[rings[i+1] - \\'0\\'].insert(rings[i]);\\n        int ans = 0;\\n        for(int i = 0; i < 10; i++)\\n            if(s[i].size() == 3)\\n                ans++;\\n        return ans; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        unordered_map<int, unordered_set<char>> mp; // Create an unordered_map with int as key and unordered_set as value\\n        for(int i = 1; i < rings.size(); i += 2)\\n            mp[rings[i]-\\'0\\'].insert(rings[i-1]); // For every rod number, insert the colour of the ring in the set\\n        int ans = 0;\\n        for(int i=0; i<10; i++){\\n            if(mp.find(i) != mp.end()) // First check if the rod number is present in the map\\n                if(mp.at(i).size() == 3) // If set size is 3, i.e. it contains all the 3 coloured rings then increment ans\\n                    ans++;\\n        }\\n        return ans;\\n    }\\n};\\n\\n// Edited simplified version\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        set<char> s[10];\\n        for(int i = 0; i<rings.size(); i += 2)\\n            s[rings[i+1] - \\'0\\'].insert(rings[i]);\\n        int ans = 0;\\n        for(int i = 0; i < 10; i++)\\n            if(s[i].size() == 3)\\n                ans++;\\n        return ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3733680,
                "title": "100-fastest-easiest-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n\\n        vector<set<char>> count(10);\\n        int ans = 0;\\n        for(int i = 1;  i < rings.size(); i+=2)\\n        {\\n            count[rings[i] - \\'0\\'].insert(rings[i-1]);\\n        }\\n\\n        for(int i = 0; i < 10; i++)\\n        {\\n            if(count[i].size() == 3)\\n           ans++;\\n           // cout<<ans<< \"  \";\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n\\n        vector<set<char>> count(10);\\n        int ans = 0;\\n        for(int i = 1;  i < rings.size(); i+=2)\\n        {\\n            count[rings[i] - \\'0\\'].insert(rings[i-1]);\\n        }\\n\\n        for(int i = 0; i < 10; i++)\\n        {\\n            if(count[i].size() == 3)\\n           ans++;\\n           // cout<<ans<< \"  \";\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3567680,
                "title": "simple-java-solution-for-beginners-0ms-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int rods[] = new int[10];\\n        for(int i = 0; i < rings.length(); i += 2) {\\n            char color = rings.charAt(i);\\n            int rod = Character.getNumericValue(rings.charAt(i + 1));\\n            switch(color) {\\n                case \\'R\\' :\\n                    rods[rod] |= 1;\\n                    break;\\n                case \\'G\\' :\\n                    rods[rod] |= 2;\\n                    break;\\n                case \\'B\\' :\\n                    rods[rod] |= 4;\\n                    break;\\n            }\\n        }\\n        int count = 0;\\n        for(int rod : rods) {\\n            if(rod == 7) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int rods[] = new int[10];\\n        for(int i = 0; i < rings.length(); i += 2) {\\n            char color = rings.charAt(i);\\n            int rod = Character.getNumericValue(rings.charAt(i + 1));\\n            switch(color) {\\n                case \\'R\\' :\\n                    rods[rod] |= 1;\\n                    break;\\n                case \\'G\\' :\\n                    rods[rod] |= 2;\\n                    break;\\n                case \\'B\\' :\\n                    rods[rod] |= 4;\\n                    break;\\n            }\\n        }\\n        int count = 0;\\n        for(int rod : rods) {\\n            if(rod == 7) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3567620,
                "title": "simple-java-solution-for-beginners-1ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        Set<Integer> red = new HashSet();\\n        Set<Integer> green = new HashSet();\\n        Set<Integer> blue = new HashSet();\\n        for(int i = 0; i < rings.length(); i += 2) {\\n            if(rings.charAt(i) == \\'R\\') {\\n                red.add(rings.charAt(i + 1) - \\'0\\');\\n            }\\n            if(rings.charAt(i) == \\'G\\') {\\n                green.add(rings.charAt(i + 1) - \\'0\\');\\n            }\\n            if(rings.charAt(i) == \\'B\\') {\\n                blue.add(rings.charAt(i + 1) - \\'0\\');\\n            }\\n        }\\n        int count = 0;\\n        for(int i = 0; i <= 9; i++) {\\n            if(red.contains(i) && green.contains(i) && blue.contains(i)) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        Set<Integer> red = new HashSet();\\n        Set<Integer> green = new HashSet();\\n        Set<Integer> blue = new HashSet();\\n        for(int i = 0; i < rings.length(); i += 2) {\\n            if(rings.charAt(i) == \\'R\\') {\\n                red.add(rings.charAt(i + 1) - \\'0\\');\\n            }\\n            if(rings.charAt(i) == \\'G\\') {\\n                green.add(rings.charAt(i + 1) - \\'0\\');\\n            }\\n            if(rings.charAt(i) == \\'B\\') {\\n                blue.add(rings.charAt(i + 1) - \\'0\\');\\n            }\\n        }\\n        int count = 0;\\n        for(int i = 0; i <= 9; i++) {\\n            if(red.contains(i) && green.contains(i) && blue.contains(i)) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3415925,
                "title": "easy-to-understand-simple-approach-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**With Freqancy Array**\\n\\n# Give me your *vote* \\uD83D\\uDE0D\\n\\n---\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nYou solve with 10 Array But readuce time use three freqancy Array\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n\\n        int[] blue = new int[10];\\n        int[] green = new int[10];\\n        int[] red = new int[10];\\n\\n        for(int i=0;i<rings.length();i+=2)\\n        {\\n            if(rings.charAt(i)==\\'B\\') blue[rings.charAt(i+1)-\\'0\\']++;\\n            if(rings.charAt(i)==\\'G\\') green[rings.charAt(i+1)-\\'0\\']++;\\n            if(rings.charAt(i)==\\'R\\') red[rings.charAt(i+1)-\\'0\\']++;\\n        }\\n        int ans=0;\\n        for(int i=0;i<blue.length;i++)\\n        {\\n            int check=0;\\n            if(blue[i]>0) check++;\\n            if(green[i]>0) check++;\\n            if(red[i]>0) check++;\\n            if(check==3) ans++;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n\\n        int[] blue = new int[10];\\n        int[] green = new int[10];\\n        int[] red = new int[10];\\n\\n        for(int i=0;i<rings.length();i+=2)\\n        {\\n            if(rings.charAt(i)==\\'B\\') blue[rings.charAt(i+1)-\\'0\\']++;\\n            if(rings.charAt(i)==\\'G\\') green[rings.charAt(i+1)-\\'0\\']++;\\n            if(rings.charAt(i)==\\'R\\') red[rings.charAt(i+1)-\\'0\\']++;\\n        }\\n        int ans=0;\\n        for(int i=0;i<blue.length;i++)\\n        {\\n            int check=0;\\n            if(blue[i]>0) check++;\\n            if(green[i]>0) check++;\\n            if(red[i]>0) check++;\\n            if(check==3) ans++;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3394855,
                "title": "rings-and-rods-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int i, j, r_flag=0, g_flag=0, b_flag=0;\\n        set<int> s;\\n        for(i=0 ; i<10 ; i++)\\n        {\\n            r_flag=0, g_flag=0, b_flag=0;\\n            for(j=0 ; j<rings.length()-1 ; j++)\\n            {\\n                if(rings[j]==\\'R\\' && rings[j+1]==48+i)\\n                {\\n                    r_flag=1;\\n                }\\n                else if(rings[j]==\\'G\\' && rings[j+1]==48+i)\\n                {\\n                    g_flag=1;\\n                }\\n                else if(rings[j]==\\'B\\' && rings[j+1]==48+i)\\n                {\\n                    b_flag=1;\\n                }\\n            }\\n            if(r_flag==1 && g_flag==1 && b_flag==1)\\n            {\\n                s.insert(i);\\n            }\\n        }\\n        return s.size();\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/792a2ee3-fa92-4936-9a87-216cd9a9ac02_1682613207.1269994.jpeg)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int i, j, r_flag=0, g_flag=0, b_flag=0;\\n        set<int> s;\\n        for(i=0 ; i<10 ; i++)\\n        {\\n            r_flag=0, g_flag=0, b_flag=0;\\n            for(j=0 ; j<rings.length()-1 ; j++)\\n            {\\n                if(rings[j]==\\'R\\' && rings[j+1]==48+i)\\n                {\\n                    r_flag=1;\\n                }\\n                else if(rings[j]==\\'G\\' && rings[j+1]==48+i)\\n                {\\n                    g_flag=1;\\n                }\\n                else if(rings[j]==\\'B\\' && rings[j+1]==48+i)\\n                {\\n                    b_flag=1;\\n                }\\n            }\\n            if(r_flag==1 && g_flag==1 && b_flag==1)\\n            {\\n                s.insert(i);\\n            }\\n        }\\n        return s.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3288946,
                "title": "easy-c-solution-using-2d-bool-vector-new-approach-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->To use a data structure that can help in keeping track of all the three color rings in each rod.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nusing the 2D bool vector to keep track of all the rings in the rods .\\nthen travesing the bool vector to find wheather all three colors are present or not.\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int totalroads=0;\\n        //we created 2D vector to keep track of all three color  in each rods;\\n        vector<vector<bool>> rods (10,vector<bool>(3,false));\\n        //travesed till the length-1 because we accessing i+1 for rod number in string.\\n        for(int i=0;i<rings.length()-1;i+=2){\\n            char color=rings[i];//to access color\\n            int rodnumber=rings[i+1]-\\'0\\';//to access rod number\\n        //for red color ring in the rod similarly we have done for blue and green rings.\\n            if(color==\\'R\\'){\\n                rods[rodnumber][0]=true;\\n            }\\n\\n             else if(color==\\'G\\'){\\n                rods[rodnumber][1]=true;\\n            }\\n            \\n             else if(color==\\'B\\'){\\n                rods[rodnumber][2]=true;\\n            }\\n        }\\n        //now we are checking that all the colors rings are present int the rod or not if present add to totalroads.\\n        for(auto r :rods){\\n            bool allPresent=true;\\n            for(int i=0;i<3;i++){\\n                if(r[i]==false)\\n                {\\n                allPresent=false;\\n                break;\\n                }\\n            }\\n            if(allPresent)\\n            {\\n                totalroads++;\\n            }\\n        }\\n        return totalroads;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int totalroads=0;\\n        //we created 2D vector to keep track of all three color  in each rods;\\n        vector<vector<bool>> rods (10,vector<bool>(3,false));\\n        //travesed till the length-1 because we accessing i+1 for rod number in string.\\n        for(int i=0;i<rings.length()-1;i+=2){\\n            char color=rings[i];//to access color\\n            int rodnumber=rings[i+1]-\\'0\\';//to access rod number\\n        //for red color ring in the rod similarly we have done for blue and green rings.\\n            if(color==\\'R\\'){\\n                rods[rodnumber][0]=true;\\n            }\\n\\n             else if(color==\\'G\\'){\\n                rods[rodnumber][1]=true;\\n            }\\n            \\n             else if(color==\\'B\\'){\\n                rods[rodnumber][2]=true;\\n            }\\n        }\\n        //now we are checking that all the colors rings are present int the rod or not if present add to totalroads.\\n        for(auto r :rods){\\n            bool allPresent=true;\\n            for(int i=0;i<3;i++){\\n                if(r[i]==false)\\n                {\\n                allPresent=false;\\n                break;\\n                }\\n            }\\n            if(allPresent)\\n            {\\n                totalroads++;\\n            }\\n        }\\n        return totalroads;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3254275,
                "title": "hashset-solution-1ms-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        HashSet<Integer>red=new HashSet<>();\\n        HashSet<Integer>green=new HashSet<>();\\n        HashSet<Integer>blue=new HashSet<>();\\n        for(int i=0; i<rings.length();i+=2){\\n            if(rings.charAt(i) == \\'R\\')\\n                red.add(rings.charAt(i + 1) - \\'0\\');\\n            else if(rings.charAt(i) == \\'B\\')\\n                blue.add(rings.charAt(i + 1) - \\'0\\');\\n            else\\n                green.add(rings.charAt(i + 1) - \\'0\\');\\n        }\\n        int count=0;\\n        for(int i=0;i<=9;i++){\\n            if(red.contains(i) && blue.contains(i) && green.contains(i)==true){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        HashSet<Integer>red=new HashSet<>();\\n        HashSet<Integer>green=new HashSet<>();\\n        HashSet<Integer>blue=new HashSet<>();\\n        for(int i=0; i<rings.length();i+=2){\\n            if(rings.charAt(i) == \\'R\\')\\n                red.add(rings.charAt(i + 1) - \\'0\\');\\n            else if(rings.charAt(i) == \\'B\\')\\n                blue.add(rings.charAt(i + 1) - \\'0\\');\\n            else\\n                green.add(rings.charAt(i + 1) - \\'0\\');\\n        }\\n        int count=0;\\n        for(int i=0;i<=9;i++){\\n            if(red.contains(i) && blue.contains(i) && green.contains(i)==true){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3090827,
                "title": "7ms-cpp-easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string s) {\\n        vector<bool> r(10,false),g(10,false),b(10,false);\\n        int n = s.size(),count = 0;\\n        for(int i=1;i<n;i+=2){\\n            if(s[i-1] == \\'R\\'){\\n                r[s[i]-\\'0\\'] = true;\\n            }else if(s[i-1] == \\'G\\'){\\n                g[s[i]-\\'0\\'] = true;\\n            }else if(s[i-1] == \\'B\\'){\\n                b[s[i]-\\'0\\'] = true;\\n            }\\n        }\\n\\n        for(int i=0;i<10;i++){\\n            if(r[i] == true && g[i] == true && b[i] == true){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string s) {\\n        vector<bool> r(10,false),g(10,false),b(10,false);\\n        int n = s.size(),count = 0;\\n        for(int i=1;i<n;i+=2){\\n            if(s[i-1] == \\'R\\'){\\n                r[s[i]-\\'0\\'] = true;\\n            }else if(s[i-1] == \\'G\\'){\\n                g[s[i]-\\'0\\'] = true;\\n            }else if(s[i-1] == \\'B\\'){\\n                b[s[i]-\\'0\\'] = true;\\n            }\\n        }\\n\\n        for(int i=0;i<10;i++){\\n            if(r[i] == true && g[i] == true && b[i] == true){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2997555,
                "title": "golang-0ms-and-100-memory-1-9-and-easy-you-understand",
                "content": "# Code\\n![sdasdasdas.png](https://assets.leetcode.com/users/images/d5090aa5-c298-4416-86a9-7d1a97d95f5a_1672831195.7419975.png)\\n```\\n//example 1, 0ms 100% memory\\nfunc countPoints(rings string) int {\\n    rod := make(map[string]string)\\n    \\n    for i := 0; i < len(rings); i += 2{\\n        s1 := string(rings[i])\\n        s2 := string(rings[i+1])\\n        rod[s2] += s1\\n    }\\n\\n    count := 0\\n    for _, v := range rod {\\n        if Unique(v) == \"BGR\" {\\n            count++\\n        }\\n    }\\n\\n    return count;\\n}\\n\\nfunc Unique(s string) string{\\n    arr := make([]int, 26)\\n\\n    str := \"\"\\n    for _, n := range s { arr[n - \\'A\\'] = 1}\\n\\n    for i, n := range arr{\\n        if n != 0 {\\n            str += string(i + \\'A\\')\\n        }\\n    }\\n    \\n    return str\\n}\\n\\n//Simple solution exampel 2 versi update new : \\n\\nfunc countPoints(rings string) int {\\n    rod := make(map[string]map[string]int)\\n    sum := 0\\n    for i := 0; i < len(rings); i += 2{\\n        if rod[string(rings[i+1])] == nil {\\n            rod[string(rings[i+1])] = make(map[string]int)\\n        }\\n        rod[string(rings[i+1])][string(rings[i])]++\\n        if len(rod[string(rings[i+1])]) == 3 {\\n            if rod[string(rings[i+1])][string(rings[i])] <= 1 {\\n                sum++\\n            }\\n        }\\n    }\\n    \\n    return sum;\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\n//example 1, 0ms 100% memory\\nfunc countPoints(rings string) int {\\n    rod := make(map[string]string)\\n    \\n    for i := 0; i < len(rings); i += 2{\\n        s1 := string(rings[i])\\n        s2 := string(rings[i+1])\\n        rod[s2] += s1\\n    }\\n\\n    count := 0\\n    for _, v := range rod {\\n        if Unique(v) == \"BGR\" {\\n            count++\\n        }\\n    }\\n\\n    return count;\\n}\\n\\nfunc Unique(s string) string{\\n    arr := make([]int, 26)\\n\\n    str := \"\"\\n    for _, n := range s { arr[n - \\'A\\'] = 1}\\n\\n    for i, n := range arr{\\n        if n != 0 {\\n            str += string(i + \\'A\\')\\n        }\\n    }\\n    \\n    return str\\n}\\n\\n//Simple solution exampel 2 versi update new : \\n\\nfunc countPoints(rings string) int {\\n    rod := make(map[string]map[string]int)\\n    sum := 0\\n    for i := 0; i < len(rings); i += 2{\\n        if rod[string(rings[i+1])] == nil {\\n            rod[string(rings[i+1])] = make(map[string]int)\\n        }\\n        rod[string(rings[i+1])][string(rings[i])]++\\n        if len(rod[string(rings[i+1])]) == 3 {\\n            if rod[string(rings[i+1])][string(rings[i])] <= 1 {\\n                sum++\\n            }\\n        }\\n    }\\n    \\n    return sum;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2831872,
                "title": "easy-solution-using-map-int-string",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(N*N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) \\n    {\\n        map<int,string> mp;int ans=0;\\n        for(int i=0;i<rings.size()-1;i++)\\n        {\\n            mp[rings[i+1]-\\'0\\'] += rings[i];\\n        }\\n        for(int i=0;i<=9;i++)\\n        {\\n            int R=0,B=0,G=0;\\n            string ch=mp[i];\\n            for(int i=0;i<ch.size();i++)\\n            {\\n                 if(ch[i]==\\'R\\')\\n                 {\\n                     R=1;\\n                 }\\n                 if(ch[i]==\\'G\\')\\n                 {\\n                     G=1;\\n                 }\\n                 if(ch[i]==\\'B\\')\\n                 {\\n                     B=1;\\n                 }\\n            }\\n            if(R==1 && G==1 && B==1)\\n            {\\n                ans++;\\n            }\\n\\n        }return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) \\n    {\\n        map<int,string> mp;int ans=0;\\n        for(int i=0;i<rings.size()-1;i++)\\n        {\\n            mp[rings[i+1]-\\'0\\'] += rings[i];\\n        }\\n        for(int i=0;i<=9;i++)\\n        {\\n            int R=0,B=0,G=0;\\n            string ch=mp[i];\\n            for(int i=0;i<ch.size();i++)\\n            {\\n                 if(ch[i]==\\'R\\')\\n                 {\\n                     R=1;\\n                 }\\n                 if(ch[i]==\\'G\\')\\n                 {\\n                     G=1;\\n                 }\\n                 if(ch[i]==\\'B\\')\\n                 {\\n                     B=1;\\n                 }\\n            }\\n            if(R==1 && G==1 && B==1)\\n            {\\n                ans++;\\n            }\\n\\n        }return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2806944,
                "title": "js-solution-99-85",
                "content": "\\n```\\n\\nconst countPoints = function(rings) {\\n    const obj = {0: \\'\\', 1: \\'\\', 2: \\'\\', 3: \\'\\', 4: \\'\\', 5: \\'\\', 6: \\'\\', 7: \\'\\', 8: \\'\\', 9: \\'\\'}\\n\\n    let count = 0\\n\\n    for(let i = 1; i < rings.length; i += 2) \\n      obj[rings[i]] += rings[i - 1]\\n\\n    Object.values(obj).forEach(val => \\n      val.includes(\\'R\\') && val.includes(\\'G\\') && val.includes(\\'B\\') && count++\\n    )\\n\\n    return count\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nconst countPoints = function(rings) {\\n    const obj = {0: \\'\\', 1: \\'\\', 2: \\'\\', 3: \\'\\', 4: \\'\\', 5: \\'\\', 6: \\'\\', 7: \\'\\', 8: \\'\\', 9: \\'\\'}\\n\\n    let count = 0\\n\\n    for(let i = 1; i < rings.length; i += 2) \\n      obj[rings[i]] += rings[i - 1]\\n\\n    Object.values(obj).forEach(val => \\n      val.includes(\\'R\\') && val.includes(\\'G\\') && val.includes(\\'B\\') && count++\\n    )\\n\\n    return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2796928,
                "title": "using-rod-class-of-flag-r-g-b-simple-approach",
                "content": "```\\nclass Solution {\\n    class Rod{\\n        boolean red;\\n        boolean green;\\n        boolean blue;\\n        \\n        Rod(){\\n        red = green = blue = false;\\n        }\\n    }\\n    \\n    public int countPoints(String rings) {\\n        Rod rods[] = new Rod[10];\\n        for(int i=0;i<10;i++)\\n            rods[i] = new Rod();\\n        for(int i=0;i<rings.length();i+=2){\\n            if(rings.charAt(i)==\\'B\\')\\n            rods[Character.getNumericValue(rings.charAt(i+1))].blue = true;\\n            else if(rings.charAt(i)==\\'R\\')\\n            rods[Character.getNumericValue(rings.charAt(i+1))].red = true;\\n            else\\n            rods[Character.getNumericValue(rings.charAt(i+1))].green = true;\\n        }\\n        \\n        int count = 0;\\n        for(int i=0;i<10;i++)\\n        {\\n            count += rods[i].red && rods[i].blue && rods[i].green? 1:0;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    class Rod{\\n        boolean red;\\n        boolean green;\\n        boolean blue;\\n        \\n        Rod(){\\n        red = green = blue = false;\\n        }\\n    }\\n    \\n    public int countPoints(String rings) {\\n        Rod rods[] = new Rod[10];\\n        for(int i=0;i<10;i++)\\n            rods[i] = new Rod();\\n        for(int i=0;i<rings.length();i+=2){\\n            if(rings.charAt(i)==\\'B\\')\\n            rods[Character.getNumericValue(rings.charAt(i+1))].blue = true;\\n            else if(rings.charAt(i)==\\'R\\')\\n            rods[Character.getNumericValue(rings.charAt(i+1))].red = true;\\n            else\\n            rods[Character.getNumericValue(rings.charAt(i+1))].green = true;\\n        }\\n        \\n        int count = 0;\\n        for(int i=0;i<10;i++)\\n        {\\n            count += rods[i].red && rods[i].blue && rods[i].green? 1:0;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2739388,
                "title": "c-using-r-g-b-array",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int R[10]={0};\\n        int G[10]={0};\\n        int B[10]={0};\\n        \\n        for(int i=0;i<rings.length();i+=2)\\n        {\\n            int rod= rings[i+1]-\\'0\\'; \\\\\\\\convert to int\\n            if(rings[i]==\\'R\\')\\n                R[rod]++;\\n            else if(rings[i]==\\'G\\')\\n                G[rod]++;\\n            else\\n                B[rod]++;\\n        }\\n        int count=0;\\n        for(int i=0;i<10;i++)\\n        {\\n            if(R[i]>0 && G[i]>0 && B[i]>0)\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int R[10]={0};\\n        int G[10]={0};\\n        int B[10]={0};\\n        \\n        for(int i=0;i<rings.length();i+=2)\\n        {\\n            int rod= rings[i+1]-\\'0\\'; \\\\\\\\convert to int\\n            if(rings[i]==\\'R\\')\\n                R[rod]++;\\n            else if(rings[i]==\\'G\\')\\n                G[rod]++;\\n            else\\n                B[rod]++;\\n        }\\n        int count=0;\\n        for(int i=0;i<10;i++)\\n        {\\n            if(R[i]>0 && G[i]>0 && B[i]>0)\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2726934,
                "title": "faster-than-100-without-map-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n    vector<vector<bool>> v(10,vector<bool>(3));\\n    int index=-1;\\n    for(auto i: rings){\\n        if(i==\\'R\\')\\n            index=0;\\n        else if(i==\\'B\\')\\n            index=1;\\n        else if(i==\\'G\\')\\n            index=2;\\n        else\\n            v[i-\\'0\\'][index]=true;\\n        \\n    }\\n    int count=0;\\n    for(int i=0;i<10;i++){\\n        if(v[i][0] && v[i][1] && v[i][2])\\n            count++;\\n    }\\n    return count;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n    vector<vector<bool>> v(10,vector<bool>(3));\\n    int index=-1;\\n    for(auto i: rings){\\n        if(i==\\'R\\')\\n            index=0;\\n        else if(i==\\'B\\')\\n            index=1;\\n        else if(i==\\'G\\')\\n            index=2;\\n        else\\n            v[i-\\'0\\'][index]=true;\\n        \\n    }\\n    int count=0;\\n    for(int i=0;i<10;i++){\\n        if(v[i][0] && v[i][1] && v[i][2])\\n            count++;\\n    }\\n    return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2570849,
                "title": "simple-python3-solution",
                "content": "if it is helpful ***UPVOTE*** me\\n\\n``` \\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        d = dict()\\n        ct = 0\\n        l = 0\\n        r=1\\n        while r<len(rings):\\n            if rings[r] in d:\\n                d[rings[r]].add(rings[l])\\n            else:\\n                d[rings[r]] = set()\\n                d[rings[r]].add(rings[l])\\n                \\n            l=r+1\\n            r+=2\\n            \\n        for i in d:\\n            if len(d[i]) == 3:\\n                ct+=1\\n                \\n        return ct\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "``` \\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        d = dict()\\n        ct = 0\\n        l = 0\\n        r=1\\n        while r<len(rings):\\n            if rings[r] in d:\\n                d[rings[r]].add(rings[l])\\n            else:\\n                d[rings[r]] = set()\\n                d[rings[r]].add(rings[l])\\n                \\n            l=r+1\\n            r+=2\\n            \\n        for i in d:\\n            if len(d[i]) == 3:\\n                ct+=1\\n                \\n        return ct\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2563788,
                "title": "3-lines-of-code-0ms-100-faster-easy",
                "content": "**2103. Rings and Rods solution:** \\n.\\n.\\n**In Java  :**\\n```\\nclass Solution {\\n\\tpublic int countPoints(String rings) {\\n\\t\\tint ans = 0;\\n\\t\\tfor(int i=0;i<10;i++)  if(rings.contains(\"R\"+String.valueOf(i)) && rings.contains(\"G\"+String.valueOf(i)) && rings.contains(\"B\"+String.valueOf(i))) ans ++;\\n\\t\\treturn ans;\\n\\t}\\n}\\n```\\n***In simple ways what for loop in code do***\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int ans = 0;\\n        \\n        if(rings.contains(\"B0\") && rings.contains(\"R0\") && rings.contains(\"G0\")) ans++;\\n        if(rings.contains(\"B1\") && rings.contains(\"R1\") && rings.contains(\"G1\")) ans++;\\n        if(rings.contains(\"B2\") && rings.contains(\"R2\") && rings.contains(\"G2\")) ans++;\\n        if(rings.contains(\"B3\") && rings.contains(\"R3\") && rings.contains(\"G3\")) ans++;\\n        if(rings.contains(\"B4\") && rings.contains(\"R4\") && rings.contains(\"G4\")) ans++;\\n        if(rings.contains(\"B5\") && rings.contains(\"R5\") && rings.contains(\"G5\")) ans++;\\n        if(rings.contains(\"B6\") && rings.contains(\"R6\") && rings.contains(\"G6\")) ans++;\\n        if(rings.contains(\"B7\") && rings.contains(\"R7\") && rings.contains(\"G7\")) ans++;\\n        if(rings.contains(\"B8\") && rings.contains(\"R8\") && rings.contains(\"G8\")) ans++;\\n        if(rings.contains(\"B9\") && rings.contains(\"R9\") && rings.contains(\"G9\")) ans++;\\n        \\n        return ans;\\n    }\\n}\\n```\\n.\\n.\\n\\n\\n**Runtime**: **0 ms**, **faster** than **100.00%** of Java online submissions for Rings and Rods.\\n**Memory Usage**: 40.3 MB, less than **94.03%** of Java online submissions for Rings and Rods.\\n.\\n.\\n\\n### **Happy Coding** \\uD83D\\uDE0A!!!\\n### If you get value from this, then show some love by ***upvoting*** it !!\\n",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n\\tpublic int countPoints(String rings) {\\n\\t\\tint ans = 0;\\n\\t\\tfor(int i=0;i<10;i++)  if(rings.contains(\"R\"+String.valueOf(i)) && rings.contains(\"G\"+String.valueOf(i)) && rings.contains(\"B\"+String.valueOf(i))) ans ++;\\n\\t\\treturn ans;\\n\\t}\\n}\\n```\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int ans = 0;\\n        \\n        if(rings.contains(\"B0\") && rings.contains(\"R0\") && rings.contains(\"G0\")) ans++;\\n        if(rings.contains(\"B1\") && rings.contains(\"R1\") && rings.contains(\"G1\")) ans++;\\n        if(rings.contains(\"B2\") && rings.contains(\"R2\") && rings.contains(\"G2\")) ans++;\\n        if(rings.contains(\"B3\") && rings.contains(\"R3\") && rings.contains(\"G3\")) ans++;\\n        if(rings.contains(\"B4\") && rings.contains(\"R4\") && rings.contains(\"G4\")) ans++;\\n        if(rings.contains(\"B5\") && rings.contains(\"R5\") && rings.contains(\"G5\")) ans++;\\n        if(rings.contains(\"B6\") && rings.contains(\"R6\") && rings.contains(\"G6\")) ans++;\\n        if(rings.contains(\"B7\") && rings.contains(\"R7\") && rings.contains(\"G7\")) ans++;\\n        if(rings.contains(\"B8\") && rings.contains(\"R8\") && rings.contains(\"G8\")) ans++;\\n        if(rings.contains(\"B9\") && rings.contains(\"R9\") && rings.contains(\"G9\")) ans++;\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2544891,
                "title": "simple-python-solution",
                "content": "Any **Suggestions** or **Doubts?**, put in comments\\n```\\n    def countPoints(self, rings):\\n        dic, ans = {}, 0\\n        for i in range(0, len(rings), 2):\\n            if rings[i+1] not in dic: \\n                dic[rings[i+1]] = [rings[i]]\\n            else: \\n                dic[rings[i+1]].append(rings[i])\\n        for rod in dic:\\n            if \\'G\\' in dic[rod] and \\'B\\' in dic[rod] and \\'R\\' in dic[rod]: \\n                ans += 1\\n        return ans\\n```\\n**UpVote :)**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def countPoints(self, rings):\\n        dic, ans = {}, 0\\n        for i in range(0, len(rings), 2):\\n            if rings[i+1] not in dic: \\n                dic[rings[i+1]] = [rings[i]]\\n            else: \\n                dic[rings[i+1]].append(rings[i])\\n        for rod in dic:\\n            if \\'G\\' in dic[rod] and \\'B\\' in dic[rod] and \\'R\\' in dic[rod]: \\n                ans += 1\\n        return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2510638,
                "title": "100-faster-easy-to-understand-java-code",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int count = 0;\\n        int[] red = new int[10];\\n       int[] blue = new int[10];\\n        int[] green = new int[10];\\n      \\n        for(int i=0; i<rings.length(); i+=2){\\n            int ix=rings.charAt(i+1)-\\'0\\';\\n            if(rings.charAt(i) == \\'R\\'){\\n                red[ix]++;\\n            }\\n    if(rings.charAt(i) == \\'G\\'){\\n                green[ix]++;\\n            }\\n      if(rings.charAt(i) == \\'B\\'){\\n                blue[ix]++;\\n            }\\n            \\n        }\\n       \\n      for(int i=0; i<10; i++){\\n            if(red[i] != 0 && blue[i] != 0 && green[i] != 0){\\n                count++;\\n            }\\n        }\\n\\t\\t\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int count = 0;\\n        int[] red = new int[10];\\n       int[] blue = new int[10];\\n        int[] green = new int[10];\\n      \\n        for(int i=0; i<rings.length(); i+=2){\\n            int ix=rings.charAt(i+1)-\\'0\\';\\n            if(rings.charAt(i) == \\'R\\'){\\n                red[ix]++;\\n            }\\n    if(rings.charAt(i) == \\'G\\'){\\n                green[ix]++;\\n            }\\n      if(rings.charAt(i) == \\'B\\'){\\n                blue[ix]++;\\n            }\\n            \\n        }\\n       \\n      for(int i=0; i<10; i++){\\n            if(red[i] != 0 && blue[i] != 0 && green[i] != 0){\\n                count++;\\n            }\\n        }\\n\\t\\t\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2478896,
                "title": "python-simple-solution-using-defaultdict",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        count = 0\\n        dic = collections.defaultdict(set)\\n        for i in range(1,len(rings),2):\\n            dic[rings[i]].add(rings[i-1])\\n        for k,v in dic.items():\\n            if len(v) == 3:\\n                count += 1\\n        return count\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        count = 0\\n        dic = collections.defaultdict(set)\\n        for i in range(1,len(rings),2):\\n            dic[rings[i]].add(rings[i-1])\\n        for k,v in dic.items():\\n            if len(v) == 3:\\n                count += 1\\n        return count\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2450221,
                "title": "easiest-solution-by-hashmap-in-javascript-got-52ms",
                "content": "```\\nvar countPoints = function(rings) {\\n    let hash = {};\\n    let count = 0;\\n    \\n    for(let i=0; i<rings.length; i+=2){\\n        \\n        let temp = rings[i]+rings[i+1];\\n        let temp2 = rings[i+1];\\n        \\n        if(!hash[temp]){\\n            hash[temp] = 1;\\n            \\n            if(hash[\"R\"+temp2] && hash[\"G\"+temp2] && hash[\"B\"+temp2]){\\n                count++;\\n            }\\n        }\\n    }\\n    return count;\\n};\\n```\\n![image](https://assets.leetcode.com/users/images/b68cf593-f123-4ec8-957b-e676d53d0881_1660931653.0914195.png)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPoints = function(rings) {\\n    let hash = {};\\n    let count = 0;\\n    \\n    for(let i=0; i<rings.length; i+=2){\\n        \\n        let temp = rings[i]+rings[i+1];\\n        let temp2 = rings[i+1];\\n        \\n        if(!hash[temp]){\\n            hash[temp] = 1;\\n            \\n            if(hash[\"R\"+temp2] && hash[\"G\"+temp2] && hash[\"B\"+temp2]){\\n                count++;\\n            }\\n        }\\n    }\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2386743,
                "title": "java-solution-using-hashmap-and-hashset",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        HashMap<Character,HashSet<Character>> hm=new HashMap<>();\\n        int res=0;\\n        for(int i=0;i<rings.length()-1;i+=2)\\n        {\\n            char color=rings.charAt(i);\\n            char rod=rings.charAt(i+1);\\n            if(hm.containsKey(rod))\\n            {\\n                HashSet<Character> hs=hm.get(rod);\\n                hs.add(color);\\n                hm.put(rod,hs);\\n            }\\n            else\\n            {\\n                HashSet<Character> hs=new HashSet<>();\\n                hs.add(color);\\n                hm.put(rod,hs);\\n            }\\n        }\\n        for(char c : hm.keySet())\\n        {\\n            HashSet<Character> hs=hm.get(c);\\n            if(hs.size()==3)\\n            {\\n                res++;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```\\n\\n**Please upvote if it helps**\\n**Happy Coding : )**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        HashMap<Character,HashSet<Character>> hm=new HashMap<>();\\n        int res=0;\\n        for(int i=0;i<rings.length()-1;i+=2)\\n        {\\n            char color=rings.charAt(i);\\n            char rod=rings.charAt(i+1);\\n            if(hm.containsKey(rod))\\n            {\\n                HashSet<Character> hs=hm.get(rod);\\n                hs.add(color);\\n                hm.put(rod,hs);\\n            }\\n            else\\n            {\\n                HashSet<Character> hs=new HashSet<>();\\n                hs.add(color);\\n                hm.put(rod,hs);\\n            }\\n        }\\n        for(char c : hm.keySet())\\n        {\\n            HashSet<Character> hs=hm.get(c);\\n            if(hs.size()==3)\\n            {\\n                res++;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2339945,
                "title": "c-solution-100-faster-solution-no-set-no-maps",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        \\n        int r[10]={0}, g[10]={0}, b[10]={0};\\n        int ans =0;\\n        int n = rings.size();\\n        \\n        for(int i=1; i<n; i += 2){\\n            if(rings[i-1] == \\'B\\'){\\n                b[rings[i]-\\'0\\']++;\\n            }\\n            else if(rings[i-1] == \\'G\\'){\\n                g[rings[i]-\\'0\\']++;\\n            }\\n            else if(rings[i-1] == \\'R\\'){\\n                r[rings[i]-\\'0\\']++;\\n            }\\n        }\\n        for(int i=0; i<10; i++){\\n            if(r[i]>0 && b[i]>0 && g[i]>0){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        \\n        int r[10]={0}, g[10]={0}, b[10]={0};\\n        int ans =0;\\n        int n = rings.size();\\n        \\n        for(int i=1; i<n; i += 2){\\n            if(rings[i-1] == \\'B\\'){\\n                b[rings[i]-\\'0\\']++;\\n            }\\n            else if(rings[i-1] == \\'G\\'){\\n                g[rings[i]-\\'0\\']++;\\n            }\\n            else if(rings[i-1] == \\'R\\'){\\n                r[rings[i]-\\'0\\']++;\\n            }\\n        }\\n        for(int i=0; i<10; i++){\\n            if(r[i]>0 && b[i]>0 && g[i]>0){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2030291,
                "title": "easy-hashmap-hashset-solution",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int count = 0;\\n        if(rings.length() == 0)\\n            return count;\\n        \\n        HashMap<Integer, HashSet<Character>> map = new HashMap<>();\\n        \\n        for(int i=0;i<rings.length();){\\n            \\n            Integer ringNo = Character.getNumericValue(rings.charAt(i+1));\\n            Character color = rings.charAt(i);\\n            \\n            if(!map.containsKey(ringNo))\\n            {\\n                map.put(ringNo, new HashSet<Character>());\\n                map.get(ringNo).add(color);\\n            }\\n            else\\n                map.get(ringNo).add(color);\\n            \\n            i = i+2;\\n        }\\n        \\n        for(HashSet<Character> set: map.values()){\\n            \\n            if(set.size() == 3)\\n                count++;\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int count = 0;\\n        if(rings.length() == 0)\\n            return count;\\n        \\n        HashMap<Integer, HashSet<Character>> map = new HashMap<>();\\n        \\n        for(int i=0;i<rings.length();){\\n            \\n            Integer ringNo = Character.getNumericValue(rings.charAt(i+1));\\n            Character color = rings.charAt(i);\\n            \\n            if(!map.containsKey(ringNo))\\n            {\\n                map.put(ringNo, new HashSet<Character>());\\n                map.get(ringNo).add(color);\\n            }\\n            else\\n                map.get(ringNo).add(color);\\n            \\n            i = i+2;\\n        }\\n        \\n        for(HashSet<Character> set: map.values()){\\n            \\n            if(set.size() == 3)\\n                count++;\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1935464,
                "title": "0-ms-faster-than-100-java-submissions",
                "content": "****Please upvote if you like this solution****\\n\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        boolean[] red = new boolean[10];\\n        boolean[] blue = new boolean[10];\\n        boolean[] green = new boolean[10];\\n        boolean check;\\n        char ch;\\n        int pos, countRod = 0;\\n\\n        for (int i = 0; i < rings.length(); i++) {\\n            ch = rings.charAt(i);\\n            if (ch == \\'R\\') {\\n                pos = rings.charAt(i + 1) - \\'0\\';\\n                red[pos] = true;\\n            }\\n            else if(ch == \\'G\\') {\\n                pos = rings.charAt(i + 1) - \\'0\\';\\n                green[pos] = true;\\n            }\\n            else if(ch == \\'B\\') {\\n                pos = rings.charAt(i + 1) - \\'0\\';\\n                blue[pos] = true;\\n            }\\n            i++;\\n        }\\n\\n        for (int i = 0; i < 10; i++) {\\n            check = (red[i]) && (blue[i]) && (green[i]);\\n            if (check) {\\n                countRod ++;\\n            }\\n        }\\n        return countRod;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        boolean[] red = new boolean[10];\\n        boolean[] blue = new boolean[10];\\n        boolean[] green = new boolean[10];\\n        boolean check;\\n        char ch;\\n        int pos, countRod = 0;\\n\\n        for (int i = 0; i < rings.length(); i++) {\\n            ch = rings.charAt(i);\\n            if (ch == \\'R\\') {\\n                pos = rings.charAt(i + 1) - \\'0\\';\\n                red[pos] = true;\\n            }\\n            else if(ch == \\'G\\') {\\n                pos = rings.charAt(i + 1) - \\'0\\';\\n                green[pos] = true;\\n            }\\n            else if(ch == \\'B\\') {\\n                pos = rings.charAt(i + 1) - \\'0\\';\\n                blue[pos] = true;\\n            }\\n            i++;\\n        }\\n\\n        for (int i = 0; i < 10; i++) {\\n            check = (red[i]) && (blue[i]) && (green[i]);\\n            if (check) {\\n                countRod ++;\\n            }\\n        }\\n        return countRod;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1919893,
                "title": "c-solution-faster-than-100-array-frequency-method",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int arr[10][3] = {0};\\n        int count=0;\\n        for(int i = 0; i<rings.length() ;i+=2){\\n            if(rings[i] == \\'R\\'){\\n                arr[rings[i+1]-\\'0\\'][0]++;\\n            }\\n            if(rings[i] == \\'G\\'){\\n                arr[rings[i+1]-\\'0\\'][1]++;\\n            }\\n            if(rings[i] == \\'B\\'){\\n                arr[rings[i+1]-\\'0\\'][2]++;\\n            }\\n            \\n        }\\n        \\n        for(int i = 0; i<10;i++){\\n            if(arr[i][0] >0 && arr[i][1] >0 &&arr[i][2] >0){\\n                count++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Array",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int arr[10][3] = {0}",
                "codeTag": "Java"
            },
            {
                "id": 1882465,
                "title": "python-beginners-solution",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        r = []\\n        g = []\\n        b = []\\n        ring_nums = set()\\n        count = 0\\n        for i in range(0, len(rings)):\\n            if rings[i] == \\'R\\':\\n                r.append(int(rings[i+1]))\\n                if rings[i+1] not in ring_nums:\\n                    ring_nums.add(int(rings[i+1]))\\n            elif rings[i] == \\'G\\':\\n                g.append(int(rings[i+1]))\\n                if rings[i+1] not in ring_nums:\\n                    ring_nums.add(int(rings[i+1]))\\n            elif rings[i] == \\'B\\':\\n                b.append(int(rings[i+1]))\\n                if rings[i+1] not in ring_nums:\\n                    ring_nums.add(int(rings[i+1]))\\n        for i in ring_nums:\\n            if i in r and i in g and i in b:\\n                count += 1\\n        return count",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        r = []\\n        g = []\\n        b = []\\n        ring_nums = set()\\n        count = 0\\n        for i in range(0, len(rings)):\\n            if rings[i] == \\'R\\':\\n                r.append(int(rings[i+1]))\\n                if rings[i+1] not in ring_nums:\\n                    ring_nums.add(int(rings[i+1]))\\n            elif rings[i] == \\'G\\':\\n                g.append(int(rings[i+1]))\\n                if rings[i+1] not in ring_nums:\\n                    ring_nums.add(int(rings[i+1]))\\n            elif rings[i] == \\'B\\':\\n                b.append(int(rings[i+1]))\\n                if rings[i+1] not in ring_nums:\\n                    ring_nums.add(int(rings[i+1]))\\n        for i in ring_nums:\\n            if i in r and i in g and i in b:\\n                count += 1\\n        return count",
                "codeTag": "Java"
            },
            {
                "id": 1868222,
                "title": "faster-than-100-submission-c",
                "content": "\\n\\nclass Solution {\\npublic:\\n    int countPoints(string r) {\\n        unordered_map<char,set<char>> m;\\n        for(int i=0;i<r.size();i=i+2)\\n        {\\n            m[r[i+1]].insert(r[i]);\\n        }\\n        int c=0;\\n        for(auto it:m){\\n           if(it.second.size()==3)\\n               c++;\\n        }\\n        return c;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int countPoints(string r) {\\n        unordered_map<char,set<char>> m;\\n        for(int i=0;i<r.size();i=i+2)\\n        {\\n            m[r[i+1]].insert(r[i]);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1865225,
                "title": "python3-bit-maipulation-solution-short-and-clean",
                "content": "Using OR operator to get unique value for every rod\\n\\n```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        rods = [0] * 10\\n        rings_len = len(rings)\\n        \\n        for i in range(0, rings_len-1, 2):\\n            color = rings[i:i+1]\\n            pos = int(rings[i+1:i+2])\\n            rods[pos] |= 1 if color == \\'R\\' else (2 if color == \\'G\\' else 4)\\n         \\n        return sum(rod == 7 for rod in rods)\\n```",
                "solutionTags": [
                    "Python",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        rods = [0] * 10\\n        rings_len = len(rings)\\n        \\n        for i in range(0, rings_len-1, 2):\\n            color = rings[i:i+1]\\n            pos = int(rings[i+1:i+2])\\n            rods[pos] |= 1 if color == \\'R\\' else (2 if color == \\'G\\' else 4)\\n         \\n        return sum(rod == 7 for rod in rods)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1759572,
                "title": "simple-c-solution-runtime-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        bool arr[10][3]={};int ans=0;\\n        for(int i=1;i<rings.size();i+=2){\\n            if(rings[i-1]==\\'R\\')\\n            arr[rings[i]-\\'0\\'][0]=true;\\n            if(rings[i-1]==\\'G\\')\\n            arr[rings[i]-\\'0\\'][1]=true;\\n            if(rings[i-1]==\\'B\\')\\n            arr[rings[i]-\\'0\\'][2]=true;\\n        }\\n        for(int i=0;i<10;i++)\\n            ans+=arr[i][0]&&arr[i][1]&&arr[i][2];\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        bool arr[10][3]={};int ans=0;\\n        for(int i=1;i<rings.size();i+=2){\\n            if(rings[i-1]==\\'R\\')\\n            arr[rings[i]-\\'0\\'][0]=true;\\n            if(rings[i-1]==\\'G\\')\\n            arr[rings[i]-\\'0\\'][1]=true;\\n            if(rings[i-1]==\\'B\\')\\n            arr[rings[i]-\\'0\\'][2]=true;\\n        }\\n        for(int i=0;i<10;i++)\\n            ans+=arr[i][0]&&arr[i][1]&&arr[i][2];\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1690898,
                "title": "beginner-friendly-javascript-solution",
                "content": "**Time Complexity : O(n)**\\n```\\n/**\\n * @param {string} rings\\n * @return {number}\\n */\\nvar countPoints = function(rings) {\\n    var r = new Array(10).fill(0);\\n    var b = new Array(10).fill(0);\\n    var g = new Array(10).fill(0);\\n    for(let i=0; i<rings.length; i+=2){\\n        let a = rings[i+1] - \\'0\\';\\n        if(rings[i] == \\'R\\'){\\n            r[a]++;\\n        }\\n        if(rings[i] == \\'G\\'){\\n            g[a]++;\\n        }\\n        if(rings[i] == \\'B\\'){\\n            b[a]++;\\n        }\\n    }\\n    \\n    let count = 0;\\n    for(let i=0; i<10; i++){\\n        if(r[i] != 0 && b[i] != 0 && g[i] != 0){\\n            count++;\\n        }\\n    }\\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} rings\\n * @return {number}\\n */\\nvar countPoints = function(rings) {\\n    var r = new Array(10).fill(0);\\n    var b = new Array(10).fill(0);\\n    var g = new Array(10).fill(0);\\n    for(let i=0; i<rings.length; i+=2){\\n        let a = rings[i+1] - \\'0\\';\\n        if(rings[i] == \\'R\\'){\\n            r[a]++;\\n        }\\n        if(rings[i] == \\'G\\'){\\n            g[a]++;\\n        }\\n        if(rings[i] == \\'B\\'){\\n            b[a]++;\\n        }\\n    }\\n    \\n    let count = 0;\\n    for(let i=0; i<10; i++){\\n        if(r[i] != 0 && b[i] != 0 && g[i] != 0){\\n            count++;\\n        }\\n    }\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1640235,
                "title": "c-bitmask-solutions-explained-100-time-0ms-96-space-6-2mb",
                "content": "Nice sweet problem to crack something as a snack :)\\n\\nOur approach will be to tackle the provided input string\\'s characters in pairs, and accordingly mark an array of ints (chars might have been even more efficient) holding a bitmask of each colour being there or not, following the following convention:\\n\\n```cpp\\n\\'R\\' == 1 // 001\\n\\'G\\' == 2 // 010\\n\\'B\\' == 4 // 100\\n```\\nSo, for example,  a cell holding both red `\\'R\\'` and `\\'B\\'` will have a value of `5` (`101` in binary).\\n\\nNow, to do so we will first of all start with a few support variables:\\n* `res` is our accumulator variable, set initially to `0`;\\n* `rods` is our array of bitmasks, with `10` slots as stated in the problem, all preset to be `0`.\\n\\nWe will then parse `rings` in all its length with the pointer `i` that will jump by `2` positions at a time and:\\n* assign the right value to `col` the first value of the pair (`rings[i]`);\\n* go to the matching cell of `rods`, namely `rings[i + 1] - \\'0\\'`;\\n* write there the matching value, depending on the first value of the pair (`col`), as explained above and ORing to the current value.\\n\\nOnce done, we will just go through all the cells in `rods`, find the ones with a value of `7` (`111` in binary, which implies all the colours are present there) and increase `res` at each such occurrence.\\n\\nFinally, we can just `return` `res` :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        // support variables\\n        int res = 0, rods[10] = {};\\n        // populating rods\\n        for (int i = 0, lmt = rings.size(), col; i < lmt; i += 2) {\\n            col = rings[i];\\n            rods[rings[i + 1] - \\'0\\'] |= (col == \\'R\\' ? 1 : col == \\'G\\' ? 2 : 4);\\n        }\\n        // checking the final values in rods\\n        for (int n: rods) res += n == 7;\\n        return res;\\n    }\\n};\\n```\\n\\nMicro-optimised version just for fun, do not bother doing this in an interview, not to be taken as rabid loonies \\uD83D\\uDE09 :\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        // edge case: string too short\\n        if (rings.size() < 6) return 0;\\n        // support variables\\n        int res = 0;\\n        char rods[10] = {};\\n        // populating rods\\n        for (int i = 0, lmt = rings.size(), col, pos; i < lmt; i += 2) {\\n            pos = rings[i + 1] - \\'0\\';\\n            // skipping rods already filled with 3 colours\\n            if (rods[pos] == 7) continue;\\n            col = rings[i];\\n            rods[pos] |= (col == \\'R\\' ? 1 : col == \\'G\\' ? 2 : 4);\\n            // updating res\\n            if (rods[pos] == 7) {\\n                res++;\\n                // breaking out if we already filled all the rods\\n                if (res == 10) break;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Bit Manipulation",
                    "Bitmask"
                ],
                "code": "```cpp\\n\\'R\\' == 1 // 001\\n\\'G\\' == 2 // 010\\n\\'B\\' == 4 // 100\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        // support variables\\n        int res = 0, rods[10] = {};\\n        // populating rods\\n        for (int i = 0, lmt = rings.size(), col; i < lmt; i += 2) {\\n            col = rings[i];\\n            rods[rings[i + 1] - \\'0\\'] |= (col == \\'R\\' ? 1 : col == \\'G\\' ? 2 : 4);\\n        }\\n        // checking the final values in rods\\n        for (int n: rods) res += n == 7;\\n        return res;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        // edge case: string too short\\n        if (rings.size() < 6) return 0;\\n        // support variables\\n        int res = 0;\\n        char rods[10] = {};\\n        // populating rods\\n        for (int i = 0, lmt = rings.size(), col, pos; i < lmt; i += 2) {\\n            pos = rings[i + 1] - \\'0\\';\\n            // skipping rods already filled with 3 colours\\n            if (rods[pos] == 7) continue;\\n            col = rings[i];\\n            rods[pos] |= (col == \\'R\\' ? 1 : col == \\'G\\' ? 2 : 4);\\n            // updating res\\n            if (rods[pos] == 7) {\\n                res++;\\n                // breaking out if we already filled all the rods\\n                if (res == 10) break;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1639086,
                "title": "c-solution-simple-sets",
                "content": "class Solution {\\npublic:\\n    int countPoints(string rings) {\\n        set<int>g,b,r;\\n        int res=0;\\n        int n=rings.size();\\n        for(int i=0;i<n;i+=2)\\n        {\\n            if(rings[i]==\\'B\\')\\n                b.insert(rings[i+1]-\\'0\\');\\n            else if(rings[i]==\\'R\\')\\n                r.insert(rings[i+1]-\\'0\\');\\n            else\\n                g.insert(rings[i+1]-\\'0\\');\\n        }\\n        for(int i=0;i<10;i++)\\n        {\\n            if(b.count(i) && (r.count(i) && g.count(i)))\\n                res++;\\n        }\\n        return res;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "class Solution {\\npublic:\\n    int countPoints(string rings) {\\n        set<int>g,b,r;\\n        int res=0;\\n        int n=rings.size();\\n        for(int i=0;i<n;i+=2)\\n        {\\n            if(rings[i]==\\'B\\')\\n                b.insert(rings[i+1]-\\'0\\');\\n            else if(rings[i]==\\'R\\')\\n                r.insert(rings[i+1]-\\'0\\');\\n            else\\n                g.insert(rings[i+1]-\\'0\\');\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1628040,
                "title": "c-56ms-arrays-or-64ms-linq",
                "content": "\\n```\\n    public int CountPoints(string rings) {\\n                \\n        var rods = new int[10];\\n        var RGB = new int[\\'R\\'-\\'B\\' + 1];\\n        RGB[\\'R\\'-\\'B\\'] = 1;\\n        RGB[\\'G\\'-\\'B\\'] = 2;\\n        RGB[\\'B\\'-\\'B\\'] = 4;\\n        for(int i = 0; i < rings.Length; i+= 2){\\n            rods[rings[i+1]-\\'0\\'] |= RGB[rings[i]-\\'B\\'];\\n        }\\n            \\n        // not as fast\\n        //return rods.Count(x => x == 7);\\n        \\n        int count = 0;\\n        for(int i = 0; i < rods.Length; i++){\\n            if(rods[i] == 7) count++;\\n        }\\n        return count;\\n        \\n    }\\n```\\n\\n\\nLINQ   64ms.\\n\\n```\\n    public int CountPoints(string rings) {\\n        return Enumerable\\n            .Range(0, rings.Length / 2)\\n            .Select(x => rings.Substring(2 * x, 2))\\n            .Distinct()\\n            .GroupBy(x => x[1])\\t\\t\\t\\n            .Count(g => g.Count() == 3);\\n    }\\n```\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\n    public int CountPoints(string rings) {\\n                \\n        var rods = new int[10];\\n        var RGB = new int[\\'R\\'-\\'B\\' + 1];\\n        RGB[\\'R\\'-\\'B\\'] = 1;\\n        RGB[\\'G\\'-\\'B\\'] = 2;\\n        RGB[\\'B\\'-\\'B\\'] = 4;\\n        for(int i = 0; i < rings.Length; i+= 2){\\n            rods[rings[i+1]-\\'0\\'] |= RGB[rings[i]-\\'B\\'];\\n        }\\n            \\n        // not as fast\\n        //return rods.Count(x => x == 7);\\n        \\n        int count = 0;\\n        for(int i = 0; i < rods.Length; i++){\\n            if(rods[i] == 7) count++;\\n        }\\n        return count;\\n        \\n    }\\n```\n```\\n    public int CountPoints(string rings) {\\n        return Enumerable\\n            .Range(0, rings.Length / 2)\\n            .Select(x => rings.Substring(2 * x, 2))\\n            .Distinct()\\n            .GroupBy(x => x[1])\\t\\t\\t\\n            .Count(g => g.Count() == 3);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1624237,
                "title": "c-short-and-concise-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        unordered_map<char,set<char>> mp;\\n        for(int i=1;i<rings.size();i+=2)\\n        {\\n            mp[rings[i]].insert(rings[i-1]);\\n        }\\n        int c=0;\\n        for(auto pr:mp)\\n        {\\n            if(pr.second.size()==3)\\n            c++;\\n        }\\n        return c;\\n    }\\n};\\n```\\n**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community). HAPPY CODING:)\\nAny suggestions and improvements are always welcome**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        unordered_map<char,set<char>> mp;\\n        for(int i=1;i<rings.size();i+=2)\\n        {\\n            mp[rings[i]].insert(rings[i-1]);\\n        }\\n        int c=0;\\n        for(auto pr:mp)\\n        {\\n            if(pr.second.size()==3)\\n            c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1624227,
                "title": "simple-solution",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        Set<Integer> red = new HashSet<>();\\n        Set<Integer> blue = new HashSet<>();\\n        Set<Integer> green = new HashSet<>();\\n        for(int i=0;i<rings.length();i=i+2){\\n            char color = rings.charAt(i);\\n            int position = rings.charAt(i+1)-\\'0\\';\\n            if(color==\\'R\\') red.add(position);\\n            else if(color==\\'B\\') blue.add(position);\\n            else green.add(position);\\n        }\\n        red.retainAll(blue);\\n        red.retainAll(green);\\n        return red.size();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        Set<Integer> red = new HashSet<>();\\n        Set<Integer> blue = new HashSet<>();\\n        Set<Integer> green = new HashSet<>();\\n        for(int i=0;i<rings.length();i=i+2){\\n            char color = rings.charAt(i);\\n            int position = rings.charAt(i+1)-\\'0\\';\\n            if(color==\\'R\\') red.add(position);\\n            else if(color==\\'B\\') blue.add(position);\\n            else green.add(position);\\n        }\\n        red.retainAll(blue);\\n        red.retainAll(green);\\n        return red.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3975936,
                "title": "rings-and-rods-simple-java-solution-beats-100-users-0ms",
                "content": "# Intuition\\nBeats 100.00% users of Java ,Oms\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int R[]=new int[10];\\n        int B[]=new int[10];\\n        int G[]=new int[10];\\n        int out=0;\\n        for(int i=0;i<rings.length();i+=2){\\n            int index=(int)(rings.charAt(i+1))-48;\\n            if(rings.charAt(i)==\\'R\\')\\n                R[index]+=1;\\n            else if(rings.charAt(i)==\\'B\\')\\n                B[index]+=1;\\n            else\\n                G[index]+=1;\\n        }\\n        for(int i=0;i<=9;i++){\\n            if(R[i]>0 && G[i]>0 && B[i]>0){\\n                out++;\\n            }\\n        }\\n        return out;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int R[]=new int[10];\\n        int B[]=new int[10];\\n        int G[]=new int[10];\\n        int out=0;\\n        for(int i=0;i<rings.length();i+=2){\\n            int index=(int)(rings.charAt(i+1))-48;\\n            if(rings.charAt(i)==\\'R\\')\\n                R[index]+=1;\\n            else if(rings.charAt(i)==\\'B\\')\\n                B[index]+=1;\\n            else\\n                G[index]+=1;\\n        }\\n        for(int i=0;i<=9;i++){\\n            if(R[i]>0 && G[i]>0 && B[i]>0){\\n                out++;\\n            }\\n        }\\n        return out;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3918859,
                "title": "c-super-easy-clean-code-easy-to-grasp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int bars[10] = {0};\\n        unordered_map<char,int> mp;\\n        mp[\\'R\\'] = 0;\\n        mp[\\'G\\'] = 1;\\n        mp[\\'B\\'] = 2;\\n        int n = rings.size();\\n        for(int i=0; i<n; i+=2){\\n            int b = rings[i+1] - \\'0\\';\\n            bars[b] |= (1 << mp[rings[i]]);\\n        }\\n        int count = 0;\\n        for(int i=0; i<10; i++){\\n            if(bars[i] == 7) count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int bars[10] = {0};\\n        unordered_map<char,int> mp;\\n        mp[\\'R\\'] = 0;\\n        mp[\\'G\\'] = 1;\\n        mp[\\'B\\'] = 2;\\n        int n = rings.size();\\n        for(int i=0; i<n; i+=2){\\n            int b = rings[i+1] - \\'0\\';\\n            bars[b] |= (1 << mp[rings[i]]);\\n        }\\n        int count = 0;\\n        for(int i=0; i<10; i++){\\n            if(bars[i] == 7) count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3748448,
                "title": "simple-python-solution-beats-94-5",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        lst=[]\\n        rgb=[]\\n        count=0\\n        for i in range(1,len(rings),2):\\n            rgb=[]\\n            if rings[i] not in lst:\\n                lst.append(rings[i])\\n                for j in range(1,len(rings),2):\\n                    if rings[j]==rings[i]:\\n                        if rings[j-1]==\\'R\\':\\n                            rgb.append(rings[j-1])\\n                        if rings[j-1]==\\'G\\':\\n                            rgb.append(rings[j-1])\\n                        if rings[j-1]==\\'B\\':\\n                            rgb.append(rings[j-1])\\n                if len(set(rgb))==3:\\n                    count+=1\\n        return count\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        lst=[]\\n        rgb=[]\\n        count=0\\n        for i in range(1,len(rings),2):\\n            rgb=[]\\n            if rings[i] not in lst:\\n                lst.append(rings[i])\\n                for j in range(1,len(rings),2):\\n                    if rings[j]==rings[i]:\\n                        if rings[j-1]==\\'R\\':\\n                            rgb.append(rings[j-1])\\n                        if rings[j-1]==\\'G\\':\\n                            rgb.append(rings[j-1])\\n                        if rings[j-1]==\\'B\\':\\n                            rgb.append(rings[j-1])\\n                if len(set(rgb))==3:\\n                    count+=1\\n        return count\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3665999,
                "title": "beginner-friendly-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:o(n)\\n- Space complexity: o(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n\\n        int red_count[10]={0};\\n        int blue_count[10]={0};\\n        int green_count[10]={0};\\n\\n        for(int i=0;i < rings.size();i +=2){\\n            char color = rings[i];\\n            int index= rings[i+1] -\\'0\\';\\n            if (color == \\'R\\')\\n            red_count[index]++;\\n            else if(color== \\'G\\')\\n            green_count[index]++;\\n            else if(color== \\'B\\')\\n            blue_count[index]++;\\n        }\\n\\n        int count=0;\\n        for(int i=0;i<10;i++){\\n            if(red_count[i]>0 && blue_count[i]>0 && green_count[i]>0)\\n            count++;\\n        }\\n        return count;\\n\\n    \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n\\n        int red_count[10]={0};\\n        int blue_count[10]={0};\\n        int green_count[10]={0};\\n\\n        for(int i=0;i < rings.size();i +=2){\\n            char color = rings[i];\\n            int index= rings[i+1] -\\'0\\';\\n            if (color == \\'R\\')\\n            red_count[index]++;\\n            else if(color== \\'G\\')\\n            green_count[index]++;\\n            else if(color== \\'B\\')\\n            blue_count[index]++;\\n        }\\n\\n        int count=0;\\n        for(int i=0;i<10;i++){\\n            if(red_count[i]>0 && blue_count[i]>0 && green_count[i]>0)\\n            count++;\\n        }\\n        return count;\\n\\n    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3555156,
                "title": "noob-friendly-approach-hashmap",
                "content": "# Approach\\nBy Storing it as single key and Multiple Values in HashMap\\n\\n# Complexity\\n- Time complexity:\\n> The overall time complexity of the given   program can be approximated as O(n + m), where n is the length of the input string rings and m is the number of key-value pairs in the HashMap h.\\n\\n\\n- Space complexity:\\n> The overall space complexity of the given program can be approximated as O(k + n), where k is the number of distinct keys in the HashMap and n is the length of the input string rings.\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        Map<Integer,Set<Character>> h= new HashMap<>();\\n        for(int i=0;i<rings.length();i+=2) {\\n            Set<Character> val;\\n            if(h.containsKey(rings.charAt(i+1)-\\'0\\')) {\\n                val = h.get(rings.charAt(i+1)-\\'0\\');\\n            } else {\\n                val = new HashSet<>();\\n            }\\n            val.add(rings.charAt(i));\\n            h.put(rings.charAt(i+1)-\\'0\\',val);\\n        }\\n        int count=0;\\n        for(Map.Entry<Integer,Set<Character>> entry : h.entrySet()) {\\n            if(entry.getValue().size() == 3) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        Map<Integer,Set<Character>> h= new HashMap<>();\\n        for(int i=0;i<rings.length();i+=2) {\\n            Set<Character> val;\\n            if(h.containsKey(rings.charAt(i+1)-\\'0\\')) {\\n                val = h.get(rings.charAt(i+1)-\\'0\\');\\n            } else {\\n                val = new HashSet<>();\\n            }\\n            val.add(rings.charAt(i));\\n            h.put(rings.charAt(i+1)-\\'0\\',val);\\n        }\\n        int count=0;\\n        for(Map.Entry<Integer,Set<Character>> entry : h.entrySet()) {\\n            if(entry.getValue().size() == 3) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3363630,
                "title": "c-solution-beats-100-runtime-0ms",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n\\n    int red_count[10] = {0};\\n    int green_count[10] = {0};\\n    int blue_count[10] = {0};\\n    for (int i = 0; i < rings.size(); i += 2)\\n    {\\n        char color = rings[i];\\n        int index = rings[i + 1] - \\'0\\';\\n        if (color == \\'R\\')\\n            red_count[index]++;\\n        else if (color == \\'G\\')\\n            green_count[index]++;\\n        else if (color == \\'B\\')\\n            blue_count[index]++;\\n    }\\n    int count = 0;\\n    for (int i = 0; i < 10; i++)\\n        if (red_count[i] > 0 && green_count[i] > 0 && blue_count[i] > 0)\\n            count++;\\n    return count;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n\\n    int red_count[10] = {0};\\n    int green_count[10] = {0};\\n    int blue_count[10] = {0};\\n    for (int i = 0; i < rings.size(); i += 2)\\n    {\\n        char color = rings[i];\\n        int index = rings[i + 1] - \\'0\\';\\n        if (color == \\'R\\')\\n            red_count[index]++;\\n        else if (color == \\'G\\')\\n            green_count[index]++;\\n        else if (color == \\'B\\')\\n            blue_count[index]++;\\n    }\\n    int count = 0;\\n    for (int i = 0; i < 10; i++)\\n        if (red_count[i] > 0 && green_count[i] > 0 && blue_count[i] > 0)\\n            count++;\\n    return count;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3175051,
                "title": "java-beats-100-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int[][] arr = new int[10][3];\\n        for(int i = 1;i<rings.length();i+= 2){\\n            char a = rings.charAt(i-1);\\n            int b = rings.charAt(i) - \\'0\\';\\n            int j = 2;\\n            if(a == \\'R\\')\\n                j = 0;\\n            else if(a == \\'G\\')\\n                j = 1;\\n            arr[b][j] = 1;\\n        }\\n        int count = 0;\\n        for(int i = 0;i<10;i++){\\n            int sum = 0;\\n            for(int j = 0;j<3;j++){\\n                sum += arr[i][j];\\n            }\\n            if(sum == 3)\\n                count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int[][] arr = new int[10][3];\\n        for(int i = 1;i<rings.length();i+= 2){\\n            char a = rings.charAt(i-1);\\n            int b = rings.charAt(i) - \\'0\\';\\n            int j = 2;\\n            if(a == \\'R\\')\\n                j = 0;\\n            else if(a == \\'G\\')\\n                j = 1;\\n            arr[b][j] = 1;\\n        }\\n        int count = 0;\\n        for(int i = 0;i<10;i++){\\n            int sum = 0;\\n            for(int j = 0;j<3;j++){\\n                sum += arr[i][j];\\n            }\\n            if(sum == 3)\\n                count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3170812,
                "title": "java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        Set <Integer> r = new HashSet<>();\\n        Set <Integer> g = new HashSet<>();\\n        Set <Integer> b = new HashSet<>();\\n        int n = rings.length();\\n        for(int i=0;i<n;i=i+2){\\n            if(rings.charAt(i)==\\'R\\'){\\n                r.add(rings.charAt(i+1) - \\'0\\');\\n            }\\n            else if(rings.charAt(i)==\\'G\\'){\\n                g.add(rings.charAt(i+1) - \\'0\\');\\n            }\\n            else if(rings.charAt(i)==\\'B\\'){\\n                b.add(rings.charAt(i+1) - \\'0\\');\\n            }\\n        }\\n        int out =0;\\n        for(int j=0;j<n;j++){\\n            if(r.contains(j) && b.contains(j) && g.contains(j)){\\n                out++;\\n            }\\n        }\\n        return out;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        Set <Integer> r = new HashSet<>();\\n        Set <Integer> g = new HashSet<>();\\n        Set <Integer> b = new HashSet<>();\\n        int n = rings.length();\\n        for(int i=0;i<n;i=i+2){\\n            if(rings.charAt(i)==\\'R\\'){\\n                r.add(rings.charAt(i+1) - \\'0\\');\\n            }\\n            else if(rings.charAt(i)==\\'G\\'){\\n                g.add(rings.charAt(i+1) - \\'0\\');\\n            }\\n            else if(rings.charAt(i)==\\'B\\'){\\n                b.add(rings.charAt(i+1) - \\'0\\');\\n            }\\n        }\\n        int out =0;\\n        for(int j=0;j<n;j++){\\n            if(r.contains(j) && b.contains(j) && g.contains(j)){\\n                out++;\\n            }\\n        }\\n        return out;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3054339,
                "title": "c-few-lines-bitwise-or-solution-56ms-98",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int CountPoints(string rings) \\n    {\\n        var rods = new int [10];\\n\\n        for(var i=0; i < rings.Length; i+=2)\\n        {\\n            rods[rings[i+1]-\\'0\\'] |= \\n                rings[i] switch { \\'R\\' => 1, \\'G\\' => 2, _ => 4 };\\n        }\\n\\n        return rods.Count(_ => _ == 7);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int CountPoints(string rings) \\n    {\\n        var rods = new int [10];\\n\\n        for(var i=0; i < rings.Length; i+=2)\\n        {\\n            rods[rings[i+1]-\\'0\\'] |= \\n                rings[i] switch { \\'R\\' => 1, \\'G\\' => 2, _ => 4 };\\n        }\\n\\n        return rods.Count(_ => _ == 7);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3009564,
                "title": "simple-easy-to-unserstand-c-solution-100-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1) Use Set Or vector to Store Color of Each Road\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1) As here We have 10 Roads Make 10 Set of Char \\n2) Store Each Road\\'s Color Character in Respective Set.\\n3) Check How Many Set has Exactly 3 Elements. That Count is Your answer.\\n4) Note : Set Stores unique element.\\n# Complexity\\n    \\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n) \\n    n = Length Of String \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n    set<char> s[10];\\n\\n    int n = rings.length();\\n\\n    for(int i=0;i<n;i+=2)\\n    {\\n        s[rings[i+1] - \\'0\\'].insert(rings[i]);\\n    }\\n\\n    int ctr = 0;\\n\\n    for(int i=0;i<10;i++)\\n    {\\n        if(s[i].size() == 3)\\n        {\\n            ctr++;\\n        }\\n    }\\n    return ctr; \\n}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n    set<char> s[10];\\n\\n    int n = rings.length();\\n\\n    for(int i=0;i<n;i+=2)\\n    {\\n        s[rings[i+1] - \\'0\\'].insert(rings[i]);\\n    }\\n\\n    int ctr = 0;\\n\\n    for(int i=0;i<10;i++)\\n    {\\n        if(s[i].size() == 3)\\n        {\\n            ctr++;\\n        }\\n    }\\n    return ctr; \\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2972674,
                "title": "easy-java-solution-using-hashmap",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        HashMap<Character,Set<Character>> ms = new HashMap<>();\\n\\n        for(int i=1;i<rings.length();i+=2){\\n            if(!ms.containsKey(rings.charAt(i))){\\n                ms.put(rings.charAt(i),new HashSet<Character>());\\n            }\\n            ms.get(rings.charAt(i)).add(rings.charAt(i-1));\\n        }\\n        int count=0;\\n        for(char s:ms.keySet()){\\n            if(ms.get(s).size()==3)\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        HashMap<Character,Set<Character>> ms = new HashMap<>();\\n\\n        for(int i=1;i<rings.length();i+=2){\\n            if(!ms.containsKey(rings.charAt(i))){\\n                ms.put(rings.charAt(i),new HashSet<Character>());\\n            }\\n            ms.get(rings.charAt(i)).add(rings.charAt(i-1));\\n        }\\n        int count=0;\\n        for(char s:ms.keySet()){\\n            if(ms.get(s).size()==3)\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2892943,
                "title": "python3-beginner-friendly-dictionary",
                "content": "# PYTHON3 || BEGINNER-FRIENDLY || DICTIONARY\\n\\n# Code\\n```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        count=0\\n        arr=[]\\n        for i in range(0,len(rings),2):\\n            arr.append(rings[i:i+2])\\n        print(arr)\\n\\n        dicc={}\\n\\n        for j in range(len(arr)):\\n            if int(arr[j][1]) in dicc:\\n                dicc[int(arr[j][1])]+=arr[j][0]\\n            else:\\n                dicc[int(arr[j][1])]=arr[j][0]\\n        print(dicc)\\n        for k,v in dicc.items():\\n            sss=set(list(v))\\n            print(sss)\\n            if len(sss)==3:\\n                count+=1\\n            \\n        return count\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        count=0\\n        arr=[]\\n        for i in range(0,len(rings),2):\\n            arr.append(rings[i:i+2])\\n        print(arr)\\n\\n        dicc={}\\n\\n        for j in range(len(arr)):\\n            if int(arr[j][1]) in dicc:\\n                dicc[int(arr[j][1])]+=arr[j][0]\\n            else:\\n                dicc[int(arr[j][1])]=arr[j][0]\\n        print(dicc)\\n        for k,v in dicc.items():\\n            sss=set(list(v))\\n            print(sss)\\n            if len(sss)==3:\\n                count+=1\\n            \\n        return count\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2887872,
                "title": "100-beats-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n          int[] t=new int[10];\\n        Arrays.fill(t,1);\\n        for(int i=0;i<rings.length();i=i+2){\\n            char c=rings.charAt(i);\\n            int j=rings.charAt(i+1)-\\'0\\';\\n            if(c==\\'R\\'){\\n                if(t[j]%5!=0)\\n                    t[j]*=5;\\n            }\\n            else if(c==\\'G\\'){\\n                if(t[j]%7!=0)\\n                    t[j]*=7;\\n            }\\n            else if(c==\\'B\\'){\\n                if(t[j]%11!=0)\\n                    t[j]*=11;\\n            }\\n\\n        }\\n        int r=0;\\n        for(int i=0;i<10;i++){\\n           if(t[i]%5==0&&t[i]%7==0&&t[i]%11==0)\\n               r++;\\n        }\\n        return r;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n          int[] t=new int[10];\\n        Arrays.fill(t,1);\\n        for(int i=0;i<rings.length();i=i+2){\\n            char c=rings.charAt(i);\\n            int j=rings.charAt(i+1)-\\'0\\';\\n            if(c==\\'R\\'){\\n                if(t[j]%5!=0)\\n                    t[j]*=5;\\n            }\\n            else if(c==\\'G\\'){\\n                if(t[j]%7!=0)\\n                    t[j]*=7;\\n            }\\n            else if(c==\\'B\\'){\\n                if(t[j]%11!=0)\\n                    t[j]*=11;\\n            }\\n\\n        }\\n        int r=0;\\n        for(int i=0;i<10;i++){\\n           if(t[i]%5==0&&t[i]%7==0&&t[i]%11==0)\\n               r++;\\n        }\\n        return r;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2757650,
                "title": "c-faster-than-100-pairs",
                "content": "class Solution {\\npublic:\\n\\n    int countPoints(string s) {\\n       vector<pair<bool,pair<bool,bool>>>v(10);\\n        int count=0;\\n        for(int i=0;i<s.size()-1;i+=2){\\n             if(s[i]==\\'R\\')v[s[i+1]-\\'0\\'].first=1;\\n           else if(s[i]==\\'B\\')v[s[i+1]-\\'0\\'].second.first=1;\\n            else v[s[i+1]-\\'0\\'].second.second=1;\\n        }\\n        for(auto i:v){\\n       if(i.first==1&&i.second.first==1&&i.second.second==1)count++;\\n        }\\n        return count;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int countPoints(string s) {\\n       vector<pair<bool,pair<bool,bool>>>v(10);\\n        int count=0;\\n        for(int i=0;i<s.size()-1;i+=2){\\n             if(s[i]==\\'R\\')v[s[i+1]-\\'0\\'].first=1;\\n           else if(s[i]==\\'B\\')v[s[i+1]-\\'0\\'].second.first=1;\\n            else v[s[i+1]-\\'0\\'].second.second=1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2747729,
                "title": "simple-python-solution-using-hash-table",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        l=len(rings)\\n        hash_table=dict()\\n        for i in range(1,l,2):\\n            if rings[i] not in hash_table:\\n                hash_table[rings[i]]=[rings[i-1]]\\n            else:\\n                hash_table[rings[i]].append(rings[i-1])\\n                \\n        count=0\\n        # print(len(hash_table))\\n        for keys,values in hash_table.items():\\n            if len(set(values))==3:\\n                count+=1\\n        return count",
                "solutionTags": [
                    "Python",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        l=len(rings)\\n        hash_table=dict()\\n        for i in range(1,l,2):\\n            if rings[i] not in hash_table:\\n                hash_table[rings[i]]=[rings[i-1]]\\n            else:\\n                hash_table[rings[i]].append(rings[i-1])\\n                \\n        count=0\\n        # print(len(hash_table))\\n        for keys,values in hash_table.items():\\n            if len(set(values))==3:\\n                count+=1\\n        return count",
                "codeTag": "Java"
            },
            {
                "id": 2728960,
                "title": "python-direct-solution-using-dictionary",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        dic = {}\\n\\t\\t\\n        for i in range( 0 , len(rings) , 2 ):\\n            \\n            if rings[i+1] in dic :\\n                dic[rings[i+1]] += str(rings[i]) \\n            \\n            else :\\n                dic[rings[i+1]] =  str(rings[i]) \\n            \\n            \\n        goal = \\'BGR\\'\\n        res = 0\\n        for k , v in dic.items() :    \\n            \\n            if  \\'\\'.join (sorted(list(set(v)))) == goal :\\n                res += 1\\n                \\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        dic = {}\\n\\t\\t\\n        for i in range( 0 , len(rings) , 2 ):\\n            \\n            if rings[i+1] in dic :\\n                dic[rings[i+1]] += str(rings[i]) \\n            \\n            else :\\n                dic[rings[i+1]] =  str(rings[i]) \\n            \\n            \\n        goal = \\'BGR\\'\\n        res = 0\\n        for k , v in dic.items() :    \\n            \\n            if  \\'\\'.join (sorted(list(set(v)))) == goal :\\n                res += 1\\n                \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2676662,
                "title": "python-hashmap-set-99-18-faster",
                "content": "Python solution coded under test conditions in 5mins:\\n\\n```python\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        \"\"\"\\n        This solution uses a hash map and set. Firstly, we initialise hash_map as empty and \\n        count as 0, then we loop through rings, creating the ring as the [0:2] substring of\\n        rings, and evaluating if ring is in our hashmap. We store the key as the ring \\n        number and the value as a list of the colors associated with it. After this, we \\n        continue to append to the list as other color rings are added. Finally, we loop\\n        through the hash_map and take the sorted set of the values list, and check if it\\n        is equal to the sorted order of the required rings, incrementing count if True.\\n        Finally, count is returned.\\n        \\n        :param rings: the rings string to be considered. (str)\\n        :return: count: the count of rods with every color ring. (int)\\n        \"\"\"\\n        hash_map = {}\\n        count = 0\\n        \\n        while rings:\\n            ring = rings[:2]\\n            if ring[1] not in hash_map.keys():\\n                hash_map[ring[1]] = [ring[0]]\\n            else:\\n                hash_map[ring[1]].append(ring[0])\\n            rings = rings[2:]\\n        \\n        for key, value in hash_map.items():\\n            if sorted(list(set(value))) == [\"B\", \"G\", \"R\"]:\\n                count += 1\\n        return count",
                "solutionTags": [
                    "Python",
                    "Ordered Set"
                ],
                "code": "class Solution:\\n    def countPoints(self, rings: str) -> int:\\n        \"\"\"\\n        This solution uses a hash map and set. Firstly, we initialise hash_map as empty and \\n        count as 0, then we loop through rings, creating the ring as the [0:2] substring of\\n        rings, and evaluating if ring is in our hashmap. We store the key as the ring \\n        number and the value as a list of the colors associated with it. After this, we \\n        continue to append to the list as other color rings are added. Finally, we loop\\n        through the hash_map and take the sorted set of the values list, and check if it\\n        is equal to the sorted order of the required rings, incrementing count if True.\\n        Finally, count is returned.\\n        \\n        :param rings: the rings string to be considered. (str)\\n        :return: count: the count of rods with every color ring. (int)\\n        \"\"\"\\n        hash_map = {}",
                "codeTag": "Java"
            },
            {
                "id": 2594573,
                "title": "only-for-beginners-best-method-to-approach",
                "content": "**Runtime: 2 ms, faster than 57.98% of Java online submissions for Rings and Rods.\\nMemory Usage: 42 MB, less than 46.70% of Java online submissions for Rings and Rods**.\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int[][] rods = {{0,0,0},\\n                        {0,0,0},\\n                        {0,0,0},\\n                        {0,0,0},\\n                        {0,0,0},\\n                        {0,0,0},\\n                        {0,0,0},\\n                        {0,0,0},\\n                        {0,0,0},\\n                        {0,0,0}};\\n        for(int i = 0 ; i < rings.length()-1 ; i++)\\n        {\\n            if(rings.charAt(i)==\\'B\\')\\n            {\\n                checkandadd(rods,rings,i,rings.charAt(i+1));\\n                i++ ;\\n            }\\n            if(rings.charAt(i)==\\'G\\')\\n            {\\n                checkandadd(rods,rings,i,rings.charAt(i+1));\\n                i++ ;\\n            }\\n            if(rings.charAt(i)==\\'R\\')\\n            {\\n                checkandadd(rods,rings,i,rings.charAt(i+1));\\n                i++ ;\\n            }                \\n        }\\n        // System.out.println(Arrays.toString(rods));\\n        int ans = 0;\\n        for(int[] arr : rods)\\n        {\\n            int count = 0;\\n            for(int x : arr)\\n            {\\n                if(x>0)\\n                    count++ ;\\n            }\\n            if(count == 3)\\n                ans++ ;\\n            // System.out.println(Arrays.toString(arr));\\n        }\\n        return ans;\\n        \\n    }\\n    public void checkandadd(int[][] rods, String s, int x, char z)\\n    {\\n        if(s.charAt(x)==\\'B\\')\\n        {\\n            int i=Character.getNumericValue(z);\\n            rods[i][0]+=1;\\n        }\\n        if(s.charAt(x)==\\'G\\')\\n        {\\n            int i=Character.getNumericValue(z);\\n            rods[i][1]+=1;\\n        }\\n        if(s.charAt(x)==\\'R\\')\\n        {\\n            int i=Character.getNumericValue(z);\\n            rods[i][2]+=1;\\n        }\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "class Solution {\\n    public int countPoints(String rings) {\\n        int[][] rods = {{0,0,0}",
                "codeTag": "Java"
            },
            {
                "id": 2586397,
                "title": "java-string-hashmap-easy-implementation",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        HashMap<Character,String> map = new HashMap<>();\\n        for(int i=0;i<rings.length();i=i+2){\\n            if(!map.containsKey(rings.charAt(i+1)))\\n                map.put(rings.charAt(i+1),Character.toString(rings.charAt(i)));\\n            else{\\n                String str = map.get(rings.charAt(i+1));\\n                str=str+Character.toString(rings.charAt(i));\\n                map.replace(rings.charAt(i+1),str);\\n            }\\n        }\\n        int count=0;\\n        for(Map.Entry m: map.entrySet()){\\n            String st = (String)m.getValue();\\n            if(st.contains(\"R\") && st.contains(\"G\") && st.contains(\"B\"))\\n                count++;\\n        }\\n        return count;\\n    }\\n}\\n```\\nKindly upvote if you like the code.",
                "solutionTags": [
                    "Java",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        HashMap<Character,String> map = new HashMap<>();\\n        for(int i=0;i<rings.length();i=i+2){\\n            if(!map.containsKey(rings.charAt(i+1)))\\n                map.put(rings.charAt(i+1),Character.toString(rings.charAt(i)));\\n            else{\\n                String str = map.get(rings.charAt(i+1));\\n                str=str+Character.toString(rings.charAt(i));\\n                map.replace(rings.charAt(i+1),str);\\n            }\\n        }\\n        int count=0;\\n        for(Map.Entry m: map.entrySet()){\\n            String st = (String)m.getValue();\\n            if(st.contains(\"R\") && st.contains(\"G\") && st.contains(\"B\"))\\n                count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2540950,
                "title": "c-easy-code-using-vector-set-char",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        \\n        int count = 0;\\n        vector<set<char>> v(10);\\n        \\n        for(int i=0;i<=rings.length()-2;i+=2)\\n        {\\n            v[rings[i+1]-\\'0\\'].insert(rings[i]);\\n        }\\n        \\n        for(auto i : v)\\n        {\\n            if(i.size() == 3) count++;\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        \\n        int count = 0;\\n        vector<set<char>> v(10);\\n        \\n        for(int i=0;i<=rings.length()-2;i+=2)\\n        {\\n            v[rings[i+1]-\\'0\\'].insert(rings[i]);\\n        }\\n        \\n        for(auto i : v)\\n        {\\n            if(i.size() == 3) count++;\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2534490,
                "title": "bit-manipulation-c",
                "content": "```\\n int countPoints(string rings) {\\n        unordered_map<char,int> mp;\\n        for(char ch = \\'0\\'; ch<=\\'9\\'; ch++) mp[ch] = 0;\\n        int count =0;\\n        for( int i=0; i<rings.length(); i++){\\n            if     (rings[i] == \\'R\\')  mp[rings[i+1]] |=1;\\n            else if(rings[i]  == \\'G\\') mp[rings[i+1]] |=2;\\n            else mp[rings[i+1]] |= 4;\\n        }\\n       \\n        for(char ch = \\'0\\'; ch<=\\'9\\'; ch++) if(mp[ch] == 7) count++;\\n\\n    return count;  \\n```",
                "solutionTags": [],
                "code": "```\\n int countPoints(string rings) {\\n        unordered_map<char,int> mp;\\n        for(char ch = \\'0\\'; ch<=\\'9\\'; ch++) mp[ch] = 0;\\n        int count =0;\\n        for( int i=0; i<rings.length(); i++){\\n            if     (rings[i] == \\'R\\')  mp[rings[i+1]] |=1;\\n            else if(rings[i]  == \\'G\\') mp[rings[i+1]] |=2;\\n            else mp[rings[i+1]] |= 4;\\n        }\\n       \\n        for(char ch = \\'0\\'; ch<=\\'9\\'; ch++) if(mp[ch] == 7) count++;\\n\\n    return count;  \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2529780,
                "title": "c-without-hashmap-faster-than-100-intuitive",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        bool red[10] = {false}, blue[10] = {false}, green[10] = {false};\\n        for(int i = 0 ; i < rings.length() - 1; i++)\\n        {\\n            if(rings[i] == \\'B\\')\\n            {\\n                int ind = rings[i + 1] - \\'0\\';\\n                blue[ind] = true;\\n                i++;\\n            }\\n            if(rings[i] == \\'G\\')\\n            {\\n                int ind = rings[i + 1] - \\'0\\';\\n                green[ind] = true;\\n                i++;\\n            }\\n            if(rings[i] == \\'R\\')\\n            {\\n                int ind = rings[i + 1] - \\'0\\';\\n                red[ind] = true;\\n                i++;\\n            }\\n        }\\n        int count = 0;\\n        for(int i = 0 ; i < 10; i++)\\n        {\\n            if(red[i] and blue[i] and green[i])\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        bool red[10] = {false}, blue[10] = {false}, green[10] = {false};\\n        for(int i = 0 ; i < rings.length() - 1; i++)\\n        {\\n            if(rings[i] == \\'B\\')\\n            {\\n                int ind = rings[i + 1] - \\'0\\';\\n                blue[ind] = true;\\n                i++;\\n            }\\n            if(rings[i] == \\'G\\')\\n            {\\n                int ind = rings[i + 1] - \\'0\\';\\n                green[ind] = true;\\n                i++;\\n            }\\n            if(rings[i] == \\'R\\')\\n            {\\n                int ind = rings[i + 1] - \\'0\\';\\n                red[ind] = true;\\n                i++;\\n            }\\n        }\\n        int count = 0;\\n        for(int i = 0 ; i < 10; i++)\\n        {\\n            if(red[i] and blue[i] and green[i])\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2512573,
                "title": "100-faster-using-bit-manipulation-c-without-array",
                "content": "class Solution {\\n\\npublic:\\n\\n    int countPoints(string rings) {\\n        short r = 0, g = 0, b = 0, n = rings.size(), count = 0;\\n        \\n        for(int i = 0; i<n; i+=2){\\n            if(rings[i]==\\'R\\') r |= 1<<(rings[i+1] - \\'0\\');\\n            else if(rings[i]==\\'B\\') b |= 1<<(rings[i+1] - \\'0\\');\\n            else if(rings[i]==\\'G\\') g |= 1<<(rings[i+1] - \\'0\\');\\n        }\\n        \\n        r = r&b&g;\\n\\t\\t\\n\\t\\t// count the set bits in r\\n        while(r){ \\n            count++;\\n            r = r&(r-1);\\n        }\\n        \\n        return count;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Bitmask"
                ],
                "code": "class Solution {\\n\\npublic:\\n\\n    int countPoints(string rings) {\\n        short r = 0, g = 0, b = 0, n = rings.size(), count = 0;\\n        \\n        for(int i = 0; i<n; i+=2){\\n            if(rings[i]==\\'R\\') r |= 1<<(rings[i+1] - \\'0\\');\\n            else if(rings[i]==\\'B\\') b |= 1<<(rings[i+1] - \\'0\\');\\n            else if(rings[i]==\\'G\\') g |= 1<<(rings[i+1] - \\'0\\');\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2505063,
                "title": "java-solution",
                "content": "`class Solution {\\n    public int countPoints(String rings) {\\n        HashMap<Character,String> hm= new HashMap<>();\\n        int count=0;\\n        for(int i=0;i+1<rings.length();i+=2){\\n            hm.put(rings.charAt(i+1),hm.getOrDefault(rings.charAt(i+1),\"\").concat(rings.charAt(i)+\"\"));\\n        }\\n        System.out.println(hm);\\n       for(Character ch: hm.keySet()){\\n           if((hm.get(ch)).contains(\"R\") && (hm.get(ch)).contains(\"B\")  && (hm.get(ch)).contains(\"G\")){\\n               count++;\\n           }\\n       }\\n        return count;\\n    }\\n}`",
                "solutionTags": [],
                "code": "class Solution {\\n    public int countPoints(String rings) {\\n        HashMap<Character,String> hm= new HashMap<>();\\n        int count=0;\\n        for(int i=0;i+1<rings.length();i+=2){\\n            hm.put(rings.charAt(i+1),hm.getOrDefault(rings.charAt(i+1),\"\").concat(rings.charAt(i)+\"\"));\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2440560,
                "title": "c-hashmap",
                "content": "class Solution {\\npublic:\\n\\n    int countPoints(string rings) {\\n        int n=rings.length();\\n        map<int,set<char>>mp;\\n        for(int i=1;i<n;i=i+2)\\n        {\\n            mp[rings[i]-\\'0\\'].insert(rings[i-1]);\\n        }\\n        int count=0;\\n        for(auto i:mp)\\n        {\\n            if(i.second.size()>2)\\n                count++;\\n        }\\n        return count;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int countPoints(string rings) {\\n        int n=rings.length();\\n        map<int,set<char>>mp;\\n        for(int i=1;i<n;i=i+2)\\n        {\\n            mp[rings[i]-\\'0\\'].insert(rings[i-1]);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2426689,
                "title": "simple-easy-approach-c-runtime-0mn-100-faster",
                "content": "```\\nint countPoints(string rings) {\\n        int size = rings.size();\\n        int count = 0;\\n        for(int i = 0; i <= 9; i++)\\n        {\\n            int r = 0, g =0, b = 0;\\n            for(auto j = 0; j < size; j++)\\n            {\\n                if(i == (rings[j] - 48)) // convert char to integer\\n                {\\n                    if(rings[j-1] == \\'R\\') r++;\\n                    else if(rings[j-1] == \\'G\\') g++;\\n                    else if(rings[j-1] == \\'B\\') b++;\\n                }\\n            }\\n            if(r > 0 && g > 0 && b > 0) count++;\\n        }\\n        return count;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint countPoints(string rings) {\\n        int size = rings.size();\\n        int count = 0;\\n        for(int i = 0; i <= 9; i++)\\n        {\\n            int r = 0, g =0, b = 0;\\n            for(auto j = 0; j < size; j++)\\n            {\\n                if(i == (rings[j] - 48)) // convert char to integer\\n                {\\n                    if(rings[j-1] == \\'R\\') r++;\\n                    else if(rings[j-1] == \\'G\\') g++;\\n                    else if(rings[j-1] == \\'B\\') b++;\\n                }\\n            }\\n            if(r > 0 && g > 0 && b > 0) count++;\\n        }\\n        return count;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2291722,
                "title": "fast-o-n-code-100-fast-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        set<int> red;\\n        set<int> green;\\n        set<int> blue;\\n        for(int i=0; i<rings.size(); i +=2){\\n            if(rings[i] == \\'R\\'){\\n                red.insert(rings[i+1] - \\'0\\');\\n            }\\n            if(rings[i] == \\'G\\'){\\n                green.insert(rings[i+1] -\\'0\\');\\n            }\\n            if(rings[i] == \\'B\\'){\\n                blue.insert(rings[i+1]-\\'0\\');\\n            }\\n        }\\n        int ans=0;\\n        for(int i=0; i<10; i++){\\n            if(red.count(i) && green.count(i) && blue.count(i))\\n                ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        set<int> red;\\n        set<int> green;\\n        set<int> blue;\\n        for(int i=0; i<rings.size(); i +=2){\\n            if(rings[i] == \\'R\\'){\\n                red.insert(rings[i+1] - \\'0\\');\\n            }\\n            if(rings[i] == \\'G\\'){\\n                green.insert(rings[i+1] -\\'0\\');\\n            }\\n            if(rings[i] == \\'B\\'){\\n                blue.insert(rings[i+1]-\\'0\\');\\n            }\\n        }\\n        int ans=0;\\n        for(int i=0; i<10; i++){\\n            if(red.count(i) && green.count(i) && blue.count(i))\\n                ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2228507,
                "title": "simple-c-solution-100-faster-0ms-runtime",
                "content": "```\\n       vector<bool> red(10,false),green(10,false),blue(10,false);\\n        for(int i=0;i<rings.length()-1;i=i+2)\\n        {\\n\\t\\t    int x = rings[i+1]-\\'0\\';\\n            if(rings[i]==\\'B\\')\\n            {\\n                blue[x] = true;\\n            }\\n            else if(rings[i]==\\'R\\')\\n            {\\n                red[x] = true;\\n            }\\n            else \\n            {\\n                green[x] = true;\\n            }\\n        }\\n        int count=0;\\n        for(int i=0;i<10;i++)\\n        {\\n            if(blue[i]==true && green[i]==true && red[i]==true)\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n       vector<bool> red(10,false),green(10,false),blue(10,false);\\n        for(int i=0;i<rings.length()-1;i=i+2)\\n        {\\n\\t\\t    int x = rings[i+1]-\\'0\\';\\n            if(rings[i]==\\'B\\')\\n            {\\n                blue[x] = true;\\n            }\\n            else if(rings[i]==\\'R\\')\\n            {\\n                red[x] = true;\\n            }\\n            else \\n            {\\n                green[x] = true;\\n            }\\n        }\\n        int count=0;\\n        for(int i=0;i<10;i++)\\n        {\\n            if(blue[i]==true && green[i]==true && red[i]==true)\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2178678,
                "title": "0ms-100-faster-c-solution-using-maps",
                "content": "Simple C++ code using unordered map of type <char,set<char>> to store the number of occurances of RBG \\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        unordered_map<int,set<char>> um;\\n        for(int i=0;i<rings.size()-1;i+=2)\\n        {\\n            um[rings[i+1]].insert(rings[i]);\\n        }\\n        int ans=0;\\n        for(auto i:um)\\n        {\\n            if(i.second.size()==3) ans++;\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        unordered_map<int,set<char>> um;\\n        for(int i=0;i<rings.size()-1;i+=2)\\n        {\\n            um[rings[i+1]].insert(rings[i]);\\n        }\\n        int ans=0;\\n        for(auto i:um)\\n        {\\n            if(i.second.size()==3) ans++;\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2173029,
                "title": "java-with-boolean-array",
                "content": "Here I\\'m using fixed size array of booleans instead of HashMap to store states for each rod.\\nIt is need to check completness for rod twice, to prevent duplicated counts.\\n\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        boolean[][] rodStates = new boolean[10][3];\\n        \\n        int count = 0;\\n        for (int i = 0; i < rings.length(); i = i + 2) {\\n            char color = rings.charAt(i);\\n            int rod = rings.charAt(i + 1) - \\'0\\';\\n            \\n            boolean allSet = rodStates[rod][0] && rodStates[rod][1] && rodStates[rod][2];\\n            if (allSet) {\\n                continue;\\n            }\\n            switch (color) {\\n                case \\'R\\': rodStates[rod][0] = true;\\n                    break;\\n                case \\'G\\': rodStates[rod][1] = true;\\n                    break;                    \\n                case \\'B\\': rodStates[rod][2] = true;\\n                    break;                   \\n            }\\n            allSet = rodStates[rod][0] && rodStates[rod][1] && rodStates[rod][2];\\n            if (allSet) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        boolean[][] rodStates = new boolean[10][3];\\n        \\n        int count = 0;\\n        for (int i = 0; i < rings.length(); i = i + 2) {\\n            char color = rings.charAt(i);\\n            int rod = rings.charAt(i + 1) - \\'0\\';\\n            \\n            boolean allSet = rodStates[rod][0] && rodStates[rod][1] && rodStates[rod][2];\\n            if (allSet) {\\n                continue;\\n            }\\n            switch (color) {\\n                case \\'R\\': rodStates[rod][0] = true;\\n                    break;\\n                case \\'G\\': rodStates[rod][1] = true;\\n                    break;                    \\n                case \\'B\\': rodStates[rod][2] = true;\\n                    break;                   \\n            }\\n            allSet = rodStates[rod][0] && rodStates[rod][1] && rodStates[rod][2];\\n            if (allSet) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2167128,
                "title": "easy-javascript-solution",
                "content": "```\\nvar countPoints = function(rings) {\\n    let hash = {};\\n\\tlet count = 0;\\n\\t\\n    for(let i=1; i<rings.length; i+=2) {\\t\\n        let rod = rings[i];\\t\\t\\n        if(hash[rod]) {            \\n            hash[rod] += rings[i-1];\\n        } else {\\n            hash[rod] = rings[i-1];\\n        }       \\n    }\\n\\t\\n    let hashVal = Object.values(hash);  \\n\\t\\n\\tfor(let i=0; i<hashVal.length; i++) {\\n\\t\\tif(hashVal[i].includes(\\'R\\') && hashVal[i].includes(\\'G\\') && hashVal[i].includes(\\'B\\'))\\n\\t\\t   count++;\\n\\t}\\n\\t\\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPoints = function(rings) {\\n    let hash = {};\\n\\tlet count = 0;\\n\\t\\n    for(let i=1; i<rings.length; i+=2) {\\t\\n        let rod = rings[i];\\t\\t\\n        if(hash[rod]) {            \\n            hash[rod] += rings[i-1];\\n        } else {\\n            hash[rod] = rings[i-1];\\n        }       \\n    }\\n\\t\\n    let hashVal = Object.values(hash);  \\n\\t\\n\\tfor(let i=0; i<hashVal.length; i++) {\\n\\t\\tif(hashVal[i].includes(\\'R\\') && hashVal[i].includes(\\'G\\') && hashVal[i].includes(\\'B\\'))\\n\\t\\t   count++;\\n\\t}\\n\\t\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2160909,
                "title": "c-counting-bits",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        vector<int> rods(10, 0);\\n        int ans = 0;\\n        \\n        for (int i = 0; i < rings.length(); i += 2) {\\n            char color = rings[i];\\n            int rod = rings[i+1] - \\'0\\';\\n\\n            // Let R, G, and B each represent a bit.\\n            if (color == \\'R\\')\\n                rods[rod] |= 1 << 0;\\n            else if (color == \\'G\\')\\n                rods[rod] |= 1 << 1;\\n            else if (color == \\'B\\')\\n                rods[rod] |= 1 << 2;\\n        }\\n        \\n        // Find all rods that have three active bits and add 1 to\\n        // our answer for each one.\\n        for (int j = 0; j < rods.size(); j++)\\n            ans += rods[j] == 7 ? 1 : 0; // 7 == 111 in binary\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        vector<int> rods(10, 0);\\n        int ans = 0;\\n        \\n        for (int i = 0; i < rings.length(); i += 2) {\\n            char color = rings[i];\\n            int rod = rings[i+1] - \\'0\\';\\n\\n            // Let R, G, and B each represent a bit.\\n            if (color == \\'R\\')\\n                rods[rod] |= 1 << 0;\\n            else if (color == \\'G\\')\\n                rods[rod] |= 1 << 1;\\n            else if (color == \\'B\\')\\n                rods[rod] |= 1 << 2;\\n        }\\n        \\n        // Find all rods that have three active bits and add 1 to\\n        // our answer for each one.\\n        for (int j = 0; j < rods.size(); j++)\\n            ans += rods[j] == 7 ? 1 : 0; // 7 == 111 in binary\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2158729,
                "title": "simple-java-solution-using-map-and-set-runtime-1ms",
                "content": "class Solution {\\n    public int countPoints(String rings) {\\n        \\n        HashMap<Integer, Set<Character>> map = new HashMap<>();\\n        int res=0;\\n        \\n        for(int i=1; i<rings.length(); i=i+2){\\n            int a = rings.charAt(i)-\\'0\\';\\n            char c = rings.charAt(i-1);\\n            if(map.containsKey(a)){\\n                Set<Character> s=map.get(a);\\n                s.add(c);\\n                map.put(a,s);\\n            }else{\\n                Set<Character> s=new HashSet<>();\\n                s.add(c);\\n                map.put(a,s);\\n            }\\n        }\\n        \\n        // System.out.println(map); to check the map content\\n        \\n        for(Set<Character> set: map.values()){\\n            if(set.size()==3) res++;\\n        }\\n        \\n        return res;\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int countPoints(String rings) {\\n        \\n        HashMap<Integer, Set<Character>> map = new HashMap<>();\\n        int res=0;\\n        \\n        for(int i=1; i<rings.length(); i=i+2){\\n            int a = rings.charAt(i)-\\'0\\';\\n            char c = rings.charAt(i-1);\\n            if(map.containsKey(a)){\\n                Set<Character> s=map.get(a);\\n                s.add(c);\\n                map.put(a,s);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2145225,
                "title": "java-1ms-faster-than-76-31",
                "content": "The idea is using the hashset because it only can add primary key, so it does not matter if one rod appear more than one same colour rings at one time \\nafter add all the element, just to check whether the size is equal to 3\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        ArrayList<HashSet<Character>> al= new ArrayList();\\n        for(int a=0;a<=9;a++){\\n            al.add(new HashSet());\\n        }\\n        for(int i=0;i<rings.length();i+=2){\\n            int pos= rings.charAt(i+1)-\\'0\\';\\n            al.get(pos).add(rings.charAt(i));\\n        }\\n        int res=0;\\n        for(Set x: al){\\n            if(x.size()==3){\\n                res+=1;\\n            }\\n        }return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        ArrayList<HashSet<Character>> al= new ArrayList();\\n        for(int a=0;a<=9;a++){\\n            al.add(new HashSet());\\n        }\\n        for(int i=0;i<rings.length();i+=2){\\n            int pos= rings.charAt(i+1)-\\'0\\';\\n            al.get(pos).add(rings.charAt(i));\\n        }\\n        int res=0;\\n        for(Set x: al){\\n            if(x.size()==3){\\n                res+=1;\\n            }\\n        }return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2142218,
                "title": "using-map-beginner-friendly",
                "content": "```\\nint countPoints(string rings) {\\n        map<char,int>R;\\n        map<char,int>G;\\n        map<char,int>B;\\n        int n = rings.length();\\n        for(int i = 0 ; i < n ; i += 2 ){\\n            if(rings[i] == \\'R\\')\\n                R[rings[i+1]]++;\\n            \\n            if(rings[i] == \\'G\\')\\n                G[rings[i+1]]++;\\n            \\n            if(rings[i] == \\'B\\')\\n                B[rings[i+1]]++;\\n        }\\n        int ans = 0;\\n        for(char i = \\'0\\' ; i <= \\'9\\' ; i++){\\n            if(R[i] && G[i] && B[i])\\n                ans++;\\n        }\\n        return ans;",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nint countPoints(string rings) {\\n        map<char,int>R;\\n        map<char,int>G;\\n        map<char,int>B;\\n        int n = rings.length();\\n        for(int i = 0 ; i < n ; i += 2 ){\\n            if(rings[i] == \\'R\\')\\n                R[rings[i+1]]++;\\n            \\n            if(rings[i] == \\'G\\')\\n                G[rings[i+1]]++;\\n            \\n            if(rings[i] == \\'B\\')\\n                B[rings[i+1]]++;\\n        }\\n        int ans = 0;\\n        for(char i = \\'0\\' ; i <= \\'9\\' ; i++){\\n            if(R[i] && G[i] && B[i])\\n                ans++;\\n        }\\n        return ans;",
                "codeTag": "Unknown"
            },
            {
                "id": 2128416,
                "title": "python3-92-98-faster-memory",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        individualColors = rings[::2]\\n        ringNums = rings[1::2]\\n        dictCount = {}\\n        colorSet = set([\\'R\\', \\'G\\', \\'B\\'])\\n        for i in range(len(ringNums)):\\n            if ringNums[i] in dictCount:\\n                dictCount[ringNums[i]].append(individualColors[i])\\n            else:\\n                dictCount[ringNums[i]] = [individualColors[i]]\\n        return len({k:v for k,v in dictCount.items() if set(v) == colorSet})",
                "solutionTags": [],
                "code": "class Solution:\\n    def countPoints(self, rings: str) -> int:\\n        individualColors = rings[::2]\\n        ringNums = rings[1::2]\\n        dictCount = {}",
                "codeTag": "Java"
            },
            {
                "id": 2115219,
                "title": "simple-java-solution-using-array-o-n",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        \\n        int[] R = new int[10];\\n        int[] B = new int[10];\\n        int[] G = new int[10];\\n        int count=0;\\n        \\n        for(int i=0;i<rings.length();i=i+2){\\n           int index = rings.charAt(i+1)-\\'0\\';\\n           if(rings.charAt(i) == \\'R\\')\\n               R[index]++;\\n           if(rings.charAt(i) == \\'B\\')\\n               B[index]++;\\n           if(rings.charAt(i) == \\'G\\')\\n               G[index]++;\\n        }\\n        \\n        for(int i=0;i<10;i++){\\n         if(R[i]>0 && B[i]>0 && G[i]>0)\\n             count++;\\n       }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        \\n        int[] R = new int[10];\\n        int[] B = new int[10];\\n        int[] G = new int[10];\\n        int count=0;\\n        \\n        for(int i=0;i<rings.length();i=i+2){\\n           int index = rings.charAt(i+1)-\\'0\\';\\n           if(rings.charAt(i) == \\'R\\')\\n               R[index]++;\\n           if(rings.charAt(i) == \\'B\\')\\n               B[index]++;\\n           if(rings.charAt(i) == \\'G\\')\\n               G[index]++;\\n        }\\n        \\n        for(int i=0;i<10;i++){\\n         if(R[i]>0 && B[i]>0 && G[i]>0)\\n             count++;\\n       }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2102392,
                "title": "o-n-creating-vector-hash-map-and-simple-traversal",
                "content": "This way you can reduce the number of checks to be performed\\n\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n       vector<unordered_set<int>>v(10);\\n        int cnt=0;\\n        for(int i=0;i<rings.size();i+=2){\\n            v[rings[i+1]-\\'0\\'].insert(rings[i]);\\n        }\\n        for(auto x: v){\\n            if(x.size()==3)cnt++;\\n        }\\n        return cnt;\\n    }\\n}; \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n       vector<unordered_set<int>>v(10);\\n        int cnt=0;\\n        for(int i=0;i<rings.size();i+=2){\\n            v[rings[i+1]-\\'0\\'].insert(rings[i]);\\n        }\\n        for(auto x: v){\\n            if(x.size()==3)cnt++;\\n        }\\n        return cnt;\\n    }\\n}; \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2091835,
                "title": "simple-python-solution-using-defaultdict",
                "content": "```\\nfrom collections import defaultdict\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        ret = 0\\n        rod_dict = defaultdict(set)\\n\\t\\t\\n        for idx in range(0, len(rings)-1, 2):\\n            rod_dict[rings[idx+1]].add(rings[idx])\\n\\t\\t\\t\\n        for _, ring_set in rod_dict.items():\\n            if 3 == len(ring_set):\\n                ret += 1\\n\\t\\t\\t\\t\\n        return ret        \\n```",
                "solutionTags": [],
                "code": "```\\nfrom collections import defaultdict\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        ret = 0\\n        rod_dict = defaultdict(set)\\n\\t\\t\\n        for idx in range(0, len(rings)-1, 2):\\n            rod_dict[rings[idx+1]].add(rings[idx])\\n\\t\\t\\t\\n        for _, ring_set in rod_dict.items():\\n            if 3 == len(ring_set):\\n                ret += 1\\n\\t\\t\\t\\t\\n        return ret        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2063063,
                "title": "java-simple-o-n-time-o-1-space",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int res = 0; \\n        boolean[] reds = new boolean[10], blues = new boolean[10], greens = new boolean[10]; \\n        for(int i=0; i<rings.length(); i+=2) {\\n            char color = rings.charAt(i); \\n            int idx = rings.charAt(i+1) - \\'0\\'; \\n            if(color == \\'R\\') {\\n                reds[idx] = true; \\n            } else if(color == \\'B\\') {\\n                blues[idx] = true; \\n            } else {\\n                greens[idx] = true; \\n            }\\n        }\\n        \\n        for(int i = 0; i<10; i++) {\\n            if(reds[i] && blues[i] && greens[i]) res++;\\n        }\\n        \\n        return res; \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int res = 0; \\n        boolean[] reds = new boolean[10], blues = new boolean[10], greens = new boolean[10]; \\n        for(int i=0; i<rings.length(); i+=2) {\\n            char color = rings.charAt(i); \\n            int idx = rings.charAt(i+1) - \\'0\\'; \\n            if(color == \\'R\\') {\\n                reds[idx] = true; \\n            } else if(color == \\'B\\') {\\n                blues[idx] = true; \\n            } else {\\n                greens[idx] = true; \\n            }\\n        }\\n        \\n        for(int i = 0; i<10; i++) {\\n            if(reds[i] && blues[i] && greens[i]) res++;\\n        }\\n        \\n        return res; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2056176,
                "title": "c-with-set",
                "content": "```\\nint countPoints(string rings) {\\n  set<char> values[10];\\n\\n  for (int i = 0; i < rings.size(); i+=2) {\\n\\tvalues[rings[i+1]-\\'0\\'].insert(rings[i]);\\n  }\\n\\n  int cnt = 0;\\n  for (int i = 0; i < 10; ++i) {\\n\\tif (values[i].size() == 3) ++cnt;\\n  }\\n\\n  return cnt;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint countPoints(string rings) {\\n  set<char> values[10];\\n\\n  for (int i = 0; i < rings.size(); i+=2) {\\n\\tvalues[rings[i+1]-\\'0\\'].insert(rings[i]);\\n  }\\n\\n  int cnt = 0;\\n  for (int i = 0; i < 10; ++i) {\\n\\tif (values[i].size() == 3) ++cnt;\\n  }\\n\\n  return cnt;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2011619,
                "title": "python-easy-to-understand-solution-98-memory-2103-rings-and-rods",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        \"\"\" \\n        table = [\\n            #          R      G      B \\n            # 0 ring: [False, False, False]\\n            # 1 ring: ...\\n\\t\\t\\t...\\n        ]\\n        \"\"\"\\n        number_rings_with_RGB = 0\\n        table = [[False, False, False] for i in range(10)]\\n        colors = {\"R\": 0, \"G\": 1, \"B\": 2}\\n        for i in range(0, len(rings), 2):\\n            color = rings[i]\\n            position = int(rings[i + 1])\\n            table[position][colors[color]] = True\\n            \\n        for values in table:\\n            if all(values):\\n                number_rings_with_RGB += 1\\n                \\n        return number_rings_with_RGB\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        \"\"\" \\n        table = [\\n            #          R      G      B \\n            # 0 ring: [False, False, False]\\n            # 1 ring: ...\\n\\t\\t\\t...\\n        ]\\n        \"\"\"\\n        number_rings_with_RGB = 0\\n        table = [[False, False, False] for i in range(10)]\\n        colors = {\"R\": 0, \"G\": 1, \"B\": 2}\\n        for i in range(0, len(rings), 2):\\n            color = rings[i]\\n            position = int(rings[i + 1])\\n            table[position][colors[color]] = True\\n            \\n        for values in table:\\n            if all(values):\\n                number_rings_with_RGB += 1\\n                \\n        return number_rings_with_RGB\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1996204,
                "title": "java-solution-using-arrays",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        \\n        int []red=new int[10];\\n        int []green=new int[10];\\n        int []blue=new int[10];\\n        \\n        for(int i=0;i<rings.length();i+=2)\\n        {\\n            int  p=rings.charAt(i+1)-\\'0\\';\\n            \\n            char ch=rings.charAt(i);\\n            if(ch==\\'R\\')\\n            {\\n                red[p]++;\\n            }\\n             if(ch==\\'B\\')\\n            {\\n                  blue[p]++;\\n            }\\n             if(ch==\\'G\\')\\n            {\\n                green[p]++;\\n            }\\n        }\\n        \\n        int count=0;\\n        for(int i=0;i<10;i++)\\n        {\\n            if(red[i]>0 && blue[i]>0 && green[i]>0)\\n            {\\n                count++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public int countPoints(String rings) {\\n        \\n        int []red=new int[10];\\n        int []green=new int[10];\\n        int []blue=new int[10];\\n        \\n        for(int i=0;i<rings.length();i+=2)\\n        {\\n            int  p=rings.charAt(i+1)-\\'0\\';\\n            \\n            char ch=rings.charAt(i);\\n            if(ch==\\'R\\')\\n            {\\n                red[p]++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1971177,
                "title": "easy-o-n-js-solution",
                "content": "var countPoints = function(rings) {\\n    let obj = {};\\n    let total = 0;\\n    \\n    for(let i = rings.length - 1; i>=0 ; i--){\\n         if(i%2 !== 0){\\n            obj[rings[i]] = obj[rings[i]] ? obj[rings[i]] : {};\\n        } else {\\n            obj[rings[i+1]][rings[i]] = true;\\n        }\\n    }\\n    \\n    for(let [key, val] of Object.entries(obj)){\\n        if(val[\"R\"] && val[\"G\"] && val[\"B\"]) {\\n            total++;\\n        }\\n    }\\n    \\n    return total;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "var countPoints = function(rings) {\\n    let obj = {};\\n    let total = 0;\\n    \\n    for(let i = rings.length - 1; i>=0 ; i--){\\n         if(i%2 !== 0){\\n            obj[rings[i]] = obj[rings[i]] ? obj[rings[i]] : {};\\n        } else {\\n            obj[rings[i+1]][rings[i]] = true;\\n        }\\n    }\\n    \\n    for(let [key, val] of Object.entries(obj)){\\n        if(val[\"R\"] && val[\"G\"] && val[\"B\"]) {\\n            total++;\\n        }\\n    }\\n    \\n    return total;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1947049,
                "title": "simple-python-solution-easy-and-intuitive",
                "content": "```\\nn = len(rings)//2\\nres = 0\\nfor i in range(n+1):\\n\\tif (\"R\" + str(i)) in rings and (\"G\" + str(i)) in rings and (\"B\" + str(i)) in rings:\\n\\t\\tres += 1\\n\\nreturn res\\n\\n```",
                "solutionTags": [],
                "code": "```\\nn = len(rings)//2\\nres = 0\\nfor i in range(n+1):\\n\\tif (\"R\" + str(i)) in rings and (\"G\" + str(i)) in rings and (\"B\" + str(i)) in rings:\\n\\t\\tres += 1\\n\\nreturn res\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1929283,
                "title": "python3-simple-solution",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        counts = [[False for i in range(3)] for j in range(10)]\\n        for i in range(0, len(rings), 2):\\n            if rings[i] == \\'B\\':\\n                counts[int(rings[i+1])][0] = True\\n            elif rings[i] == \\'R\\':\\n                counts[int(rings[i+1])][1] = True\\n            elif rings[i] == \\'G\\':\\n                counts[int(rings[i+1])][2] = True\\n        return sum([1 for c in counts if sum(c) == 3])\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        counts = [[False for i in range(3)] for j in range(10)]\\n        for i in range(0, len(rings), 2):\\n            if rings[i] == \\'B\\':\\n                counts[int(rings[i+1])][0] = True\\n            elif rings[i] == \\'R\\':\\n                counts[int(rings[i+1])][1] = True\\n            elif rings[i] == \\'G\\':\\n                counts[int(rings[i+1])][2] = True\\n        return sum([1 for c in counts if sum(c) == 3])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1927962,
                "title": "functional-1-liner-verbose-solution-with-explanation",
                "content": "Verbose with explanation\\n```\\n    class Solution {\\n        val colors = listOf(\\'R\\', \\'G\\', \\'B\\')\\n        val rods = (\\'0\\'..\\'9\\')\\n        fun countPoints(rings: String) = rods.filter { rod -> // for all rods:\\n            colors.all { color -> // check if all colors...\\n                rings.zipWithNext().any { (a, b) -> a == color && b == rod }  // ...are found for this rod\\n            }\\n        }.count() // count the rods that match the condition (have all 3 colors)\\n    }\\n```\\nCompacted to oneliner:\\n   ```\\n class SolutionCompact {\\n        fun countPoints(rings: String) = (\\'0\\'..\\'9\\').filter { rod -> listOf(\\'R\\', \\'G\\', \\'B\\').all { color -> rings.zipWithNext().any { (a, b) -> a == color && b == rod } } }.count() \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    class Solution {\\n        val colors = listOf(\\'R\\', \\'G\\', \\'B\\')\\n        val rods = (\\'0\\'..\\'9\\')\\n        fun countPoints(rings: String) = rods.filter { rod -> // for all rods:\\n            colors.all { color -> // check if all colors...\\n                rings.zipWithNext().any { (a, b) -> a == color && b == rod }  // ...are found for this rod\\n            }\\n        }.count() // count the rods that match the condition (have all 3 colors)\\n    }\\n```\n```\\n class SolutionCompact {\\n        fun countPoints(rings: String) = (\\'0\\'..\\'9\\').filter { rod -> listOf(\\'R\\', \\'G\\', \\'B\\').all { color -> rings.zipWithNext().any { (a, b) -> a == color && b == rod } } }.count() \\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1920631,
                "title": "python-easy-solution-with-array-and-explanation",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        \"\"\"\\n        We create an array for rods and assign a \\n        prime number to each color as below:\\n        R: 2\\n        B: 3\\n        G: 5\\n        everytime we see a number on a rod, we \\n        multiply that rod by the prime number.\\n        At the end, we find all the rods that are \\n        divisible by all three of the prime numbers.\\n        \"\"\"\\n        rods = [1] * 10\\n        colors = {\\n            \\'R\\': 2,\\n            \\'B\\': 3,\\n            \\'G\\': 5\\n        }\\n        i = 0\\n        while i < len(rings):\\n            rods[int(rings[i + 1])] = rods[int(rings[i + 1])] * colors[rings[i]]\\n            i += 2\\n            \\n        all_color_rods = 0\\n        for i in range(len(rods)):\\n            if rods[i] % 2 == rods[i] % 3 == rods[i] % 5 == 0:\\n                all_color_rods += 1\\n        return all_color_rods****",
                "solutionTags": [
                    "Array"
                ],
                "code": "class Solution:\\n    def countPoints(self, rings: str) -> int:\\n        \"\"\"\\n        We create an array for rods and assign a \\n        prime number to each color as below:\\n        R: 2\\n        B: 3\\n        G: 5\\n        everytime we see a number on a rod, we \\n        multiply that rod by the prime number.\\n        At the end, we find all the rods that are \\n        divisible by all three of the prime numbers.\\n        \"\"\"\\n        rods = [1] * 10\\n        colors = {\\n            \\'R\\': 2,\\n            \\'B\\': 3,\\n            \\'G\\': 5\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1893239,
                "title": "python-default-dict-and-set",
                "content": "```\\nfrom collections import defaultdict\\n\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        rods = defaultdict(set)\\n        for i in range(int(len(rings)/2)):\\n            # colour = rings[2*i]\\n            # rod = rings[2*i+1]\\n            rods[rings[2*i+1]].add(rings[2*i])\\n            \\n        return len([rods[i] for i in rods if len(rods[i])==3])\\n\\t\\t",
                "solutionTags": [],
                "code": "```\\nfrom collections import defaultdict\\n\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        rods = defaultdict(set)\\n        for i in range(int(len(rings)/2)):\\n            # colour = rings[2*i]\\n            # rod = rings[2*i+1]\\n            rods[rings[2*i+1]].add(rings[2*i])\\n            \\n        return len([rods[i] for i in rods if len(rods[i])==3])\\n\\t\\t",
                "codeTag": "Java"
            },
            {
                "id": 1891367,
                "title": "python-solution-hashmap-based-iterative-100-faster",
                "content": "- Simulatenously iterate through rings and its corresponding rod.\\n- Store ring color in corresponding rod store.\\n- Check if all three rings are there in a rod.\\n```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        count = 0\\n        store = defaultdict(set)\\n        for ring,rod in zip(range(0,len(rings),2),range(1,len(rings),2)):\\n            store[int(rings[rod])].add(rings[ring])\\n        for val in store.values():\\n            if len(val) == 3:\\n                count += 1\\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        count = 0\\n        store = defaultdict(set)\\n        for ring,rod in zip(range(0,len(rings),2),range(1,len(rings),2)):\\n            store[int(rings[rod])].add(rings[ring])\\n        for val in store.values():\\n            if len(val) == 3:\\n                count += 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1891269,
                "title": "python-solution-using-dictionary",
                "content": "We can create a dictionary that stores position of ring as key and value to that key is list containing information about the color of the ring. Finally we can check it out at last which key value has all colors in its list.\\n```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        dic = {}\\n        count = 0\\n        for i in range(1,len(rings),2):\\n            if rings[i] not in dic:\\n                dic[rings[i]] = [rings[i-1]]\\n            else:\\n                dic[rings[i]].append(rings[i-1])\\n        \\n        for key in dic:\\n            if \\'R\\' in dic[key] and \\'B\\' in dic[key] and \\'G\\' in dic[key]:\\n                count += 1\\n        \\n        return count\\n\\t",
                "solutionTags": [
                    "Python3"
                ],
                "code": "class Solution:\\n    def countPoints(self, rings: str) -> int:\\n        dic = {}",
                "codeTag": "Java"
            },
            {
                "id": 1866862,
                "title": "c-unordered-map-brute-force-approach-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        \\n        int n=rings.size();\\n        unordered_map<int,string> ump;\\n        \\n        for(int i=1;i<n;i+=2)\\n        {\\n            ump[rings[i]]+=rings[i-1];\\n        }\\n        \\n        unordered_map<int,string> :: iterator it;\\n        \\n        int ans=0;\\n        \\n        for(it=ump.begin();it!=ump.end();it++)\\n        {\\n            string temp=(*it).second;\\n            int fr=0,fb=0,fg=0;\\n            for(int i=0;i<temp.size();i++)\\n            {\\n                if(temp[i]==\\'R\\')\\n                    fr=1;\\n                else if(temp[i]==\\'G\\') \\n                    fg=1;\\n                else if(temp[i]==\\'B\\') \\n                    fb=1;\\n            }\\n            if(fr==1&&fb==1&&fg==1)\\n                ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```\\nIf you find helpful kindly upvote it !!\\nIf you have any doubt regarding this solution comment down...",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        \\n        int n=rings.size();\\n        unordered_map<int,string> ump;\\n        \\n        for(int i=1;i<n;i+=2)\\n        {\\n            ump[rings[i]]+=rings[i-1];\\n        }\\n        \\n        unordered_map<int,string> :: iterator it;\\n        \\n        int ans=0;\\n        \\n        for(it=ump.begin();it!=ump.end();it++)\\n        {\\n            string temp=(*it).second;\\n            int fr=0,fb=0,fg=0;\\n            for(int i=0;i<temp.size();i++)\\n            {\\n                if(temp[i]==\\'R\\')\\n                    fr=1;\\n                else if(temp[i]==\\'G\\') \\n                    fg=1;\\n                else if(temp[i]==\\'B\\') \\n                    fb=1;\\n            }\\n            if(fr==1&&fb==1&&fg==1)\\n                ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1841592,
                "title": "c-solution-using-hashing",
                "content": "\\n\\n```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        \\n    unordered_map<char , set<char>> h;\\n\\n    for (int i = rings.length()-1;i>0;i-=2)\\n        h[rings[i]].insert(rings[i - 1]);\\n        \\n    int count = 0;\\n\\n    for(auto x: h)\\n        if(x.second.size() == 3) count++;\\n        \\n    \\n    return count;\\n    }\\n# };\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        \\n    unordered_map<char , set<char>> h;\\n\\n    for (int i = rings.length()-1;i>0;i-=2)\\n        h[rings[i]].insert(rings[i - 1]);\\n        \\n    int count = 0;\\n\\n    for(auto x: h)\\n        if(x.second.size() == 3) count++;\\n        \\n    \\n    return count;\\n    }\\n# };\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1820670,
                "title": "rust-solution",
                "content": "<img src=\"https://assets.leetcode.com/users/images/724c0120-807e-4be6-8fa9-aa2d35b8579e_1646459591.0093706.png\" width=\"500\">\\n\\n```rust\\n\\nuse crate::Solution;\\n\\nimpl Solution {\\n    pub fn count_points(rings: String) -> i32 {\\n        let mut rods: Vec<Rod> = Vec::new();\\n\\n        for i in 0..10 {\\n            let rod = Rod {\\n                id: i,\\n                has_blue: false,\\n                has_green: false,\\n                has_red: false,\\n            };\\n\\n            rods.push(rod);\\n        }\\n\\n        let chars: Vec<char> = rings.chars().collect();\\n\\n        let mut i = 0;\\n\\n        while i < rings.len() - 1 {\\n            match chars[i] {\\n                \\'R\\' => {\\n                    rods[Self::get_rod_num(&chars, i)].has_red = true;\\n                }\\n                \\'G\\' => {\\n                    rods[Self::get_rod_num(&chars, i)].has_green = true;\\n                }\\n                \\'B\\' => {\\n                    rods[Self::get_rod_num(&chars, i)].has_blue = true;\\n                }\\n                _ => {\\n                    unreachable!()\\n                }\\n            }\\n            i += 2;\\n        }\\n\\n        let mut ret = 0;\\n        for rod in rods {\\n            if rod.has_red && rod.has_green && rod.has_blue {\\n                ret += 1;\\n            }\\n        }\\n\\n        ret\\n    }\\n\\n    fn get_rod_num(chars: &Vec<char>, i: usize) -> usize {\\n        chars[i + 1].to_digit(10).unwrap() as usize\\n    }\\n}\\n\\nstruct Rod {\\n    id: usize,\\n    has_blue: bool,\\n    has_green: bool,\\n    has_red: bool,\\n}\\n\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\n\\nuse crate::Solution;\\n\\nimpl Solution {\\n    pub fn count_points(rings: String) -> i32 {\\n        let mut rods: Vec<Rod> = Vec::new();\\n\\n        for i in 0..10 {\\n            let rod = Rod {\\n                id: i,\\n                has_blue: false,\\n                has_green: false,\\n                has_red: false,\\n            };\\n\\n            rods.push(rod);\\n        }\\n\\n        let chars: Vec<char> = rings.chars().collect();\\n\\n        let mut i = 0;\\n\\n        while i < rings.len() - 1 {\\n            match chars[i] {\\n                \\'R\\' => {\\n                    rods[Self::get_rod_num(&chars, i)].has_red = true;\\n                }\\n                \\'G\\' => {\\n                    rods[Self::get_rod_num(&chars, i)].has_green = true;\\n                }\\n                \\'B\\' => {\\n                    rods[Self::get_rod_num(&chars, i)].has_blue = true;\\n                }\\n                _ => {\\n                    unreachable!()\\n                }\\n            }\\n            i += 2;\\n        }\\n\\n        let mut ret = 0;\\n        for rod in rods {\\n            if rod.has_red && rod.has_green && rod.has_blue {\\n                ret += 1;\\n            }\\n        }\\n\\n        ret\\n    }\\n\\n    fn get_rod_num(chars: &Vec<char>, i: usize) -> usize {\\n        chars[i + 1].to_digit(10).unwrap() as usize\\n    }\\n}\\n\\nstruct Rod {\\n    id: usize,\\n    has_blue: bool,\\n    has_green: bool,\\n    has_red: bool,\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1809205,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        vector<vector<int>> vec;\\n        vector<int> v;\\n        for(int i=0;i<3;i++){\\n            v.push_back(0);\\n        }\\n        for(int i=0;i<10;i++){\\n            vec.push_back(v);\\n        }\\n        for(int i=1;i<rings.size();i+=2){\\n            int j=rings[i]-\\'0\\';\\n            char k=rings[i-1];\\n            if(k==\\'R\\'){\\n                vec[j][0]=1;\\n            }\\n            else if(k==\\'G\\'){\\n                vec[j][1]=1;\\n            }\\n            else{\\n                vec[j][2]=1;\\n            }\\n        }\\n        int count=0;\\n        for(int i=0;i<vec.size();i++){\\n            if(vec[i][0]==1 && vec[i][1]==1 && vec[i][2]==1) count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        vector<vector<int>> vec;\\n        vector<int> v;\\n        for(int i=0;i<3;i++){\\n            v.push_back(0);\\n        }\\n        for(int i=0;i<10;i++){\\n            vec.push_back(v);\\n        }\\n        for(int i=1;i<rings.size();i+=2){\\n            int j=rings[i]-\\'0\\';\\n            char k=rings[i-1];\\n            if(k==\\'R\\'){\\n                vec[j][0]=1;\\n            }\\n            else if(k==\\'G\\'){\\n                vec[j][1]=1;\\n            }\\n            else{\\n                vec[j][2]=1;\\n            }\\n        }\\n        int count=0;\\n        for(int i=0;i<vec.size();i++){\\n            if(vec[i][0]==1 && vec[i][1]==1 && vec[i][2]==1) count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790753,
                "title": "python-faster-than-99-with-comments",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        \\n        rods = [\\'\\']*10\\n        rods_with_all_colors = 0\\n        hmap = {}\\n        i = 0\\n        \\n        while i < len(rings):\\n            #split the ring at the current index +2 to get the current color + rod\\n            current_ring = rings[i:i+2]\\n            \\n            #parse out the current rod\\n            current_rod = int(current_ring[1:])\\n            \\n            #parse out the color\\n            current_color = current_ring[:1]\\n            \\n            #throw it into our rods list\\n            rods[current_rod] += current_color\\n            \\n            #if we see the current rod has all three color\\n            #add it to the hashmap so we don\\'t count it again in\\n            #our final counter (rods_with_all_colors)\\n            if \\'R\\' in rods[current_rod] and \\'G\\' in rods[current_rod] and \\'B\\' in rods[current_rod]:\\n                if current_rod not in hmap:\\n                    hmap[current_rod] = True\\n                    rods_with_all_colors += 1\\n            \\n            #increment by two since rings come in pairs (color + rod)\\n            i += 2\\n        return rods_with_all_colors\\n```\\n\\n![image](https://assets.leetcode.com/users/images/0f5dba05-0a15-4113-879e-fc2c732b50e3_1645509234.5391262.png)",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        \\n        rods = [\\'\\']*10\\n        rods_with_all_colors = 0\\n        hmap = {}\\n        i = 0\\n        \\n        while i < len(rings):\\n            #split the ring at the current index +2 to get the current color + rod\\n            current_ring = rings[i:i+2]\\n            \\n            #parse out the current rod\\n            current_rod = int(current_ring[1:])\\n            \\n            #parse out the color\\n            current_color = current_ring[:1]\\n            \\n            #throw it into our rods list\\n            rods[current_rod] += current_color\\n            \\n            #if we see the current rod has all three color\\n            #add it to the hashmap so we don\\'t count it again in\\n            #our final counter (rods_with_all_colors)\\n            if \\'R\\' in rods[current_rod] and \\'G\\' in rods[current_rod] and \\'B\\' in rods[current_rod]:\\n                if current_rod not in hmap:\\n                    hmap[current_rod] = True\\n                    rods_with_all_colors += 1\\n            \\n            #increment by two since rings come in pairs (color + rod)\\n            i += 2\\n        return rods_with_all_colors\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1773019,
                "title": "o-n-100-faster-soln",
                "content": "class Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int red[10] = {0};\\n        int green[10] = {0};\\n        int blue[10] = {0};\\n        \\n        for(int i = 0; i<rings.length(); i = i+2){\\n            int temp = rings[i+1] - \\'0\\';\\n            if(rings[i] == \\'B\\'){\\n                blue[temp]++;\\n            }else if(rings[i] == \\'G\\'){\\n                green[temp]++;\\n            }else{\\n                red[temp]++;\\n            }\\n        }\\n        \\n        int ct = 0;\\n        \\n        for(int i = 0; i<10; i++){\\n            if(red[i] > 0 && green[i] > 0 && blue[i] > 0){\\n                ct++;\\n            }\\n        }\\n        \\n        return ct;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int red[10] = {0}",
                "codeTag": "Java"
            },
            {
                "id": 1772367,
                "title": "rust",
                "content": "```\\n\\nstruct Solution{}\\nimpl Solution {\\n    pub fn count_points(rings: String) -> i32 {\\n        let mut h : std::collections::HashMap<char,std::collections::HashSet<char>> = std::collections::HashMap::new();       \\n        for (i,_) in rings.chars().enumerate().step_by(2){\\n            let key = rings.chars().nth(i+1).unwrap();\\n            let value = rings.chars().nth(i).unwrap();\\n            let hs: std::collections::HashSet<char> = std::collections::HashSet::new();\\n            h.entry(key).or_insert(hs).insert(value);          \\n        } \\n        let count = h.iter().filter(|f| (f.1).len() == 3).count() as i32;\\n        count\\n    }\\n}\\nfn main() {\\n    println!(\"{:?}\",Solution::count_points(\"B0B6G0R6R0R6G9\".to_string()));    \\n}\\n#[cfg(test)]\\nmod test{\\n    use crate::*;\\n\\n    #[test]\\n    fn main_test(){\\n        assert_eq!(Solution::count_points(\"B0B6G0R6R0R6G9\".to_string()),1);\\n        assert_eq!(Solution::count_points(\"B0R0G0R9R0B0G0\".to_string()),1);\\n        assert_eq!(Solution::count_points(\"G4\".to_string()),0);\\n    }    \\n}\\n\\n\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\n\\nstruct Solution{}\\nimpl Solution {\\n    pub fn count_points(rings: String) -> i32 {\\n        let mut h : std::collections::HashMap<char,std::collections::HashSet<char>> = std::collections::HashMap::new();       \\n        for (i,_) in rings.chars().enumerate().step_by(2){\\n            let key = rings.chars().nth(i+1).unwrap();\\n            let value = rings.chars().nth(i).unwrap();\\n            let hs: std::collections::HashSet<char> = std::collections::HashSet::new();\\n            h.entry(key).or_insert(hs).insert(value);          \\n        } \\n        let count = h.iter().filter(|f| (f.1).len() == 3).count() as i32;\\n        count\\n    }\\n}\\nfn main() {\\n    println!(\"{:?}\",Solution::count_points(\"B0B6G0R6R0R6G9\".to_string()));    \\n}\\n#[cfg(test)]\\nmod test{\\n    use crate::*;\\n\\n    #[test]\\n    fn main_test(){\\n        assert_eq!(Solution::count_points(\"B0B6G0R6R0R6G9\".to_string()),1);\\n        assert_eq!(Solution::count_points(\"B0R0G0R9R0B0G0\".to_string()),1);\\n        assert_eq!(Solution::count_points(\"G4\".to_string()),0);\\n    }    \\n}\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1768580,
                "title": "hashtable-fastest-solution",
                "content": "```\\nimport java.util.Hashtable;\\nimport java.util.Map;\\nclass Solution {\\n    public int countPoints(String rings) \\n    {\\n        Hashtable<Integer,String> htab = new Hashtable<>();\\n        for(int i=0;i<rings.length();i+=2)\\n        {\\n            int v=rings.charAt(i+1)-\\'0\\';\\n            if(rings.charAt(i)==\\'R\\')\\n            {\\n                htab.put(v,htab.get(v)+\"R\");\\n            }\\n            else if(rings.charAt(i)==\\'G\\')\\n            {\\n                htab.put(v,htab.get(v)+\"G\");\\n            }\\n            else if(rings.charAt(i)==\\'B\\')\\n            {\\n                htab.put(v,htab.get(v)+\"B\");\\n            }\\n        }\\n        \\n        int count =0;\\n        for(Map.Entry<Integer,String> h:htab.entrySet())\\n        {\\n            if((h.getValue()).contains(\"R\") && (h.getValue()).contains(\"G\") && (h.getValue()).contains(\"B\"))\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "class Solution {\\n    public int countPoints(String rings) \\n    {\\n        Hashtable<Integer,String> htab = new Hashtable<>();\\n        for(int i=0;i<rings.length();i+=2)\\n        {\\n            int v=rings.charAt(i+1)-\\'0\\';\\n            if(rings.charAt(i)==\\'R\\')\\n            {\\n                htab.put(v,htab.get(v)+\"R\");\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1764036,
                "title": "hashing-solution-0ms-time-complexity",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        if(rings.size() <  6)\\n            return 0;\\n        unordered_map<char,set<char>> s;\\n        for(int i = rings.size()-1;i>0;i-=2) \\n           s[rings[i]].insert(rings[i-1]);\\n        int count = 0;\\n        for(auto x : s)\\n            if(x.second.size() == 3)\\n                count++;\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        if(rings.size() <  6)\\n            return 0;\\n        unordered_map<char,set<char>> s;\\n        for(int i = rings.size()-1;i>0;i-=2) \\n           s[rings[i]].insert(rings[i-1]);\\n        int count = 0;\\n        for(auto x : s)\\n            if(x.second.size() == 3)\\n                count++;\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1759018,
                "title": "java-easy-and-fast-solution-using-hashset-runtime-0ms",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        HashSet<Character>[] set=new HashSet[10];\\n        for(int i=0;i<10;i++)\\n        {\\n            set[i]=new HashSet();\\n        }\\n        char arr[]=rings.toCharArray();\\n        for(int i=0;i<arr.length;i+=2)\\n        {\\n            set[arr[i+1]-\\'0\\'].add(arr[i]);\\n        }\\n        int count=0;\\n        for(int i=0;i<10;i++)\\n        {\\n            if(set[i].size()==3)\\n                count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        HashSet<Character>[] set=new HashSet[10];\\n        for(int i=0;i<10;i++)\\n        {\\n            set[i]=new HashSet();\\n        }\\n        char arr[]=rings.toCharArray();\\n        for(int i=0;i<arr.length;i+=2)\\n        {\\n            set[arr[i+1]-\\'0\\'].add(arr[i]);\\n        }\\n        int count=0;\\n        for(int i=0;i<10;i++)\\n        {\\n            if(set[i].size()==3)\\n                count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1742284,
                "title": "c-100-the-fastest-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        vector<int> R(10,0);\\n        vector<int> G(10,0);\\n        vector<int> B(10,0);\\n        for(int i=0;i<rings.length();i+=2){\\n            string s=\"\";\\n            if(rings[i]==\\'R\\'){\\n                s += rings[i+1];\\n                int n =stoi(s);\\n                R[n]=1;\\n            } else if(rings[i]==\\'G\\'){\\n                s += rings[i+1];\\n                int n =stoi(s);\\n                G[n]=1;\\n            } else if(rings[i]==\\'B\\'){\\n                s += rings[i+1];\\n                int n =stoi(s);\\n                B[n]=1;\\n            }\\n        }\\n        int num=0;\\n        for(int i=0;i<10;i++){\\n            if(R[i]==1 && G[i]==1 && B[i]==1)\\n                num++;\\n        }\\n        return num;\\n    }\\n};\\n```\\nPlease upvote!",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        vector<int> R(10,0);\\n        vector<int> G(10,0);\\n        vector<int> B(10,0);\\n        for(int i=0;i<rings.length();i+=2){\\n            string s=\"\";\\n            if(rings[i]==\\'R\\'){\\n                s += rings[i+1];\\n                int n =stoi(s);\\n                R[n]=1;\\n            } else if(rings[i]==\\'G\\'){\\n                s += rings[i+1];\\n                int n =stoi(s);\\n                G[n]=1;\\n            } else if(rings[i]==\\'B\\'){\\n                s += rings[i+1];\\n                int n =stoi(s);\\n                B[n]=1;\\n            }\\n        }\\n        int num=0;\\n        for(int i=0;i<10;i++){\\n            if(R[i]==1 && G[i]==1 && B[i]==1)\\n                num++;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1736233,
                "title": "simple-python-solution-memory-usage-13-9-mb-less-than-98-97-of-python3",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        lst = []\\n        for i in range(0,len(rings),2):\\n            lst.append(rings[i:i+2])\\n        res = 0\\n        for i in range(10):\\n            if (f\\'R{i}\\' in lst) and (f\\'G{i}\\' in lst) and (f\\'B{i}\\' in lst):\\n                res += 1\\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        lst = []\\n        for i in range(0,len(rings),2):\\n            lst.append(rings[i:i+2])\\n        res = 0\\n        for i in range(10):\\n            if (f\\'R{i}\\' in lst) and (f\\'G{i}\\' in lst) and (f\\'B{i}\\' in lst):\\n                res += 1\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1728803,
                "title": "easy-javascript-solution",
                "content": "```\\nvar countPoints = function(rings) {\\n    let output = 0\\n    let rod = []\\n    for(let i =0; i < rings.length; i++){\\n       if(i % 2 !== 0){\\n        rod.push(rings[i])\\n       } \\n    }\\n    let newSet = [...new Set(rod)]\\n    for(let i = 0; i < newSet.length; i++){\\n        let found = []\\n        for(let j = 0; j < rings.length; j++){\\n        if(newSet[i] === rings[j]){\\n            found.push(rings[j - 1])\\n        }\\n        }\\n        if(found.includes(\\'R\\') && found.includes(\\'G\\') && found.includes(\\'B\\')){\\n            output++\\n        }\\n    }\\n    return output  \\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPoints = function(rings) {\\n    let output = 0\\n    let rod = []\\n    for(let i =0; i < rings.length; i++){\\n       if(i % 2 !== 0){\\n        rod.push(rings[i])\\n       } \\n    }\\n    let newSet = [...new Set(rod)]\\n    for(let i = 0; i < newSet.length; i++){\\n        let found = []\\n        for(let j = 0; j < rings.length; j++){\\n        if(newSet[i] === rings[j]){\\n            found.push(rings[j - 1])\\n        }\\n        }\\n        if(found.includes(\\'R\\') && found.includes(\\'G\\') && found.includes(\\'B\\')){\\n            output++\\n        }\\n    }\\n    return output  \\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1725194,
                "title": "simple-100-faster-o-n-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int rlen = rings.length();\\n        vector<int> R (10, 0);\\n        vector<int> G (10, 0);\\n        vector<int> B (10, 0);\\n        \\n        for (int i = 0; i < rings.length(); i= i + 2)\\n        {\\n            if (rings[i] == \\'R\\')\\n            {\\n                R[rings[i+1]-\\'0\\']++;\\n            }\\n            else if (rings[i] == \\'G\\')\\n            {\\n                G[rings[i+1]-\\'0\\']++;\\n            }\\n            else if (rings[i] == \\'B\\')\\n            {\\n                B[rings[i+1]-\\'0\\']++;\\n            }\\n        }\\n        \\n        int ans = 0;\\n        for (int i = 0; i < 10; i++)\\n        {\\n\\t    // If rod[i] contains all three rings, increment rod count\\n            if (R[i] > 0 && G[i] > 0 && B[i] > 0)\\n            {\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPoints(string rings) {\\n        int rlen = rings.length();\\n        vector<int> R (10, 0);\\n        vector<int> G (10, 0);\\n        vector<int> B (10, 0);\\n        \\n        for (int i = 0; i < rings.length(); i= i + 2)\\n        {\\n            if (rings[i] == \\'R\\')\\n            {\\n                R[rings[i+1]-\\'0\\']++;\\n            }\\n            else if (rings[i] == \\'G\\')\\n            {\\n                G[rings[i+1]-\\'0\\']++;\\n            }\\n            else if (rings[i] == \\'B\\')\\n            {\\n                B[rings[i+1]-\\'0\\']++;\\n            }\\n        }\\n        \\n        int ans = 0;\\n        for (int i = 0; i < 10; i++)\\n        {\\n\\t    // If rod[i] contains all three rings, increment rod count\\n            if (R[i] > 0 && G[i] > 0 && B[i] > 0)\\n            {\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1702581,
                "title": "java-intuitive-very-simple-all-test-cases-passed",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        \\n        HashMap<Integer, HashSet<Character>> map = new HashMap<>();\\n        char [] ring = rings.toCharArray();\\n        int count = 0;\\n        \\n        for(int i = 0; i < ring.length; i += 2){\\n            \\n            char ch = ring[i];\\n            int num = Character.getNumericValue(ring[i + 1]);\\n            \\n            if(map.containsKey(num)){\\n                HashSet<Character> set = map.get(num);\\n                set.add(ch);\\n                map.put(num, set);\\n            }\\n            else{\\n                HashSet<Character> set = new HashSet<>();\\n                set.add(ch);\\n                map.put(num,set);\\n            }\\n        }\\n        \\n        for(Integer i : map.keySet()){\\n            HashSet<Character> set = map.get(i);\\n            if(set.size() == 3)\\n                count++;\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        \\n        HashMap<Integer, HashSet<Character>> map = new HashMap<>();\\n        char [] ring = rings.toCharArray();\\n        int count = 0;\\n        \\n        for(int i = 0; i < ring.length; i += 2){\\n            \\n            char ch = ring[i];\\n            int num = Character.getNumericValue(ring[i + 1]);\\n            \\n            if(map.containsKey(num)){\\n                HashSet<Character> set = map.get(num);\\n                set.add(ch);\\n                map.put(num, set);\\n            }\\n            else{\\n                HashSet<Character> set = new HashSet<>();\\n                set.add(ch);\\n                map.put(num,set);\\n            }\\n        }\\n        \\n        for(Integer i : map.keySet()){\\n            HashSet<Character> set = map.get(i);\\n            if(set.size() == 3)\\n                count++;\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1702456,
                "title": "java-solution-0-ms-faster-than-100-00-of-java-online-submissions",
                "content": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n         int count = 0;\\n         int[] r = new int[10];\\n         int[] g = new int[10];\\n         int[] b = new int[10];\\n         for(int i=0; i<rings.length(); i += 2) {\\n        \\t int p = rings.charAt(i+1) - \\'0\\';\\n        \\t char c = rings.charAt(i);\\n        \\t if(c == \\'B\\') {\\n        \\t\\t b[p]++;\\n        \\t }\\n        \\t else if(c == \\'R\\') {\\n        \\t\\t r[p]++;\\n        \\t }\\n        \\t else if(c == \\'G\\') {\\n        \\t\\t g[p]++;\\n        \\t }\\n         }\\n         for(int i=0; i<10; i++) {\\n        \\t if(r[i] != 0 && g[i] != 0 && b[i] != 0) {\\n        \\t\\t count++;\\n        \\t }\\n         }\\n         return count;\\n     }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n         int count = 0;\\n         int[] r = new int[10];\\n         int[] g = new int[10];\\n         int[] b = new int[10];\\n         for(int i=0; i<rings.length(); i += 2) {\\n        \\t int p = rings.charAt(i+1) - \\'0\\';\\n        \\t char c = rings.charAt(i);\\n        \\t if(c == \\'B\\') {\\n        \\t\\t b[p]++;\\n        \\t }\\n        \\t else if(c == \\'R\\') {\\n        \\t\\t r[p]++;\\n        \\t }\\n        \\t else if(c == \\'G\\') {\\n        \\t\\t g[p]++;\\n        \\t }\\n         }\\n         for(int i=0; i<10; i++) {\\n        \\t if(r[i] != 0 && g[i] != 0 && b[i] != 0) {\\n        \\t\\t count++;\\n        \\t }\\n         }\\n         return count;\\n     }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1676553,
                "title": "rust-linear-scan-with-hashset-or-bitmask",
                "content": "Solution - [github](https://github.com/An7One/leetcode-solutions-rust-an7one/tree/main/src/leetcode/lvl1/lc2103)\\n\\n<b>Problem List</b>\\n#LinearScan - [github](https://github.com/An7One/leetcode-problems-by-tag-an7one/tree/main/txt/by_technique/n_pointers/by_pointer_amount/linear_scan)\\n#BitMask - [github](https://github.com/An7One/leetcode-problems-by-tag-an7one/blob/main/txt/by_technique/bit_manipulation/bit_masking.txt)\\n\\n```\\n/// @author: Leon\\n/// https://leetcode.com/problems/rings-and-rods/\\n/// Time Complexity:    O(`RANGE`)\\n/// Space Complexity:   O(`len_r`)\\nimpl Solution {\\n    pub fn count_points(rings: String) -> i32 {\\n        const RANGE: usize = 100 + 7;\\n        let len_r: usize = rings.len();\\n        let rod_to_ring: Vec<HashSet<char>> = {\\n            let mut rod_to_ring: Vec<HashSet<char>> = vec![HashSet::new(); RANGE];\\n            let chs: Vec<char> = rings.chars().collect();\\n            for idx in (0..len_r).step_by(2) {\\n                rod_to_ring[chs[idx + 1] as usize - \\'0\\' as usize].insert(chs[idx]);\\n            }\\n            rod_to_ring\\n        };\\n        let mut cnt: u8 = 0;\\n        for set in rod_to_ring.into_iter() {\\n            if set.len() == 3 {\\n                cnt += 1;\\n            }\\n        }\\n        cnt as i32\\n    }\\n}\\n```\\n\\n```\\n/// @author: Leon\\n/// https://leetcode.com/problems/rings-and-rods/\\n/// Time Complexity:    O(`RANGE`)\\n/// Space Complexity:   O(`len_r`)\\nimpl Solution {\\n    pub fn count_points(rings: String) -> i32 {\\n        const RANGE: usize = 100;\\n        let len_r: usize = rings.len();\\n        let rod_to_ring: Vec<u8> = {\\n            let mut res: Vec<u8> = vec![0; RANGE];\\n            let chs: Vec<char> = rings.chars().collect();\\n            for idx_chs in (0..len_r).step_by(2) {\\n                let idx: usize = chs[idx_chs + 1] as usize - \\'0\\' as usize;\\n                res[idx] = res[idx] | (1 << Self::get_hash(chs[idx_chs]));\\n            }\\n            res\\n        };\\n        let cnt: u8 = {\\n            let mut cnt: u8 = 0;\\n            for freq in rod_to_ring {\\n                if freq == 0b111 {\\n                    cnt += 1;\\n                }\\n            }\\n            cnt\\n        };\\n        cnt as i32\\n    }\\n    fn get_hash(ch: char) -> u8 {\\n        match ch {\\n            \\'B\\' => 0,\\n            \\'G\\' => 1,\\n            \\'R\\' => 2,\\n            _ => unreachable!(),\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Bitmask"
                ],
                "code": "```\\n/// @author: Leon\\n/// https://leetcode.com/problems/rings-and-rods/\\n/// Time Complexity:    O(`RANGE`)\\n/// Space Complexity:   O(`len_r`)\\nimpl Solution {\\n    pub fn count_points(rings: String) -> i32 {\\n        const RANGE: usize = 100 + 7;\\n        let len_r: usize = rings.len();\\n        let rod_to_ring: Vec<HashSet<char>> = {\\n            let mut rod_to_ring: Vec<HashSet<char>> = vec![HashSet::new(); RANGE];\\n            let chs: Vec<char> = rings.chars().collect();\\n            for idx in (0..len_r).step_by(2) {\\n                rod_to_ring[chs[idx + 1] as usize - \\'0\\' as usize].insert(chs[idx]);\\n            }\\n            rod_to_ring\\n        };\\n        let mut cnt: u8 = 0;\\n        for set in rod_to_ring.into_iter() {\\n            if set.len() == 3 {\\n                cnt += 1;\\n            }\\n        }\\n        cnt as i32\\n    }\\n}\\n```\n```\\n/// @author: Leon\\n/// https://leetcode.com/problems/rings-and-rods/\\n/// Time Complexity:    O(`RANGE`)\\n/// Space Complexity:   O(`len_r`)\\nimpl Solution {\\n    pub fn count_points(rings: String) -> i32 {\\n        const RANGE: usize = 100;\\n        let len_r: usize = rings.len();\\n        let rod_to_ring: Vec<u8> = {\\n            let mut res: Vec<u8> = vec![0; RANGE];\\n            let chs: Vec<char> = rings.chars().collect();\\n            for idx_chs in (0..len_r).step_by(2) {\\n                let idx: usize = chs[idx_chs + 1] as usize - \\'0\\' as usize;\\n                res[idx] = res[idx] | (1 << Self::get_hash(chs[idx_chs]));\\n            }\\n            res\\n        };\\n        let cnt: u8 = {\\n            let mut cnt: u8 = 0;\\n            for freq in rod_to_ring {\\n                if freq == 0b111 {\\n                    cnt += 1;\\n                }\\n            }\\n            cnt\\n        };\\n        cnt as i32\\n    }\\n    fn get_hash(ch: char) -> u8 {\\n        match ch {\\n            \\'B\\' => 0,\\n            \\'G\\' => 1,\\n            \\'R\\' => 2,\\n            _ => unreachable!(),\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1667675,
                "title": "most-elegant-solution-in-c",
                "content": "```\\nint countPoints(char * rings){\\n    int i = 0, ans = 0, l = strlen(rings);\\n    int a[10] = {0};\\n    \\n    while(i < l){\\n        switch(rings[i]){\\n                case \\'R\\':\\n                    a[rings[i + 1] - \\'0\\'] |= 0b1;\\n                    break;\\n                case \\'G\\':\\n                    a[rings[i + 1] - \\'0\\'] |= 0b10;\\n                    break;\\n                case \\'B\\':\\n                    a[rings[i + 1] - \\'0\\'] |= 0b100;\\n                    break;\\n        }        \\n        i += 2;\\n    }\\n    \\n    for(i = 0; i < 10; i++){\\n        if(a[i] == 7)\\n            ans++;\\n    }\\n    \\n    return ans;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint countPoints(char * rings){\\n    int i = 0, ans = 0, l = strlen(rings);\\n    int a[10] = {0};\\n    \\n    while(i < l){\\n        switch(rings[i]){\\n                case \\'R\\':\\n                    a[rings[i + 1] - \\'0\\'] |= 0b1;\\n                    break;\\n                case \\'G\\':\\n                    a[rings[i + 1] - \\'0\\'] |= 0b10;\\n                    break;\\n                case \\'B\\':\\n                    a[rings[i + 1] - \\'0\\'] |= 0b100;\\n                    break;\\n        }        \\n        i += 2;\\n    }\\n    \\n    for(i = 0; i < 10; i++){\\n        if(a[i] == 7)\\n            ans++;\\n    }\\n    \\n    return ans;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1659676,
                "title": "map-and-set-c-100-fastest",
                "content": "``` \\nint countPoints(string rings) {\\n        map<char,set<int>>hash; \\n        for(int i = 0; i < rings.length(); i+=2) {\\n            hash[rings[i]].insert(rings[i+1]-\\'0\\');  \\n        }\\n        int result = 0;  \\n        for(int i = 0; i < 10; ++i) { \\n            if(hash[\\'R\\'].find(i) != hash[\\'R\\'].end() && hash[\\'B\\'].find(i) != hash[\\'B\\'].end() &&hash[\\'G\\'].find(i) != hash[\\'G\\'].end())\\n            {\\n                result += 1; \\n            }\\n        }\\n        return result; \\n    }\\n\\n```",
                "solutionTags": [],
                "code": "``` \\nint countPoints(string rings) {\\n        map<char,set<int>>hash; \\n        for(int i = 0; i < rings.length(); i+=2) {\\n            hash[rings[i]].insert(rings[i+1]-\\'0\\');  \\n        }\\n        int result = 0;  \\n        for(int i = 0; i < 10; ++i) { \\n            if(hash[\\'R\\'].find(i) != hash[\\'R\\'].end() && hash[\\'B\\'].find(i) != hash[\\'B\\'].end() &&hash[\\'G\\'].find(i) != hash[\\'G\\'].end())\\n            {\\n                result += 1; \\n            }\\n        }\\n        return result; \\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1658915,
                "title": "easy-java-solution",
                "content": "class Solution {\\n    public int countPoints(String rings) {\\n        Map<Integer,Set<Character>> hm=new HashMap<>();\\n        int ans=0;\\n        boolean vis[]=new boolean[10];\\n        for(int i=0;i<rings.length();i++)\\n        {\\n            char c1=rings.charAt(i);\\n            i++;\\n            int c2=rings.charAt(i)-\\'0\\';\\n            Set<Character> l=hm.getOrDefault(c2,new HashSet<>());\\n            l.add(c1);\\n            hm.put(c2,l);\\n            if(l.size()==3 && vis[c2]==false)\\n            {ans++;vis[c2]=true;}\\n        }\\n        return ans;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Ordered Set"
                ],
                "code": "class Solution {\\n    public int countPoints(String rings) {\\n        Map<Integer,Set<Character>> hm=new HashMap<>();\\n        int ans=0;\\n        boolean vis[]=new boolean[10];\\n        for(int i=0;i<rings.length();i++)\\n        {\\n            char c1=rings.charAt(i);\\n            i++;\\n            int c2=rings.charAt(i)-\\'0\\';\\n            Set<Character> l=hm.getOrDefault(c2,new HashSet<>());\\n            l.add(c1);\\n            hm.put(c2,l);\\n            if(l.size()==3 && vis[c2]==false)\\n            {ans++;vis[c2]=true;}",
                "codeTag": "Java"
            },
            {
                "id": 1657684,
                "title": "easiest-python3-solution-with-dictionary",
                "content": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        di = defaultdict(list)\\n        i=0\\n        j=1\\n        \\n        while j<len(rings):\\n            di[rings[j]].append(rings[i])\\n            i+=2\\n            j+=2\\n        \\n        for key in di:\\n            di[key] = set(di[key])\\n        for key in di:\\n            di[key] = sorted(di[key])\\n        \\n        res = 0\\n        for key in di:\\n            if di[key] == [\"B\",\"G\",\"R\"]:\\n                res +=1\\n        \\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countPoints(self, rings: str) -> int:\\n        di = defaultdict(list)\\n        i=0\\n        j=1\\n        \\n        while j<len(rings):\\n            di[rings[j]].append(rings[i])\\n            i+=2\\n            j+=2\\n        \\n        for key in di:\\n            di[key] = set(di[key])\\n        for key in di:\\n            di[key] = sorted(di[key])\\n        \\n        res = 0\\n        for key in di:\\n            if di[key] == [\"B\",\"G\",\"R\"]:\\n                res +=1\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1656951,
                "title": "java-using-hashmap-and-hashset-rings-and-rods",
                "content": "<b>Java Solution:</b>\\n```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int L = rings.length();\\n        char[] array = rings.toCharArray();\\n        HashMap<Character,HashSet<Character>> map = new HashMap<>();\\n        for(int i=1;i<L;i+=2){\\n            if(map.containsKey(array[i])){\\n                map.get(array[i]).add(array[i-1]);\\n            }else{\\n                HashSet<Character> set = new HashSet<>();\\n                set.add(array[i-1]);\\n                map.put(array[i],set);\\n            }            \\n        }\\n        int count=0;\\n        for(Map.Entry<Character,HashSet<Character>> e : map.entrySet()){\\n            if(e.getValue().size()==3){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```\\nRuntime: 1ms\\nFeel free to upvote if you like the solution.\\nDo comment down your queries and suggestions.\\nHappy Coding!!!\\n[LinkedIn](https://www.linkedin.com/in/rohitm17/)\\n[Twitter](https://twitter.com/rohit_mittal17)\\n[GitHub](https://github.com/rohitm17)\\n[Medium](https://medium.com/@rohitm17)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPoints(String rings) {\\n        int L = rings.length();\\n        char[] array = rings.toCharArray();\\n        HashMap<Character,HashSet<Character>> map = new HashMap<>();\\n        for(int i=1;i<L;i+=2){\\n            if(map.containsKey(array[i])){\\n                map.get(array[i]).add(array[i-1]);\\n            }else{\\n                HashSet<Character> set = new HashSet<>();\\n                set.add(array[i-1]);\\n                map.put(array[i],set);\\n            }            \\n        }\\n        int count=0;\\n        for(Map.Entry<Character,HashSet<Character>> e : map.entrySet()){\\n            if(e.getValue().size()==3){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1652915,
                "title": "100-faster-java-solution",
                "content": "```Java\\nclass Solution {\\n    public int countPoints(String rings) {\\n        char [] arr = rings.toCharArray();\\n        int [] rods = new int[10];\\n        Map<Character, Integer> map = new HashMap(){{\\n            put(\\'R\\', 0); put(\\'G\\', 1); put(\\'B\\', 2);\\n        }};\\n        for(int i = 0; i < arr.length; i += 2) {\\n            char C = arr[i];\\n            int P = arr[i+1] - \\'0\\';\\n            rods[P] = rods[P] | 1 << map.get(C);\\n        }\\n        int count = 0;\\n        for(int i =0; i < 10; i++) {\\n            if(rods[i] == 7) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```Java\\nclass Solution {\\n    public int countPoints(String rings) {\\n        char [] arr = rings.toCharArray();\\n        int [] rods = new int[10];\\n        Map<Character, Integer> map = new HashMap(){{\\n            put(\\'R\\', 0); put(\\'G\\', 1); put(\\'B\\', 2);\\n        }};\\n        for(int i = 0; i < arr.length; i += 2) {\\n            char C = arr[i];\\n            int P = arr[i+1] - \\'0\\';\\n            rods[P] = rods[P] | 1 << map.get(C);\\n        }\\n        int count = 0;\\n        for(int i =0; i < 10; i++) {\\n            if(rods[i] == 7) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1650332,
                "title": "simple-kotlin-solution",
                "content": "```\\nclass Solution {\\n    fun countPoints(rings: String): Int {\\n        val setArr = Array(10) { return@Array HashSet<Char>() }\\n        \\n        for (index in rings.indices step 2) {\\n            setArr[rings[index+1] - \\'0\\'].add(rings[index])\\n        }\\n\\n        var count = 0\\n        for (element in setArr) {\\n            if (element.size == 3) count ++\\n        }\\n        return count\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun countPoints(rings: String): Int {\\n        val setArr = Array(10) { return@Array HashSet<Char>() }\\n        \\n        for (index in rings.indices step 2) {\\n            setArr[rings[index+1] - \\'0\\'].add(rings[index])\\n        }\\n\\n        var count = 0\\n        for (element in setArr) {\\n            if (element.size == 3) count ++\\n        }\\n        return count\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1780069,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "Damn it, I am having a cold and a headache and I thought I need to return the index that contains RGB, I just wasted 30 minutes asking why is passing 33 testcases "
                    },
                    {
                        "username": "shubhampawar1621998",
                        "content": "happens to the best of us"
                    },
                    {
                        "username": "BatMe",
                        "content": "This question is actually good, don\\'t look at the acceptance rate and consider yourself dumb, most must have seen the solution and then coded it themselves. \\nHint: [rod number is key and value will be SET of colors]"
                    },
                    {
                        "username": "oppoa5sraj",
                        "content": "one of my best question @string"
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "very very nice question !! my noob hint : think of  key values pairs but values as arrays "
                    },
                    {
                        "username": "BatMe",
                        "content": "[@sidney3](/sidney3)  He probably said array to not spoil the entire question perhaps?"
                    },
                    {
                        "username": "sidney3",
                        "content": "perhaps instead values as sets? for constant time checking"
                    }
                ]
            },
            {
                "id": 1990092,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "Damn it, I am having a cold and a headache and I thought I need to return the index that contains RGB, I just wasted 30 minutes asking why is passing 33 testcases "
                    },
                    {
                        "username": "shubhampawar1621998",
                        "content": "happens to the best of us"
                    },
                    {
                        "username": "BatMe",
                        "content": "This question is actually good, don\\'t look at the acceptance rate and consider yourself dumb, most must have seen the solution and then coded it themselves. \\nHint: [rod number is key and value will be SET of colors]"
                    },
                    {
                        "username": "oppoa5sraj",
                        "content": "one of my best question @string"
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "very very nice question !! my noob hint : think of  key values pairs but values as arrays "
                    },
                    {
                        "username": "BatMe",
                        "content": "[@sidney3](/sidney3)  He probably said array to not spoil the entire question perhaps?"
                    },
                    {
                        "username": "sidney3",
                        "content": "perhaps instead values as sets? for constant time checking"
                    }
                ]
            },
            {
                "id": 1868388,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "Damn it, I am having a cold and a headache and I thought I need to return the index that contains RGB, I just wasted 30 minutes asking why is passing 33 testcases "
                    },
                    {
                        "username": "shubhampawar1621998",
                        "content": "happens to the best of us"
                    },
                    {
                        "username": "BatMe",
                        "content": "This question is actually good, don\\'t look at the acceptance rate and consider yourself dumb, most must have seen the solution and then coded it themselves. \\nHint: [rod number is key and value will be SET of colors]"
                    },
                    {
                        "username": "oppoa5sraj",
                        "content": "one of my best question @string"
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "very very nice question !! my noob hint : think of  key values pairs but values as arrays "
                    },
                    {
                        "username": "BatMe",
                        "content": "[@sidney3](/sidney3)  He probably said array to not spoil the entire question perhaps?"
                    },
                    {
                        "username": "sidney3",
                        "content": "perhaps instead values as sets? for constant time checking"
                    }
                ]
            },
            {
                "id": 1823318,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "Damn it, I am having a cold and a headache and I thought I need to return the index that contains RGB, I just wasted 30 minutes asking why is passing 33 testcases "
                    },
                    {
                        "username": "shubhampawar1621998",
                        "content": "happens to the best of us"
                    },
                    {
                        "username": "BatMe",
                        "content": "This question is actually good, don\\'t look at the acceptance rate and consider yourself dumb, most must have seen the solution and then coded it themselves. \\nHint: [rod number is key and value will be SET of colors]"
                    },
                    {
                        "username": "oppoa5sraj",
                        "content": "one of my best question @string"
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "very very nice question !! my noob hint : think of  key values pairs but values as arrays "
                    },
                    {
                        "username": "BatMe",
                        "content": "[@sidney3](/sidney3)  He probably said array to not spoil the entire question perhaps?"
                    },
                    {
                        "username": "sidney3",
                        "content": "perhaps instead values as sets? for constant time checking"
                    }
                ]
            }
        ]
    }
]