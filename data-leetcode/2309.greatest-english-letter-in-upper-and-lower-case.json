[
    {
        "title": "Greatest English Letter in Upper and Lower Case",
        "question_content": "Given a string of English letters s, return the greatest English letter which occurs as both a lowercase and uppercase letter in s. The returned letter should be in uppercase. If no such letter exists, return an empty string.\nAn English letter b is greater than another letter a if b appears after a in the English alphabet.\n&nbsp;\nExample 1:\n\nInput: s = \"lEeTcOdE\"\nOutput: \"E\"\nExplanation:\nThe letter 'E' is the only letter to appear in both lower and upper case.\n\nExample 2:\n\nInput: s = \"arRAzFif\"\nOutput: \"R\"\nExplanation:\nThe letter 'R' is the greatest letter to appear in both lower and upper case.\nNote that 'A' and 'F' also appear in both lower and upper case, but 'R' is greater than 'F' or 'A'.\n\nExample 3:\n\nInput: s = \"AbCdEfGhIjK\"\nOutput: \"\"\nExplanation:\nThere is no letter that appears in both lower and upper case.\n\n&nbsp;\nConstraints:\n\n\t1 <= s.length <= 1000\n\ts consists of lowercase and uppercase English letters.",
        "solutions": [
            {
                "id": 2168442,
                "title": "counter",
                "content": "**Python 3**\\n```python\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        cnt = Counter(s)\\n        return next((u for u in reversed(ascii_uppercase) if cnt[u] and cnt[u.lower()]), \"\")\\n```\\n**C++**\\n```cpp\\nstring greatestLetter(string s) {\\n    int cnt[128] = {};\\n    for (auto ch : s)\\n        ++cnt[ch];\\n    for (auto ch = \\'Z\\'; ch >= \\'A\\'; --ch)\\n        if (cnt[ch] && cnt[ch + \\'a\\' - \\'A\\'])\\n            return string(1, ch);\\n    return \"\";\\n}\\n```",
                "solutionTags": [
                    "Python3",
                    "C"
                ],
                "code": "```python\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        cnt = Counter(s)\\n        return next((u for u in reversed(ascii_uppercase) if cnt[u] and cnt[u.lower()]), \"\")\\n```\n```cpp\\nstring greatestLetter(string s) {\\n    int cnt[128] = {};\\n    for (auto ch : s)\\n        ++cnt[ch];\\n    for (auto ch = \\'Z\\'; ch >= \\'A\\'; --ch)\\n        if (cnt[ch] && cnt[ch + \\'a\\' - \\'A\\'])\\n            return string(1, ch);\\n    return \"\";\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168123,
                "title": "java-hashset",
                "content": "```\\nclass Solution\\n{\\n    public String greatestLetter(String s)\\n    {\\n        Set<Character> set = new HashSet<>();\\n        for(char ch : s.toCharArray())\\n            set.add(ch);\\n        \\n        for(char ch = \\'Z\\'; ch >= \\'A\\'; ch--)\\n            if(set.contains(ch) && set.contains((char)(\\'a\\'+(ch-\\'A\\'))))\\n               return \"\"+ch;\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n{\\n    public String greatestLetter(String s)\\n    {\\n        Set<Character> set = new HashSet<>();\\n        for(char ch : s.toCharArray())\\n            set.add(ch);\\n        \\n        for(char ch = \\'Z\\'; ch >= \\'A\\'; ch--)\\n            if(set.contains(ch) && set.contains((char)(\\'a\\'+(ch-\\'A\\'))))\\n               return \"\"+ch;\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168134,
                "title": "c-using-hashmap-simple-string-solution-short-easy",
                "content": "**Please Upvote If You like It \\uD83D\\uDE0A**\\n\\n```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) \\n    {\\n        // declare a Hahmap for storing the characters and their occurance\\n        unordered_map<char, int> mp;\\n        \\n        // counting occuracne\\n        for(auto it: s)\\n        {\\n            mp[it]++;\\n        }\\n        \\n        // sort the string so repeated char will be come with together\\n        sort(s.begin(), s.end());\\n        \\n        // declare a ans string that will store our ans\\n        string ans = \"\";\\n        for(int i=0; i<s.size(); i++)\\n        {\\n            // char curr chatr into lowercase and uppercase\\n            char l = tolower(s[i]);\\n            char u = toupper(s[i]);\\n            \\n            // if both lower and uppercase are present then store it into ans\\n            // it will take greatest english letter that have occured more than 1 because it will run till n\\n            if(mp[l] && mp[u])\\n            {\\n                ans = u;        // storeing uppercase as given in the question that we need to return uppercase \\n            }     \\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) \\n    {\\n        // declare a Hahmap for storing the characters and their occurance\\n        unordered_map<char, int> mp;\\n        \\n        // counting occuracne\\n        for(auto it: s)\\n        {\\n            mp[it]++;\\n        }\\n        \\n        // sort the string so repeated char will be come with together\\n        sort(s.begin(), s.end());\\n        \\n        // declare a ans string that will store our ans\\n        string ans = \"\";\\n        for(int i=0; i<s.size(); i++)\\n        {\\n            // char curr chatr into lowercase and uppercase\\n            char l = tolower(s[i]);\\n            char u = toupper(s[i]);\\n            \\n            // if both lower and uppercase are present then store it into ans\\n            // it will take greatest english letter that have occured more than 1 because it will run till n\\n            if(mp[l] && mp[u])\\n            {\\n                ans = u;        // storeing uppercase as given in the question that we need to return uppercase \\n            }     \\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168499,
                "title": "c-use-vector-simple-and-efficient-solution",
                "content": "**TC : O(N)\\nSC : O(2S)**\\nwhere S: total number of letters in english\\n\\n**Code:**\\n```\\nclass Solution {\\npublic:\\n    \\n    string greatestLetter(string s) \\n    {\\n        vector<int> low(26), upp(26); //storing occurences of lower and upper case letters\\n        string res = \"\";\\n    \\n        for(auto it : s) //iterate over each char and mark it in respective vector\\n        {\\n            if(it-\\'A\\'>=0 && it-\\'A\\'<26)\\n                upp[it-\\'A\\']++;\\n            else\\n                low[it-\\'a\\']++;\\n        }\\n        \\n        for(int i=25; i>=0; i--) //start from greater char \\n        {\\n            if(low[i] && upp[i]) //if char found in upp and low that will be the result\\n            {\\n                res += \\'A\\'+i; \\n                break;\\n            }\\n                \\n        }\\n        return res;  \\n    }\\n};\\n```\\n\\n**Please upvote if it helps :)**",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    string greatestLetter(string s) \\n    {\\n        vector<int> low(26), upp(26); //storing occurences of lower and upper case letters\\n        string res = \"\";\\n    \\n        for(auto it : s) //iterate over each char and mark it in respective vector\\n        {\\n            if(it-\\'A\\'>=0 && it-\\'A\\'<26)\\n                upp[it-\\'A\\']++;\\n            else\\n                low[it-\\'a\\']++;\\n        }\\n        \\n        for(int i=25; i>=0; i--) //start from greater char \\n        {\\n            if(low[i] && upp[i]) //if char found in upp and low that will be the result\\n            {\\n                res += \\'A\\'+i; \\n                break;\\n            }\\n                \\n        }\\n        return res;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2187905,
                "title": "fast-python-o-n-using-set",
                "content": "The main idea is to enumerate a char (in both its upper and lower cases) from \\'z\\' to \\'a\\', and \"probe\"  if they exist in the input string. Also implement an early return. \\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        s = set(s)\\n        upper, lower = ord(\\'Z\\'), ord(\\'z\\')\\n        for i in range(26):\\n            if chr(upper - i) in s and chr(lower - i) in s:\\n                return chr(upper - i)\\n        return \\'\\'\\n```",
                "solutionTags": [
                    "Python",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        s = set(s)\\n        upper, lower = ord(\\'Z\\'), ord(\\'z\\')\\n        for i in range(26):\\n            if chr(upper - i) in s and chr(lower - i) in s:\\n                return chr(upper - i)\\n        return \\'\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168285,
                "title": "java-o-n-solution",
                "content": "```\\npublic String greatestLetter(String s) {\\n        int[] up = new int[26];\\n        int[] low = new int[26];\\n        String ans=\"\";\\n        for(int i=0;i<s.length();i++){\\n            if(s.charAt(i)>=\\'A\\' && s.charAt(i)<=\\'Z\\'){\\n                up[s.charAt(i)-\\'A\\']=1;\\n            }else{\\n                low[s.charAt(i)-\\'a\\']=1;\\n            }\\n        }\\n        for(int i=25;i>=0;i--){\\n            if(up[i]>0 && low[i]>0){\\n                ans += (char)(i+\\'A\\');\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic String greatestLetter(String s) {\\n        int[] up = new int[26];\\n        int[] low = new int[26];\\n        String ans=\"\";\\n        for(int i=0;i<s.length();i++){\\n            if(s.charAt(i)>=\\'A\\' && s.charAt(i)<=\\'Z\\'){\\n                up[s.charAt(i)-\\'A\\']=1;\\n            }else{\\n                low[s.charAt(i)-\\'a\\']=1;\\n            }\\n        }\\n        for(int i=25;i>=0;i--){\\n            if(up[i]>0 && low[i]>0){\\n                ans += (char)(i+\\'A\\');\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2168172,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        unordered_map<int,int>m,m1;//Here i created this for gathering of elements...\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]<97){\\n                m[s[i]-\\'A\\']++;//Here i am counting Upper case letters with their values\\n            }\\n            else{\\n                m1[s[i]-\\'a\\']++;//Here Lower Case ltters\\n            }\\n        }\\n        string s1=\"\";int a=0;//Here this variable is Used to compare greater element\\n        for(auto x:m){//x.second==1 means it represents a element of Upper case letter\\n            if(x.second=1 && m1.find(x.first)!=m1.end() && x.first>=a){//x.first>=a this is for comapring of greater element\\n                  s1=\\'A\\'+x.first;a=x.first;        //m1.find(x.first)!=m1.end() this is checking whether lower case letter is there or not\\n            }\\n        }\\n        return s1;\\n    }\\n};\\nIf you have any query you can ask....\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        unordered_map<int,int>m,m1;//Here i created this for gathering of elements...\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]<97){\\n                m[s[i]-\\'A\\']++;//Here i am counting Upper case letters with their values\\n            }\\n            else{\\n                m1[s[i]-\\'a\\']++;//Here Lower Case ltters\\n            }\\n        }\\n        string s1=\"\";int a=0;//Here this variable is Used to compare greater element\\n        for(auto x:m){//x.second==1 means it represents a element of Upper case letter\\n            if(x.second=1 && m1.find(x.first)!=m1.end() && x.first>=a){//x.first>=a this is for comapring of greater element\\n                  s1=\\'A\\'+x.first;a=x.first;        //m1.find(x.first)!=m1.end() this is checking whether lower case letter is there or not\\n            }\\n        }\\n        return s1;\\n    }\\n};\\nIf you have any query you can ask....\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2286769,
                "title": "python-solution-beats-86-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        \\n        new = \"\"\\n        \\n        for i in s:\\n            if i.isupper() and i.lower() in s:\\n                if i>new:\\n                    new = i.upper()\\n                        \\n        return new\\n\\t\\t\\n```\\t\\t",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        \\n        new = \"\"\\n        \\n        for i in s:\\n            if i.isupper() and i.lower() in s:\\n                if i>new:\\n                    new = i.upper()\\n                        \\n        return new\\n\\t\\t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2185818,
                "title": "javascript-set",
                "content": "Create a `set` of unique letters in `s`, then check from `Z` to `A`.\\n\\n```\\nvar greatestLetter = function(s) {\\n    let set=new Set(s.split(\"\"));\\n\\t// ASCII(A-Z, a-z)=(65-90, 97-122).\\n    for(let i=90; i>=65; i--){\\n        if(set.has(String.fromCharCode(i)) && set.has(String.fromCharCode(i+32))){\\n            return String.fromCharCode(i);\\n        }\\n    }\\n    return \"\";\\n};\\n```\\n\\nThanks for your reading and **up-voting** :)\\n\\n**\\u2B50 Check [HERE](https://github.com/Lynn19950915/LeetCode_King) for my full Leetcode Notes ~**",
                "solutionTags": [
                    "JavaScript",
                    "Ordered Set"
                ],
                "code": "```\\nvar greatestLetter = function(s) {\\n    let set=new Set(s.split(\"\"));\\n\\t// ASCII(A-Z, a-z)=(65-90, 97-122).\\n    for(let i=90; i>=65; i--){\\n        if(set.has(String.fromCharCode(i)) && set.has(String.fromCharCode(i+32))){\\n            return String.fromCharCode(i);\\n        }\\n    }\\n    return \"\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2180598,
                "title": "javascript-solution-simple-understandable",
                "content": "JavaScript code:\\n```\\nvar greatestLetter = function(s) {\\n    let sorted = s.split(\"\").sort();\\n    let i = sorted.length-1\\n    console.log(i)\\n    while (i>=0 && sorted[i].toLowerCase()==sorted[i]) {\\n        let char = sorted[i].toUpperCase()\\n        if (sorted.includes(char)) {\\n            return char.toString()\\n        }\\n        console.log(i)\\n        i--\\n    } return \"\"\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nvar greatestLetter = function(s) {\\n    let sorted = s.split(\"\").sort();\\n    let i = sorted.length-1\\n    console.log(i)\\n    while (i>=0 && sorted[i].toLowerCase()==sorted[i]) {\\n        let char = sorted[i].toUpperCase()\\n        if (sorted.includes(char)) {\\n            return char.toString()\\n        }\\n        console.log(i)\\n        i--\\n    } return \"\"\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2168133,
                "title": "c-easy-hashmap-solution-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        //store string in a hashmap for easy finding\\n        unordered_map<char, int> mpp;\\n        for(auto it: s){\\n            mpp[it]++;\\n        }\\n        \\n        sort(s.begin(), s.end());   //because we want greater value at the end\\n        string str = \"\";\\n        for(int i=0; i<s.size(); i++){\\n            \\n            char l = tolower(s[i]);\\n            char u = toupper(s[i]);\\n            // cout<<l<<\" \"<<u<<endl;\\n            \\n            if(mpp[l] && mpp[u]){   //if we have both lower and upper case for a letter\\n                str = u;\\n            }     \\n        }\\n        \\n        return str;\\n    }\\n};\\n```\\n\\n**Please do upvote if you like the solution:)**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        //store string in a hashmap for easy finding\\n        unordered_map<char, int> mpp;\\n        for(auto it: s){\\n            mpp[it]++;\\n        }\\n        \\n        sort(s.begin(), s.end());   //because we want greater value at the end\\n        string str = \"\";\\n        for(int i=0; i<s.size(); i++){\\n            \\n            char l = tolower(s[i]);\\n            char u = toupper(s[i]);\\n            // cout<<l<<\" \"<<u<<endl;\\n            \\n            if(mpp[l] && mpp[u]){   //if we have both lower and upper case for a letter\\n                str = u;\\n            }     \\n        }\\n        \\n        return str;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2168132,
                "title": "single-pass-check-pair-o-n-time-and-constant-space",
                "content": "**Algorithm**:\\n+ Make array of pair of size 26.\\n+ For every index corresponding to its lowercase has two places -> one for lower and one for upper, Just mark corresponding place\\n+ When we encounter the character with both upper and lower as true, keep updating maximum.\\n# C++  \\n    string greatestLetter(string s) {\\n        string ans=\"\";\\n        pair<bool,bool> cnt[26];\\n        for(auto i:s){\\n\\t\\t    char up= toupper(i), lw= tolower(i);\\n            if(islower(i)) cnt[lw-\\'a\\'].first=true;     else cnt[lw-\\'a\\'].second=true;\\n\\t\\t\\t//if both are true\\n            if(cnt[lw-\\'a\\'].first and cnt[lw-\\'a\\'].second) ans= max(ans,{up});\\n        }\\n        return ans;\\n    }\\n**Time** - O(N)\\n**Space** - O(26) = O(1)",
                "solutionTags": [
                    "C"
                ],
                "code": "**Algorithm**:\\n+ Make array of pair of size 26.\\n+ For every index corresponding to its lowercase has two places -> one for lower and one for upper, Just mark corresponding place\\n+ When we encounter the character with both upper and lower as true, keep updating maximum.\\n# C++  \\n    string greatestLetter(string s) {\\n        string ans=\"\";\\n        pair<bool,bool> cnt[26];\\n        for(auto i:s){\\n\\t\\t    char up= toupper(i), lw= tolower(i);\\n            if(islower(i)) cnt[lw-\\'a\\'].first=true;     else cnt[lw-\\'a\\'].second=true;\\n\\t\\t\\t//if both are true\\n            if(cnt[lw-\\'a\\'].first and cnt[lw-\\'a\\'].second) ans= max(ans,{up});\\n        }\\n        return ans;\\n    }\\n**Time** - O(N)\\n**Space** - O(26) = O(1)",
                "codeTag": "Unknown"
            },
            {
                "id": 2731538,
                "title": "python-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        s = set(s)\\n        upper, lower = ord(\\'Z\\'), ord(\\'z\\')\\n        for i in range(26):\\n            if chr(upper - i) in s and chr(lower - i) in s:\\n                return chr(upper - i)\\n        return \\'\\'\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        s = set(s)\\n        upper, lower = ord(\\'Z\\'), ord(\\'z\\')\\n        for i in range(26):\\n            if chr(upper - i) in s and chr(lower - i) in s:\\n                return chr(upper - i)\\n        return \\'\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2178385,
                "title": "java-runtime-1ms-easy-solution-with-comments",
                "content": "class Solution {\\n    public String greatestLetter(String s) {\\n        \\n        char c=\\'z\\', C=\\'Z\\';\\n        \\n        for(int i=0; i<26; i++){\\n            // check if both upper and lowercase of the character exist\\n            // if it does return the character else decrement the character\\n            // by one\\n            if(s.indexOf(c)!=-1 && s.indexOf(C)!=-1)\\n                return \"\"+C;\\n            else{\\n                c--;\\n                C--;\\n            }\\n        }\\n        \\n        return \"\";\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public String greatestLetter(String s) {\\n        \\n        char c=\\'z\\', C=\\'Z\\';\\n        \\n        for(int i=0; i<26; i++){\\n            // check if both upper and lowercase of the character exist\\n            // if it does return the character else decrement the character\\n            // by one\\n            if(s.indexOf(c)!=-1 && s.indexOf(C)!=-1)\\n                return \"\"+C;\\n            else{\\n                c--;\\n                C--;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2169546,
                "title": "c-beginner-friendly-using-sorting-and-hashmaps",
                "content": "- We can store all the characters in an unordered map and sort the string as we need to return greater character (Lexicographically greater). \\n- Then run a loop and search of the upper case and lower case of each charater in the string. \\n- Finally when the loop approaches the end, the greater element is returned if it\\'s lower and upper case exists in the map, else an empty string is returned.\\n```\\n/*\\n//used inbuilt sorting to sort the characters in lexicographic  order\\nTime Complexity: O(N) + O(NlogN) = O(NlogN) \\n\\n//Used HashMaps to store all the characters in the string\\nSpace Complexity: O(N) \\n*/\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n\\t//storing string in a hashmap for searching in efficient time\\n        unordered_map<char,int>mp;\\n        string ans = \"\";\\n        for(auto it : s){\\n            mp[it]++;\\n        }\\n\\t\\t//sorting the characters Lexicographically, and so we will get greater characters towards the end\\n        sort(s.begin(),s.end()); \\n        for(int i=0;i<s.length();i++){\\n            char u = toupper(s[i]);\\n            char l = tolower(s[i]);\\n\\t\\t\\t//Check if both upper case and lower case character is present in the map or not\\n            if(mp[u] && mp[l]){ \\n                ans = u;\\n            }\\n        }\\n        return ans; //Return the character if present else return empty string\\n    }\\n};\\n```\\n*Happy Coding!\\uD83C\\uDF89\\uD83E\\uDD42*\\n*Please do upvote \\u2B06\\uFE0F if you like the solution :)*",
                "solutionTags": [
                    "C",
                    "String",
                    "Sorting"
                ],
                "code": "```\\n/*\\n//used inbuilt sorting to sort the characters in lexicographic  order\\nTime Complexity: O(N) + O(NlogN) = O(NlogN) \\n\\n//Used HashMaps to store all the characters in the string\\nSpace Complexity: O(N) \\n*/\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n\\t//storing string in a hashmap for searching in efficient time\\n        unordered_map<char,int>mp;\\n        string ans = \"\";\\n        for(auto it : s){\\n            mp[it]++;\\n        }\\n\\t\\t//sorting the characters Lexicographically, and so we will get greater characters towards the end\\n        sort(s.begin(),s.end()); \\n        for(int i=0;i<s.length();i++){\\n            char u = toupper(s[i]);\\n            char l = tolower(s[i]);\\n\\t\\t\\t//Check if both upper case and lower case character is present in the map or not\\n            if(mp[u] && mp[l]){ \\n                ans = u;\\n            }\\n        }\\n        return ans; //Return the character if present else return empty string\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168597,
                "title": "javascript-using-hashmap-faster-than-100-00",
                "content": "**Code explanation**\\n* Create two maps each for upper and lower case letters and store the frequency of respective characters with index as their relative position with respect to the first letter.\\nso \\'a\\' or \\'A\\' wil become 0, I will be \\'4\\' and all of the other letters will have a default frequency of 0, which is not hsown below for better readability.\\n  example: Input: s = \"lEeTcOdE\"\\n   ```\\n\\tuc=\\n\\t{\\n\\t\\t\\'4\\': 2,\\n\\t\\t\\'14\\': 1,\\n\\t\\t\\'19\\': 1,\\n\\t} \\n\\t\\n\\tlc =\\n\\t{\\n\\t\\t\\'2\\': 1,\\n\\t\\t\\'3\\': 1,\\n\\t\\t\\'4\\': 1,\\n\\t\\t\\'11\\': 1,\\n\\t}\\n\\t```\\n* \\tNow we know that we have these maps having frequency of each character and will have 26 keys. \\n* \\tWe will run a loop 26 times to account each of the keys and check if a particular letter is present in both of the maps. \\n* \\tLet\\'s say in `lEeTcOdE` we will start looking for `z or Z` first as we will start from `25th` position and see in the uc and lc map but in our case frequency for both `z` and `Z` is 0. So will move forward.\\n* \\t But in the case of position value 4 which corresponds to `e` in lc and `E` in uc have frequency greater than 0. then we found first such character, so now we will convert the position `4` to corresponsing character un Uppercase which `E` for that we will use `String.fromCharCode(\\'A\\'.charCodeAt(0) + i)` here we are adding the character code of `A` to the position value and then coverst this to charecter using the `String.fromCharCode` method\\n\\n* \\tThe benefit of looking from backward is we will encounter the greater character first else we had to take care of this seprately and we had to loop more to get the result.  According  to the question  \"**An English letter b is greater than another letter a if b appears after a in the English alphabet\"**. That is why looking from back(z) will give the result with the greater letter first and we will exit from the loop immediately.\\n```\\nvar greatestLetter = function (s) {\\n  let uc = { ...Array(26).fill(0) }, lc = { ...Array(26).fill(0) };\\n  for (let ch of s)\\n    if (isUpper(ch))\\n      ++uc[asciiDif(ch, \"A\")];\\n    else\\n      ++lc[asciiDif(ch, \"a\")];\\n  for (let i = 25; i >= 0; --i) { // iterating from back to get the greater letter\\n    if (uc[i] && lc[i]) return String.fromCharCode(\\'A\\'.charCodeAt(0) + i);\\n  }\\n  return \"\";\\n};\\n\\nconst isUpper = (char) => char.toUpperCase() === char;\\nconst asciiDif = (a, b) => a.charCodeAt(0) - b.charCodeAt(0);\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\n\\tuc=\\n\\t{\\n\\t\\t\\'4\\': 2,\\n\\t\\t\\'14\\': 1,\\n\\t\\t\\'19\\': 1,\\n\\t} \\n\\t\\n\\tlc =\\n\\t{\\n\\t\\t\\'2\\': 1,\\n\\t\\t\\'3\\': 1,\\n\\t\\t\\'4\\': 1,\\n\\t\\t\\'11\\': 1,\\n\\t}\\n\\t```\n```\\nvar greatestLetter = function (s) {\\n  let uc = { ...Array(26).fill(0) }, lc = { ...Array(26).fill(0) };\\n  for (let ch of s)\\n    if (isUpper(ch))\\n      ++uc[asciiDif(ch, \"A\")];\\n    else\\n      ++lc[asciiDif(ch, \"a\")];\\n  for (let i = 25; i >= 0; --i) { // iterating from back to get the greater letter\\n    if (uc[i] && lc[i]) return String.fromCharCode(\\'A\\'.charCodeAt(0) + i);\\n  }\\n  return \"\";\\n};\\n\\nconst isUpper = (char) => char.toUpperCase() === char;\\nconst asciiDif = (a, b) => a.charCodeAt(0) - b.charCodeAt(0);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2168279,
                "title": "1d-arrays-linear-time-c",
                "content": "Time Complexity : O(n)\\nSpace Complexity : O(n)\\n```\\n vector<int> v1(26,0),v2(26,0);\\n        \\n        \\n           for(int i =0;i<s.size();i++){\\n               \\n               if(s[i]-\\'A\\'>=0 && s[i]-\\'A\\'<26){\\n                   v2[s[i]-\\'A\\']++;\\n               }\\n               else{\\n                 v1[s[i]-\\'a\\']++;\\n               }\\n               \\n           }\\n        \\n        string ans =\"\";\\n        \\n        for(int i=25;i>=0;i--){\\n            if(v1[i]!=0 && v2[i]!=0){\\n                ans+= i+\\'A\\';\\n                return ans;\\n            }\\n        }\\n        \\n        return ans;\\n        \\n```",
                "solutionTags": [],
                "code": "```\\n vector<int> v1(26,0),v2(26,0);\\n        \\n        \\n           for(int i =0;i<s.size();i++){\\n               \\n               if(s[i]-\\'A\\'>=0 && s[i]-\\'A\\'<26){\\n                   v2[s[i]-\\'A\\']++;\\n               }\\n               else{\\n                 v1[s[i]-\\'a\\']++;\\n               }\\n               \\n           }\\n        \\n        string ans =\"\";\\n        \\n        for(int i=25;i>=0;i--){\\n            if(v1[i]!=0 && v2[i]!=0){\\n                ans+= i+\\'A\\';\\n                return ans;\\n            }\\n        }\\n        \\n        return ans;\\n        \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2168508,
                "title": "greatest-english-letter-in-upper-and-lower-case",
                "content": "```\\nclass Solution {\\n        public String greatestLetter(String s) {\\n        boolean[] UpperCase = new boolean[26];\\n        boolean[] LowerCase = new boolean[26];\\n        char[] ch = s.toCharArray();\\n        for (char c : ch) {\\n            if (Character.isUpperCase(c)) {\\n                UpperCase[c - \\'A\\'] = true;\\n            } else {\\n                LowerCase[c - \\'a\\'] = true;\\n            }\\n        }\\n        for (int i = 25; i >= 0; i--) {\\n            if (UpperCase[i] && LowerCase[i]) {\\n                return (char) (i + \\'A\\') + \"\";\\n\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n        public String greatestLetter(String s) {\\n        boolean[] UpperCase = new boolean[26];\\n        boolean[] LowerCase = new boolean[26];\\n        char[] ch = s.toCharArray();\\n        for (char c : ch) {\\n            if (Character.isUpperCase(c)) {\\n                UpperCase[c - \\'A\\'] = true;\\n            } else {\\n                LowerCase[c - \\'a\\'] = true;\\n            }\\n        }\\n        for (int i = 25; i >= 0; i--) {\\n            if (UpperCase[i] && LowerCase[i]) {\\n                return (char) (i + \\'A\\') + \"\";\\n\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3906734,
                "title": "java-simple-beats-100-runtime-96-17-memory",
                "content": "# Intuition\\nThis solution iterates through the **English letters** in reverse order, starting from **\\'z\\'** and moving down to **\\'a\\'**. For each letter, it checks if both its lowercase and uppercase versions are present in the input string. The solution returns the first letter that satisfies this condition as the greatest letter that occurs **both in lowercase and uppercase**.\\n\\n# Approach\\nThe approach taken by this solution is quite straightforward. It uses a loop to iterate through the English letters in reverse order. For each letter, it constructs both the `lowercase` and `uppercase` versions using `Character.toString(i)` and `Character.toString(i - 32)`, respectively. It then checks if both of these versions are present in the input string using the `contains()` method. If a letter is found that satisfies this condition, it **returns** **the** **uppercase** **version** of that letter.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\nThe time complexity of this solution depends on the number of iterations performed by the loop. Since the loop iterates over a constant number of letters (26 letters in the English alphabet), the time complexity is **O(1)**.\\n- Space complexity:  $$O(1)$$\\nThe space complexity of this solution is also constant. The solution uses a constant amount of additional memory to store the lower and upper strings, and no extra data structures are used. Thus, the space complexity is **O(1)**.\\n\\n# Code\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n\\n        for (int i = \\'z\\'; i >= \\'a\\'; i--) {\\n            String lower = Character.toString(i);\\n            String upper = Character.toString(i - 32);\\n            if (s.contains(lower) && s.contains(upper)) {\\n                return upper;\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n}\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n\\n        for (int i = \\'z\\'; i >= \\'a\\'; i--) {\\n            String lower = Character.toString(i);\\n            String upper = Character.toString(i - 32);\\n            if (s.contains(lower) && s.contains(upper)) {\\n                return upper;\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3320004,
                "title": "simple-python-2-liner",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        a = [x for x in s if x.upper() in s and x.lower() in s] + [\"\"]\\n        return max(a).upper()\\n```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        a = [x for x in s if x.upper() in s and x.lower() in s] + [\"\"]\\n        return max(a).upper()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2614308,
                "title": "simple-java-solution-with-o-n-time-o-1-space",
                "content": "```\\nclass Solution {\\n    public String greatestLetter(String s) \\n    {\\n        char ch= \\'z\\' , CH = \\'Z\\';\\n        \\n        for(int i=0; i<26;i++)\\n        {            \\n            if(s.indexOf(ch) != -1 && s.indexOf(CH) != -1)\\n                return \"\" + CH;\\n            \\n            else\\n            {\\n                ch--;\\n                CH--;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) \\n    {\\n        char ch= \\'z\\' , CH = \\'Z\\';\\n        \\n        for(int i=0; i<26;i++)\\n        {            \\n            if(s.indexOf(ch) != -1 && s.indexOf(CH) != -1)\\n                return \"\" + CH;\\n            \\n            else\\n            {\\n                ch--;\\n                CH--;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2231028,
                "title": "c-o-n-s-1-0ms-faster-than-100",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Greatest English Letter in Upper and Lower Case.\\nMemory Usage: 6.5 MB, less than 91.00% of C++ online submissions for Greatest English Letter in Upper and Lower Case.\\n\\n```\\nclass Solution \\n{\\npublic:\\n    string greatestLetter(const string& s) \\n    {\\n        std::vector<int> freq(128, 0);\\n        for (const char& c : s)\\n        {\\n            freq[c]++;\\n        }\\n        \\n        for (char c = \\'Z\\'; c >= \\'A\\'; c--)\\n        {\\n            if (freq[c] && freq[(c | 32)])\\n                return std::string(1, c);\\n        }\\n        \\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    string greatestLetter(const string& s) \\n    {\\n        std::vector<int> freq(128, 0);\\n        for (const char& c : s)\\n        {\\n            freq[c]++;\\n        }\\n        \\n        for (char c = \\'Z\\'; c >= \\'A\\'; c--)\\n        {\\n            if (freq[c] && freq[(c | 32)])\\n                return std::string(1, c);\\n        }\\n        \\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2176707,
                "title": "simple-python-solution",
                "content": "Since they asked the uppercase character that is appeared in the given array in both uppercase and lowercase, we can use array of uppercase alphabets to solve this.\\nIt is faster than 93.57% of Python3 submissions.\\n\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        l=[\\'A\\',\\'B\\',\\'C\\',\\'D\\',\\'E\\',\\'F\\',\\'G\\',\\'H\\',\\'I\\',\\'J\\',\\'K\\',\\'L\\',\\'M\\',\\'N\\',\\'O\\',\\'P\\',\\'Q\\',\\'R\\',\\'S\\',\\'T\\',\\'U\\',\\'V\\',\\'W\\',\\'X\\',\\'Y\\',\\'Z\\']\\n        for i in l[::-1]:\\n            if i.lower() in s and i in s:\\n                return i\\n        return \"\"\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        l=[\\'A\\',\\'B\\',\\'C\\',\\'D\\',\\'E\\',\\'F\\',\\'G\\',\\'H\\',\\'I\\',\\'J\\',\\'K\\',\\'L\\',\\'M\\',\\'N\\',\\'O\\',\\'P\\',\\'Q\\',\\'R\\',\\'S\\',\\'T\\',\\'U\\',\\'V\\',\\'W\\',\\'X\\',\\'Y\\',\\'Z\\']\\n        for i in l[::-1]:\\n            if i.lower() in s and i in s:\\n                return i\\n        return \"\"\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2173493,
                "title": "simple-go-golang",
                "content": "Time complexity: **O(N)**\\nMemory complexity: **O(1)**\\n\\n```\\nfunc greatestLetter(s string) string {\\n    occurrence := make([]bool, \\'z\\'+1)\\n    diff := \\'a\\' - \\'A\\'\\n    \\n    for _, letter := range s {\\n        occurrence[letter] = true\\n    }\\n    \\n    for i := \\'Z\\'; i >= \\'A\\'; i-- {\\n        if occurrence[i] && occurrence[i+diff] {\\n            return string(i)\\n        }\\n    }\\n    \\n    return \"\"\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc greatestLetter(s string) string {\\n    occurrence := make([]bool, \\'z\\'+1)\\n    diff := \\'a\\' - \\'A\\'\\n    \\n    for _, letter := range s {\\n        occurrence[letter] = true\\n    }\\n    \\n    for i := \\'Z\\'; i >= \\'A\\'; i-- {\\n        if occurrence[i] && occurrence[i+diff] {\\n            return string(i)\\n        }\\n    }\\n    \\n    return \"\"\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2168929,
                "title": "simple-rust-solution",
                "content": "```rust\\nimpl Solution {\\n    pub fn greatest_letter(s: String) -> String {\\n        (\\'A\\'..=\\'Z\\').into_iter().rev().filter_map(|c| if s.contains(c) && s.contains(c.to_ascii_lowercase()) {\\n            Some(String::from(c))\\n        } else {\\n            None\\n        }).next().unwrap_or(String::default())\\n    }\\n}```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn greatest_letter(s: String) -> String {\\n        (\\'A\\'..=\\'Z\\').into_iter().rev().filter_map(|c| if s.contains(c) && s.contains(c.to_ascii_lowercase()) {\\n            Some(String::from(c))\\n        } else {\\n            None\\n        }).next().unwrap_or(String::default())\\n    }\\n}```",
                "codeTag": "Unknown"
            },
            {
                "id": 2168156,
                "title": "python-solution-complexity-o-nlogn",
                "content": "```\\ndef greatestLetter(self, s: str) -> str:\\n        leng = len(s)\\n        if leng == 1:\\n            return \\'\\'\\n        greatest_char = []\\n        char_hash = {}\\n        \\n        for i in range(1, leng):\\n            if (ord(s[i]) < 91 and ord(s[i])+32 in char_hash):\\n                greatest_char.append(ord(s[i]))\\n            elif(ord(s[i]) > 96 and ord(s[i]) - 32 in char_hash):\\n                greatest_char.append(ord(s[i])-32)\\n            char_hash[ord(s[i])] = 1\\n            \\n        greatest_char.sort()\\n        return chr(greatest_char[-1]) if len(greatest_char) else \"\"\\n                        \\n\\n```",
                "solutionTags": [
                    "Python",
                    "Sorting"
                ],
                "code": "```\\ndef greatestLetter(self, s: str) -> str:\\n        leng = len(s)\\n        if leng == 1:\\n            return \\'\\'\\n        greatest_char = []\\n        char_hash = {}\\n        \\n        for i in range(1, leng):\\n            if (ord(s[i]) < 91 and ord(s[i])+32 in char_hash):\\n                greatest_char.append(ord(s[i]))\\n            elif(ord(s[i]) > 96 and ord(s[i]) - 32 in char_hash):\\n                greatest_char.append(ord(s[i])-32)\\n            char_hash[ord(s[i])] = 1\\n            \\n        greatest_char.sort()\\n        return chr(greatest_char[-1]) if len(greatest_char) else \"\"\\n                        \\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3637868,
                "title": "python-hash-map-o-n-easy-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        dic={}\\n        res=\"\"\\n        for i in s:\\n            if i>=\\'A\\' and i<=\\'Z\\':\\n                if i in dic and dic[i]%2==1:\\n                    dic[i]+=2\\n                elif i not in dic:\\n                    dic[i]=2\\n            if i>=\\'a\\' and i<=\\'z\\':\\n                i=i.upper()\\n                if i in dic and dic[i]%2==0:\\n                    dic[i]+=1\\n                elif i not in dic:\\n                    dic[i]=1\\n        for i in dic:\\n            if dic[i]>=3:\\n                res=max(i,res)\\n        return res   \\n```\\n\\n***Please Upvote***",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        dic={}\\n        res=\"\"\\n        for i in s:\\n            if i>=\\'A\\' and i<=\\'Z\\':\\n                if i in dic and dic[i]%2==1:\\n                    dic[i]+=2\\n                elif i not in dic:\\n                    dic[i]=2\\n            if i>=\\'a\\' and i<=\\'z\\':\\n                i=i.upper()\\n                if i in dic and dic[i]%2==0:\\n                    dic[i]+=1\\n                elif i not in dic:\\n                    dic[i]=1\\n        for i in dic:\\n            if dic[i]>=3:\\n                res=max(i,res)\\n        return res   \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3166590,
                "title": "easy-c-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCreating two auxilary Arrays and putting integers values of character by comparing.\\nThen pushing stored values in string and returning back the character from string.\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n     vector<int>v1(26,0); //creating 2 auxilary vectors\\n     vector<int>v2(26,0);\\n     for(int i=0;i<s.size();i++){\\n            if(s[i]-\\'a\\'>=0 &&  s[i]-\\'a\\'<=25){\\n                v2[s[i]-\\'a\\']++;   //storing by comparing integers values to vectors. \\n            }\\n            else if(s[i]-\\'A\\'>=0 &&  s[i]-\\'A\\'<=25){\\n                v1[s[i]-\\'A\\']++;\\n            }\\n        }\\n        string k;\\n        for(int i=25;i>=0;i--){\\n            if(v1[i]>0 && v2[i]>0){\\n                k.push_back(i+\\'A\\'); //pushing the character that is in both case.\\n                break;\\n            }\\n        }\\n        return k;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n     vector<int>v1(26,0); //creating 2 auxilary vectors\\n     vector<int>v2(26,0);\\n     for(int i=0;i<s.size();i++){\\n            if(s[i]-\\'a\\'>=0 &&  s[i]-\\'a\\'<=25){\\n                v2[s[i]-\\'a\\']++;   //storing by comparing integers values to vectors. \\n            }\\n            else if(s[i]-\\'A\\'>=0 &&  s[i]-\\'A\\'<=25){\\n                v1[s[i]-\\'A\\']++;\\n            }\\n        }\\n        string k;\\n        for(int i=25;i>=0;i--){\\n            if(v1[i]>0 && v2[i]>0){\\n                k.push_back(i+\\'A\\'); //pushing the character that is in both case.\\n                break;\\n            }\\n        }\\n        return k;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3164522,
                "title": "3-line-java-solution-0-ms-100-faster",
                "content": "# Code\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        for (char c = \\'Z\\'; c >= \\'A\\'; c--)\\n            if(s.indexOf(c) != -1 && s.indexOf(Character.toLowerCase(c)) != -1) return String.valueOf(c);\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        for (char c = \\'Z\\'; c >= \\'A\\'; c--)\\n            if(s.indexOf(c) != -1 && s.indexOf(Character.toLowerCase(c)) != -1) return String.valueOf(c);\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3101848,
                "title": "java-solution-fast-2-ms-87-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n     public static String greatestLetter(String s) {\\n\\n        int[] up = new int[26];\\n        int[] lo = new int[26];\\n\\n        for (char x : s.toCharArray()) {\\n            if (\\'z\\' - x < 26) {\\n                lo[\\'z\\' - x] = 1;\\n            } else up[\\'Z\\' - x] = 1;\\n        }\\n\\n        for (int i = 0; i < 26; i++) {\\n            if (up[i] != 0 && up[i] == lo[i]) {\\n                return String.valueOf((char) (\\'Z\\' - i));\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n     public static String greatestLetter(String s) {\\n\\n        int[] up = new int[26];\\n        int[] lo = new int[26];\\n\\n        for (char x : s.toCharArray()) {\\n            if (\\'z\\' - x < 26) {\\n                lo[\\'z\\' - x] = 1;\\n            } else up[\\'Z\\' - x] = 1;\\n        }\\n\\n        for (int i = 0; i < 26; i++) {\\n            if (up[i] != 0 && up[i] == lo[i]) {\\n                return String.valueOf((char) (\\'Z\\' - i));\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2919137,
                "title": "100-faster-java-no-hashmap-hashset-array-o-1-solution",
                "content": "Simply check from ```Z``` till ```A``` if that character nd it\\'s corresponding lowerCase character exists.\\nTime Complexity: O(26)\\nSpace Complexity: O(1)\\n\\nDo ***upVote*** if you found it helpful\\uD83D\\uDC4D\\uD83C\\uDFFB\\n\\n```\\npublic String greatestLetter(String s) {\\n      for(char ch=\\'Z\\';ch>=\\'A\\';ch--){\\n         if(s.indexOf(ch) != -1 && s.indexOf(Character.toLowerCase(ch)) != -1)\\n             return String.valueOf(ch); \\n      }\\n        return \"\";\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```Z```\n```A```\n```\\npublic String greatestLetter(String s) {\\n      for(char ch=\\'Z\\';ch>=\\'A\\';ch--){\\n         if(s.indexOf(ch) != -1 && s.indexOf(Character.toLowerCase(ch)) != -1)\\n             return String.valueOf(ch); \\n      }\\n        return \"\";\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2735717,
                "title": "c-no-extra-space-o-1-simple-solution-with-explanation",
                "content": "# Intuition\\nLet\\'s assume that `s = \"arRAzFif\"`. Sorting the string in descending order will result in `s = \"zrifaRFA\"`. Now, let\\'s see which small letters are present in the string and increment their occurrence by 1. Moving to the upper-case letters, iterate through them returning the first character with a lower-case counterpart using a vector of size 26.\\n\\n# Approach\\n1. Sort the string in descending order so that the first segment is lowercase letters.\\n2. Use `lowerChars` to count the frequency of lower cased letters.\\n3. Iterate and increment frequency till the current index is an upper-case letter.\\n4. Iterate through upper-case letters and check if there is a lower-case letter presented in the string.\\n5. Return an empty string if there is no letter satisfying such case;\\n\\n\\n# Complexity\\n- Time complexity: $$O(n)$$, Linear, two pass considering the sorting function.\\n- Space complexity: $$O(1)$$, since there is only a fixed size vector.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        sort(s.begin(), s.end(), greater<char>());\\n        vector<int> lowerChars(26, 0);\\n        int i = 0, n = s.size();\\n        while(i < n && islower(s[i])) {\\n            ++lowerChars[s[i] - \\'a\\'];\\n            ++i;\\n        }\\n        while(i < n && isupper(s[i])) {\\n            if(lowerChars[s[i] - \\'A\\'] > 0)\\n                return string(1, s[i]);\\n            ++i;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        sort(s.begin(), s.end(), greater<char>());\\n        vector<int> lowerChars(26, 0);\\n        int i = 0, n = s.size();\\n        while(i < n && islower(s[i])) {\\n            ++lowerChars[s[i] - \\'a\\'];\\n            ++i;\\n        }\\n        while(i < n && isupper(s[i])) {\\n            if(lowerChars[s[i] - \\'A\\'] > 0)\\n                return string(1, s[i]);\\n            ++i;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2709038,
                "title": "faster-than-90-63-of-javascript-online-submissions-javascript-simple-solution",
                "content": "```\\nvar greatestLetter = function(s) {\\n    let hold=\\'\\';\\n    for(let i=0;i<s.length;i++){\\n        if(s[i].toLowerCase()!=s[i] && s.includes(s[i].toLowerCase())){\\n            hold=hold>s[i]?hold:s[i];\\n        }\\n    }\\n    return hold;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar greatestLetter = function(s) {\\n    let hold=\\'\\';\\n    for(let i=0;i<s.length;i++){\\n        if(s[i].toLowerCase()!=s[i] && s.includes(s[i].toLowerCase())){\\n            hold=hold>s[i]?hold:s[i];\\n        }\\n    }\\n    return hold;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 2677447,
                "title": "c-using-set-simple-string-solution-short-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) \\n    {    \\n        unordered_set<char>lower;\\n        unordered_set<char>upper;\\n        \\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]>=\\'a\\' and s[i]<=\\'z\\')\\n            {\\n                lower.insert(s[i]);\\n            }\\n            else if(s[i]>=\\'A\\' and s[i]<=\\'Z\\')\\n            {\\n                upper.insert(s[i]);\\n            }\\n        }\\n        char ch=\\'@\\';\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char small = tolower(s[i]);\\n            char big = toupper(small);\\n            \\n            if(lower.find(small)!=lower.end() and upper.find(big)!=upper.end())\\n            {\\n               if(ch==\\'@\\')\\n               {\\n                   ch=big;                   \\n               }\\n               else if(ch != \\'@\\' and big > ch)\\n               {\\n                   ch=big;\\n               }\\n            }\\n        }\\n        if(ch==\\'@\\')\\n            return \"\";\\n        \\n        string str=\"\";\\n        str.push_back(ch);\\n        return str;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) \\n    {    \\n        unordered_set<char>lower;\\n        unordered_set<char>upper;\\n        \\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]>=\\'a\\' and s[i]<=\\'z\\')\\n            {\\n                lower.insert(s[i]);\\n            }\\n            else if(s[i]>=\\'A\\' and s[i]<=\\'Z\\')\\n            {\\n                upper.insert(s[i]);\\n            }\\n        }\\n        char ch=\\'@\\';\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char small = tolower(s[i]);\\n            char big = toupper(small);\\n            \\n            if(lower.find(small)!=lower.end() and upper.find(big)!=upper.end())\\n            {\\n               if(ch==\\'@\\')\\n               {\\n                   ch=big;                   \\n               }\\n               else if(ch != \\'@\\' and big > ch)\\n               {\\n                   ch=big;\\n               }\\n            }\\n        }\\n        if(ch==\\'@\\')\\n            return \"\";\\n        \\n        string str=\"\";\\n        str.push_back(ch);\\n        return str;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2463448,
                "title": "easy-with-golang",
                "content": "```\\nfunc greatestLetter(s string) string {\\n\\tlowerArr, upperArr := make([]byte, 26), make([]byte, 26)\\n\\n\\tfor i := 0; i < len(s); i++ {\\n\\t\\tif s[i] >= \\'a\\' && s[i] <= \\'z\\' {\\n\\t\\t\\tlowerArr[s[i]-\\'a\\']++\\n\\t\\t} else {\\n\\t\\t\\tupperArr[s[i]-\\'A\\']++\\n\\t\\t}\\n\\t}\\n\\n\\tfor i := 25; i >= 0; i-- {\\n\\t\\tif lowerArr[i] > 0 && upperArr[i] > 0 {\\n\\t\\t\\treturn fmt.Sprintf(\"%c\", \\'A\\'+i)\\n\\t\\t}\\n\\t}\\n\\n\\treturn \"\"\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc greatestLetter(s string) string {\\n\\tlowerArr, upperArr := make([]byte, 26), make([]byte, 26)\\n\\n\\tfor i := 0; i < len(s); i++ {\\n\\t\\tif s[i] >= \\'a\\' && s[i] <= \\'z\\' {\\n\\t\\t\\tlowerArr[s[i]-\\'a\\']++\\n\\t\\t} else {\\n\\t\\t\\tupperArr[s[i]-\\'A\\']++\\n\\t\\t}\\n\\t}\\n\\n\\tfor i := 25; i >= 0; i-- {\\n\\t\\tif lowerArr[i] > 0 && upperArr[i] > 0 {\\n\\t\\t\\treturn fmt.Sprintf(\"%c\", \\'A\\'+i)\\n\\t\\t}\\n\\t}\\n\\n\\treturn \"\"\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2421496,
                "title": "python-elegant-short-98-51-faster-two-solutions-o-n-log-n-and-o-n",
                "content": "![image](https://assets.leetcode.com/users/images/9b573c32-d4d5-4d53-8866-0c98b100fefc_1660424704.340886.png)\\n\\n\\tclass Solution:\\n\\t\\t\"\"\"\\n\\t\\tTime:   O(2*26*log(2*26))\\n\\t\\tMemory: O(2*26)\\n\\t\\t\"\"\"\\n\\n\\t\\tdef greatestLetter(self, s: str) -> str:\\n\\t\\t\\tletters = set(s)\\n\\n\\t\\t\\tfor ltr in sorted(letters, reverse=True):\\n\\t\\t\\t\\tif ltr.isupper() and ltr.lower() in letters:\\n\\t\\t\\t\\t\\treturn ltr\\n\\n\\t\\t\\treturn \\'\\'\\n\\n\\n\\tclass Solution:\\n\\t\\t\"\"\"\\n\\t\\tTime:   O(2*26)\\n\\t\\tMemory: O(2*26)\\n\\t\\t\"\"\"\\n\\n\\t\\tdef greatestLetter(self, s: str) -> str:\\n\\t\\t\\tletters = set(s)\\n\\t\\t\\tgreatest = \\'\\'\\n\\n\\t\\t\\tfor ltr in letters:\\n\\t\\t\\t\\tif ltr.isupper() and ltr.lower() in letters:\\n\\t\\t\\t\\t\\tgreatest = max(ltr, greatest)\\n\\n\\t\\t\\treturn greatest\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/9b573c32-d4d5-4d53-8866-0c98b100fefc_1660424704.340886.png)\\n\\n\\tclass Solution:\\n\\t\\t\"\"\"\\n\\t\\tTime:   O(2*26*log(2*26))\\n\\t\\tMemory: O(2*26)\\n\\t\\t\"\"\"\\n\\n\\t\\tdef greatestLetter(self, s: str) -> str:\\n\\t\\t\\tletters = set(s)\\n\\n\\t\\t\\tfor ltr in sorted(letters, reverse=True):\\n\\t\\t\\t\\tif ltr.isupper() and ltr.lower() in letters:\\n\\t\\t\\t\\t\\treturn ltr\\n\\n\\t\\t\\treturn \\'\\'\\n\\n\\n\\tclass Solution:\\n\\t\\t\"\"\"\\n\\t\\tTime:   O(2*26)\\n\\t\\tMemory: O(2*26)\\n\\t\\t\"\"\"\\n\\n\\t\\tdef greatestLetter(self, s: str) -> str:\\n\\t\\t\\tletters = set(s)\\n\\t\\t\\tgreatest = \\'\\'\\n\\n\\t\\t\\tfor ltr in letters:\\n\\t\\t\\t\\tif ltr.isupper() and ltr.lower() in letters:\\n\\t\\t\\t\\t\\tgreatest = max(ltr, greatest)\\n\\n\\t\\t\\treturn greatest\\n",
                "codeTag": "Java"
            },
            {
                "id": 2397711,
                "title": "c-0-ms-o-n-time-and-space-with-explanation",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<int> letters(26, 0);\\n        int size = s.size();\\n        /* \\n            Initially letters will contain 0\\'s as none of the letters are visited.\\n            The values of letters will range from 0 to 3,\\n            0 => not visited\\n            1 => uppercase visited\\n            2 => lowercase visited\\n            3 => both lowercase and uppercase visited\\n        */\\n        \\n        for(int i = 0; i < size; i++){\\n            if(s[i] <= \\'Z\\'){                        // if letter is in uppercase\\n                if(letters[s[i] - \\'A\\'] == 0)\\n                    letters[s[i] - \\'A\\'] = 1;\\n                else if(letters[s[i] - \\'A\\'] == 2)\\n                    letters[s[i] - \\'A\\'] = 3;\\n            }\\n            else{                                     // if letter is in lowercase\\n                if(letters[s[i] - \\'a\\'] == 0)\\n                    letters[s[i] - \\'a\\'] = 2;\\n                else if(letters[s[i] - \\'a\\'] == 1)\\n                    letters[s[i] - \\'a\\'] = 3;\\n            }\\n        }\\n        \\n        // Now to find the required character\\n        \\n        string res = \"\";\\n        \\n        for(int i = 25; i >= 0; i--){\\n            if(letters[i] == 3){\\n                res += char(\\'A\\'+i);\\n                break;\\n            }\\n        }\\n        \\n        return res;\\n    }\\n};\\n```\\n\\nPlease upvote if you like the solution... ;)",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<int> letters(26, 0);\\n        int size = s.size();\\n        /* \\n            Initially letters will contain 0\\'s as none of the letters are visited.\\n            The values of letters will range from 0 to 3,\\n            0 => not visited\\n            1 => uppercase visited\\n            2 => lowercase visited\\n            3 => both lowercase and uppercase visited\\n        */\\n        \\n        for(int i = 0; i < size; i++){\\n            if(s[i] <= \\'Z\\'){                        // if letter is in uppercase\\n                if(letters[s[i] - \\'A\\'] == 0)\\n                    letters[s[i] - \\'A\\'] = 1;\\n                else if(letters[s[i] - \\'A\\'] == 2)\\n                    letters[s[i] - \\'A\\'] = 3;\\n            }\\n            else{                                     // if letter is in lowercase\\n                if(letters[s[i] - \\'a\\'] == 0)\\n                    letters[s[i] - \\'a\\'] = 2;\\n                else if(letters[s[i] - \\'a\\'] == 1)\\n                    letters[s[i] - \\'a\\'] = 3;\\n            }\\n        }\\n        \\n        // Now to find the required character\\n        \\n        string res = \"\";\\n        \\n        for(int i = 25; i >= 0; i--){\\n            if(letters[i] == 3){\\n                res += char(\\'A\\'+i);\\n                break;\\n            }\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2246193,
                "title": "simple-solution-using-counter-method-space-complexity-o-26-26-time-complexity-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<bool> cntCap(26,false) , cntSml(26,false);\\n        int n = s.size();\\n        for(int i=0;i<n;++i){\\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\'){\\n                cntSml[s[i]-\\'a\\']=true;\\n            }else{\\n                cntCap[s[i]-\\'A\\']=true;\\n            }\\n        }\\n        \\n        string ans = \"\";\\n        \\n        for(int i=25;i>=0;--i){\\n            if(cntSml[i]==true && cntCap[i]==true){\\n                ans.push_back(i+\\'A\\');\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<bool> cntCap(26,false) , cntSml(26,false);\\n        int n = s.size();\\n        for(int i=0;i<n;++i){\\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\'){\\n                cntSml[s[i]-\\'a\\']=true;\\n            }else{\\n                cntCap[s[i]-\\'A\\']=true;\\n            }\\n        }\\n        \\n        string ans = \"\";\\n        \\n        for(int i=25;i>=0;--i){\\n            if(cntSml[i]==true && cntCap[i]==true){\\n                ans.push_back(i+\\'A\\');\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2208141,
                "title": "java-counts",
                "content": "```\\n public String greatestLetter(String s) {\\n        int[] counts = new int[256];\\n        for(char c : s.toCharArray()) {\\n            counts[c]++;\\n        }\\n        \\n        String resp = \"\";\\n        for(int i=90;i>=65;i--) {\\n            if(counts[i]>0 && counts[i+32]>0)\\n                return (char)(i)+\"\";\\n        }\\n            \\n            return \"\";\\n            \\n    }",
                "solutionTags": [],
                "code": "```\\n public String greatestLetter(String s) {\\n        int[] counts = new int[256];\\n        for(char c : s.toCharArray()) {\\n            counts[c]++;\\n        }\\n        \\n        String resp = \"\";\\n        for(int i=90;i>=65;i--) {\\n            if(counts[i]>0 && counts[i+32]>0)\\n                return (char)(i)+\"\";\\n        }\\n            \\n            return \"\";\\n            \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2179212,
                "title": "easy-python-solution",
                "content": "```\\ndef greatestLetter(self, s: str) -> str:\\n        c=\"abcdefghijklmnopqrstuvwxyz\"\\n        l=[\"\"]\\n        for i in c:\\n            if i in s and i.upper() in s:\\n                l.append(i.upper())\\n        l.sort()\\n        return l[-1]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef greatestLetter(self, s: str) -> str:\\n        c=\"abcdefghijklmnopqrstuvwxyz\"\\n        l=[\"\"]\\n        for i in c:\\n            if i in s and i.upper() in s:\\n                l.append(i.upper())\\n        l.sort()\\n        return l[-1]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2176374,
                "title": "kotlin-two-liner-using-partition-and-intersect",
                "content": "```\\nclass Solution {\\n    fun greatestLetter(s: String): String {\\n        val (lower, upper) = s.asSequence().partition { it.isLowerCase() }\\n        return lower.map { it.toUpperCase() }.intersect(upper).max()?.toString() ?: \"\"\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun greatestLetter(s: String): String {\\n        val (lower, upper) = s.asSequence().partition { it.isLowerCase() }\\n        return lower.map { it.toUpperCase() }.intersect(upper).max()?.toString() ?: \"\"\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2174485,
                "title": "c-100",
                "content": "```public class Solution {\\n    public string GreatestLetter(string s) {\\n        \\n        for (char c = \\'Z\\'; c >= \\'A\\'; c--)\\n        {\\n            if(s.Contains(c) && s.Contains(char.ToLower(c)))\\n            {\\n                return c.ToString();\\n            }\\n        } \\n        \\n        return \"\";\\n    }\\n} \\n",
                "solutionTags": [],
                "code": "class Solution {\\n    public string GreatestLetter(string s) {\\n        \\n        for (char c = \\'Z\\'; c >= \\'A\\'; c--)\\n        {\\n            if(s.Contains(c) && s.Contains(char.ToLower(c)))\\n            {\\n                return c.ToString();\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2171860,
                "title": "java-easy-solution-frequency-table-o-n",
                "content": "```\\nclass Solution {\\n\\t  public static String greatestLetter(String s) {\\n\\t        int ans1[] = new int[26];\\n\\t        int ans2[] = new int[26];\\n\\t        \\n\\t        for(int i = 0; i<s.length(); i++  ){\\n\\t            char c = s.charAt(i);\\n\\t            if(c-\\'a\\' >= 0){\\n\\t                ans1[c -\\'a\\']++;\\n\\t            }\\n\\t            else{\\n\\t                ans2[ c -\\'A\\']++;\\n\\t            }\\n\\t        }\\n\\t        String ans = \"\";\\n\\t        for(int i = 25; i>=0; i-- ){\\n\\t            if(ans1[i] != 0 && ans2[i] != 0){\\n\\t                ans +=(char)(\\'A\\'+ i);\\n\\t                break;\\n\\t            }\\n\\t        }\\n\\t        return ans;\\n\\t    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\t  public static String greatestLetter(String s) {\\n\\t        int ans1[] = new int[26];\\n\\t        int ans2[] = new int[26];\\n\\t        \\n\\t        for(int i = 0; i<s.length(); i++  ){\\n\\t            char c = s.charAt(i);\\n\\t            if(c-\\'a\\' >= 0){\\n\\t                ans1[c -\\'a\\']++;\\n\\t            }\\n\\t            else{\\n\\t                ans2[ c -\\'A\\']++;\\n\\t            }\\n\\t        }\\n\\t        String ans = \"\";\\n\\t        for(int i = 25; i>=0; i-- ){\\n\\t            if(ans1[i] != 0 && ans2[i] != 0){\\n\\t                ans +=(char)(\\'A\\'+ i);\\n\\t                break;\\n\\t            }\\n\\t        }\\n\\t        return ans;\\n\\t    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2169575,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n       int k=-1;\\n        vector<int> a(26,0);//lowercase\\n        vector<int> b(26,0);//uppercase\\n        for(int i=0;i<s.size();++i){\\n            if(s[i]-\\'a\\'>=0){\\n        a[s[i]-\\'a\\']=1;\\n            }else{\\n                b[s[i]-\\'A\\']=1;\\n            }\\n        }\\n        for(int j=0;j<26;++j){\\n\\n            if(a[j]==1 && b[j]==1)\\n            {\\n               k=j; \\n            }\\n        }\\n        string d;\\n        d=(char)(65+k);\\n        if(k==-1) return \"\";\\n        return  d;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n       int k=-1;\\n        vector<int> a(26,0);//lowercase\\n        vector<int> b(26,0);//uppercase\\n        for(int i=0;i<s.size();++i){\\n            if(s[i]-\\'a\\'>=0){\\n        a[s[i]-\\'a\\']=1;\\n            }else{\\n                b[s[i]-\\'A\\']=1;\\n            }\\n        }\\n        for(int j=0;j<26;++j){\\n\\n            if(a[j]==1 && b[j]==1)\\n            {\\n               k=j; \\n            }\\n        }\\n        string d;\\n        d=(char)(65+k);\\n        if(k==-1) return \"\";\\n        return  d;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168484,
                "title": "short-python-solution",
                "content": "```\\nh, result = defaultdict(set), \"\"\\nfor c in s:\\n\\tu = c.upper()\\n\\th[u].add(c)\\n\\tif len(h[u]) == 2:\\n\\t\\tresult = max(u, result)\\nreturn result\\n```",
                "solutionTags": [],
                "code": "```\\nh, result = defaultdict(set), \"\"\\nfor c in s:\\n\\tu = c.upper()\\n\\th[u].add(c)\\n\\tif len(h[u]) == 2:\\n\\t\\tresult = max(u, result)\\nreturn result\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2168462,
                "title": "simple-sol-c",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        int n = s.size();\\n        \\n        unordered_map<char , int> mp;\\n        \\n        string res = \"!\";\\n        char ch = \\'!\\';\\n        \\n        for(int i=0;i<n;i++){\\n            if(s[i] >= \\'a\\' && s[i] <= \\'z\\') mp[s[i]]++;\\n            else{\\n                if(mp[s[i] + 32] > 0 && s[i] > ch){\\n                    \\n                      ch = s[i] ;\\n                      res.pop_back();\\n                      res += s[i];\\n                }\\n            }\\n        }\\n        \\n        \\n        if(ch == \\'!\\') return \"\";\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        int n = s.size();\\n        \\n        unordered_map<char , int> mp;\\n        \\n        string res = \"!\";\\n        char ch = \\'!\\';\\n        \\n        for(int i=0;i<n;i++){\\n            if(s[i] >= \\'a\\' && s[i] <= \\'z\\') mp[s[i]]++;\\n            else{\\n                if(mp[s[i] + 32] > 0 && s[i] > ch){\\n                    \\n                      ch = s[i] ;\\n                      res.pop_back();\\n                      res += s[i];\\n                }\\n            }\\n        }\\n        \\n        \\n        if(ch == \\'!\\') return \"\";\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168296,
                "title": "c-solution-o-n-time-o-1-memory",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        for(char ch=\\'z\\';ch>=\\'a\\';--ch){\\n            string ss=\"\";\\n            ss+=ch-32;\\n            if(s.find(ch)!=string::npos&&s.find(ch-32)!=string::npos)return ss;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        for(char ch=\\'z\\';ch>=\\'a\\';--ch){\\n            string ss=\"\";\\n            ss+=ch-32;\\n            if(s.find(ch)!=string::npos&&s.find(ch-32)!=string::npos)return ss;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168255,
                "title": "easy-to-understand-solution-explained",
                "content": "We need to find english letters occurring both upper and lower case.\\nLet\\'s use a set do mark letters that we have seen.\\n\\nIf we are currently looking at a lower case letter, we will check if the upper case counterpart was already seen, if it was then we will consider it by\\ncomparing with the greatest letter found so far.\\n\\nSame logic for smaller case letters, just we compare against the upper case format, since the question asks for upper case.\\n\\nTime complexity: `O(n)` since we traverse the string s once.\\nSpace complexity: `O(n)` for the set seen.\\n\\n# Code\\n\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        MAX = float(\\'-inf\\')\\n        greatest = \"\"\\n        seen = set()\\n        \\n        for c in s:\\n            if not c.isalpha(): continue\\n            cur_letter_ordinal = ord(c)\\n                \\n            # We are dealing with upper case letter\\n            if 65 <= cur_letter_ordinal < 97:  \\n                _lower_case_ordinal = cur_letter_ordinal + 32\\n                if chr(_lower_case_ordinal) in seen:\\n                    if cur_letter_ordinal > MAX:\\n                        greatest = c\\n                        MAX = cur_letter_ordinal\\n            \\n            # dealing with lower case\\n            else:\\n                _upper_case_ord = cur_letter_ordinal - 32\\n                if chr(_upper_case_ord) in seen:\\n                    if _upper_case_ord > MAX:\\n                        greatest = chr(_upper_case_ord)\\n                        MAX = _upper_case_ord\\n            \\n            \\n            seen.add(c)\\n        \\n        return greatest\\n```\\t",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        MAX = float(\\'-inf\\')\\n        greatest = \"\"\\n        seen = set()\\n        \\n        for c in s:\\n            if not c.isalpha(): continue\\n            cur_letter_ordinal = ord(c)\\n                \\n            # We are dealing with upper case letter\\n            if 65 <= cur_letter_ordinal < 97:  \\n                _lower_case_ordinal = cur_letter_ordinal + 32\\n                if chr(_lower_case_ordinal) in seen:\\n                    if cur_letter_ordinal > MAX:\\n                        greatest = c\\n                        MAX = cur_letter_ordinal\\n            \\n            # dealing with lower case\\n            else:\\n                _upper_case_ord = cur_letter_ordinal - 32\\n                if chr(_upper_case_ord) in seen:\\n                    if _upper_case_ord > MAX:\\n                        greatest = chr(_upper_case_ord)\\n                        MAX = _upper_case_ord\\n            \\n            \\n            seen.add(c)\\n        \\n        return greatest\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168220,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        int [] lower = new int [26];\\n        int [] upper = new int[26];\\n        for(int i = 0 ; i < s.length() ; i++){\\n            int ascii = (int)(s.charAt(i));\\n            if(ascii <= 90 && ascii >= 65){\\n                upper[ascii - 65]++;\\n            }\\n          if(ascii <= 122 && ascii >= 97){\\n                lower[ascii - 97]++;\\n            }\\n        }\\n        int ans = -1;\\n        for(int i = 0 ; i < 26 ; i++){\\n            if(lower[i] != 0 && upper[i]!= 0){\\n                ans = i;\\n            }\\n        }\\n        \\n        if(ans != -1){\\n        return  String.valueOf((char)(ans+\\'A\\'));\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        int [] lower = new int [26];\\n        int [] upper = new int[26];\\n        for(int i = 0 ; i < s.length() ; i++){\\n            int ascii = (int)(s.charAt(i));\\n            if(ascii <= 90 && ascii >= 65){\\n                upper[ascii - 65]++;\\n            }\\n          if(ascii <= 122 && ascii >= 97){\\n                lower[ascii - 97]++;\\n            }\\n        }\\n        int ans = -1;\\n        for(int i = 0 ; i < 26 ; i++){\\n            if(lower[i] != 0 && upper[i]!= 0){\\n                ans = i;\\n            }\\n        }\\n        \\n        if(ans != -1){\\n        return  String.valueOf((char)(ans+\\'A\\'));\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168146,
                "title": "greatest-english-letter-in-upper-and-lower-case-c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        map<char,pair<bool,bool>>m;\\n        for(int i=97;i<=122;i++){\\n            pair<bool,bool> p=make_pair(false,false); \\n            m[i]=p;\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]>=97 && s[i]<=122){\\n                m[s[i]].second=true;\\n            }\\n             if(s[i]>=65 && s[i]<=90){\\n                m[s[i]+32].first=true;\\n            }\\n        }\\n        string ans=\"\";\\n        for(auto x:m){\\n            if(x.second.first && x.second.second){\\n                ans.clear();\\n                ans.push_back(x.first-32);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        map<char,pair<bool,bool>>m;\\n        for(int i=97;i<=122;i++){\\n            pair<bool,bool> p=make_pair(false,false); \\n            m[i]=p;\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]>=97 && s[i]<=122){\\n                m[s[i]].second=true;\\n            }\\n             if(s[i]>=65 && s[i]<=90){\\n                m[s[i]+32].first=true;\\n            }\\n        }\\n        string ans=\"\";\\n        for(auto x:m){\\n            if(x.second.first && x.second.second){\\n                ans.clear();\\n                ans.push_back(x.first-32);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168122,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        map<char,int> m;\\n        \\n        vector<int> v1(26,0),v2(26,0);\\n        \\n        int n=s.size();\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\')\\n            {\\n                v1[s[i]-\\'a\\']++;\\n            }\\n            if(s[i]>=\\'A\\' && s[i]<=\\'Z\\')\\n            {\\n                v2[s[i]-\\'A\\']++;\\n            }\\n        }\\n        \\n        string res=\"\";\\n        int mx=0;\\n        \\n        \\n        for(int i=0;i<26;i++)\\n        {\\n            if(v1[i] && v2[i])\\n            {\\n                    res=\"\";\\n                    res+=(char)(i+65); \\n            }\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        map<char,int> m;\\n        \\n        vector<int> v1(26,0),v2(26,0);\\n        \\n        int n=s.size();\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\')\\n            {\\n                v1[s[i]-\\'a\\']++;\\n            }\\n            if(s[i]>=\\'A\\' && s[i]<=\\'Z\\')\\n            {\\n                v2[s[i]-\\'A\\']++;\\n            }\\n        }\\n        \\n        string res=\"\";\\n        int mx=0;\\n        \\n        \\n        for(int i=0;i<26;i++)\\n        {\\n            if(v1[i] && v2[i])\\n            {\\n                    res=\"\";\\n                    res+=(char)(i+65); \\n            }\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3814728,
                "title": "c-three-version-with-explanation-fast-and-simple",
                "content": "### My third version of solving this task.\\nThe quickest one **( > 90 % )** and without creating any additional objects like StringBuilder, List of chars, etc...\\n\\nNeed to find the greatest upper case letter which appears in its lowercase version in string.\\n\\nLetter **\\'A\\'** goes with code 65 and symbol **\\'@\\'** has code 64 in ASCII table,   \\nso in ASCII table codes symbol **\\'@\\'** goes \"before\" letter **\\'A\\'**,  \\n that\\'s why **@ < A**.\\n\\nThen we check all chars in string. We look for such char, that satisfies three conditions:\\n- is it upper case?\\n- is string contains this upper case char when we convert it to lower case?\\n- is this upper char greater, than that char ch (remember, at first ch equals \\'@\\', so any letter is greater then it).\\n\\nFinally, we just convert to string this char ch, if it satisfies all those condition. If it stays equals \\'@\\', we just return empty string.\\n\\n```\\npublic class Solution {\\n       \\n    public string GreatestLetter(string s)\\n    {\\n        char ch = \\'@\\';\\n        foreach (char c in s)\\n        {\\n            if (Char.IsUpper(c) && s.Contains(Char.ToLower(c)) && c > ch)\\n                ch = c;\\n        }\\n        return ch == \\'@\\' ? \"\" : ch.ToString() ;\\n    }\\n}\\n```\\n\\n### Thoughts \\n(slow, takes a lot of place, but works of course)\\n\\n**Don`t do this**\\n\\n```\\npublic class Solution {\\n   \\n    List<char> chars = new List<char>();\\n    \\n    public string GreatestLetter(string s)\\n    {\\n        chars.Clear();\\n        chars.AddRange(s.ToCharArray());\\n        chars.Sort();\\n        char res = \\'1\\';\\n        int count = 0;\\n        foreach (char c in chars)\\n        {\\n            if (Char.IsLower(c))\\n                break;\\n            count++;\\n        }\\n        for (int i = 0; i < count; i++)\\n        {\\n            if (s.Contains(Char.ToLower(chars[i])))\\n                res = chars[i];\\n        }\\n        return res == \\'1\\' ? \"\" : res.ToString();\\n    }\\n}\\n```\\n-----\\n\\n**Also definitely not worth do this**\\n\\n```\\npublic class Solution {\\n    List<char> listUp = new List<char>();\\n    List<char> listLow = new List<char>();\\n    List<char> res = new List<char>();\\n    \\n    public string GreatestLetter(string s)\\n    {\\n        listUp.Clear();\\n        listLow.Clear();\\n        res.Clear();\\n        \\n        foreach (char c in s)\\n        {\\n            if(Char.IsUpper(c))\\n                listUp.Add(c);\\n            else\\n                listLow.Add(c);\\n        }\\n        foreach (char c in listUp)\\n        {\\n            if(listLow.Contains(Char.ToLower(c)))\\n                res.Add(c);\\n        }\\n        res.Sort();\\n        return res.Count > 0 ? res[^1].ToString() : \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n       \\n    public string GreatestLetter(string s)\\n    {\\n        char ch = \\'@\\';\\n        foreach (char c in s)\\n        {\\n            if (Char.IsUpper(c) && s.Contains(Char.ToLower(c)) && c > ch)\\n                ch = c;\\n        }\\n        return ch == \\'@\\' ? \"\" : ch.ToString() ;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n   \\n    List<char> chars = new List<char>();\\n    \\n    public string GreatestLetter(string s)\\n    {\\n        chars.Clear();\\n        chars.AddRange(s.ToCharArray());\\n        chars.Sort();\\n        char res = \\'1\\';\\n        int count = 0;\\n        foreach (char c in chars)\\n        {\\n            if (Char.IsLower(c))\\n                break;\\n            count++;\\n        }\\n        for (int i = 0; i < count; i++)\\n        {\\n            if (s.Contains(Char.ToLower(chars[i])))\\n                res = chars[i];\\n        }\\n        return res == \\'1\\' ? \"\" : res.ToString();\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    List<char> listUp = new List<char>();\\n    List<char> listLow = new List<char>();\\n    List<char> res = new List<char>();\\n    \\n    public string GreatestLetter(string s)\\n    {\\n        listUp.Clear();\\n        listLow.Clear();\\n        res.Clear();\\n        \\n        foreach (char c in s)\\n        {\\n            if(Char.IsUpper(c))\\n                listUp.Add(c);\\n            else\\n                listLow.Add(c);\\n        }\\n        foreach (char c in listUp)\\n        {\\n            if(listLow.Contains(Char.ToLower(c)))\\n                res.Add(c);\\n        }\\n        res.Sort();\\n        return res.Count > 0 ? res[^1].ToString() : \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3580868,
                "title": "o-n-greatest-english-letter-in-upper-and-lower-case-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<int> lower(26, 0);\\n        vector<int> upper(26, 0);\\n        int i;\\n        string ans;\\n        for(i=0 ; i<s.length() ; i++)\\n        {\\n            if(s[i]>=97)\\n                lower[s[i]-97] = 1;\\n            else\\n                upper[s[i]-65] = 1;\\n        }\\n        for(i=25 ; i>=0 ; i--)\\n        {\\n            if(lower[i]==1 && upper[i]==1)\\n            {\\n                ans = i+65;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/df8c1934-50f0-4fc2-85b8-889a8a0cf108_1685508461.737817.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<int> lower(26, 0);\\n        vector<int> upper(26, 0);\\n        int i;\\n        string ans;\\n        for(i=0 ; i<s.length() ; i++)\\n        {\\n            if(s[i]>=97)\\n                lower[s[i]-97] = 1;\\n            else\\n                upper[s[i]-65] = 1;\\n        }\\n        for(i=25 ; i>=0 ; i--)\\n        {\\n            if(lower[i]==1 && upper[i]==1)\\n            {\\n                ans = i+65;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3435269,
                "title": "java-counter-x-ascii",
                "content": "```I hope it was clear```  ```Don\\'t forget to upvote```\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        boolean[] seen = new boolean[58];\\n        for(char ch : s.toCharArray()){\\n            seen[ch-65]=true;\\n        }\\n        for(int i=57; i>31;i--){\\n            if(seen[i] && seen[i-32])\\n                return (char)(i+33)+\"\";\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```I hope it was clear```\n```Don\\'t forget to upvote```\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        boolean[] seen = new boolean[58];\\n        for(char ch : s.toCharArray()){\\n            seen[ch-65]=true;\\n        }\\n        for(int i=57; i>31;i--){\\n            if(seen[i] && seen[i-32])\\n                return (char)(i+33)+\"\";\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3419460,
                "title": "c-solution-simple-approach",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string greatestLetter(string str) {\\n\\n    unordered_set<char> s;\\n    string Ans = \"\";\\n    char temp = \\' \\';\\n    \\n    for (int i = 0; i < str.size(); i++)\\n        if (str[i] >= \\'a\\' && str[i] <= \\'z\\')\\n            s.insert(str[i]);\\n\\n    for (int i = 0; i < str.size(); i++)\\n        if (str[i] >= \\'A\\' && str[i] <= \\'Z\\')\\n            if (s.find(str[i] + 32) != s.end())\\n                temp = max(temp, str[i]);\\n            \\n    if(temp!=\\' \\')\\n        Ans+=temp;\\n    \\n    return Ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string str) {\\n\\n    unordered_set<char> s;\\n    string Ans = \"\";\\n    char temp = \\' \\';\\n    \\n    for (int i = 0; i < str.size(); i++)\\n        if (str[i] >= \\'a\\' && str[i] <= \\'z\\')\\n            s.insert(str[i]);\\n\\n    for (int i = 0; i < str.size(); i++)\\n        if (str[i] >= \\'A\\' && str[i] <= \\'Z\\')\\n            if (s.find(str[i] + 32) != s.end())\\n                temp = max(temp, str[i]);\\n            \\n    if(temp!=\\' \\')\\n        Ans+=temp;\\n    \\n    return Ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3363754,
                "title": "swift-ascii",
                "content": "\\n```\\nclass Solution { // 65 97\\n    func greatestLetter(_ s: String) -> String {\\n        var dic = [String:Int]()\\n        var greatest: String = \"\"\\n\\n        for c in s { \\n            let char = c.lowercased()\\n            let asc = Int(c.asciiValue!)\\n            if let prevAsc = dic[char] { \\n                if abs(prevAsc - asc) == 32 {\\n                    greatest = max(greatest, c.uppercased())\\n                }\\n            } else { \\n                dic[char] = asc\\n            }\\n        }\\n        return greatest\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution { // 65 97\\n    func greatestLetter(_ s: String) -> String {\\n        var dic = [String:Int]()\\n        var greatest: String = \"\"\\n\\n        for c in s { \\n            let char = c.lowercased()\\n            let asc = Int(c.asciiValue!)\\n            if let prevAsc = dic[char] { \\n                if abs(prevAsc - asc) == 32 {\\n                    greatest = max(greatest, c.uppercased())\\n                }\\n            } else { \\n                dic[char] = asc\\n            }\\n        }\\n        return greatest\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3105400,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        s=set(s)\\n        a=[]\\n        for i in s:\\n            if(i.isupper()):\\n                if(i.lower() in s):\\n                    a.append(i)\\n        if(len(a)==0):\\n            return \"\"\\n        return sorted(a)[-1]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        s=set(s)\\n        a=[]\\n        for i in s:\\n            if(i.isupper()):\\n                if(i.lower() in s):\\n                    a.append(i)\\n        if(len(a)==0):\\n            return \"\"\\n        return sorted(a)[-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3032176,
                "title": "javascript-step-by-step-beginner-friendly-solution",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar greatestLetter = function(s) {\\n    let set = new Set();\\n    for(let i=0; i<s.length; i++) {\\n        set.add(s[i]);\\n    }\\n    let incubation_arr = Array.from(set).sort().reverse();\\n    \\n    let res = _.compact(incubation_arr.map((el, i)=> {\\n        if(incubation_arr.includes(el.toUpperCase()) && incubation_arr.includes(el.toLowerCase())){\\n            return el.toUpperCase();\\n        }\\n    }))[0];\\n    return res ? res : \"\";\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar greatestLetter = function(s) {\\n    let set = new Set();\\n    for(let i=0; i<s.length; i++) {\\n        set.add(s[i]);\\n    }\\n    let incubation_arr = Array.from(set).sort().reverse();\\n    \\n    let res = _.compact(incubation_arr.map((el, i)=> {\\n        if(incubation_arr.includes(el.toUpperCase()) && incubation_arr.includes(el.toLowerCase())){\\n            return el.toUpperCase();\\n        }\\n    }))[0];\\n    return res ? res : \"\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2737800,
                "title": "easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        string cp=\"\";\\n        string cpp=\"\";\\n        string str;\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\')\\n                cp+=s[i];\\n                else\\n                cpp+=s[i];\\n        }\\n        transform(cp.begin(), cp.end(), cp.begin(), ::toupper);\\n        sort(cp.begin(),cp.end());\\n        sort(cpp.begin(),cpp.end());\\n        reverse(cp.begin(),cp.end());\\n        reverse(cpp.begin(),cpp.end());\\n        // return cp;\\n        // return cpp;\\n        for(int i=0;i<cpp.size();i++)\\n        {\\n            for(int j=0;j<cp.size();j++)\\n            {\\n                if(cpp[i]==cp[j]){\\n                    str = cpp[i];\\n                    return str;\\n                    break;\\n                }\\n            }  \\n         }\\n        return \"\";        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        string cp=\"\";\\n        string cpp=\"\";\\n        string str;\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\')\\n                cp+=s[i];\\n                else\\n                cpp+=s[i];\\n        }\\n        transform(cp.begin(), cp.end(), cp.begin(), ::toupper);\\n        sort(cp.begin(),cp.end());\\n        sort(cpp.begin(),cpp.end());\\n        reverse(cp.begin(),cp.end());\\n        reverse(cpp.begin(),cpp.end());\\n        // return cp;\\n        // return cpp;\\n        for(int i=0;i<cpp.size();i++)\\n        {\\n            for(int j=0;j<cp.size();j++)\\n            {\\n                if(cpp[i]==cp[j]){\\n                    str = cpp[i];\\n                    return str;\\n                    break;\\n                }\\n            }  \\n         }\\n        return \"\";        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2641548,
                "title": "java-hashset",
                "content": "```\\nclass Solution{\\n    public String greatestLetter(String s){\\n        Set<Character> set = new HashSet<>();\\n        for(char ch : s.toCharArray())       set.add(ch);\\n        for(char ch = \\'Z\\'; ch >= \\'A\\'; ch--)\\n            if(set.contains(ch) && set.contains((char)(\\'a\\'+(ch-\\'A\\'))))\\n               return \"\"+ch;\\n        return \"\";\\n    }\\n}\\n```\\nKindly upvote if you find helpful",
                "solutionTags": [
                    "Java",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution{\\n    public String greatestLetter(String s){\\n        Set<Character> set = new HashSet<>();\\n        for(char ch : s.toCharArray())       set.add(ch);\\n        for(char ch = \\'Z\\'; ch >= \\'A\\'; ch--)\\n            if(set.contains(ch) && set.contains((char)(\\'a\\'+(ch-\\'A\\'))))\\n               return \"\"+ch;\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2563396,
                "title": "c-using-array-simple-solution-0ms-faster-than-100",
                "content": "![image](https://assets.leetcode.com/users/images/aa16ae83-d28e-499a-90c5-fff48d1b0d1b_1662918554.5522704.png)\\n\\n**Simple easy to understand code**\\n**Upvote if you found easy and helpfull**\\n```\\n string greatestLetter(string s) {\\n        \\n        int up[26] = {0};\\n        int low[26] = {0};\\n        \\n        for( char c :  s){\\n            \\n            if( c >= 65 && c <= 90 ){\\n                \\n                up[c - \\'A\\']++;\\n            }\\n            else{\\n                low[c - \\'a\\']++;\\n            }\\n            \\n        }\\n        \\n// storing the answer\\n    string res  = \"\";\\n        \\n//        counter from backward as we want to get the greatest English letter\\n        for( int i =25; i >= 0; i--){\\n            \\n            if( up[i] >=1 && low[i] >= 1){\\n                res  += i + \\'A\\';\\n//                 conversion from first integer to char aand then char to string;\\n                break;\\n//                 breaking from the loop as we find our first greatest character\\n            }\\n        }\\n       \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "String"
                ],
                "code": "```\\n string greatestLetter(string s) {\\n        \\n        int up[26] = {0};\\n        int low[26] = {0};\\n        \\n        for( char c :  s){\\n            \\n            if( c >= 65 && c <= 90 ){\\n                \\n                up[c - \\'A\\']++;\\n            }\\n            else{\\n                low[c - \\'a\\']++;\\n            }\\n            \\n        }\\n        \\n// storing the answer\\n    string res  = \"\";\\n        \\n//        counter from backward as we want to get the greatest English letter\\n        for( int i =25; i >= 0; i--){\\n            \\n            if( up[i] >=1 && low[i] >= 1){\\n                res  += i + \\'A\\';\\n//                 conversion from first integer to char aand then char to string;\\n                break;\\n//                 breaking from the loop as we find our first greatest character\\n            }\\n        }\\n       \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2526027,
                "title": "python-1-liner",
                "content": "The intersection between the uppercase and lowercase string results the characters of interest.\\n\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        return max(Counter(s) & Counter(s.swapcase()), default=\"\").upper()\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        return max(Counter(s) & Counter(s.swapcase()), default=\"\").upper()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2516426,
                "title": "c-using-2-array",
                "content": "```\\n\\tstring greatestLetter(string s) {\\n        int a[26] = {}, A[26] = {};\\n        for(char &c : s){\\n            if(c >= \\'a\\' && c <= \\'z\\') ++a[c - \\'a\\'];\\n            else ++A[c - \\'A\\'];\\n        }\\n        string res = \"\";\\n        for(int i = 0; i < 26; i++)\\n            if(A[i] > 0 && a[i] > 0) res = char(\\'A\\' + i);\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\tstring greatestLetter(string s) {\\n        int a[26] = {}, A[26] = {};\\n        for(char &c : s){\\n            if(c >= \\'a\\' && c <= \\'z\\') ++a[c - \\'a\\'];\\n            else ++A[c - \\'A\\'];\\n        }\\n        string res = \"\";\\n        for(int i = 0; i < 26; i++)\\n            if(A[i] > 0 && a[i] > 0) res = char(\\'A\\' + i);\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2500913,
                "title": "c-easy-using-unorderedmap",
                "content": "class Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<char>v,v2;\\n        string b;\\n        unordered_map<char,int>m;\\n      for(int i=0;i<s.size();i++){\\n          if(isupper(s[i])) v.push_back(tolower(s[i])); \\n          else m[s[i]]++;\\n      }\\n        sort(v.begin(),v.end(),greater<char>());\\n        for(int i=0;i<v.size();i++){\\n            if(m.find(v[i])!=m.end()) v2.push_back(toupper(v[i]));\\n        }\\n        for(int i=0;i<v2.size();i++){\\n            if(v2[i]<=\\'Z\\' && v2[i]>=\\'A\\') b.push_back(v2[i]);\\n            break;\\n        }\\n        return b;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<char>v,v2;\\n        string b;\\n        unordered_map<char,int>m;\\n      for(int i=0;i<s.size();i++){\\n          if(isupper(s[i])) v.push_back(tolower(s[i])); \\n          else m[s[i]]++;\\n      }",
                "codeTag": "Java"
            },
            {
                "id": 2433154,
                "title": "c-solution-no-hashmap-low-storage-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        int low[26]={0},up[26]={0};\\n        for(auto i:s){\\n            if(isalpha(i)){\\n                if(islower(i)){\\n                    low[i-97]++;\\n                }\\n                else{\\n                    up[i-65]++;\\n                }\\n            }\\n        }\\n        for(int i=25;i>=0;i--){\\n            string c;\\n            c+=(char)i+65;\\n            if(up[i]>0 && low[i]>0)\\n                return c;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        int low[26]={0},up[26]={0};\\n        for(auto i:s){\\n            if(isalpha(i)){\\n                if(islower(i)){\\n                    low[i-97]++;\\n                }\\n                else{\\n                    up[i-65]++;\\n                }\\n            }\\n        }\\n        for(int i=25;i>=0;i--){\\n            string c;\\n            c+=(char)i+65;\\n            if(up[i]>0 && low[i]>0)\\n                return c;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2415507,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        boolean[] caps = new boolean[26];\\n        boolean[] smalls = new boolean[26];\\n        for(char ch : s.toCharArray()) {\\n            if(ch >=\\'a\\' && ch <= \\'z\\')\\n                smalls[ch-\\'a\\']=true;\\n            if(ch >=\\'A\\' && ch <= \\'Z\\')\\n                caps[ch-\\'A\\']=true;\\n        }\\n        char c = \\'Z\\';\\n        for(int i = 25; i >= 0; i--,c--) {\\n            if(caps[i] == true && smalls[i] == true)\\n                return \"\"+c;\\n        }\\n        return \"\";\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public String greatestLetter(String s) {\\n        boolean[] caps = new boolean[26];\\n        boolean[] smalls = new boolean[26];\\n        for(char ch : s.toCharArray()) {\\n            if(ch >=\\'a\\' && ch <= \\'z\\')\\n                smalls[ch-\\'a\\']=true;\\n            if(ch >=\\'A\\' && ch <= \\'Z\\')\\n                caps[ch-\\'A\\']=true;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2398289,
                "title": "o-n-solution",
                "content": "Just made Two arrays of 26 length to mark the presence of A Uppercase and lowercase Character.\\nThen checked them from the last to find the greatest one\\uD83D\\uDE05.\\n```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<int> A(26,0);\\n        vector<int> a(26,0);\\n        string x=\"\";\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\'){\\n                a[s[i]-97]=1;\\n            }\\n            if(s[i]>=\\'A\\' && s[i]<=\\'Z\\'){\\n                A[s[i]-65]=1;\\n            }\\n        }\\n        for(int i=25;i>=0;i--){\\n            if(A[i]==1 && a[i]==1){\\n                x.push_back(char(\\'A\\'+i));\\n                return x;\\n            }\\n        }\\n        return x;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<int> A(26,0);\\n        vector<int> a(26,0);\\n        string x=\"\";\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\'){\\n                a[s[i]-97]=1;\\n            }\\n            if(s[i]>=\\'A\\' && s[i]<=\\'Z\\'){\\n                A[s[i]-65]=1;\\n            }\\n        }\\n        for(int i=25;i>=0;i--){\\n            if(A[i]==1 && a[i]==1){\\n                x.push_back(char(\\'A\\'+i));\\n                return x;\\n            }\\n        }\\n        return x;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2352295,
                "title": "python3-easy-understand",
                "content": "```python\\n        global_max = \"\"\\n        curr_max = \"\"\\n        for char in s:\\n          if char.swapcase() in s:\\n            curr_max = char.upper()\\n          global_max = max(curr_max,global_max)\\n        return global_max\\n",
                "solutionTags": [],
                "code": "```python\\n        global_max = \"\"\\n        curr_max = \"\"\\n        for char in s:\\n          if char.swapcase() in s:\\n            curr_max = char.upper()\\n          global_max = max(curr_max,global_max)\\n        return global_max\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2344388,
                "title": "java-solution-easy-way-general-formula",
                "content": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        List<Character> list = new ArrayList<>();\\n        for (char c : s.toCharArray()){\\n            if (c >= 65 && c <= 90){\\n                list.add(c);\\n            }\\n        }\\n        Collections.sort(list);\\n        Collections.reverse(list);\\n        for (char c : list){\\n            for (int i = 0; i < s.length(); i++){\\n                if (c == s.charAt(i)) continue;\\n                if (c == (s.charAt(i) - 32)) return String.valueOf(c);\\n            }\\n        }\\n        return \"\";   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        List<Character> list = new ArrayList<>();\\n        for (char c : s.toCharArray()){\\n            if (c >= 65 && c <= 90){\\n                list.add(c);\\n            }\\n        }\\n        Collections.sort(list);\\n        Collections.reverse(list);\\n        for (char c : list){\\n            for (int i = 0; i < s.length(); i++){\\n                if (c == s.charAt(i)) continue;\\n                if (c == (s.charAt(i) - 32)) return String.valueOf(c);\\n            }\\n        }\\n        return \"\";   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2320798,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        letter_list, small_letter, capital_letter = [], [], []\\n        for i in range(len(s)) :\\n            if ord(s[i]) <= 90 : \\n                if s[i] not in capital_letter : \\n                    capital_letter.append(s[i])\\n                    letter_list.append(s[i].lower())\\n            else : \\n                if s[i] not in small_letter : \\n                    small_letter.append(s[i])\\n                    letter_list.append(s[i])\\n        \\n        max_letter, max_ord = \"\", 0\\n        for letter in letter_list : \\n            if letter_list.count(letter) >= 2 : \\n                if ord(letter) > max_ord : \\n                    max_ord = ord(letter)\\n                    max_letter = letter.upper()\\n        return max_letter \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        letter_list, small_letter, capital_letter = [], [], []\\n        for i in range(len(s)) :\\n            if ord(s[i]) <= 90 : \\n                if s[i] not in capital_letter : \\n                    capital_letter.append(s[i])\\n                    letter_list.append(s[i].lower())\\n            else : \\n                if s[i] not in small_letter : \\n                    small_letter.append(s[i])\\n                    letter_list.append(s[i])\\n        \\n        max_letter, max_ord = \"\", 0\\n        for letter in letter_list : \\n            if letter_list.count(letter) >= 2 : \\n                if ord(letter) > max_ord : \\n                    max_ord = ord(letter)\\n                    max_letter = letter.upper()\\n        return max_letter \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2310081,
                "title": "easy-cpp-solution-easy-to-understand-explained-with-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<int>ret; // Creating a vector\\n        string res; // Storing the result\\n        for(int i = 0  ; i < s.size() ; i++){\\n            if(s[i]>=97 && s[i]<=122){ // Checking lowercase alphabets\\n            auto pt = s.find(s[i]-32); // Manipulating the ASCII values to check if uppercase is present\\n                if(pt!= string::npos) // If true\\n                    ret.push_back(s[i]-32); // Pushback\\n            }\\n        }\\n        if(ret.empty()) // If the vector is empty\\n            return \"\"; // Return NULL\\n        res = *max_element(ret.begin() , ret.end()); // store the maximum ascii value in the string\\n        return res; // Return the string\\n                \\n        }\\n\\n};\\n```\\n##### Please upvote if you find this helpful\\n##### Please visit my github profile for more such solutions\\n[](http://)https://github.com/Reehan9/Leetcode-Solutions",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<int>ret; // Creating a vector\\n        string res; // Storing the result\\n        for(int i = 0  ; i < s.size() ; i++){\\n            if(s[i]>=97 && s[i]<=122){ // Checking lowercase alphabets\\n            auto pt = s.find(s[i]-32); // Manipulating the ASCII values to check if uppercase is present\\n                if(pt!= string::npos) // If true\\n                    ret.push_back(s[i]-32); // Pushback\\n            }\\n        }\\n        if(ret.empty()) // If the vector is empty\\n            return \"\"; // Return NULL\\n        res = *max_element(ret.begin() , ret.end()); // store the maximum ascii value in the string\\n        return res; // Return the string\\n                \\n        }\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2303661,
                "title": "simple-python3-solution",
                "content": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        chars = set(s)\\n        l = []\\n        for i in chars:\\n            if i.upper() in chars and i.lower() in chars:\\n                l.append(i)\\n        if l:\\n            l.sort()\\n            return l[-1].upper()\\n        else:\\n            return \"\"\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        chars = set(s)\\n        l = []\\n        for i in chars:\\n            if i.upper() in chars and i.lower() in chars:\\n                l.append(i)\\n        if l:\\n            l.sort()\\n            return l[-1].upper()\\n        else:\\n            return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2285271,
                "title": "java-o-n-solution",
                "content": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        char[] ca=s.toCharArray();\\n        boolean[] lower = new boolean[26];\\n        boolean[] upper = new boolean[26];\\n        for (char c:ca){\\n            if (c>=\\'a\\' && c<=\\'z\\'){\\n                lower[c-\\'a\\'] = true;\\n            }\\n            else {\\n                upper[c-\\'A\\'] = true;\\n            }\\n        }\\n        for (int i=25;i>=0;i--){\\n            if (lower[i] && upper[i]){\\n                return Character.toString((char)(\\'A\\'+i));\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        char[] ca=s.toCharArray();\\n        boolean[] lower = new boolean[26];\\n        boolean[] upper = new boolean[26];\\n        for (char c:ca){\\n            if (c>=\\'a\\' && c<=\\'z\\'){\\n                lower[c-\\'a\\'] = true;\\n            }\\n            else {\\n                upper[c-\\'A\\'] = true;\\n            }\\n        }\\n        for (int i=25;i>=0;i--){\\n            if (lower[i] && upper[i]){\\n                return Character.toString((char)(\\'A\\'+i));\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2271188,
                "title": "c-clean-code-using-unordered-map",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        unordered_map<char,int>ump;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]>=\\'a\\'&&s[i]<=\\'z\\')\\n                ump[s[i]-32]=1;\\n        }\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(ump[s[i]]==1)\\n                ump[s[i]]=2;\\n        }\\n        string ans=\"\";\\n        for(auto x:ump)\\n        {\\n            if(x.second==2)\\n            {\\n                if(ans.size()==0)\\n                    ans+=x.first;\\n                else\\n                {\\n                    if(x.first>ans[0])\\n                        ans[0]=x.first;\\n                }\\n            }\\n        }return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        unordered_map<char,int>ump;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]>=\\'a\\'&&s[i]<=\\'z\\')\\n                ump[s[i]-32]=1;\\n        }\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(ump[s[i]]==1)\\n                ump[s[i]]=2;\\n        }\\n        string ans=\"\";\\n        for(auto x:ump)\\n        {\\n            if(x.second==2)\\n            {\\n                if(ans.size()==0)\\n                    ans+=x.first;\\n                else\\n                {\\n                    if(x.first>ans[0])\\n                        ans[0]=x.first;\\n                }\\n            }\\n        }return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2257475,
                "title": "c-0ms-solution-100-faster-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        int visited[26]={0};\\n        int visited2[26]={0};\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(\\'a\\'<=s[i] &&s[i]<=\\'z\\')\\n            {\\n                visited[s[i]-\\'a\\']++;\\n            }\\n                \\n            else if(\\'A\\'<=s[i] &&s[i]<=\\'Z\\')\\n            {\\n                visited2[s[i]-\\'A\\']++;\\n            }\\n        }\\n        int ans=0;    \\n        bool flag=false;\\n        for(int i=0;i<26;i++)\\n        {\\n            if(visited[i]>0 &&visited2[i]>0)\\n            {\\n                ans=i;\\n                flag=true;\\n            }\\n        }\\n        string res;\\n        if(flag==true)\\n            res.push_back(ans+\\'A\\');\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        int visited[26]={0};\\n        int visited2[26]={0};\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(\\'a\\'<=s[i] &&s[i]<=\\'z\\')\\n            {\\n                visited[s[i]-\\'a\\']++;\\n            }\\n                \\n            else if(\\'A\\'<=s[i] &&s[i]<=\\'Z\\')\\n            {\\n                visited2[s[i]-\\'A\\']++;\\n            }\\n        }\\n        int ans=0;    \\n        bool flag=false;\\n        for(int i=0;i<26;i++)\\n        {\\n            if(visited[i]>0 &&visited2[i]>0)\\n            {\\n                ans=i;\\n                flag=true;\\n            }\\n        }\\n        string res;\\n        if(flag==true)\\n            res.push_back(ans+\\'A\\');\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2253232,
                "title": "javascript-simple-easy-solution",
                "content": "```\\nvar greatestLetter = function (s) {\\n  s = s.split(\"\").sort().reverse()\\n  for (let i = 0; i < s.length; i++) {\\n    if (s[i] === s[i].toUpperCase() || s.length === 1) return \\'\\'\\n    else {\\n      if (s.includes(s[i].toUpperCase())) return s[i].toUpperCase()\\n    }\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar greatestLetter = function (s) {\\n  s = s.split(\"\").sort().reverse()\\n  for (let i = 0; i < s.length; i++) {\\n    if (s[i] === s[i].toUpperCase() || s.length === 1) return \\'\\'\\n    else {\\n      if (s.includes(s[i].toUpperCase())) return s[i].toUpperCase()\\n    }\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2250889,
                "title": "easiest-python-5-liner-solution-w-explanation",
                "content": "1. Simply sort the string.\\n2. Now traverse the array backwards (<--) bcz the highest char would be in the end.\\n3. Check if both lower and upper case for the character exists in str.\\n4. Return the char in uppercase, else return empty string.\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        s=sorted(s)\\n        for i in reversed(range(len(s))): \\n            if s[i].upper() in s and s[i].lower() in s:\\n                return s[i].upper()\\n        return \"\"\\n```",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        s=sorted(s)\\n        for i in reversed(range(len(s))): \\n            if s[i].upper() in s and s[i].lower() in s:\\n                return s[i].upper()\\n        return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2238442,
                "title": "fastest-java-solution-using-hashset",
                "content": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        HashSet<Character> hset = new HashSet<>();\\n        for(char ch : s.toCharArray())\\n            hset.add(ch);\\n        \\n        for(char ch = \\'Z\\'; ch >= \\'A\\'; ch--)\\n            if(hset.contains(ch) && hset.contains(Character.toLowerCase(ch)))\\n               return ch+\"\";\\n        return \"\";\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public String greatestLetter(String s) {\\n        HashSet<Character> hset = new HashSet<>();\\n        for(char ch : s.toCharArray())\\n            hset.add(ch);\\n        \\n        for(char ch = \\'Z\\'; ch >= \\'A\\'; ch--)\\n            if(hset.contains(ch) && hset.contains(Character.toLowerCase(ch)))\\n               return ch+\"\";\\n        return \"\";\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2221471,
                "title": "greatest-english-letter-in-upper-and-lower-case",
                "content": "```class Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        l=[]\\n        m=[]\\n        for i in s:\\n            l.append(i)\\n        for i in l:\\n            c=ord(i)\\n            if (chr(c+32) or chr(c-32)) in l:\\n                m.append(chr(c))\\n        if len(m)!=0:\\n            return max(m)\\n        else:\\n            return \"\"\\n        \\'\\'\\'",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```class Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        l=[]\\n        m=[]\\n        for i in s:\\n            l.append(i)\\n        for i in l:\\n            c=ord(i)\\n            if (chr(c+32) or chr(c-32)) in l:\\n                m.append(chr(c))\\n        if len(m)!=0:\\n            return max(m)\\n        else:\\n            return \"\"\\n        \\'\\'\\'",
                "codeTag": "Java"
            },
            {
                "id": 2215827,
                "title": "frequency-array-c",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<int> upper(26, 0), lower(26, 0);\\n        for (auto& c : s)\\n            islower(c) ? lower[c - \\'a\\']++ : upper[c - \\'A\\']++;\\n        for (int i = 25; ~i; i--)\\n            if (upper[i] && lower[i])\\n                return string(1, \\'A\\' + i);\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<int> upper(26, 0), lower(26, 0);\\n        for (auto& c : s)\\n            islower(c) ? lower[c - \\'a\\']++ : upper[c - \\'A\\']++;\\n        for (int i = 25; ~i; i--)\\n            if (upper[i] && lower[i])\\n                return string(1, \\'A\\' + i);\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2210875,
                "title": "python-simple-maths",
                "content": "\\n    def greatestLetter(self, s):\\n        res = \"\"\\n        \\n        for i in s:\\n            if (i.islower() and i.upper() in s) or (i.isupper() and i.lower() in s):\\n                res = max(res, i.upper())\\n                \\n        return res",
                "solutionTags": [],
                "code": "\\n    def greatestLetter(self, s):\\n        res = \"\"\\n        \\n        for i in s:\\n            if (i.islower() and i.upper() in s) or (i.isupper() and i.lower() in s):\\n                res = max(res, i.upper())\\n                \\n        return res",
                "codeTag": "Python3"
            },
            {
                "id": 2201214,
                "title": "python-fast-and-simple",
                "content": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        from string import ascii_lowercase as al, ascii_uppercase as au\\n        for i in range(len(al)-1,-1,-1):\\n            if al[i] in s and au[i] in s:\\n                return au[i]\\n        else:\\n            return \\'\\'\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        from string import ascii_lowercase as al, ascii_uppercase as au\\n        for i in range(len(al)-1,-1,-1):\\n            if al[i] in s and au[i] in s:\\n                return au[i]\\n        else:\\n            return \\'\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2197874,
                "title": "java-solution-100-faster",
                "content": "**Best Approach**\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        for(char i=\\'Z\\'; i>=\\'A\\'; i--){ \\n            if(s.indexOf(i)!=-1 && s.indexOf(i+32)!=-1){ return i+\"\"; } \\n        }\\n        return \"\";\\n    }\\n}\\n```\\n**Another approach**\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        int[] arr=new int[26];\\n        for(int i=0; i<s.length(); i++){\\n            int n=s.charAt(i);\\n            if(n>96){\\n                if(arr[n-97]==1 || arr[n-97]==3){ arr[n-97]=3; }\\n                else{ arr[n-97]=2; }\\n            }\\n            else{\\n                if(arr[n-65]==2 || arr[n-65]==3){ arr[n-65]=3; }\\n                else{ arr[n-65]=1; }\\n            }\\n        }\\n        String ans=\"\";\\n        for(int i=0; i<26; i++){ if(arr[i]==3){ ans=(char)(i+65)+\"\"; } }\\n        return ans;\\n    }\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        for(char i=\\'Z\\'; i>=\\'A\\'; i--){ \\n            if(s.indexOf(i)!=-1 && s.indexOf(i+32)!=-1){ return i+\"\"; } \\n        }\\n        return \"\";\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        int[] arr=new int[26];\\n        for(int i=0; i<s.length(); i++){\\n            int n=s.charAt(i);\\n            if(n>96){\\n                if(arr[n-97]==1 || arr[n-97]==3){ arr[n-97]=3; }\\n                else{ arr[n-97]=2; }\\n            }\\n            else{\\n                if(arr[n-65]==2 || arr[n-65]==3){ arr[n-65]=3; }\\n                else{ arr[n-65]=1; }\\n            }\\n        }\\n        String ans=\"\";\\n        for(int i=0; i<26; i++){ if(arr[i]==3){ ans=(char)(i+65)+\"\"; } }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2194181,
                "title": "greatest-english-letter-in-upper-and-lower-case",
                "content": "```class Solution {\\npublic:\\n    bool check_small(char c){\\n        return c>=97 && c<=122;\\n    }\\n    string greatestLetter(string s) {\\n        unordered_map<char ,int> mp;\\n        for(auto i:s){\\n            mp[i]++;\\n        }\\n        int max_ans = INT_MIN;\\n        string ans  =\"\";\\n        for(auto i:s){\\n            if(check_small(i)){\\n                if(mp[toupper(i)]>0){\\n                    if((int)(i-\\'a\\') > max_ans){\\n                        max_ans =(int)(i-\\'a\\');\\n                        ans = toupper(i);\\n                    }\\n                }\\n            }\\n        }\\n        return ans;\\n        \\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool check_small(char c){\\n        return c>=97 && c<=122;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2187567,
                "title": "easy-java-solution-100-faster",
                "content": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        for (char c = \\'Z\\'; c>=\\'A\\'; c--){\\n            if (s.indexOf(c) >= 0 && s.indexOf(c+32) >= 0){\\n                return String.valueOf(c);\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        for (char c = \\'Z\\'; c>=\\'A\\'; c--){\\n            if (s.indexOf(c) >= 0 && s.indexOf(c+32) >= 0){\\n                return String.valueOf(c);\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2187359,
                "title": "java-easy-array-solution",
                "content": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n       int[][]memo = new int[26][2];\\n        for (char c: s.toCharArray()){\\n            if (c>=\\'A\\' && c<=\\'Z\\')memo[c-\\'A\\'][0]=1;\\n            if (c>=\\'a\\' && c<=\\'z\\')memo[c-\\'a\\'][1]=1;\\n        }\\n        for (int i=25;i>=0;i--)\\n            if (memo[i][0]==1 && memo[i][1]==1)return Character.toString(\\'A\\'+i);\\n     return \"\";   \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n       int[][]memo = new int[26][2];\\n        for (char c: s.toCharArray()){\\n            if (c>=\\'A\\' && c<=\\'Z\\')memo[c-\\'A\\'][0]=1;\\n            if (c>=\\'a\\' && c<=\\'z\\')memo[c-\\'a\\'][1]=1;\\n        }\\n        for (int i=25;i>=0;i--)\\n            if (memo[i][0]==1 && memo[i][1]==1)return Character.toString(\\'A\\'+i);\\n     return \"\";   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2182952,
                "title": "java-o-n-time-o-1-space",
                "content": "```\\nclass Solution {\\n    public String greatestLetter(String S) {\\n        int caps = 0, lows = 0;\\n        int maxDiff = Integer.MIN_VALUE;\\n        for (int i = 0; i < S.length(); i++) {\\n            char c = S.charAt(i);\\n            int diff = 0;\\n            if (c >= 65 && c <= 90) {\\n                diff = c - \\'A\\';\\n                caps |= (1 << diff);\\n            } else {\\n                diff = c - \\'a\\';\\n                lows |= (1 << diff);\\n            }\\n                        \\n            if (diff > maxDiff && (caps & (1 << diff)) > 0 && (lows & (1 << diff)) > 0) {\\n                maxDiff = diff;\\n            }\\n        }\\n        \\n        return maxDiff == Integer.MIN_VALUE ? \"\" : (char) (\\'A\\' + maxDiff) + \"\";\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String S) {\\n        int caps = 0, lows = 0;\\n        int maxDiff = Integer.MIN_VALUE;\\n        for (int i = 0; i < S.length(); i++) {\\n            char c = S.charAt(i);\\n            int diff = 0;\\n            if (c >= 65 && c <= 90) {\\n                diff = c - \\'A\\';\\n                caps |= (1 << diff);\\n            } else {\\n                diff = c - \\'a\\';\\n                lows |= (1 << diff);\\n            }\\n                        \\n            if (diff > maxDiff && (caps & (1 << diff)) > 0 && (lows & (1 << diff)) > 0) {\\n                maxDiff = diff;\\n            }\\n        }\\n        \\n        return maxDiff == Integer.MIN_VALUE ? \"\" : (char) (\\'A\\' + maxDiff) + \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2182832,
                "title": "python-solution-with-o-1-space",
                "content": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        upper = 0\\n        small = 0\\n        for i in s:\\n            if (ord(i)-ord(\\'a\\'))<0:\\n                upper = upper | 1<<(ord(i)-ord(\\'A\\'))\\n            else:\\n                small = small | 1<<(ord(i)-ord(\\'a\\'))\\n        result = upper & small\\n        if result==0:\\n            return \"\"\\n        return chr(64+len(bin(result))-2)\\n```",
                "solutionTags": [
                    "Python",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        upper = 0\\n        small = 0\\n        for i in s:\\n            if (ord(i)-ord(\\'a\\'))<0:\\n                upper = upper | 1<<(ord(i)-ord(\\'A\\'))\\n            else:\\n                small = small | 1<<(ord(i)-ord(\\'a\\'))\\n        result = upper & small\\n        if result==0:\\n            return \"\"\\n        return chr(64+len(bin(result))-2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2182576,
                "title": "java-hash-simple",
                "content": ">**T/S:** O(n)/O(1), where n = size(s)\\n```\\npublic String greatestLetter(String s) {\\n\\tvar letters = new HashSet<Character>();\\n\\tfor (var i = 0; i < s.length(); i++)\\n\\t\\tletters.add(s.charAt(i));\\n\\t\\t\\n\\tfor (var c = \\'Z\\'; c >= \\'A\\'; c--)\\n\\t\\tif (letters.contains(c) && letters.contains(Character.toLowerCase(c)))\\n\\t\\t\\treturn Character.toString(c);\\n\\treturn \"\";\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic String greatestLetter(String s) {\\n\\tvar letters = new HashSet<Character>();\\n\\tfor (var i = 0; i < s.length(); i++)\\n\\t\\tletters.add(s.charAt(i));\\n\\t\\t\\n\\tfor (var c = \\'Z\\'; c >= \\'A\\'; c--)\\n\\t\\tif (letters.contains(c) && letters.contains(Character.toLowerCase(c)))\\n\\t\\t\\treturn Character.toString(c);\\n\\treturn \"\";\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2176014,
                "title": "java-solution-faster-than-100-easy-solution",
                "content": "```\\nclass Solution {\\n\\n    public String greatestLetter(String s) {\\n        int count[] = new int[26];\\n        int countUpper[] = new int[26];\\n        for (char ch : s.toCharArray()) {\\n            if (Character.isLowerCase(ch)) count[ch - \\'a\\']++; else countUpper[ch - \\'A\\']++;\\n        }\\n        int val = -1;\\n        for (int i = 0; i < 26; i++) {\\n            if (count[i] > 0 && countUpper[i] > 0) val = i;\\n        }\\n        return val != -1 ? String.valueOf((char) (val + \\'A\\')) : \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n\\n    public String greatestLetter(String s) {\\n        int count[] = new int[26];\\n        int countUpper[] = new int[26];\\n        for (char ch : s.toCharArray()) {\\n            if (Character.isLowerCase(ch)) count[ch - \\'a\\']++; else countUpper[ch - \\'A\\']++;\\n        }\\n        int val = -1;\\n        for (int i = 0; i < 26; i++) {\\n            if (count[i] > 0 && countUpper[i] > 0) val = i;\\n        }\\n        return val != -1 ? String.valueOf((char) (val + \\'A\\')) : \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2175799,
                "title": "java-very-simple-4-statements-very-fast-0ms",
                "content": "The following has runtime as low as 0ms, but usually has a runtime of 1ms, on June 20, 2022.\\n\\nWith long input strings of random characters, the code below will be fast because it usually doesn\\'t have to search very far into the string before it finds the character.  Also in the code below, looping from character \\'Z\\' downto character \\'A\\', if the string is long and random, then it is likely to find a uppercase and lowercase pair with few passes through the loop.  A worst case test for the code below would be 1000 characters all the same, because 51 calls to `indexOf()` would search the entire long string with no match.\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        for (char c = \\'Z\\'; c >= \\'A\\'; c--)\\n            if (s.indexOf(c) >= 0 && s.indexOf(c + 32) >= 0)\\n                return String.valueOf(c);\\n        return \"\";\\n    }\\n}\\n```\\nThe code below is a slightly slower and slightly longer code solution, which was my first try, and has a runtime only as fast as 1ms.  For the faster code above, I got the algorithm idea from sample code when clinking on the 0ms bar on the runtime graph for this leetcode problem.\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        boolean[] found = new boolean[128];\\n        for (char c : s.toCharArray())  \\n            found[c] = true;\\n        for (char c = \\'Z\\'; c >= \\'A\\'; c--)\\n            if (found[c] && found[c + \\'a\\' - \\'A\\'])\\n                return String.valueOf(c);\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        for (char c = \\'Z\\'; c >= \\'A\\'; c--)\\n            if (s.indexOf(c) >= 0 && s.indexOf(c + 32) >= 0)\\n                return String.valueOf(c);\\n        return \"\";\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        boolean[] found = new boolean[128];\\n        for (char c : s.toCharArray())  \\n            found[c] = true;\\n        for (char c = \\'Z\\'; c >= \\'A\\'; c--)\\n            if (found[c] && found[c + \\'a\\' - \\'A\\'])\\n                return String.valueOf(c);\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2172132,
                "title": "o-n-time-and-o-1-space-solution-video",
                "content": "I posted a video with a conceptual and Python solution: https://www.youtube.com/watch?v=Lnnw2ModazQ\\nIt is O(n) time and O(1) space complexity and is a straightforward solution.\\nHope it helps!",
                "solutionTags": [
                    "Python"
                ],
                "code": "I posted a video with a conceptual and Python solution: https://www.youtube.com/watch?v=Lnnw2ModazQ\\nIt is O(n) time and O(1) space complexity and is a straightforward solution.\\nHope it helps!",
                "codeTag": "Unknown"
            },
            {
                "id": 2171900,
                "title": "javascript-o-n-counter",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar greatestLetter = function(s) {\\n    let upper = new Array(26).fill(0)\\n    let lower = new Array(26).fill(0)\\n    for (let i = 0; i < s.length; i++) {\\n        const charCode = s.charCodeAt(i)\\n        if (charCode >= 97) {\\n            lower[charCode - 97] = 1\\n        } else {\\n            upper[charCode - 65] = 1\\n        }\\n    }\\n    \\n    for (let i = 25; i >= 0; i--) {\\n        if (lower[i] && upper[i]) {\\n            return String.fromCharCode(65 + i)\\n        }\\n    }\\n    \\n    return \\'\\'\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar greatestLetter = function(s) {\\n    let upper = new Array(26).fill(0)\\n    let lower = new Array(26).fill(0)\\n    for (let i = 0; i < s.length; i++) {\\n        const charCode = s.charCodeAt(i)\\n        if (charCode >= 97) {\\n            lower[charCode - 97] = 1\\n        } else {\\n            upper[charCode - 65] = 1\\n        }\\n    }\\n    \\n    for (let i = 25; i >= 0; i--) {\\n        if (lower[i] && upper[i]) {\\n            return String.fromCharCode(65 + i)\\n        }\\n    }\\n    \\n    return \\'\\'\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2171584,
                "title": "javascript-solution-simple-understandable-fast",
                "content": "```\\nvar greatestLetter = function(s) {\\n    let alphebet = \\'aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\\'\\n    let result;\\n    for (let letter of s) {\\n        if (alphebet.indexOf(letter) > alphebet.indexOf(result)) {\\n            let upper = letter.toUpperCase()\\n            if (s.includes(upper) && s.includes(letter.toLowerCase())) result = upper;\\n        }\\n    } if (!result) return \"\";\\n    return result;\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/3d8192cb-6239-4e40-9094-ed1c5a98cd7a_1655662629.7124755.png)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar greatestLetter = function(s) {\\n    let alphebet = \\'aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\\'\\n    let result;\\n    for (let letter of s) {\\n        if (alphebet.indexOf(letter) > alphebet.indexOf(result)) {\\n            let upper = letter.toUpperCase()\\n            if (s.includes(upper) && s.includes(letter.toLowerCase())) result = upper;\\n        }\\n    } if (!result) return \"\";\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2171216,
                "title": "swift-very-simple-solution-with-intersection-100-faster",
                "content": "```\\nclass Solution {\\n    func greatestLetter(_ s: String) -> String {\\n        var lowerCased: Set<String> = []\\n        var upperCased: Set<String> = []\\n\\n        s.forEach{\\n            $0.isLowercase ? lowerCased.insert(String($0).uppercased()) : upperCased.insert((String($0)))\\n        }\\n\\n        return lowerCased.intersection(upperCased).sorted().last ?? \"\"\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func greatestLetter(_ s: String) -> String {\\n        var lowerCased: Set<String> = []\\n        var upperCased: Set<String> = []\\n\\n        s.forEach{\\n            $0.isLowercase ? lowerCased.insert(String($0).uppercased()) : upperCased.insert((String($0)))\\n        }\\n\\n        return lowerCased.intersection(upperCased).sorted().last ?? \"\"\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2170749,
                "title": "python-set",
                "content": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        s = set(s)        \\n        for c in sorted(s, reverse=True):\\n            if c.isupper() and c.lower() in s:\\n                return c\\n            \\n        return \"\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        s = set(s)        \\n        for c in sorted(s, reverse=True):\\n            if c.isupper() and c.lower() in s:\\n                return c\\n            \\n        return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2170129,
                "title": "ruby-one-liner-beats-100-100",
                "content": "```\\n# @param {String} s\\n# @return {String}\\ndef greatest_letter(s)\\n  [\\'\\', *\\'A\\'..\\'Z\\'].reverse.find { s.include?(_1) && s.include?(_1.downcase) }\\nend\\n```",
                "solutionTags": [],
                "code": "```\\n# @param {String} s\\n# @return {String}\\ndef greatest_letter(s)\\n  [\\'\\', *\\'A\\'..\\'Z\\'].reverse.find { s.include?(_1) && s.include?(_1.downcase) }\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2169767,
                "title": "greatest-english-letter-in-upper-and-lower-case-java-easy",
                "content": "\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        int n = s.length();\\n        boolean upper[] = new boolean[26];\\n        boolean lower[] = new boolean[26];\\n\\n        for(int i=0; i<n ; i++){\\n            char chi = s.charAt(i);\\n            if(Character.isLowerCase(chi) == true) lower[chi-97] = true;\\n            if(Character.isUpperCase(chi) == true) upper[chi-65] = true;\\n            \\n        }\\n        //traverse from back\\n        for(int i=25; i>=0; i--){\\n            if(upper[i]==true && lower[i]==true) {               \\n                String ans = \"\";\\n\\t\\t\\t\\t//convert i into char, char into uppercase, then this uppercase char into String\\n                ans = String.valueOf(Character.toUpperCase((char)(i+65)));                \\n                return ans; \\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        int n = s.length();\\n        boolean upper[] = new boolean[26];\\n        boolean lower[] = new boolean[26];\\n\\n        for(int i=0; i<n ; i++){\\n            char chi = s.charAt(i);\\n            if(Character.isLowerCase(chi) == true) lower[chi-97] = true;\\n            if(Character.isUpperCase(chi) == true) upper[chi-65] = true;\\n            \\n        }\\n        //traverse from back\\n        for(int i=25; i>=0; i--){\\n            if(upper[i]==true && lower[i]==true) {               \\n                String ans = \"\";\\n\\t\\t\\t\\t//convert i into char, char into uppercase, then this uppercase char into String\\n                ans = String.valueOf(Character.toUpperCase((char)(i+65)));                \\n                return ans; \\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2169651,
                "title": "java-simple-without-any-space",
                "content": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        \\n        String ans = \"\";\\n        int max = 0;\\n        \\n        for(int i=0; i<s.length(); i++) {\\n            char ch = s.charAt(i);\\n            \\n            if((int)Character.toUpperCase(ch) > max) {\\n                if(Character.isUpperCase(ch))\\n                    ch = Character.toLowerCase(ch);\\n                else\\n                    ch = Character.toUpperCase(ch);\\n                \\n                if(s.indexOf(ch) != -1) {\\n                    ans += Character.toUpperCase(ch);\\n                    max = (int) Character.toUpperCase(ch);\\n                }    \\n            }\\n        }\\n\\t\\t\\n        return ans.length() == 0 ? ans : ans.substring(ans.length() - 1, ans.length());\\n        \\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        \\n        String ans = \"\";\\n        int max = 0;\\n        \\n        for(int i=0; i<s.length(); i++) {\\n            char ch = s.charAt(i);\\n            \\n            if((int)Character.toUpperCase(ch) > max) {\\n                if(Character.isUpperCase(ch))\\n                    ch = Character.toLowerCase(ch);\\n                else\\n                    ch = Character.toUpperCase(ch);\\n                \\n                if(s.indexOf(ch) != -1) {\\n                    ans += Character.toUpperCase(ch);\\n                    max = (int) Character.toUpperCase(ch);\\n                }    \\n            }\\n        }\\n\\t\\t\\n        return ans.length() == 0 ? ans : ans.substring(ans.length() - 1, ans.length());\\n        \\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168827,
                "title": "scala-1-liner",
                "content": "This is why I love Scala\\n\\n```\\nobject Solution {\\n  def greatestLetter(s: String): String = s.groupBy(c => if (c >= \\'a\\') c - \\'a\\' else c - \\'A\\')\\n    .filter(_._2.distinct.length > 1)\\n    .toSeq.sortBy(_._1)(Ordering.Int.reverse)\\n    .headOption.map(_._2.sorted.head.toString)\\n    .getOrElse(\"\")\\n}\\n```\\n\\nEven better\\n```\\nobject Solution {\\n  def greatestLetter(s: String): String = (\\'Z\\'.toInt to \\'A\\'.toInt by -1).map(_.toChar)\\n\\t.filter(c => s.contains(c) && s.contains(c.toLower))\\n\\t.headOption.map(_.toString).getOrElse(\"\")\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n  def greatestLetter(s: String): String = s.groupBy(c => if (c >= \\'a\\') c - \\'a\\' else c - \\'A\\')\\n    .filter(_._2.distinct.length > 1)\\n    .toSeq.sortBy(_._1)(Ordering.Int.reverse)\\n    .headOption.map(_._2.sorted.head.toString)\\n    .getOrElse(\"\")\\n}\\n```\n```\\nobject Solution {\\n  def greatestLetter(s: String): String = (\\'Z\\'.toInt to \\'A\\'.toInt by -1).map(_.toChar)\\n\\t.filter(c => s.contains(c) && s.contains(c.toLower))\\n\\t.headOption.map(_.toString).getOrElse(\"\")\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2168637,
                "title": "c-naive-approach-using-map",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        unordered_map<char,int>mp;\\n        string ans=\"\";\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]-0>=65 and s[i]-0<=90){\\n                mp[s[i]]++;\\n            }\\n        }\\n        sort(s.begin(),s.end(), greater<char>());\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]-0>=97 and s[i]-0<=122){\\n                if(mp.find(s[i]-32)!=mp.end()){\\n                    ans+=s[i]-32;\\n                    break;\\n                }\\n            }\\n        }\\n        return (ans);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        unordered_map<char,int>mp;\\n        string ans=\"\";\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]-0>=65 and s[i]-0<=90){\\n                mp[s[i]]++;\\n            }\\n        }\\n        sort(s.begin(),s.end(), greater<char>());\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]-0>=97 and s[i]-0<=122){\\n                if(mp.find(s[i]-32)!=mp.end()){\\n                    ans+=s[i]-32;\\n                    break;\\n                }\\n            }\\n        }\\n        return (ans);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168513,
                "title": "c-easy-to-understand-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        map<int,int> m1,m2;\\n        for(char ch:s)\\n        {\\n            if(ch>=97&ch<=122)\\n            {\\n                m1[ch-97]++;\\n            }\\n            if(ch>=65&&ch<=90)\\n            {\\n                m2[ch-65]++;\\n            }\\n        }\\n        int ans=-1;\\n        for(int i=0;i<26;i++)\\n        {\\n            if(m1.find(i)!=m1.end()&&m2.find(i)!=m2.end())\\n            {\\n                ans=i;\\n            }\\n        }\\n        if(ans==-1)\\n        return \"\";\\n        char ch=(char)(ans+65);\\n        string st=\"\";\\n        st+=ch;\\n        return st;\\n    }\\n};\\n```\\n**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community). HAPPY CODING:)\\nAny suggestions and improvements are always welcome**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        map<int,int> m1,m2;\\n        for(char ch:s)\\n        {\\n            if(ch>=97&ch<=122)\\n            {\\n                m1[ch-97]++;\\n            }\\n            if(ch>=65&&ch<=90)\\n            {\\n                m2[ch-65]++;\\n            }\\n        }\\n        int ans=-1;\\n        for(int i=0;i<26;i++)\\n        {\\n            if(m1.find(i)!=m1.end()&&m2.find(i)!=m2.end())\\n            {\\n                ans=i;\\n            }\\n        }\\n        if(ans==-1)\\n        return \"\";\\n        char ch=(char)(ans+65);\\n        string st=\"\";\\n        st+=ch;\\n        return st;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168468,
                "title": "frequency-count",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        int a[27]={0};\\n        int A[27]={0};\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]>=65 && s[i]<=90)\\n            {\\n                A[s[i] -\\'A\\'+1]++;\\n            }\\n            else\\n                a[ s[i]-\\'a\\'+1]++;\\n        }\\n        \\n        int maxi=-1;\\n        for(int i=1;i<27;i++)\\n        {\\n            if(a[i]!=0 && A[i]!=0 )\\n            {\\n                    maxi=i;  \\n            }\\n        }\\n       \\n        char ans;\\n      \\n         string ANS=\"\";\\n       \\n        if(maxi>0)\\n        {\\n            ans= maxi+\\'A\\'-1;\\n             ANS +=ans;\\n        }\\n       \\n       \\n        return ANS;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        int a[27]={0};\\n        int A[27]={0};\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]>=65 && s[i]<=90)\\n            {\\n                A[s[i] -\\'A\\'+1]++;\\n            }\\n            else\\n                a[ s[i]-\\'a\\'+1]++;\\n        }\\n        \\n        int maxi=-1;\\n        for(int i=1;i<27;i++)\\n        {\\n            if(a[i]!=0 && A[i]!=0 )\\n            {\\n                    maxi=i;  \\n            }\\n        }\\n       \\n        char ans;\\n      \\n         string ANS=\"\";\\n       \\n        if(maxi>0)\\n        {\\n            ans= maxi+\\'A\\'-1;\\n             ANS +=ans;\\n        }\\n       \\n       \\n        return ANS;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168447,
                "title": "javascript-magical-variable-type-mix-75ms",
                "content": "```javascript\\nvar greatestLetter = function(s) {\\n  const c = Array(26).fill(0);\\n  for (let i = 0; i < s.length; ++i) {\\n    const j = s.charCodeAt(i) - 65;\\n    if (j < 32) c[j] = 1 + 2 * (c[j] > 1);\\n    else c[j - 32] = 2 + (c[j - 32] & 1);\\n  }\\n  const res = String.fromCharCode(65 + c.lastIndexOf(3));\\n  return res === \\'@\\' ? \\'\\' : res;\\n};\\n```\\n**Convention:** 0: no occurrence, 1: uppercase, 2: lowercase, 3: both up&lowercase exist\\n**For loop explanation:**\\n`x > 1`: `x` is 2 or 3\\n`x & 1`: `x` is odd (1 or 3)\\n```javascript\\nfor (let i = 0; i < s.length; ++i) {\\n  const j = s.charCodeAt(i) - 65;\\n  if (j < 32) { // Uppercase\\n    if (c[j] === 3) c[j] = 3;\\n    if (c[j] === 0) c[j] = 1;\\n\\tif (c[j] === 2) c[j] = 3;\\n  } else { // Lowercase\\n    if (c[j - 32] === 3) c[j - 32] = 3;\\n\\tif (c[j - 32] === 0) c[j - 32] = 2;\\n\\tif (c[j - 32] === 1) c[j - 32] = 3;\\n  }\\n}\\n```\\n**Result explanation:**\\nIf `c` does not include `3`, a.k.a no letter with both uppercase and lowercase variations exist in `s`, `c.lastIndexOf(3) === -1`.\\n65 - 1 = 64 \\u2192 `String.fromCharCode(64) === \\'@\\'`",
                "solutionTags": [
                    "JavaScript",
                    "Bit Manipulation"
                ],
                "code": "```javascript\\nvar greatestLetter = function(s) {\\n  const c = Array(26).fill(0);\\n  for (let i = 0; i < s.length; ++i) {\\n    const j = s.charCodeAt(i) - 65;\\n    if (j < 32) c[j] = 1 + 2 * (c[j] > 1);\\n    else c[j - 32] = 2 + (c[j - 32] & 1);\\n  }\\n  const res = String.fromCharCode(65 + c.lastIndexOf(3));\\n  return res === \\'@\\' ? \\'\\' : res;\\n};\\n```\n```javascript\\nfor (let i = 0; i < s.length; ++i) {\\n  const j = s.charCodeAt(i) - 65;\\n  if (j < 32) { // Uppercase\\n    if (c[j] === 3) c[j] = 3;\\n    if (c[j] === 0) c[j] = 1;\\n\\tif (c[j] === 2) c[j] = 3;\\n  } else { // Lowercase\\n    if (c[j - 32] === 3) c[j - 32] = 3;\\n\\tif (c[j - 32] === 0) c[j - 32] = 2;\\n\\tif (c[j - 32] === 1) c[j - 32] = 3;\\n  }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2168446,
                "title": "simple-traverse-and-store-frequency-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<int> lower(26, 0), upper(26, 0);\\n        for(int i = 0; i < s.size(); ++i){\\n            if(s[i] >= \\'a\\' && s[i] <= \\'z\\')  lower[s[i] - \\'a\\']++;\\n            else    upper[s[i] - \\'A\\']++;\\n        }\\n        string ans = \"\";\\n        for(int i = 25; i >= 0; --i){\\n            if(lower[i] > 0 && upper[i] > 0)\\n                return ans + (char)(\\'A\\' + i);\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        vector<int> lower(26, 0), upper(26, 0);\\n        for(int i = 0; i < s.size(); ++i){\\n            if(s[i] >= \\'a\\' && s[i] <= \\'z\\')  lower[s[i] - \\'a\\']++;\\n            else    upper[s[i] - \\'A\\']++;\\n        }\\n        string ans = \"\";\\n        for(int i = 25; i >= 0; --i){\\n            if(lower[i] > 0 && upper[i] > 0)\\n                return ans + (char)(\\'A\\' + i);\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168420,
                "title": "c-simple-solution-easy-to-understand",
                "content": "string greatestLetter(string s) {\\n        int n=s.size();\\n     vector<int> l(26,0),h(26,0);\\n        for(auto it:s){\\n            if(it>=\\'A\\' and it<=\\'Z\\') h[it-\\'A\\']++;\\n             if(it>=\\'a\\' and it<=\\'z\\') l[it-\\'a\\']++;\\n        }\\n        string p=\"\";\\n        for(int i=25;i>=0;i--){\\n            if(l[i]>=1 and h[i]>=1){\\n                p+=(\\'A\\'+i);\\n                return p;\\n            }\\n        }\\n        return \"\";\\n    }****",
                "solutionTags": [
                    "C",
                    "Counting"
                ],
                "code": "string greatestLetter(string s) {\\n        int n=s.size();\\n     vector<int> l(26,0),h(26,0);\\n        for(auto it:s){\\n            if(it>=\\'A\\' and it<=\\'Z\\') h[it-\\'A\\']++;\\n             if(it>=\\'a\\' and it<=\\'z\\') l[it-\\'a\\']++;\\n        }\\n        string p=\"\";\\n        for(int i=25;i>=0;i--){\\n            if(l[i]>=1 and h[i]>=1){\\n                p+=(\\'A\\'+i);\\n                return p;\\n            }\\n        }\\n        return \"\";\\n    }****",
                "codeTag": "Unknown"
            },
            {
                "id": 2168410,
                "title": "c-easy-to-underatand-constant-time",
                "content": "```\\nstring greatestLetter(string s) {\\n        string res=\"\";\\n        map<char,int> mp;\\n        for(int i=0;i<s.length();i++) mp[s[i]]++;\\n        char c=\\'Z\\',d=\\'z\\';\\n        for(int i=0;i<26;i++){\\n            if(mp.find(c)!=mp.end() && mp.find(d)!=mp.end()){\\n              res+=c;\\n              break;\\n            }\\n            c--,d--;\\n        }\\n        return res;\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nstring greatestLetter(string s) {\\n        string res=\"\";\\n        map<char,int> mp;\\n        for(int i=0;i<s.length();i++) mp[s[i]]++;\\n        char c=\\'Z\\',d=\\'z\\';\\n        for(int i=0;i<26;i++){\\n            if(mp.find(c)!=mp.end() && mp.find(d)!=mp.end()){\\n              res+=c;\\n              break;\\n            }\\n            c--,d--;\\n        }\\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2168407,
                "title": "c-solution-sorting-map-brute-force-solution",
                "content": "Simple iterate and put in a map;\\nthen again iterate to check its other partner is present ir not?\\nif yes put in vector and last we sort the vector to obtain the largest letter.\\n```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) \\n    {\\n        unordered_map<char,int> mp;\\n        vector<string>v;\\n        for(auto e:s)\\n        {\\n            mp[e]++;\\n        }\\n        for(auto e:s)\\n        {\\n            if(mp.count(e-32)>0)\\n            {\\n                string str=\"\";\\n                str.push_back(e-32);\\n                v.push_back(str);\\n            }\\n        }\\n        sort(v.begin(),v.end());\\n        if(v.size()==0)\\n        {\\n            return \"\";\\n        }\\n        return v.back();\\n    }\\n};\\n```\\n!! Thanks to view Please give a upvote!!",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) \\n    {\\n        unordered_map<char,int> mp;\\n        vector<string>v;\\n        for(auto e:s)\\n        {\\n            mp[e]++;\\n        }\\n        for(auto e:s)\\n        {\\n            if(mp.count(e-32)>0)\\n            {\\n                string str=\"\";\\n                str.push_back(e-32);\\n                v.push_back(str);\\n            }\\n        }\\n        sort(v.begin(),v.end());\\n        if(v.size()==0)\\n        {\\n            return \"\";\\n        }\\n        return v.back();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168382,
                "title": "c-easily-understandable-solution-for-begineer",
                "content": "```\\npublic string GreatestLetter(string s) {\\n        string[] letters = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\\n        var lower = new int[26];\\n        var upper = new int[26];\\n        //Create frequency Array\\n        foreach(char ch in s)\\n        {\\n            if(char.IsLower(ch))\\n                lower[ch - \\'a\\']++;\\n            else\\n                upper[ch - \\'A\\']++;\\n        }\\n        \\n        string result = \"\";\\n        for(int i=25; i>=0; i--)\\n        {\\n\\t\\t//check if letter occurs in both lowercase and uppercase\\n            if(lower[i] > 0 && upper[i] > 0)\\n                return letters[i];\\n        }\\n        return result;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic string GreatestLetter(string s) {\\n        string[] letters = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\\n        var lower = new int[26];\\n        var upper = new int[26];\\n        //Create frequency Array\\n        foreach(char ch in s)\\n        {\\n            if(char.IsLower(ch))\\n                lower[ch - \\'a\\']++;\\n            else\\n                upper[ch - \\'A\\']++;\\n        }\\n        \\n        string result = \"\";\\n        for(int i=25; i>=0; i--)\\n        {\\n\\t\\t//check if letter occurs in both lowercase and uppercase\\n            if(lower[i] > 0 && upper[i] > 0)\\n                return letters[i];\\n        }\\n        return result;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2168378,
                "title": "rust-o-n-solution",
                "content": "```rust\\n\\n\\nimpl Solution {\\n    pub fn greatest_letter(s: String) -> String {\\n        let chars: Vec<char> = s.chars().collect();\\n\\n        let mut upper_count = vec![0; 26];\\n        let mut lower_count = vec![0; 26];\\n\\n        let mut res: Option<char> = None;\\n\\n        let a = \\'a\\' as u8 as usize;\\n        let z = \\'z\\' as u8 as usize;\\n        let A = \\'A\\' as u8 as usize;\\n        let Z = \\'Z\\' as u8 as usize;\\n\\n        for c in chars {\\n            let i = c as u8 as usize;\\n            if i >= a && i <= z {\\n                lower_count[i - a] += 1;\\n            }\\n            if i >= A && i <= Z {\\n                upper_count[i - A] += 1;\\n            }\\n        }\\n\\n        for i in 0..26 {\\n            if lower_count[i] > 0 && upper_count[i] > 0 {\\n                res = Some((i + A) as u8 as char);\\n            }\\n        }\\n\\n        match res {\\n            Some(res) => res.to_string(),\\n            None => \"\".to_string(),\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\n\\n\\nimpl Solution {\\n    pub fn greatest_letter(s: String) -> String {\\n        let chars: Vec<char> = s.chars().collect();\\n\\n        let mut upper_count = vec![0; 26];\\n        let mut lower_count = vec![0; 26];\\n\\n        let mut res: Option<char> = None;\\n\\n        let a = \\'a\\' as u8 as usize;\\n        let z = \\'z\\' as u8 as usize;\\n        let A = \\'A\\' as u8 as usize;\\n        let Z = \\'Z\\' as u8 as usize;\\n\\n        for c in chars {\\n            let i = c as u8 as usize;\\n            if i >= a && i <= z {\\n                lower_count[i - a] += 1;\\n            }\\n            if i >= A && i <= Z {\\n                upper_count[i - A] += 1;\\n            }\\n        }\\n\\n        for i in 0..26 {\\n            if lower_count[i] > 0 && upper_count[i] > 0 {\\n                res = Some((i + A) as u8 as char);\\n            }\\n        }\\n\\n        match res {\\n            Some(res) => res.to_string(),\\n            None => \"\".to_string(),\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2168333,
                "title": "easy-to-understand-o-n-java-faster-than-100-java-solutions",
                "content": "// simple logic\\n// try checking from z to a for both (capital and small letters)\\n```\\nclass Solution {\\n    public String greatestLetter(String sb) {\\n        \\n        char capital = \\'Z\\';\\n        char small = \\'z\\';\\n        \\n        while(capital >= \\'A\\')\\n        {\\n            if(sb.indexOf(small) != -1 && sb.indexOf(capital) != -1)\\n            {\\n                return \"\" + capital;\\n            }\\n            \\n            capital--;\\n            small--;\\n        }\\n       \\n        return \"\";\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String sb) {\\n        \\n        char capital = \\'Z\\';\\n        char small = \\'z\\';\\n        \\n        while(capital >= \\'A\\')\\n        {\\n            if(sb.indexOf(small) != -1 && sb.indexOf(capital) != -1)\\n            {\\n                return \"\" + capital;\\n            }\\n            \\n            capital--;\\n            small--;\\n        }\\n       \\n        return \"\";\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168208,
                "title": "python-intutive-solution",
                "content": "**Runtime:** 89 ms, faster than 20.00% of Python3 online submissions for Greatest English Letter in Upper and Lower Case.\\n**Memory Usage:** 13.9 MB, less than 80.00% of Python3 online submissions for Greatest English Letter in Upper and Lower Case.\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        s =sorted(s)\\n        temp=[]\\n        for i in range(len(s)):\\n            temp.append(ord(s[i]))\\n\\n        for i in range(len(s)-1, -1, -1):\\n            if temp[i] - 32 in temp:\\n                return chr(temp[i]-32)\\n\\n        return \"\"\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        s =sorted(s)\\n        temp=[]\\n        for i in range(len(s)):\\n            temp.append(ord(s[i]))\\n\\n        for i in range(len(s)-1, -1, -1):\\n            if temp[i] - 32 in temp:\\n                return chr(temp[i]-32)\\n\\n        return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2168120,
                "title": "easy-python-solution",
                "content": "```python\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        \\n        if not any(char.islower() for char in s):\\n            return \"\"\\n        if not any(char.isupper() for char in s):\\n            return \"\"\\n        \\n        res = \\'\\'\\n        for char in s:\\n            if char.lower() in s and char.upper() in s:\\n                if char.isupper():\\n                    res += char\\n                \\n        res = \"\".join(sorted(res))\\n        \\n        if not res:\\n            return \"\"\\n        else:\\n            return res[-1]",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        \\n        if not any(char.islower() for char in s):\\n            return \"\"\\n        if not any(char.isupper() for char in s):\\n            return \"\"\\n        \\n        res = \\'\\'\\n        for char in s:\\n            if char.lower() in s and char.upper() in s:\\n                if char.isupper():\\n                    res += char\\n                \\n        res = \"\".join(sorted(res))\\n        \\n        if not res:\\n            return \"\"\\n        else:\\n            return res[-1]",
                "codeTag": "Java"
            },
            {
                "id": 4096045,
                "title": "python-easy-solution-with-dictionary",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        d= {}\\n        for st in s:\\n            if st not in d:\\n                d[st]=0\\n            d[st] +=1\\n        res=[]\\n        for st in s:\\n            if chr(ord(st)-32) in d:\\n                res.append((chr(ord(st)-32)))\\n        if len(res) < 1:\\n            return \"\"\\n        else:\\n            res.sort()\\n            return res[len(res)-1]\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        d= {}\\n        for st in s:\\n            if st not in d:\\n                d[st]=0\\n            d[st] +=1\\n        res=[]\\n        for st in s:\\n            if chr(ord(st)-32) in d:\\n                res.append((chr(ord(st)-32)))\\n        if len(res) < 1:\\n            return \"\"\\n        else:\\n            res.sort()\\n            return res[len(res)-1]\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4085678,
                "title": "discuss",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        boolean[] seen = new boolean[128];\\n\\n        for (final char c : s.toCharArray())\\n        seen[c] = true;\\n\\n        for (int i = 25; i >= 0; --i)\\n        if (seen[\\'a\\' + i] && seen[\\'A\\' + i])\\n            return String.valueOf((char) (\\'A\\' + i));\\n\\n        return \"\";\\n        }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        boolean[] seen = new boolean[128];\\n\\n        for (final char c : s.toCharArray())\\n        seen[c] = true;\\n\\n        for (int i = 25; i >= 0; --i)\\n        if (seen[\\'a\\' + i] && seen[\\'A\\' + i])\\n            return String.valueOf((char) (\\'A\\' + i));\\n\\n        return \"\";\\n        }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4082878,
                "title": "0ms-c-bitmask",
                "content": "# Approach\\nCreate a bitmask for each letter with 1 representing lower case, 2 representing upper case.  The last character with a value of 3 is the answer.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n# Code\\n```\\nchar* greatestLetter(char *s)\\n{\\n    int map[26] = { 0 };\\n    char *a = malloc(sizeof(char) * 2);\\n\\n    while(*s)\\n    {\\n        if(*s > \\'Z\\') \\n        {\\n            map[*s - \\'a\\'] |= 1;\\n        }\\n        else\\n        {\\n            map[*s - \\'A\\'] |= 2;\\n        }\\n        s++;\\n    }\\n\\n    for(int i = 25; i >= 0; i--)\\n    {\\n        if(map[i] == 3)\\n        {\\n            a[0] = \\'A\\' + i;\\n            a[1] = NULL;\\n            return a;\\n        }\\n    }\\n\\n    a[0] = NULL;\\n    a[1] = NULL;\\n\\n    return a;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar* greatestLetter(char *s)\\n{\\n    int map[26] = { 0 };\\n    char *a = malloc(sizeof(char) * 2);\\n\\n    while(*s)\\n    {\\n        if(*s > \\'Z\\') \\n        {\\n            map[*s - \\'a\\'] |= 1;\\n        }\\n        else\\n        {\\n            map[*s - \\'A\\'] |= 2;\\n        }\\n        s++;\\n    }\\n\\n    for(int i = 25; i >= 0; i--)\\n    {\\n        if(map[i] == 3)\\n        {\\n            a[0] = \\'A\\' + i;\\n            a[1] = NULL;\\n            return a;\\n        }\\n    }\\n\\n    a[0] = NULL;\\n    a[1] = NULL;\\n\\n    return a;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4075960,
                "title": "python-solution-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1. Use a set to eliminate duplicates\\n2. Create an empty array \\n3. Loop through the string checking whether the character is in lowercase or upper case\\n4. Check whether the opposite of that letter in in the string (eg. if lowercase, check uppercase)\\n5. Append the capital of that letter to the result array\\n6. Find the greatest letter amongst the solutions\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def greatestLetter(self, s):\\n        s = set(s)\\n        result = []\\n        for letter in s:\\n            if letter == letter.lower():\\n                if letter.upper() in s:\\n                    result.append(letter.upper())\\n            else:\\n                if letter.lower() in s:\\n                    result.append(letter)\\n        if not result:\\n            return \"\"\\n            \\n        return max(result)\\n\\n\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def greatestLetter(self, s):\\n        s = set(s)\\n        result = []\\n        for letter in s:\\n            if letter == letter.lower():\\n                if letter.upper() in s:\\n                    result.append(letter.upper())\\n            else:\\n                if letter.lower() in s:\\n                    result.append(letter)\\n        if not result:\\n            return \"\"\\n            \\n        return max(result)\\n\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069022,
                "title": "beat-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n      int hashLower[26]={0};\\n      int hashUpper[26]={0};\\n      for(int i=0;i<s.length();i++)\\n      {\\n          if(s[i]>=\\'a\\' && s[i]<=\\'z\\')\\n          hashLower[s[i]-\\'a\\']++;\\n          else if(s[i]>=\\'A\\' && s[i]<=\\'Z\\')\\n          {\\n            hashUpper[s[i]-\\'A\\']++;\\n          }\\n      }  \\n      for(int i=25;i>=0;i--)\\n      {\\n         \\n          if(hashLower[i]>0 && hashUpper[i]>0)\\n          {\\n            char x=i+\\'A\\';\\n            cout<<i+\\'A\\';\\n            string temp;\\n            temp+=x;\\n            return temp;\\n          }\\n      }\\n     \\n      return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n      int hashLower[26]={0};\\n      int hashUpper[26]={0};\\n      for(int i=0;i<s.length();i++)\\n      {\\n          if(s[i]>=\\'a\\' && s[i]<=\\'z\\')\\n          hashLower[s[i]-\\'a\\']++;\\n          else if(s[i]>=\\'A\\' && s[i]<=\\'Z\\')\\n          {\\n            hashUpper[s[i]-\\'A\\']++;\\n          }\\n      }  \\n      for(int i=25;i>=0;i--)\\n      {\\n         \\n          if(hashLower[i]>0 && hashUpper[i]>0)\\n          {\\n            char x=i+\\'A\\';\\n            cout<<i+\\'A\\';\\n            string temp;\\n            temp+=x;\\n            return temp;\\n          }\\n      }\\n     \\n      return \"\";\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 4069019,
                "title": "beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n      int hashLower[26]={0};\\n      int hashUpper[26]={0};\\n      for(int i=0;i<s.length();i++)\\n      {\\n          if(s[i]>=\\'a\\' && s[i]<=\\'z\\')\\n          hashLower[s[i]-\\'a\\']++;\\n          else if(s[i]>=\\'A\\' && s[i]<=\\'Z\\')\\n          {\\n            hashUpper[s[i]-\\'A\\']++;\\n          }\\n      }  \\n      for(int i=25;i>=0;i--)\\n      {\\n         \\n          if(hashLower[i]>0 && hashUpper[i]>0)\\n          {\\n            char x=i+\\'A\\';\\n            cout<<i+\\'A\\';\\n            string temp;\\n            temp+=x;\\n            return temp;\\n          }\\n      }\\n     \\n      return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n      int hashLower[26]={0};\\n      int hashUpper[26]={0};\\n      for(int i=0;i<s.length();i++)\\n      {\\n          if(s[i]>=\\'a\\' && s[i]<=\\'z\\')\\n          hashLower[s[i]-\\'a\\']++;\\n          else if(s[i]>=\\'A\\' && s[i]<=\\'Z\\')\\n          {\\n            hashUpper[s[i]-\\'A\\']++;\\n          }\\n      }  \\n      for(int i=25;i>=0;i--)\\n      {\\n         \\n          if(hashLower[i]>0 && hashUpper[i]>0)\\n          {\\n            char x=i+\\'A\\';\\n            cout<<i+\\'A\\';\\n            string temp;\\n            temp+=x;\\n            return temp;\\n          }\\n      }\\n     \\n      return \"\";\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 4058844,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    #define LETTER_CNT 26\\npublic:\\n    string greatestLetter(string s) {\\n        uint8_t letters[LETTER_CNT] = {0};\\n        for (char c: s)\\n        {\\n            if (c >= \\'a\\')\\n            {\\n                letters[c-\\'a\\'] |= 0x1;\\n            }\\n            else\\n            {\\n                letters[c-\\'A\\'] |= 0x2;\\n            }\\n        }\\n        for (int i = LETTER_CNT - 1; i >= 0; i--)\\n        {\\n            if (letters[i] == 0x3)\\n            {\\n                char result[2] = {0};\\n                result[0] = \\'A\\' + i;\\n                return string(result);\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    #define LETTER_CNT 26\\npublic:\\n    string greatestLetter(string s) {\\n        uint8_t letters[LETTER_CNT] = {0};\\n        for (char c: s)\\n        {\\n            if (c >= \\'a\\')\\n            {\\n                letters[c-\\'a\\'] |= 0x1;\\n            }\\n            else\\n            {\\n                letters[c-\\'A\\'] |= 0x2;\\n            }\\n        }\\n        for (int i = LETTER_CNT - 1; i >= 0; i--)\\n        {\\n            if (letters[i] == 0x3)\\n            {\\n                char result[2] = {0};\\n                result[0] = \\'A\\' + i;\\n                return string(result);\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049471,
                "title": "90-runtime-77-memory-only-set-and-ascii-uppercase",
                "content": "![image.png](https://assets.leetcode.com/users/images/f06c3ba5-a372-4378-bad9-6fdd8dd7fe55_1694817163.468456.png)\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        chars, s = \"ZYXWVUTSRQPONMLKJIHGFEDCBA\", set(s)\\n\\n        for c in chars:\\n            if c in s and (c.lower() in s): return c\\n\\n        return \"\" \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        chars, s = \"ZYXWVUTSRQPONMLKJIHGFEDCBA\", set(s)\\n\\n        for c in chars:\\n            if c in s and (c.lower() in s): return c\\n\\n        return \"\" \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4047770,
                "title": "python-beginner-friendly-using-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        #given a string of english letters, s return the greatest english letter which occurs\\n        #as both a lowercase and uppercase letter in s. The returned letter should be in uppercase.\\n        #if no such letter exists, return an empty string. \\n        \\n        lower = set()\\n        upper = set()\\n\\n        for c in s:\\n            if c.islower():\\n                lower.add(c)\\n            else:\\n                upper.add(c.lower())\\n        \\n        if len(upper & lower) == 0:\\n            return \"\"\\n        else:\\n            return max(upper & lower).upper()\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        #given a string of english letters, s return the greatest english letter which occurs\\n        #as both a lowercase and uppercase letter in s. The returned letter should be in uppercase.\\n        #if no such letter exists, return an empty string. \\n        \\n        lower = set()\\n        upper = set()\\n\\n        for c in s:\\n            if c.islower():\\n                lower.add(c)\\n            else:\\n                upper.add(c.lower())\\n        \\n        if len(upper & lower) == 0:\\n            return \"\"\\n        else:\\n            return max(upper & lower).upper()\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4047508,
                "title": "hash-table-on-new-set-that-gives-95-76-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nHash Table on Set\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWith `set` we eliminate repeated letters of `s`.\\n\\nWith `for...of` loop we iterate `set`, transform the letters to upper case and add them into `set2`.\\n\\nWe also in advance check whether such a letter in upper case is already in `set2` and whether it is bigger (ASCII table) than the current letter in `res`. If it is, we update `res`.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nconst greatestLetter = function (s) {\\n  const set = new Set(s);\\n\\n  let res = \\'\\';\\n\\n  const set2 = new Set();\\n\\n  for (const letter of set) {\\n    const upperCaseLetter = letter.toUpperCase();\\n\\n    if (set2.has(upperCaseLetter) && upperCaseLetter > res) res = upperCaseLetter;\\n\\n    set2.add(upperCaseLetter);\\n  }\\n\\n  return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Hash Table"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nconst greatestLetter = function (s) {\\n  const set = new Set(s);\\n\\n  let res = \\'\\';\\n\\n  const set2 = new Set();\\n\\n  for (const letter of set) {\\n    const upperCaseLetter = letter.toUpperCase();\\n\\n    if (set2.has(upperCaseLetter) && upperCaseLetter > res) res = upperCaseLetter;\\n\\n    set2.add(upperCaseLetter);\\n  }\\n\\n  return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4046814,
                "title": "easy-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar greatestLetter = function(s) {\\n  let result=[];\\n    for(let i=65;i<=91;i++){\\n      const x=String.fromCharCode(i);\\n      const y=x.toLowerCase();\\n      if(s.includes(x) && s.includes(y))\\n        result.push(x);  \\n    }\\n    result=result.sort();\\n    return result[result.length-1]??\"\";\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar greatestLetter = function(s) {\\n  let result=[];\\n    for(let i=65;i<=91;i++){\\n      const x=String.fromCharCode(i);\\n      const y=x.toLowerCase();\\n      if(s.includes(x) && s.includes(y))\\n        result.push(x);  \\n    }\\n    result=result.sort();\\n    return result[result.length-1]??\"\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4040686,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-and-98-memory",
                "content": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        int[] arr = new int[123];\\n        for (char c : s.toCharArray()) {\\n            arr[c]++;\\n        }\\n        for (int i = arr.length - 1; i > 95; i--) {\\n            if (arr[i] > 0 && arr[i - 32] > 0) {\\n                return String.valueOf((char) (i - 32));\\n            }\\n        }\\n        return \"\";        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        int[] arr = new int[123];\\n        for (char c : s.toCharArray()) {\\n            arr[c]++;\\n        }\\n        for (int i = arr.length - 1; i > 95; i--) {\\n            if (arr[i] > 0 && arr[i - 32] > 0) {\\n                return String.valueOf((char) (i - 32));\\n            }\\n        }\\n        return \"\";        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4039821,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        l = []\\n        for i in s:\\n            if i.upper() in s and i.lower() in s:\\n                l.append(i.upper())\\n                s.replace(f\"{i.upper()}\",\"\")\\n                s.replace(f\"{i.lower()}\",\"\")\\n        if l:\\n            return max(l)\\n        return \"\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        l = []\\n        for i in s:\\n            if i.upper() in s and i.lower() in s:\\n                l.append(i.upper())\\n                s.replace(f\"{i.upper()}\",\"\")\\n                s.replace(f\"{i.lower()}\",\"\")\\n        if l:\\n            return max(l)\\n        return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4039173,
                "title": "beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        ArrayList<String> res=new ArrayList<>();\\n       for(int i=0;i<s.length();i++){\\n           if(Character.isLowerCase(s.charAt(i))){\\n            String temp=String.valueOf(Character.toUpperCase(s.charAt(i)));\\n               if(s.contains(temp)){\\n                      res.add(temp);\\n               }\\n           }\\n       }\\n       int max=0;\\n       Collections.sort(res);\\n     if(res.size()==0){\\n         return \"\";\\n     } \\n       return res.get(res.size()-1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        ArrayList<String> res=new ArrayList<>();\\n       for(int i=0;i<s.length();i++){\\n           if(Character.isLowerCase(s.charAt(i))){\\n            String temp=String.valueOf(Character.toUpperCase(s.charAt(i)));\\n               if(s.contains(temp)){\\n                      res.add(temp);\\n               }\\n           }\\n       }\\n       int max=0;\\n       Collections.sort(res);\\n     if(res.size()==0){\\n         return \"\";\\n     } \\n       return res.get(res.size()-1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031951,
                "title": "one-line-solution-using-list-comprehensions",
                "content": "# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        result = [ord(x) for x in s if ord(x)<91 and x.lower() in s]\\n        return chr(max(result)) if len(result) > 0 else \\'\\'\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        result = [ord(x) for x in s if ord(x)<91 and x.lower() in s]\\n        return chr(max(result)) if len(result) > 0 else \\'\\'\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023511,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        m = \"\"\\n\\n        for i in s:\\n            if ord(i) <= 90:\\n                if chr(ord(i)+32) in s:\\n                    print(chr(ord(i)+32))\\n                    if m < i:\\n                        m = i\\n            else:\\n                if chr(ord(i)-32) in s:\\n                    print(chr(ord(i)-32))\\n                    if m < i.upper():\\n                        m = i.upper()\\n        \\n        return m\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        m = \"\"\\n\\n        for i in s:\\n            if ord(i) <= 90:\\n                if chr(ord(i)+32) in s:\\n                    print(chr(ord(i)+32))\\n                    if m < i:\\n                        m = i\\n            else:\\n                if chr(ord(i)-32) in s:\\n                    print(chr(ord(i)-32))\\n                    if m < i.upper():\\n                        m = i.upper()\\n        \\n        return m\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4015022,
                "title": "easy-javascript-solution-with-line-by-line-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar greatestLetter = function (s) {\\n\\n    // initialize empty array result\\n    let result = [];\\n\\n    // loop through every character of string s \\n    for (let i = 0; i < s.length; i++) {\\n\\n        // find charCode of every character of string s using charCodeAt()\\n        let charCode = s[i].charCodeAt(0);\\n\\n        // if charCode is less than or equal to 90\\n        if (charCode <= 90) {\\n\\n            // find sameChar using slice(), includes() and converting charCode to String using String.fromCharCode()\\n            let sameChar = s.slice(i).includes(String.fromCharCode(charCode + 32));\\n\\n            // if sameChar is true then push that character in result\\n            if (sameChar) {\\n                result.push(s[i]);\\n            }\\n        } else { // else\\n\\n            // find sameChar using slice(), includes() and converting charCode to String using String.fromCharCode()\\n            let sameChar = s.slice(i).includes(String.fromCharCode(charCode - 32));\\n\\n            // if sameChar is true then push that Capital character using String.fromCharCode() in result\\n            if (sameChar) {\\n                result.push(String.fromCharCode(charCode - 32));\\n            }\\n        }\\n    }\\n\\n    // if length of result is equal to zero then return empty string otherwise sort the result and remove last element from array result using pop()\\n    return result.length === 0 ? \\'\\' : result.sort().pop();\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar greatestLetter = function (s) {\\n\\n    // initialize empty array result\\n    let result = [];\\n\\n    // loop through every character of string s \\n    for (let i = 0; i < s.length; i++) {\\n\\n        // find charCode of every character of string s using charCodeAt()\\n        let charCode = s[i].charCodeAt(0);\\n\\n        // if charCode is less than or equal to 90\\n        if (charCode <= 90) {\\n\\n            // find sameChar using slice(), includes() and converting charCode to String using String.fromCharCode()\\n            let sameChar = s.slice(i).includes(String.fromCharCode(charCode + 32));\\n\\n            // if sameChar is true then push that character in result\\n            if (sameChar) {\\n                result.push(s[i]);\\n            }\\n        } else { // else\\n\\n            // find sameChar using slice(), includes() and converting charCode to String using String.fromCharCode()\\n            let sameChar = s.slice(i).includes(String.fromCharCode(charCode - 32));\\n\\n            // if sameChar is true then push that Capital character using String.fromCharCode() in result\\n            if (sameChar) {\\n                result.push(String.fromCharCode(charCode - 32));\\n            }\\n        }\\n    }\\n\\n    // if length of result is equal to zero then return empty string otherwise sort the result and remove last element from array result using pop()\\n    return result.length === 0 ? \\'\\' : result.sort().pop();\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4014006,
                "title": "python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        greatest_letter = \"\"\\n        for ch in s:\\n            if ch.isupper() and ch.lower() in s:\\n                greatest_letter = max(greatest_letter, ch)\\n            elif ch.islower() and ch.upper() in s:\\n                greatest_letter = max(greatest_letter, ch.upper())\\n        \\n        return greatest_letter\\n        \\n        \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        greatest_letter = \"\"\\n        for ch in s:\\n            if ch.isupper() and ch.lower() in s:\\n                greatest_letter = max(greatest_letter, ch)\\n            elif ch.islower() and ch.upper() in s:\\n                greatest_letter = max(greatest_letter, ch.upper())\\n        \\n        return greatest_letter\\n        \\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012489,
                "title": "easy",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere we are appending the difference between the ascii value of each capital letter appearing in the string \\'s\\' and the ascii value of \\'A\\' into the list \\'l\\'.\\nSimilarly append the difference between the ascii value of each small letter and 97(ascii value of \\'a\\') into the list \\'a\\'.\\nNow we convert these two lists into set and take their intersection using \\'&\\' and store it into list \\'re\\'.\\nIf the length of the list \\'re\\' is 0, then return an empty string.\\nElse we will store the max(re) into \\'m\\'.\\nNow we will traverse through the string \\'s\\' and check if ord(j)==m+65, if true then return the value of j. \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        l,a=[],[]\\n        for i in s:\\n            if ord(i)<91:\\n                l.append(ord(i)-65)\\n            else:\\n                a.append(ord(i)-97)\\n        re=list(set(l)&set(a))\\n        if len(re)==0:\\n            return \"\"\\n        m=max(re)\\n        for j in s:\\n            if ord(j)==(m+65):\\n                return j\\n                \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        l,a=[],[]\\n        for i in s:\\n            if ord(i)<91:\\n                l.append(ord(i)-65)\\n            else:\\n                a.append(ord(i)-97)\\n        re=list(set(l)&set(a))\\n        if len(re)==0:\\n            return \"\"\\n        m=max(re)\\n        for j in s:\\n            if ord(j)==(m+65):\\n                return j\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010124,
                "title": "perfect-solution-for-beginners-click-and-rate-if-you-want-to-gain-iq-points",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        dict={}\\n\\n        #put all characters in a dictionary \\n        for i in s:\\n            if i not in dict:\\n                dict[i]=1\\n            else:\\n                dict[i]+=1\\n\\n        #now we can look at the dictionary\\n        max=\\'\\'  #initialize max as an empty string\\n\\n        for i in dict.keys():\\n            if i.upper() in dict.keys() and i.lower() in dict.keys():\\n                if i>max:\\n                    max=i\\n        return (max.upper())\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        dict={}\\n\\n        #put all characters in a dictionary \\n        for i in s:\\n            if i not in dict:\\n                dict[i]=1\\n            else:\\n                dict[i]+=1\\n\\n        #now we can look at the dictionary\\n        max=\\'\\'  #initialize max as an empty string\\n\\n        for i in dict.keys():\\n            if i.upper() in dict.keys() and i.lower() in dict.keys():\\n                if i>max:\\n                    max=i\\n        return (max.upper())\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4008556,
                "title": "greatest-english-letter-in-upper-and-lowercase-in-java",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        for(char i=\\'Z\\';i>=\\'A\\';i--)\\n        {\\n            if(s.contains(Character.toString(i)) && s.contains(Character.toString(Character.toLowerCase(i))))\\n            return Character.toString(i);\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        for(char i=\\'Z\\';i>=\\'A\\';i--)\\n        {\\n            if(s.contains(Character.toString(i)) && s.contains(Character.toString(Character.toLowerCase(i))))\\n            return Character.toString(i);\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4008369,
                "title": "greatest-english-letter-in-upper-and-lowercase-in-java",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        for(char i=\\'Z\\';i>=\\'A\\';i--)\\n        {\\n            if(s.contains(Character.toString(i)) && s.contains(Character.toString(Character.toLowerCase(i))))\\n            return Character.toString(i);\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        for(char i=\\'Z\\';i>=\\'A\\';i--)\\n        {\\n            if(s.contains(Character.toString(i)) && s.contains(Character.toString(Character.toLowerCase(i))))\\n            return Character.toString(i);\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3994672,
                "title": "beats-99-86-of-users-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        temp=s.lower()\\n        a=[]\\n        for i in set(temp):\\n            if i.lower() in s and i.upper() in s:\\n                a.append(i.upper())\\n        a.sort(reverse=True)\\n        if a==[]:\\n            return \"\"\\n        else:\\n            return a[0]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        temp=s.lower()\\n        a=[]\\n        for i in set(temp):\\n            if i.lower() in s and i.upper() in s:\\n                a.append(i.upper())\\n        a.sort(reverse=True)\\n        if a==[]:\\n            return \"\"\\n        else:\\n            return a[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3989248,
                "title": "solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        a=[]\\n        b=[]\\n        d=\\'\\'\\n        for i in s :\\n            if i.islower() :\\n                a.append(i)\\n            elif i.isupper() :\\n                b.append(i.lower())\\n        # print(a)\\n        # print(b)\\n        c=\\'abcdefghijklmnopqrstuvwxyz\\'\\n        for i in range(0,len(a)) :\\n            for j in range(0,len(a)-1) :\\n                if c.index(a[j])>c.index(a[j+1]) :\\n                    a[j],a[j+1]=a[j+1],a[j]\\n        for i in range(0,len(b)) :\\n            for j in range(0,len(b)-1) :\\n                if c.index(b[j])>c.index(b[j+1]) :\\n                    b[j],b[j+1]=b[j+1],b[j]\\n        # a.reverse()\\n        # b.reverse()\\n        if len(a) < len(b) :\\n            for i in a :\\n                if i in b :\\n                    d=i\\n        else :\\n            for i in b :\\n                if i in a :\\n                    d=i\\n        return d.upper()\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        a=[]\\n        b=[]\\n        d=\\'\\'\\n        for i in s :\\n            if i.islower() :\\n                a.append(i)\\n            elif i.isupper() :\\n                b.append(i.lower())\\n        # print(a)\\n        # print(b)\\n        c=\\'abcdefghijklmnopqrstuvwxyz\\'\\n        for i in range(0,len(a)) :\\n            for j in range(0,len(a)-1) :\\n                if c.index(a[j])>c.index(a[j+1]) :\\n                    a[j],a[j+1]=a[j+1],a[j]\\n        for i in range(0,len(b)) :\\n            for j in range(0,len(b)-1) :\\n                if c.index(b[j])>c.index(b[j+1]) :\\n                    b[j],b[j+1]=b[j+1],b[j]\\n        # a.reverse()\\n        # b.reverse()\\n        if len(a) < len(b) :\\n            for i in a :\\n                if i in b :\\n                    d=i\\n        else :\\n            for i in b :\\n                if i in a :\\n                    d=i\\n        return d.upper()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981564,
                "title": "beats-easy-beginner-friendly-solution-simple-and-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        HashSet<Character>h=new HashSet();\\n        for(int i=0;i<s.length();i++){\\n            h.add(s.charAt(i));\\n        }\\n        Character c=0;\\n        for(int i=0;i<s.length();i++){\\n            if(s.charAt(i)>=\\'A\\' && s.charAt(i)<=\\'Z\\'){\\n                if(h.contains((char)(s.charAt(i)+32))){\\n                    if(c<s.charAt(i))\\n                        c=s.charAt(i);\\n                }\\n            }\\n        }\\n        if(c==0){\\n            return \"\";\\n        }\\n        return c+\"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        HashSet<Character>h=new HashSet();\\n        for(int i=0;i<s.length();i++){\\n            h.add(s.charAt(i));\\n        }\\n        Character c=0;\\n        for(int i=0;i<s.length();i++){\\n            if(s.charAt(i)>=\\'A\\' && s.charAt(i)<=\\'Z\\'){\\n                if(h.contains((char)(s.charAt(i)+32))){\\n                    if(c<s.charAt(i))\\n                        c=s.charAt(i);\\n                }\\n            }\\n        }\\n        if(c==0){\\n            return \"\";\\n        }\\n        return c+\"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3979652,
                "title": "javascript-o-n-time-o-1-space-beats-98",
                "content": "# Intuition and Approach\\nWe can use Arrays and rely on charCodeAt.\\n\\n# Approach\\nWe can create two Arrays that keep track of the 26 letters in lowercase and uppercase. Using i regular index that we will later convert using \"A\" charCode offset (65) to the corresponding letter.\\n\\n# Complexity\\n- Time complexity: O(n) where n is every letter in string\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1) we use two Arrays but they always have constant space.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar greatestLetter = function (s) {\\n  const lowerCaseMap = new Array(26).fill(false);\\n  const upperCaseMap = new Array(26).fill(false);\\n\\n  // O(n) where n is characters in string\\n  // flag the ones that exists\\n  for (let i = 0; i < s.length; i++) {\\n    const letter = s[i].charCodeAt(0);\\n    upperCaseMap[letter - 65] = true;\\n    lowerCaseMap[letter - 97] = true;\\n  }\\n\\n  let bigger = -Infinity;\\n  // loop backwards and break on match\\n  // O(1)\\n  for (let i = 25; i >= 0; i--) {\\n    const upperCaseLetter = upperCaseMap[i];\\n    const lowerCaseLetter = lowerCaseMap[i];\\n\\n    // if there is an uppercase and there is a lowercase\\n    if (upperCaseLetter !== false && upperCaseLetter === lowerCaseLetter) {\\n      // store the bigger index\\n      bigger = Math.max(i, bigger);\\n      // we found it, so break the loop, it has no point continuing to iterate\\n      break;\\n    }\\n  }\\n  // convert index to letter, taking into account\\n  // the uppercase offset.  For A is 65.\\n  return bigger !== -Infinity ? String.fromCharCode(bigger + 65) : \"\";\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Hash Table"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar greatestLetter = function (s) {\\n  const lowerCaseMap = new Array(26).fill(false);\\n  const upperCaseMap = new Array(26).fill(false);\\n\\n  // O(n) where n is characters in string\\n  // flag the ones that exists\\n  for (let i = 0; i < s.length; i++) {\\n    const letter = s[i].charCodeAt(0);\\n    upperCaseMap[letter - 65] = true;\\n    lowerCaseMap[letter - 97] = true;\\n  }\\n\\n  let bigger = -Infinity;\\n  // loop backwards and break on match\\n  // O(1)\\n  for (let i = 25; i >= 0; i--) {\\n    const upperCaseLetter = upperCaseMap[i];\\n    const lowerCaseLetter = lowerCaseMap[i];\\n\\n    // if there is an uppercase and there is a lowercase\\n    if (upperCaseLetter !== false && upperCaseLetter === lowerCaseLetter) {\\n      // store the bigger index\\n      bigger = Math.max(i, bigger);\\n      // we found it, so break the loop, it has no point continuing to iterate\\n      break;\\n    }\\n  }\\n  // convert index to letter, taking into account\\n  // the uppercase offset.  For A is 65.\\n  return bigger !== -Infinity ? String.fromCharCode(bigger + 65) : \"\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3970920,
                "title": "o-n-o-1-solution-in-java-by-using-boolean-array",
                "content": "# Intuition\\nNormal iteration\\n# Approach\\ntake two boolean arrays assume one is lower case and one is upper case and iterate the string and check the both true when next iteration then return char otherwise empty\\n# Complexity\\n- Time complexity:\\nO(N)\\n- Space complexity:\\n(O)1\\n# Code\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        boolean l[]=new boolean[26],u[]=new boolean[26];\\n        for(char ch:s.toCharArray())\\n           if(ch>=\\'a\\') l[ch-\\'a\\']=true;\\n           else u[ch-\\'A\\']=true;\\n    \\n    for(int i=25;i>=0;i--)\\n       if(l[i]&&u[i]) return (char)(i+\\'A\\')+\"\";\\n       return \"\";\\n}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n        boolean l[]=new boolean[26],u[]=new boolean[26];\\n        for(char ch:s.toCharArray())\\n           if(ch>=\\'a\\') l[ch-\\'a\\']=true;\\n           else u[ch-\\'A\\']=true;\\n    \\n    for(int i=25;i>=0;i--)\\n       if(l[i]&&u[i]) return (char)(i+\\'A\\')+\"\";\\n       return \"\";\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3969529,
                "title": "easy-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar greatestLetter = function(s) {\\n    let greatest = \\'\\'\\n    for (let i = 0; i < s.length; i++) {\\n        if (s[i] === s[i].toUpperCase() && s.includes(s[i].toLowerCase()))\\n            greatest = s[i] > greatest ? s[i] : greatest\\n    }\\n    return greatest\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar greatestLetter = function(s) {\\n    let greatest = \\'\\'\\n    for (let i = 0; i < s.length; i++) {\\n        if (s[i] === s[i].toUpperCase() && s.includes(s[i].toLowerCase()))\\n            greatest = s[i] > greatest ? s[i] : greatest\\n    }\\n    return greatest\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3968050,
                "title": "ruby-67ms",
                "content": "```\\ndef greatest_letter(s)\\n  a = s.chars.tally.keys\\n  b = []\\n  a.each{|c| b << c if a.include?(c.downcase) && a.include?(c.upcase) && c == c.upcase}\\n  b.max.to_s\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\ndef greatest_letter(s)\\n  a = s.chars.tally.keys\\n  b = []\\n  a.each{|c| b << c if a.include?(c.downcase) && a.include?(c.upcase) && c == c.upcase}\\n  b.max.to_s\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3963190,
                "title": "java-easy-approach-using-ascii-values-for-beginners",
                "content": "# PLEASE UPVOTE\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n      for(int i=\\'z\\';i>=\\'a\\';i--){\\n          String lower= Character.toString(i);\\n          if(s.contains(lower)){\\n              String upper=Character.toString(i-32);\\n              if(s.contains(upper)){\\n                  return upper;\\n              }\\n          }\\n      } \\n      return \"\"; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String",
                    "Enumeration"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n      for(int i=\\'z\\';i>=\\'a\\';i--){\\n          String lower= Character.toString(i);\\n          if(s.contains(lower)){\\n              String upper=Character.toString(i-32);\\n              if(s.contains(upper)){\\n                  return upper;\\n              }\\n          }\\n      } \\n      return \"\"; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3963189,
                "title": "java-easy-approach-using-ascii-values-for-beginners",
                "content": "# PLEASE UPVOTE\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n      for(int i=\\'z\\';i>=\\'a\\';i--){\\n          String lower= Character.toString(i);\\n          if(s.contains(lower)){\\n              String upper=Character.toString(i-32);\\n              if(s.contains(upper)){\\n                  return upper;\\n              }\\n          }\\n      } \\n      return \"\"; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String",
                    "Enumeration"
                ],
                "code": "```\\nclass Solution {\\n    public String greatestLetter(String s) {\\n      for(int i=\\'z\\';i>=\\'a\\';i--){\\n          String lower= Character.toString(i);\\n          if(s.contains(lower)){\\n              String upper=Character.toString(i-32);\\n              if(s.contains(upper)){\\n                  return upper;\\n              }\\n          }\\n      } \\n      return \"\"; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954081,
                "title": "easy-solution-in-c",
                "content": "# Intuition\\n\\n\\n# Approach\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        string ans=\"\";\\n      /*  sort(s.begin(),s.end());\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]>=\\'A\\' && s[i]<=\\'Z\\'){\\n                if(s.find(char(s[i]+32))!= std::string::npos)\\n                ans=(s[i]);\\n            }\\n        }*/\\n\\n        map<char,char>m;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]>=\\'A\\' && s[i]<=\\'Z\\'){\\n                if(s.find(char(s[i]+32))!= std::string::npos)\\n                m[s[i]]=(char(s[i]+32));\\n            }\\n        }\\n        if (!m.empty()) {\\n        map<char, char>::iterator lastElement = m.end();\\n        lastElement--; \\n        ans=(lastElement->first);\\n        return ans;\\n    }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n        string ans=\"\";\\n      /*  sort(s.begin(),s.end());\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]>=\\'A\\' && s[i]<=\\'Z\\'){\\n                if(s.find(char(s[i]+32))!= std::string::npos)\\n                ans=(s[i]);\\n            }\\n        }*/\\n\\n        map<char,char>m;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]>=\\'A\\' && s[i]<=\\'Z\\'){\\n                if(s.find(char(s[i]+32))!= std::string::npos)\\n                m[s[i]]=(char(s[i]+32));\\n            }\\n        }\\n        if (!m.empty()) {\\n        map<char, char>::iterator lastElement = m.end();\\n        lastElement--; \\n        ans=(lastElement->first);\\n        return ans;\\n    }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3950715,
                "title": "javascript-typescript-o-n-complexity",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n\\n# Code\\n```\\nfunction greatestLetter(s: string): string {\\n\\n\\nconst obj={};\\nlet max=\"\";\\n    for(let i=0;i<s.length;i++){\\n       const key= s[i].toUpperCase();\\n       const index= obj[key]\\n       if(index>=0 ){\\n          if(s[index]!=s[i]){\\n              if(max){\\n                  if(max<key){\\n                    max= key\\n                  }\\n\\n              }else{\\n                  max=key\\n              }\\n          }\\n       }else{\\n           obj[key]=i;\\n       }\\n    }\\n\\nreturn max\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction greatestLetter(s: string): string {\\n\\n\\nconst obj={};\\nlet max=\"\";\\n    for(let i=0;i<s.length;i++){\\n       const key= s[i].toUpperCase();\\n       const index= obj[key]\\n       if(index>=0 ){\\n          if(s[index]!=s[i]){\\n              if(max){\\n                  if(max<key){\\n                    max= key\\n                  }\\n\\n              }else{\\n                  max=key\\n              }\\n          }\\n       }else{\\n           obj[key]=i;\\n       }\\n    }\\n\\nreturn max\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3950154,
                "title": "ord-python-beginners",
                "content": "# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        res=[]\\n        for c in s:\\n            if chr(ord(c)+32) in s:\\n                res.append(c)\\n        res.sort(reverse=True)\\n        return res[0] if res else \"\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        res=[]\\n        for c in s:\\n            if chr(ord(c)+32) in s:\\n                res.append(c)\\n        res.sort(reverse=True)\\n        return res[0] if res else \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3944154,
                "title": "easy-set-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n         set<char>st(s.begin(),s.end());\\n        char ch=\\'*\\';\\n           for(auto it:st)\\n            {\\n           \\n                 if(isupper(it))\\n                  {\\n                        //  cout<<it<<\" \";\\n                        char c=tolower(it);\\n                      if(st.find(c)!=st.end())\\n                             ch=it;       \\n                \\n                  }\\n            }\\n            if(ch==\\'*\\')\\n            return \"\"; \\n         string res=\"\";\\n         res=res+ch;\\n         \\n         return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string greatestLetter(string s) {\\n         set<char>st(s.begin(),s.end());\\n        char ch=\\'*\\';\\n           for(auto it:st)\\n            {\\n           \\n                 if(isupper(it))\\n                  {\\n                        //  cout<<it<<\" \";\\n                        char c=tolower(it);\\n                      if(st.find(c)!=st.end())\\n                             ch=it;       \\n                \\n                  }\\n            }\\n            if(ch==\\'*\\')\\n            return \"\"; \\n         string res=\"\";\\n         res=res+ch;\\n         \\n         return res;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3942829,
                "title": "python-easy-for-beginners-2-approaches-with-and-without-set-s",
                "content": "# 1st Approach\\nFast approach using set(s). Frozenset() is always faster, so if you will not change your set is better to use it.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(k) where k is number of unique characters in d\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        d = set()\\n        s = frozenset(s)\\n        greater = \\'\\'\\n        for char in s:\\n            char = char.upper()\\n            if char in d:\\n                if greater < char: greater = char\\n            else:\\n                d.add(char)\\n        return greater\\n                \\n                \\n```\\n\\n# 2nd Approach\\nImplementing the built-in ord() function to check the ASCII number of a letter: ord(\\'a\\') - 32 equals \\'A\\', and ord(\\'A\\') + 32 equals \\'a\\'. As we have no characters outside the English alphabet, we can safely check both options without considering the letter case. \\n\\nThis approach seems to be slighly slower that the first one.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(k) where k is number of unique characters in d\\n\\n# Code\\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        d = set()\\n        greater = \\'\\'\\n        for char in s:\\n            check = ord(char)\\n            if check-32 in d or check+32 in d:\\n                if greater < char.upper(): greater = char.upper()\\n            else:\\n                d.add(check)\\n        return greater\\n                \\n                \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        d = set()\\n        s = frozenset(s)\\n        greater = \\'\\'\\n        for char in s:\\n            char = char.upper()\\n            if char in d:\\n                if greater < char: greater = char\\n            else:\\n                d.add(char)\\n        return greater\\n                \\n                \\n```\n```\\nclass Solution:\\n    def greatestLetter(self, s: str) -> str:\\n        d = set()\\n        greater = \\'\\'\\n        for char in s:\\n            check = ord(char)\\n            if check-32 in d or check+32 in d:\\n                if greater < char.upper(): greater = char.upper()\\n            else:\\n                d.add(check)\\n        return greater\\n                \\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3935049,
                "title": "python-solution-with-loop-and-if-statements",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nPython Solution with loop and If statements\\n# Complexity\\n- Time complexity: 37ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 13.38MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def greatestLetter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: str\\n        \"\"\"\\n        check = []\\n        temp = []\\n\\n        v = sorted(list(s))\\n\\n        for i in v:\\n            if i.isupper():\\n                check.append(i)\\n\\n        for j in check:\\n            if j.lower() in s:\\n                temp.append(j)\\n\\n        if len(temp) == 0:\\n            return \"\"\\n        return temp[-1]\\n\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def greatestLetter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: str\\n        \"\"\"\\n        check = []\\n        temp = []\\n\\n        v = sorted(list(s))\\n\\n        for i in v:\\n            if i.isupper():\\n                check.append(i)\\n\\n        for j in check:\\n            if j.lower() in s:\\n                temp.append(j)\\n\\n        if len(temp) == 0:\\n            return \"\"\\n        return temp[-1]\\n\\n        \\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1902102,
                "content": [
                    {
                        "username": "user9322vx",
                        "content": "In the testcase 24/113\\nWe have two letter n and z my code is returning n and expected output is z can you elabrote this??? "
                    },
                    {
                        "username": "shuhfan",
                        "content": "because z is greater than n,,we want to return the greatest English letter"
                    },
                    {
                        "username": "tominfless",
                        "content": "32 / 113 testcases passed\\nwhy is expected value \"\"?"
                    },
                    {
                        "username": "kbbhatt61",
                        "content": "Expected value is \"\" in case when no letter in the string is present in both uppercase and lowercase. "
                    }
                ]
            },
            {
                "id": 1754302,
                "content": [
                    {
                        "username": "user9322vx",
                        "content": "In the testcase 24/113\\nWe have two letter n and z my code is returning n and expected output is z can you elabrote this??? "
                    },
                    {
                        "username": "shuhfan",
                        "content": "because z is greater than n,,we want to return the greatest English letter"
                    },
                    {
                        "username": "tominfless",
                        "content": "32 / 113 testcases passed\\nwhy is expected value \"\"?"
                    },
                    {
                        "username": "kbbhatt61",
                        "content": "Expected value is \"\" in case when no letter in the string is present in both uppercase and lowercase. "
                    }
                ]
            }
        ]
    }
]