[
    {
        "title": "Sort Even and Odd Indices Independently",
        "question_content": "You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:\n\n\tSort the values at odd indices of nums in non-increasing order.\n\t\n\t\tFor example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.\n\t\n\t\n\tSort the values at even indices of nums in non-decreasing order.\n\t\n\t\tFor example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.\n\t\n\t\n\nReturn the array formed after rearranging the values of nums.\n&nbsp;\nExample 1:\n\nInput: nums = [4,1,2,3]\nOutput: [2,3,4,1]\nExplanation: \nFirst, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from [4,1,2,3] to [4,3,2,1].\nNext, we sort the values present at even indices (0 and 2) in non-decreasing order.\nSo, nums changes from [4,1,2,3] to [2,3,4,1].\nThus, the array formed after rearranging the values is [2,3,4,1].\n\nExample 2:\n\nInput: nums = [2,1]\nOutput: [2,1]\nExplanation: \nSince there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is [2,1], which is the same as the initial array. \n\n&nbsp;\nConstraints:\n\n\t1 <= nums.length <= 100\n\t1 <= nums[i] <= 100",
        "solutions": [
            {
                "id": 1748551,
                "title": "python-two-lines",
                "content": "**Python**\\n```py\\n    def sortEvenOdd(self, A):\\n        A[::2], A[1::2] = sorted(A[::2]), sorted(A[1::2])[::-1]\\n        return A\\n```\\n",
                "solutionTags": [],
                "code": "```py\\n    def sortEvenOdd(self, A):\\n        A[::2], A[1::2] = sorted(A[::2]), sorted(A[1::2])[::-1]\\n        return A\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1751131,
                "title": "multiple-approaches-c-fast-solution",
                "content": "There are multiple approaches to solve this question. The question is pretty simple , so I won\\'t explain what to do , I will just discuss the multiple variations. \\n\\n#### TC : O(N^2) APPROACH , SC : O(1)\\nIn this approach we have to sort the elements on odd positions and even positions separately . We can do this by simply applying any sorting algorithm ( selection / bubble ) preferably , on  the elements of the mentioned positions (in-place) . We won\\'t need any extra space . \\n\\nHere is the code : \\n\\n```\\nint minIndex;\\n// Here in this nested loop , we are sorting the elements at even indices in non-decreasing order.\\n        for(int i=0;i<nums.size();i+=2)\\n        {\\n            minIndex=i;\\n            for(int j=i+2;j<nums.size();j+=2)\\n            {\\n                if(nums[j]<nums[minIndex])\\n                    minIndex=j;\\n            }\\n            swap(nums[i],nums[minIndex]);\\n        }\\n// Here , we are trying to sort the elements at odd indices in non-increasing order. \\n        for(int i=1;i<nums.size();i+=2)\\n        {\\n            minIndex=i;\\n            for(int j=i+2;j<nums.size();j+=2)\\n            {\\n                if(nums[j]>nums[minIndex])\\n                    minIndex=j;\\n            }\\n            swap(nums[i],nums[minIndex]);\\n        }\\n        \\n        return nums;\\n```\\nAs you can see we don\\'t need any extra space for this solution. \\n\\n#### TC : O(NlogN) , SC : O(N)  APPROACH\\n\\nAs we know that we have to **sort even indices and odd indices separately** , then why not simply **separate out the elements** , then **sort them separately** using the inbuilt sort function and then **place the elements of the odd indices vector at the odd indices and even indices vector at the even indices** ??\\n\\n\\nHere is the code : \\n\\n``` \\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> odd, even;\\n        for(int i = 0; i < nums.size(); i++) {\\n            if(i & 1) {\\n                odd.push_back(nums[i]);\\n            } else {\\n                even.push_back(nums[i]);\\n            }\\n        }\\n        sort(odd.begin(), odd.end(), greater<int>());\\n        sort(even.begin(), even.end());\\n        for(int i = 0; i < nums.size(); i++) {\\n            if(i & 1) {\\n                nums[i] = odd[0];\\n                odd.erase(odd.begin());\\n            } else {\\n                nums[i] = even[0];\\n                even.erase(even.begin());\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```\\n\\nA simple variation of the above approach : \\nInstead of using 2 separate vectors (one for odd indices and the other for even indices ) , we can simply use 1 vector. Use it to store even/odd indices , sort it , place them in their respective locations in the resultant vector . Clear the vector , then store the other indices and do the same as mentioned above.   \\n\\nIF YOU ARE READING THIS , THEN YOU PROBABLY READ THE COMPLETE POST AND FOUND IT HELPFUL . AND IF THAT\\'S THE CASE , THEN DO UPVOTE .",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nint minIndex;\\n// Here in this nested loop , we are sorting the elements at even indices in non-decreasing order.\\n        for(int i=0;i<nums.size();i+=2)\\n        {\\n            minIndex=i;\\n            for(int j=i+2;j<nums.size();j+=2)\\n            {\\n                if(nums[j]<nums[minIndex])\\n                    minIndex=j;\\n            }\\n            swap(nums[i],nums[minIndex]);\\n        }\\n// Here , we are trying to sort the elements at odd indices in non-increasing order. \\n        for(int i=1;i<nums.size();i+=2)\\n        {\\n            minIndex=i;\\n            for(int j=i+2;j<nums.size();j+=2)\\n            {\\n                if(nums[j]>nums[minIndex])\\n                    minIndex=j;\\n            }\\n            swap(nums[i],nums[minIndex]);\\n        }\\n        \\n        return nums;\\n```\n``` \\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> odd, even;\\n        for(int i = 0; i < nums.size(); i++) {\\n            if(i & 1) {\\n                odd.push_back(nums[i]);\\n            } else {\\n                even.push_back(nums[i]);\\n            }\\n        }\\n        sort(odd.begin(), odd.end(), greater<int>());\\n        sort(even.begin(), even.end());\\n        for(int i = 0; i < nums.size(); i++) {\\n            if(i & 1) {\\n                nums[i] = odd[0];\\n                odd.erase(odd.begin());\\n            } else {\\n                nums[i] = even[0];\\n                even.erase(even.begin());\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748447,
                "title": "heap-o-n-log-n-and-counting-sort-o-n-in-java",
                "content": "Counting Sort\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int[] even = new int[101];\\n        int[] odd = new int[101];\\n        int length = nums.length;\\n        for (int i = 0; i < length; ++i) {\\n            if (i % 2 == 0) {\\n                even[nums[i]]++;\\n            } else {\\n                odd[nums[i]]++;\\n            }\\n        }\\n        int e = 0;\\n        int o = 100;\\n        for (int i = 0; i < length; ++i) {\\n            if (i % 2 == 0) {\\n                // check even\\n                while (even[e] == 0) {\\n                    ++e;\\n                }\\n                nums[i] = e;\\n                even[e]--;\\n            } else {\\n                while(odd[o] == 0) {\\n                    --o;\\n                }\\n                nums[i] = o;\\n                odd[o]--;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```\\n\\nHeap\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        PriorityQueue<Integer> even = new PriorityQueue<>((a, b)->(a - b));\\n        PriorityQueue<Integer> odd = new PriorityQueue<>((a, b)->(b - a));\\n        int length = nums.length;\\n        for (int i = 0; i < length; ++i) {\\n            if (i % 2 == 0) {\\n                even.add(nums[i]);\\n            } else {\\n                odd.add(nums[i]);\\n            }\\n        }\\n        \\n        for (int i = 0; i < length; ++i) {\\n            if (i % 2 == 0) {\\n                nums[i] = even.poll();\\n            } else {\\n                nums[i] = odd.poll();\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)",
                    "Counting Sort"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int[] even = new int[101];\\n        int[] odd = new int[101];\\n        int length = nums.length;\\n        for (int i = 0; i < length; ++i) {\\n            if (i % 2 == 0) {\\n                even[nums[i]]++;\\n            } else {\\n                odd[nums[i]]++;\\n            }\\n        }\\n        int e = 0;\\n        int o = 100;\\n        for (int i = 0; i < length; ++i) {\\n            if (i % 2 == 0) {\\n                // check even\\n                while (even[e] == 0) {\\n                    ++e;\\n                }\\n                nums[i] = e;\\n                even[e]--;\\n            } else {\\n                while(odd[o] == 0) {\\n                    --o;\\n                }\\n                nums[i] = o;\\n                odd[o]--;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        PriorityQueue<Integer> even = new PriorityQueue<>((a, b)->(a - b));\\n        PriorityQueue<Integer> odd = new PriorityQueue<>((a, b)->(b - a));\\n        int length = nums.length;\\n        for (int i = 0; i < length; ++i) {\\n            if (i % 2 == 0) {\\n                even.add(nums[i]);\\n            } else {\\n                odd.add(nums[i]);\\n            }\\n        }\\n        \\n        for (int i = 0; i < length; ++i) {\\n            if (i % 2 == 0) {\\n                nums[i] = even.poll();\\n            } else {\\n                nums[i] = odd.poll();\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748618,
                "title": "easy-java-solution-using-arraylists",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        if(nums.length<3)\\n        return nums;\\n        List<Integer> odd=new ArrayList<>();\\n        List<Integer> even=new ArrayList<>();\\n        int ans[]=new int[nums.length];\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if (i%2 == 0) \\n                even.add(nums[i]);\\n                else \\n                odd.add(nums[i]);\\n            }\\n        \\n        Collections.sort(even);\\n        Collections.sort(odd);\\n        Collections.reverse(odd);\\n\\t\\t\\n        int j=0;\\n        int k=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n             if (i%2 == 0) \\n               ans[i]=even.get(j++);\\n             else \\n               ans[i]=odd.get(k++);\\n        }\\n        return ans;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        if(nums.length<3)\\n        return nums;\\n        List<Integer> odd=new ArrayList<>();\\n        List<Integer> even=new ArrayList<>();\\n        int ans[]=new int[nums.length];\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if (i%2 == 0) \\n                even.add(nums[i]);\\n                else \\n                odd.add(nums[i]);\\n            }\\n        \\n        Collections.sort(even);\\n        Collections.sort(odd);\\n        Collections.reverse(odd);\\n\\t\\t\\n        int j=0;\\n        int k=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n             if (i%2 == 0) \\n               ans[i]=even.get(j++);\\n             else \\n               ans[i]=odd.get(k++);\\n        }\\n        return ans;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1753518,
                "title": "c-using-priority-queue-faster-than-100",
                "content": "// Fill even idx element in minheap and similarly odd in maxheap\\n// Then Fill in nums accordingly\\n// max heap will give decreasing and minheap will give increasing\\n// it gives 100% faster result\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n = nums.size();\\n        priority_queue<int> maxheap;\\n        priority_queue <int, vector<int>, greater<int> > minheap;\\n        \\n        // even fill  (0,2,4,6....)\\n        for(int i=0; i<n;){\\n            minheap.push(nums[i]);\\n            i = i+2;\\n        }\\n        // odd fill  (1,3,5,7,....)\\n        for(int i=1; i<n;){\\n            maxheap.push(nums[i]);\\n            i = i+2;\\n        }\\n        //\\n        // nums.clear();\\n        int i = 0;\\n        while(i<n){\\n            if(i%2==0){\\n                nums[i] = minheap.top();\\n                minheap.pop();\\n            }\\n            else{\\n                nums[i] = maxheap.top();\\n                maxheap.pop();\\n            }\\n            i++;\\n        }\\n        return nums;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n = nums.size();\\n        priority_queue<int> maxheap;\\n        priority_queue <int, vector<int>, greater<int> > minheap;\\n        \\n        // even fill  (0,2,4,6....)\\n        for(int i=0; i<n;){\\n            minheap.push(nums[i]);\\n            i = i+2;\\n        }\\n        // odd fill  (1,3,5,7,....)\\n        for(int i=1; i<n;){\\n            maxheap.push(nums[i]);\\n            i = i+2;\\n        }\\n        //\\n        // nums.clear();\\n        int i = 0;\\n        while(i<n){\\n            if(i%2==0){\\n                nums[i] = minheap.top();\\n                minheap.pop();\\n            }\\n            else{\\n                nums[i] = maxheap.top();\\n                maxheap.pop();\\n            }\\n            i++;\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1752547,
                "title": "python-two-lines-solution",
                "content": "```\\nclass Solution(object):\\n    def sortEvenOdd(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        nums[::2], nums[1::2] = sorted(nums[::2]), sorted(nums[1::2], reverse=True)\\n        return nums\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sortEvenOdd(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        nums[::2], nums[1::2] = sorted(nums[::2]), sorted(nums[1::2], reverse=True)\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748609,
                "title": "using-single-array-vs-2-arrays-with-comments-faster-than-100",
                "content": "**First get even index , sort them and place them back again**.\\n**Secondly get all odd index elements, sort them and place them back again**.\\n\\n# Single Array\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n\\t    int n= size(nums);\\n        vector<int> sm;\\n\\t\\tsm.reserve(n);  //for getting O(1) time in push_back operation\\n        \\n\\t\\t//Part 1 -> Get the even index elements and place them back after sorting\\n        for(int i=0;i<n;i+=2)  sm.push_back(nums[i]);\\n\\t\\t//sort in increasing order\\n        sort(begin(sm),end(sm));\\n\\t\\t//place them back again\\n        for(int i=0,k=0;i<n;i+=2,k++) nums[i]=sm[k];\\n        \\n\\t\\t//Part 2 -> Get the odd index elements and place them back after sorting\\n        sm.clear();\\n        for(int i=1;i<n;i+=2)   sm.push_back(nums[i]);\\n\\t\\t//sort in decreasing order\\n        sort(begin(sm),end(sm),[](auto a,auto b){ return a>b; });\\n        //place them back again\\n        for(int i=1,k=0;i<n;i+=2,k++)  nums[i]=sm[k];\\n        return nums;\\n    }\\n\\t\\n**2 Arrays**\\n    \\n\\tvector<int> sortEvenOdd(vector<int>& nums) {\\n        int n=size(nums);\\n        vector<int> odd,even;\\n        for(int i=0;i<size(nums);i++)  (i%2==1)? odd.push_back(nums[i]) : even.push_back(nums[i]);\\n        sort(begin(odd),end(odd),[](int a,int b){  return a>b; });\\n        sort(begin(even),end(even));\\n        for(int i=0,k=0;i<n;i+=2) nums[i]=even[k++];\\n        for(int i=1,k=0;i<n;i+=2) nums[i]=odd[k++];\\n        return nums;   \\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "**First get even index , sort them and place them back again**.\\n**Secondly get all odd index elements, sort them and place them back again**.\\n\\n# Single Array\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n\\t    int n= size(nums);\\n        vector<int> sm;\\n\\t\\tsm.reserve(n);  //for getting O(1) time in push_back operation\\n        \\n\\t\\t//Part 1 -> Get the even index elements and place them back after sorting\\n        for(int i=0;i<n;i+=2)  sm.push_back(nums[i]);\\n\\t\\t//sort in increasing order\\n        sort(begin(sm),end(sm));\\n\\t\\t//place them back again\\n        for(int i=0,k=0;i<n;i+=2,k++) nums[i]=sm[k];\\n        \\n\\t\\t//Part 2 -> Get the odd index elements and place them back after sorting\\n        sm.clear();\\n        for(int i=1;i<n;i+=2)   sm.push_back(nums[i]);\\n\\t\\t//sort in decreasing order\\n        sort(begin(sm),end(sm),[](auto a,auto b){ return a>b; });\\n        //place them back again\\n        for(int i=1,k=0;i<n;i+=2,k++)  nums[i]=sm[k];\\n        return nums;\\n    }\\n\\t\\n**2 Arrays**\\n    \\n\\tvector<int> sortEvenOdd(vector<int>& nums) {\\n        int n=size(nums);\\n        vector<int> odd,even;\\n        for(int i=0;i<size(nums);i++)  (i%2==1)? odd.push_back(nums[i]) : even.push_back(nums[i]);\\n        sort(begin(odd),end(odd),[](int a,int b){  return a>b; });\\n        sort(begin(even),end(even));\\n        for(int i=0,k=0;i<n;i+=2) nums[i]=even[k++];\\n        for(int i=1,k=0;i<n;i+=2) nums[i]=odd[k++];\\n        return nums;   \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1748656,
                "title": "python-beginner-solution-self-explanatory",
                "content": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        if len(nums) == 2:\\n            return nums\\n        else:\\n            evensorted = []\\n            oddsorted = []\\n            for i in range(len(nums)):\\n                if i%2 == 0:\\n                    evensorted.append(nums[i])\\n                else:\\n                    oddsorted.append(nums[i])\\n            evensorted.sort()\\n            oddsorted.sort(reverse=True)\\n            \\n            evenindex = 0\\n            oddindex = 0\\n            for i in range(len(nums)):\\n                if i%2==0:\\n                    nums[i] = evensorted[evenindex]\\n                    evenindex += 1\\n                else:\\n                    nums[i] = oddsorted[oddindex]\\n                    oddindex += 1\\n        return nums\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        if len(nums) == 2:\\n            return nums\\n        else:\\n            evensorted = []\\n            oddsorted = []\\n            for i in range(len(nums)):\\n                if i%2 == 0:\\n                    evensorted.append(nums[i])\\n                else:\\n                    oddsorted.append(nums[i])\\n            evensorted.sort()\\n            oddsorted.sort(reverse=True)\\n            \\n            evenindex = 0\\n            oddindex = 0\\n            for i in range(len(nums)):\\n                if i%2==0:\\n                    nums[i] = evensorted[evenindex]\\n                    evenindex += 1\\n                else:\\n                    nums[i] = oddsorted[oddindex]\\n                    oddindex += 1\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748677,
                "title": "java-2-priority-queues-3-lines",
                "content": "```\\n public int[] sortEvenOdd(int[] a){\\n        var qq = Arrays.asList(new PriorityQueue<Integer>(), new PriorityQueue<Integer>(Comparator.reverseOrder()));\\n        IntStream.range(0, a.length).forEach(i -> qq.get(i % 2).offer(a[i]));\\n        return IntStream.range(0, a.length).map(i -> qq.get(i % 2).poll()).toArray();\\n    }\\n```\\n\\n\\t\\nBelow is the same solution without streams\\n\\n\\n\\t public int[] sortEvenOdd(int[] a){\\n        var qq = Arrays.asList(new PriorityQueue<Integer>(), new PriorityQueue<Integer>(Comparator.reverseOrder()));\\n        for(int i = 0; i < a.length; i++)\\n            qq.get(i % 2).offer(a[i]);\\n        int[] r = new int[a.length];\\n        for(int i = 0; i < a.length; i++)\\n            r[i] = qq.get(i % 2).poll();\\n        return r;\\n    }",
                "solutionTags": [],
                "code": "```\\n public int[] sortEvenOdd(int[] a){\\n        var qq = Arrays.asList(new PriorityQueue<Integer>(), new PriorityQueue<Integer>(Comparator.reverseOrder()));\\n        IntStream.range(0, a.length).forEach(i -> qq.get(i % 2).offer(a[i]));\\n        return IntStream.range(0, a.length).map(i -> qq.get(i % 2).poll()).toArray();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1765047,
                "title": "java-time-compelxity-o-nlogn-o-n-space-easiest-solution-ever",
                "content": "**Runtime: 6 ms, faster than 61.60% of Java online submissions for Sort Even and Odd Indices Independently.\\nMemory Usage: 45.2 MB, less than 31.16% of Java online submissions for Sort Even and Odd Indices Independently.**\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int size=nums.length;\\n        ArrayList<Integer> evenIndexValue = new ArrayList<>();\\n        ArrayList<Integer> oddIndexValue = new ArrayList<>();\\n        for(int i=0;i<nums.length;i+=2){\\n            evenIndexValue.add(nums[i]);\\n        }\\n        for(int i=1;i<nums.length;i+=2){\\n            oddIndexValue.add(nums[i]);\\n        }\\n        Collections.sort(evenIndexValue);\\n        Collections.sort(oddIndexValue);\\n        int indforarraylist=0;\\n        for(int i=0;i<size;i+=2){\\n            nums[i]=evenIndexValue.get(indforarraylist);\\n            indforarraylist++;\\n        }\\n        indforarraylist=oddIndexValue.size()-1;\\n        for(int i=1;i<size;i+=2){\\n            nums[i]=oddIndexValue.get(indforarraylist);\\n            indforarraylist--;\\n        }\\n        return nums;\\n    }\\n}\\n```\\n**PLEASE UPVOTE IF YOU LIKED THE APPROACH.**",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int size=nums.length;\\n        ArrayList<Integer> evenIndexValue = new ArrayList<>();\\n        ArrayList<Integer> oddIndexValue = new ArrayList<>();\\n        for(int i=0;i<nums.length;i+=2){\\n            evenIndexValue.add(nums[i]);\\n        }\\n        for(int i=1;i<nums.length;i+=2){\\n            oddIndexValue.add(nums[i]);\\n        }\\n        Collections.sort(evenIndexValue);\\n        Collections.sort(oddIndexValue);\\n        int indforarraylist=0;\\n        for(int i=0;i<size;i+=2){\\n            nums[i]=evenIndexValue.get(indforarraylist);\\n            indforarraylist++;\\n        }\\n        indforarraylist=oddIndexValue.size()-1;\\n        for(int i=1;i<size;i+=2){\\n            nums[i]=oddIndexValue.get(indforarraylist);\\n            indforarraylist--;\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748539,
                "title": "c-simple-and-easy",
                "content": "**Connect with me** [Linkedin](https://www.linkedin.com/in/sarvesh-khandelwal-206b171a7/)\\n```\\n vector<int> sortEvenOdd(vector<int>& nums) {\\n        \\n        \\n        vector<int> even,odd;\\n        \\n        \\n        for(int i=0;i<nums.size();i++){\\n            \\n            if(i%2) even.push_back(nums[i]);\\n            else{\\n                odd.push_back(nums[i]);\\n            }\\n        }\\n        \\n        \\n        sort(odd.begin(),odd.end());\\n        sort(even.begin(),even.end(),greater<int>());\\n        \\n        \\n        \\n        int i=0,j=0;\\n        \\n        vector<int> ans;\\n        \\n        while(i<odd.size() || j<even.size()){\\n             if(i<odd.size()){\\n               ans.push_back(odd[i++]);\\n           }\\n            if(j<even.size()){\\n                ans.push_back(even[j++]);\\n            }\\n           \\n        }\\n       return ans;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n vector<int> sortEvenOdd(vector<int>& nums) {\\n        \\n        \\n        vector<int> even,odd;\\n        \\n        \\n        for(int i=0;i<nums.size();i++){\\n            \\n            if(i%2) even.push_back(nums[i]);\\n            else{\\n                odd.push_back(nums[i]);\\n            }\\n        }\\n        \\n        \\n        sort(odd.begin(),odd.end());\\n        sort(even.begin(),even.end(),greater<int>());\\n        \\n        \\n        \\n        int i=0,j=0;\\n        \\n        vector<int> ans;\\n        \\n        while(i<odd.size() || j<even.size()){\\n             if(i<odd.size()){\\n               ans.push_back(odd[i++]);\\n           }\\n            if(j<even.size()){\\n                ans.push_back(even[j++]);\\n            }\\n           \\n        }\\n       return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3043505,
                "title": "sorting-simple-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int>even;\\n        vector<int>odd;\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0){\\n                even.push_back(nums[i]);\\n            }else{\\n                odd.push_back(nums[i]);\\n            }\\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end());\\n        int e=0,o=odd.size()-1;\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0 && e<even.size()){\\n                nums[i]=even[e++];\\n            }else if(i%2!=0 && o>=0){\\n                nums[i]=odd[o--];\\n            }\\n        }\\n        return nums;\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int>even;\\n        vector<int>odd;\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0){\\n                even.push_back(nums[i]);\\n            }else{\\n                odd.push_back(nums[i]);\\n            }\\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end());\\n        int e=0,o=odd.size()-1;\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0 && e<even.size()){\\n                nums[i]=even[e++];\\n            }else if(i%2!=0 && o>=0){\\n                nums[i]=odd[o--];\\n            }\\n        }\\n        return nums;\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2881026,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int[] even = new int[101];\\n        int[] odd = new int[101];\\n        int length = nums.length;\\n        for (int i = 0; i < length; ++i) {\\n            if (i % 2 == 0) {\\n                even[nums[i]]++;\\n            } else {\\n                odd[nums[i]]++;\\n            }\\n        }\\n        int e = 0;\\n        int o = 100;\\n        for (int i = 0; i < length; ++i) {\\n            if (i % 2 == 0) {\\n                // check even\\n                while (even[e] == 0) {\\n                    ++e;\\n                }\\n                nums[i] = e;\\n                even[e]--;\\n            } else {\\n                while(odd[o] == 0) {\\n                    --o;\\n                }\\n                nums[i] = o;\\n                odd[o]--;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int[] even = new int[101];\\n        int[] odd = new int[101];\\n        int length = nums.length;\\n        for (int i = 0; i < length; ++i) {\\n            if (i % 2 == 0) {\\n                even[nums[i]]++;\\n            } else {\\n                odd[nums[i]]++;\\n            }\\n        }\\n        int e = 0;\\n        int o = 100;\\n        for (int i = 0; i < length; ++i) {\\n            if (i % 2 == 0) {\\n                // check even\\n                while (even[e] == 0) {\\n                    ++e;\\n                }\\n                nums[i] = e;\\n                even[e]--;\\n            } else {\\n                while(odd[o] == 0) {\\n                    --o;\\n                }\\n                nums[i] = o;\\n                odd[o]--;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1778901,
                "title": "javascript-solution-intuitive-simple-approach-4-lines",
                "content": "```\\nvar sortEvenOdd = function(nums) {\\n\\nlet odd= nums.filter((num,i,arr)=> i%2!=0).sort((a,b)=> b-a);  //decreasing order\\nlet even= nums.filter((num,i,arr)=> i%2==0).sort((a,b)=> a-b); //increasing order\\nlet x=0,y=0;\\n    \\n   nums.forEach((num,i,nums)=> {\\n        nums[i]= i%2==0 ? even[x++] : odd[y++];       //refilling the array \\n    });\\n    return nums;\\n};\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nvar sortEvenOdd = function(nums) {\\n\\nlet odd= nums.filter((num,i,arr)=> i%2!=0).sort((a,b)=> b-a);  //decreasing order\\nlet even= nums.filter((num,i,arr)=> i%2==0).sort((a,b)=> a-b); //increasing order\\nlet x=0,y=0;\\n    \\n   nums.forEach((num,i,nums)=> {\\n        nums[i]= i%2==0 ? even[x++] : odd[y++];       //refilling the array \\n    });\\n    return nums;\\n};\\n\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1748823,
                "title": "c-basic-approach-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int>even;\\n        vector<int>odd;\\n        vector<int>ans;\\n        int n=nums.size();\\n        int i=0;\\n        while(i<n){\\n            even.push_back(nums[i]);\\n            i+=2;\\n        }\\n    \\n        int j=1;\\n        while(j<n){\\n            odd.push_back(nums[j]);\\n            j+=2;\\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end(),greater<int>());\\n        \\n        for(int k=0;k<even.size();k++){\\n            if(k<even.size()) ans.push_back(even[k]);\\n           if(k<odd.size())  ans.push_back(odd[k]);\\n        }\\n        return ans;\\n        \\n\\t\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int>even;\\n        vector<int>odd;\\n        vector<int>ans;\\n        int n=nums.size();\\n        int i=0;\\n        while(i<n){\\n            even.push_back(nums[i]);\\n            i+=2;\\n        }\\n    \\n        int j=1;\\n        while(j<n){\\n            odd.push_back(nums[j]);\\n            j+=2;\\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end(),greater<int>());\\n        \\n        for(int k=0;k<even.size();k++){\\n            if(k<even.size()) ans.push_back(even[k]);\\n           if(k<odd.size())  ans.push_back(odd[k]);\\n        }\\n        return ans;\\n        \\n\\t\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2481319,
                "title": "go-solution",
                "content": "```\\nfunc sortEvenOdd(nums []int) []int {\\n    var oddArr, evenArr []int\\n    \\n    for i, num := range nums {\\n        if i%2 == 0 {\\n            evenArr = append(evenArr, num)\\n        } else {\\n            oddArr = append(oddArr, num)\\n        }\\n    }\\n    \\n    sort.Slice(evenArr, func(i, j int) bool {\\n        return evenArr[i] < evenArr[j]\\n    })\\n    \\n    sort.Slice(oddArr, func(i, j int) bool {\\n        return oddArr[i] > oddArr[j]\\n    })\\n    \\n    res := make([]int, len(nums))\\n    \\n    i, j := 0, 0\\n    \\n    for k := 0; k < len(res); k++ {\\n        if k%2 == 0 {\\n            res[k] = evenArr[i]\\n            i++\\n        } else {\\n            res[k] = oddArr[j]\\n            j++\\n        }\\n    }\\n    \\n    return res\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Sorting"
                ],
                "code": "```\\nfunc sortEvenOdd(nums []int) []int {\\n    var oddArr, evenArr []int\\n    \\n    for i, num := range nums {\\n        if i%2 == 0 {\\n            evenArr = append(evenArr, num)\\n        } else {\\n            oddArr = append(oddArr, num)\\n        }\\n    }\\n    \\n    sort.Slice(evenArr, func(i, j int) bool {\\n        return evenArr[i] < evenArr[j]\\n    })\\n    \\n    sort.Slice(oddArr, func(i, j int) bool {\\n        return oddArr[i] > oddArr[j]\\n    })\\n    \\n    res := make([]int, len(nums))\\n    \\n    i, j := 0, 0\\n    \\n    for k := 0; k < len(res); k++ {\\n        if k%2 == 0 {\\n            res[k] = evenArr[i]\\n            i++\\n        } else {\\n            res[k] = oddArr[j]\\n            j++\\n        }\\n    }\\n    \\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3882150,
                "title": "beginner-friendly-solution-fully-explained",
                "content": "# Approach\\nLet\\'s break down the approach and logic used in the provided solution:\\n\\n1. **Array Splitting:**\\n   The solution begins by splitting the input array `nums` into two separate arrays: one for even indices and one for odd indices. This is done to simplify the sorting process for each set of values.\\n\\n2. **Filling Even and Odd Arrays:**\\n   The loop iterates through the `nums` array. If the current index `i` is even, the corresponding value is added to the `even` array; if `i` is odd, the value is added to the `odd` array. This way, the even values are stored in one array and the odd values in another.\\n\\n3. **Sorting Arrays:**\\n   After filling the `even` and `odd` arrays, both arrays are sorted. The `Arrays.sort()` function is used to sort the elements in ascending order.\\n\\n4. **Reconstruction of `nums` Array:**\\n   After sorting the two arrays, the solution now reconstructs the `nums` array. It uses two index pointers `iE` and `iO` for the `even` and `odd` arrays, respectively.\\n\\n   The loop iterates through the `nums` array again, and if the current index `i` is even, it assigns the value from the `even` array using the `iE` pointer. Similarly, if `i` is odd, it assigns the value from the `odd` array using the `iO` pointer.\\n\\n   Notably, the values from the `odd` array are assigned in reverse order (`iO` decreases while traversing odd indices) because we sorted the odd values in non-increasing order.\\n\\n5. **Returning the Result:**\\n   Finally, the `nums` array is fully reconstructed according to the rules specified in the problem, and this sorted array is returned as the result.\\n\\nThe key idea here is to separate even and odd indices, sort the respective values independently, and then reconstruct the original array while following the given rules for sorting even and odd indices.\\n\\n# Complexity\\n- Time complexity: $$O(n * log(n))$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int n = nums.length;\\n        int[] even = new int[(n + 1) / 2];\\n        int[] odd = new int[n / 2];\\n        int iE = 0;\\n        int iO = 0;\\n\\n        for(int i = 0; i < n; i++) {\\n            if(i % 2 == 0) {\\n                even[iE++] = nums[i];\\n            } else {\\n                odd[iO++] = nums[i];\\n            }\\n        }\\n\\n        Arrays.sort(even);\\n        Arrays.sort(odd);\\n        iE = 0;\\n        iO = n / 2 - 1;\\n\\n        for(int i = 0; i < n; i++) {\\n            if(i % 2 == 0) {\\n                nums[i] = even[iE++];\\n            } else {\\n                nums[i] = odd[iO--];\\n            }\\n        }\\n\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "C#",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int n = nums.length;\\n        int[] even = new int[(n + 1) / 2];\\n        int[] odd = new int[n / 2];\\n        int iE = 0;\\n        int iO = 0;\\n\\n        for(int i = 0; i < n; i++) {\\n            if(i % 2 == 0) {\\n                even[iE++] = nums[i];\\n            } else {\\n                odd[iO++] = nums[i];\\n            }\\n        }\\n\\n        Arrays.sort(even);\\n        Arrays.sort(odd);\\n        iE = 0;\\n        iO = n / 2 - 1;\\n\\n        for(int i = 0; i < n; i++) {\\n            if(i % 2 == 0) {\\n                nums[i] = even[iE++];\\n            } else {\\n                nums[i] = odd[iO--];\\n            }\\n        }\\n\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3294662,
                "title": "easy-solution-o-n-log-n-time-complexity-and-o-n-space-complexity",
                "content": "\\n> # Approach\\nLet\\'s use some data structutes to solve this problem,By adding even indexed numbers into MinHeap we can sort the data in ascending order,By adding odd indexed numbers into Maxheap we can sort the data in descending order. \\n<!-- Describe your approach to solving the problem. -->\\n\\n> # Complexity\\n- Time complexity: O(n log(n))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n) for Priority Queue\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n> # Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        PriorityQueue<Integer> queue = new PriorityQueue<>();\\n        for(int i=0;i<nums.length;i+=2){\\n            queue.add(nums[i]);\\n        }\\n        for(int i=0;i<nums.length;i+=2){\\n            nums[i]=queue.poll();\\n        }\\n        queue = new PriorityQueue<>(new MaxHeap());\\n        for(int i=1;i<nums.length;i+=2){\\n            queue.add(nums[i]);\\n        }\\n        for(int i=1;i<nums.length;i+=2){\\n            nums[i]=queue.poll();\\n        }\\n        return nums;\\n    }\\n}\\nclass MaxHeap implements Comparator<Integer>{\\n    public int compare(Integer ca,Integer cb){\\n        return cb-ca;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        PriorityQueue<Integer> queue = new PriorityQueue<>();\\n        for(int i=0;i<nums.length;i+=2){\\n            queue.add(nums[i]);\\n        }\\n        for(int i=0;i<nums.length;i+=2){\\n            nums[i]=queue.poll();\\n        }\\n        queue = new PriorityQueue<>(new MaxHeap());\\n        for(int i=1;i<nums.length;i+=2){\\n            queue.add(nums[i]);\\n        }\\n        for(int i=1;i<nums.length;i+=2){\\n            nums[i]=queue.poll();\\n        }\\n        return nums;\\n    }\\n}\\nclass MaxHeap implements Comparator<Integer>{\\n    public int compare(Integer ca,Integer cb){\\n        return cb-ca;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2895192,
                "title": "understandable-step-by-step-solution-c-brute-force",
                "content": "2164. Sort Even and Odd Indices Independently\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int> a;\\n        vector<int> b;\\n        vector<int> ans;\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i==0 || i%2==0){\\n                a.push_back(nums[i]);\\n            }\\n            else{           \\n                b.push_back(nums[i]);\\n            }\\n        }\\n        sort(a.begin(),a.end());\\n        sort(b.begin(),b.end(),greater<>());\\n        int m=n/2;\\n        int z=a.size()-1;\\n        \\n        if(n%2!=0){\\n            for(int i=0;i<m;i++){\\n                ans.push_back(a[i]);\\n                ans.push_back(b[i]);\\n            }\\n            ans.push_back(a[z]);\\n        }\\n        else{\\n            for(int i=0;i<m;i++)\\n            {\\n                ans.push_back(a[i]);\\n                ans.push_back(b[i]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int> a;\\n        vector<int> b;\\n        vector<int> ans;\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i==0 || i%2==0){\\n                a.push_back(nums[i]);\\n            }\\n            else{           \\n                b.push_back(nums[i]);\\n            }\\n        }\\n        sort(a.begin(),a.end());\\n        sort(b.begin(),b.end(),greater<>());\\n        int m=n/2;\\n        int z=a.size()-1;\\n        \\n        if(n%2!=0){\\n            for(int i=0;i<m;i++){\\n                ans.push_back(a[i]);\\n                ans.push_back(b[i]);\\n            }\\n            ans.push_back(a[z]);\\n        }\\n        else{\\n            for(int i=0;i<m;i++)\\n            {\\n                ans.push_back(a[i]);\\n                ans.push_back(b[i]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2781930,
                "title": "java-clean-solution-100-faster",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n       int len = nums.length;\\n       var odd = new int[len / 2];\\n       var even = new int[len - len / 2];\\n\\n    int j = 0, k = 0;\\n    for(int i = 0; i < len; i ++) {\\n        if(i % 2 == 0) even[j ++] = nums[i];\\n        else odd[k ++] = nums[i]; \\n    }\\n    Arrays.sort(even); Arrays.sort(odd);\\n    j = 0; k = odd.length - 1;\\n    for(int i = 0; i < len; i ++) {\\n      nums[i] = (i % 2 == 0) ? even[j ++] : odd[k --]; \\n    }\\n    return nums;\\n    }\\n}\\n```\\n# PLEASE UPVOtE IF IT WS HELPFULL",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n       int len = nums.length;\\n       var odd = new int[len / 2];\\n       var even = new int[len - len / 2];\\n\\n    int j = 0, k = 0;\\n    for(int i = 0; i < len; i ++) {\\n        if(i % 2 == 0) even[j ++] = nums[i];\\n        else odd[k ++] = nums[i]; \\n    }\\n    Arrays.sort(even); Arrays.sort(odd);\\n    j = 0; k = odd.length - 1;\\n    for(int i = 0; i < len; i ++) {\\n      nums[i] = (i % 2 == 0) ? even[j ++] : odd[k --]; \\n    }\\n    return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2776431,
                "title": "java-average-solution-o-2n-n-log-n",
                "content": "# Complexity\\n- Time complexity: O(2N + N*log(N))\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int[] even = new int[nums.length % 2 == 0 ? nums.length / 2 : nums.length / 2 + 1];\\n        Integer[] odd = new Integer[nums.length / 2];\\n        int count = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) {\\n                even[count] = nums[i];\\n            } else {\\n                odd[count++] = nums[i];\\n            }\\n        }\\n\\n        Arrays.sort(even);\\n        Arrays.sort(odd, Comparator.reverseOrder());\\n        count = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) {\\n                nums[i] = even[count];\\n            } else {\\n                nums[i] = odd[count++];\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int[] even = new int[nums.length % 2 == 0 ? nums.length / 2 : nums.length / 2 + 1];\\n        Integer[] odd = new Integer[nums.length / 2];\\n        int count = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) {\\n                even[count] = nums[i];\\n            } else {\\n                odd[count++] = nums[i];\\n            }\\n        }\\n\\n        Arrays.sort(even);\\n        Arrays.sort(odd, Comparator.reverseOrder());\\n        count = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) {\\n                nums[i] = even[count];\\n            } else {\\n                nums[i] = odd[count++];\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2624625,
                "title": "java-bubble-sort",
                "content": "\\tclass Solution {\\n\\t\\tpublic int[] sortEvenOdd(int[] nums) {\\n\\n\\t\\t\\t// sorting even \\n\\t\\t\\tfor(int i=0; i<nums.length-2; i+=2){\\n\\t\\t\\t\\tfor(int j=i+2; j<nums.length; j+=2){\\n\\t\\t\\t\\t\\tif(nums[i] > nums[j]){\\n\\t\\t\\t\\t\\t\\tint temp=nums[i];\\n\\t\\t\\t\\t\\t\\tnums[i]=nums[j];\\n\\t\\t\\t\\t\\t\\tnums[j] = temp;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// sorting odd\\n\\t\\t\\tint start = (nums.length-1) % 2 ==0?nums.length-2 : nums.length-1; \\n\\t\\t\\tfor(int i=start; i>0; i-=2){\\n\\t\\t\\t\\tfor(int j=i-2; j>=0; j-=2){\\n\\t\\t\\t\\t\\tif(nums[i] > nums[j]){\\n\\t\\t\\t\\t\\t\\tint temp=nums[i];\\n\\t\\t\\t\\t\\t\\tnums[i]=nums[j];\\n\\t\\t\\t\\t\\t\\tnums[j] = temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn nums;\\n\\t\\t\\t}\\n\\t}",
                "solutionTags": [],
                "code": "class Solution {\\n\\t\\tpublic int[] sortEvenOdd(int[] nums) {\\n\\n\\t\\t\\t// sorting even \\n\\t\\t\\tfor(int i=0; i<nums.length-2; i+=2){\\n\\t\\t\\t\\tfor(int j=i+2; j<nums.length; j+=2){\\n\\t\\t\\t\\t\\tif(nums[i] > nums[j]){\\n\\t\\t\\t\\t\\t\\tint temp=nums[i];\\n\\t\\t\\t\\t\\t\\tnums[i]=nums[j];\\n\\t\\t\\t\\t\\t\\tnums[j] = temp;\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2512108,
                "title": "java-brute-force-very-easy-to-understand-o-n-2-just-check-it-out",
                "content": "class Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n        for(int i=0;i<nums.length;i+=2){\\n            for(int j=i+2;j<nums.length;j+=2){\\n                if(nums[i]>=nums[j]){\\n                    int temp=nums[i];\\n                    nums[i]=nums[j];\\n                    nums[j]=temp;\\n                }\\n            }\\n        }\\n        for(int i=1;i<nums.length;i+=2){\\n            for(int j=i+2;j<nums.length;j+=2){\\n                if(nums[i]<=nums[j]){\\n                    int temp=nums[i];\\n                    nums[i]=nums[j];\\n                    nums[j]=temp;\\n                }\\n            }\\n        }\\n        return nums;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Sorting"
                ],
                "code": "class Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n        for(int i=0;i<nums.length;i+=2){\\n            for(int j=i+2;j<nums.length;j+=2){\\n                if(nums[i]>=nums[j]){\\n                    int temp=nums[i];\\n                    nums[i]=nums[j];\\n                    nums[j]=temp;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2434247,
                "title": "easy-simple-solution",
                "content": "\\n        list1=nums[::2]\\n        list2=nums[1::2]\\n        list1.sort()\\n        list2.sort(reverse=True)\\n        list3=[]\\n        i=0\\n        while(i<len(nums)):\\n            if(i<len(list1)):\\n                list3.append(list1[i])\\n            if(i<len(list2)):\\n                list3.append(list2[i])\\n            i+=1\\n        return list3\\n            \\n        \\n        \\n        \\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "\\n        list1=nums[::2]\\n        list2=nums[1::2]\\n        list1.sort()\\n        list2.sort(reverse=True)\\n        list3=[]\\n        i=0\\n        while(i<len(nums)):\\n            if(i<len(list1)):\\n                list3.append(list1[i])\\n            if(i<len(list2)):\\n                list3.append(list2[i])\\n            i+=1\\n        return list3\\n            \\n        \\n        \\n        \\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2214566,
                "title": "python-in-place-sorting",
                "content": "\\tclass Solution:\\n\\t\\tdef sortEvenOdd(self, nums: List[int]) -> List[int]:\\n\\t\\t\\tn = len(nums)\\n\\t\\t\\tfor i in range(0,n,2):\\n\\t\\t\\t\\tfor j in range(i+2,n,2):\\n\\t\\t\\t\\t\\tif nums[i] > nums[j]:\\n\\t\\t\\t\\t\\t\\tnums[i],nums[j] = nums[j], nums[i]\\n\\n\\t\\t\\tfor i in range(1,n,2):\\n\\t\\t\\t\\tfor j in range(i+2,n,2):\\n\\t\\t\\t\\t\\tif nums[i] < nums[j]:\\n\\t\\t\\t\\t\\t\\tnums[i],nums[j] = nums[j], nums[i]\\n\\t\\t\\treturn nums",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef sortEvenOdd(self, nums: List[int]) -> List[int]:\\n\\t\\t\\tn = len(nums)\\n\\t\\t\\tfor i in range(0,n,2):\\n\\t\\t\\t\\tfor j in range(i+2,n,2):\\n\\t\\t\\t\\t\\tif nums[i] > nums[j]:\\n\\t\\t\\t\\t\\t\\tnums[i],nums[j] = nums[j], nums[i]\\n\\n\\t\\t\\tfor i in range(1,n,2):\\n\\t\\t\\t\\tfor j in range(i+2,n,2):\\n\\t\\t\\t\\t\\tif nums[i] < nums[j]:\\n\\t\\t\\t\\t\\t\\tnums[i],nums[j] = nums[j], nums[i]\\n\\t\\t\\treturn nums",
                "codeTag": "Java"
            },
            {
                "id": 2011334,
                "title": "sort-even-and-odd-indices-independently-java-solution",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n      \\n        List<Integer> arr1=new ArrayList<>();\\n        List<Integer> arr2=new ArrayList<>();\\n        int index=0;\\n        for (int i = 0; i < nums.length; i+=2) {\\n            arr1.add(nums[i]);\\n        }\\n        for (int i = 1; i < nums.length; i+=2) {\\n            arr2.add(nums[i]);\\n        }\\n        Collections.sort(arr2,Collections.reverseOrder());\\n        Collections.sort(arr1);\\n        boolean b=false;\\n        for (int i = 0; i <nums.length ; i++) {\\n            if(!b){\\n                nums[i]=arr1.get(index);\\n                b=true;\\n            }else{\\n                nums[i]=arr2.get(index);\\n                b=false;\\n                index++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n      \\n        List<Integer> arr1=new ArrayList<>();\\n        List<Integer> arr2=new ArrayList<>();\\n        int index=0;\\n        for (int i = 0; i < nums.length; i+=2) {\\n            arr1.add(nums[i]);\\n        }\\n        for (int i = 1; i < nums.length; i+=2) {\\n            arr2.add(nums[i]);\\n        }\\n        Collections.sort(arr2,Collections.reverseOrder());\\n        Collections.sort(arr1);\\n        boolean b=false;\\n        for (int i = 0; i <nums.length ; i++) {\\n            if(!b){\\n                nums[i]=arr1.get(index);\\n                b=true;\\n            }else{\\n                nums[i]=arr2.get(index);\\n                b=false;\\n                index++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2000658,
                "title": "python-easy-but-heavy-approach-explained",
                "content": "\\'\\'\\'\\n\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        l1=[]\\n        l2=[]\\n        for i in range(len(nums)):\\n            if i%2==0:\\n                l1.append(nums[i])       #appending even index values to l1\\n            else:\\n                l2.append(nums[i])      #appending even index values to l2\\n                \\n        l1.sort()     #sorting even index\\n        l2.sort()    #sorting odd index but reverse it beacause we need it in decreasing order\\n        l2=l2[::-1]\\n        l3=[]\\n        if len(l1)>=len(l2):      #if l1 length is greater then the loop will run till l2 and we append extra l1 \\n            for i in range(len(l2)):\\n                l3.append(l1[i])\\n                l3.append(l2[i])\\n            l3= l3+l1[len(l2):]\\n        else:\\n            for i in range(len(l1)):\\n                l3.append(l1[i])\\n                l3.append(l2[i])\\n            l3= l3+l2[len(l1):]\\n        return l3\\n\\'\\'\\'",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\'\\'\\'\\n\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        l1=[]\\n        l2=[]\\n        for i in range(len(nums)):\\n            if i%2==0:\\n                l1.append(nums[i])       #appending even index values to l1\\n            else:\\n                l2.append(nums[i])      #appending even index values to l2\\n                \\n        l1.sort()     #sorting even index\\n        l2.sort()    #sorting odd index but reverse it beacause we need it in decreasing order\\n        l2=l2[::-1]\\n        l3=[]\\n        if len(l1)>=len(l2):      #if l1 length is greater then the loop will run till l2 and we append extra l1 \\n            for i in range(len(l2)):\\n                l3.append(l1[i])\\n                l3.append(l2[i])\\n            l3= l3+l1[len(l2):]\\n        else:\\n            for i in range(len(l1)):\\n                l3.append(l1[i])\\n                l3.append(l2[i])\\n            l3= l3+l2[len(l1):]\\n        return l3\\n\\'\\'\\'",
                "codeTag": "Python3"
            },
            {
                "id": 1973699,
                "title": "python-sort-in-place",
                "content": "```\\nclass Solution(object):\\n    def sortEvenOdd(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        nums[::2] = sorted(nums[::2])\\n        nums[1::2] = sorted(nums[1::2], reverse=True)\\n        return nums\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def sortEvenOdd(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        nums[::2] = sorted(nums[::2])\\n        nums[1::2] = sorted(nums[1::2], reverse=True)\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1828574,
                "title": "c-easy-implementation-very-fast",
                "content": "```\\n vector<int> sortEvenOdd(vector<int>& nums) {\\n    vector<int> even,odd;\\n        for(int i=0;i<nums.size();i++)\\n            if(i&1)\\n                odd.push_back(nums[i]);\\n            else\\n                even.push_back(nums[i]);\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end(),greater<int>());\\n        int size = nums.size();\\n        nums.clear();\\n        int x = 0,j = 0;\\n        for(int i=0;i<size;i++)\\n            if(i&1)\\n                nums.push_back(odd[x++]);\\n            else\\n                nums.push_back(even[j++]);\\n        return nums;\\n    }",
                "solutionTags": [
                    "Sorting"
                ],
                "code": "```\\n vector<int> sortEvenOdd(vector<int>& nums) {\\n    vector<int> even,odd;\\n        for(int i=0;i<nums.size();i++)\\n            if(i&1)\\n                odd.push_back(nums[i]);\\n            else\\n                even.push_back(nums[i]);\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end(),greater<int>());\\n        int size = nums.size();\\n        nums.clear();\\n        int x = 0,j = 0;\\n        for(int i=0;i<size;i++)\\n            if(i&1)\\n                nums.push_back(odd[x++]);\\n            else\\n                nums.push_back(even[j++]);\\n        return nums;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1767135,
                "title": "c-o-nlogn-o-n-space-easy-understand",
                "content": "Hey Guys,\\n\\nTo solve this question you just need to gather all even elements at once and all odd elements at once I did this by using `oddele` and `evenele` vectors. \\nOnce this is done just sort the `oddele` vector in decreasing order and `evenele` vector in increasing order and last but not the least merge both `oddele` and `evenele` appropriately. and you are done.\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> oddele, evenele;\\n        for(int i=0;i<nums.size();i++) {\\n            if(i % 2 == 0) evenele.push_back(nums[i]); else oddele.push_back(nums[i]);\\n        }\\n        \\n        sort(oddele.begin(), oddele.end(), greater<int>());\\n        sort(evenele.begin(), evenele.end());\\n        vector<int> ans;\\n        int i1 = 0, i2 = 0;\\n        for(int i=0;i<nums.size();i++) {\\n            if(i%2 == 0) {\\n                ans.push_back(evenele[i1]); i1++;\\n            } else {\\n                ans.push_back(oddele[i2]); i2++;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```\\n\\nHappy Hacking.",
                "solutionTags": [
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> oddele, evenele;\\n        for(int i=0;i<nums.size();i++) {\\n            if(i % 2 == 0) evenele.push_back(nums[i]); else oddele.push_back(nums[i]);\\n        }\\n        \\n        sort(oddele.begin(), oddele.end(), greater<int>());\\n        sort(evenele.begin(), evenele.end());\\n        vector<int> ans;\\n        int i1 = 0, i2 = 0;\\n        for(int i=0;i<nums.size();i++) {\\n            if(i%2 == 0) {\\n                ans.push_back(evenele[i1]); i1++;\\n            } else {\\n                ans.push_back(oddele[i2]); i2++;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1764403,
                "title": "javascript",
                "content": "```\\nvar sortEvenOdd = function(nums) {\\n    let evenArr = []\\n    let oddArr = []\\n    \\n    for (let i = 0; i < nums.length; i++) {\\n        if (i % 2 === 0) {\\n            evenArr.push(nums[i])\\n        } else {\\n            oddArr.push(nums[i])\\n        }\\n    }\\n    \\n    evenArr = evenArr.sort((a, b) => a -b)\\n    oddArr = oddArr.sort((a, b) => b - a)\\n    \\n    let result = []\\n    for (let i = 0; i < nums.length; i++) {\\n        if (i % 2 === 0) {\\n            result.push(evenArr.shift())\\n        } else {\\n            result.push(oddArr.shift())\\n        }\\n    }\\n    \\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar sortEvenOdd = function(nums) {\\n    let evenArr = []\\n    let oddArr = []\\n    \\n    for (let i = 0; i < nums.length; i++) {\\n        if (i % 2 === 0) {\\n            evenArr.push(nums[i])\\n        } else {\\n            oddArr.push(nums[i])\\n        }\\n    }\\n    \\n    evenArr = evenArr.sort((a, b) => a -b)\\n    oddArr = oddArr.sort((a, b) => b - a)\\n    \\n    let result = []\\n    for (let i = 0; i < nums.length; i++) {\\n        if (i % 2 === 0) {\\n            result.push(evenArr.shift())\\n        } else {\\n            result.push(oddArr.shift())\\n        }\\n    }\\n    \\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1751347,
                "title": "simple-solution-in-o-n-2-time-complexity",
                "content": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        \\n        int n = nums.size();\\n\\t\\t//for Odd index swapping for non-decresing order\\n        for(int i=1; i<n; i+=2){\\n            \\n            for(int j=i+2; j<n; j+=2)\\n            {\\n                if(nums[i] < nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }\\n            }\\n        }\\n\\t\\t//for Even index swapping for non-incresing order\\n        for(int i=0; i<n; i+=2){\\n            \\n            for(int j=i+2; j<n; j+=2)\\n            {\\n                if(nums[i] > nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }\\n            }\\n        }\\n        return nums;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        \\n        int n = nums.size();\\n\\t\\t//for Odd index swapping for non-decresing order\\n        for(int i=1; i<n; i+=2){\\n            \\n            for(int j=i+2; j<n; j+=2)\\n            {\\n                if(nums[i] < nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1750651,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int len = nums.length;\\n        var oddArr = new int[len / 2];\\n        var evenArr = new int[len - len / 2];\\n        \\n        int j = 0, k = 0;\\n        for (int i = 0; i < len; i++) {\\n            if (i % 2 == 0) evenArr[j++] = nums[i];\\n            else oddArr[k++] = nums[i];\\n        }\\n        Arrays.sort(evenArr); Arrays.sort(oddArr);\\n        \\n        j = 0; k = oddArr.length - 1;        \\n        for (int i = 0; i < len; i++) {\\n            nums[i] = i % 2 == 0 ? evenArr[j++] : oddArr[k--];\\n        }\\n        return nums;\\n     }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int len = nums.length;\\n        var oddArr = new int[len / 2];\\n        var evenArr = new int[len - len / 2];\\n        \\n        int j = 0, k = 0;\\n        for (int i = 0; i < len; i++) {\\n            if (i % 2 == 0) evenArr[j++] = nums[i];\\n            else oddArr[k++] = nums[i];\\n        }\\n        Arrays.sort(evenArr); Arrays.sort(oddArr);\\n        \\n        j = 0; k = oddArr.length - 1;        \\n        for (int i = 0; i < len; i++) {\\n            nums[i] = i % 2 == 0 ? evenArr[j++] : oddArr[k--];\\n        }\\n        return nums;\\n     }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748776,
                "title": "c-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int>even,odd;\\n        for(int i=0;i<nums.size();i++){\\n           if(i%2==0)\\n               even.push_back(nums[i]);\\n            else\\n                odd.push_back(nums[i]);\\n        }\\n          sort(even.begin(),even.end());\\n          sort(odd.begin(),odd.end(),greater<int>());\\n            \\n            int j=0;\\n            int a=0;\\n            int b=0;\\n         while(j<nums.size())\\n            {\\n                if(j%2==0)\\n                    nums[j]=even[a++];\\n                else\\n                    nums[j]=odd[b++];\\n                j++;\\n                \\n            }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int>even,odd;\\n        for(int i=0;i<nums.size();i++){\\n           if(i%2==0)\\n               even.push_back(nums[i]);\\n            else\\n                odd.push_back(nums[i]);\\n        }\\n          sort(even.begin(),even.end());\\n          sort(odd.begin(),odd.end(),greater<int>());\\n            \\n            int j=0;\\n            int a=0;\\n            int b=0;\\n         while(j<nums.size())\\n            {\\n                if(j%2==0)\\n                    nums[j]=even[a++];\\n                else\\n                    nums[j]=odd[b++];\\n                j++;\\n                \\n            }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748606,
                "title": "java-priorityqueue",
                "content": "```\\npublic int[] sortEvenOdd(int[] nums) {\\n        PriorityQueue<Integer> odd = new PriorityQueue<>((a, b) -> b - a);\\n        PriorityQueue<Integer> even = new PriorityQueue<>();\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i%2 == 0) {\\n                even.add(nums[i]);\\n            } else {\\n                odd.add(nums[i]);\\n            }\\n        }\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i%2 == 0) {\\n                nums[i] = even.poll();\\n            } else {\\n                nums[i] = odd.poll();\\n            }\\n        }\\n\\n        return nums;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\npublic int[] sortEvenOdd(int[] nums) {\\n        PriorityQueue<Integer> odd = new PriorityQueue<>((a, b) -> b - a);\\n        PriorityQueue<Integer> even = new PriorityQueue<>();\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i%2 == 0) {\\n                even.add(nums[i]);\\n            } else {\\n                odd.add(nums[i]);\\n            }\\n        }\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i%2 == 0) {\\n                nums[i] = even.poll();\\n            } else {\\n                nums[i] = odd.poll();\\n            }\\n        }\\n\\n        return nums;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3751456,
                "title": "c-easy-worst-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> odd, even;\\n        for(int i=0; i<nums.size(); i++ )\\n        {\\n            if(i%2==0) \\n            {\\n                even.push_back(nums[i]);\\n            }\\n            else\\n            { \\n                odd.push_back(nums[i]);\\n            }\\n        }\\n        sort(odd.rbegin(), odd.rend());\\n        sort(even.begin(), even.end());\\n        int m=0, n=0;\\n        for(int i=0; i<nums.size(); i++)\\n        {\\n            if(i%2==0)\\n            {\\n                nums[i]=even[m++];\\n            }\\n            else\\n            {\\n                nums[i]=odd[n++];\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> odd, even;\\n        for(int i=0; i<nums.size(); i++ )\\n        {\\n            if(i%2==0) \\n            {\\n                even.push_back(nums[i]);\\n            }\\n            else\\n            { \\n                odd.push_back(nums[i]);\\n            }\\n        }\\n        sort(odd.rbegin(), odd.rend());\\n        sort(even.begin(), even.end());\\n        int m=0, n=0;\\n        for(int i=0; i<nums.size(); i++)\\n        {\\n            if(i%2==0)\\n            {\\n                nums[i]=even[m++];\\n            }\\n            else\\n            {\\n                nums[i]=odd[n++];\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3608281,
                "title": "beats-90-cpp-sol",
                "content": "# **Pls Upvote if Helpful\\uD83D\\uDE07**\\n\\n# Complexity\\n- Time complexity: O(n logn)\\n\\n- Space complexity: O(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int>even;\\n        vector<int>odd;\\n        for(int i = 0; i<nums.size(); i++){\\n            if(i%2 == 0){\\n                even.push_back(nums[i]);\\n            }else{\\n                odd.push_back(nums[i]);\\n            }\\n        }\\n\\n        vector<int>ans;\\n        sort(even.begin(), even.end(), greater<int>());\\n        sort(odd.begin(), odd.end());\\n\\n        for(int i = 0; i<nums.size(); i++){\\n            if(i%2 ==0){\\n                int no = even.back();\\n                even.pop_back();\\n                ans.push_back(no);\\n            }else{\\n                int no = odd.back();\\n                odd.pop_back();\\n                ans.push_back(no);\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int>even;\\n        vector<int>odd;\\n        for(int i = 0; i<nums.size(); i++){\\n            if(i%2 == 0){\\n                even.push_back(nums[i]);\\n            }else{\\n                odd.push_back(nums[i]);\\n            }\\n        }\\n\\n        vector<int>ans;\\n        sort(even.begin(), even.end(), greater<int>());\\n        sort(odd.begin(), odd.end());\\n\\n        for(int i = 0; i<nums.size(); i++){\\n            if(i%2 ==0){\\n                int no = even.back();\\n                even.pop_back();\\n                ans.push_back(no);\\n            }else{\\n                int no = odd.back();\\n                odd.pop_back();\\n                ans.push_back(no);\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3359882,
                "title": "sort-even-and-odd-indices-independently-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(nlogn)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> odd;\\n        vector<int> even;\\n        int i=0, j=0;\\n        for(i=0 ; i<nums.size() ; i++)\\n        {\\n            if(i%2==1)\\n            {\\n                odd.push_back(nums[i]);\\n            }\\n            else\\n            {\\n                even.push_back(nums[i]);\\n            }\\n        }\\n        \\n        sort(even.begin(), even.end());\\n        sort(odd.begin(), odd.end());\\n        reverse(odd.begin(), odd.end());\\n        nums.clear();\\n        \\n        for(i=0 ; i<odd.size() ; i++)\\n        {\\n            nums.push_back(odd[i]);\\n        }\\n        for(i=0 ; i<even.size() ; i++)\\n        {\\n            nums.insert(nums.begin()+j, even[i]);\\n            j += 2;\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> odd;\\n        vector<int> even;\\n        int i=0, j=0;\\n        for(i=0 ; i<nums.size() ; i++)\\n        {\\n            if(i%2==1)\\n            {\\n                odd.push_back(nums[i]);\\n            }\\n            else\\n            {\\n                even.push_back(nums[i]);\\n            }\\n        }\\n        \\n        sort(even.begin(), even.end());\\n        sort(odd.begin(), odd.end());\\n        reverse(odd.begin(), odd.end());\\n        nums.clear();\\n        \\n        for(i=0 ; i<odd.size() ; i++)\\n        {\\n            nums.push_back(odd[i]);\\n        }\\n        for(i=0 ; i<even.size() ; i++)\\n        {\\n            nums.insert(nums.begin()+j, even[i]);\\n            j += 2;\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086524,
                "title": "easy-to-understand-c-code",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        for(int i=0;i<nums.size();i=i+2)\\n        {\\n          for(int j=i+2;j<nums.size();j=j+2)\\n          {\\n              if(nums[j]<nums[i])\\n              swap(nums[j],nums[i]);\\n          }\\n        }\\n        for(int i=1;i<nums.size();i=i+2)\\n        {\\n          for(int j=i+2;j<nums.size();j=j+2)\\n          {\\n              if(nums[j]>nums[i])\\n              swap(nums[j],nums[i]);\\n          }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        for(int i=0;i<nums.size();i=i+2)\\n        {\\n          for(int j=i+2;j<nums.size();j=j+2)\\n          {\\n              if(nums[j]<nums[i])\\n              swap(nums[j],nums[i]);\\n          }\\n        }\\n        for(int i=1;i<nums.size();i=i+2)\\n        {\\n          for(int j=i+2;j<nums.size();j=j+2)\\n          {\\n              if(nums[j]>nums[i])\\n              swap(nums[j],nums[i]);\\n          }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3082708,
                "title": "python3-easy-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        oddlist = []\\n        evenlist = []\\n        finalist = []\\n        for i in range(len(nums)):\\n            if i%2 == 0:\\n                evenlist.append(nums[i])\\n            else:\\n                oddlist.append(nums[i])\\n        evenlist.sort()\\n        oddlist.sort()\\n        oddlist=oddlist[::-1]\\n        ln=min(len(evenlist),len(oddlist))\\n        for i in range(ln):\\n            finalist.append(evenlist[i])\\n            finalist.append(oddlist[i])\\n        if len(evenlist)==ln:\\n            finalist+=oddlist[ln:]\\n        else:\\n            finalist+=evenlist[ln:]\\n        return finalist\\n\\n```\\n# Pls upvote if you like the solution.",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        oddlist = []\\n        evenlist = []\\n        finalist = []\\n        for i in range(len(nums)):\\n            if i%2 == 0:\\n                evenlist.append(nums[i])\\n            else:\\n                oddlist.append(nums[i])\\n        evenlist.sort()\\n        oddlist.sort()\\n        oddlist=oddlist[::-1]\\n        ln=min(len(evenlist),len(oddlist))\\n        for i in range(ln):\\n            finalist.append(evenlist[i])\\n            finalist.append(oddlist[i])\\n        if len(evenlist)==ln:\\n            finalist+=oddlist[ln:]\\n        else:\\n            finalist+=evenlist[ln:]\\n        return finalist\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2782963,
                "title": "best-easy-solution",
                "content": "# Intuition\\nIteration\\n\\n# Approach\\nBruteforce\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        lst=[]\\n        dst=[]\\n        bst=[]\\n        mst=[]\\n        cst=[0]*len(nums)\\n        for i in range(len(nums)):\\n            if i%2==0:\\n                lst.append(nums[i])\\n                dst.append(i)\\n            else:\\n                bst.append(nums[i])\\n                mst.append(i)\\n        lst.sort()\\n        bst.sort()\\n        bst=bst[::-1]\\n        for i in range(len(lst)):\\n            cst[dst[i]]=lst[i]\\n        for j in range(len(bst)):\\n            cst[mst[j]]=bst[j]\\n        return cst\\n\\n        \\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        lst=[]\\n        dst=[]\\n        bst=[]\\n        mst=[]\\n        cst=[0]*len(nums)\\n        for i in range(len(nums)):\\n            if i%2==0:\\n                lst.append(nums[i])\\n                dst.append(i)\\n            else:\\n                bst.append(nums[i])\\n                mst.append(i)\\n        lst.sort()\\n        bst.sort()\\n        bst=bst[::-1]\\n        for i in range(len(lst)):\\n            cst[dst[i]]=lst[i]\\n        for j in range(len(bst)):\\n            cst[mst[j]]=bst[j]\\n        return cst\\n\\n        \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2778716,
                "title": "javascript-easy-solution",
                "content": "var sortEvenOdd = function (nums) {\\nlet oddArr =[]\\nlet evenArr =[]\\nlet fianlArr =[]\\nfor(let j=0;j<nums.length;j++){\\n    \\n    if(j%2===0){\\n        evenArr.push(nums[j])\\n    }else{\\n        oddArr.push(nums[j])\\n    }\\n}\\n evenArr.sort((f, s) => f - s);\\n oddArr.sort((f, s) => s - f);\\n\\nfor(let i=0;i<nums.length/2;i++){\\nif (evenArr[i]) {\\nfianlArr.push(evenArr[i])\\n}\\nif (oddArr[i]) {\\n    fianlArr.push(oddArr[i])\\n}\\n\\n}\\nreturn fianlArr\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "var sortEvenOdd = function (nums) {\\nlet oddArr =[]\\nlet evenArr =[]\\nlet fianlArr =[]\\nfor(let j=0;j<nums.length;j++){\\n    \\n    if(j%2===0){\\n        evenArr.push(nums[j])\\n    }else{\\n        oddArr.push(nums[j])\\n    }\\n}\\n evenArr.sort((f, s) => f - s);\\n oddArr.sort((f, s) => s - f);\\n\\nfor(let i=0;i<nums.length/2;i++){\\nif (evenArr[i]) {\\nfianlArr.push(evenArr[i])\\n}\\nif (oddArr[i]) {\\n    fianlArr.push(oddArr[i])\\n}\\n\\n}\\nreturn fianlArr\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 2659716,
                "title": "java-arraylist-sorting-priority-queue",
                "content": "### **Please Upvote !!!**\\n##### Using ArrayList:\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        List<Integer> oddIdx = new ArrayList<>(),\\n        evenIdx = new ArrayList<>();\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) evenIdx.add(nums[i]);\\n            else oddIdx.add(nums[i]);\\n        }\\n\\n        Collections.sort(evenIdx);\\n        Collections.sort(oddIdx, (a, b) -> b - a);\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) nums[i] = evenIdx.remove(0);\\n            else nums[i] = oddIdx.remove(0);\\n        }\\n\\n        return nums;\\n    }\\n}\\n\\n// TC: 2 * (O(n) + O(n * logn)) => O(n * logn)\\n// SC: O(n)\\n```\\n##### 2. Using Priority Queue:\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        PriorityQueue<Integer> evenIdx = new PriorityQueue<>(),\\n        oddIdx = new PriorityQueue<>(Collections.reverseOrder());\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) evenIdx.offer(nums[i]);\\n            else oddIdx.offer(nums[i]);\\n        }\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) nums[i] = evenIdx.poll();\\n            else nums[i] = oddIdx.poll();\\n        }\\n\\n        return nums;\\n    }\\n}\\n\\n// TC: O(n * logn), SC: O(n)\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Sorting",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        List<Integer> oddIdx = new ArrayList<>(),\\n        evenIdx = new ArrayList<>();\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) evenIdx.add(nums[i]);\\n            else oddIdx.add(nums[i]);\\n        }\\n\\n        Collections.sort(evenIdx);\\n        Collections.sort(oddIdx, (a, b) -> b - a);\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) nums[i] = evenIdx.remove(0);\\n            else nums[i] = oddIdx.remove(0);\\n        }\\n\\n        return nums;\\n    }\\n}\\n\\n// TC: 2 * (O(n) + O(n * logn)) => O(n * logn)\\n// SC: O(n)\\n```\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        PriorityQueue<Integer> evenIdx = new PriorityQueue<>(),\\n        oddIdx = new PriorityQueue<>(Collections.reverseOrder());\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) evenIdx.offer(nums[i]);\\n            else oddIdx.offer(nums[i]);\\n        }\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) nums[i] = evenIdx.poll();\\n            else nums[i] = oddIdx.poll();\\n        }\\n\\n        return nums;\\n    }\\n}\\n\\n// TC: O(n * logn), SC: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2570834,
                "title": "go-negating-odd-index-elements-and-sorting",
                "content": "```\\nfunc sortEvenOdd(nums []int) []int {\\n\\tfor i := 1; i < len(nums); i += 2 {\\n\\t\\tnums[i] = -nums[i]\\n\\t}\\n\\n\\tsort.Slice(nums, func(i, j int) bool {\\n\\t\\treturn nums[i] < nums[j]\\n\\t})\\n\\n\\teven := 0\\n\\todd := 1\\n\\n\\tans := make([]int, len(nums))\\n\\n\\tfor i := 0; i < len(nums); i++ {\\n\\t\\tif nums[i] < 0 {\\n\\t\\t\\tans[odd] = -nums[i]\\n\\t\\t\\todd += 2\\n\\t\\t} else {\\n\\t\\t\\tans[even] = nums[i]\\n\\t\\t\\teven += 2\\n\\t\\t}\\n\\t}\\n\\n\\treturn ans\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc sortEvenOdd(nums []int) []int {\\n\\tfor i := 1; i < len(nums); i += 2 {\\n\\t\\tnums[i] = -nums[i]\\n\\t}\\n\\n\\tsort.Slice(nums, func(i, j int) bool {\\n\\t\\treturn nums[i] < nums[j]\\n\\t})\\n\\n\\teven := 0\\n\\todd := 1\\n\\n\\tans := make([]int, len(nums))\\n\\n\\tfor i := 0; i < len(nums); i++ {\\n\\t\\tif nums[i] < 0 {\\n\\t\\t\\tans[odd] = -nums[i]\\n\\t\\t\\todd += 2\\n\\t\\t} else {\\n\\t\\t\\tans[even] = nums[i]\\n\\t\\t\\teven += 2\\n\\t\\t}\\n\\t}\\n\\n\\treturn ans\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2547390,
                "title": "java-arraylist",
                "content": "class Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n        List<Integer> arr1=new ArrayList<>();\\n        List<Integer> arr2=new ArrayList<>();\\n        \\n        int index=0;\\n        \\n        for (int i = 0; i < nums.length; i+=2) {\\n            arr1.add(nums[i]);\\n        }\\n        \\n        for (int i = 1; i < nums.length; i+=2) {\\n            arr2.add(nums[i]);\\n        }\\n        \\n        Collections.sort(arr2,Collections.reverseOrder());\\n        Collections.sort(arr1);\\n        boolean b=false;\\n        \\n        for (int i = 0; i <nums.length ; i++) {\\n            if(!b){\\n                nums[i]=arr1.get(index);\\n                b=true;\\n            }else{\\n                nums[i]=arr2.get(index);\\n                b=false;\\n                index++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n",
                "solutionTags": [
                    "Array",
                    "Sorting"
                ],
                "code": "class Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n        List<Integer> arr1=new ArrayList<>();\\n        List<Integer> arr2=new ArrayList<>();\\n        \\n        int index=0;\\n        \\n        for (int i = 0; i < nums.length; i+=2) {\\n            arr1.add(nums[i]);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2540806,
                "title": "c-brute-force",
                "content": "\\tvector<int> sortEvenOdd(vector<int>& nums) {\\n        if(nums.size()<=2) return nums;\\n        \\n        int i = 0, j = 1;\\n        while(i<nums.size()-2 || j<nums.size()-2)\\n        {\\n            if(i<nums.size()-2 && nums[i]>nums[i+2]){\\n                swap(nums[i],nums[i+2]);\\n                i = 0;\\n            }\\n            else i = i + 2; \\n            if(j<nums.size()-2 && nums[j]<nums[j+2]){\\n                swap(nums[j],nums[j+2]);\\n                j = 1;\\n            }\\n            else j = j + 2;\\n        }\\n        return nums;\\n    }",
                "solutionTags": [],
                "code": "\\tvector<int> sortEvenOdd(vector<int>& nums) {\\n        if(nums.size()<=2) return nums;\\n        \\n        int i = 0, j = 1;\\n        while(i<nums.size()-2 || j<nums.size()-2)\\n        {\\n            if(i<nums.size()-2 && nums[i]>nums[i+2]){\\n                swap(nums[i],nums[i+2]);\\n                i = 0;\\n            }\\n            else i = i + 2; \\n            if(j<nums.size()-2 && nums[j]<nums[j+2]){\\n                swap(nums[j],nums[j+2]);\\n                j = 1;\\n            }\\n            else j = j + 2;\\n        }\\n        return nums;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2464567,
                "title": "java-clean-easy-to-follow-solution",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        if (nums.length < 3) return nums;\\n        List<Integer> atEvenIndices = new ArrayList();\\n        List<Integer> atOddIndices = new ArrayList();\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) {\\n                atEvenIndices.add(nums[i]);\\n            } else {\\n                atOddIndices.add(nums[i]);\\n            }\\n        }\\n        Collections.sort(atEvenIndices);\\n        Collections.sort(atOddIndices, (a, b) -> b - a);\\n        int even = 0, odd = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) {\\n                nums[i] = atEvenIndices.get(even++);\\n            } else {\\n                nums[i] = atOddIndices.get(odd++);\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        if (nums.length < 3) return nums;\\n        List<Integer> atEvenIndices = new ArrayList();\\n        List<Integer> atOddIndices = new ArrayList();\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) {\\n                atEvenIndices.add(nums[i]);\\n            } else {\\n                atOddIndices.add(nums[i]);\\n            }\\n        }\\n        Collections.sort(atEvenIndices);\\n        Collections.sort(atOddIndices, (a, b) -> b - a);\\n        int even = 0, odd = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) {\\n                nums[i] = atEvenIndices.get(even++);\\n            } else {\\n                nums[i] = atOddIndices.get(odd++);\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2457468,
                "title": "java-solution-easy-to-understand-using-collections",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] arr) {\\n        if (arr.length <= 2) return arr;\\n        \\n        int[] ans = new int[arr.length];\\n        List<Integer> left = new ArrayList<>(), right = new ArrayList<>();\\n\\n        for (int i = 0; i < arr.length; i++) {\\n            if (i % 2 == 0) left.add(arr[i]);\\n            else right.add(arr[i]);\\n        }\\n        \\n        Collections.sort(left);\\n        Collections.sort(right);\\n        Collections.reverse(right);\\n        \\n        int x = 0, y = 0;\\n        for (int i = 0; i < ans.length; i++) {\\n            if (i % 2 == 0) ans[i] = left.get(x++);\\n            else ans[i] = right.get(y++);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] arr) {\\n        if (arr.length <= 2) return arr;\\n        \\n        int[] ans = new int[arr.length];\\n        List<Integer> left = new ArrayList<>(), right = new ArrayList<>();\\n\\n        for (int i = 0; i < arr.length; i++) {\\n            if (i % 2 == 0) left.add(arr[i]);\\n            else right.add(arr[i]);\\n        }\\n        \\n        Collections.sort(left);\\n        Collections.sort(right);\\n        Collections.reverse(right);\\n        \\n        int x = 0, y = 0;\\n        for (int i = 0; i < ans.length; i++) {\\n            if (i % 2 == 0) ans[i] = left.get(x++);\\n            else ans[i] = right.get(y++);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2456567,
                "title": "python-solution",
                "content": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        s = len(nums)\\n        even = nums[0:s:2]\\n        even.sort()\\n        odd = nums[1:s:2]\\n        odd.sort(reverse=True)\\n        return ([even[i//2] if i % 2 == 0 else odd[i//2] for i in range(s)])\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        s = len(nums)\\n        even = nums[0:s:2]\\n        even.sort()\\n        odd = nums[1:s:2]\\n        odd.sort(reverse=True)\\n        return ([even[i//2] if i % 2 == 0 else odd[i//2] for i in range(s)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2423654,
                "title": "javascript",
                "content": "```\\nconst sortEvenOdd = (nums) => {\\n\\tlet odd = nums.filter((el, i) => i % 2 !== 0).sort((a, b) => b - a);\\n\\n\\tlet even = nums.filter((el, i) => i % 2 === 0).sort((a, b) => a - b);\\n\\n\\tconsole.log(odd, even);\\n\\n\\tlet j = 0;\\n\\tlet result = [];\\n\\tfor (let i = 0; i < nums.length; i++) {\\n\\t\\tif (i > 0 && i % 2 == 0) j++;\\n\\t\\ti % 2 === 0 ? result.push(even[j]) : result.push(odd[j]);\\n\\t}\\n\\n\\treturn result;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nconst sortEvenOdd = (nums) => {\\n\\tlet odd = nums.filter((el, i) => i % 2 !== 0).sort((a, b) => b - a);\\n\\n\\tlet even = nums.filter((el, i) => i % 2 === 0).sort((a, b) => a - b);\\n\\n\\tconsole.log(odd, even);\\n\\n\\tlet j = 0;\\n\\tlet result = [];\\n\\tfor (let i = 0; i < nums.length; i++) {\\n\\t\\tif (i > 0 && i % 2 == 0) j++;\\n\\t\\ti % 2 === 0 ? result.push(even[j]) : result.push(odd[j]);\\n\\t}\\n\\n\\treturn result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2399548,
                "title": "beginner-friendly-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n= nums.size();\\n        vector<int> temp1;\\n        vector<int> temp2;\\n        vector<int> ans;\\n        if(n<=2){\\n            return nums;\\n        }\\n        for(int i=0;i<n;i++){\\n            if(i%2!=0){                  //odd index\\n                temp1.push_back(nums[i]);\\n            }\\n            else{                       //even index\\n                temp2.push_back(nums[i]);   \\n            }\\n        }\\n        sort(temp1.begin(),temp1.end(),greater<int>());    //decreasing order\\n        sort(temp2.begin(),temp2.end());   // increasing order\\n        for(int i=0;i<temp1.size();i++){\\n            ans.push_back(temp2[i]);\\n            ans.push_back(temp1[i]);\\n            \\n        }\\n        if(temp1.size()>temp2.size()){\\n            ans.push_back(temp1[temp1.size()-1]);\\n        }\\n         if(temp1.size()<temp2.size()){\\n            ans.push_back(temp2[temp2.size()-1]);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n= nums.size();\\n        vector<int> temp1;\\n        vector<int> temp2;\\n        vector<int> ans;\\n        if(n<=2){\\n            return nums;\\n        }\\n        for(int i=0;i<n;i++){\\n            if(i%2!=0){                  //odd index\\n                temp1.push_back(nums[i]);\\n            }\\n            else{                       //even index\\n                temp2.push_back(nums[i]);   \\n            }\\n        }\\n        sort(temp1.begin(),temp1.end(),greater<int>());    //decreasing order\\n        sort(temp2.begin(),temp2.end());   // increasing order\\n        for(int i=0;i<temp1.size();i++){\\n            ans.push_back(temp2[i]);\\n            ans.push_back(temp1[i]);\\n            \\n        }\\n        if(temp1.size()>temp2.size()){\\n            ans.push_back(temp1[temp1.size()-1]);\\n        }\\n         if(temp1.size()<temp2.size()){\\n            ans.push_back(temp2[temp2.size()-1]);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2356389,
                "title": "java-solution-o-nlogn-5ms-fast-80",
                "content": "Up if you like it \\n\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int[] odd = new int[nums.length / 2 + nums.length % 2];\\n        int[] even = new int[nums.length / 2 + nums.length % 2];\\n        for (int i = 0; i < nums.length; ++i) {\\n            if (i % 2 == 0) {\\n                even[i / 2] = nums[i];\\n            } else {\\n                odd[i / 2] = nums[i];\\n            }\\n        }\\n        Arrays.sort(odd);\\n        Arrays.sort(even);\\n        for (int i = 0; i < nums.length; ++i) {\\n            if (i % 2 == 0) {\\n                nums[i] = even[i / 2];\\n            } else {\\n                nums[i] = odd[odd.length - 1 - i / 2];\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int[] odd = new int[nums.length / 2 + nums.length % 2];\\n        int[] even = new int[nums.length / 2 + nums.length % 2];\\n        for (int i = 0; i < nums.length; ++i) {\\n            if (i % 2 == 0) {\\n                even[i / 2] = nums[i];\\n            } else {\\n                odd[i / 2] = nums[i];\\n            }\\n        }\\n        Arrays.sort(odd);\\n        Arrays.sort(even);\\n        for (int i = 0; i < nums.length; ++i) {\\n            if (i % 2 == 0) {\\n                nums[i] = even[i / 2];\\n            } else {\\n                nums[i] = odd[odd.length - 1 - i / 2];\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2335670,
                "title": "java-easy-100-faster-1-ms",
                "content": "```\\n public int[] sortEvenOdd(int[] nums) {\\n        int oddArr[] = new int[101];\\n        int evenArr[] = new int[101];\\n        for (int i = 0; i < nums.length; i++) {\\n           if((i&1)==0)\\n               evenArr[nums[i]]++;\\n           else\\n               oddArr[nums[i]]++;\\n        }\\n\\n        //sort even indexes\\n        for (int i = 1, j = 0; i <= 100; i++) {\\n            while (evenArr[i] > 0) {\\n                nums[j] = i;\\n                j += 2;\\n                evenArr[i]--;\\n            }\\n        }\\n\\n        //sort odd indexes\\n        for (int i = 100, j = 1; i > 0; i--) {\\n            while (oddArr[i] > 0) {\\n                nums[j] = i;\\n                j += 2;\\n                oddArr[i]--;\\n            }\\n        }\\n        return nums;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n public int[] sortEvenOdd(int[] nums) {\\n        int oddArr[] = new int[101];\\n        int evenArr[] = new int[101];\\n        for (int i = 0; i < nums.length; i++) {\\n           if((i&1)==0)\\n               evenArr[nums[i]]++;\\n           else\\n               oddArr[nums[i]]++;\\n        }\\n\\n        //sort even indexes\\n        for (int i = 1, j = 0; i <= 100; i++) {\\n            while (evenArr[i] > 0) {\\n                nums[j] = i;\\n                j += 2;\\n                evenArr[i]--;\\n            }\\n        }\\n\\n        //sort odd indexes\\n        for (int i = 100, j = 1; i > 0; i--) {\\n            while (oddArr[i] > 0) {\\n                nums[j] = i;\\n                j += 2;\\n                oddArr[i]--;\\n            }\\n        }\\n        return nums;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2280672,
                "title": "python-easy-quick-sort-approach",
                "content": "\\tclass Solution:\\n\\t\\tdef sortEvenOdd(self, arr: List[int]) -> List[int]:\\n\\t\\t\\tdef quick(arr,low,high):\\n\\t\\t\\t\\tif low>=high:\\n\\t\\t\\t\\t\\treturn\\n\\n\\t\\t\\t\\ts=low\\n\\t\\t\\t\\te=high\\n\\n\\t\\t\\t\\tpivot=arr[s]\\n\\n\\t\\t\\t\\twhile s<=e:\\n\\t\\t\\t\\t\\twhile arr[s]>pivot:\\n\\t\\t\\t\\t\\t\\ts+=2\\n\\t\\t\\t\\t\\twhile arr[e]<pivot:\\n\\t\\t\\t\\t\\t\\te-=2\\n\\t\\t\\t\\t\\tif s<=e:\\n\\t\\t\\t\\t\\t\\tarr[s],arr[e]=arr[e],arr[s]\\n\\t\\t\\t\\t\\t\\ts+=2\\n\\t\\t\\t\\t\\t\\te-=2\\n\\n\\t\\t\\t\\tquick(arr,low,e)\\n\\t\\t\\t\\tquick(arr,s,high)\\n\\t\\t\\tdef quick2(arr,low,high):\\n\\t\\t\\t\\tif low>=high:\\n\\t\\t\\t\\t\\treturn\\n\\n\\t\\t\\t\\ts=low\\n\\t\\t\\t\\te=high\\n\\n\\t\\t\\t\\tpivot=arr[s]\\n\\n\\t\\t\\t\\twhile s<=e:\\n\\t\\t\\t\\t\\twhile arr[s]<pivot:\\n\\t\\t\\t\\t\\t\\ts+=2\\n\\t\\t\\t\\t\\twhile arr[e]>pivot:\\n\\t\\t\\t\\t\\t\\te-=2\\n\\t\\t\\t\\t\\tif s<=e:\\n\\t\\t\\t\\t\\t\\tarr[s],arr[e]=arr[e],arr[s]\\n\\t\\t\\t\\t\\t\\ts+=2\\n\\t\\t\\t\\t\\t\\te-=2\\n\\n\\t\\t\\t\\tquick2(arr,low,e)\\n\\t\\t\\t\\tquick2(arr,s,high)\\n\\t\\t\\tif (len(arr)-1)%2!=0:\\n\\t\\t\\t\\tquick2(arr,0,len(arr)-2)\\n\\t\\t\\t\\tquick(arr,1,len(arr)-1)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tquick2(arr,0,len(arr)-1)\\n\\t\\t\\t\\tquick(arr,1,len(arr)-2)\\n\\t\\t\\treturn arr\\n",
                "solutionTags": [
                    "Sorting"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef sortEvenOdd(self, arr: List[int]) -> List[int]:\\n\\t\\t\\tdef quick(arr,low,high):\\n\\t\\t\\t\\tif low>=high:\\n\\t\\t\\t\\t\\treturn\\n\\n\\t\\t\\t\\ts=low\\n\\t\\t\\t\\te=high\\n\\n\\t\\t\\t\\tpivot=arr[s]\\n\\n\\t\\t\\t\\twhile s<=e:\\n\\t\\t\\t\\t\\twhile arr[s]>pivot:\\n\\t\\t\\t\\t\\t\\ts+=2\\n\\t\\t\\t\\t\\twhile arr[e]<pivot:\\n\\t\\t\\t\\t\\t\\te-=2\\n\\t\\t\\t\\t\\tif s<=e:\\n\\t\\t\\t\\t\\t\\tarr[s],arr[e]=arr[e],arr[s]\\n\\t\\t\\t\\t\\t\\ts+=2\\n\\t\\t\\t\\t\\t\\te-=2\\n\\n\\t\\t\\t\\tquick(arr,low,e)\\n\\t\\t\\t\\tquick(arr,s,high)\\n\\t\\t\\tdef quick2(arr,low,high):\\n\\t\\t\\t\\tif low>=high:\\n\\t\\t\\t\\t\\treturn\\n\\n\\t\\t\\t\\ts=low\\n\\t\\t\\t\\te=high\\n\\n\\t\\t\\t\\tpivot=arr[s]\\n\\n\\t\\t\\t\\twhile s<=e:\\n\\t\\t\\t\\t\\twhile arr[s]<pivot:\\n\\t\\t\\t\\t\\t\\ts+=2\\n\\t\\t\\t\\t\\twhile arr[e]>pivot:\\n\\t\\t\\t\\t\\t\\te-=2\\n\\t\\t\\t\\t\\tif s<=e:\\n\\t\\t\\t\\t\\t\\tarr[s],arr[e]=arr[e],arr[s]\\n\\t\\t\\t\\t\\t\\ts+=2\\n\\t\\t\\t\\t\\t\\te-=2\\n\\n\\t\\t\\t\\tquick2(arr,low,e)\\n\\t\\t\\t\\tquick2(arr,s,high)\\n\\t\\t\\tif (len(arr)-1)%2!=0:\\n\\t\\t\\t\\tquick2(arr,0,len(arr)-2)\\n\\t\\t\\t\\tquick(arr,1,len(arr)-1)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tquick2(arr,0,len(arr)-1)\\n\\t\\t\\t\\tquick(arr,1,len(arr)-2)\\n\\t\\t\\treturn arr\\n",
                "codeTag": "Java"
            },
            {
                "id": 2251343,
                "title": "split-sort-combine-o-n",
                "content": "Intuition : Extract the odd indexed elements to a list and even indexed elements to another list.Sort the list as needed and combine the two lists to a single final list.\\n\\n```\\nclass Solution(object):\\n    def sortEvenOdd(self, nums):\\n        odd = []\\n        even = []\\n        final = []\\n\\t\\t\\n\\t\\t#split\\n        for i in range(len(nums)):\\n            if i%2 == 0:\\n                even.append(nums[i])\\n            else:\\n                odd.append(nums[i])\\n\\t\\t#sort\\n        even = sorted(even)\\n        odd = sorted(odd,reverse = True)\\n        pos = 0\\n\\t\\t\\n\\t\\t#combine\\n        while(True):\\n            if pos<len(even):\\n                final.append(even[pos])\\n            if pos<len(odd):\\n                final.append(odd[pos])\\n            pos+=1\\n            if pos == max(len(even),len(odd)):\\n                break\\n\\t\\t\\t\\t\\n        return final\\n                \\n            \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sortEvenOdd(self, nums):\\n        odd = []\\n        even = []\\n        final = []\\n\\t\\t\\n\\t\\t#split\\n        for i in range(len(nums)):\\n            if i%2 == 0:\\n                even.append(nums[i])\\n            else:\\n                odd.append(nums[i])\\n\\t\\t#sort\\n        even = sorted(even)\\n        odd = sorted(odd,reverse = True)\\n        pos = 0\\n\\t\\t\\n\\t\\t#combine\\n        while(True):\\n            if pos<len(even):\\n                final.append(even[pos])\\n            if pos<len(odd):\\n                final.append(odd[pos])\\n            pos+=1\\n            if pos == max(len(even),len(odd)):\\n                break\\n\\t\\t\\t\\t\\n        return final\\n                \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2135677,
                "title": "using-arraylist",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        List<Integer> list1=new ArrayList<Integer>();\\n        List<Integer> list2=new ArrayList<Integer>();\\n        for(int i=0; i<nums.length; i++)\\n        {\\n            if(i%2==0)\\n            {\\n                list1.add(nums[i]);\\n            }\\n            else\\n            {\\n                list2.add(nums[i]);\\n            }\\n        }\\n        Collections.sort(list1);\\n        Collections.sort(list2);\\n        Collections.reverse(list2);\\n        int m=0;\\n        int n=0;\\n        int[] a=new int[nums.length];\\n        for(int j=0; j<a.length; j++)\\n        {\\n            if(j%2==0)\\n            {\\n                a[j]=list1.get(m++);\\n            }\\n            else\\n            {\\n                a[j]=list2.get(n++);\\n            }\\n        }\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        List<Integer> list1=new ArrayList<Integer>();\\n        List<Integer> list2=new ArrayList<Integer>();\\n        for(int i=0; i<nums.length; i++)\\n        {\\n            if(i%2==0)\\n            {\\n                list1.add(nums[i]);\\n            }\\n            else\\n            {\\n                list2.add(nums[i]);\\n            }\\n        }\\n        Collections.sort(list1);\\n        Collections.sort(list2);\\n        Collections.reverse(list2);\\n        int m=0;\\n        int n=0;\\n        int[] a=new int[nums.length];\\n        for(int j=0; j<a.length; j++)\\n        {\\n            if(j%2==0)\\n            {\\n                a[j]=list1.get(m++);\\n            }\\n            else\\n            {\\n                a[j]=list2.get(n++);\\n            }\\n        }\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2098717,
                "title": "java-runtime-3ms-time-complexity-o-n-x-n-space-complexity-o-1",
                "content": "```\\n/*\\nLogic: Use bubble sort at even and odd index separately.\\n\\nTo understand the code properly, dry run the code\\nin your notebook for the input:\\nnums = [4,1,2,3]\\n*/\\n\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int i = 0, j = 1, m = 2, n = 3 ;\\n        \\n        while (i < nums.length || j < nums.length) {\\n            m = i+2 ;\\n            n = j+2 ;\\n            \\n            while (m < nums.length) {\\n                if (nums[m] >= nums[i]) {\\n                    m += 2 ;\\n                }\\n                else {\\n                    int temp = nums[i] ;\\n                    nums[i] = nums[m] ;\\n                    nums[m] = temp ;\\n                }\\n            }\\n            \\n            while (n < nums.length) {\\n                if (nums[n] <= nums[j]) {\\n                    n += 2 ;\\n                }\\n                else {\\n                    int temp = nums[j] ;\\n                    nums[j] = nums[n] ;\\n                    nums[n] = temp ;\\n                }\\n            }\\n            \\n            i += 2 ;\\n            j += 2 ;\\n        }\\n        \\n        return nums ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\n/*\\nLogic: Use bubble sort at even and odd index separately.\\n\\nTo understand the code properly, dry run the code\\nin your notebook for the input:\\nnums = [4,1,2,3]\\n*/\\n\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int i = 0, j = 1, m = 2, n = 3 ;\\n        \\n        while (i < nums.length || j < nums.length) {\\n            m = i+2 ;\\n            n = j+2 ;\\n            \\n            while (m < nums.length) {\\n                if (nums[m] >= nums[i]) {\\n                    m += 2 ;\\n                }\\n                else {\\n                    int temp = nums[i] ;\\n                    nums[i] = nums[m] ;\\n                    nums[m] = temp ;\\n                }\\n            }\\n            \\n            while (n < nums.length) {\\n                if (nums[n] <= nums[j]) {\\n                    n += 2 ;\\n                }\\n                else {\\n                    int temp = nums[j] ;\\n                    nums[j] = nums[n] ;\\n                    nums[n] = temp ;\\n                }\\n            }\\n            \\n            i += 2 ;\\n            j += 2 ;\\n        }\\n        \\n        return nums ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2042805,
                "title": "c-11ms-and-12mb-easy-and-beginner-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n =nums.size();\\n        vector<int> p;\\n        int k=1;\\n        vector<int>a(n,0);\\n        for(int i=1;i<n;i=i+2){\\n           p.push_back(nums[i]);\\n        }\\n        sort(p.begin(),p.end());\\n           for(int i=p.size()-1;i>=0;i--){\\n                a[k]=p[i];\\n               k=k+2;\\n           } \\n        p.clear();\\n         for(int i=0;i<n;i=i+2){\\n           p.push_back(nums[i]);\\n        }\\n        sort(p.begin(),p.end());\\n        k=0;\\n           for(int i=0;i<p.size();i++){\\n                a[k]=p[i];\\n               k=k+2;\\n           } \\n        return a;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n =nums.size();\\n        vector<int> p;\\n        int k=1;\\n        vector<int>a(n,0);\\n        for(int i=1;i<n;i=i+2){\\n           p.push_back(nums[i]);\\n        }\\n        sort(p.begin(),p.end());\\n           for(int i=p.size()-1;i>=0;i--){\\n                a[k]=p[i];\\n               k=k+2;\\n           } \\n        p.clear();\\n         for(int i=0;i<n;i=i+2){\\n           p.push_back(nums[i]);\\n        }\\n        sort(p.begin(),p.end());\\n        k=0;\\n           for(int i=0;i<p.size();i++){\\n                a[k]=p[i];\\n               k=k+2;\\n           } \\n        return a;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2040842,
                "title": "faster-than-53-memory-less-than-98-java-easy-implementation",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        ArrayList<Integer> evenList = new ArrayList<>();\\n        ArrayList<Integer> oddList = new ArrayList<>();\\n        \\n        for(int i=0 ; i<nums.length ; i++){\\n            if(i%2==0){\\n                evenList.add(nums[i]);\\n            }\\n            else{\\n                oddList.add(nums[i]);\\n            }\\n        }\\n        \\n        Collections.sort(evenList);\\n        Collections.sort(oddList, Collections.reverseOrder());\\n        \\n        int size = evenList.size() + oddList.size();\\n        \\n        int i=0;\\n        int j=0;\\n        int k=0;\\n        int[] ans = new int[size];\\n        while(i<size){\\n            if(i%2==0){\\n                ans[i]=evenList.get(j);\\n                j++;\\n            }\\n            else{\\n                ans[i]=oddList.get(k);\\n                k++;\\n            }\\n            i++;\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        ArrayList<Integer> evenList = new ArrayList<>();\\n        ArrayList<Integer> oddList = new ArrayList<>();\\n        \\n        for(int i=0 ; i<nums.length ; i++){\\n            if(i%2==0){\\n                evenList.add(nums[i]);\\n            }\\n            else{\\n                oddList.add(nums[i]);\\n            }\\n        }\\n        \\n        Collections.sort(evenList);\\n        Collections.sort(oddList, Collections.reverseOrder());\\n        \\n        int size = evenList.size() + oddList.size();\\n        \\n        int i=0;\\n        int j=0;\\n        int k=0;\\n        int[] ans = new int[size];\\n        while(i<size){\\n            if(i%2==0){\\n                ans[i]=evenList.get(j);\\n                j++;\\n            }\\n            else{\\n                ans[i]=oddList.get(k);\\n                k++;\\n            }\\n            i++;\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2040789,
                "title": "c-beginner-friendly-solution",
                "content": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> even;\\n        vector<int> odd;\\n        int len = nums.size();\\n        for(int i=0; i<len; i++){\\n            if(i%2 == 0){\\n                even.push_back(nums[i]);\\n            }\\n            else{\\n                odd.push_back(nums[i]);\\n            }\\n        }\\n        sort(odd.rbegin(),odd.rend());\\n        sort(even.begin(),even.end());\\n        \\n        int idx1=0,idx2=0;\\n        for(int i=0; i<len; i++){\\n            if(i%2 == 0){\\n                nums[i] = even[idx2++];\\n            }\\n            else{\\n                nums[i] = odd[idx1++];\\n            }\\n        }\\n        return nums;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> even;\\n        vector<int> odd;\\n        int len = nums.size();\\n        for(int i=0; i<len; i++){\\n            if(i%2 == 0){\\n                even.push_back(nums[i]);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2025422,
                "title": "java-solution-with-one-arraylist",
                "content": "Focus on modularity.\\nIn such question, the interviewer wants to see how you can extract common code out and promote code reusability. \\nAlways write like you are writing production code.\\nIf not modular, it is going to bite back you and your team.\\n\\n```\\npublic int[] sortEvenOdd(int[] nums) {\\n\\tList<Integer> ls = new ArrayList<>();\\n\\tsort(ls, nums, 0);\\n\\tsort(ls, nums, 1);\\n\\treturn nums;\\n}\\n\\nprivate void sort(List<Integer> ls, int[] nums, int start) {\\n\\tls.clear();\\n\\tfor (int i=start; i<nums.length; i+=2) {\\n\\t\\tls.add(nums[i]);\\n\\t}\\n\\tif (start == 0) {\\n\\t\\tCollections.sort(ls);\\n\\t} else {\\n\\t\\tCollections.sort(ls, Collections.reverseOrder());\\n\\t}\\n\\tint j = 0;\\n\\tfor (int i=start; i<nums.length; i+=2) {\\n\\t\\tnums[i] = ls.get(j++);\\n\\t}\\n}\\n```\\n\\nTC : O(NlogN)\\nSC : O(N)\\n\\nHope this helps \\uD83D\\uDE0A. Spread love \\uD83E\\uDDE1 ... there is already so much hatred out there!",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int[] sortEvenOdd(int[] nums) {\\n\\tList<Integer> ls = new ArrayList<>();\\n\\tsort(ls, nums, 0);\\n\\tsort(ls, nums, 1);\\n\\treturn nums;\\n}\\n\\nprivate void sort(List<Integer> ls, int[] nums, int start) {\\n\\tls.clear();\\n\\tfor (int i=start; i<nums.length; i+=2) {\\n\\t\\tls.add(nums[i]);\\n\\t}\\n\\tif (start == 0) {\\n\\t\\tCollections.sort(ls);\\n\\t} else {\\n\\t\\tCollections.sort(ls, Collections.reverseOrder());\\n\\t}\\n\\tint j = 0;\\n\\tfor (int i=start; i<nums.length; i+=2) {\\n\\t\\tnums[i] = ls.get(j++);\\n\\t}\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2005175,
                "title": "easy-to-understand-java-solution",
                "content": "As per description,\\nTo sort the element at **even** indices in **increasing-order**, simply add the even indices elements in the **Min_PriorityQueue** or can say Min_Heap.\\nTo sort the element at **odd** indices in **non increasing-order**, simply add the odd indices elements in the **Max_PriorityQueue** or can say Max_Heap.\\nAfter that move the elements back to **original** array from Min_PriorityQueue and Max_PriorityQueue to even indices and odd indices respectively.\\nthen return the **Original** array.\\n\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        PriorityQueue<Integer> evenIndices=new PriorityQueue<>();\\n        PriorityQueue<Integer> oddIndices=new PriorityQueue<>(Collections.reverseOrder());\\n        int length=nums.length;\\n        for(int i=0;i<length;i+=2){\\n            evenIndices.add(nums[i]);\\n        }\\n        for(int i=1;i<length;i+=2){\\n            oddIndices.add(nums[i]);\\n        }\\n        for(int i=0;i<length;i+=2){\\n            nums[i]=evenIndices.remove();\\n        }\\n        for(int i=1;i<length;i+=2){\\n            nums[i]=oddIndices.remove();\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        PriorityQueue<Integer> evenIndices=new PriorityQueue<>();\\n        PriorityQueue<Integer> oddIndices=new PriorityQueue<>(Collections.reverseOrder());\\n        int length=nums.length;\\n        for(int i=0;i<length;i+=2){\\n            evenIndices.add(nums[i]);\\n        }\\n        for(int i=1;i<length;i+=2){\\n            oddIndices.add(nums[i]);\\n        }\\n        for(int i=0;i<length;i+=2){\\n            nums[i]=evenIndices.remove();\\n        }\\n        for(int i=1;i<length;i+=2){\\n            nums[i]=oddIndices.remove();\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2002828,
                "title": "c-shell-sort-o-1-space-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int gap = 2;\\n        for(int i=gap; i<nums.size(); i+=2)             //Shell Sort on even indexes\\n        {\\n            int temp = nums[i];\\n            int j = i;\\n            \\n            while(j - gap >=0 && nums[j-gap] > temp)\\n            {\\n                nums[j] = nums[j - gap];\\n                j -= gap;\\n            }\\n            nums[j] = temp;\\n        }\\n        \\n        for(int i=3; i<nums.size(); i+=2)`          //Shell Sort on odd indexes\\n        {\\n            int temp = nums[i];\\n            int j = i;\\n            \\n            while(j - gap >=0 && nums[j-gap] < temp)\\n            {\\n                nums[j] = nums[j - gap];\\n                j -= gap;\\n            }\\n            nums[j] = temp;\\n        }\\n        \\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int gap = 2;\\n        for(int i=gap; i<nums.size(); i+=2)             //Shell Sort on even indexes\\n        {\\n            int temp = nums[i];\\n            int j = i;\\n            \\n            while(j - gap >=0 && nums[j-gap] > temp)\\n            {\\n                nums[j] = nums[j - gap];\\n                j -= gap;\\n            }\\n            nums[j] = temp;\\n        }\\n        \\n        for(int i=3; i<nums.size(); i+=2)`          //Shell Sort on odd indexes\\n        {\\n            int temp = nums[i];\\n            int j = i;\\n            \\n            while(j - gap >=0 && nums[j-gap] < temp)\\n            {\\n                nums[j] = nums[j - gap];\\n                j -= gap;\\n            }\\n            nums[j] = temp;\\n        }\\n        \\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2002363,
                "title": "easy-peasy-approach",
                "content": "class Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n    \\n        for(int i=1;i<nums.length;i=i+2)\\n        {\\n            for(int j=1;j<nums.length-2;j=j+2)\\n            {\\n               if(nums[j]<nums[j+2])\\n               {\\n                   int temp= nums[j];\\n                   nums[j]=nums[j+2];\\n                   nums[j+2]=temp;\\n               }\\n            }\\n        }\\n        \\n         for(int i=0;i<nums.length;i=i+2)\\n        {\\n            for(int j=0;j<nums.length-2;j=j+2)\\n            {\\n               if(nums[j]>nums[j+2])\\n               {\\n                   int temp= nums[j];\\n                   nums[j] =nums[j+2];\\n                   nums[j+2]=temp;\\n               }\\n            }\\n        }\\n            return nums;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n    \\n        for(int i=1;i<nums.length;i=i+2)\\n        {\\n            for(int j=1;j<nums.length-2;j=j+2)\\n            {\\n               if(nums[j]<nums[j+2])\\n               {\\n                   int temp= nums[j];\\n                   nums[j]=nums[j+2];\\n                   nums[j+2]=temp;\\n               }",
                "codeTag": "Java"
            },
            {
                "id": 2001828,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] n) {\\n        ArrayList<Integer> nm=new ArrayList<>();\\n        int k=n.length;\\n        for(int i=0;i<k;i+=2)\\n        {\\n            nm.add(n[i]);\\n        }\\n        Collections.sort(nm);\\n        int j=0;\\n        for(int i=0;i<k;i+=2)\\n        {\\n            n[i]=nm.get(j++);\\n        }\\n        nm.clear();\\n        for(int i=1;i<k;i+=2)\\n        {\\n            nm.add(n[i]);\\n        }\\n        Collections.sort(nm,Collections.reverseOrder());\\n        j=0;\\n        for(int i=1;i<k;i+=2)\\n        {\\n            n[i]=nm.get(j++);\\n        }\\n        return n;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Sorting"
                ],
                "code": "class Solution {\\n    public int[] sortEvenOdd(int[] n) {\\n        ArrayList<Integer> nm=new ArrayList<>();\\n        int k=n.length;\\n        for(int i=0;i<k;i+=2)\\n        {\\n            nm.add(n[i]);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1997910,
                "title": "java-simple-and-easy-solution-o-n-2-time-and-o-1-space",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n        for (int i = 0; i < nums.length; i++) {\\n            for (int j = 0; j < nums.length-2; j++) {\\n                \\n                if (j%2 == 0) {\\n                    if (nums[j] > nums[j+2]) {\\n                        int temp = nums[j];\\n                        nums[j] = nums[j+2];\\n                        nums[j+2] = temp;\\n                    }\\n                } else {\\n                    if (nums[j] < nums[j+2]) {\\n                        int temp = nums[j];\\n                        nums[j] = nums[j+2];\\n                        nums[j+2] = temp;\\n                    }\\n                }\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n        for (int i = 0; i < nums.length; i++) {\\n            for (int j = 0; j < nums.length-2; j++) {\\n                \\n                if (j%2 == 0) {\\n                    if (nums[j] > nums[j+2]) {\\n                        int temp = nums[j];\\n                        nums[j] = nums[j+2];\\n                        nums[j+2] = temp;\\n                    }\\n                } else {\\n                    if (nums[j] < nums[j+2]) {\\n                        int temp = nums[j];\\n                        nums[j] = nums[j+2];\\n                        nums[j+2] = temp;\\n                    }\\n                }\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1947655,
                "title": "beginner-friendly-python3-faster-than-90-49",
                "content": "class Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        \\n        # idea 1: sort two lists separately then combine it\\n        \\n        even = sorted([nums[i] for i in range(0, len(nums), 2)])\\n        odd = sorted([nums[i] for i in range(1, len(nums), 2)], reverse=1)\\n                \\n        l = [0] * len(nums)\\n        \\n        for i,j in zip(range(0, len(nums), 2), range(len(even))):\\n            l[i] = even[j]\\n            \\n        for i,j in zip(range(1, len(nums), 2), range(len(odd))):\\n            l[i] = odd[j]\\n            \\n        return l",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        \\n        # idea 1: sort two lists separately then combine it\\n        \\n        even = sorted([nums[i] for i in range(0, len(nums), 2)])\\n        odd = sorted([nums[i] for i in range(1, len(nums), 2)], reverse=1)\\n                \\n        l = [0] * len(nums)\\n        \\n        for i,j in zip(range(0, len(nums), 2), range(len(even))):\\n            l[i] = even[j]\\n            \\n        for i,j in zip(range(1, len(nums), 2), range(len(odd))):\\n            l[i] = odd[j]\\n            \\n        return l",
                "codeTag": "Java"
            },
            {
                "id": 1933615,
                "title": "c-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        for(int i=0;i<nums.size();i++){\\n            for(int j=i+1;j<nums.size();j++){\\n                if(nums[i]>nums[j] && i%2==0 && j%2==0){\\n                    swap(nums[i],nums[j]);\\n                }else if(nums[i]<nums[j] && i%2!=0 && j%2!=0){\\n                    swap(nums[i],nums[j]);\\n                }\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        for(int i=0;i<nums.size();i++){\\n            for(int j=i+1;j<nums.size();j++){\\n                if(nums[i]>nums[j] && i%2==0 && j%2==0){\\n                    swap(nums[i],nums[j]);\\n                }else if(nums[i]<nums[j] && i%2!=0 && j%2!=0){\\n                    swap(nums[i],nums[j]);\\n                }\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1881676,
                "title": "java-solution-with-comment-and-pseudocode",
                "content": "This question is very straightforward, but I got confused with the non-increasing and non-decreasing order terminology. Wishing to see more clear questions.\\n\\n My Approch : \\n1- We need two ArrayList or even two arrays. Make sure to have their size half the input array size.\\nThe issues with the array, we need to specify the size of the array, and we need to keep track of indices.\\n2-  Sort the array or ArrayList depending on what you used in the first step.\\n\\n3- For Odd indices starting from the last element in the list since required to sort the odd in non-decreasing order.\\n4- for the even indices, get the  first element in the sorted list\\n\\n```\\npublic int[] sortEvenOdd(int[] nums) {\\n      \\n        int len=nums.length;\\n        int half=len/2;\\n        List<Integer> odd=new ArrayList<>();\\n        List<Integer> even=new ArrayList<>();\\n        // Check if the length of the input array is less than 2,no need to do anything\\n         if(len<=2)\\n             return nums;\\n         // seprate the odd from even indices and insert then into even arrayList\\n        \\n         for(int i=0; i<len;i++){\\n             if(i%2==0){\\n               even.add(nums[i]);\\n       \\n             }\\n             else{\\n                odd.add(nums[i]);\\n             \\n             }\\n         } \\n         // sort the value at even indices in normal ordering\\n         Collections.sort(even);\\n         /* \\n           instead of sort and reverse the list. I sort and then started from\\n           last element in the odd list using the formula of sizeof oddlist-i\\n           i start from zero\\n           let say the size of odd list=2 , subtract 1 \\n           1-0 =1 so the last element is located at index 1 in arraylist of size 2 \\n           \\n         */ \\n         Collections.sort(odd);\\n        \\n             int evenInx=0;\\n             int oddInx=0;\\n             int oddSize=odd.size()-1;\\n             \\n            for(int j=0; j<len;j++){\\n                if(j%2==0)\\n                 nums[j]=even.get(evenInx++);\\n             else\\n                 //start from last index \\n                nums[j]=odd.get(oddSize-oddInx++);    \\n             }   \\n        return nums;\\n        \\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int[] sortEvenOdd(int[] nums) {\\n      \\n        int len=nums.length;\\n        int half=len/2;\\n        List<Integer> odd=new ArrayList<>();\\n        List<Integer> even=new ArrayList<>();\\n        // Check if the length of the input array is less than 2,no need to do anything\\n         if(len<=2)\\n             return nums;\\n         // seprate the odd from even indices and insert then into even arrayList\\n        \\n         for(int i=0; i<len;i++){\\n             if(i%2==0){\\n               even.add(nums[i]);\\n       \\n             }\\n             else{\\n                odd.add(nums[i]);\\n             \\n             }\\n         } \\n         // sort the value at even indices in normal ordering\\n         Collections.sort(even);\\n         /* \\n           instead of sort and reverse the list. I sort and then started from\\n           last element in the odd list using the formula of sizeof oddlist-i\\n           i start from zero\\n           let say the size of odd list=2 , subtract 1 \\n           1-0 =1 so the last element is located at index 1 in arraylist of size 2 \\n           \\n         */ \\n         Collections.sort(odd);\\n        \\n             int evenInx=0;\\n             int oddInx=0;\\n             int oddSize=odd.size()-1;\\n             \\n            for(int j=0; j<len;j++){\\n                if(j%2==0)\\n                 nums[j]=even.get(evenInx++);\\n             else\\n                 //start from last index \\n                nums[j]=odd.get(oddSize-oddInx++);    \\n             }   \\n        return nums;\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1820347,
                "title": "concise-and-clear-code-kindly-upvote-it",
                "content": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        \\n        vector<int>v;\\n        vector<int>vec;\\n        int i;\\n        for(i=0;i<nums.size();i++)\\n        {\\n            if(i%2==0)\\n            {\\n                v.push_back(nums[i]);\\n            }\\n            else\\n                vec.push_back(nums[i]);\\n        }\\n        int j=0,k=0;\\n        sort(v.begin(),v.end());\\n        sort(vec.begin(),vec.end(),greater<int>());\\n        vector<int>vect;\\n        for(i=0;i<nums.size();i++)\\n        {\\n            if(i%2==0){\\n            vect.push_back(v[j]);\\n            j++;}\\n            else\\n            {\\n                vect.push_back(vec[k]);\\n                k++;\\n            }\\n        }\\n        return vect;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        \\n        vector<int>v;\\n        vector<int>vec;\\n        int i;\\n        for(i=0;i<nums.size();i++)\\n        {\\n            if(i%2==0)\\n            {\\n                v.push_back(nums[i]);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1801284,
                "title": "with-own-sorting-insertion",
                "content": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& arr) {\\n        int i, j, key;\\n        for(int i = 2; i < arr.size(); i+=2){\\n            j = i - 2;\\n            key = arr[i];\\n            while(j>=0 && arr[j]>key){\\n                arr[j + 2] = arr[j];\\n                j = j - 2;\\n            }\\n            arr[j + 2] = key;\\n        }\\n        \\n        for(int i = 3; i < arr.size(); i+=2){\\n            j = i - 2;\\n            key = arr[i];\\n            while(j>=1 && arr[j]<key){\\n                arr[j + 2] = arr[j];\\n                j = j - 2;\\n            }\\n            arr[j + 2] = key;\\n        }\\n\\n        \\n        return arr;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& arr) {\\n        int i, j, key;\\n        for(int i = 2; i < arr.size(); i+=2){\\n            j = i - 2;\\n            key = arr[i];\\n            while(j>=0 && arr[j]>key){\\n                arr[j + 2] = arr[j];\\n                j = j - 2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1793807,
                "title": "java-3ms-priorityqueue",
                "content": "![image](https://assets.leetcode.com/users/images/3e6e7b17-b0cf-4280-975a-cf92967661c1_1645611961.4055283.png)\\n\\n\\n```java\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int len = nums.length;\\n        if (len < 3) return nums;\\n        int hlen = len / 2;\\n        Queue<Integer> even = new PriorityQueue<>(hlen);\\n        Queue<Integer> odd = new PriorityQueue<>(hlen, Collections.reverseOrder());\\n        \\n        boolean isEven = true;\\n        for(int num : nums) {\\n            (isEven ? even : odd).add(num);\\n            isEven = !isEven;\\n        }\\n\\n        isEven = true;\\n        for (int i = 0; i < len ; i++) {\\n            nums[i] = isEven ? even.poll() : odd.poll();\\n            isEven = !isEven;\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```java\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int len = nums.length;\\n        if (len < 3) return nums;\\n        int hlen = len / 2;\\n        Queue<Integer> even = new PriorityQueue<>(hlen);\\n        Queue<Integer> odd = new PriorityQueue<>(hlen, Collections.reverseOrder());\\n        \\n        boolean isEven = true;\\n        for(int num : nums) {\\n            (isEven ? even : odd).add(num);\\n            isEven = !isEven;\\n        }\\n\\n        isEven = true;\\n        for (int i = 0; i < len ; i++) {\\n            nums[i] = isEven ? even.poll() : odd.poll();\\n            isEven = !isEven;\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1780737,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int>odd,even;\\n        for(int i=0;i<n;i++){\\n            if(i%2!=0)odd.push_back(nums[i]);\\n            else even.push_back(nums[i]);\\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end(),greater<int>());\\n        int i=0;\\n        for(auto x:even){\\n            nums[i]=x;\\n            i+=2;\\n        }\\n        i=1;\\n        for(auto x:odd){\\n            nums[i]=x;\\n            i+=2;\\n        }\\n        return nums;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int>odd,even;\\n        for(int i=0;i<n;i++){\\n            if(i%2!=0)odd.push_back(nums[i]);\\n            else even.push_back(nums[i]);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1776009,
                "title": "python-using-deque",
                "content": "```\\nfrom collections import deque\\n\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        n = len(nums)\\n        evens = sorted([nums[i] for i in range(0, n, 2)])\\n        odds = sorted([nums[i] for i in range(1, n, 2)], reverse=True)\\n\\n        ans = []\\n\\n        odds = deque(odds)\\n        evens = deque(evens)\\n        \\n        while len(odds) > 0 and len(evens) > 0:\\n            ans.append(evens.popleft())\\n            ans.append(odds.popleft())\\n        \\n        if len(evens) > 0:\\n            ans.append(evens.popleft())\\n        if len(odds) > 0:\\n            ans.append(odds.popleft())\\n        \\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Queue"
                ],
                "code": "```\\nfrom collections import deque\\n\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        n = len(nums)\\n        evens = sorted([nums[i] for i in range(0, n, 2)])\\n        odds = sorted([nums[i] for i in range(1, n, 2)], reverse=True)\\n\\n        ans = []\\n\\n        odds = deque(odds)\\n        evens = deque(evens)\\n        \\n        while len(odds) > 0 and len(evens) > 0:\\n            ans.append(evens.popleft())\\n            ans.append(odds.popleft())\\n        \\n        if len(evens) > 0:\\n            ans.append(evens.popleft())\\n        if len(odds) > 0:\\n            ans.append(odds.popleft())\\n        \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1768206,
                "title": "easily-understood-java",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        for (int i=1;i<nums.length-2;i=i+2)\\n        {\\n            for (int j=1;j<nums.length-2;j=j+2)\\n            {\\n                if(nums[j] < nums[j+2])\\n                {\\n                int tmpOdd = nums[j];\\n                nums[j] = nums[j+2];\\n                nums[j+2] = tmpOdd;\\n                }\\n            }\\n        }\\n        for (int i=0;i<nums.length-2;i=i+2)\\n        {\\n            for (int j=0;j<nums.length-2;j=j+2)\\n            {\\n                if(nums[j] > nums[j+2])\\n                {\\n                int tmpEven = nums[j];\\n                nums[j] = nums[j+2];\\n                nums[j+2] = tmpEven;\\n                }\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        for (int i=1;i<nums.length-2;i=i+2)\\n        {\\n            for (int j=1;j<nums.length-2;j=j+2)\\n            {\\n                if(nums[j] < nums[j+2])\\n                {\\n                int tmpOdd = nums[j];\\n                nums[j] = nums[j+2];\\n                nums[j+2] = tmpOdd;\\n                }\\n            }\\n        }\\n        for (int i=0;i<nums.length-2;i=i+2)\\n        {\\n            for (int j=0;j<nums.length-2;j=j+2)\\n            {\\n                if(nums[j] > nums[j+2])\\n                {\\n                int tmpEven = nums[j];\\n                nums[j] = nums[j+2];\\n                nums[j+2] = tmpEven;\\n                }\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1765602,
                "title": "python-beginner-friendly",
                "content": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n\\t\\tn = len(nums)\\n        if n <= 2:\\n            return nums\\n\\n        even = sorted([nums[i] for i in range(0, n, 2)])\\n        odd = sorted([nums[i] for i in range(1, n, 2)], reverse=True)\\n\\n        res = []\\n\\n        for i in range(len(even)):\\n            res.append(even[i])\\n            if i < len(odd):\\n                res.append(odd[i])\\n\\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n\\t\\tn = len(nums)\\n        if n <= 2:\\n            return nums\\n\\n        even = sorted([nums[i] for i in range(0, n, 2)])\\n        odd = sorted([nums[i] for i in range(1, n, 2)], reverse=True)\\n\\n        res = []\\n\\n        for i in range(len(even)):\\n            res.append(even[i])\\n            if i < len(odd):\\n                res.append(odd[i])\\n\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1764910,
                "title": "javascript-easily-understood",
                "content": "```\\nvar sortEvenOdd = function(nums) {\\n    const odd = [];\\n    const even = [];\\n    const res = [];\\n\\t\\n    nums.forEach((n, i) => {\\n        i % 2 ? odd.push(n) : even.push(n)\\n    })\\n    \\n    const oddSort = odd.sort((a,b) => b - a)\\n    const evenSort = even.sort((a,b) => a - b)\\n    let i = 0\\n    while(i < nums.length) {\\n        if(i%2) {\\n            res.push(oddSort.shift())\\n        } else {\\n            res.push(evenSort.shift())\\n        }\\n        i++;\\n    }\\n\\n    return res\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar sortEvenOdd = function(nums) {\\n    const odd = [];\\n    const even = [];\\n    const res = [];\\n\\t\\n    nums.forEach((n, i) => {\\n        i % 2 ? odd.push(n) : even.push(n)\\n    })\\n    \\n    const oddSort = odd.sort((a,b) => b - a)\\n    const evenSort = even.sort((a,b) => a - b)\\n    let i = 0\\n    while(i < nums.length) {\\n        if(i%2) {\\n            res.push(oddSort.shift())\\n        } else {\\n            res.push(evenSort.shift())\\n        }\\n        i++;\\n    }\\n\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1761420,
                "title": "easy-logic",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums){\\n     vector<int>even;\\n        vector<int>odd;\\n        vector<int>ans;\\n        int n = nums.size();\\n        int i = 0;\\n        while(i<n){\\n          even.push_back(nums[i]);\\n            i+=2;\\n        }\\n    \\n        int j=1;\\n        while(j<n){\\n            odd.push_back(nums[j]);\\n            j+=2;\\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end(),greater<int>());\\n        \\n        for(int k=0;k<even.size();k++){\\n            if(k<even.size()) \\n                ans.push_back(even[k]);\\n           if(k<odd.size())  \\n               ans.push_back(odd[k]);\\n        }\\n        return ans;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums){\\n     vector<int>even;\\n        vector<int>odd;\\n        vector<int>ans;\\n        int n = nums.size();\\n        int i = 0;\\n        while(i<n){\\n          even.push_back(nums[i]);\\n            i+=2;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1757485,
                "title": "c-solution-beginner-friendly",
                "content": "```\\nvector<int> sortEvenOdd(vector<int>& a) {\\n        int n=a.size();\\n        int p=0,q=0;\\n        vector<int>v1,v2;    // Made two vectors\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i%2==0)\\n                v1.push_back(a[i]);      // Pushed even numbers in vector1\\n            else\\n                v2.push_back(a[i]);       // Pushed odd numbers in vector2\\n        }\\n        sort(v1.begin(),v1.end());      // Sorted in increasing order\\n        sort(v2.begin(),v2.end(),greater<int>());     // Sorted in decreasing order\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i%2==0)\\n             a[i]=v1[p++];    // Again putting back the values in original vector.\\n        \\n            else\\n             a[i]=v2[q++];\\n        }\\n        return a;       // Returned original vector.\\n    }\\n```\\n``` If you like my approach then hit the like button.```",
                "solutionTags": [],
                "code": "```\\nvector<int> sortEvenOdd(vector<int>& a) {\\n        int n=a.size();\\n        int p=0,q=0;\\n        vector<int>v1,v2;    // Made two vectors\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i%2==0)\\n                v1.push_back(a[i]);      // Pushed even numbers in vector1\\n            else\\n                v2.push_back(a[i]);       // Pushed odd numbers in vector2\\n        }\\n        sort(v1.begin(),v1.end());      // Sorted in increasing order\\n        sort(v2.begin(),v2.end(),greater<int>());     // Sorted in decreasing order\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i%2==0)\\n             a[i]=v1[p++];    // Again putting back the values in original vector.\\n        \\n            else\\n             a[i]=v2[q++];\\n        }\\n        return a;       // Returned original vector.\\n    }\\n```\n``` If you like my approach then hit the like button.```",
                "codeTag": "Unknown"
            },
            {
                "id": 1756052,
                "title": "c-two-approaches-single-array-two-arrays",
                "content": "**Two Array Approach**\\nTwo arrays to store elements of odd indices and even indices respectively\\nSort ```oddindiesarray``` in non-increasing order\\nsort ```evenindicesarray``` in non-decreasing order\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> oddindicesarr; //to store odd indices elements\\n        vector<int> evenindicesarr; // to store even indices elements\\n        \\n        for (int i = 0; i < n; ++i) \\n            (i&1) ? oddindicesarr.push_back(nums[i]) : evenindicesarr.push_back(nums[i]);\\n        \\n        sort(oddindicesarr.begin(), oddindicesarr.end(), greater<>());\\n        sort(evenindicesarr.begin(), evenindicesarr.end());\\n        \\n        int oddindex = 0, evenindex = 0;\\n        for (int i = 0; i < n; ++i) {\\n            (i&1) ? nums[i] = oddindicesarr[oddindex++] : nums[i] = evenindicesarr[evenindex++];\\n        }\\n        return nums;\\n    }\\n};\\n```\\n\\n**Single Array Approach**\\nStore even indices elements in first part of ```nums```  and odd indices elements in second part\\nSort first part in non-decreasing order and second part in non-increasing order\\nBased on whether index is even or odd store in ```res``` array from first or second part respectively.\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> res(n); \\n        int i = 1, j = (n&1) ? n-1 : n-2; //decide j based on if size is odd \\n        int mid = (n&1) ? (n/2)+1 : n/2; //decide mid based on if size is odd\\n        while (i < j) { //get even indices element in first part and odd indices elements in second part\\n            swap(nums[i], nums[j]);\\n            i+=2;\\n            j-=2;\\n        }\\n        sort(nums.begin(), nums.begin()+mid);  //sort first part of array in non-decreasing order\\n        sort(nums.begin()+mid , nums.end(), greater<>()); ////sort second part of array in non-increasing order\\n        int odd = mid, even = 0;\\n        for (int i = 0; i < n; ++i) {\\n            if (i&1) { //if odd index, get element from second part\\n                res[i] = nums[odd];\\n                odd++;\\n            }\\n            else { //even index, get element from first part\\n                res[i] = nums[even];\\n                even++;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Array",
                    "Sorting"
                ],
                "code": "```oddindiesarray```\n```evenindicesarray```\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> oddindicesarr; //to store odd indices elements\\n        vector<int> evenindicesarr; // to store even indices elements\\n        \\n        for (int i = 0; i < n; ++i) \\n            (i&1) ? oddindicesarr.push_back(nums[i]) : evenindicesarr.push_back(nums[i]);\\n        \\n        sort(oddindicesarr.begin(), oddindicesarr.end(), greater<>());\\n        sort(evenindicesarr.begin(), evenindicesarr.end());\\n        \\n        int oddindex = 0, evenindex = 0;\\n        for (int i = 0; i < n; ++i) {\\n            (i&1) ? nums[i] = oddindicesarr[oddindex++] : nums[i] = evenindicesarr[evenindex++];\\n        }\\n        return nums;\\n    }\\n};\\n```\n```nums```\n```res```\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> res(n); \\n        int i = 1, j = (n&1) ? n-1 : n-2; //decide j based on if size is odd \\n        int mid = (n&1) ? (n/2)+1 : n/2; //decide mid based on if size is odd\\n        while (i < j) { //get even indices element in first part and odd indices elements in second part\\n            swap(nums[i], nums[j]);\\n            i+=2;\\n            j-=2;\\n        }\\n        sort(nums.begin(), nums.begin()+mid);  //sort first part of array in non-decreasing order\\n        sort(nums.begin()+mid , nums.end(), greater<>()); ////sort second part of array in non-increasing order\\n        int odd = mid, even = 0;\\n        for (int i = 0; i < n; ++i) {\\n            if (i&1) { //if odd index, get element from second part\\n                res[i] = nums[odd];\\n                odd++;\\n            }\\n            else { //even index, get element from first part\\n                res[i] = nums[even];\\n                even++;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1753471,
                "title": "brute-force-approach",
                "content": "class Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int[] arr1 = new int[nums.length/2];\\n        int[] arr2 = new int[nums.length/2+nums.length%2];\\n        int j=0,k=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(i%2==0){\\n                arr2[j++]=nums[i];\\n            }\\n            else{\\n                arr1[k++]=nums[i];\\n            }\\n        }\\n        Arrays.sort(arr1);\\n        Arrays.sort(arr2);\\n        j=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(i%2==0){\\n                nums[i]=arr2[j++];\\n            }\\n            else{\\n                nums[i]=arr1[--k];\\n            }\\n        }\\n        return nums;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int[] arr1 = new int[nums.length/2];\\n        int[] arr2 = new int[nums.length/2+nums.length%2];\\n        int j=0,k=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(i%2==0){\\n                arr2[j++]=nums[i];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1753410,
                "title": "java-solution-very-easy-to-understand",
                "content": "```\\n#**Please upvote if you like the solution\\nclass Solution \\n{\\n    public int[] sortEvenOdd(int[] nums) \\n    {\\n        List<Integer> even= new ArrayList<>();\\n        List<Integer> odd=new ArrayList<>();\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(i%2==0)\\n            {\\n                even.add(nums[i]);\\n                \\n            }\\n            else\\n            {\\n                odd.add(nums[i]);\\n            }\\n        }\\n        Collections.sort(even);\\n        Collections.sort(odd,Collections.reverseOrder());\\n        int arr[]=new int[nums.length];\\n        int i=0;\\n        int evenindex=0;\\n        int oddindex=0;\\n        while(i<nums.length)\\n        {\\n            if(i%2==0)\\n            {\\n                arr[i]=even.get(evenindex);\\n                evenindex++;\\n                \\n            }\\n            else\\n            {\\n                arr[i]=odd.get(oddindex);\\n                oddindex++;\\n            }\\n            i++;\\n        }\\n        return arr;\\n       \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution \\n{\\n    public int[] sortEvenOdd(int[] nums) \\n    {\\n        List<Integer> even= new ArrayList<>();\\n        List<Integer> odd=new ArrayList<>();\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(i%2==0)\\n            {\\n                even.add(nums[i]);\\n                \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1750982,
                "title": "scala-concise-functional-solution-using-partition-tabulate",
                "content": "```\\n  def sortEvenOdd(nums: Array[Int]): Array[Int] = {\\n    val (odd, even) = nums.indices.partition(_ % 2 == 1)\\n    val sortedOdd   = odd.map(nums).sortBy(x => -x)\\n    val sortedEven  = even.map(nums).sortBy(x => x)\\n    Array.tabulate(nums.length) { idx =>\\n      if (idx % 2 == 0) sortedEven(idx / 2) else sortedOdd(idx / 2)\\n    }\\n  }\\n```",
                "solutionTags": [],
                "code": "```\\n  def sortEvenOdd(nums: Array[Int]): Array[Int] = {\\n    val (odd, even) = nums.indices.partition(_ % 2 == 1)\\n    val sortedOdd   = odd.map(nums).sortBy(x => -x)\\n    val sortedEven  = even.map(nums).sortBy(x => x)\\n    Array.tabulate(nums.length) { idx =>\\n      if (idx % 2 == 0) sortedEven(idx / 2) else sortedOdd(idx / 2)\\n    }\\n  }\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1750842,
                "title": "javascript-js",
                "content": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar sortEvenOdd = function (nums) {\\n  let a = [];\\n  let b = [];\\n  let c = [];\\n\\n  for (let i = 0; i < nums.length; i++) {\\n    i % 2 === 0 ? a.push(nums[i]) : b.push(nums[i]);\\n  }\\n\\n  a.sort((a, b) => a - b);\\n  b.sort((a, b) => b - a);\\n\\n  for (let i = 0; i < nums.length / 2; i++) {\\n    if (a[i]) {\\n      c.push(a[i]);\\n    }\\n    if (b[i]) {\\n      c.push(b[i]);\\n    }\\n  }\\n\\n  return c;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar sortEvenOdd = function (nums) {\\n  let a = [];\\n  let b = [];\\n  let c = [];\\n\\n  for (let i = 0; i < nums.length; i++) {\\n    i % 2 === 0 ? a.push(nums[i]) : b.push(nums[i]);\\n  }\\n\\n  a.sort((a, b) => a - b);\\n  b.sort((a, b) => b - a);\\n\\n  for (let i = 0; i < nums.length / 2; i++) {\\n    if (a[i]) {\\n      c.push(a[i]);\\n    }\\n    if (b[i]) {\\n      c.push(b[i]);\\n    }\\n  }\\n\\n  return c;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1750595,
                "title": "python-heap-time-o-nlogn-space-o-n-explained",
                "content": "We can sort the numbers at odd and even indices seperately and put them back together. \\nI used two heaps to store the value of numbers at odd and even indices. One thing to note is that in python `heap` is a min-heap, therefore for the numbers at odd indices we need to multiple the number by -1.\\n```\\nimport heapq\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        n = len(nums)\\n        ans = n * [0]\\n        \\n        # make two heaps for odd and even indices\\n        even = []\\n        odd  = []\\n\\n        for i, val in enumerate(nums):\\n            # if val is at odd index, push val to the odd heap\\n            if i % 2 == 0:\\n                heappush(even, val)\\n            # if val is at odd index, push -val to the odd heap \\n            else:\\n                heappush(odd, - val)\\n              \\n        for i in range(n):\\n            if i % 2 == 0:\\n                ans[i] = heappop(even)\\n            else:\\n                ans[i] = - heappop(odd)\\n                       \\n        return ans\\n```\\nTime:  O(nlogn). \\nFor the 1st iteration, each heappush() is O(logn) time and the total time is O(nlogn). For the 2nd iteration, each heappop() is O(logn) time and the total time is O(nlogn). Over all, the solution is  O(nlogn) time.\\n\\nSpace: O(n). \\nWe use two heaps to store the numbers and they have a combined length of n at their longest.  Over all, the solution is  O(n) space.",
                "solutionTags": [
                    "Python",
                    "Sorting",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nimport heapq\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        n = len(nums)\\n        ans = n * [0]\\n        \\n        # make two heaps for odd and even indices\\n        even = []\\n        odd  = []\\n\\n        for i, val in enumerate(nums):\\n            # if val is at odd index, push val to the odd heap\\n            if i % 2 == 0:\\n                heappush(even, val)\\n            # if val is at odd index, push -val to the odd heap \\n            else:\\n                heappush(odd, - val)\\n              \\n        for i in range(n):\\n            if i % 2 == 0:\\n                ans[i] = heappop(even)\\n            else:\\n                ans[i] = - heappop(odd)\\n                       \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1750494,
                "title": "python-easy-readable-solution",
                "content": "Solution:\\n1. Take two lists even and odd. \\n2. Sort them in the reverse order from required\\n3. append to the result string by popping the elements from the list(this gives the correct order) based on the result list index\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        even_list = []\\n        odd_list = []\\n        for i,c in enumerate(nums):\\n            if i%2 == 0:\\n                even_list.append(c)\\n            else:\\n                odd_list.append(c)\\n        even_list = sorted(even_list,reverse=True)\\n        odd_list = sorted(odd_list, reverse=False)\\n        ans = []\\n        for i in range(len(nums)):\\n            if i % 2 == 0:\\n                ans.append(even_list.pop())\\n            else:\\n                ans.append(odd_list.pop())\\n        return ans\\n    \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        even_list = []\\n        odd_list = []\\n        for i,c in enumerate(nums):\\n            if i%2 == 0:\\n                even_list.append(c)\\n            else:\\n                odd_list.append(c)\\n        even_list = sorted(even_list,reverse=True)\\n        odd_list = sorted(odd_list, reverse=False)\\n        ans = []\\n        for i in range(len(nums)):\\n            if i % 2 == 0:\\n                ans.append(even_list.pop())\\n            else:\\n                ans.append(odd_list.pop())\\n        return ans\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1750375,
                "title": "java-clean-collections-sort",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        List<Integer> odd = new ArrayList<Integer>();\\n        List<Integer> even = new ArrayList<Integer>(); \\n        for(int i = 0; i < nums.length; i++){\\n            if(i % 2 == 0)\\n                even.add(nums[i]);\\n            else\\n                odd.add(nums[i]);\\n        }\\n        Collections.sort(odd, Collections.reverseOrder());\\n        Collections.sort(even);\\n        for(int i = 0; i < nums.length; i++){\\n            if(i % 2 == 0)\\n                nums[i] = even.get(i/2);\\n            else\\n                nums[i] = odd.get(i/2);\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        List<Integer> odd = new ArrayList<Integer>();\\n        List<Integer> even = new ArrayList<Integer>(); \\n        for(int i = 0; i < nums.length; i++){\\n            if(i % 2 == 0)\\n                even.add(nums[i]);\\n            else\\n                odd.add(nums[i]);\\n        }\\n        Collections.sort(odd, Collections.reverseOrder());\\n        Collections.sort(even);\\n        for(int i = 0; i < nums.length; i++){\\n            if(i % 2 == 0)\\n                nums[i] = even.get(i/2);\\n            else\\n                nums[i] = odd.get(i/2);\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1750012,
                "title": "python",
                "content": "class Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        lodd = []\\n        leven = []\\n\\n        for i , n in enumerate(nums):\\n            if i%2==0:\\n                leven.append(n)\\n            else:\\n                lodd.append(n)\\n        neven = len(leven)\\n        nodd = len(nums) - neven\\n        print(neven,nodd)\\n        ans = []\\n        leven.sort()\\n        lodd.sort(reverse=True)\\n\\n        for j in  range(min(neven,nodd)):\\n            ans.append(leven[j])       \\n            ans.append(lodd[j])\\n\\n        if neven>nodd:\\n            ans.append(leven[-1])        \\n        elif neven<nodd:    \\n            ans.append(lodd[-1])        \\n        print(ans)\\n\\n        return ans           \\n",
                "solutionTags": [
                    "Python",
                    "Combinatorics"
                ],
                "code": "class Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        lodd = []\\n        leven = []\\n\\n        for i , n in enumerate(nums):\\n            if i%2==0:\\n                leven.append(n)\\n            else:\\n                lodd.append(n)\\n        neven = len(leven)\\n        nodd = len(nums) - neven\\n        print(neven,nodd)\\n        ans = []\\n        leven.sort()\\n        lodd.sort(reverse=True)\\n\\n        for j in  range(min(neven,nodd)):\\n            ans.append(leven[j])       \\n            ans.append(lodd[j])\\n\\n        if neven>nodd:\\n            ans.append(leven[-1])        \\n        elif neven<nodd:    \\n            ans.append(lodd[-1])        \\n        print(ans)\\n\\n        return ans           \\n",
                "codeTag": "Java"
            },
            {
                "id": 1749750,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        List<Integer> evenArr=new ArrayList<>();\\n        List<Integer> oddArr=new ArrayList<>();\\n        for (int i = 0; i < nums.length; i++)\\n        {\\n            if (i % 2 != 1) \\n            {\\n                evenArr.add(nums[i]);\\n            }\\n            else\\n            {\\n                oddArr.add(nums[i]);\\n            }\\n        }\\n\\n        Collections.sort(evenArr);\\n        Collections.sort(oddArr, Collections.reverseOrder());\\n \\n        int i = 0;\\n        for (int j = 0; j < evenArr.size(); j++)\\n        {\\n            nums[i] = evenArr.get(j);\\n            i+=2;\\n        }\\n        i=1;\\n        for (int j = 0; j < oddArr.size(); j++) \\n        {\\n            nums[i] = oddArr.get(j);\\n            i+=2;\\n        }\\n        return nums;   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        List<Integer> evenArr=new ArrayList<>();\\n        List<Integer> oddArr=new ArrayList<>();\\n        for (int i = 0; i < nums.length; i++)\\n        {\\n            if (i % 2 != 1) \\n            {\\n                evenArr.add(nums[i]);\\n            }\\n            else\\n            {\\n                oddArr.add(nums[i]);\\n            }\\n        }\\n\\n        Collections.sort(evenArr);\\n        Collections.sort(oddArr, Collections.reverseOrder());\\n \\n        int i = 0;\\n        for (int j = 0; j < evenArr.size(); j++)\\n        {\\n            nums[i] = evenArr.get(j);\\n            i+=2;\\n        }\\n        i=1;\\n        for (int j = 0; j < oddArr.size(); j++) \\n        {\\n            nums[i] = oddArr.get(j);\\n            i+=2;\\n        }\\n        return nums;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1749726,
                "title": "python-beginner-solution",
                "content": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        x=sorted([nums[i] for i in range(0,len(nums),2)])\\n        y=sorted([nums[i] for i in range(1,len(nums),2)])[::-1]\\n        z=[]\\n        a=min(len(x),len(y))\\n        for i in range(a):\\n                z.append(x[i])\\n                z.append(y[i])\\n        if len(x)<len(y):\\n            b=z+y[len(x):]\\n            return b\\n        elif len(x)>len(y):\\n            b=z+x[len(y):]\\n            return b\\n        return z",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        x=sorted([nums[i] for i in range(0,len(nums),2)])\\n        y=sorted([nums[i] for i in range(1,len(nums),2)])[::-1]\\n        z=[]\\n        a=min(len(x),len(y))\\n        for i in range(a):\\n                z.append(x[i])\\n                z.append(y[i])\\n        if len(x)<len(y):\\n            b=z+y[len(x):]\\n            return b\\n        elif len(x)>len(y):\\n            b=z+x[len(y):]\\n            return b\\n        return z",
                "codeTag": "Java"
            },
            {
                "id": 1749679,
                "title": "go-iteration-with-two-slices-0ms",
                "content": "```\\nfunc sortEvenOdd(nums []int) []int {\\n\\tn := len(nums)\\n\\t//  add 1 to en in case nums\\'s length is odd\\n\\ten, on := (n+1)/2, n/2\\n\\n\\tevens, odds := make([]int, en), make([]int, on)\\n\\n\\t// faster than using append\\n\\tfor i := range evens {\\n\\t\\tevens[i] = nums[i*2]\\n\\t}\\n\\tfor i := range odds {\\n\\t\\todds[i] = nums[i*2+1]\\n\\t}\\n\\n\\t// increasing order\\n\\tsort.Ints(evens)\\n\\t// non-increasing order\\n\\tsort.Slice(odds, func(i, j int) bool { return odds[i] > odds[j] })\\n\\n\\tfor i, even := range evens {\\n\\t\\tnums[i*2] = even\\n\\t}\\n\\tfor i, odd := range odds {\\n\\t\\tnums[i*2+1] = odd\\n\\t}\\n\\treturn nums\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc sortEvenOdd(nums []int) []int {\\n\\tn := len(nums)\\n\\t//  add 1 to en in case nums\\'s length is odd\\n\\ten, on := (n+1)/2, n/2\\n\\n\\tevens, odds := make([]int, en), make([]int, on)\\n\\n\\t// faster than using append\\n\\tfor i := range evens {\\n\\t\\tevens[i] = nums[i*2]\\n\\t}\\n\\tfor i := range odds {\\n\\t\\todds[i] = nums[i*2+1]\\n\\t}\\n\\n\\t// increasing order\\n\\tsort.Ints(evens)\\n\\t// non-increasing order\\n\\tsort.Slice(odds, func(i, j int) bool { return odds[i] > odds[j] })\\n\\n\\tfor i, even := range evens {\\n\\t\\tnums[i*2] = even\\n\\t}\\n\\tfor i, odd := range odds {\\n\\t\\tnums[i*2+1] = odd\\n\\t}\\n\\treturn nums\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1749603,
                "title": "python3-unreadable-1-liner",
                "content": "\\nmaybe array is not even length so we use ```zip_longest``` \\nin order to remove the unwanted ```None``` we use ```filter```\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        return filter(None, itertools.chain(*zip_longest(sorted(nums[::2]), sorted(nums[1::2], reverse=True))))\\n```",
                "solutionTags": [],
                "code": "```zip_longest```\n```None```\n```filter```\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        return filter(None, itertools.chain(*zip_longest(sorted(nums[::2]), sorted(nums[1::2], reverse=True))))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1749409,
                "title": "c-solution",
                "content": "**Complexity**\\n- Time: O(nlogn) due to the sorting\\n- Space: O(n)\\n\\n**Implementation**\\n```\\npublic class Solution {\\n    public int[] SortEvenOdd(int[] nums) {\\n        \\n        List<int> list_odd = new List<int>();\\n        List<int> list_even = new List<int>();\\n        for(int i = 0; i < nums.Length; i++)\\n        {\\n            if(i % 2 != 0)\\n                list_odd.Add(nums[i]);\\n            else\\n                list_even.Add(nums[i]);\\n        }\\n        \\n        list_odd.Sort((a, b) => b - a); // descresing\\n        list_even.Sort(); // increasing\\n        \\n        int oddIdx = 0, evenIdx = 0;\\n        int[] res = new int[nums.Length];\\n        for(int i = 0; i < nums.Length; i++)\\n        {\\n            if(i % 2 != 0)\\n                res[i] = list_odd[oddIdx++];\\n            else\\n                res[i] = list_even[evenIdx++];\\n        }\\n       \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int[] SortEvenOdd(int[] nums) {\\n        \\n        List<int> list_odd = new List<int>();\\n        List<int> list_even = new List<int>();\\n        for(int i = 0; i < nums.Length; i++)\\n        {\\n            if(i % 2 != 0)\\n                list_odd.Add(nums[i]);\\n            else\\n                list_even.Add(nums[i]);\\n        }\\n        \\n        list_odd.Sort((a, b) => b - a); // descresing\\n        list_even.Sort(); // increasing\\n        \\n        int oddIdx = 0, evenIdx = 0;\\n        int[] res = new int[nums.Length];\\n        for(int i = 0; i < nums.Length; i++)\\n        {\\n            if(i % 2 != 0)\\n                res[i] = list_odd[oddIdx++];\\n            else\\n                res[i] = list_even[evenIdx++];\\n        }\\n       \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1749187,
                "title": "best-easiest-c-simplest-solution-2164-sort-even-and-odd-indices-independently",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& arr) {\\n        vector<int>res;\\n        int n = arr.size();\\n        vector<int>v1;\\n        vector<int>v2;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(i%2 == 0)\\n            {\\n                v1.push_back(arr[i]);\\n            }\\n            else{\\n                v2.push_back(arr[i]);\\n            }\\n        }\\n        sort(v1.begin(), v1.end());\\n        sort(v2.rbegin(), v2.rend());\\n        int k = 0;\\n        int j = 0;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(i%2 == 0)\\n            {\\n                arr[i] = v1[k];\\n                k++;\\n            }\\n            else{\\n                arr[i] = v2[j];\\n                j++;\\n            }\\n        }\\n        return arr;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& arr) {\\n        vector<int>res;\\n        int n = arr.size();\\n        vector<int>v1;\\n        vector<int>v2;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(i%2 == 0)\\n            {\\n                v1.push_back(arr[i]);\\n            }\\n            else{\\n                v2.push_back(arr[i]);\\n            }\\n        }\\n        sort(v1.begin(), v1.end());\\n        sort(v2.rbegin(), v2.rend());\\n        int k = 0;\\n        int j = 0;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(i%2 == 0)\\n            {\\n                arr[i] = v1[k];\\n                k++;\\n            }\\n            else{\\n                arr[i] = v2[j];\\n                j++;\\n            }\\n        }\\n        return arr;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1749045,
                "title": "c-faster-than-100-2-arrays",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector <int> odd, even;\\n        int j = 0, k = 0;\\n        \\n        for(int i=0; i<nums.size(); i++){\\n                even.push_back(nums[i]);\\n            i++;\\n            if(i<nums.size())\\n                odd.push_back(nums[i]);\\n        }\\n        \\n        sort(odd.begin(), odd.end(), greater <>());\\n        sort(even.begin(), even.end());\\n        \\n        for(int i=0; i<nums.size(); i++){\\n            nums[i] = even[j];\\n            j++;\\n            i++;\\n        if(i<nums.size())\\n            nums[i] = odd[k];\\n            k++;\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector <int> odd, even;\\n        int j = 0, k = 0;\\n        \\n        for(int i=0; i<nums.size(); i++){\\n                even.push_back(nums[i]);\\n            i++;\\n            if(i<nums.size())\\n                odd.push_back(nums[i]);\\n        }\\n        \\n        sort(odd.begin(), odd.end(), greater <>());\\n        sort(even.begin(), even.end());\\n        \\n        for(int i=0; i<nums.size(); i++){\\n            nums[i] = even[j];\\n            j++;\\n            i++;\\n        if(i<nums.size())\\n            nums[i] = odd[k];\\n            k++;\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1749011,
                "title": "java-clean-code-solution-for-interviews",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int oddL = nums.length/2;\\n        int evenL = nums.length - oddL;\\n        \\n        int[] oddIndex = new int[oddL];\\n        int[] evenIndex = new int[evenL];\\n        int evenItr = 0, oddItr = 0;\\n        \\n        for(int i =0;i<nums.length;i++) {\\n            if(i % 2 == 0) {\\n                evenIndex[evenItr] = nums[i];\\n                evenItr += 1;\\n            } else {\\n                oddIndex[oddItr] = nums[i];\\n                oddItr += 1;\\n            }\\n        }\\n        \\n        Arrays.sort(oddIndex);\\n        Arrays.sort(evenIndex);\\n        evenItr = 0;\\n        oddItr = oddL-1;\\n        \\n        for(int i = 0;i<nums.length;i++) {\\n            if(i % 2 == 0) {\\n                nums[i] = evenIndex[evenItr];\\n                evenItr += 1;\\n            } else {\\n                nums[i] = oddIndex[oddItr];\\n                oddItr -= 1;\\n            }\\n        }\\n        \\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int oddL = nums.length/2;\\n        int evenL = nums.length - oddL;\\n        \\n        int[] oddIndex = new int[oddL];\\n        int[] evenIndex = new int[evenL];\\n        int evenItr = 0, oddItr = 0;\\n        \\n        for(int i =0;i<nums.length;i++) {\\n            if(i % 2 == 0) {\\n                evenIndex[evenItr] = nums[i];\\n                evenItr += 1;\\n            } else {\\n                oddIndex[oddItr] = nums[i];\\n                oddItr += 1;\\n            }\\n        }\\n        \\n        Arrays.sort(oddIndex);\\n        Arrays.sort(evenIndex);\\n        evenItr = 0;\\n        oddItr = oddL-1;\\n        \\n        for(int i = 0;i<nums.length;i++) {\\n            if(i % 2 == 0) {\\n                nums[i] = evenIndex[evenItr];\\n                evenItr += 1;\\n            } else {\\n                nums[i] = oddIndex[oddItr];\\n                oddItr -= 1;\\n            }\\n        }\\n        \\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748742,
                "title": "simple-and-easy-solution",
                "content": "The solution is little bit longer but it is easy to understand. I have  used monotonic stack to solve this problem. Please don\\'t downvote if you find this lengthy, this was the solution which I attempted at the time of contest.\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        stack<int> even,odd; //monotonic stacks\\n        //even stack is maintained in decreasing order\\n        //odd stack is maintained in increasing order\\n        stack<int> temp;\\n        vector<int> res;\\n        for(int i =0; i<nums.size(); i++){\\n            if((i & 1)==0){\\n                if(even.empty()) even.push(nums[i]);\\n                else if(even.top()>=nums[i]) even.push(nums[i]);\\n                else{\\n                    while(!even.empty() && even.top()<nums[i]){\\n                       temp.push(even.top());\\n                        even.pop();\\n                    }\\n                    even.push(nums[i]);\\n                    while(!temp.empty()){\\n                        even.push(temp.top());\\n                        temp.pop();\\n                    }\\n                }\\n            }\\n            else{\\n                if(odd.empty()) odd.push(nums[i]);\\n                else if(odd.top()<=nums[i]) odd.push(nums[i]);\\n                else{\\n                     while(!odd.empty() && odd.top()>nums[i]){\\n                       temp.push(odd.top());\\n                        odd.pop();\\n                    }\\n                    odd.push(nums[i]);\\n                    while(!temp.empty()){\\n                        odd.push(temp.top());\\n                        temp.pop();\\n                    }\\n                }\\n            }\\n        }\\n        \\n        //rearranging the values according to the given conditions\\n        for(int i=0; !even.empty() && !odd.empty(); i++){\\n            if((i&1)==0){\\n                res.push_back(even.top());\\n                even.pop();\\n            }\\n            else{\\n                res.push_back(odd.top());\\n                odd.pop();\\n            }\\n        }\\n        while(!even.empty()){\\n            res.push_back(even.top());\\n            even.pop();\\n        }\\n        \\n        while(!odd.empty()){\\n            res.push_back(odd.top());\\n            odd.pop();\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        stack<int> even,odd; //monotonic stacks\\n        //even stack is maintained in decreasing order\\n        //odd stack is maintained in increasing order\\n        stack<int> temp;\\n        vector<int> res;\\n        for(int i =0; i<nums.size(); i++){\\n            if((i & 1)==0){\\n                if(even.empty()) even.push(nums[i]);\\n                else if(even.top()>=nums[i]) even.push(nums[i]);\\n                else{\\n                    while(!even.empty() && even.top()<nums[i]){\\n                       temp.push(even.top());\\n                        even.pop();\\n                    }\\n                    even.push(nums[i]);\\n                    while(!temp.empty()){\\n                        even.push(temp.top());\\n                        temp.pop();\\n                    }\\n                }\\n            }\\n            else{\\n                if(odd.empty()) odd.push(nums[i]);\\n                else if(odd.top()<=nums[i]) odd.push(nums[i]);\\n                else{\\n                     while(!odd.empty() && odd.top()>nums[i]){\\n                       temp.push(odd.top());\\n                        odd.pop();\\n                    }\\n                    odd.push(nums[i]);\\n                    while(!temp.empty()){\\n                        odd.push(temp.top());\\n                        temp.pop();\\n                    }\\n                }\\n            }\\n        }\\n        \\n        //rearranging the values according to the given conditions\\n        for(int i=0; !even.empty() && !odd.empty(); i++){\\n            if((i&1)==0){\\n                res.push_back(even.top());\\n                even.pop();\\n            }\\n            else{\\n                res.push_back(odd.top());\\n                odd.pop();\\n            }\\n        }\\n        while(!even.empty()){\\n            res.push_back(even.top());\\n            even.pop();\\n        }\\n        \\n        while(!odd.empty()){\\n            res.push_back(odd.top());\\n            odd.pop();\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748670,
                "title": "javascript-2164-sort-even-and-odd-indices-independently",
                "content": "---\\n\\n- **Biweekly Contest 71 answers**\\n  - Q1\\n    - https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/discuss/1748621/JavaScript-2160.-Minimum-Sum-of-Four-Digit-Number-After-Splitting-Digits\\n  - Q2\\n    - https://leetcode.com/problems/partition-array-according-to-given-pivot/discuss/1748639/JavaScript-2161.-Partition-Array-According-to-Given-Pivot\\n  - Q3\\n    - https://leetcode.com/problems/minimum-cost-to-set-cooking-time/discuss/1748347/JavaScript-2162.-Minimum-Cost-to-Set-Cooking-Time\\n\\n---\\n\\n- **Weekly Contest 279 answers**\\n  - Q1\\n    - https://leetcode.com/problems/sort-even-and-odd-indices-independently/discuss/1748670/JavaScript-2164.-Sort-Even-and-Odd-Indices-Independently\\n    - **below**\\n  - Q2\\n    - https://leetcode.com/problems/smallest-value-of-the-rearranged-number/discuss/1748702/JavaScript-2165.-Smallest-Value-of-the-Rearranged-Number\\n  - Q3\\n    - https://leetcode.com/problems/design-bitset/discuss/1748711/JavaScript-2166.-Design-Bitset\\n  - Started at 0:30:00 ( also, not attempting Q4 since last 10 contests )\\n![image](https://assets.leetcode.com/users/images/0ffa9b8d-9586-4063-8624-bd14bb07d64d_1644122378.3262818.png)\\n\\n---\\n\\nHope it is simple to understand.\\n\\n---\\n\\n```\\nvar sortEvenOdd = function (nums) {\\n    let n = nums.length;\\n\\n    let nums1 = [];                   // values at odd  indexes\\n    let nums2 = [];                   // values at even indexes\\n    for (let i = 0; i < n; i++) {\\n        if (i % 2) {\\n            nums1.push(nums[i]);\\n        } else {\\n            nums2.push(nums[i]);\\n        }\\n    }\\n    nums1.sort((a, b) => b - a);      // same or descending\\n    nums2.sort((a, b) => a - b);      // same or  ascending\\n\\n    for (let i = 0; i < n; i++) {\\n        if (i % 2) {\\n            nums[i] = nums1[Math.trunc(i / 2)];\\n        } else {\\n            nums[i] = nums2[i / 2];\\n        }\\n    }\\n    return nums;\\n};\\n```\\n\\n---\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar sortEvenOdd = function (nums) {\\n    let n = nums.length;\\n\\n    let nums1 = [];                   // values at odd  indexes\\n    let nums2 = [];                   // values at even indexes\\n    for (let i = 0; i < n; i++) {\\n        if (i % 2) {\\n            nums1.push(nums[i]);\\n        } else {\\n            nums2.push(nums[i]);\\n        }\\n    }\\n    nums1.sort((a, b) => b - a);      // same or descending\\n    nums2.sort((a, b) => a - b);      // same or  ascending\\n\\n    for (let i = 0; i < n; i++) {\\n        if (i % 2) {\\n            nums[i] = nums1[Math.trunc(i / 2)];\\n        } else {\\n            nums[i] = nums2[i / 2];\\n        }\\n    }\\n    return nums;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1748662,
                "title": "easy-js-javascript",
                "content": "```\\nvar sortEvenOdd = function(nums) {\\n    if (nums.length < 3) return nums;\\n    const evens = [];\\n    const odds = [];\\n    const res = [];\\n    \\n    for (let i = 0; i < nums.length; i++) {\\n        if (i % 2 === 0) evens.push(nums[i]);\\n        else odds.push(nums[i]);\\n    }\\n    \\n    evens.sort((a, b) => a - b);\\n    odds.sort((a, b) => b - a);\\n    \\n    for (let i = 0; i < evens.length; i++) {\\n        res.push(evens[i]);\\n        if (odds[i]) res.push(odds[i]);   \\n    }\\n    \\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar sortEvenOdd = function(nums) {\\n    if (nums.length < 3) return nums;\\n    const evens = [];\\n    const odds = [];\\n    const res = [];\\n    \\n    for (let i = 0; i < nums.length; i++) {\\n        if (i % 2 === 0) evens.push(nums[i]);\\n        else odds.push(nums[i]);\\n    }\\n    \\n    evens.sort((a, b) => a - b);\\n    odds.sort((a, b) => b - a);\\n    \\n    for (let i = 0; i < evens.length; i++) {\\n        res.push(evens[i]);\\n        if (odds[i]) res.push(odds[i]);   \\n    }\\n    \\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1748610,
                "title": "c-very-easy-and-readable-code",
                "content": "simply we make 2 vector and\\n differntiate values regarding their even or odd indices \\napply sort and descending sort\\n and its correct position\\n``` \\nvector<int> sortEvenOdd(vector<int>& nums) {\\n        if(nums.size()<=2)return nums;\\n        vector<int> ans(nums.size());\\n        vector<int>even,odd;\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0)even.push_back(nums[i]);\\n            else odd.push_back(nums[i]);\\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end(), greater<int>());\\n        int k=0,j=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0){\\n                ans[i]=even[k++];\\n            }else ans[i]=odd[j++];\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "Sorting"
                ],
                "code": "``` \\nvector<int> sortEvenOdd(vector<int>& nums) {\\n        if(nums.size()<=2)return nums;\\n        vector<int> ans(nums.size());\\n        vector<int>even,odd;\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0)even.push_back(nums[i]);\\n            else odd.push_back(nums[i]);\\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end(), greater<int>());\\n        int k=0,j=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0){\\n                ans[i]=even[k++];\\n            }else ans[i]=odd[j++];\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1748529,
                "title": "easy-to-do-this-in-python",
                "content": "My usual language of choice is C++, but for this problem Python is a better choice.\\n**Python 3**\\n```python\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        even, odd = sorted(nums[::2]), sorted(nums[1::2], reverse=True)\\n        return [i for t in zip(even, odd) for i in t] + ([even[-1]] if len(even) > len(odd) else [])\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        even, odd = sorted(nums[::2]), sorted(nums[1::2], reverse=True)\\n        return [i for t in zip(even, odd) for i in t] + ([even[-1]] if len(even) > len(odd) else [])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748524,
                "title": "c-solution-easy-method",
                "content": "```\\n\\n```class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n=nums.size();  //size\\n         vector<int>x,y,z;\\n        for(int i =0 ; i <n ;i++)\\n        {\\n            if(i%2==0)\\n                x.push_back(nums[i]);\\n            else y.push_back(nums[i]);\\n        }\\n        sort(begin(x),end(x));  //sorted\\n        sort(begin(y),end(y)); \\n        reverse(begin(y),end(y));\\n        for(int i = 0 ; i < x.size() ; i++){\\n            if(i<x.size())z.push_back(x[i]);  //compare\\n            if(i<y.size())z.push_back(y[i]);\\n        }\\n        return z;  //final output\\n        \\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array"
                ],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1748492,
                "title": "using-sort-and-extra-space",
                "content": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int>even;\\n        vector<int>odd;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i%2==0)\\n            {\\n                even.push_back(nums[i]);\\n            }\\n            else\\n            {\\n                odd.push_back(nums[i]);\\n            }\\n        }\\n        sort(even.begin(), even.end());\\n        sort(odd.begin(), odd.end(), greater<int>());\\n        int k1=0, k2=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i%2==0)\\n            {\\n                nums[i]=even[k1++];\\n            }\\n            else\\n            {\\n                nums[i]=odd[k2++];\\n            }\\n        }\\n        return nums;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int>even;\\n        vector<int>odd;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i%2==0)\\n            {\\n                even.push_back(nums[i]);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1748491,
                "title": "c-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> v1,v2;\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0)\\n                v2.push_back(nums[i]);\\n            else\\n                v1.push_back(nums[i]);\\n        }\\n        sort(v2.begin(),v2.end());\\n        sort(v1.begin(),v1.end(),greater<int>());\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0)\\n                nums[i]=v2[i/2];\\n            else\\n                nums[i]=v1[i/2];\\n        }\\n        return nums;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> v1,v2;\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0)\\n                v2.push_back(nums[i]);\\n            else\\n                v1.push_back(nums[i]);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1748459,
                "title": "python-easy-solution",
                "content": "## Python Easy to Understand Solution\\n\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        even_list = []\\n        odd_list = []\\n        for i in range(len(nums)):\\n            if((i%2)==0):\\n                even_list.append(nums[i])\\n            else:\\n                odd_list.append(nums[i])\\n        even_list = sorted(even_list)\\n        odd_list = sorted(odd_list, reverse = True)\\n        i=0; j=0\\n        for m in range(len(nums)):\\n            if m&1:\\n                nums[m] = odd_list[j]\\n                j+=1\\n            else:\\n                nums[m] = even_list[i]\\n                i+=1\\n        return nums\\n                \\n            \\n```\\n\\nUpvote if you find this useful.\\nThanks",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        even_list = []\\n        odd_list = []\\n        for i in range(len(nums)):\\n            if((i%2)==0):\\n                even_list.append(nums[i])\\n            else:\\n                odd_list.append(nums[i])\\n        even_list = sorted(even_list)\\n        odd_list = sorted(odd_list, reverse = True)\\n        i=0; j=0\\n        for m in range(len(nums)):\\n            if m&1:\\n                nums[m] = odd_list[j]\\n                j+=1\\n            else:\\n                nums[m] = even_list[i]\\n                i+=1\\n        return nums\\n                \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748430,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>&nums) {\\n    \\tint n=nums.size();\\n    \\tif(n==1 || n==2) return nums;\\n    \\tvector<int>even;\\n    \\tvector<int>odd;\\n    \\tfor(int i=0;i<n;i++) {\\n    \\t\\tif(i%2==0) {\\n    \\t\\t\\teven.push_back(nums[i]);\\n    \\t\\t}\\n    \\t\\telse {\\n    \\t\\t\\todd.push_back(nums[i]);\\n    \\t\\t}\\n    \\t}\\n    \\tsort(even.begin(), even.end());\\n    \\tsort(odd.rbegin(),odd.rend());\\n    \\tnums.clear();\\n    \\tint x=0,y=0;\\n    \\tfor(int i=0;i<n;i++) {\\n    \\t\\tif(i%2==0) {\\n    \\t\\t\\tnums.push_back(even[x]);\\n    \\t\\t\\tx++;\\n    \\t\\t}\\n    \\t\\telse {\\n    \\t\\t\\tnums.push_back(odd[y]);\\n    \\t\\t\\ty++;\\n    \\t\\t}\\n    \\t}\\n    \\treturn nums;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>&nums) {\\n    \\tint n=nums.size();\\n    \\tif(n==1 || n==2) return nums;\\n    \\tvector<int>even;\\n    \\tvector<int>odd;\\n    \\tfor(int i=0;i<n;i++) {\\n    \\t\\tif(i%2==0) {\\n    \\t\\t\\teven.push_back(nums[i]);\\n    \\t\\t}\\n    \\t\\telse {\\n    \\t\\t\\todd.push_back(nums[i]);\\n    \\t\\t}\\n    \\t}\\n    \\tsort(even.begin(), even.end());\\n    \\tsort(odd.rbegin(),odd.rend());\\n    \\tnums.clear();\\n    \\tint x=0,y=0;\\n    \\tfor(int i=0;i<n;i++) {\\n    \\t\\tif(i%2==0) {\\n    \\t\\t\\tnums.push_back(even[x]);\\n    \\t\\t\\tx++;\\n    \\t\\t}\\n    \\t\\telse {\\n    \\t\\t\\tnums.push_back(odd[y]);\\n    \\t\\t\\ty++;\\n    \\t\\t}\\n    \\t}\\n    \\treturn nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084629,
                "title": "100-faster-javascript-code-easy-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar sortEvenOdd = function(nums) {\\n    let even=[]\\n    let odd=[]\\n    for (i = 0; i <=nums.length; i++) { \\n            if(i%2==0){\\n                even.push(nums[i])\\n            }else{\\n                odd.push(nums[i])\\n            }\\n    }\\n \\n     even.sort((a,b)=>a-b)\\n    odd.sort((a,b)=>b-a)\\n    let resu=[]\\n    \\n    for (i = 0; i <=nums.length; i++) {\\n         if(even[i]!=undefined)\\n          resu.push(even[i]);\\n         if(odd[i]!=undefined)\\n          resu.push(odd[i]);\\n    }\\n    return resu\\n};\\n\\nplease upvote\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar sortEvenOdd = function(nums) {\\n    let even=[]\\n    let odd=[]\\n    for (i = 0; i <=nums.length; i++) { \\n            if(i%2==0){\\n                even.push(nums[i])\\n            }else{\\n                odd.push(nums[i])\\n            }\\n    }\\n \\n     even.sort((a,b)=>a-b)\\n    odd.sort((a,b)=>b-a)\\n    let resu=[]\\n    \\n    for (i = 0; i <=nums.length; i++) {\\n         if(even[i]!=undefined)\\n          resu.push(even[i]);\\n         if(odd[i]!=undefined)\\n          resu.push(odd[i]);\\n    }\\n    return resu\\n};\\n\\nplease upvote\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4082573,
                "title": "python-solution-easy-to-understand-beats-90",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        even=[nums[i] for i in range(len(nums)) if i%2==0]\\n        odd=[nums[i] for i in range(len(nums)) if i%2!=0]\\n        odd.sort(reverse=True)\\n        even.sort()\\n        l=[]\\n        i=0\\n        while len(l)!=len(nums):\\n            try :\\n                l.append(even[i])\\n            except:\\n                pass\\n            try :\\n                l.append(odd[i])\\n            except:\\n                pass\\n            i+=1\\n        return l\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        even=[nums[i] for i in range(len(nums)) if i%2==0]\\n        odd=[nums[i] for i in range(len(nums)) if i%2!=0]\\n        odd.sort(reverse=True)\\n        even.sort()\\n        l=[]\\n        i=0\\n        while len(l)!=len(nums):\\n            try :\\n                l.append(even[i])\\n            except:\\n                pass\\n            try :\\n                l.append(odd[i])\\n            except:\\n                pass\\n            i+=1\\n        return l\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4081267,
                "title": "python-easy-solution-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        i=0\\n        j=1\\n        n=len(nums)\\n        while i<n or j<n:\\n            k=i+2\\n            while k<n:\\n                if nums[i]>nums[k]:\\n                    nums[i],nums[k]=nums[k],nums[i]\\n                k+=2\\n            m=j+2\\n            while m<n:\\n                if nums[j]<nums[m]:\\n                    nums[j],nums[m]=nums[m],nums[j]\\n                m+=2\\n            i+=2\\n            j+=2\\n        return nums\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        i=0\\n        j=1\\n        n=len(nums)\\n        while i<n or j<n:\\n            k=i+2\\n            while k<n:\\n                if nums[i]>nums[k]:\\n                    nums[i],nums[k]=nums[k],nums[i]\\n                k+=2\\n            m=j+2\\n            while m<n:\\n                if nums[j]<nums[m]:\\n                    nums[j],nums[m]=nums[m],nums[j]\\n                m+=2\\n            i+=2\\n            j+=2\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079743,
                "title": "simple-python-solution-beat-92-in-both-time-and-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        arr1=[]\\n        arr2=[]\\n        arr3=[]\\n        c1=0\\n        c2=0\\n        for i in range(len(nums)):\\n            if i%2==1:\\n                arr1.append(nums[i])\\n            else:\\n                arr2.append(nums[i])\\n        arr1.sort(reverse=True)\\n        arr2.sort()\\n        for a in range(len(nums)):\\n            if a%2==1:\\n                arr3.append(arr1[c1])\\n                c1+=1\\n            else:\\n                arr3.append(arr2[c2])\\n                c2+=1\\n        return arr3        \\n               \\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        arr1=[]\\n        arr2=[]\\n        arr3=[]\\n        c1=0\\n        c2=0\\n        for i in range(len(nums)):\\n            if i%2==1:\\n                arr1.append(nums[i])\\n            else:\\n                arr2.append(nums[i])\\n        arr1.sort(reverse=True)\\n        arr2.sort()\\n        for a in range(len(nums)):\\n            if a%2==1:\\n                arr3.append(arr1[c1])\\n                c1+=1\\n            else:\\n                arr3.append(arr2[c2])\\n                c2+=1\\n        return arr3        \\n               \\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4075418,
                "title": "discuss",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        final int n = nums.length;\\n        int[] ans = new int[n];\\n        int[] evenCount = new int[101];\\n        int[] oddCount = new int[101];\\n\\n        for (int i = 0; i < n; ++i)\\n        if ((i & 1) == 1)\\n            ++oddCount[nums[i]];\\n        else\\n            ++evenCount[nums[i]];\\n\\n        int ansIndex = 0;\\n        for (int i = 1; i < 101; ++i)\\n        while (evenCount[i]-- > 0) {\\n            ans[ansIndex] = i;\\n            ansIndex += 2;\\n        }\\n\\n        ansIndex = 1;\\n        for (int i = 100; i > 0; --i)\\n        while (oddCount[i]-- > 0) {\\n            ans[ansIndex] = i;\\n            ansIndex += 2;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        final int n = nums.length;\\n        int[] ans = new int[n];\\n        int[] evenCount = new int[101];\\n        int[] oddCount = new int[101];\\n\\n        for (int i = 0; i < n; ++i)\\n        if ((i & 1) == 1)\\n            ++oddCount[nums[i]];\\n        else\\n            ++evenCount[nums[i]];\\n\\n        int ansIndex = 0;\\n        for (int i = 1; i < 101; ++i)\\n        while (evenCount[i]-- > 0) {\\n            ans[ansIndex] = i;\\n            ansIndex += 2;\\n        }\\n\\n        ansIndex = 1;\\n        for (int i = 100; i > 0; --i)\\n        while (oddCount[i]-- > 0) {\\n            ans[ansIndex] = i;\\n            ansIndex += 2;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069976,
                "title": "one-line-solution",
                "content": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        return filter(truth, reduce(concat, zip_longest(sorted(islice(nums, 0, None, 2)), sorted(islice(nums, 1, None, 2), reverse= True))))       \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        return filter(truth, reduce(concat, zip_longest(sorted(islice(nums, 0, None, 2)), sorted(islice(nums, 1, None, 2), reverse= True))))       \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4056664,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        odd,even=[],[]\\n        for i in range(len(nums)):\\n            if i&1: odd.append(nums[i])\\n            else: even.append(nums[i])\\n        even.sort()\\n        odd.sort(reverse=True)\\n        j=0\\n        for i in range(len(nums)):\\n            if i&1:\\n                nums[i]=odd[j]\\n                j+=1\\n            else:\\n                nums[i]=even[j]\\n        return nums\\n```\\n***Hope it helps...!!*** \\uD83D\\uDE07\\u270C\\uFE0F",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        odd,even=[],[]\\n        for i in range(len(nums)):\\n            if i&1: odd.append(nums[i])\\n            else: even.append(nums[i])\\n        even.sort()\\n        odd.sort(reverse=True)\\n        j=0\\n        for i in range(len(nums)):\\n            if i&1:\\n                nums[i]=odd[j]\\n                j+=1\\n            else:\\n                nums[i]=even[j]\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4052816,
                "title": "cpp-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) \\n    {\\n        int n = nums.size();\\n        vector<int> even , odd;    \\n        for(int i = 0 ; i < n ; i++)\\n        {\\n            if(i%2 == 0) even.push_back(nums[i]);\\n            else odd.push_back(nums[i]);\\n        }\\n        sort(even.begin() , even.end());\\n        sort(odd.begin() , odd.end() , greater<int>());\\n        int evenPointer = 0 , oddPointer = 0;\\n        for(int i = 0 ; i < n ; i++)\\n        {\\n            if(i%2 == 0)\\n            {\\n                nums[i] = even[evenPointer++];\\n            }\\n            else\\n            {\\n                nums[i] = odd[oddPointer++];\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) \\n    {\\n        int n = nums.size();\\n        vector<int> even , odd;    \\n        for(int i = 0 ; i < n ; i++)\\n        {\\n            if(i%2 == 0) even.push_back(nums[i]);\\n            else odd.push_back(nums[i]);\\n        }\\n        sort(even.begin() , even.end());\\n        sort(odd.begin() , odd.end() , greater<int>());\\n        int evenPointer = 0 , oddPointer = 0;\\n        for(int i = 0 ; i < n ; i++)\\n        {\\n            if(i%2 == 0)\\n            {\\n                nums[i] = even[evenPointer++];\\n            }\\n            else\\n            {\\n                nums[i] = odd[oddPointer++];\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4051881,
                "title": "c-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n log n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        \\n      vector<int> v1,v2;\\n      for(int i=0;i<nums.size();i++){\\n          if(i%2==0)\\n          v1.push_back(nums[i]);\\n          else\\n           v2.push_back(nums[i]);\\n      }\\n\\n      sort(v1.begin(),v1.end());\\n      sort(v2.begin(),v2.end(),greater<int>());\\n     \\n      int j=0,k=0;\\n     for(int i=0;i<nums.size();i++)\\n     {\\n         if(i%2==0)\\n          {nums[i]=v1[j]; j++;}\\n          else \\n          {nums[i]=v2[k]; k++;}\\n     }\\n     return nums;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        \\n      vector<int> v1,v2;\\n      for(int i=0;i<nums.size();i++){\\n          if(i%2==0)\\n          v1.push_back(nums[i]);\\n          else\\n           v2.push_back(nums[i]);\\n      }\\n\\n      sort(v1.begin(),v1.end());\\n      sort(v2.begin(),v2.end(),greater<int>());\\n     \\n      int j=0,k=0;\\n     for(int i=0;i<nums.size();i++)\\n     {\\n         if(i%2==0)\\n          {nums[i]=v1[j]; j++;}\\n          else \\n          {nums[i]=v2[k]; k++;}\\n     }\\n     return nums;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4048671,
                "title": "beginner-friendly-c-easy",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n          int n=nums.size();\\n       vector<int>even,odd,ans;\\n     \\n       for(int i=0;i<n;++i) \\n       {\\n           if(i%2==0)\\n           even.push_back(nums[i]);\\n           else\\n           odd.push_back(nums[i]);\\n       }\\n       sort(even.begin(),even.end());\\n       sort(odd.begin(),odd.end(),greater<int>());\\n       int i=0,j=0,k=0;\\n       while(i<n)\\n       {\\n           if(i%2==0)\\n           {\\n               ans.push_back(even[j++]);\\n               i++;\\n           }\\n           else\\n           {\\n               ans.push_back(odd[k++]);\\n               i++;\\n           }\\n       }\\n       return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n          int n=nums.size();\\n       vector<int>even,odd,ans;\\n     \\n       for(int i=0;i<n;++i) \\n       {\\n           if(i%2==0)\\n           even.push_back(nums[i]);\\n           else\\n           odd.push_back(nums[i]);\\n       }\\n       sort(even.begin(),even.end());\\n       sort(odd.begin(),odd.end(),greater<int>());\\n       int i=0,j=0,k=0;\\n       while(i<n)\\n       {\\n           if(i%2==0)\\n           {\\n               ans.push_back(even[j++]);\\n               i++;\\n           }\\n           else\\n           {\\n               ans.push_back(odd[k++]);\\n               i++;\\n           }\\n       }\\n       return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4047908,
                "title": "in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1) I have just used arraylist to store even odd elements, then sorting, reversing the odd and sorting even, then finally clearing the original arraylist and adding elements in it\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n    \\n        List<Integer> s1 = new ArrayList<>();\\n        for (int num : nums) {\\n            s1.add(num);\\n        }\\n\\n        ArrayList<Integer> even = new ArrayList<>();\\n        ArrayList<Integer> odd = new ArrayList<>();\\n\\n        for (int i = 0; i < s1.size(); i++) {\\n            int num = s1.get(i);\\n            if (i % 2 == 0) {\\n                even.add(num);\\n            } else {\\n                odd.add(num);\\n            }\\n        }\\n\\n        Collections.sort(odd, Collections.reverseOrder());\\n        Collections.sort(even);\\n\\n        int[] result = new int[s1.size()];\\n\\n        int oddIndex = 0;\\n        int evenIndex = 0;\\n\\n        for (int i = 0; i < s1.size(); i++) {\\n            if (i % 2 == 0) {\\n                result[i] = even.get(evenIndex);\\n                evenIndex++;\\n            } else {\\n                result[i] = odd.get(oddIndex);\\n                oddIndex++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n    \\n        List<Integer> s1 = new ArrayList<>();\\n        for (int num : nums) {\\n            s1.add(num);\\n        }\\n\\n        ArrayList<Integer> even = new ArrayList<>();\\n        ArrayList<Integer> odd = new ArrayList<>();\\n\\n        for (int i = 0; i < s1.size(); i++) {\\n            int num = s1.get(i);\\n            if (i % 2 == 0) {\\n                even.add(num);\\n            } else {\\n                odd.add(num);\\n            }\\n        }\\n\\n        Collections.sort(odd, Collections.reverseOrder());\\n        Collections.sort(even);\\n\\n        int[] result = new int[s1.size()];\\n\\n        int oddIndex = 0;\\n        int evenIndex = 0;\\n\\n        for (int i = 0; i < s1.size(); i++) {\\n            if (i % 2 == 0) {\\n                result[i] = even.get(evenIndex);\\n                evenIndex++;\\n            } else {\\n                result[i] = odd.get(oddIndex);\\n                oddIndex++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4035347,
                "title": "beats-easy-beginner-friendly-solution-simple-and-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int n=nums.length;\\n        List<Integer>e=new ArrayList();\\n        List<Integer>o=new ArrayList();\\n        for(int i=0;i<n;i++){\\n            if(i%2==0){\\n                e.add(nums[i]);\\n            }\\n            else{\\n                o.add(nums[i]);\\n            }\\n        }\\n        Collections.sort(e);\\n        Collections.sort(o);\\n        Collections.reverse(o);\\n        int a=0,b=0;\\n        for(int i=0;i<n;i++){\\n            if(i%2==0){\\n                nums[i]=e.get(a++);\\n            }\\n            else{\\n                nums[i]=o.get(b++);\\n            }\\n        }\\n        return nums;\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int n=nums.length;\\n        List<Integer>e=new ArrayList();\\n        List<Integer>o=new ArrayList();\\n        for(int i=0;i<n;i++){\\n            if(i%2==0){\\n                e.add(nums[i]);\\n            }\\n            else{\\n                o.add(nums[i]);\\n            }\\n        }\\n        Collections.sort(e);\\n        Collections.sort(o);\\n        Collections.reverse(o);\\n        int a=0,b=0;\\n        for(int i=0;i<n;i++){\\n            if(i%2==0){\\n                nums[i]=e.get(a++);\\n            }\\n            else{\\n                nums[i]=o.get(b++);\\n            }\\n        }\\n        return nums;\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023378,
                "title": "simple-and-easy-to-understand-solution-in-c-beats-90-users-of-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> odd,even;\\n        int i,o,e;\\n        for(i=0;i<nums.size();i++)\\n        {\\n            if(i%2==0)\\n            {\\n                even.push_back(nums[i]);\\n            }\\n            else\\n            {\\n                odd.push_back(nums[i]);\\n            }\\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end());\\n        e=0;\\n        o=odd.size()-1;\\n        for(i=0;i<nums.size();i++)\\n        {\\n            if(i%2==0)\\n            {\\n                nums[i]=even[e];\\n                e++;\\n            }\\n            else\\n            {\\n                nums[i]=odd[o];\\n                o--;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> odd,even;\\n        int i,o,e;\\n        for(i=0;i<nums.size();i++)\\n        {\\n            if(i%2==0)\\n            {\\n                even.push_back(nums[i]);\\n            }\\n            else\\n            {\\n                odd.push_back(nums[i]);\\n            }\\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end());\\n        e=0;\\n        o=odd.size()-1;\\n        for(i=0;i<nums.size();i++)\\n        {\\n            if(i%2==0)\\n            {\\n                nums[i]=even[e];\\n                e++;\\n            }\\n            else\\n            {\\n                nums[i]=odd[o];\\n                o--;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4017734,
                "title": "easy-solution-if-you-have-any-doubt-contact-instagram-thalapathysandy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n         for(int i=0;i<nums.length;i+=2){\\n        for(int j=i+2;j<nums.length;j+=2){\\n            if(nums[i]>=nums[j]){\\n                int temp=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n            }\\n        }\\n    }\\n    for(int i=1;i<nums.length;i+=2){\\n        for(int j=i+2;j<nums.length;j+=2){\\n            if(nums[i]<=nums[j]){\\n                int temp=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n            }\\n        }\\n    }\\n    return nums;\\n}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n         for(int i=0;i<nums.length;i+=2){\\n        for(int j=i+2;j<nums.length;j+=2){\\n            if(nums[i]>=nums[j]){\\n                int temp=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n            }\\n        }\\n    }\\n    for(int i=1;i<nums.length;i+=2){\\n        for(int j=i+2;j<nums.length;j+=2){\\n            if(nums[i]<=nums[j]){\\n                int temp=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n            }\\n        }\\n    }\\n    return nums;\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4007125,
                "title": "beats-100-00-of-users-with-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> a;\\n        vector<int> b;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(i%2==0)\\n                a.push_back(nums[i]);\\n            else\\n                b.push_back(nums[i]);\\n        }\\n        sort(a.begin(),a.end(),greater<int>());\\n        sort(b.begin(),b.end());\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(i%2==0)\\n            {\\n                nums[i]=a.back();\\n                a.pop_back();\\n            }\\n            else\\n            {\\n                nums[i]=b.back();\\n                b.pop_back();\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> a;\\n        vector<int> b;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(i%2==0)\\n                a.push_back(nums[i]);\\n            else\\n                b.push_back(nums[i]);\\n        }\\n        sort(a.begin(),a.end(),greater<int>());\\n        sort(b.begin(),b.end());\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(i%2==0)\\n            {\\n                nums[i]=a.back();\\n                a.pop_back();\\n            }\\n            else\\n            {\\n                nums[i]=b.back();\\n                b.pop_back();\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4003569,
                "title": "best-sollution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        ArrayList<Integer>list = new ArrayList<>();\\n        ArrayList<Integer>list1 = new ArrayList<>();\\n\\n        for(int i=0;i<nums.length;i++){\\n            if(i%2==0){\\n                list.add(nums[i]);\\n            }\\n            else{\\n                list1.add(nums[i]);\\n            }\\n        }\\n\\n        int result[] = new int[nums.length];\\n        int k = 0;\\n        Collections.sort(list);\\n        Collections.sort(list1);\\n        Collections.reverse(list1);\\n\\n       for(int i:list){\\n           result[k] = i;\\n           k = k+2;\\n       }   \\n\\n       k = 1;\\n       for(int i:list1){\\n           result[k] = i;\\n           k = k+2;\\n       }\\n\\n       return result;\\n       \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        ArrayList<Integer>list = new ArrayList<>();\\n        ArrayList<Integer>list1 = new ArrayList<>();\\n\\n        for(int i=0;i<nums.length;i++){\\n            if(i%2==0){\\n                list.add(nums[i]);\\n            }\\n            else{\\n                list1.add(nums[i]);\\n            }\\n        }\\n\\n        int result[] = new int[nums.length];\\n        int k = 0;\\n        Collections.sort(list);\\n        Collections.sort(list1);\\n        Collections.reverse(list1);\\n\\n       for(int i:list){\\n           result[k] = i;\\n           k = k+2;\\n       }   \\n\\n       k = 1;\\n       for(int i:list1){\\n           result[k] = i;\\n           k = k+2;\\n       }\\n\\n       return result;\\n       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002114,
                "title": "selection-sort-approach-java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->Since the question requires us to sort the array we need to use sort method.\\n[Here selection sort].\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere we run a \"selection\" sort for all the even indices (i.e, 0 ,2 ,4.......so on) and arrange them in ascending order.\\nSimilarly we run a \"selection\" sort for odd indices (i.e, 1 , 3 , 5 .....so on) and arrange them in decreasing order.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int n = nums.length;\\n\\n//selection sort for odd indices\\n        for (int i = 0; i < n; i += 2) {\\n            int minIndex = i;\\n            for (int j = i + 2; j < n; j += 2) {\\n                if (nums[j] < nums[minIndex]) {\\n                    minIndex = j;\\n                }\\n            }\\n//swapping of elements when required\\n            if (minIndex != i) {\\n                int temp = nums[i];\\n                nums[i] = nums[minIndex];\\n                nums[minIndex] = temp;\\n            }\\n        }\\n//selection sort of even indices\\n        for (int i = 1; i < n; i += 2) {\\n            int maxIndex = i;\\n            for (int j = i + 2; j < n; j += 2) {\\n                if (nums[j] > nums[maxIndex]) {\\n                    maxIndex = j;\\n                }\\n            }\\n//swapping of elements when required\\n            if (maxIndex != i) {\\n                int temp = nums[i];\\n                nums[i] = nums[maxIndex];\\n                nums[maxIndex] = temp;\\n            }\\n        }\\n\\n        return nums;\\n    }\\n}\\n```\\nPLEASE UP-VOTE :)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int n = nums.length;\\n\\n//selection sort for odd indices\\n        for (int i = 0; i < n; i += 2) {\\n            int minIndex = i;\\n            for (int j = i + 2; j < n; j += 2) {\\n                if (nums[j] < nums[minIndex]) {\\n                    minIndex = j;\\n                }\\n            }\\n//swapping of elements when required\\n            if (minIndex != i) {\\n                int temp = nums[i];\\n                nums[i] = nums[minIndex];\\n                nums[minIndex] = temp;\\n            }\\n        }\\n//selection sort of even indices\\n        for (int i = 1; i < n; i += 2) {\\n            int maxIndex = i;\\n            for (int j = i + 2; j < n; j += 2) {\\n                if (nums[j] > nums[maxIndex]) {\\n                    maxIndex = j;\\n                }\\n            }\\n//swapping of elements when required\\n            if (maxIndex != i) {\\n                int temp = nums[i];\\n                nums[i] = nums[maxIndex];\\n                nums[maxIndex] = temp;\\n            }\\n        }\\n\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4001265,
                "title": "ruby-with-2-heap",
                "content": "# Intuition\\nUse 2 heap, one is max heap and the other is min heap\\n\\n\\n# Complexity\\n- Time complexity:\\nO(NlogN)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\n# @param {Integer[]} nums\\n# @return {Integer[]}\\ndef sort_even_odd(nums)\\n    min, max = MinHeap.new(), MaxHeap.new()\\n    nums.each_with_index do|n,i|\\n        if i%2 == 0\\n            min.push(n)\\n        else\\n            max.push(n)\\n        end\\n    end\\n\\n    res = []\\n    nums.each_with_index do|n,i|\\n        if i%2 == 0\\n            res << min.pop\\n        else\\n            res << max.pop\\n        end\\n    end\\n\\n    res \\nend\\n```",
                "solutionTags": [
                    "Ruby",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n# @param {Integer[]} nums\\n# @return {Integer[]}\\ndef sort_even_odd(nums)\\n    min, max = MinHeap.new(), MaxHeap.new()\\n    nums.each_with_index do|n,i|\\n        if i%2 == 0\\n            min.push(n)\\n        else\\n            max.push(n)\\n        end\\n    end\\n\\n    res = []\\n    nums.each_with_index do|n,i|\\n        if i%2 == 0\\n            res << min.pop\\n        else\\n            res << max.pop\\n        end\\n    end\\n\\n    res \\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3994534,
                "title": "easy-go-golang-solution",
                "content": "```\\nfunc sortEvenOdd(nums []int) []int {\\n        n := len(nums)\\n\\n        if n <= 2 {\\n                return nums\\n        }\\n\\n        for i := 0; i < n-2; i += 2 {\\n                curEven := nums[i]\\n                curOdd := nums[i+1]\\n\\n                for j := i + 2; j < n; j += 2 {\\n                        nextEven := nums[j]\\n                        if curEven > nextEven {\\n                                nums[i], nums[j] = nextEven, curEven\\n                                curEven = nextEven\\n                        }\\n\\n                        if j+1 >= n {\\n                                continue\\n                        }\\n\\n                        nextOdd := nums[j+1]\\n                        if curOdd < nextOdd {\\n                                nums[i+1], nums[j+1] = nums[j+1], nums[i+1]\\n                                curOdd = nextOdd\\n                        }\\n                }\\n        }\\n\\n        return nums\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc sortEvenOdd(nums []int) []int {\\n        n := len(nums)\\n\\n        if n <= 2 {\\n                return nums\\n        }\\n\\n        for i := 0; i < n-2; i += 2 {\\n                curEven := nums[i]\\n                curOdd := nums[i+1]\\n\\n                for j := i + 2; j < n; j += 2 {\\n                        nextEven := nums[j]\\n                        if curEven > nextEven {\\n                                nums[i], nums[j] = nextEven, curEven\\n                                curEven = nextEven\\n                        }\\n\\n                        if j+1 >= n {\\n                                continue\\n                        }\\n\\n                        nextOdd := nums[j+1]\\n                        if curOdd < nextOdd {\\n                                nums[i+1], nums[j+1] = nums[j+1], nums[i+1]\\n                                curOdd = nextOdd\\n                        }\\n                }\\n        }\\n\\n        return nums\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3990469,
                "title": "java-readable-interview",
                "content": "\\t//feel free to drop your doubts, happy to discuss!\\n\\tclass Solution {\\n\\t\\tpublic int[] sortEvenOdd(int[] nums) {\\n\\t\\t\\tArrayList<Integer> odd = new ArrayList<>();\\n\\t\\t\\tArrayList<Integer> even = new ArrayList<>();\\n\\n\\t\\t\\tfor(int i=0; i<nums.length; i++){\\n\\t\\t\\t\\tif(i%2 ==0) even.add(nums[i]);\\n\\t\\t\\t\\telse odd.add(nums[i]);\\n\\t\\t\\t}\\n\\t\\t\\tCollections.sort(odd);\\n\\t\\t\\tCollections.reverse(odd);\\n\\t\\t\\tCollections.sort(even);\\n\\t\\t\\tint ei =0, oi=0;\\n\\t\\t\\tfor(int i=0; i<nums.length; i++){\\n\\t\\t\\t\\tif(i%2 ==0) nums[i] = even.get(ei++);\\n\\t\\t\\t\\telse nums[i] = odd.get(oi++);\\n\\t\\t\\t}\\n\\t\\t\\treturn nums;\\n\\t\\t}\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\t\\tpublic int[] sortEvenOdd(int[] nums) {\\n\\t\\t\\tArrayList<Integer> odd = new ArrayList<>();\\n\\t\\t\\tArrayList<Integer> even = new ArrayList<>();\\n\\n\\t\\t\\tfor(int i=0; i<nums.length; i++){\\n\\t\\t\\t\\tif(i%2 ==0) even.add(nums[i]);\\n\\t\\t\\t\\telse odd.add(nums[i]);\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3958675,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        even, odd = [], []\\n\\n        for i in range(len(nums)):\\n            if i % 2 == 0:\\n                even.append(nums[i])\\n            else:\\n                odd.append(nums[i])\\n        \\n        even.sort()\\n        odd.sort(reverse=True)\\n\\n        result = []\\n\\n        i,j=0,0\\n\\n        while i < len(nums):\\n            if i < len(even):\\n                result.append(even[i])\\n            if i < len(odd):\\n                result.append(odd[i])\\n            i += 1\\n\\n        return result\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        even, odd = [], []\\n\\n        for i in range(len(nums)):\\n            if i % 2 == 0:\\n                even.append(nums[i])\\n            else:\\n                odd.append(nums[i])\\n        \\n        even.sort()\\n        odd.sort(reverse=True)\\n\\n        result = []\\n\\n        i,j=0,0\\n\\n        while i < len(nums):\\n            if i < len(even):\\n                result.append(even[i])\\n            if i < len(odd):\\n                result.append(odd[i])\\n            i += 1\\n\\n        return result\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3958073,
                "title": "python-eassy-solution",
                "content": "# Python Eassy Solution\\n\\n# Runtime\\n- 59ms\\n- Beats 71.17%of users with Python3\\n# Memory\\n- 16.30MB\\n- Beats 39.56%of users with Python3\\n\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        odd = []\\n        even = []\\n        res = [0]*len(nums)\\n\\n        if len(nums)>2:\\n            for i in range (0,len(nums)):\\n                if i % 2 == 0:\\n                    even.append(nums[i])\\n                else:\\n                    odd.append(nums[i])\\n            \\n            even.sort()\\n            odd.sort(reverse=True)\\n\\n            for i in range(0,len(res)):\\n                if i %2==0:\\n                    res[i] = even[i//2]\\n                else:\\n                    res[i] = odd[i//2]\\n            \\n            return(res)\\n        \\n        else:\\n            return(nums)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        odd = []\\n        even = []\\n        res = [0]*len(nums)\\n\\n        if len(nums)>2:\\n            for i in range (0,len(nums)):\\n                if i % 2 == 0:\\n                    even.append(nums[i])\\n                else:\\n                    odd.append(nums[i])\\n            \\n            even.sort()\\n            odd.sort(reverse=True)\\n\\n            for i in range(0,len(res)):\\n                if i %2==0:\\n                    res[i] = even[i//2]\\n                else:\\n                    res[i] = odd[i//2]\\n            \\n            return(res)\\n        \\n        else:\\n            return(nums)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3944842,
                "title": "c-easy-to-understand",
                "content": "\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> even;\\n        vector<int> odd;\\n         vector<int> total;\\n     //separate the elements odd indices and even indices \\n        for(int i=0;i<nums.size();i++){\\n        if(i%2==0){\\n            even.push_back(nums[i]);\\n        }else{\\n            odd.push_back(nums[i]);\\n        }\\n        //sort the element \\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.rbegin(),odd.rend());\\n         int j=0;\\n         int k=0;\\n         //join the element in new vector\\n         for(int i=0;i<nums.size();i++){\\n          if(i%2==0){\\n              total.push_back(even[j++]);\\n          }else{\\n              total.push_back(odd[k++]);\\n          }\\n               \\n            \\n         } \\n           \\n              \\n            \\n         \\n       return total;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> even;\\n        vector<int> odd;\\n         vector<int> total;\\n     //separate the elements odd indices and even indices \\n        for(int i=0;i<nums.size();i++){\\n        if(i%2==0){\\n            even.push_back(nums[i]);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3935375,
                "title": "using-list-comprehension-and-simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        eve=[nums[i] for i in range(0,len(nums)) if i%2==0];new=[]\\n        odd=[nums[i] for i in range(0,len(nums)) if i%2!=0]\\n        eve.sort()\\n        odd.sort()\\n        odd=list(reversed(odd))\\n        print(eve,odd)\\n        for i in range(0,len(nums)):\\n            if(i%2==0):\\n                new.append(eve[0])\\n                eve.remove(eve[0])\\n            else:\\n                new.append(odd[0])\\n                odd.remove(odd[0])\\n        return new\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        eve=[nums[i] for i in range(0,len(nums)) if i%2==0];new=[]\\n        odd=[nums[i] for i in range(0,len(nums)) if i%2!=0]\\n        eve.sort()\\n        odd.sort()\\n        odd=list(reversed(odd))\\n        print(eve,odd)\\n        for i in range(0,len(nums)):\\n            if(i%2==0):\\n                new.append(eve[0])\\n                eve.remove(eve[0])\\n            else:\\n                new.append(odd[0])\\n                odd.remove(odd[0])\\n        return new\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3932083,
                "title": "simple-intuitive-approach-in-python",
                "content": "```\\nclass Solution:\\n\\tdef sortEvenOdd(self, nums: List[int]) -> List[int]:\\n\\t# Create two lists to store the elements in odd and even indices separately\\n\\t\\todd, even = [], []\\n\\t\\tfor idx, num in enumerate(nums):\\n\\t\\t\\tif idx % 2== 0:\\n\\t\\t\\t\\teven.append(num)\\n\\t\\t\\telse:\\n\\t\\t\\t\\todd.append(num)\\n\\t\\t# Sort the odd indexed list in non-increasing and the even indexed in non-decreasing order\\n\\t\\todd.sort(reverse = True)\\n\\t\\teven.sort()\\n\\t\\t# Starting with the last index, check whether the index is even or odd, and pop out the elements from corresponding list (even list for even indices and odd list for odd indices)\\n\\t\\t# Replace the ith element in nums with the element from the corresponding odd or even list\\n\\t\\tfor i in range(len(nums) - 1, -1, -1):\\n\\t\\t\\tif i%2 == 1:\\n\\t\\t\\t\\tnums[i] = odd.pop()\\n\\t\\t\\telse:\\n\\t\\t\\t\\tnums[i] = even.pop()\\n\\t\\treturn nums\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n\\tdef sortEvenOdd(self, nums: List[int]) -> List[int]:\\n\\t# Create two lists to store the elements in odd and even indices separately\\n\\t\\todd, even = [], []\\n\\t\\tfor idx, num in enumerate(nums):\\n\\t\\t\\tif idx % 2== 0:\\n\\t\\t\\t\\teven.append(num)\\n\\t\\t\\telse:\\n\\t\\t\\t\\todd.append(num)\\n\\t\\t# Sort the odd indexed list in non-increasing and the even indexed in non-decreasing order\\n\\t\\todd.sort(reverse = True)\\n\\t\\teven.sort()\\n\\t\\t# Starting with the last index, check whether the index is even or odd, and pop out the elements from corresponding list (even list for even indices and odd list for odd indices)\\n\\t\\t# Replace the ith element in nums with the element from the corresponding odd or even list\\n\\t\\tfor i in range(len(nums) - 1, -1, -1):\\n\\t\\t\\tif i%2 == 1:\\n\\t\\t\\t\\tnums[i] = odd.pop()\\n\\t\\t\\telse:\\n\\t\\t\\t\\tnums[i] = even.pop()\\n\\t\\treturn nums\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3930674,
                "title": "solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        a=[]\\n        b=[]\\n        for i in range(0,len(nums)) :\\n            if i%2==0 :\\n                a.append(nums[i])\\n            else :\\n                b.append(nums[i])\\n        a.sort()\\n        b.sort()\\n        b.reverse()\\n        c=[]\\n        for i in range(0,len(nums)//2) :\\n            c.append(a[i])\\n            c.append(b[i])\\n        if len(nums)%2!=0 :\\n            c.append(a[len(a)-1])\\n        return c\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        a=[]\\n        b=[]\\n        for i in range(0,len(nums)) :\\n            if i%2==0 :\\n                a.append(nums[i])\\n            else :\\n                b.append(nums[i])\\n        a.sort()\\n        b.sort()\\n        b.reverse()\\n        c=[]\\n        for i in range(0,len(nums)//2) :\\n            c.append(a[i])\\n            c.append(b[i])\\n        if len(nums)%2!=0 :\\n            c.append(a[len(a)-1])\\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3913657,
                "title": "3-line-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        nums[::2] = sorted(nums[::2])\\n        nums[1::2] = sorted(nums[1::2], reverse = True)\\n        return nums\\n    \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        nums[::2] = sorted(nums[::2])\\n        nums[1::2] = sorted(nums[1::2], reverse = True)\\n        return nums\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3909650,
                "title": "java-solution-using-arraylist-concept",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n        ArrayList<Integer> even=new ArrayList<>();\\n        ArrayList<Integer> odd=new ArrayList<>();\\n        for(int i=0;i<nums.length;i=i+2)\\n           even.add(nums[i]);\\n        \\n        for(int j=1;j<nums.length;j=j+2)\\n        odd.add(nums[j]);\\n        int i=0,j=1;\\n        Collections.sort(even);\\n        Collections.sort(odd,Collections.reverseOrder());\\n        for(Integer ele:even)\\n        {\\n          nums[i]=ele;\\n          i=i+2;\\n        }\\n\\n        for(Integer ele:odd)\\n        {\\n          nums[j]=ele;\\n          j=j+2;\\n        }\\n\\n        \\nreturn nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n        ArrayList<Integer> even=new ArrayList<>();\\n        ArrayList<Integer> odd=new ArrayList<>();\\n        for(int i=0;i<nums.length;i=i+2)\\n           even.add(nums[i]);\\n        \\n        for(int j=1;j<nums.length;j=j+2)\\n        odd.add(nums[j]);\\n        int i=0,j=1;\\n        Collections.sort(even);\\n        Collections.sort(odd,Collections.reverseOrder());\\n        for(Integer ele:even)\\n        {\\n          nums[i]=ele;\\n          i=i+2;\\n        }\\n\\n        for(Integer ele:odd)\\n        {\\n          nums[j]=ele;\\n          j=j+2;\\n        }\\n\\n        \\nreturn nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3900490,
                "title": "using-bubblesort-easy-understandable",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nusing bubble sort and sink sort\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n3ms\\nBeats 63.95%of users with Java\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n43.70mb\\nBeats 78.16%of users with Java\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n        int n= nums.length;\\n        \\n        \\n        for(int i = 0;i<n-2;i+=2)\\n\\t {\\n\\t \\tfor(int j =i+2 ;j<n;j+=2)\\n\\t \\t{\\n\\t \\t\\tif(nums[i]>nums[j])\\n\\t \\t\\t{\\n\\t \\t\\t\\tint x =nums[i];\\n\\t \\t\\t\\tnums[i]=nums[j];\\n\\t \\t\\t\\tnums[j]=x;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t }\\n      for(int i = 1;i<n-2;i+=2)\\n\\t {\\n\\t \\tfor(int j =i+2 ;j<n;j+=2)\\n\\t \\t{\\n\\t \\t\\tif(nums[i]<nums[j])\\n\\t \\t\\t{\\n\\t \\t\\t\\tint x =nums[i];\\n\\t \\t\\t\\tnums[i]=nums[j];\\n\\t \\t\\t\\tnums[j]=x;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t }\\nreturn nums;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        \\n        int n= nums.length;\\n        \\n        \\n        for(int i = 0;i<n-2;i+=2)\\n\\t {\\n\\t \\tfor(int j =i+2 ;j<n;j+=2)\\n\\t \\t{\\n\\t \\t\\tif(nums[i]>nums[j])\\n\\t \\t\\t{\\n\\t \\t\\t\\tint x =nums[i];\\n\\t \\t\\t\\tnums[i]=nums[j];\\n\\t \\t\\t\\tnums[j]=x;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t }\\n      for(int i = 1;i<n-2;i+=2)\\n\\t {\\n\\t \\tfor(int j =i+2 ;j<n;j+=2)\\n\\t \\t{\\n\\t \\t\\tif(nums[i]<nums[j])\\n\\t \\t\\t{\\n\\t \\t\\t\\tint x =nums[i];\\n\\t \\t\\t\\tnums[i]=nums[j];\\n\\t \\t\\t\\tnums[j]=x;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t }\\nreturn nums;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3898130,
                "title": "good-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int>even,odd;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            if(i%2==0){\\n                even.push_back(nums[i]);\\n            }\\n            else{\\n                odd.push_back(nums[i]);\\n            }\\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end());\\n        int e=0;int o=odd.size()-1;\\n        for(int i=0;i<n;i++){\\n            if(e<even.size()&&i%2==0){\\n                nums[i]=even[e];\\n                e++;\\n            }\\n            else if(o>=0&&i%2!=0){\\n                nums[i]=odd[o];\\n                o--;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int>even,odd;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            if(i%2==0){\\n                even.push_back(nums[i]);\\n            }\\n            else{\\n                odd.push_back(nums[i]);\\n            }\\n        }\\n        sort(even.begin(),even.end());\\n        sort(odd.begin(),odd.end());\\n        int e=0;int o=odd.size()-1;\\n        for(int i=0;i<n;i++){\\n            if(e<even.size()&&i%2==0){\\n                nums[i]=even[e];\\n                e++;\\n            }\\n            else if(o>=0&&i%2!=0){\\n                nums[i]=odd[o];\\n                o--;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3891748,
                "title": "arraylist-solution-very-easy",
                "content": "# Intuition\\nWe will first make two separate arraylists for odd indices and even indices. Then we will sort the even indices list then the odd indices list and the odd indices will be sorted in reverse order as mentioned in the question. Now we will iterarte through the new array and we will place the even element on the even index of the new array and the same with odd index too.\\n\\n# Approach\\nPLEASE UP VOTEEEE!!!!!!\\n\\n# Complexity\\n- Time complexity:\\n\\n- Space complexity:\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int n = nums.length;\\n        int ans[] = new int[n];\\n        ArrayList<Integer> list1 = new ArrayList<>();\\n        ArrayList<Integer> list2 = new ArrayList<>();\\n        for(int i = 0; i < n ; i++){\\n            if(i % 2 == 0){\\n                list1.add(nums[i]);\\n            } else{\\n                list2.add(nums[i]);\\n            }\\n        }\\n        Collections.sort(list1);\\n        Collections.sort(list2);\\n        Collections.reverse(list2);\\n        int j = 0;\\n        int k = 0;\\n        for(int i = 0; i < nums.length; i++){\\n           if(i % 2 == 0){\\n                ans[i] = list1.get(j++);\\n            }\\n            else{\\n                ans[i] = list2.get(k++);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int n = nums.length;\\n        int ans[] = new int[n];\\n        ArrayList<Integer> list1 = new ArrayList<>();\\n        ArrayList<Integer> list2 = new ArrayList<>();\\n        for(int i = 0; i < n ; i++){\\n            if(i % 2 == 0){\\n                list1.add(nums[i]);\\n            } else{\\n                list2.add(nums[i]);\\n            }\\n        }\\n        Collections.sort(list1);\\n        Collections.sort(list2);\\n        Collections.reverse(list2);\\n        int j = 0;\\n        int k = 0;\\n        for(int i = 0; i < nums.length; i++){\\n           if(i % 2 == 0){\\n                ans[i] = list1.get(j++);\\n            }\\n            else{\\n                ans[i] = list2.get(k++);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3891732,
                "title": "easy-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(NlogN)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> odd, even;\\n        int flag=1;\\n        for(int i=0; i < nums.size(); i++){\\n            if(flag) even.push_back(nums[i]);\\n            else odd.push_back(nums[i]);\\n            flag^=1;\\n        }\\n        sort(even.begin(), even.end());\\n        sort(odd.begin(), odd.end(), greater<int>());\\n        int m=0, n=0;\\n        flag = 1;\\n        for(int i=0; i < nums.size(); i++){\\n            if(flag) nums[i] = even[m++];\\n            else nums[i] = odd[n++];\\n            flag^=1;\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int> odd, even;\\n        int flag=1;\\n        for(int i=0; i < nums.size(); i++){\\n            if(flag) even.push_back(nums[i]);\\n            else odd.push_back(nums[i]);\\n            flag^=1;\\n        }\\n        sort(even.begin(), even.end());\\n        sort(odd.begin(), odd.end(), greater<int>());\\n        int m=0, n=0;\\n        flag = 1;\\n        for(int i=0; i < nums.size(); i++){\\n            if(flag) nums[i] = even[m++];\\n            else nums[i] = odd[n++];\\n            flag^=1;\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3885027,
                "title": "dart-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  List<int> sortEvenOdd(List<int> nums) {\\n      List<int> odds = [];\\n      List<int> evens = [];\\n      List<int> output = [];\\n      for (int i = 0; i < nums.length; i++){\\n          if (i % 2 == 0) {\\n              evens.add(nums[i]);\\n          } else {\\n              odds.add(nums[i]);\\n          }\\n      }\\n      evens.sort();\\n      odds.sort((b, a) => a.compareTo(b));\\n      for (int i = 0; i < nums.length; i++){\\n          if (i % 2 == 0) {\\n              output.add(evens[i~/2]);\\n          } else {\\n              output.add(odds[i~/2]);\\n          }\\n      }\\n      return output;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  List<int> sortEvenOdd(List<int> nums) {\\n      List<int> odds = [];\\n      List<int> evens = [];\\n      List<int> output = [];\\n      for (int i = 0; i < nums.length; i++){\\n          if (i % 2 == 0) {\\n              evens.add(nums[i]);\\n          } else {\\n              odds.add(nums[i]);\\n          }\\n      }\\n      evens.sort();\\n      odds.sort((b, a) => a.compareTo(b));\\n      for (int i = 0; i < nums.length; i++){\\n          if (i % 2 == 0) {\\n              output.add(evens[i~/2]);\\n          } else {\\n              output.add(odds[i~/2]);\\n          }\\n      }\\n      return output;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3873734,
                "title": "js-soln-beats-100",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar sortEvenOdd = function(nums) {\\n    if(nums.length <= 2) return nums;\\n    const odd = nums.filter((_, index) => index % 2 !== 0);\\n    const even = nums.filter((_, index) => index % 2 === 0);\\n\\n    odd.sort((a, b) => b - a);\\n    even.sort((a, b) => a - b);\\n\\n    let oddIndex = 0;\\n    let evenIndex = 0;\\n\\n    for(let i=0;i<nums.length;i++) {\\n        nums[i] = i % 2 !== 0 ?  odd[oddIndex++] : even[evenIndex++];\\n    }\\n\\n    return nums;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar sortEvenOdd = function(nums) {\\n    if(nums.length <= 2) return nums;\\n    const odd = nums.filter((_, index) => index % 2 !== 0);\\n    const even = nums.filter((_, index) => index % 2 === 0);\\n\\n    odd.sort((a, b) => b - a);\\n    even.sort((a, b) => a - b);\\n\\n    let oddIndex = 0;\\n    let evenIndex = 0;\\n\\n    for(let i=0;i<nums.length;i++) {\\n        nums[i] = i % 2 !== 0 ?  odd[oddIndex++] : even[evenIndex++];\\n    }\\n\\n    return nums;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3871935,
                "title": "easy-solution-in-c",
                "content": "# Intuition\\n\\n\\n# Approach\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic: \\n    bool static compare(int a, int b) {\\n    return a > b;\\n}\\n\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int>ans;\\n        vector<int>eidx;\\n        vector<int>oddidx;\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0){\\n                eidx.push_back(nums[i]);\\n            }\\n            else{\\n                oddidx.push_back(nums[i]);\\n            }\\n        }\\n        sort(eidx.begin(),eidx.end());\\n        sort(oddidx.begin(), oddidx.end(), compare);\\n        int i=0;\\n        for(i=0;i<nums.size()/2;i++){\\n            ans.push_back(eidx[i]);\\n            ans.push_back(oddidx[i]);\\n        }\\n        while (i < eidx.size()) {\\n            ans.push_back(eidx[i]);\\n            i++;\\n        }\\n        while (i < oddidx.size()) {\\n            ans.push_back(oddidx[i]);\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic: \\n    bool static compare(int a, int b) {\\n    return a > b;\\n}\\n\\n    vector<int> sortEvenOdd(vector<int>& nums) {\\n        vector<int>ans;\\n        vector<int>eidx;\\n        vector<int>oddidx;\\n        for(int i=0;i<nums.size();i++){\\n            if(i%2==0){\\n                eidx.push_back(nums[i]);\\n            }\\n            else{\\n                oddidx.push_back(nums[i]);\\n            }\\n        }\\n        sort(eidx.begin(),eidx.end());\\n        sort(oddidx.begin(), oddidx.end(), compare);\\n        int i=0;\\n        for(i=0;i<nums.size()/2;i++){\\n            ans.push_back(eidx[i]);\\n            ans.push_back(oddidx[i]);\\n        }\\n        while (i < eidx.size()) {\\n            ans.push_back(eidx[i]);\\n            i++;\\n        }\\n        while (i < oddidx.size()) {\\n            ans.push_back(oddidx[i]);\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865364,
                "title": "c-solution-brute-force",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[] SortEvenOdd(int[] nums) {\\n        List<int> list1 = new List<int>();\\n        List<int> list2 = new List<int>();\\n\\n        int n=  nums.Length;\\n        for(int i = 0;i< n;i++)\\n        {\\n            if(i%2 == 0)\\n            {\\n                list1.Add(nums[i]);\\n            }else{\\n                list2.Add(nums[i]);\\n            }\\n        }\\n\\n        int [] arr = new int[list1.Count()+ list2.Count()];\\n        list1.Sort();\\n        list2.Sort();\\n        int k =0;\\n        for(int i =0;i<list1.Count();i++)\\n        {\\n            arr[k]= list1[i];\\n            k+=2;\\n        }\\n        \\n         k =1;\\n        for(int i = list2.Count()-1;i>=0 ;i--)\\n        {\\n            arr[k]= list2[i];\\n            k+=2;\\n        }\\n\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] SortEvenOdd(int[] nums) {\\n        List<int> list1 = new List<int>();\\n        List<int> list2 = new List<int>();\\n\\n        int n=  nums.Length;\\n        for(int i = 0;i< n;i++)\\n        {\\n            if(i%2 == 0)\\n            {\\n                list1.Add(nums[i]);\\n            }else{\\n                list2.Add(nums[i]);\\n            }\\n        }\\n\\n        int [] arr = new int[list1.Count()+ list2.Count()];\\n        list1.Sort();\\n        list2.Sort();\\n        int k =0;\\n        for(int i =0;i<list1.Count();i++)\\n        {\\n            arr[k]= list1[i];\\n            k+=2;\\n        }\\n        \\n         k =1;\\n        for(int i = list2.Count()-1;i>=0 ;i--)\\n        {\\n            arr[k]= list2[i];\\n            k+=2;\\n        }\\n\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3862744,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        sortNum(0, 0, nums);\\n        sortNum(1, 1, nums);\\n        return nums;\\n    }\\n    \\n    public void sortNum(int mode, int start, int[] nums){\\n        for(int i=start;i<nums.length;i=i+2){\\n            for(int j=i+2;j<nums.length;j=j+2){\\n                if((mode == 0) ? nums[i]>nums[j] : nums[i]<nums[j]){\\n                    int temp = nums[i];\\n                    nums[i] = nums[j];\\n                    nums[j] = temp;\\n                }\\n            }\\n        }\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        sortNum(0, 0, nums);\\n        sortNum(1, 1, nums);\\n        return nums;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3862676,
                "title": "code-using-arraylist",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        if(nums.length<3)\\n        return nums;\\n        List<Integer> odd=new ArrayList<>();\\n        List<Integer> even=new ArrayList<>();\\n        int ans[]=new int[nums.length];\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if (i%2 == 0) \\n                even.add(nums[i]);\\n                else \\n                odd.add(nums[i]);\\n            }\\n        \\n        Collections.sort(even);\\n        Collections.sort(odd);\\n        Collections.reverse(odd);\\n\\t\\t\\n        int j=0;\\n        int k=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n             if (i%2 == 0) \\n               ans[i]=even.get(j++);\\n             else \\n               ans[i]=odd.get(k++);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        if(nums.length<3)\\n        return nums;\\n        List<Integer> odd=new ArrayList<>();\\n        List<Integer> even=new ArrayList<>();\\n        int ans[]=new int[nums.length];\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if (i%2 == 0) \\n                even.add(nums[i]);\\n                else \\n                odd.add(nums[i]);\\n            }\\n        \\n        Collections.sort(even);\\n        Collections.sort(odd);\\n        Collections.reverse(odd);\\n\\t\\t\\n        int j=0;\\n        int k=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n             if (i%2 == 0) \\n               ans[i]=even.get(j++);\\n             else \\n               ans[i]=odd.get(k++);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3859791,
                "title": "2164-sort-even-and-odd-indices-independently",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\no(n log(n))\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        ArrayList<Integer> mylist_evenindex = new ArrayList<>();\\n        ArrayList<Integer> mylist_oddindex = new ArrayList<>();\\n\\n        for (int i = 0; i < nums.length; i = i + 2) {\\n            mylist_evenindex.add(nums[i]);\\n        }\\n\\n        for (int i = 1; i < nums.length; i = i + 2) {\\n            mylist_oddindex.add(nums[i]);\\n        }\\n\\n        Collections.sort(mylist_evenindex);\\n        Collections.sort(mylist_oddindex, Collections.reverseOrder());\\n\\n        int p = 0;\\n        int q = 0;\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) {\\n                nums[i] = mylist_evenindex.get(p);\\n                p++;\\n            } else {\\n                nums[i] = mylist_oddindex.get(q);\\n                q++;\\n            }\\n        }\\n\\n        return nums;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        ArrayList<Integer> mylist_evenindex = new ArrayList<>();\\n        ArrayList<Integer> mylist_oddindex = new ArrayList<>();\\n\\n        for (int i = 0; i < nums.length; i = i + 2) {\\n            mylist_evenindex.add(nums[i]);\\n        }\\n\\n        for (int i = 1; i < nums.length; i = i + 2) {\\n            mylist_oddindex.add(nums[i]);\\n        }\\n\\n        Collections.sort(mylist_evenindex);\\n        Collections.sort(mylist_oddindex, Collections.reverseOrder());\\n\\n        int p = 0;\\n        int q = 0;\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (i % 2 == 0) {\\n                nums[i] = mylist_evenindex.get(p);\\n                p++;\\n            } else {\\n                nums[i] = mylist_oddindex.get(q);\\n                q++;\\n            }\\n        }\\n\\n        return nums;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3856784,
                "title": "sort-even-and-odd-indices-independently",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        ArrayList<Integer> even = new ArrayList<Integer>();\\n        ArrayList<Integer> odd = new ArrayList<Integer>();\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(i%2==0)\\n            even.add(nums[i]);\\n            else if(i%2==1)\\n            odd.add(nums[i]);\\n        }\\n        Collections.sort(even);\\n        Collections.sort(odd);\\n        int[] arr = new int[nums.length];\\n        int e = 0;\\n        int o = odd.size()-1;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(i%2==0)\\n            {arr[i] = even.get(e);\\n            e++;}\\n            else if(i%2==1)\\n            {arr[i] = odd.get(o);\\n            o--;\\n            } \\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        ArrayList<Integer> even = new ArrayList<Integer>();\\n        ArrayList<Integer> odd = new ArrayList<Integer>();\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(i%2==0)\\n            even.add(nums[i]);\\n            else if(i%2==1)\\n            odd.add(nums[i]);\\n        }\\n        Collections.sort(even);\\n        Collections.sort(odd);\\n        int[] arr = new int[nums.length];\\n        int e = 0;\\n        int o = odd.size()-1;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(i%2==0)\\n            {arr[i] = even.get(e);\\n            e++;}\\n            else if(i%2==1)\\n            {arr[i] = odd.get(o);\\n            o--;\\n            } \\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3855267,
                "title": "very-basic-java-soln",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport java.util.Collections;\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int eve[]=new int[(nums.length/2)+(nums.length%2)];\\n        int odd[]=new int[nums.length/2];\\n        int k=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(i%2==0)\\n                eve[k]=nums[i];\\n            else\\n                odd[k++]=nums[i];\\n        }\\n        Arrays.sort(eve);\\n        Arrays.sort(odd);\\n        k=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(i%2==0)\\n                nums[i]=eve[k++];\\n            else\\n                nums[i]=odd[odd.length-k];\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.util.Collections;\\nclass Solution {\\n    public int[] sortEvenOdd(int[] nums) {\\n        int eve[]=new int[(nums.length/2)+(nums.length%2)];\\n        int odd[]=new int[nums.length/2];\\n        int k=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(i%2==0)\\n                eve[k]=nums[i];\\n            else\\n                odd[k++]=nums[i];\\n        }\\n        Arrays.sort(eve);\\n        Arrays.sort(odd);\\n        k=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(i%2==0)\\n                nums[i]=eve[k++];\\n            else\\n                nums[i]=odd[odd.length-k];\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3851985,
                "title": "python3-solution-with-using-sorting",
                "content": "# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        even_lst = []\\n        odd_lst = []\\n\\n        for i in range(len(nums)):\\n            if i % 2 == 0: even_lst.append(nums[i])\\n            else: odd_lst.append(nums[i])\\n\\n        lst = sorted(even_lst) + sorted(odd_lst)\\n\\n        res = []\\n        for i in range(len(lst) // 2):\\n            res.append(lst[i])\\n            res.append(lst[-1 - i])\\n        \\n        return res if len(lst) % 2 == 0 else res + [lst[len(lst) // 2]]\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        even_lst = []\\n        odd_lst = []\\n\\n        for i in range(len(nums)):\\n            if i % 2 == 0: even_lst.append(nums[i])\\n            else: odd_lst.append(nums[i])\\n\\n        lst = sorted(even_lst) + sorted(odd_lst)\\n\\n        res = []\\n        for i in range(len(lst) // 2):\\n            res.append(lst[i])\\n            res.append(lst[-1 - i])\\n        \\n        return res if len(lst) % 2 == 0 else res + [lst[len(lst) // 2]]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3849001,
                "title": "python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        odd = []\\n        even = []\\n        result = []\\n\\n        for i in range(len(nums)):\\n            if i % 2 == 0:\\n                even.append(nums[i])\\n            else:\\n                odd.append(nums[i])\\n        \\n        odd.sort(reverse = True)\\n        even.sort()\\n\\n        for i in range(max(len(odd), len(even))):\\n            if i < len(even):\\n                result.append(even[i])\\n            if i < len(odd):\\n                result.append(odd[i])\\n        \\n        return result\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        odd = []\\n        even = []\\n        result = []\\n\\n        for i in range(len(nums)):\\n            if i % 2 == 0:\\n                even.append(nums[i])\\n            else:\\n                odd.append(nums[i])\\n        \\n        odd.sort(reverse = True)\\n        even.sort()\\n\\n        for i in range(max(len(odd), len(even))):\\n            if i < len(even):\\n                result.append(even[i])\\n            if i < len(odd):\\n                result.append(odd[i])\\n        \\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3843383,
                "title": "2164-sort-even-and-odd-indices-independently",
                "content": "# Code\\n```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        odd=[nums[i] for i in range(len(nums)) if i%2==1]\\n        odd.sort(reverse=True)\\n        even=[nums[i] for i in range(len(nums)) if i%2==0]\\n        even.sort()\\n        nums=[]\\n        j,k=0,0\\n        for i in range(len(odd)+len(even)):\\n            if i%2==1:\\n                nums.append(odd[j])\\n                j+=1\\n            else:\\n                nums.append(even[k])\\n                k+=1\\n        return nums\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:\\n        odd=[nums[i] for i in range(len(nums)) if i%2==1]\\n        odd.sort(reverse=True)\\n        even=[nums[i] for i in range(len(nums)) if i%2==0]\\n        even.sort()\\n        nums=[]\\n        j,k=0,0\\n        for i in range(len(odd)+len(even)):\\n            if i%2==1:\\n                nums.append(odd[j])\\n                j+=1\\n            else:\\n                nums.append(even[k])\\n                k+=1\\n        return nums\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1881917,
                "content": [
                    {
                        "username": "rikkyhermanto",
                        "content": "Why not using positive term?\\nnon-decreasing = ascending order = increasing order \\nnon-increasing = descending order = decreasing order.\\n\\nDon\\'t make things more complicated, life\\'s already hard here."
                    },
                    {
                        "username": "shin_98",
                        "content": "\"Non-decreasing\" is not always \"ascending\". It\\'s not specified, that number are unique, so array `[2,2,3,3,3,1]` is possible. When you sort this array it becomes `[1,2,2,3,3,3]`. It\\'s not \"ascending order\" because not every number in array is bigger than previous number. However it\\'s for sure \"non-descending\" order. Can you see the difference?"
                    },
                    {
                        "username": "BREATHTAKER200",
                        "content": "Empty like my wallet\\uD83D\\uDE2A\\uD83D\\uDE14"
                    },
                    {
                        "username": "CaptainStark07",
                        "content": "Wrong Answer\\n\\nnums =\\n[36,45,32,31,15,41,9,46,36,6,15,16,33,26,27,31,44,34]\\nOutput\\n[6,45,16,41,33,31,31,26,32,34,27,36,15,36,15,9,44,46]"
                    },
                    {
                        "username": "shin_98",
                        "content": "I had the same thought, but this answer is correct. Apparently, it\\'s not about numbers in the array being even, or odd. It\\'s about indexes in an array being even or odd. Examples don\\'t show this. But given such array `[1,5,3,7,9]` you don\\'t sort only odd numbers, because there are no even numbers. You sort together even indexes: zero index (1), second index (3), and third index (9). And you sort separately odd indexes: first (5) and third index (7). I hope this helps."
                    },
                    {
                        "username": "rishavranjan1821",
                        "content": "Initialise two arraylists one for storing odd elements and the other for storing even elements, After storing into these sort both the arraylists. Now after sorting the odd arraylist reverse the arraylist in order to make it in descending order. Now initialise a loop and first add elements to the answer array by taking elements from the even arraylist and then from the odd arrraylist. and at last you have got your answer array."
                    }
                ]
            },
            {
                "id": 1791891,
                "content": [
                    {
                        "username": "rikkyhermanto",
                        "content": "Why not using positive term?\\nnon-decreasing = ascending order = increasing order \\nnon-increasing = descending order = decreasing order.\\n\\nDon\\'t make things more complicated, life\\'s already hard here."
                    },
                    {
                        "username": "shin_98",
                        "content": "\"Non-decreasing\" is not always \"ascending\". It\\'s not specified, that number are unique, so array `[2,2,3,3,3,1]` is possible. When you sort this array it becomes `[1,2,2,3,3,3]`. It\\'s not \"ascending order\" because not every number in array is bigger than previous number. However it\\'s for sure \"non-descending\" order. Can you see the difference?"
                    },
                    {
                        "username": "BREATHTAKER200",
                        "content": "Empty like my wallet\\uD83D\\uDE2A\\uD83D\\uDE14"
                    },
                    {
                        "username": "CaptainStark07",
                        "content": "Wrong Answer\\n\\nnums =\\n[36,45,32,31,15,41,9,46,36,6,15,16,33,26,27,31,44,34]\\nOutput\\n[6,45,16,41,33,31,31,26,32,34,27,36,15,36,15,9,44,46]"
                    },
                    {
                        "username": "shin_98",
                        "content": "I had the same thought, but this answer is correct. Apparently, it\\'s not about numbers in the array being even, or odd. It\\'s about indexes in an array being even or odd. Examples don\\'t show this. But given such array `[1,5,3,7,9]` you don\\'t sort only odd numbers, because there are no even numbers. You sort together even indexes: zero index (1), second index (3), and third index (9). And you sort separately odd indexes: first (5) and third index (7). I hope this helps."
                    },
                    {
                        "username": "rishavranjan1821",
                        "content": "Initialise two arraylists one for storing odd elements and the other for storing even elements, After storing into these sort both the arraylists. Now after sorting the odd arraylist reverse the arraylist in order to make it in descending order. Now initialise a loop and first add elements to the answer array by taking elements from the even arraylist and then from the odd arrraylist. and at last you have got your answer array."
                    }
                ]
            },
            {
                "id": 1907057,
                "content": [
                    {
                        "username": "rikkyhermanto",
                        "content": "Why not using positive term?\\nnon-decreasing = ascending order = increasing order \\nnon-increasing = descending order = decreasing order.\\n\\nDon\\'t make things more complicated, life\\'s already hard here."
                    },
                    {
                        "username": "shin_98",
                        "content": "\"Non-decreasing\" is not always \"ascending\". It\\'s not specified, that number are unique, so array `[2,2,3,3,3,1]` is possible. When you sort this array it becomes `[1,2,2,3,3,3]`. It\\'s not \"ascending order\" because not every number in array is bigger than previous number. However it\\'s for sure \"non-descending\" order. Can you see the difference?"
                    },
                    {
                        "username": "BREATHTAKER200",
                        "content": "Empty like my wallet\\uD83D\\uDE2A\\uD83D\\uDE14"
                    },
                    {
                        "username": "CaptainStark07",
                        "content": "Wrong Answer\\n\\nnums =\\n[36,45,32,31,15,41,9,46,36,6,15,16,33,26,27,31,44,34]\\nOutput\\n[6,45,16,41,33,31,31,26,32,34,27,36,15,36,15,9,44,46]"
                    },
                    {
                        "username": "shin_98",
                        "content": "I had the same thought, but this answer is correct. Apparently, it\\'s not about numbers in the array being even, or odd. It\\'s about indexes in an array being even or odd. Examples don\\'t show this. But given such array `[1,5,3,7,9]` you don\\'t sort only odd numbers, because there are no even numbers. You sort together even indexes: zero index (1), second index (3), and third index (9). And you sort separately odd indexes: first (5) and third index (7). I hope this helps."
                    },
                    {
                        "username": "rishavranjan1821",
                        "content": "Initialise two arraylists one for storing odd elements and the other for storing even elements, After storing into these sort both the arraylists. Now after sorting the odd arraylist reverse the arraylist in order to make it in descending order. Now initialise a loop and first add elements to the answer array by taking elements from the even arraylist and then from the odd arrraylist. and at last you have got your answer array."
                    }
                ]
            },
            {
                "id": 2006512,
                "content": [
                    {
                        "username": "rikkyhermanto",
                        "content": "Why not using positive term?\\nnon-decreasing = ascending order = increasing order \\nnon-increasing = descending order = decreasing order.\\n\\nDon\\'t make things more complicated, life\\'s already hard here."
                    },
                    {
                        "username": "shin_98",
                        "content": "\"Non-decreasing\" is not always \"ascending\". It\\'s not specified, that number are unique, so array `[2,2,3,3,3,1]` is possible. When you sort this array it becomes `[1,2,2,3,3,3]`. It\\'s not \"ascending order\" because not every number in array is bigger than previous number. However it\\'s for sure \"non-descending\" order. Can you see the difference?"
                    },
                    {
                        "username": "BREATHTAKER200",
                        "content": "Empty like my wallet\\uD83D\\uDE2A\\uD83D\\uDE14"
                    },
                    {
                        "username": "CaptainStark07",
                        "content": "Wrong Answer\\n\\nnums =\\n[36,45,32,31,15,41,9,46,36,6,15,16,33,26,27,31,44,34]\\nOutput\\n[6,45,16,41,33,31,31,26,32,34,27,36,15,36,15,9,44,46]"
                    },
                    {
                        "username": "shin_98",
                        "content": "I had the same thought, but this answer is correct. Apparently, it\\'s not about numbers in the array being even, or odd. It\\'s about indexes in an array being even or odd. Examples don\\'t show this. But given such array `[1,5,3,7,9]` you don\\'t sort only odd numbers, because there are no even numbers. You sort together even indexes: zero index (1), second index (3), and third index (9). And you sort separately odd indexes: first (5) and third index (7). I hope this helps."
                    },
                    {
                        "username": "rishavranjan1821",
                        "content": "Initialise two arraylists one for storing odd elements and the other for storing even elements, After storing into these sort both the arraylists. Now after sorting the odd arraylist reverse the arraylist in order to make it in descending order. Now initialise a loop and first add elements to the answer array by taking elements from the even arraylist and then from the odd arrraylist. and at last you have got your answer array."
                    }
                ]
            }
        ]
    }
]