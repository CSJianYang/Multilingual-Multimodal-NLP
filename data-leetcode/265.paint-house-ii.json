[
    {
        "title": "Valid Number",
        "question_content": "A valid number can be split up into these components (in order):\n\n\tA decimal number or an integer.\n\t(Optional) An 'e' or 'E', followed by an integer.\n\nA decimal number can be split up into these components (in order):\n\n\t(Optional) A sign character (either '+' or '-').\n\tOne of the following formats:\n\t\n\t\tOne or more digits, followed by a dot '.'.\n\t\tOne or more digits, followed by a dot '.', followed by one or more digits.\n\t\tA dot '.', followed by one or more digits.\n\t\n\t\n\nAn integer can be split up into these components (in order):\n\n\t(Optional) A sign character (either '+' or '-').\n\tOne or more digits.\n\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\nGiven a string s, return true if s is a valid number.\n&nbsp;\nExample 1:\n\nInput: s = \"0\"\nOutput: true\n\nExample 2:\n\nInput: s = \"e\"\nOutput: false\n\nExample 3:\n\nInput: s = \".\"\nOutput: false\n\n&nbsp;\nConstraints:\n\n\t1 <= s.length <= 20\n\ts consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'.",
        "solutions": [
            {
                "id": 23738,
                "title": "clear-java-solution-with-ifs",
                "content": "All we need is to have a couple of flags so we can process the string in linear time:\\n\\n    public boolean isNumber(String s) {\\n        s = s.trim();\\n        \\n        boolean pointSeen = false;\\n        boolean eSeen = false;\\n        boolean numberSeen = false;\\n        boolean numberAfterE = true;\\n        for(int i=0; i<s.length(); i++) {\\n            if('0' <= s.charAt(i) && s.charAt(i) <= '9') {\\n                numberSeen = true;\\n                numberAfterE = true;\\n            } else if(s.charAt(i) == '.') {\\n                if(eSeen || pointSeen) {\\n                    return false;\\n                }\\n                pointSeen = true;\\n            } else if(s.charAt(i) == 'e') {\\n                if(eSeen || !numberSeen) {\\n                    return false;\\n                }\\n                numberAfterE = false;\\n                eSeen = true;\\n            } else if(s.charAt(i) == '-' || s.charAt(i) == '+') {\\n                if(i != 0 && s.charAt(i-1) != 'e') {\\n                    return false;\\n                }\\n            } else {\\n                return false;\\n            }\\n        }\\n        \\n        return numberSeen && numberAfterE;\\n    }\\n\\nWe start with trimming.\\n\\n - If we see `[0-9]` we reset the number flags.\\n - We can only see `.` if we didn't see `e` or `.`. \\n - We can only see `e` if we didn't see `e` but we did see a number. We reset numberAfterE flag.\\n - We can only see `+` and `-` in the beginning and after an `e`\\n - any other character break the validation.\\n\\nAt the and it is only valid if there was at least 1 number and if we did see an `e` then a number after it as well.\\n\\nSo basically the number should match this regular expression:\\n\\n`[-+]?(([0-9]+(.[0-9]*)?)|.[0-9]+)(e[-+]?[0-9]+)?`",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "All we need is to have a couple of flags so we can process the string in linear time:\\n\\n    public boolean isNumber(String s) {\\n        s = s.trim();\\n        \\n        boolean pointSeen = false;\\n        boolean eSeen = false;\\n        boolean numberSeen = false;\\n        boolean numberAfterE = true;\\n        for(int i=0; i<s.length(); i++) {\\n            if('0' <= s.charAt(i) && s.charAt(i) <= '9') {\\n                numberSeen = true;\\n                numberAfterE = true;\\n            } else if(s.charAt(i) == '.') {\\n                if(eSeen || pointSeen) {\\n                    return false;\\n                }\\n                pointSeen = true;\\n            } else if(s.charAt(i) == 'e') {\\n                if(eSeen || !numberSeen) {\\n                    return false;\\n                }\\n                numberAfterE = false;\\n                eSeen = true;\\n            } else if(s.charAt(i) == '-' || s.charAt(i) == '+') {\\n                if(i != 0 && s.charAt(i-1) != 'e') {\\n                    return false;\\n                }\\n            } else {\\n                return false;\\n            }\\n        }\\n        \\n        return numberSeen && numberAfterE;\\n    }\\n\\nWe start with trimming.\\n\\n - If we see `[0-9]` we reset the number flags.\\n - We can only see `.` if we didn't see `e` or `.`. \\n - We can only see `e` if we didn't see `e` but we did see a number. We reset numberAfterE flag.\\n - We can only see `+` and `-` in the beginning and after an `e`\\n - any other character break the validation.\\n\\nAt the and it is only valid if there was at least 1 number and if we did see an `e` then a number after it as well.\\n\\nSo basically the number should match this regular expression:\\n\\n`[-+]?(([0-9]+(.[0-9]*)?)|.[0-9]+)(e[-+]?[0-9]+)?`",
                "codeTag": "Unknown"
            },
            {
                "id": 23728,
                "title": "a-simple-solution-in-python-based-on-dfa",
                "content": "I was asked in the interview of linkedIn, writing it directly can be extremely complicated, for there are many special cases we have to deal with, and the code I wrote was messy. Then I failed to pass the interview. \\n\\nHere\\'s a clear solution. With DFA we can easily get our idea into shape and then debug, and the source code is clear and simple.\\n\\n```\\nclass Solution(object):\\n  def isNumber(self, s):\\n      \"\"\"\\n      :type s: str\\n      :rtype: bool\\n      \"\"\"\\n      #define a DFA\\n      state = [{}, \\n              {\\'blank\\': 1, \\'sign\\': 2, \\'digit\\':3, \\'.\\':4}, \\n              {\\'digit\\':3, \\'.\\':4},\\n              {\\'digit\\':3, \\'.\\':5, \\'e\\':6, \\'blank\\':9},\\n              {\\'digit\\':5},\\n              {\\'digit\\':5, \\'e\\':6, \\'blank\\':9},\\n              {\\'sign\\':7, \\'digit\\':8},\\n              {\\'digit\\':8},\\n              {\\'digit\\':8, \\'blank\\':9},\\n              {\\'blank\\':9}]\\n      currentState = 1\\n      for c in s:\\n          if c >= \\'0\\' and c <= \\'9\\':\\n              c = \\'digit\\'\\n          if c == \\' \\':\\n              c = \\'blank\\'\\n          if c in [\\'+\\', \\'-\\']:\\n              c = \\'sign\\'\\n          if c not in state[currentState].keys():\\n              return False\\n          currentState = state[currentState][c]\\n      if currentState not in [3,5,8,9]:\\n          return False\\n      return True\\n```\\n\\n![image](https://assets.leetcode.com/users/images/69f50f74-671d-4bdb-bba8-5f3298c850f2_1616436512.5525014.png)\\n\\n\\nIf you are curious about how to construct this DFA, learn RegEx and watch [this video](https://www.youtube.com/watch?v=RYNN-tb9WxI) to learn how to convert RegEx to NFA, and futher DFA. You can also learn it from any Compiler Text book.",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n  def isNumber(self, s):\\n      \"\"\"\\n      :type s: str\\n      :rtype: bool\\n      \"\"\"\\n      #define a DFA\\n      state = [{}, \\n              {\\'blank\\': 1, \\'sign\\': 2, \\'digit\\':3, \\'.\\':4}, \\n              {\\'digit\\':3, \\'.\\':4},\\n              {\\'digit\\':3, \\'.\\':5, \\'e\\':6, \\'blank\\':9},\\n              {\\'digit\\':5},\\n              {\\'digit\\':5, \\'e\\':6, \\'blank\\':9},\\n              {\\'sign\\':7, \\'digit\\':8},\\n              {\\'digit\\':8},\\n              {\\'digit\\':8, \\'blank\\':9},\\n              {\\'blank\\':9}]\\n      currentState = 1\\n      for c in s:\\n          if c >= \\'0\\' and c <= \\'9\\':\\n              c = \\'digit\\'\\n          if c == \\' \\':\\n              c = \\'blank\\'\\n          if c in [\\'+\\', \\'-\\']:\\n              c = \\'sign\\'\\n          if c not in state[currentState].keys():\\n              return False\\n          currentState = state[currentState][c]\\n      if currentState not in [3,5,8,9]:\\n          return False\\n      return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 173977,
                "title": "python-with-simple-explanation",
                "content": "We use three flags: `met_dot`, `met_e`, `met_digit`, mark if we have met `.`, `e` or any digit so far.  First we strip the string, then go through each `char` and make sure:\\n\\n- If  `char ==  + or char == -`, then prev char (if there is) must be `e`  \\n- `.` cannot appear twice or after  `e`\\n- `e` cannot appear twice, and there must be at least one digit before and after `e` \\n- All other non-digit char is invalid \\n\\n```python\\nclass Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        s = s.strip()\\n        met_dot = met_e = met_digit = False\\n        for i, char in enumerate(s):\\n            if char in [\\'+\\', \\'-\\']:\\n                if i > 0 and s[i-1] != \\'e\\':\\n                    return False\\n            elif char == \\'.\\':\\n                if met_dot or met_e: return False\\n                met_dot = True\\n            elif char == \\'e\\':\\n                if met_e or not met_digit:\\n                    return False\\n                met_e, met_digit = True, False\\n            elif char.isdigit():\\n                met_digit = True\\n            else:\\n                return False\\n        return met_digit\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        s = s.strip()\\n        met_dot = met_e = met_digit = False\\n        for i, char in enumerate(s):\\n            if char in [\\'+\\', \\'-\\']:\\n                if i > 0 and s[i-1] != \\'e\\':\\n                    return False\\n            elif char == \\'.\\':\\n                if met_dot or met_e: return False\\n                met_dot = True\\n            elif char == \\'e\\':\\n                if met_e or not met_digit:\\n                    return False\\n                met_e, met_digit = True, False\\n            elif char.isdigit():\\n                met_digit = True\\n            else:\\n                return False\\n        return met_digit\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23977,
                "title": "a-clean-design-solution-by-using-design-pattern",
                "content": "This problem give me a good chance to convey the importance of good design. The problem is very vogue. The point here is not how you design a algorithm, it is how you handle all cases well. There is no a clear standard for whether is a number valid, is it  .50 ,  39.  a legal float point number? Are there only valid  formats given by the example? Is hex format such as 0x12ab legal? How about if we need to add another format such as roman number like \"I, II , IV\" as legal format. I found all solution are just plug logic into one function, there are lots of switch case, if else in there.  It is problematic, easy for bugs, difficult to add new features, and of course, in-reusable, and here I propose a design to handle this problem easily and nicely.\\n\\nFirst we we can give out an interface for this problem:\\n\\n    interface NumberValidate {\\n    \\n    \\tboolean validate(String s);\\n    }\\n\\nfor any string, we call validate and it return whether the given string is a valid number. Follow we can create concrete implementation for this interface, such as IntegeValidator, FloatValidator, ScienceValidator. and then using chain of responsibility design patter (from book of GOF) , chain all those validator  into a list, and feed the string to each one, if there is one validator return true, then the string is a valid number.\\n\\nThe design has two advantages, one is easy to fix, for any corner cases or bug, we can locate the problem to specific validator, the effect of changing one validator will not sprint out to the all system, we call this as \"encapsulation\".\\n\\nSecond is easy to extend, if we need to verify hex format or roman number format , we just need to create new validator and add to the chain, we call this advantage as \"close for modification open for extension\".\\n\\nFollow is code for the passed design:\\n\\n    interface NumberValidate {\\n    \\n    \\tboolean validate(String s);\\n    }\\n    \\n    abstract class  NumberValidateTemplate implements NumberValidate{\\n    \\n    public boolean validate(String s)\\n    \\t{\\n    \\t\\tif (checkStringEmpty(s))\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\ts = checkAndProcessHeader(s);\\n    \\t\\t\\n    \\t\\tif (s.length() == 0)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn doValidate(s);\\n    \\t}\\n    \\t\\n    \\tprivate boolean checkStringEmpty(String s)\\n    \\t{\\n    \\t\\tif (s.equals(\"\"))\\n    \\t\\t{\\n    \\t\\t\\treturn true;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn false;\\n    \\t}\\n    \\t\\n    \\tprivate String checkAndProcessHeader(String value)\\n    \\t{\\n    \\t    value = value.trim();\\n    \\t    \\n    \\t\\tif (value.startsWith(\"+\") || value.startsWith(\"-\"))\\n    \\t\\t{\\n    \\t\\t\\tvalue = value.substring(1);\\n    \\t\\t}\\n    \\t\\n    \\t\\n    \\t\\treturn value;\\n    \\t}\\n    \\t\\n    \\t\\n    \\t\\n    \\tprotected abstract boolean doValidate(String s);\\n    }\\n    \\n    class NumberValidator implements NumberValidate {\\n    \\t\\n    \\tprivate ArrayList<NumberValidate> validators = new ArrayList<NumberValidate>();\\n    \\t\\n    \\tpublic NumberValidator()\\n    \\t{\\n    \\t\\taddValidators();\\n    \\t}\\n    \\n    \\tprivate  void addValidators()\\n    \\t{\\n    \\t\\tNumberValidate nv = new IntegerValidate();\\n    \\t\\tvalidators.add(nv);\\n    \\t\\t\\n    \\t\\tnv = new FloatValidate();\\n    \\t\\tvalidators.add(nv);\\n    \\t\\t\\n    \\t\\tnv = new HexValidate();\\n    \\t\\tvalidators.add(nv);\\n    \\t\\t\\n    \\t\\tnv = new SienceFormatValidate();\\n    \\t\\tvalidators.add(nv);\\n    \\t}\\n    \\t\\n    \\t@Override\\n    \\tpublic boolean validate(String s)\\n    \\t{\\n    \\t\\tfor (NumberValidate nv : validators)\\n    \\t\\t{\\n    \\t\\t\\tif (nv.validate(s) == true)\\n    \\t\\t\\t{\\n    \\t\\t\\t\\treturn true;\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn false;\\n    \\t}\\n    \\n    \\t\\n    }\\n    \\n    class IntegerValidate extends NumberValidateTemplate{\\n    \\t\\n    \\tprotected boolean doValidate(String integer)\\n    \\t{\\n    \\t\\tfor (int i = 0; i < integer.length(); i++)\\n    \\t\\t{\\n    \\t\\t\\tif(Character.isDigit(integer.charAt(i)) == false)\\n    \\t\\t\\t{\\n    \\t\\t\\t\\treturn false;\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn true;\\n    \\t}\\n    }\\n    \\n    class HexValidate extends NumberValidateTemplate{\\n    \\n    \\tprivate char[] valids = new char[] {'a', 'b', 'c', 'd', 'e', 'f'};\\n    \\tprotected boolean doValidate(String hex)\\n    \\t{\\n    \\t\\thex = hex.toLowerCase();\\n    \\t\\tif (hex.startsWith(\"0x\"))\\n    \\t\\t{\\n    \\t\\t\\thex = hex.substring(2);\\n    \\t\\t}\\n    \\t\\telse\\n    \\t\\t{\\n    \\t\\t    return false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\tfor (int i = 0; i < hex.length(); i++)\\n    \\t\\t{\\n    \\t\\t\\tif (Character.isDigit(hex.charAt(i)) != true && isValidChar(hex.charAt(i)) != true)\\n    \\t\\t\\t{\\n    \\t\\t\\t\\treturn false;\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn true;\\n    \\t}\\n    \\t\\n    \\tprivate boolean isValidChar(char c)\\n    \\t{\\n    \\t\\tfor (int i = 0; i < valids.length; i++)\\n    \\t\\t{\\n    \\t\\t\\tif (c == valids[i])\\n    \\t\\t\\t{\\n    \\t\\t\\t\\treturn true;\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn false;\\n    \\t}\\n    }\\n    \\n    class SienceFormatValidate extends NumberValidateTemplate{\\n    \\n    protected boolean doValidate(String s)\\n    \\t{\\n    \\t\\ts = s.toLowerCase();\\n    \\t\\tint pos = s.indexOf(\"e\");\\n    \\t\\tif (pos == -1)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\tif (s.length() == 1)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\tString first = s.substring(0, pos);\\n    \\t\\tString second = s.substring(pos+1, s.length());\\n    \\t\\t\\n    \\t\\tif (validatePartBeforeE(first) == false || validatePartAfterE(second) == false)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\t\\n    \\t\\treturn true;\\n    \\t}\\n    \\t\\n    \\tprivate boolean validatePartBeforeE(String first)\\n    \\t{\\n    \\t\\tif (first.equals(\"\") == true)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\tif (checkHeadAndEndForSpace(first) == false)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\tNumberValidate integerValidate = new IntegerValidate();\\n    \\t\\tNumberValidate floatValidate = new FloatValidate();\\n    \\t\\tif (integerValidate.validate(first) == false && floatValidate.validate(first) == false)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn true;\\n    \\t}\\n    \\t\\n    private boolean checkHeadAndEndForSpace(String part)\\n    \\t{\\n    \\t\\t\\n    \\t\\tif (part.startsWith(\" \") ||\\n    \\t\\t\\t\\tpart.endsWith(\" \"))\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn true;\\n    \\t}\\n    \\t\\n    \\tprivate boolean validatePartAfterE(String second)\\n    \\t{\\n    \\t\\tif (second.equals(\"\") == true)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\tif (checkHeadAndEndForSpace(second) == false)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\tNumberValidate integerValidate = new IntegerValidate();\\n    \\t\\tif (integerValidate.validate(second) == false)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn true;\\n    \\t}\\n    }\\n    \\n    class FloatValidate extends NumberValidateTemplate{\\n    \\t\\n       protected boolean doValidate(String floatVal)\\n    \\t{\\n    \\t\\tint pos = floatVal.indexOf(\".\");\\n    \\t\\tif (pos == -1)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\tif (floatVal.length() == 1)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\tNumberValidate nv = new IntegerValidate();\\n    \\t\\tString first = floatVal.substring(0, pos);\\n    \\t\\tString second = floatVal.substring(pos + 1, floatVal.length());\\n    \\t\\t\\n    \\t\\tif (checkFirstPart(first) == true && checkFirstPart(second) == true)\\n    \\t\\t{\\n    \\t\\t\\treturn true;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn false;\\n    \\t}\\n    \\t\\n    \\tprivate boolean checkFirstPart(String first)\\n    \\t{\\n    \\t    if (first.equals(\"\") == false && checkPart(first) == false)\\n    \\t    {\\n    \\t    \\treturn false;\\n    \\t    }\\n    \\t    \\n    \\t    return true;\\n    \\t}\\n    \\t\\n    \\tprivate boolean checkPart(String part)\\n    \\t{\\n    \\t   if (Character.isDigit(part.charAt(0)) == false ||\\n    \\t\\t\\t\\tCharacter.isDigit(part.charAt(part.length() - 1)) == false)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\tNumberValidate nv = new IntegerValidate();\\n    \\t\\tif (nv.validate(part) == false)\\n    \\t\\t{\\n    \\t\\t\\treturn false;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn true;\\n    \\t}\\n    }\\n    \\n    public class Solution {\\n        public boolean isNumber(String s) {\\n            NumberValidate nv = new NumberValidator();\\n    \\n    \\t    return nv.validate(s);\\n        }\\n    }",
                "solutionTags": [
                    "Java",
                    "Design"
                ],
                "code": "class Solution {\\n        public boolean isNumber(String s) {\\n            NumberValidate nv = new NumberValidator();\\n    \\n    \\t    return nv.validate(s);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 23762,
                "title": "a-simple-solution-in-cpp",
                "content": "The idea is pretty straightforward. A valid number is composed of the significand and the exponent (which is optional). As we go through the string, do the following things one by one:\\n\\n 1. skip the leading whitespaces;\\n 3. check if the significand is valid. To do so, simply skip the leading sign and count the number of digits and the number of points. A valid significand has no more than one point and at least one digit. \\n 4. check if the exponent part is valid. We do this if the significand is followed by 'e'. Simply skip the leading sign and count the number of digits. A valid exponent contain at least one digit.\\n 5. skip the trailing whitespaces. We must reach the ending 0 if the string is a valid number. \\n \\n=======================================================\\n\\n    bool isNumber(const char *s) \\n    {\\n        int i = 0;\\n        \\n        // skip the whilespaces\\n        for(; s[i] == ' '; i++) {}\\n        \\n        // check the significand\\n        if(s[i] == '+' || s[i] == '-') i++; // skip the sign if exist\\n        \\n        int n_nm, n_pt;\\n        for(n_nm=0, n_pt=0; (s[i]<='9' && s[i]>='0') || s[i]=='.'; i++)\\n            s[i] == '.' ? n_pt++:n_nm++;       \\n        if(n_pt>1 || n_nm<1) // no more than one point, at least one digit\\n            return false;\\n        \\n        // check the exponent if exist\\n        if(s[i] == 'e') {\\n            i++;\\n            if(s[i] == '+' || s[i] == '-') i++; // skip the sign\\n            \\n            int n_nm = 0;\\n            for(; s[i]>='0' && s[i]<='9'; i++, n_nm++) {}\\n            if(n_nm<1)\\n                return false;\\n        }\\n        \\n        // skip the trailing whitespaces\\n        for(; s[i] == ' '; i++) {}\\n        \\n        return s[i]==0;  // must reach the ending 0 of the string\\n    }",
                "solutionTags": [],
                "code": "The idea is pretty straightforward. A valid number is composed of the significand and the exponent (which is optional). As we go through the string, do the following things one by one:\\n\\n 1. skip the leading whitespaces;\\n 3. check if the significand is valid. To do so, simply skip the leading sign and count the number of digits and the number of points. A valid significand has no more than one point and at least one digit. \\n 4. check if the exponent part is valid. We do this if the significand is followed by 'e'. Simply skip the leading sign and count the number of digits. A valid exponent contain at least one digit.\\n 5. skip the trailing whitespaces. We must reach the ending 0 if the string is a valid number. \\n \\n=======================================================\\n\\n    bool isNumber(const char *s) \\n    {\\n        int i = 0;\\n        \\n        // skip the whilespaces\\n        for(; s[i] == ' '; i++) {}\\n        \\n        // check the significand\\n        if(s[i] == '+' || s[i] == '-') i++; // skip the sign if exist\\n        \\n        int n_nm, n_pt;\\n        for(n_nm=0, n_pt=0; (s[i]<='9' && s[i]>='0') || s[i]=='.'; i++)\\n            s[i] == '.' ? n_pt++:n_nm++;       \\n        if(n_pt>1 || n_nm<1) // no more than one point, at least one digit\\n            return false;\\n        \\n        // check the exponent if exist\\n        if(s[i] == 'e') {\\n            i++;\\n            if(s[i] == '+' || s[i] == '-') i++; // skip the sign\\n            \\n            int n_nm = 0;\\n            for(; s[i]>='0' && s[i]<='9'; i++, n_nm++) {}\\n            if(n_nm<1)\\n                return false;\\n        }\\n        \\n        // skip the trailing whitespaces\\n        for(; s[i] == ' '; i++) {}\\n        \\n        return s[i]==0;  // must reach the ending 0 of the string\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 23725,
                "title": "c-my-thought-with-dfa",
                "content": "Code first\\n\\n    class Solution {\\n    public:\\n        bool isNumber(string str) {\\n            int state=0, flag=0; // flag to judge the special case \".\"\\n            while(str[0]==\\' \\')  str.erase(0,1);//delete the  prefix whitespace \\n            while(str[str.length()-1]==\\' \\') str.erase(str.length()-1, 1);//delete the suffix whitespace\\n            for(int i=0; i<str.length(); i++){\\n                if(\\'0\\'<=str[i] && str[i]<=\\'9\\'){\\n                    flag=1;\\n                    if(state<=2) state=2;\\n                    else state=(state<=5)?5:7;\\n                }\\n                else if(\\'+\\'==str[i] || \\'-\\'==str[i]){\\n                    if(state==0 || state==3) state++;\\n                    else return false;\\n                }\\n                else if(\\'.\\'==str[i]){\\n                    if(state<=2) state=6;\\n                    else return false;\\n                }\\n                else if(\\'e\\'==str[i]){\\n                    if(flag&&(state==2 || state==6 || state==7)) state=3;\\n                    else return false;\\n                }\\n                else return false;\\n            }\\n            return (state==2 || state==5 || (flag&&state==6) || state==7);\\n        }\\n    };\\n\\n\\n**DFA**\\n\\n**Thank [@unknowcs][3], he came up with a brilliant provement in comments that making this a perfect DFA\\uFF01**\\n\\nIt\\'s just some states changes depend on inputs only.\\n\\nThere 8 state in my states in my DFA. \\nBelow is my **DFA transition diagram**.\\n\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/yangf0722/image_1532856258.png)\\n\\n\\n\\nThere are **5** kind of inputs in my DFA:\\n\\ndigit : number **0-9** for\\n\\n+,- : operator **+** or **-**(negative or positive)\\n\\nexp: **e**\\n\\ndot: **.** \\n\\nother: you can return **false** Immediately\\n\\n\\n**4 final States**  in my DFA transition diagram : **s2, s6, s7, s8**\\n\\n**If the state change to final state at last,  return true.**\\n\\ns2 can accept digits only :    +1  -23432  123 and etc\\n\\ns5 can accept exp expression: +2.4e+12   3e9  and etc\\n\\ns6 can accept decimals end with dot:  1.  -42.  and etc\\n(careful, what if there exist only one dot \".\"\\n**** I use a variable flag judging weather there existing numbers. cause 0. and .0 is valid and . is invalid ****\\n)\\n\\ns7 can accept decimals: +12.23, 87., 132\\n\\nIt is clear how DFA works in my pictures. We just need to handle the inputs, and update the state according to DFA.\\n\\n\\n  [3]: https://oj.leetcode.com/discuss/user/uknowcs",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        bool isNumber(string str) {\\n            int state=0, flag=0; // flag to judge the special case \".\"\\n            while(str[0]==\\' \\')  str.erase(0,1);//delete the  prefix whitespace \\n            while(str[str.length()-1]==\\' \\') str.erase(str.length()-1, 1);//delete the suffix whitespace\\n            for(int i=0; i<str.length(); i++){\\n                if(\\'0\\'<=str[i] && str[i]<=\\'9\\'){\\n                    flag=1;\\n                    if(state<=2) state=2;\\n                    else state=(state<=5)?5:7;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1209315,
                "title": "js-python-java-c-easy-character-conditional-solution-w-explanation",
                "content": "*(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful,* ***please upvote*** *this post.)*\\n\\n---\\n\\n### ***Idea:***\\n\\nTo solve this problem, we should should just make a list of the possible error conditions and then check for each one.\\n\\nThe error conditions are:\\n - More than one exponent character (**\\'e\\'/\\'E\\'**), or seeing an **\\'e\\'/\\'E\\'** when a number has not yet been seen.\\n - More than one sign, or a sign appearing after a decimal or number have been seen. This gets reset when passing an **\\'e\\'/\\'E\\'**.\\n - More than one decimal, or a decimal appearing after an **\\'e\\'/\\'E\\'** has been seen.\\n - Any other non-number character appearing.\\n - Reaching the end of **S** without an active number.\\n\\nTo help with this process, we can set up some boolean flags for the different things of which we\\'re keeping track (**num, exp, sign, dec**). We\\'ll also need to remember to reset all flags except **exp** when we find an **\\'e\\'/\\'E\\'**, as we\\'re starting a new integer expression.\\n\\n - _**Time Complexity: O(N)** where **N** is the number of characters in **S**_\\n - _**Space Complexity: O(1)**_\\n\\n---\\n\\n### ***Javascript Code:***\\n```javascript\\nvar isNumber = function(S) {\\n    let exp = false, sign = false, num = false, dec = false\\n    for (let c of S)\\n        if (c >= \\'0\\' && c <= \\'9\\') num = true     \\n        else if (c === \\'e\\' || c === \\'E\\')\\n            if (exp || !num) return false\\n            else exp = true, sign = false, num = false, dec = false\\n        else if (c === \\'+\\' || c === \\'-\\')\\n            if (sign || num || dec) return false\\n            else sign = true\\n        else if (c === \\'.\\')\\n            if (dec || exp) return false\\n            else dec = true\\n        else return false\\n    return num\\n};\\n```\\n\\n---\\n\\n### ***Python Code:***\\n```python\\nclass Solution:\\n    def isNumber(self, S: str) -> bool:    \\n        num, exp, sign, dec = False, False, False, False\\n        for c in S:\\n            if c >= \\'0\\' and c <= \\'9\\': num = True     \\n            elif c == \\'e\\' or c == \\'E\\':\\n                if exp or not num: return False\\n                else: exp, num, sign, dec = True, False, False, False\\n            elif c == \\'+\\' or c == \\'-\\':\\n                if sign or num or dec: return False\\n                else: sign = True\\n            elif c == \\'.\\':\\n                if dec or exp: return False\\n                else: dec = True\\n            else: return False\\n        return num\\n```\\n\\n---\\n\\n#### ***Java Code:***\\n```java\\nclass Solution {\\n    public boolean isNumber(String S) {\\n        boolean num = false, exp = false, sign = false, dec = false;\\n        for (int i = 0; i < S.length(); i++) {\\n            char c = S.charAt(i);\\n            if (c >= \\'0\\' && c <= \\'9\\') num = true ;    \\n            else if (c == \\'e\\' || c == \\'E\\')\\n                if (exp || !num) return false;\\n                else {\\n                    exp = true;\\n                    sign = false;\\n                    num = false;\\n                    dec = false;\\n                }\\n            else if (c == \\'+\\' || c == \\'-\\')\\n                if (sign || num || dec) return false;\\n                else sign = true;\\n            else if (c == \\'.\\')\\n                if (dec || exp) return false;\\n                else dec = true;\\n            else return false;\\n        }\\n        return num;\\n    }\\n}\\n```\\n\\n---\\n\\n#### ***C++ Code:***\\n```c++\\nclass Solution {\\npublic:\\n    bool isNumber(string S) {\\n        bool num = false, exp = false, sign = false, dec = false;\\n        for (auto c : S)\\n            if (c >= \\'0\\' && c <= \\'9\\') num = true ;    \\n            else if (c == \\'e\\' || c == \\'E\\')\\n                if (exp || !num) return false;\\n                else exp = true, sign = false, num = false, dec = false;\\n            else if (c == \\'+\\' || c == \\'-\\')\\n                if (sign || num || dec) return false;\\n                else sign = true;\\n            else if (c == \\'.\\')\\n                if (dec || exp) return false;\\n                else dec = true;\\n            else return false;\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C",
                    "JavaScript"
                ],
                "code": "```javascript\\nvar isNumber = function(S) {\\n    let exp = false, sign = false, num = false, dec = false\\n    for (let c of S)\\n        if (c >= \\'0\\' && c <= \\'9\\') num = true     \\n        else if (c === \\'e\\' || c === \\'E\\')\\n            if (exp || !num) return false\\n            else exp = true, sign = false, num = false, dec = false\\n        else if (c === \\'+\\' || c === \\'-\\')\\n            if (sign || num || dec) return false\\n            else sign = true\\n        else if (c === \\'.\\')\\n            if (dec || exp) return false\\n            else dec = true\\n        else return false\\n    return num\\n};\\n```\n```python\\nclass Solution:\\n    def isNumber(self, S: str) -> bool:    \\n        num, exp, sign, dec = False, False, False, False\\n        for c in S:\\n            if c >= \\'0\\' and c <= \\'9\\': num = True     \\n            elif c == \\'e\\' or c == \\'E\\':\\n                if exp or not num: return False\\n                else: exp, num, sign, dec = True, False, False, False\\n            elif c == \\'+\\' or c == \\'-\\':\\n                if sign or num or dec: return False\\n                else: sign = True\\n            elif c == \\'.\\':\\n                if dec or exp: return False\\n                else: dec = True\\n            else: return False\\n        return num\\n```\n```java\\nclass Solution {\\n    public boolean isNumber(String S) {\\n        boolean num = false, exp = false, sign = false, dec = false;\\n        for (int i = 0; i < S.length(); i++) {\\n            char c = S.charAt(i);\\n            if (c >= \\'0\\' && c <= \\'9\\') num = true ;    \\n            else if (c == \\'e\\' || c == \\'E\\')\\n                if (exp || !num) return false;\\n                else {\\n                    exp = true;\\n                    sign = false;\\n                    num = false;\\n                    dec = false;\\n                }\\n            else if (c == \\'+\\' || c == \\'-\\')\\n                if (sign || num || dec) return false;\\n                else sign = true;\\n            else if (c == \\'.\\')\\n                if (dec || exp) return false;\\n                else dec = true;\\n            else return false;\\n        }\\n        return num;\\n    }\\n}\\n```\n```c++\\nclass Solution {\\npublic:\\n    bool isNumber(string S) {\\n        bool num = false, exp = false, sign = false, dec = false;\\n        for (auto c : S)\\n            if (c >= \\'0\\' && c <= \\'9\\') num = true ;    \\n            else if (c == \\'e\\' || c == \\'E\\')\\n                if (exp || !num) return false;\\n                else exp = true, sign = false, num = false, dec = false;\\n            else if (c == \\'+\\' || c == \\'-\\')\\n                if (sign || num || dec) return false;\\n                else sign = true;\\n            else if (c == \\'.\\')\\n                if (dec || exp) return false;\\n                else dec = true;\\n            else return false;\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 348874,
                "title": "python-3-regex-with-example",
                "content": "If you want to practice regex, regex101.com is a good site\\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n\\t\\t#Example:               +-     1 or 1. or 1.2 or .2   e or E +- 1     \\n        engine = re.compile(r\"^[+-]?((\\\\d+\\\\.?\\\\d*)|(\\\\d*\\\\.?\\\\d+))([eE][+-]?\\\\d+)?$\")\\n        return engine.match(s.strip(\" \")) # i prefer this over putting more things (\\\\S*) in regex\\n```\\nPlease leave a like if you find this helpful.\\n\\nAs @nwiger pointed out, the new testcase consists of \"E\" as well, so it should be `\"^[+-]?((\\\\d+\\\\.?\\\\d*)|(\\\\d*\\\\.?\\\\d+))([eE][+-]?\\\\d+)?$\"` (extra `E`)\\n\\nThanks,\\nJummyEgg",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n\\t\\t#Example:               +-     1 or 1. or 1.2 or .2   e or E +- 1     \\n        engine = re.compile(r\"^[+-]?((\\\\d+\\\\.?\\\\d*)|(\\\\d*\\\\.?\\\\d+))([eE][+-]?\\\\d+)?$\")\\n        return engine.match(s.strip(\" \")) # i prefer this over putting more things (\\\\S*) in regex\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23739,
                "title": "easy-python-solution-68-ms-beats-100",
                "content": "def isNumber(self, s):\\n\\n    try: float(s)\\n    except ValueError: return False\\n    else: return True\\n\\nEasy Peasy :)",
                "solutionTags": [
                    "Python"
                ],
                "code": "def isNumber(self, s):\\n\\n    try: float(s)\\n    except ValueError: return False\\n    else: return True\\n\\nEasy Peasy :)",
                "codeTag": "Python3"
            },
            {
                "id": 23942,
                "title": "ac-java-solution-with-clear-explanation",
                "content": "    public class Solution {\\n        public boolean isNumber(String s) {\\n            if (s == null) return false;\\n            \\n            s = s.trim();\\n            int n = s.length();\\n            \\n            if (n == 0) return false;\\n            \\n            // flags\\n            int signCount = 0;\\n            boolean hasE = false;\\n            boolean hasNum = false;\\n            boolean hasPoint = false;\\n            \\n            for (int i = 0; i < n; i++) {\\n                char c = s.charAt(i);\\n                \\n                // invalid character\\n                if (!isValid(c)) return false;\\n                \\n                // digit is always fine\\n                if (c >= '0' && c <= '9') hasNum = true;\\n                \\n                // e or E\\n                if (c == 'e' || c == 'E') {\\n                    // e cannot appear twice and digits must be in front of it\\n                    if (hasE || !hasNum) return false;\\n                    // e cannot be the last one\\n                    if (i == n - 1) return false;\\n                    \\n                    hasE = true;\\n                }\\n                \\n                // decimal place\\n                if (c == '.') {\\n                    // . cannot appear twice and it cannot appear after e\\n                    if (hasPoint || hasE) return false;\\n                    // if . is the last one, digits must be in front of it, e.g. \"7.\"\\n                    if (i == n - 1 && !hasNum) return false;\\n                    \\n                    hasPoint = true;\\n                }\\n                \\n                // signs\\n                if (c == '+' || c == '-') {\\n                    // no more than 2 signs\\n                    if (signCount == 2) return false;\\n                    // sign cannot be the last one\\n                    if (i == n - 1) return false;\\n                    // sign can appear in the middle only when e appears in front\\n                    if (i > 0 && !hasE) return false;\\n                    \\n                    signCount++;\\n                }\\n            }\\n            \\n            return true;\\n        }\\n        \\n        boolean isValid(char c) {\\n            return c == '.' || c == '+' || c == '-' || c == 'e' || c == 'E' || c >= '0' && c <= '9';\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public boolean isNumber(String s) {\\n            if (s == null) return false;\\n            \\n            s = s.trim();\\n            int n = s.length();\\n            \\n            if (n == 0) return false;\\n            \\n            // flags\\n            int signCount = 0;\\n            boolean hasE = false;\\n            boolean hasNum = false;\\n            boolean hasPoint = false;\\n            \\n            for (int i = 0; i < n; i++) {\\n                char c = s.charAt(i);\\n                \\n                // invalid character\\n                if (!isValid(c)) return false;\\n                \\n                // digit is always fine\\n                if (c >= '0' && c <= '9') hasNum = true;\\n                \\n                // e or E\\n                if (c == 'e' || c == 'E') {\\n                    // e cannot appear twice and digits must be in front of it\\n                    if (hasE || !hasNum) return false;\\n                    // e cannot be the last one\\n                    if (i == n - 1) return false;\\n                    \\n                    hasE = true;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 360781,
                "title": "python-with-state-machine-36ms",
                "content": "![image](https://assets.leetcode.com/users/dddzheng/image_1566177291.png)\\n\\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        # states\\n        start       = 0\\n        int_sign    = 1\\n        integer     = 2\\n        point       = 3\\n        frac        = 4\\n        exp         = 5\\n        exp_sign    = 6\\n        exp_int     = 7\\n\\n        # inputs\\n        digit       = 1\\n        sign        = 2\\n        dot         = 3\\n        e           = 4\\n\\n        def classify(c):\\n            if c in \\'0123456789\\': return digit\\n            if c == \\'.\\'         : return dot\\n            if c in \\'+-\\'        : return sign\\n            if c == \\'e\\'         : return e\\n            raise ValueError\\n\\n        machine = {\\n            start   : {sign:int_sign, digit:integer, dot:point},\\n            int_sign: {digit:integer, dot:point},\\n            integer : {digit:integer, dot:frac, e:exp},\\n            point   : {digit:frac},\\n            frac    : {digit:frac, e:exp},\\n            exp     : {digit:exp_int, sign:exp_sign},\\n            exp_sign: {digit:exp_int},\\n            exp_int : {digit:exp_int},\\n        }\\n\\n        state = start\\n        for c in s.strip():\\n            try:\\n                state = machine[state][classify(c)]\\n            except: return False\\n        return state in [integer, frac, exp_int]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        # states\\n        start       = 0\\n        int_sign    = 1\\n        integer     = 2\\n        point       = 3\\n        frac        = 4\\n        exp         = 5\\n        exp_sign    = 6\\n        exp_int     = 7\\n\\n        # inputs\\n        digit       = 1\\n        sign        = 2\\n        dot         = 3\\n        e           = 4\\n\\n        def classify(c):\\n            if c in \\'0123456789\\': return digit\\n            if c == \\'.\\'         : return dot\\n            if c in \\'+-\\'        : return sign\\n            if c == \\'e\\'         : return e\\n            raise ValueError\\n\\n        machine = {\\n            start   : {sign:int_sign, digit:integer, dot:point},\\n            int_sign: {digit:integer, dot:point},\\n            integer : {digit:integer, dot:frac, e:exp},\\n            point   : {digit:frac},\\n            frac    : {digit:frac, e:exp},\\n            exp     : {digit:exp_int, sign:exp_sign},\\n            exp_sign: {digit:exp_int},\\n            exp_int : {digit:exp_int},\\n        }\\n\\n        state = start\\n        for c in s.strip():\\n            try:\\n                state = machine[state][classify(c)]\\n            except: return False\\n        return state in [integer, frac, exp_int]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23798,
                "title": "cleanest-c-solution-using-dfa-impress-your-interviewer-with-elegant-code",
                "content": "1. Use Deterministic Finite Automata method can make code elegant\\n2. Define input types:\\n\\t\\t\\t(1) T0: Digit: 0-9\\n\\t\\t\\t(2) T1: Sign: '+', '-'\\n\\t\\t\\t(3) T2: 'e'\\n\\t\\t\\t(4) T3: '.'\\n\\t\\t\\t(5) T4: Blank\\n\\t\\t\\t(6) T5: Others\\n3. Define states:\\n\\t\\t\\t(1) Q0: initial states; can accept digit (go to Q2), sign (go to Q1), '.' (has not found any digit, so go to Q3), blank (stay at Q0), other input lead to rejection\\n\\t\\t\\t(2) Q1: find sign at the beginning; can accept digit (go to Q2), '.' (has not found any digit, so go to Q3), other input lead to rejection \\n\\t\\t\\t(3) Q2: find digit, but has not found '.'; can accept digit (stay at Q2), 'e' (go to Q5), '.' (now find digit, can go to Q4), blank (go to Q8), other input lead to rejection\\n\\t\\t\\t(4) Q3: find '.', but has not found any digit; can only accept digit (find digit, now can go to Q4), other input lead to rejection\\n\\t\\t\\t(5) Q4: find '.', and has already find some digits; can accept digit (stay at Q4), 'e' (go to Q5), blank (go to Q8), other input lead to rejection\\n\\t\\t\\t(6) Q5: find 'e'; can accept digit (digit before 'e' and after 'e' can lead to different states, so go to Q7), sign (sign before 'e' and after 'e' can lead to different states, so go to Q6), other input lead to rejection\\n\\t\\t\\t(7) Q6: find sign after e; can only accept digit (go to Q7), other input lead to rejection\\n\\t\\t\\t(8) Q7: find digit after e; can accept digit (stay at Q7), and blank (go to Q8)\\n\\t\\t\\t(9) Q8: find blank; can only accept blank (Q8), other input lead to rejection\\n\\n**Edit1:**\\n4. I use a bitset to specify the valid states. The valid state means if the input string ends with the following states, the input string represents a valid number. These valid states include: Q8, Q7, Q4, Q2, so the bitset is set as *validStates* = \"110010100\". Note that the rightmost char of \"110010100\" is the first position in bitset, namely validStates[0]. For example, input string \"12.345 \" ends up with tailing blanks and this input is valid, so Q8 is a valid state, i.e., validStates[8] == 1. Also, the input string \"100.\" is a valid number, so state Q4 is a valid state, so validStates[4] == 1. You can try to tell Q7, Q2 according to the requirement of the problem, which you need to discuss with your interviewer.\\n```\\npublic:\\n    bool isNumber(string s) {\\n        int state = 0;\\n        vector<vector<int> > transTable = {\\n            {2, 1, -1, 3, 0, -1}, // Q0\\n            {2, -1, -1, 3, -1, -1}, // Q1\\n            {2, -1, 5, 4, 8, -1}, // Q2\\n            {4, -1, -1, -1, -1, -1}, // Q3\\n            {4, -1, 5, -1, 8, -1}, // Q4\\n            {7, 6, -1, -1, -1, -1}, // Q5\\n            {7, -1, -1, -1, -1, -1}, // Q6\\n            {7, -1, -1, -1, 8, -1}, // Q7\\n            {-1, -1, -1, -1, 8, -1} // Q8\\n        };\\n        bitset<9> validStates(\"110010100\"); \\n        for(char c: s) {\\n            int type = inputType(c);\\n            state = transTable[state][type];\\n            if(state == -1) return false;\\n        }\\n        return validStates[state];\\n    }\\n    \\nprivate:\\n    int inputType(char c) { // use type ID as index to get next state in the transition table.\\n        if(isdigit(c)) return 0; // T0\\n        if(c == '+' || c == '-') return 1; // T1\\n        if(c == 'e') return 2; // T2\\n        if(c == '.') return 3; // T3\\n        if(c == ' ') return 4; // T4\\n        else return 5; // T5\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic:\\n    bool isNumber(string s) {\\n        int state = 0;\\n        vector<vector<int> > transTable = {\\n            {2, 1, -1, 3, 0, -1}, // Q0\\n            {2, -1, -1, 3, -1, -1}, // Q1\\n            {2, -1, 5, 4, 8, -1}, // Q2\\n            {4, -1, -1, -1, -1, -1}, // Q3\\n            {4, -1, 5, -1, 8, -1}, // Q4\\n            {7, 6, -1, -1, -1, -1}, // Q5\\n            {7, -1, -1, -1, -1, -1}, // Q6\\n            {7, -1, -1, -1, 8, -1}, // Q7\\n            {-1, -1, -1, -1, 8, -1} // Q8\\n        };\\n        bitset<9> validStates(\"110010100\"); \\n        for(char c: s) {\\n            int type = inputType(c);\\n            state = transTable[state][type];\\n            if(state == -1) return false;\\n        }\\n        return validStates[state];\\n    }\\n    \\nprivate:\\n    int inputType(char c) { // use type ID as index to get next state in the transition table.\\n        if(isdigit(c)) return 0; // T0\\n        if(c == '+' || c == '-') return 1; // T1\\n        if(c == 'e') return 2; // T2\\n        if(c == '.') return 3; // T3\\n        if(c == ' ') return 4; // T4\\n        else return 5; // T5\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 23785,
                "title": "java-logically-simple-flexible-and-clear-solution-including-rules-of-a-valid-number",
                "content": "The idea is to identify the rules of a valid number first, then set boolean variables to mark key characters and judge the validity. \\n\\nThis solution is logically simple and easy to understand, and moreover, it is flexible to extend to the cases where a string of a valid number can accept any space appears anywhere, or/and the exponent can be a decimal number.\\n\\n\\n    public boolean isNumber(String s) {\\n\\t\\t\\t/**\\n\\t\\t\\t * isNumber(s)==true if and only if s=s1 or s1+'e'+s2, where s1, s2\\n\\t\\t\\t * are valid strings of a number without the char 'e', and s2 is an\\n\\t\\t\\t * integer.\\n\\t\\t\\t * \\n\\t\\t\\t * 'e' : valid_count=0~1; [boolean hasE]\\n\\t\\t\\t * \\n\\t\\t\\t * Valid chars in a string of a number without 'e':\\n\\t\\t\\t * \\n\\t\\t\\t * ' ' : valid_count=0~n; must appear at two ends\\n\\t\\t\\t * \\n\\t\\t\\t * '+/-' : valid_count=0~1; must be the first non-space valid char;\\n\\t\\t\\t * [boolean hasFirst]\\n\\t\\t\\t * \\n\\t\\t\\t * '.' : valid_count=0~1; cannot appear after 'e'; [boolean hasDot]\\n\\t\\t\\t * \\n\\t\\t\\t * '0~9' : valid_count=1~n; [boolean hasDigit]\\n\\t\\t\\t */\\n\\n\\t\\t\\ts = s.trim();\\n\\t\\t\\tint n = s.length();\\n\\t\\t\\tif (n == 0)\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\tboolean hasE, hasFirst, hasDot, hasDigit;\\n\\t\\t\\thasE = hasFirst = hasDot = hasDigit = false;\\n\\n\\t\\t\\tchar c;\\n\\t\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\t\\tc = s.charAt(i);\\n\\n\\t\\t\\t\\tif (c >= '0' && c <= '9') {\\n\\t\\t\\t\\t\\thasFirst = hasDigit = true;\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tswitch (c) {\\n\\t\\t\\t\\t/*\\n\\t\\t\\t\\t * case ' ': continue;\\n\\t\\t\\t\\t */ // extend to accept any space everywhere\\n\\t\\t\\t\\tcase 'e':\\n\\t\\t\\t\\t\\t// already has 'e' or no digit before 'e'\\n\\t\\t\\t\\t\\tif (hasE || !hasDigit)\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\thasE = true;\\n\\n\\t\\t\\t\\t\\t// reset for the exponential number\\n\\t\\t\\t\\t\\thasFirst = hasDigit = false;\\n\\t\\t\\t\\t\\thasDot = true; // the exponent must be an integer, hence\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// regard as if a dot exists already. Set\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// hasDot = false extending to accept any\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// (decimal) number as an exponent.\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\tcase '+':\\n\\t\\t\\t\\tcase '-':\\n\\t\\t\\t\\t\\tif (hasFirst)\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\thasFirst = true;\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\tcase '.':\\n\\t\\t\\t\\t\\tif (hasDot)\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\thasFirst = hasDot = true;\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn hasDigit;\\n\\t\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "The idea is to identify the rules of a valid number first, then set boolean variables to mark key characters and judge the validity. \\n\\nThis solution is logically simple and easy to understand, and moreover, it is flexible to extend to the cases where a string of a valid number can accept any space appears anywhere, or/and the exponent can be a decimal number.\\n\\n\\n    public boolean isNumber(String s) {\\n\\t\\t\\t/**\\n\\t\\t\\t * isNumber(s)==true if and only if s=s1 or s1+'e'+s2, where s1, s2\\n\\t\\t\\t * are valid strings of a number without the char 'e', and s2 is an\\n\\t\\t\\t * integer.\\n\\t\\t\\t * \\n\\t\\t\\t * 'e' : valid_count=0~1; [boolean hasE]\\n\\t\\t\\t * \\n\\t\\t\\t * Valid chars in a string of a number without 'e':\\n\\t\\t\\t * \\n\\t\\t\\t * ' ' : valid_count=0~n; must appear at two ends\\n\\t\\t\\t * \\n\\t\\t\\t * '+/-' : valid_count=0~1; must be the first non-space valid char;\\n\\t\\t\\t * [boolean hasFirst]\\n\\t\\t\\t * \\n\\t\\t\\t * '.' : valid_count=0~1; cannot appear after 'e'; [boolean hasDot]\\n\\t\\t\\t * \\n\\t\\t\\t * '0~9' : valid_count=1~n; [boolean hasDigit]\\n\\t\\t\\t */\\n\\n\\t\\t\\ts = s.trim();\\n\\t\\t\\tint n = s.length();\\n\\t\\t\\tif (n == 0)\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\tboolean hasE, hasFirst, hasDot, hasDigit;\\n\\t\\t\\thasE = hasFirst = hasDot = hasDigit = false;\\n\\n\\t\\t\\tchar c;\\n\\t\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\t\\tc = s.charAt(i);\\n\\n\\t\\t\\t\\tif (c >= '0' && c <= '9') {\\n\\t\\t\\t\\t\\thasFirst = hasDigit = true;\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tswitch (c) {\\n\\t\\t\\t\\t/*\\n\\t\\t\\t\\t * case ' ': continue;\\n\\t\\t\\t\\t */ // extend to accept any space everywhere\\n\\t\\t\\t\\tcase 'e':\\n\\t\\t\\t\\t\\t// already has 'e' or no digit before 'e'\\n\\t\\t\\t\\t\\tif (hasE || !hasDigit)\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\thasE = true;\\n\\n\\t\\t\\t\\t\\t// reset for the exponential number\\n\\t\\t\\t\\t\\thasFirst = hasDigit = false;\\n\\t\\t\\t\\t\\thasDot = true; // the exponent must be an integer, hence\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// regard as if a dot exists already. Set\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// hasDot = false extending to accept any\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// (decimal) number as an exponent.\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\tcase '+':\\n\\t\\t\\t\\tcase '-':\\n\\t\\t\\t\\t\\tif (hasFirst)\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\thasFirst = true;\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\tcase '.':\\n\\t\\t\\t\\t\\tif (hasDot)\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\thasFirst = hasDot = true;\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn hasDigit;\\n\\t\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 23910,
                "title": "simple-one-line-regex-solution",
                "content": "- The integer RE is: `^[+-]?\\\\d+$`\\n- The float RE is: `^[+-]?((\\\\d*\\\\.\\\\d+)|(\\\\d+\\\\.\\\\d*))$`\\n- The scientific notation RE is: `^[+-]?((\\\\d*\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))[eE][+-]?\\\\d+$`\\n\\nWe can combine them as one: `^[+-]?((\\\\d*\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))([eE][+-]?\\\\d+)?$`\\n\\n    class Solution(object):\\n        regex = re.compile(r'^[+-]?((\\\\d*\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))([eE][+-]?\\\\d+)?$')\\n    \\n        def isNumber(self, s):\\n            return bool(self.regex.match(s.strip()))",
                "solutionTags": [],
                "code": "- The integer RE is: `^[+-]?\\\\d+$`\\n- The float RE is: `^[+-]?((\\\\d*\\\\.\\\\d+)|(\\\\d+\\\\.\\\\d*))$`\\n- The scientific notation RE is: `^[+-]?((\\\\d*\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))[eE][+-]?\\\\d+$`\\n\\nWe can combine them as one: `^[+-]?((\\\\d*\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))([eE][+-]?\\\\d+)?$`\\n\\n    class Solution(object):\\n        regex = re.compile(r'^[+-]?((\\\\d*\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))([eE][+-]?\\\\d+)?$')\\n    \\n        def isNumber(self, s):\\n            return bool(self.regex.match(s.strip()))",
                "codeTag": "Java"
            },
            {
                "id": 24046,
                "title": "java-solution-with-one-line",
                "content": "return s.matches(\"(\\\\\\\\\\\\s\\\\*)[+-]?((\\\\\\\\\\\\\\\\.[0-9]+)|([0-9]+(\\\\\\\\\\\\\\\\.[0-9]*)?))([eE][+-]?[0-9]+)?(\\\\\\\\\\\\s\\\\*)\");",
                "solutionTags": [
                    "Java"
                ],
                "code": "return s.matches(\"(\\\\\\\\\\\\s\\\\*)[+-]?((\\\\\\\\\\\\\\\\.[0-9]+)|([0-9]+(\\\\\\\\\\\\\\\\.[0-9]*)?))([eE][+-]?[0-9]+)?(\\\\\\\\\\\\s\\\\*)\");",
                "codeTag": "Unknown"
            },
            {
                "id": 23723,
                "title": "c-12-ms-give-some-invalid-examples-easily-understand",
                "content": "    class Solution {\\n    public:\\n        bool isNumber(string s) {\\n            //\"1 1\"is not valid, \"0x11\" is not valid, \".\" is not valid, \"2e3.1\" is not valid, \"2e\" is not valid,\"1a\" is not valid,\"++1\" is not valid\\n            int n = s.size();\\n            if(n == 0) return false;\\n            int i = 0;\\n            int count_num = 0,count_point = 0;\\n            while(s[i] == ' ') i++;\\n            if(s[i] == '+' || s[i] == '-') i++;\\n            while(isdigit(s[i]) || s[i] == '.') s[i++] == '.'?count_point++:count_num++;\\n            if(count_point > 1 || count_num < 1) return false;\\n            if(s[i] == 'e'){\\n                i++;\\n                count_num = 0;count_point = 0;\\n                if(s[i] == '+' || s[i] == '-') i++;\\n                while(isdigit(s[i]) || s[i] == '.') s[i++] == '.'?count_point++:count_num++;\\n                if(count_point > 0 || count_num < 1) return false;\\n            }\\n            while(s[i] == ' ') i++;\\n            return i == n;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        bool isNumber(string s) {\\n            //\"1 1\"is not valid, \"0x11\" is not valid, \".\" is not valid, \"2e3.1\" is not valid, \"2e\" is not valid,\"1a\" is not valid,\"++1\" is not valid\\n            int n = s.size();\\n            if(n == 0) return false;\\n            int i = 0;\\n            int count_num = 0,count_point = 0;\\n            while(s[i] == ' ') i++;\\n            if(s[i] == '+' || s[i] == '-') i++;\\n            while(isdigit(s[i]) || s[i] == '.') s[i++] == '.'?count_point++:count_num++;\\n            if(count_point > 1 || count_num < 1) return false;\\n            if(s[i] == 'e'){\\n                i++;\\n                count_num = 0;count_point = 0;\\n                if(s[i] == '+' || s[i] == '-') i++;\\n                while(isdigit(s[i]) || s[i] == '.') s[i++] == '.'?count_point++:count_num++;\\n                if(count_point > 0 || count_num < 1) return false;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3310814,
                "title": "beats-100-c-solution-using-for-loop-only-super-fast-easy-to-understand",
                "content": "# Intuition\\nWe will iterate over the string and check the basic requirements.\\nAnd based upon that will return true of false.\\n# Approach\\nWhat we need to iterate and check:\\n- Iterate over sign\\n- If it is at the end return false\\n- Iterate over the digits\\n- If we reach the end of the string return true\\n- Iterate dot and the check the valid number condition\\n- Check digits after dot\\n- Iterate decimals until we reach the last index or e\\n- If we reach the end of the string return true\\n- Iterate over the sign\\n- Iterate over the digits\\n\\n# Complexity\\n- Time complexity:\\nO(N) \\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        int i=0, n=s.size();\\n\\n        // iterate over sign\\n        if(s[i]==\\'+\\' || s[i]==\\'-\\') i++;\\n\\n        // checking ending condition\\n        if(i>=n) return false;\\n        \\n        bool beforeInt = false;\\n\\n        // iterating digits\\n        while(s[i]>=\\'0\\' && s[i]<=\\'9\\' && i<n){\\n            i++;\\n            beforeInt = true;\\n        }\\n\\n        // checking ending condition\\n        if(i>=n) return true;\\n\\n        // Passing dot\\n        bool dot = false;\\n        if(s[i] == \\'.\\') {i++; dot = true;}\\n\\n        // check dot ending condition\\n        if(i>=n)\\n            if(dot==true && beforeInt==false) return false;\\n            else return true;\\n        \\n        // bool afterInt = false;\\n\\n        // check digit after dot\\n        if(dot) \\n        if(beforeInt) {if((s[i]<\\'0\\' || s[i]>\\'9\\') && (s[i]!=\\'e\\' && s[i]!=\\'E\\') ) return false; }\\n        else {if(s[i]<\\'0\\' || s[i]>\\'9\\') return false; }\\n\\n        // iterate decimals until we reach last indext or e\\n        while(i<n && s[i]!=\\'e\\' && s[i]!=\\'E\\'){\\n            if(s[i]<\\'0\\' || s[i]>\\'9\\') return false;\\n            i++;\\n        }\\n        if(!dot)\\n        if((s[i]==\\'e\\' || s[i]==\\'E\\') && beforeInt==false) return false;\\n        // checking ending condition\\n        if(i>=n) return true;\\n        \\n        i++; // next ot e\\n        \\n        // iterate sign\\n        if(s[i]==\\'+\\' || s[i]==\\'-\\') i++;\\n\\n        // checking ending condition\\n        if(i>=n) return false;\\n\\n        bool lastInt = false;\\n        // iterate over digits\\n        while(s[i]>=\\'0\\' && s[i]<=\\'9\\' && i<n){\\n            i++;\\n            lastInt = true;\\n        }\\n\\n        if(!lastInt) return false;\\n\\n        if(i>=n) return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Brainteaser",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        int i=0, n=s.size();\\n\\n        // iterate over sign\\n        if(s[i]==\\'+\\' || s[i]==\\'-\\') i++;\\n\\n        // checking ending condition\\n        if(i>=n) return false;\\n        \\n        bool beforeInt = false;\\n\\n        // iterating digits\\n        while(s[i]>=\\'0\\' && s[i]<=\\'9\\' && i<n){\\n            i++;\\n            beforeInt = true;\\n        }\\n\\n        // checking ending condition\\n        if(i>=n) return true;\\n\\n        // Passing dot\\n        bool dot = false;\\n        if(s[i] == \\'.\\') {i++; dot = true;}\\n\\n        // check dot ending condition\\n        if(i>=n)\\n            if(dot==true && beforeInt==false) return false;\\n            else return true;\\n        \\n        // bool afterInt = false;\\n\\n        // check digit after dot\\n        if(dot) \\n        if(beforeInt) {if((s[i]<\\'0\\' || s[i]>\\'9\\') && (s[i]!=\\'e\\' && s[i]!=\\'E\\') ) return false; }\\n        else {if(s[i]<\\'0\\' || s[i]>\\'9\\') return false; }\\n\\n        // iterate decimals until we reach last indext or e\\n        while(i<n && s[i]!=\\'e\\' && s[i]!=\\'E\\'){\\n            if(s[i]<\\'0\\' || s[i]>\\'9\\') return false;\\n            i++;\\n        }\\n        if(!dot)\\n        if((s[i]==\\'e\\' || s[i]==\\'E\\') && beforeInt==false) return false;\\n        // checking ending condition\\n        if(i>=n) return true;\\n        \\n        i++; // next ot e\\n        \\n        // iterate sign\\n        if(s[i]==\\'+\\' || s[i]==\\'-\\') i++;\\n\\n        // checking ending condition\\n        if(i>=n) return false;\\n\\n        bool lastInt = false;\\n        // iterate over digits\\n        while(s[i]>=\\'0\\' && s[i]<=\\'9\\' && i<n){\\n            i++;\\n            lastInt = true;\\n        }\\n\\n        if(!lastInt) return false;\\n\\n        if(i>=n) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23975,
                "title": "my-python-solution-without-regex",
                "content": "    class Solution:\\n        # @param {string} s\\n        # @return {boolean}\\n        def isNumber(self, s):\\n            s = s.strip(\" \")\\n            if not s: return False\\n            return self.isUnsigned(s) or \\\\\\n                   (s[0] in ['-','+'] and self.isUnsigned(s[1:]))\\n    \\n        def isUnsigned(self, s):\\n            return self.isDigits(s) or self.isDecimal(s) or self.isScientific(s)\\n    \\n        def isDigits(self, s):\\n            if not s: return False\\n            for i in s:\\n                if i not in \"0123456789\":\\n                    return False\\n            return True\\n    \\n        def isScientific(self, s):\\n            pE = s.find(\"e\")\\n            if pE==-1: \\n                return False \\n            else:\\n                before = (self.isDigits(s[:pE]) or self.isDecimal(s[:pE]))\\n                after = self.isDigits(s[pE+1:]) or (bool(s[pE+1:]) and \\\\\\n                        s[pE+1] in ['-','+'] and self.isDigits(s[pE+2:]))\\n                return (before and after)\\n                \\n    \\n        def isDecimal(self, s):\\n            pDot = s.find(\".\")\\n            if pDot==-1: \\n                return False \\n            else:\\n                before = self.isDigits(s[:pDot])\\n                after = self.isDigits(s[pDot+1:])\\n                return (before and after) or \\\\\\n                       (not s[:pDot] and after) or \\\\\\n                       (before and not s[pDot+1:])",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n        # @param {string}",
                "codeTag": "Java"
            },
            {
                "id": 3263628,
                "title": "valid-number-java-super-easy-solution",
                "content": "# Intuition\\nANY SOLUTION MORE EASY THAN THIS CAN NOT EXSIST\\nEASIEST SIMPLE SHORT CRISP JAVA SOLUTION\\n\\n# Approach\\nUse try Catch block.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        try{\\n            int l=s.length();\\n            if(s.equals(\"Infinity\")||s.equals(\"-Infinity\")||s.equals(\"+Infinity\")||s.charAt(l-1)==\\'f\\'||s.charAt(l-1)==\\'d\\'||s.charAt(l-1)==\\'D\\'||s.charAt(l-1)==\\'F\\')\\n            return false;\\n            double x=Double.parseDouble(s);\\n            return true;\\n        }\\n        catch(Exception e){\\n            return false;\\n        }\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Number Theory"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        try{\\n            int l=s.length();\\n            if(s.equals(\"Infinity\")||s.equals(\"-Infinity\")||s.equals(\"+Infinity\")||s.charAt(l-1)==\\'f\\'||s.charAt(l-1)==\\'d\\'||s.charAt(l-1)==\\'D\\'||s.charAt(l-1)==\\'F\\')\\n            return false;\\n            double x=Double.parseDouble(s);\\n            return true;\\n        }\\n        catch(Exception e){\\n            return false;\\n        }\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1209317,
                "title": "valid-number-js-python-java-c-easy-character-conditional-solution-w-explanation",
                "content": "*(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful,* ***please upvote*** *this post.)*\\n\\n---\\n\\n#### ***Idea:***\\n\\nTo solve this problem, we should should just make a list of the possible error conditions and then check for each one.\\n\\nThe error conditions are:\\n - More than one exponent character (**\\'e\\'/\\'E\\'**), or seeing an **\\'e\\'/\\'E\\'** when a number has not yet been seen.\\n - More than one sign, or a sign appearing after a decimal or number have been seen. This gets reset when passing an **\\'e\\'/\\'E\\'**.\\n - More than one decimal, or a decimal appearing after an **\\'e\\'/\\'E\\'** has been seen.\\n - Any other non-number character appearing.\\n - Reaching the end of **S** without an active number.\\n\\nTo help with this process, we can set up some boolean flags for the different things of which we\\'re keeping track (**num, exp, sign, dec**). We\\'ll also need to remember to reset all flags except **exp** when we find an **\\'e\\'/\\'E\\'**, as we\\'re starting a new integer expression.\\n\\n - _**Time Complexity: O(N)** where **N** is the number of characters in **S**_\\n - _**Space Complexity: O(1)**_\\n\\n---\\n\\n#### ***Javascript Code:***\\n```javascript\\nvar isNumber = function(S) {\\n    let exp = false, sign = false, num = false, dec = false\\n    for (let c of S)\\n        if (c >= \\'0\\' && c <= \\'9\\') num = true     \\n        else if (c === \\'e\\' || c === \\'E\\')\\n            if (exp || !num) return false\\n            else exp = true, sign = false, num = false, dec = false\\n        else if (c === \\'+\\' || c === \\'-\\')\\n            if (sign || num || dec) return false\\n            else sign = true\\n        else if (c === \\'.\\')\\n            if (dec || exp) return false\\n            else dec = true\\n        else return false\\n    return num\\n};\\n```\\n\\n---\\n\\n#### ***Python Code:***\\n```python\\nclass Solution:\\n    def isNumber(self, S: str) -> bool:    \\n        num, exp, sign, dec = False, False, False, False\\n        for c in S:\\n            if c >= \\'0\\' and c <= \\'9\\': num = True     \\n            elif c == \\'e\\' or c == \\'E\\':\\n                if exp or not num: return False\\n                else: exp, num, sign, dec = True, False, False, False\\n            elif c == \\'+\\' or c == \\'-\\':\\n                if sign or num or dec: return False\\n                else: sign = True\\n            elif c == \\'.\\':\\n                if dec or exp: return False\\n                else: dec = True\\n            else: return False\\n        return num\\n```\\n\\n---\\n\\n#### ***Java Code:***\\n```java\\nclass Solution {\\n    public boolean isNumber(String S) {\\n        boolean num = false, exp = false, sign = false, dec = false;\\n        for (int i = 0; i < S.length(); i++) {\\n            char c = S.charAt(i);\\n            if (c >= \\'0\\' && c <= \\'9\\') num = true ;    \\n            else if (c == \\'e\\' || c == \\'E\\')\\n                if (exp || !num) return false;\\n                else {\\n                    exp = true;\\n                    sign = false;\\n                    num = false;\\n                    dec = false;\\n                }\\n            else if (c == \\'+\\' || c == \\'-\\')\\n                if (sign || num || dec) return false;\\n                else sign = true;\\n            else if (c == \\'.\\')\\n                if (dec || exp) return false;\\n                else dec = true;\\n            else return false;\\n        }\\n        return num;\\n    }\\n}\\n```\\n\\n---\\n\\n#### ***C++ Code:***\\n```c++\\nclass Solution {\\npublic:\\n    bool isNumber(string S) {\\n        bool num = false, exp = false, sign = false, dec = false;\\n        for (auto c : S)\\n            if (c >= \\'0\\' && c <= \\'9\\') num = true ;    \\n            else if (c == \\'e\\' || c == \\'E\\')\\n                if (exp || !num) return false;\\n                else exp = true, sign = false, num = false, dec = false;\\n            else if (c == \\'+\\' || c == \\'-\\')\\n                if (sign || num || dec) return false;\\n                else sign = true;\\n            else if (c == \\'.\\')\\n                if (dec || exp) return false;\\n                else dec = true;\\n            else return false;\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```javascript\\nvar isNumber = function(S) {\\n    let exp = false, sign = false, num = false, dec = false\\n    for (let c of S)\\n        if (c >= \\'0\\' && c <= \\'9\\') num = true     \\n        else if (c === \\'e\\' || c === \\'E\\')\\n            if (exp || !num) return false\\n            else exp = true, sign = false, num = false, dec = false\\n        else if (c === \\'+\\' || c === \\'-\\')\\n            if (sign || num || dec) return false\\n            else sign = true\\n        else if (c === \\'.\\')\\n            if (dec || exp) return false\\n            else dec = true\\n        else return false\\n    return num\\n};\\n```\n```python\\nclass Solution:\\n    def isNumber(self, S: str) -> bool:    \\n        num, exp, sign, dec = False, False, False, False\\n        for c in S:\\n            if c >= \\'0\\' and c <= \\'9\\': num = True     \\n            elif c == \\'e\\' or c == \\'E\\':\\n                if exp or not num: return False\\n                else: exp, num, sign, dec = True, False, False, False\\n            elif c == \\'+\\' or c == \\'-\\':\\n                if sign or num or dec: return False\\n                else: sign = True\\n            elif c == \\'.\\':\\n                if dec or exp: return False\\n                else: dec = True\\n            else: return False\\n        return num\\n```\n```java\\nclass Solution {\\n    public boolean isNumber(String S) {\\n        boolean num = false, exp = false, sign = false, dec = false;\\n        for (int i = 0; i < S.length(); i++) {\\n            char c = S.charAt(i);\\n            if (c >= \\'0\\' && c <= \\'9\\') num = true ;    \\n            else if (c == \\'e\\' || c == \\'E\\')\\n                if (exp || !num) return false;\\n                else {\\n                    exp = true;\\n                    sign = false;\\n                    num = false;\\n                    dec = false;\\n                }\\n            else if (c == \\'+\\' || c == \\'-\\')\\n                if (sign || num || dec) return false;\\n                else sign = true;\\n            else if (c == \\'.\\')\\n                if (dec || exp) return false;\\n                else dec = true;\\n            else return false;\\n        }\\n        return num;\\n    }\\n}\\n```\n```c++\\nclass Solution {\\npublic:\\n    bool isNumber(string S) {\\n        bool num = false, exp = false, sign = false, dec = false;\\n        for (auto c : S)\\n            if (c >= \\'0\\' && c <= \\'9\\') num = true ;    \\n            else if (c == \\'e\\' || c == \\'E\\')\\n                if (exp || !num) return false;\\n                else exp = true, sign = false, num = false, dec = false;\\n            else if (c == \\'+\\' || c == \\'-\\')\\n                if (sign || num || dec) return false;\\n                else sign = true;\\n            else if (c == \\'.\\')\\n                if (dec || exp) return false;\\n                else dec = true;\\n            else return false;\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 303235,
                "title": "5ms-java-one-line-solution-with-regex-explained",
                "content": "This solution uses a regular expression. As you will see, the code is short, fast (5ms) and memory efficient (beats 99%).\\nFirst, here is the code, then the explaination below.\\n\\n\\timport java.util.regex.*;\\n\\n\\tclass Solution {\\n\\n\\t\\tprivate static Pattern NUMBER = Pattern.compile(\"[+-]?(\\\\\\\\.\\\\\\\\d+|\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)(e[+-]?\\\\\\\\d+)?\");\\n\\n\\t\\tpublic boolean isNumber(String s) {\\n\\t\\t\\treturn NUMBER.matcher(s.trim()).matches();\\n\\t\\t}\\n\\t}\\n \\n**Explaination**\\n\\n**Little regular expression remainder**\\n\\n- `\\\\\\\\d` matches any digit\\n- `\\\\\\\\.` matches a dot (be careful, `.` matches any character)\\n- `[chars]` matches one of the characters between the square brackets. For example, `[acgt]` matches `a` or `c` or `g` or `t`\\n- `expr1|expr2` matches either `expr1` or `expr2`\\n- `expr?` matches `expr` zero or one time. For example, `a?` matches the empty string or `a`. It is used to represent optional parts\\n- `expr*` matches `expr` zero or one or several times. For example, `a*` matches the empty string or `a` or `aa` or `aaa`, etc.\\n- `expr+` matches `expr` one or several times. For example, `a+` matches `a` or `aa` or `aaa`, etc. It means \"at least once\"\\n- `(expr)` represents a group. It is used to separate expressions. For example, `(a|b)c` matches `ac` or `bc` while `a|bc` matches `a` or `bc`\\n\\n**Number**\\n \\n A number can be broken into three parts:\\n \\n - a sign (optional)\\n - a value (mandatory)\\n - an exponential part (optional)\\n\\n**The sign**\\n\\nThis is given by `[+-]?`\\nThe `?` indicate that the sign can be present once or not.\\n\\n**The value**\\n\\nThere are four possible forms\\n\\n- An integer, like 123\\n- A decimal with a fractional part, like 123.456\\n- A decimal without fractional part, like 123.\\n- A decimal with only a fractional part, like .456\\n\\nThe first three forms can be expressed as one expression, `\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?`\\nThis means, one or more digits, optionally followed by a dot and zero or more digits\\n\\nThe last form can be expressed as `\\\\\\\\.\\\\\\\\d+`\\nThis means, a dot followed by one or more digits\\n\\nPut together, this gives `(\\\\\\\\.\\\\\\\\d+|\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)` or `(\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+)` (the order is does not matter).\\n\\n**The exponent**\\n\\nThe exponential part is optional. It consists of the letter `e`, followed by an optional sign (+ or -), followed by one or more digits.\\nThis gives `(e[+-]?\\\\\\\\d+)?`\\n\\n**Final Java code**\\n\\nThe final code is quite simple.\\n\\nFirst, we create a `Pattern` object. Basically, it is an automaton for recognizing strings. It is created only once, for efficiency, and stored in a static variable in order to be reused.\\n\\nThen, we use this pattern to create a matcher object on the input string. A matcher is used to recognize a pattern on a given string with its `matches` method.\\n\\nThe last subtelty is to use the `trim` method on the input string. It removes the leading and trailing spaces.\\n\\nThat\\'s all. :)",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n\\t\\tprivate static Pattern NUMBER = Pattern.compile(\"[+-]?(\\\\\\\\.\\\\\\\\d+|\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)(e[+-]?\\\\\\\\d+)?\");\\n\\n\\t\\tpublic boolean isNumber(String s) {\\n\\t\\t\\treturn NUMBER.matcher(s.trim()).matches();\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 23764,
                "title": "my-54ms-python-solution",
                "content": "    class Solution:\\n    # @param s, a string\\n    # @return a boolean\\n    def removeSpaces(self,s):\\n        n = len(s)\\n        i = 0\\n        j = n-1\\n        while i < n and s[i] == ' ':\\n            i+=1\\n        while j > -1 and s[j] == ' ':\\n            j-=1\\n        return s[i:j+1]\\n        \\n    def isNumber(self, s):\\n        s = self.removeSpaces(s)\\n        n = len(s)\\n        if n == 0:\\n            return False\\n        i = 0\\n        dotFlag = False\\n        EFlag = False\\n        hasDigit = False\\n        hasSign = False\\n        while i < n:\\n            if s[i].isdigit():\\n                i+=1\\n                hasDigit = True\\n                hasSign = True\\n            elif not dotFlag and s[i]=='.':\\n                i+=1\\n                dotFlag = True\\n                hasSign = True\\n            elif hasDigit and not EFlag and (s[i]=='e' or s[i]=='E'):\\n                i+=1\\n                dotFlag = True\\n                EFlag = True\\n                hasDigit = False\\n                hasSign = False\\n            elif not hasDigit and not hasSign and (s[i]=='+' or s[i]=='-'):\\n                i+=1\\n                hasSign = True\\n            else:\\n                return False\\n        if hasDigit:\\n            return True\\n        else:\\n            return False",
                "solutionTags": [],
                "code": "    class Solution:\\n    # @param s, a string\\n    # @return a boolean\\n    def removeSpaces(self,s):\\n        n = len(s)\\n        i = 0\\n        j = n-1\\n        while i < n and s[i] == ' ':\\n            i+=1\\n        while j > -1 and s[j] == ' ':\\n            j-=1\\n        return s[i:j+1]\\n        \\n    def isNumber(self, s):\\n        s = self.removeSpaces(s)\\n        n = len(s)\\n        if n == 0:\\n            return False\\n        i = 0\\n        dotFlag = False\\n        EFlag = False\\n        hasDigit = False\\n        hasSign = False\\n        while i < n:\\n            if s[i].isdigit():\\n                i+=1\\n                hasDigit = True\\n                hasSign = True\\n            elif not dotFlag and s[i]=='.':\\n                i+=1\\n                dotFlag = True\\n                hasSign = True\\n            elif hasDigit and not EFlag and (s[i]=='e' or s[i]=='E'):\\n                i+=1\\n                dotFlag = True\\n                EFlag = True\\n                hasDigit = False\\n                hasSign = False\\n            elif not hasDigit and not hasSign and (s[i]=='+' or s[i]=='-'):\\n                i+=1\\n                hasSign = True\\n            else:\\n                return False\\n        if hasDigit:\\n            return True\\n        else:\\n            return False",
                "codeTag": "Java"
            },
            {
                "id": 2992660,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        return is_valid_number(s);\\n    }\\n\\nbool is_valid_number(const std::string& s) {\\n    if (s.empty()) return false;\\n\\n    size_t i = 0;\\n    if (s[i] == \\'+\\' || s[i] == \\'-\\') i++;\\n\\n    bool has_integer_part = false;\\n    while (i < s.size() && isdigit(s[i])) {\\n        has_integer_part = true;\\n        i++;\\n    }\\n\\n    bool has_decimal_part = false;\\n    if (i < s.size() && s[i] == \\'.\\') {\\n        i++;\\n        while (i < s.size() && isdigit(s[i])) {\\n            has_decimal_part = true;\\n            i++;\\n        }\\n    }\\n\\n    if (i < s.size() && (s[i] == \\'e\\' || s[i] == \\'E\\')) {\\n        i++;\\n\\n        if (i < s.size() && (s[i] == \\'+\\' || s[i] == \\'-\\')) i++;\\n\\n        if (i == s.size() || !isdigit(s[i])) {\\n            return false;\\n        }\\n        while (i < s.size() && isdigit(s[i])) {\\n            i++;\\n        }\\n    }\\n    return i == s.size() && (has_integer_part || has_decimal_part);\\n}\\n};\\n```\\n\\n```Python3 []\\nclass Solution:\\n    r\\n    def is_uinteger(self, st):\\n        if st==\"\": return False\\n        return set(st).issubset(\"0123456789\")\\n    def is_integer(self,st):\\n        if st==\"\": return False\\n        if st[0] in \"+-\":\\n            return self.is_uinteger(st[1:])\\n        return self.is_uinteger(st)\\n    def is_decimal(self,st):\\n        if st==\"\": return False\\n        for c,ss in enumerate(st):\\n            if ss==\".\": break \\n        else: \\n            return self.is_integer(st) \\n        left = st[:c]\\n        right = st[c+1:]\\n        return (((left in \"+-\") and self.is_uinteger(right)) or\\n               ((self.is_integer(left) and (self.is_uinteger(right) or right==\"\"))))\\n    def isNumber(self, s: str) -> bool:\\n        for c,ss in enumerate(s):\\n            if ss in \"eE\":\\n                break \\n        else:\\n            return self.is_decimal(s) or self.is_integer(s)\\n        return  self.is_decimal(s[:c]) & self.is_integer(s[c+1:])\\n```\\n\\n```Java []\\nclass Solution {\\n    public boolean isNumber(String S) {\\n    boolean num = false, exp = false, sign = false, dec = false;\\n        for (int i = 0; i < S.length(); i++) {\\n            char c = S.charAt(i);\\n            if (c >= \\'0\\' && c <= \\'9\\') num = true ;    \\n            else if (c == \\'e\\' || c == \\'E\\')\\n                if (exp || !num) return false;\\n                else {\\n                    exp = true;\\n                    sign = false;\\n                    num = false;\\n                    dec = false;\\n                }\\n            else if (c == \\'+\\' || c == \\'-\\')\\n                if (sign || num || dec) return false;\\n                else sign = true;\\n            else if (c == \\'.\\')\\n                if (dec || exp) return false;\\n                else dec = true;\\n            else return false;\\n        }\\n        return num;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        return is_valid_number(s);\\n    }\\n\\nbool is_valid_number(const std::string& s) {\\n    if (s.empty()) return false;\\n\\n    size_t i = 0;\\n    if (s[i] == \\'+\\' || s[i] == \\'-\\') i++;\\n\\n    bool has_integer_part = false;\\n    while (i < s.size() && isdigit(s[i])) {\\n        has_integer_part = true;\\n        i++;\\n    }\\n\\n    bool has_decimal_part = false;\\n    if (i < s.size() && s[i] == \\'.\\') {\\n        i++;\\n        while (i < s.size() && isdigit(s[i])) {\\n            has_decimal_part = true;\\n            i++;\\n        }\\n    }\\n\\n    if (i < s.size() && (s[i] == \\'e\\' || s[i] == \\'E\\')) {\\n        i++;\\n\\n        if (i < s.size() && (s[i] == \\'+\\' || s[i] == \\'-\\')) i++;\\n\\n        if (i == s.size() || !isdigit(s[i])) {\\n            return false;\\n        }\\n        while (i < s.size() && isdigit(s[i])) {\\n            i++;\\n        }\\n    }\\n    return i == s.size() && (has_integer_part || has_decimal_part);\\n}\\n};\\n```\n```Python3 []\\nclass Solution:\\n    r\\n    def is_uinteger(self, st):\\n        if st==\"\": return False\\n        return set(st).issubset(\"0123456789\")\\n    def is_integer(self,st):\\n        if st==\"\": return False\\n        if st[0] in \"+-\":\\n            return self.is_uinteger(st[1:])\\n        return self.is_uinteger(st)\\n    def is_decimal(self,st):\\n        if st==\"\": return False\\n        for c,ss in enumerate(st):\\n            if ss==\".\": break \\n        else: \\n            return self.is_integer(st) \\n        left = st[:c]\\n        right = st[c+1:]\\n        return (((left in \"+-\") and self.is_uinteger(right)) or\\n               ((self.is_integer(left) and (self.is_uinteger(right) or right==\"\"))))\\n    def isNumber(self, s: str) -> bool:\\n        for c,ss in enumerate(s):\\n            if ss in \"eE\":\\n                break \\n        else:\\n            return self.is_decimal(s) or self.is_integer(s)\\n        return  self.is_decimal(s[:c]) & self.is_integer(s[c+1:])\\n```\n```Java []\\nclass Solution {\\n    public boolean isNumber(String S) {\\n    boolean num = false, exp = false, sign = false, dec = false;\\n        for (int i = 0; i < S.length(); i++) {\\n            char c = S.charAt(i);\\n            if (c >= \\'0\\' && c <= \\'9\\') num = true ;    \\n            else if (c == \\'e\\' || c == \\'E\\')\\n                if (exp || !num) return false;\\n                else {\\n                    exp = true;\\n                    sign = false;\\n                    num = false;\\n                    dec = false;\\n                }\\n            else if (c == \\'+\\' || c == \\'-\\')\\n                if (sign || num || dec) return false;\\n                else sign = true;\\n            else if (c == \\'.\\')\\n                if (dec || exp) return false;\\n                else dec = true;\\n            else return false;\\n        }\\n        return num;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1209644,
                "title": "c-8ms-regex-solution-details",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    bool isNumber(string s) const {\\n        static regex r(R\"_([+-]?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][+-]?\\\\d+)?)_\");\\n        return regex_match(s, r);\\n    }\\n};\\n```\\n\\n---\\n\\nThe regex uses a _[modified ECMAScript format](https://en.cppreference.com/w/cpp/regex/ecmascript)_, and works as follows, from left to right:\\n\\n1. `[+-]?` matches the optional `+` or `-` sign of our number.\\n\\n2.  `(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)` matches the _integer_ or _decimal_ number:\\n  a. `\\\\d+(\\\\.\\\\d*)?` matches an _integer_ or a _decimal_ number with optional decimal digits, e.g: `1`, `1.0` or `1.` (same as `1.0`).\\n  b. `\\\\.\\\\d+` matches a _decimal_ number with an omitted integer component, e.g: `.3` (same as `0.3`).\\n  \\n3. `([eE][+-]?\\\\d+)?` matches the optional _integer exponent of 10_ at the end of the number, e.g: `e3`, `e+3`, `e-3`:\\n  a. `[eE][+-]?` matches an upper or lowercase `e` followed by the optional `+` or `-` sign.\\n  b. `\\\\d+` matches the digits of the _integer_ exponent.\\n\\n---\\n\\nSome notes:\\n\\n`static` is used so the `std::regex` is instantiated and compiled once only.\\nIf we don\\'t do this, most of our runtime will be spent recompiling the same regex over and over again!\\n\\nThe `R\"_()_\"` syntax denotes a raw string literal (using `_` as the delimiter), which allows us to avoid the need for escaping the `\\\\`s in the regex string.",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    bool isNumber(string s) const {\\n        static regex r(R\"_([+-]?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][+-]?\\\\d+)?)_\");\\n        return regex_match(s, r);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1209314,
                "title": "python-regex-explained-one-line",
                "content": "Assuming regex is not considered as cheating.\\n* `[+-]?`   if there is a sign component\\n* `(\\\\d+\\\\\\\\.\\\\d*)`   Decimal [at least one digit followed by a . followed by 0 or more digits]\\n* `(\\\\\\\\.\\\\d+)`  Decimal [a . must be followed by at least one digit]\\n* `|` or operator to choose between either of the two decimal groups\\n* `(\\\\d+)` Integer [must be at least one digit]\\n* `|` Or operator again to choose either an integer group or one of the decimal group\\nExponential grouping\\n* `[eE]` either character e or E\\n* `[+-]?` signed component of exponent if exists\\n* `(\\\\d+)` followed by integer\\n\\nIts important to mark this entire group inside **^** and **$** for starts with and ends with.\\n\\n```\\nimport re\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        if(re.compile(\\'^([+-]?(((\\\\d+\\\\.\\\\d*)|(\\\\.\\\\d+))|(\\\\d+))([eE][+-]?\\\\d+)?)$\\').match(s) == None):\\n            return False\\n        return True;\\n```\\n\\nI have not tested this regex properly, so if there is a better way to write it, please comment \\uD83D\\uDE0A",
                "solutionTags": [],
                "code": "```\\nimport re\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        if(re.compile(\\'^([+-]?(((\\\\d+\\\\.\\\\d*)|(\\\\.\\\\d+))|(\\\\d+))([eE][+-]?\\\\d+)?)$\\').match(s) == None):\\n            return False\\n        return True;\\n```",
                "codeTag": "Java"
            },
            {
                "id": 714425,
                "title": "c-finite-state-automata-fsa-with-diagram",
                "content": "Code just replicates the FSA drawn below. Red states are the **possible final** states. Other states are **dead** states.\\n![image](https://assets.leetcode.com/users/images/d3c2e37b-07d0-4e1b-b069-3ce6d779c542_1593602852.7452989.png)\\n\\n```\\nclass Solution {\\npublic:\\n    bool isNumber(string s){\\n        //removing leading and trailing whitespaces\\n        int i=0;\\n        while(s[i]==\\' \\') i++;\\n        if(i==s.size()) return false;\\n        s = s.substr(i);\\n        reverse(s.begin(),s.end());\\n        i=0;\\n        while(s[i]==\\' \\') i++;\\n        if(i==s.size()) return false;\\n        s = s.substr(i);\\n        reverse(s.begin(),s.end());\\n        \\n        //begin FSA with state = 0, and stops if reached dead state = -1\\n        //  0 -> +/- , 1->digit , 2-> . , 3-> e\\n        vector<vector<int>> FSA = {{2,3,1,-1},{-1,4,-1,-1},{-1,3,1,-1},{-1,3,7,5},{-1,4,-1,5},{6,8,-1,-1},{-1,8,-1,-1},{-1,4,-1,5},{-1,8,-1,-1}};\\n        int state = 0;\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]==\\'+\\' || s[i]==\\'-\\') state = FSA[state][0];\\n            else if(s[i]>=\\'0\\' && s[i]<=\\'9\\') state = FSA[state][1];\\n            else if(s[i]==\\'.\\') state = FSA[state][2];\\n            else if(s[i]==\\'e\\') state = FSA[state][3];\\n            else return false;\\n            \\n            if(state == -1) return false;\\n        }\\n        return state==3 || state==7 || state==4 || state==8;    \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isNumber(string s){\\n        //removing leading and trailing whitespaces\\n        int i=0;\\n        while(s[i]==\\' \\') i++;\\n        if(i==s.size()) return false;\\n        s = s.substr(i);\\n        reverse(s.begin(),s.end());\\n        i=0;\\n        while(s[i]==\\' \\') i++;\\n        if(i==s.size()) return false;\\n        s = s.substr(i);\\n        reverse(s.begin(),s.end());\\n        \\n        //begin FSA with state = 0, and stops if reached dead state = -1\\n        //  0 -> +/- , 1->digit , 2-> . , 3-> e\\n        vector<vector<int>> FSA = {{2,3,1,-1},{-1,4,-1,-1},{-1,3,1,-1},{-1,3,7,5},{-1,4,-1,5},{6,8,-1,-1},{-1,8,-1,-1},{-1,4,-1,5},{-1,8,-1,-1}};\\n        int state = 0;\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]==\\'+\\' || s[i]==\\'-\\') state = FSA[state][0];\\n            else if(s[i]>=\\'0\\' && s[i]<=\\'9\\') state = FSA[state][1];\\n            else if(s[i]==\\'.\\') state = FSA[state][2];\\n            else if(s[i]==\\'e\\') state = FSA[state][3];\\n            else return false;\\n            \\n            if(state == -1) return false;\\n        }\\n        return state==3 || state==7 || state==4 || state==8;    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23821,
                "title": "regex-with-detailed-explanation-how-can-we-write-the-regular-expression",
                "content": "We want to use regex to solve this problem.\\n\\nFirst, let us consider numbers without `sign` and `e`.\\nHere are four cases: `0`, `0.`, `.0`, `0.0`. And we can divide them into two cases: {`0`, `0.`, `0.0`}, {`.0`}.\\nIn the first case, we have regular expression: `\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?`, and in the second case we have `\\\\\\\\.\\\\\\\\d+`\\nSo, the numbers without `sign` and `e` can be written to `\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+`.\\n\\nSecond, let us consider `e`, and there are three cases: `e1`, `e+1`, `e-1`, which can be written to `e[+-]?\\\\\\\\d+`.\\n\\nThird, let us consider `sign`, which can be written to `[+-]?`\\n\\nIn a word, valid number can be written to `[+-]?(\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+)(e[+-]?\\\\\\\\d+)?`,\\nand the code:\\n```\\npublic boolean isNumber(String s) {\\n    return s.trim().matches(\"[+-]?(\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+)(e[+-]?\\\\\\\\d+)?\");      \\n}\\n```\\n\\nIf we don't want to use `trim()`, we can use `\\\\\\\\s*` to remove all spaces before and after the sequence.\\nAnd the code:\\n```\\npublic boolean isNumber(String s) {\\n    return s.matches(\"\\\\\\\\s*[+-]?(\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+)(e[+-]?\\\\\\\\d+)?\\\\\\\\s*\");      \\n}\\n```\\n\\n\\nIn this problem, we don't consider base 16, like `0x23ef`.\\nNumbers based on 16 can be written to `0x[\\\\\\\\da-fA-F]+`, so the answer:\\n```\\npublic boolean isNumber(String s) {\\n    return s.matches(\"\\\\\\\\s*([+-]?(\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+)(e[+-]?\\\\\\\\d+)?|0x[\\\\\\\\da-fA-F]+)\\\\\\\\s*\");\\n}\\n```\\n\\nAnd that's the final code.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic boolean isNumber(String s) {\\n    return s.trim().matches(\"[+-]?(\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+)(e[+-]?\\\\\\\\d+)?\");      \\n}\\n```\n```\\npublic boolean isNumber(String s) {\\n    return s.matches(\"\\\\\\\\s*[+-]?(\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+)(e[+-]?\\\\\\\\d+)?\\\\\\\\s*\");      \\n}\\n```\n```\\npublic boolean isNumber(String s) {\\n    return s.matches(\"\\\\\\\\s*([+-]?(\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+)(e[+-]?\\\\\\\\d+)?|0x[\\\\\\\\da-fA-F]+)\\\\\\\\s*\");\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 23941,
                "title": "java-regular-expression-hopefully-this-one-is-more-understandable",
                "content": "    public class Solution {\\n\\tpublic boolean isNumber(String s) {\\n\\t\\ts = s.trim();\\n\\t\\tif (s.length() == 0)\\n\\t\\t\\treturn false;\\n\\t\\tif (s.matches(\"[+-]?(([0-9]*\\\\\\\\.?[0-9]+)|([0-9]+\\\\\\\\.?[0-9]*))([eE][+-]?[0-9]+)?\"))\\n\\t\\t\\treturn true;\\n\\t\\telse\\n\\t\\t\\treturn false;\\n\\n\\t}\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\tpublic boolean isNumber(String s) {\\n\\t\\ts = s.trim();\\n\\t\\tif (s.length() == 0)\\n\\t\\t\\treturn false;\\n\\t\\tif (s.matches(\"[+-]?(([0-9]*\\\\\\\\.?[0-9]+)|([0-9]+\\\\\\\\.?[0-9]*))([eE][+-]?[0-9]+)?\"))\\n\\t\\t\\treturn true;\\n\\t\\telse\\n\\t\\t\\treturn false;\\n\\n\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1915679,
                "title": "100-fastest-swift-solution",
                "content": "```\\nclass Solution {\\n    func isNumber(_ s: String) -> Bool {\\n        let chs = chars(s)\\n        guard chs.count > 0 else { return false }\\n        let components = splitByE(chs)\\n        \\n        if components.count > 2 { return false }\\n        if components.count == 2 && (components[0].count == 0 || components[1].count == 0) { return false }\\n        if components.count == 2 { return isValidComponent0(components[0]) && isValidComponent1(components[1]) }\\n        if components.count == 1 { return isValidComponent0(components[0]) }\\n\\n        return true\\n    }\\n\\n    func isValidComponent0(_ chs: [Character]) -> Bool{\\n        let nums: [Character] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\\n        var dotCount = 0\\n        \\n        for (i, c) in chs.enumerated() {\\n            if c == \".\" {\\n                var hasNumberBefore = false\\n                var hasNumberAfter = false\\n                \\n                dotCount += 1\\n                if i > 0 { hasNumberBefore = nums.contains(chs[i - 1]) }\\n                if i < chs.count - 1 { hasNumberAfter = nums.contains(chs[i + 1]) }\\n                if (hasNumberBefore || hasNumberAfter) == false { return false }\\n            }\\n            \\n            if i == 0 {\\n                if c == \"+\" || c == \"-\" {\\n                    var hasNumberAfter = false\\n                    if chs.count > 1 { hasNumberAfter = nums.contains(chs[1]) || chs[1] == \".\" }\\n                    if hasNumberAfter == false { return false }\\n                }\\n            } else {\\n                if c == \"+\" || c == \"-\" { return false }\\n            }\\n        }\\n        \\n        if dotCount > 1 { return false }\\n        return true\\n    }\\n\\n    \\n    func isValidComponent1(_ chs: [Character]) -> Bool{\\n        let nums: [Character] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\\n        \\n        for (i, c) in chs.enumerated() {\\n            if i == 0 {\\n                if c == \".\" { return false }\\n                if c == \"+\" || c == \"-\" {\\n                    var hasNumberAfter = false\\n                    if chs.count > 1 { hasNumberAfter = nums.contains(chs[1]) }\\n                    if hasNumberAfter == false { return false }\\n                }\\n            } else {\\n                if c == \"+\" || c == \"-\" || c == \".\" { return false }\\n            }\\n        }\\n        \\n        return true\\n    }\\n\\n    \\n    func splitByE(_ chs: [Character]) -> [[Character]] {\\n        var res: [[Character]] = []\\n        var tmp: [Character] = []\\n        \\n        for c in chs {\\n            if c == \"e\" || c == \"E\" {\\n                res.append(tmp)\\n                tmp = []\\n            \\n            } else {\\n                tmp.append(c)\\n            }\\n        }\\n        \\n        res.append(tmp)\\n        return res\\n    }\\n\\n    \\n    func chars(_ s: String) -> [Character] {\\n        let validChars: [Character] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"e\", \"E\", \"+\", \"-\", \".\"]\\n        var chs: [Character] = []\\n        \\n        for c in s {\\n            chs.append(c)\\n            \\n            if validChars.contains(c) == false {\\n                chs = []\\n                break\\n            }\\n        }\\n        \\n        return chs\\n    }\\n    \\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func isNumber(_ s: String) -> Bool {\\n        let chs = chars(s)\\n        guard chs.count > 0 else { return false }\\n        let components = splitByE(chs)\\n        \\n        if components.count > 2 { return false }\\n        if components.count == 2 && (components[0].count == 0 || components[1].count == 0) { return false }\\n        if components.count == 2 { return isValidComponent0(components[0]) && isValidComponent1(components[1]) }\\n        if components.count == 1 { return isValidComponent0(components[0]) }\\n\\n        return true\\n    }\\n\\n    func isValidComponent0(_ chs: [Character]) -> Bool{\\n        let nums: [Character] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\\n        var dotCount = 0\\n        \\n        for (i, c) in chs.enumerated() {\\n            if c == \".\" {\\n                var hasNumberBefore = false\\n                var hasNumberAfter = false\\n                \\n                dotCount += 1\\n                if i > 0 { hasNumberBefore = nums.contains(chs[i - 1]) }\\n                if i < chs.count - 1 { hasNumberAfter = nums.contains(chs[i + 1]) }\\n                if (hasNumberBefore || hasNumberAfter) == false { return false }\\n            }\\n            \\n            if i == 0 {\\n                if c == \"+\" || c == \"-\" {\\n                    var hasNumberAfter = false\\n                    if chs.count > 1 { hasNumberAfter = nums.contains(chs[1]) || chs[1] == \".\" }\\n                    if hasNumberAfter == false { return false }\\n                }\\n            } else {\\n                if c == \"+\" || c == \"-\" { return false }\\n            }\\n        }\\n        \\n        if dotCount > 1 { return false }\\n        return true\\n    }\\n\\n    \\n    func isValidComponent1(_ chs: [Character]) -> Bool{\\n        let nums: [Character] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\\n        \\n        for (i, c) in chs.enumerated() {\\n            if i == 0 {\\n                if c == \".\" { return false }\\n                if c == \"+\" || c == \"-\" {\\n                    var hasNumberAfter = false\\n                    if chs.count > 1 { hasNumberAfter = nums.contains(chs[1]) }\\n                    if hasNumberAfter == false { return false }\\n                }\\n            } else {\\n                if c == \"+\" || c == \"-\" || c == \".\" { return false }\\n            }\\n        }\\n        \\n        return true\\n    }\\n\\n    \\n    func splitByE(_ chs: [Character]) -> [[Character]] {\\n        var res: [[Character]] = []\\n        var tmp: [Character] = []\\n        \\n        for c in chs {\\n            if c == \"e\" || c == \"E\" {\\n                res.append(tmp)\\n                tmp = []\\n            \\n            } else {\\n                tmp.append(c)\\n            }\\n        }\\n        \\n        res.append(tmp)\\n        return res\\n    }\\n\\n    \\n    func chars(_ s: String) -> [Character] {\\n        let validChars: [Character] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"e\", \"E\", \"+\", \"-\", \".\"]\\n        var chs: [Character] = []\\n        \\n        for c in s {\\n            chs.append(c)\\n            \\n            if validChars.contains(c) == false {\\n                chs = []\\n                break\\n            }\\n        }\\n        \\n        return chs\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1209280,
                "title": "python-carefully-check-cases-explained",
                "content": "Let us create functions: \\n\\n1. `is_integer(s)`, which check if number is integer: it can consist either of digits or have `+` or `-` in the beginning.\\n2. `decimal(s)`, which check if number is decimal: we split is using `.` and if we not `2` parts, we return false. Then we have three options: either first part is integer and second has only digits; or first part is empty or `+` or `-` and second part consists only digits; or first part is integer and second is empty.\\n\\nFinally, we transform string to lower case and split, using `e`. If number of parts more than `2`, return false. `parts[0]` must be integer or decimal, if it is not, return False. Finally, if we have second part, we check that it is integer.\\n\\n#### Complexity\\nTime and space complexity is `O(n)`, where `n` is length of string.\\n\\n#### Code\\n```python\\nclass Solution:\\n    def isNumber(self, s):\\n        def is_integer(s):\\n            return s.isdigit() or len(s) > 0 and s[0] in \"+-\" and s[1:].isdigit()\\n        \\n        def is_decimal(s):\\n            parts = s.split(\".\")\\n            if len(parts) != 2: return False\\n            if is_integer(parts[0]) and parts[1].isdigit(): return True\\n            if parts[0] in [\"\",\"+\",\"-\"] and parts[1].isdigit(): return True\\n            if is_integer(parts[0]) and not parts[1]: return True\\n            return False\\n        \\n        s = s.lower()\\n        parts = s.split(\"e\")\\n        if len(parts) > 2: return False\\n        if not is_integer(parts[0]) and not is_decimal(parts[0]): return False\\n        return True if len(parts) == 1 else is_integer(parts[1])\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Math"
                ],
                "code": "```python\\nclass Solution:\\n    def isNumber(self, s):\\n        def is_integer(s):\\n            return s.isdigit() or len(s) > 0 and s[0] in \"+-\" and s[1:].isdigit()\\n        \\n        def is_decimal(s):\\n            parts = s.split(\".\")\\n            if len(parts) != 2: return False\\n            if is_integer(parts[0]) and parts[1].isdigit(): return True\\n            if parts[0] in [\"\",\"+\",\"-\"] and parts[1].isdigit(): return True\\n            if is_integer(parts[0]) and not parts[1]: return True\\n            return False\\n        \\n        s = s.lower()\\n        parts = s.split(\"e\")\\n        if len(parts) > 2: return False\\n        if not is_integer(parts[0]) and not is_decimal(parts[0]): return False\\n        return True if len(parts) == 1 else is_integer(parts[1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 672070,
                "title": "python3-dfa",
                "content": "This solution is based on [this thread](https://leetcode.com/problems/valid-number/discuss/23728/A-simple-solution-in-Python-based-on-DFA) which is by far the most inspirational solution that I\\'ve found on LC. Please upvote that thread if you like this implementation. \\n\\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        dfa = [{\\'space\\': 0, \\'sign\\': 1, \\'digit\\': 2, \\'.\\': 3}, #state 0 - leading space\\n               {\\'digit\\': 2, \\'.\\': 3},                        #state 1 - sign\\n               {\\'digit\\': 2, \\'.\\': 4, \\'e\\': 5, \\'space\\': 8},    #state 2 - digit (terminal)\\n               {\\'digit\\': 4},                                #state 3 - dot\\n               {\\'digit\\': 4, \\'e\\': 5, \\'space\\': 8},            #state 4 - digit post dot (terminal)\\n               {\\'sign\\': 6, \\'digit\\': 7},                     #state 5 - exponential \\n               {\\'digit\\': 7},                                #state 6 - sign post exponential \\n               {\\'digit\\': 7, \\'space\\': 8},                    #state 7 - digit post exponential (terminal)\\n               {\\'space\\': 8}                                 #state 8 - trailing space (terminal)\\n              ]\\n        \\n        state = 0\\n        for c in s.lower(): \\n            if c in \"0123456789\": c = \"digit\"\\n            elif c == \" \":  c = \"space\"\\n            elif c in \"+-\": c = \"sign\"\\n            if c not in dfa[state]: return False \\n            state = dfa[state][c]\\n        return state in [2, 4, 7, 8]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        dfa = [{\\'space\\': 0, \\'sign\\': 1, \\'digit\\': 2, \\'.\\': 3}, #state 0 - leading space\\n               {\\'digit\\': 2, \\'.\\': 3},                        #state 1 - sign\\n               {\\'digit\\': 2, \\'.\\': 4, \\'e\\': 5, \\'space\\': 8},    #state 2 - digit (terminal)\\n               {\\'digit\\': 4},                                #state 3 - dot\\n               {\\'digit\\': 4, \\'e\\': 5, \\'space\\': 8},            #state 4 - digit post dot (terminal)\\n               {\\'sign\\': 6, \\'digit\\': 7},                     #state 5 - exponential \\n               {\\'digit\\': 7},                                #state 6 - sign post exponential \\n               {\\'digit\\': 7, \\'space\\': 8},                    #state 7 - digit post exponential (terminal)\\n               {\\'space\\': 8}                                 #state 8 - trailing space (terminal)\\n              ]\\n        \\n        state = 0\\n        for c in s.lower(): \\n            if c in \"0123456789\": c = \"digit\"\\n            elif c == \" \":  c = \"space\"\\n            elif c in \"+-\": c = \"sign\"\\n            if c not in dfa[state]: return False \\n            state = dfa[state][c]\\n        return state in [2, 4, 7, 8]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23945,
                "title": "8ms-easy-to-read-c-state-checking-solution",
                "content": "    class Solution {\\n    private:\\n        bool isSpace(char c){ return c==' ';}\\n        bool isSgn(char c){ return c=='+'||c=='-';}\\n        bool isDot(char c){ return c=='.';}\\n        bool isNum(char c){ return c<='9'&&c>='0';}\\n        bool isE(char c){ return c=='e'||c=='E';}\\n        \\n    public:\\n        bool isNumber(string s) {\\n            int pos=0;\\n            bool haveNum = false;\\n\\n            // Check all the prefix spaces\\n            while ( pos<s.size() && isSpace(s[pos]) ) pos++;\\n\\n            // Check the next char if it's a +/- signal\\n            if ( pos<s.size() && isSgn(s[pos]) ) pos++;\\n\\n            // Check the numbers before a dot '.'\\n            while ( pos<s.size() && isNum(s[pos]) ) {haveNum = true; pos++;}\\n\\n            // Check the dot '.'\\n            if ( pos<s.size() && isDot(s[pos]) ) pos++;\\n\\n            // Check the numbers after a dot '.'\\n            while ( pos<s.size() && isNum(s[pos]) ) {haveNum = true; pos++;}\\n\\n            // Check the 'e' / 'E'\\n            if ( haveNum && pos<s.size() && isE(s[pos]) ) {\\n                haveNum = false; pos++;\\n                if ( pos<s.size() && isSgn(s[pos]) ) pos++;\\n            }\\n\\n            // Check the numbers after 'e' / 'E'\\n            while ( pos<s.size() && isNum(s[pos]) ) {haveNum = true; pos++;}\\n\\n            // Check all the remaining spaces\\n            while ( pos<s.size() && isSpace(s[pos]) ) pos++;\\n\\n            // Everything is done, if the string not empty, return false.\\n            return ( pos==s.size() && haveNum );\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    private:\\n        bool isSpace(char c){ return c==' ';}",
                "codeTag": "Java"
            },
            {
                "id": 24057,
                "title": "accepted-java-solution-with-recursion",
                "content": "I know I should describe the logic but I think it's quite readable. It recursively checks parts of the input string.\\n\\nIt first checks whether it contains an 'e': if yes, then left side should be a float or an integer and right side should be an integer. If no 'e' was found then whole string should be a float or an integer. And so on...\\n\\n\\n    \\n    public boolean isNumber(String str) {\\n        if (str == null) {\\n            return false;\\n        }\\n        str = str.trim();\\n        if (str.isEmpty()) {\\n            return false;\\n        }\\n        int index;\\n        if ((index=str.indexOf('e')) != -1) {\\n            return isFloatOrInteger(str, 0, index-1) && \\n                   isInteger(str, index+1, str.length()-1);\\n        } else {\\n            return isFloatOrInteger(str, 0, str.length()-1);\\n        }\\n    }\\n    \\n    private boolean isInteger(String str, int from, int to) {\\n        if (from > to) {\\n            return false;\\n        }\\n        if (str.startsWith(\"+\", from) || str.startsWith(\"-\", from)) {\\n            return isUnsignedInteger(str, from+1, to);\\n        } else {\\n            return isUnsignedInteger(str, from, to);\\n        }\\n    }\\n    \\n    private boolean isUnsignedInteger(String str, int from, int to) {\\n        if (from > to) {\\n            return false;\\n        }\\n        for (int i=from; i<=to; i++) {\\n            if (str.charAt(i) < '0' || str.charAt(i) > '9') {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    \\n    private boolean isFloatOrInteger(String str, int from, int to) {\\n        if (from > to) {\\n            return false;\\n        }\\n        if (str.startsWith(\"+\", from) || str.startsWith(\"-\", from)) {\\n            return isUnsignedFloatOrInteger(str, from+1, to);    \\n        } else {\\n            return isUnsignedFloatOrInteger(str, from, to);    \\n        }\\n    }\\n    \\n    private boolean isUnsignedFloatOrInteger(String str, int from, int to) {\\n        if (from > to) {\\n            return false;\\n        }\\n        int index = str.indexOf('.', from);\\n        if (index > -1 && index <= to) {\\n            return (from != index || to != index) && \\n                   (isUnsignedInteger(str, from, index-1) || from == index) && \\n                   (isUnsignedInteger(str, index+1, to) || index == to);\\n        } else {\\n            return isUnsignedInteger(str, from, to);\\n        }\\n    }",
                "solutionTags": [],
                "code": "I know I should describe the logic but I think it's quite readable. It recursively checks parts of the input string.\\n\\nIt first checks whether it contains an 'e': if yes, then left side should be a float or an integer and right side should be an integer. If no 'e' was found then whole string should be a float or an integer. And so on...\\n\\n\\n    \\n    public boolean isNumber(String str) {\\n        if (str == null) {\\n            return false;\\n        }\\n        str = str.trim();\\n        if (str.isEmpty()) {\\n            return false;\\n        }\\n        int index;\\n        if ((index=str.indexOf('e')) != -1) {\\n            return isFloatOrInteger(str, 0, index-1) && \\n                   isInteger(str, index+1, str.length()-1);\\n        } else {\\n            return isFloatOrInteger(str, 0, str.length()-1);\\n        }\\n    }\\n    \\n    private boolean isInteger(String str, int from, int to) {\\n        if (from > to) {\\n            return false;\\n        }\\n        if (str.startsWith(\"+\", from) || str.startsWith(\"-\", from)) {\\n            return isUnsignedInteger(str, from+1, to);\\n        } else {\\n            return isUnsignedInteger(str, from, to);\\n        }\\n    }\\n    \\n    private boolean isUnsignedInteger(String str, int from, int to) {\\n        if (from > to) {\\n            return false;\\n        }\\n        for (int i=from; i<=to; i++) {\\n            if (str.charAt(i) < '0' || str.charAt(i) > '9') {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    \\n    private boolean isFloatOrInteger(String str, int from, int to) {\\n        if (from > to) {\\n            return false;\\n        }\\n        if (str.startsWith(\"+\", from) || str.startsWith(\"-\", from)) {\\n            return isUnsignedFloatOrInteger(str, from+1, to);    \\n        } else {\\n            return isUnsignedFloatOrInteger(str, from, to);    \\n        }\\n    }\\n    \\n    private boolean isUnsignedFloatOrInteger(String str, int from, int to) {\\n        if (from > to) {\\n            return false;\\n        }\\n        int index = str.indexOf('.', from);\\n        if (index > -1 && index <= to) {\\n            return (from != index || to != index) && \\n                   (isUnsignedInteger(str, from, index-1) || from == index) && \\n                   (isUnsignedInteger(str, index+1, to) || index == to);\\n        } else {\\n            return isUnsignedInteger(str, from, to);\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1884071,
                "title": "c-solution-with-full-explanations-in-o-n-time-complexity",
                "content": "> **If you\\u2019re interested in coding you can join my Discord Server, link in the comment section. Also if you find any mistake please let me know. Thank you!\\u2764\\uFE0F**\\n> \\n\\n---\\n\\n## Explanation:\\n\\n### Solution 01\\n\\n- Here we\\u2019ll iterate over all the elements and will check for 4 parameters:\\n    - ***Digit Check:*** if we found any digit then we\\u2019ll mark digitSeen as true.\\n    - ***Sign Check***: if we have \\u2018+\\u2019 or \\u2018-\\u2019, then if plusMinus became 2 or this is not a starting index and the previous index don\\u2019t have e/E, or if it\\u2019s the last index then return ***false***. Else increase the plusMinus count.\\n    - ***e,E Check:*** if we already have one, no digit till now or it\\u2019s the last index then return ***false***. Else make eSeen true.\\n    - ***Dot Check:*** if there is e/E in previous indexes, already had one dot or it\\u2019s the last index and there is no digit then return ***false***. Else make dotSeen true.\\n    - If any of these doesn\\u2019t satisfy return ***false***.\\n- If we are out from the loop that means every condition satisfied, return ***ture***.\\n- **Time complexity:** O(n).\\n\\n---\\n\\n## Code:\\n\\n```cpp\\n//Solution 01:\\n**class Solution {\\npublic:\\n    bool isNumber(string s)\\n    {\\n        bool digitSeen=false, dotSeen=false, eSeen=false;\\n        int plusMinus=0,n=s.length();\\n        \\n        for(int i=0; i<n; i++)\\n        {\\n            //digit check\\n            if(s[i]-\\'0\\'>=0 && s[i]-\\'0\\'<=9)\\n                digitSeen=true;\\n            \\n            //sign check\\n            else if(s[i]==\\'+\\' || s[i]==\\'-\\')\\n            {\\n                if(plusMinus==2 || (i>0 && (s[i-1]!=\\'e\\' && s[i-1]!=\\'E\\')) || i==n-1) return false;\\n                plusMinus++;\\n            }\\n            \\n            //e,E check\\n            else if(s[i]==\\'e\\' || s[i]==\\'E\\')\\n            {\\n                if(eSeen || !digitSeen || i==n-1) return false;\\n                eSeen=true;\\n            }\\n            \\n            //dot check\\n            else if(s[i]==\\'.\\')\\n            {\\n                if(eSeen || dotSeen || (i==n-1 && !digitSeen)) return false;\\n                dotSeen=true;\\n            }\\n            else\\n              return false;\\n            \\n        }\\n        return true;\\n    }\\n};**\\n```\\n\\n---\\n\\n> **Please upvote this solution**\\n>",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\n//Solution 01:\\n**class Solution {\\npublic:\\n    bool isNumber(string s)\\n    {\\n        bool digitSeen=false, dotSeen=false, eSeen=false;\\n        int plusMinus=0,n=s.length();\\n        \\n        for(int i=0; i<n; i++)\\n        {\\n            //digit check\\n            if(s[i]-\\'0\\'>=0 && s[i]-\\'0\\'<=9)\\n                digitSeen=true;\\n            \\n            //sign check\\n            else if(s[i]==\\'+\\' || s[i]==\\'-\\')\\n            {\\n                if(plusMinus==2 || (i>0 && (s[i-1]!=\\'e\\' && s[i-1]!=\\'E\\')) || i==n-1) return false;\\n                plusMinus++;\\n            }\\n            \\n            //e,E check\\n            else if(s[i]==\\'e\\' || s[i]==\\'E\\')\\n            {\\n                if(eSeen || !digitSeen || i==n-1) return false;\\n                eSeen=true;\\n            }\\n            \\n            //dot check\\n            else if(s[i]==\\'.\\')\\n            {\\n                if(eSeen || dotSeen || (i==n-1 && !digitSeen)) return false;\\n                dotSeen=true;\\n            }\\n            else\\n              return false;\\n            \\n        }\\n        return true;\\n    }\\n};**\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1219453,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    bool isNumber(string s)\\n    {\\n        bool digitSeen=false,dotSeen=false,eSeen=false;\\n        int plusMinus=0,n=s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]-\\'0\\'>=0 && s[i]-\\'0\\'<=9)\\n            {\\n                digitSeen=true;\\n            }\\n            else if(s[i]==\\'+\\' || s[i]==\\'-\\')\\n            {\\n                if(plusMinus==2 || (i>0 && (s[i-1]!=\\'e\\' && s[i-1]!=\\'E\\')) || i==n-1)\\n                {\\n                    return false;\\n                }\\n                plusMinus++;\\n            }\\n            else if(s[i]==\\'e\\' || s[i]==\\'E\\')\\n            {\\n                if(eSeen || !digitSeen || i==n-1)\\n                {\\n                    return false;\\n                }\\n                eSeen=true;\\n            }\\n            else if(s[i]==\\'.\\')\\n            {\\n                if(eSeen || dotSeen || (i==n-1 && !digitSeen))\\n                {\\n                    return false;\\n                }\\n                dotSeen=true;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```\\n**Please upvote if you\\'ve got any help from my code. Thank you.**",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    bool isNumber(string s)\\n    {\\n        bool digitSeen=false,dotSeen=false,eSeen=false;\\n        int plusMinus=0,n=s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]-\\'0\\'>=0 && s[i]-\\'0\\'<=9)\\n            {\\n                digitSeen=true;\\n            }\\n            else if(s[i]==\\'+\\' || s[i]==\\'-\\')\\n            {\\n                if(plusMinus==2 || (i>0 && (s[i-1]!=\\'e\\' && s[i-1]!=\\'E\\')) || i==n-1)\\n                {\\n                    return false;\\n                }\\n                plusMinus++;\\n            }\\n            else if(s[i]==\\'e\\' || s[i]==\\'E\\')\\n            {\\n                if(eSeen || !digitSeen || i==n-1)\\n                {\\n                    return false;\\n                }\\n                eSeen=true;\\n            }\\n            else if(s[i]==\\'.\\')\\n            {\\n                if(eSeen || dotSeen || (i==n-1 && !digitSeen))\\n                {\\n                    return false;\\n                }\\n                dotSeen=true;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24024,
                "title": "my-short-solution-without-dfa-and-re",
                "content": "    class Solution {\\n    public:\\n        // can be also solved by DFA\\n        bool isNumber(const char *s) {\\n            bool has_dot = false, has_e = false, has_num = false;\\n            \\n            while (*s == ' ') s++;                                  // filter prefix ' '\\n            if (*s == '-' || *s == '+') s++;                        // filter operator '+' or '-'\\n            \\n            while (*s && *s != ' ') {\\n                if ((*s == 'e' || *s == 'E') && !has_e) {           // filter 'e'\\n                    has_e = has_dot = true;\\n                    if (!has_num) return false;                     // there should be a number before 'e'\\n                    if (*(s + 1) == '-' || *(s + 1) == '+') s++;\\n                    if (!isdigit(*(s + 1))) return false;\\n                } else if (*s == '.' && !has_dot) has_dot = true;\\n                else if (isdigit(*s)) has_num = true;\\n                else return false;\\n                s++;\\n            }\\n            \\n            while (*s) if (*s++ != ' ') return false;               // filter suffix ' '\\n            \\n            return has_num;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        // can be also solved by DFA\\n        bool isNumber(const char *s) {\\n            bool has_dot = false, has_e = false, has_num = false;\\n            \\n            while (*s == ' ') s++;                                  // filter prefix ' '\\n            if (*s == '-' || *s == '+') s++;                        // filter operator '+' or '-'\\n            \\n            while (*s && *s != ' ') {\\n                if ((*s == 'e' || *s == 'E') && !has_e) {           // filter 'e'\\n                    has_e = has_dot = true;\\n                    if (!has_num) return false;                     // there should be a number before 'e'\\n                    if (*(s + 1) == '-' || *(s + 1) == '+') s++;\\n                    if (!isdigit(*(s + 1))) return false;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1083750,
                "title": "simple-python-solution-faster-than-95-4-lines",
                "content": "Using try and except block in the question makes it extremely simple to handle.\\nBasically, **just return True if float of the string exists, else the compiler will throw an error which will be caught by the except block, where we can return False.**\\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        try:\\n            if \\'inf\\' in s.lower() or s.isalpha():\\n                return False\\n            if float(s) or float(s) >= 0:\\n                return True\\n        except:\\n            return False\\n```\\nTime Complexity: O(n) where n -> Length of the string\\nSpace Complexity: O(1)",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        try:\\n            if \\'inf\\' in s.lower() or s.isalpha():\\n                return False\\n            if float(s) or float(s) >= 0:\\n                return True\\n        except:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 882738,
                "title": "python-one-liner-with-regex-beats-93",
                "content": "Simply use regex to check.\\n* first character is -, +, or nothing: ```^[\\\\-\\\\+]?```\\n* then: ```([0-9]+([\\\\.][0-9]*)?|[\\\\.][0-9]+)```\\n  * one or more digits, then maybe a decimal point and zero or more digits ```[0-9]+([\\\\.][0-9]*)?``` OR\\n  * no leading digit before the decimal point, but must have at least one digit after ```[\\\\.][0-9]+```\\n* lastly, we may have an exponent: ```([e][\\\\-\\\\+]?[0-9]+)?$```\\n  * starts with e: ```[e]```\\n  * then may have a sign: ```[\\\\-\\\\+]?```\\n  * then one or more digits: ```[0-9]+```\\n```\\nimport re\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        return re.match(r\\'^[\\\\-\\\\+]?([0-9]+([\\\\.][0-9]*)?|[\\\\.][0-9]+)([e][\\\\-\\\\+]?[0-9]+)?$\\', s.strip()) is not None\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```^[\\\\-\\\\+]?```\n```([0-9]+([\\\\.][0-9]*)?|[\\\\.][0-9]+)```\n```[0-9]+([\\\\.][0-9]*)?```\n```[\\\\.][0-9]+```\n```([e][\\\\-\\\\+]?[0-9]+)?$```\n```[e]```\n```[\\\\-\\\\+]?```\n```[0-9]+```\n```\\nimport re\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        return re.match(r\\'^[\\\\-\\\\+]?([0-9]+([\\\\.][0-9]*)?|[\\\\.][0-9]+)([e][\\\\-\\\\+]?[0-9]+)?$\\', s.strip()) is not None\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23850,
                "title": "simple-cpp-solution",
                "content": "![image](https://assets.leetcode.com/users/zdxiq125/image_1565787755.png)\\n```\\nclass Solution {\\n    static vector<unordered_map<char, int> > DFA;\\npublic:\\n    bool isNumber(string s) {\\n        int current_stat = 1;\\n        for(int i = 0; i < s.size(); i++) {\\n            char type;\\n            if(s[i] == \\' \\') {\\n                type = \\'b\\';\\n            } else if(s[i] >= \\'0\\' && s[i] <= \\'9\\') {\\n                type = \\'n\\';\\n            } else if(s[i] == \\'e\\') {\\n                type = \\'e\\';\\n            } else if(s[i] == \\'.\\') {\\n                type = \\'d\\';\\n            } else if(s[i] == \\'+\\' || s[i] == \\'-\\') {\\n                type = \\'s\\';\\n            } else {\\n                return false;\\n            }\\n            current_stat = DFA[current_stat][type];\\n        }\\n        if(current_stat == 3 || current_stat == 5 || current_stat == 8 || current_stat == 9) {\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n/**\\n* Init DFA,\\n* where DFA[i] represent the qi state in DFA transition\\n* and DFA[i][ch] means the state we should go to when come up with character ch\\n*/\\nvector<unordered_map<char, int> > Solution::DFA = {\\n    {{}},\\n    {{\\'b\\',1},{\\'s\\',2},{\\'n\\',3},{\\'d\\',4}},\\n    {{\\'n\\',3},{\\'d\\',4}},\\n    {{\\'n\\',3},{\\'d\\',5},{\\'e\\',6},{\\'b\\',9}},\\n    {{\\'n\\',5}},\\n    {{\\'n\\',5},{\\'e\\',6},{\\'b\\',9}},\\n    {{\\'n\\',8},{\\'s\\',7}},\\n    {{\\'n\\',8}},\\n    {{\\'n\\',8},{\\'b\\',9}},\\n    {{\\'b\\',9}}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    static vector<unordered_map<char, int> > DFA;\\npublic:\\n    bool isNumber(string s) {\\n        int current_stat = 1;\\n        for(int i = 0; i < s.size(); i++) {\\n            char type;\\n            if(s[i] == \\' \\') {\\n                type = \\'b\\';\\n            } else if(s[i] >= \\'0\\' && s[i] <= \\'9\\') {\\n                type = \\'n\\';\\n            } else if(s[i] == \\'e\\') {\\n                type = \\'e\\';\\n            } else if(s[i] == \\'.\\') {\\n                type = \\'d\\';\\n            } else if(s[i] == \\'+\\' || s[i] == \\'-\\') {\\n                type = \\'s\\';\\n            } else {\\n                return false;\\n            }\\n            current_stat = DFA[current_stat][type];\\n        }\\n        if(current_stat == 3 || current_stat == 5 || current_stat == 8 || current_stat == 9) {\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n/**\\n* Init DFA,\\n* where DFA[i] represent the qi state in DFA transition\\n* and DFA[i][ch] means the state we should go to when come up with character ch\\n*/\\nvector<unordered_map<char, int> > Solution::DFA = {\\n    {{}},\\n    {{\\'b\\',1},{\\'s\\',2},{\\'n\\',3},{\\'d\\',4}},\\n    {{\\'n\\',3},{\\'d\\',4}},\\n    {{\\'n\\',3},{\\'d\\',5},{\\'e\\',6},{\\'b\\',9}},\\n    {{\\'n\\',5}},\\n    {{\\'n\\',5},{\\'e\\',6},{\\'b\\',9}},\\n    {{\\'n\\',8},{\\'s\\',7}},\\n    {{\\'n\\',8}},\\n    {{\\'n\\',8},{\\'b\\',9}},\\n    {{\\'b\\',9}}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23906,
                "title": "sorry-i-cheated-python-solution",
                "content": "    def isNumber(s):\\n        ss = s.strip()\\n        try:\\n            float(ss)\\n        except ValueError:\\n            return False\\n        return True",
                "solutionTags": [
                    "Python"
                ],
                "code": "    def isNumber(s):\\n        ss = s.strip()\\n        try:\\n            float(ss)\\n        except ValueError:\\n            return False\\n        return True",
                "codeTag": "Python3"
            },
            {
                "id": 23757,
                "title": "one-liner-python",
                "content": "```\\nclass Solution:\\n    # @param s, a string\\n    # @return a boolean\\n    def isNumber(self, s):\\n        try: \\n            float(s) \\n            return True\\n        except: \\n            return False\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    # @param s, a string\\n    # @return a boolean\\n    def isNumber(self, s):\\n        try: \\n            float(s) \\n            return True\\n        except: \\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23899,
                "title": "8ms-c-solution-easy-to-understand",
                "content": "\\nThis solution goes through the front to the back.\\n1. Skip leading spaces.\\n\\n2. Skip sign bit.\\n\\n3. Integer, decimal point and fractional parts (make sure at least one digit exists)\\n\\n4. Exponential bit. (There may be sign bits again and make sure there is digit following)\\n\\n5. Skip following spaces.\\n\\n6. Make sure that's the end.\\n\\n\\n\\n        bool isNumber(string s)\\n        {\\n            int n = s.size();\\n            if(n == 0) return false;\\n            \\n            int i = 0;\\n            //Skip leading spaces.\\n            while(s[i] == ' ') i++;\\n            \\n            //Significand\\n            if(s[i] == '+' || s[i] == '-') i++;\\n            \\n            int cnt = 0;\\n            //Integer part\\n            while(isdigit(s[i]))\\n            {\\n                i++;\\n                cnt++;\\n            }\\n            //Decimal point\\n            if(s[i] == '.') i++;\\n            //Fractional part\\n            while(isdigit(s[i]))\\n            {\\n                i++;\\n                cnt++;\\n            }\\n            if(cnt == 0) return false;  //No number in front or behind '.'\\n            \\n            //Exponential\\n            if(s[i] == 'e')\\n            {\\n                i++;\\n                if(s[i] == '+' || s[i] == '-') i++;\\n                if(!isdigit(s[i])) return false;    //No number follows\\n                while(isdigit(s[i])) i++;\\n            }\\n            \\n            //Skip following spaces;\\n            while(s[i] == ' ') i++;\\n            \\n            return s[i] == '\\\\0';\\n        }",
                "solutionTags": [
                    "C++"
                ],
                "code": "\\nThis solution goes through the front to the back.\\n1. Skip leading spaces.\\n\\n2. Skip sign bit.\\n\\n3. Integer, decimal point and fractional parts (make sure at least one digit exists)\\n\\n4. Exponential bit. (There may be sign bits again and make sure there is digit following)\\n\\n5. Skip following spaces.\\n\\n6. Make sure that's the end.\\n\\n\\n\\n        bool isNumber(string s)\\n        {\\n            int n = s.size();\\n            if(n == 0) return false;\\n            \\n            int i = 0;\\n            //Skip leading spaces.\\n            while(s[i] == ' ') i++;\\n            \\n            //Significand\\n            if(s[i] == '+' || s[i] == '-') i++;\\n            \\n            int cnt = 0;\\n            //Integer part\\n            while(isdigit(s[i]))\\n            {\\n                i++;\\n                cnt++;\\n            }\\n            //Decimal point\\n            if(s[i] == '.') i++;\\n            //Fractional part\\n            while(isdigit(s[i]))\\n            {\\n                i++;\\n                cnt++;\\n            }\\n            if(cnt == 0) return false;  //No number in front or behind '.'\\n            \\n            //Exponential\\n            if(s[i] == 'e')\\n            {\\n                i++;\\n                if(s[i] == '+' || s[i] == '-') i++;\\n                if(!isdigit(s[i])) return false;    //No number follows\\n                while(isdigit(s[i])) i++;\\n            }\\n            \\n            //Skip following spaces;\\n            while(s[i] == ' ') i++;\\n            \\n            return s[i] == '\\\\0';\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 2743609,
                "title": "c-no-loops",
                "content": "class Solution {\\n    bool isIntDec(string s, bool integer = true) {\\n        if(s.length() && (s[0]==\\'+\\'||s[0]==\\'-\\')) s = s.substr(1); // begins with sign; skip that\\n        return s.length()>0 && // empty not OK\\n            s.find_first_not_of(integer ? \"0123456789\" : \".0123456789\") == string::npos // contains only numbers and optionally a dot\\n            && (integer || count(s.begin(), s.end(), \\'.\\')<2 && s != \".\"); // if not integer, contains at most 1 dot and is not only a dot\\n    }\\npublic:\\n    bool isNumber(string s) {\\n        size_t e = s.find_first_of(\"eE\"); // split the string at e or E\\n        string mantissa = s.substr(0, e);\\n        bool mantissa_ok = isIntDec(mantissa) || isIntDec(mantissa, false); // mantissa is either integer or decimal\\n        bool exponent_ok = e == string::npos || isIntDec(s.substr(e+1)); // either no exponent or it has to be an integer\\n        return mantissa_ok && exponent_ok;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\n    bool isIntDec(string s, bool integer = true) {\\n        if(s.length() && (s[0]==\\'+\\'||s[0]==\\'-\\')) s = s.substr(1); // begins with sign; skip that\\n        return s.length()>0 && // empty not OK\\n            s.find_first_not_of(integer ? \"0123456789\" : \".0123456789\") == string::npos // contains only numbers and optionally a dot\\n            && (integer || count(s.begin(), s.end(), \\'.\\')<2 && s != \".\"); // if not integer, contains at most 1 dot and is not only a dot\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2449171,
                "title": "c-simple-solution",
                "content": "```\\nclass Solution {\\nprivate:\\n    string makeSchema(string s) {\\n        string schemaS;\\n        for (int i = 0 ; i < s.size() ; i ++ ) {\\n            if( s[i] >= \\'0\\' && s[i] <= \\'9\\' ) {\\n                if (schemaS == \"\" || schemaS.at(schemaS.size() - 1) != \\'5\\') {\\n                    schemaS += \\'5\\';                \\n                }\\n            }\\n            else if( s[i] == \\'+\\' || s[i] == \\'-\\' ) {\\n                schemaS += \\'+\\';                \\n            }\\n            else if( s[i] == \\'e\\' || s[i] == \\'E\\' ) {\\n                schemaS += \\'e\\';                \\n            }\\n            else if( s[i] == \\'.\\' ) {\\n                schemaS += \\'.\\';                \\n            } else {\\n                return \"X\";\\n            }\\n        }\\n        return schemaS;\\n    }\\n\\npublic:\\n    bool isNumber(string s) {\\n        string schemaS = makeSchema(s);\\n        if (schemaS == \"X\") {\\n            return false;\\n        }\\n        if (schemaS[0] == \\'+\\') {\\n            schemaS = schemaS.substr(1, schemaS.size() - 1);\\n        }\\n        if (schemaS == \"5\" || schemaS == \"5.\" || schemaS == \".5\" || schemaS == \"5.5\" || \\n            schemaS == \"5e5\" || schemaS == \"5.e5\" || schemaS == \".5e5\" || schemaS == \"5.5e5\" ||\\n            schemaS == \"5e+5\" || schemaS == \"5.e+5\" || schemaS == \".5e+5\" || schemaS == \"5.5e+5\" ) {\\n                return true;\\n            }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\nprivate:\\n    string makeSchema(string s) {\\n        string schemaS;\\n        for (int i = 0 ; i < s.size() ; i ++ ) {\\n            if( s[i] >= \\'0\\' && s[i] <= \\'9\\' ) {\\n                if (schemaS == \"\" || schemaS.at(schemaS.size() - 1) != \\'5\\') {\\n                    schemaS += \\'5\\';                \\n                }\\n            }\\n            else if( s[i] == \\'+\\' || s[i] == \\'-\\' ) {\\n                schemaS += \\'+\\';                \\n            }\\n            else if( s[i] == \\'e\\' || s[i] == \\'E\\' ) {\\n                schemaS += \\'e\\';                \\n            }\\n            else if( s[i] == \\'.\\' ) {\\n                schemaS += \\'.\\';                \\n            } else {\\n                return \"X\";\\n            }\\n        }\\n        return schemaS;\\n    }\\n\\npublic:\\n    bool isNumber(string s) {\\n        string schemaS = makeSchema(s);\\n        if (schemaS == \"X\") {\\n            return false;\\n        }\\n        if (schemaS[0] == \\'+\\') {\\n            schemaS = schemaS.substr(1, schemaS.size() - 1);\\n        }\\n        if (schemaS == \"5\" || schemaS == \"5.\" || schemaS == \".5\" || schemaS == \"5.5\" || \\n            schemaS == \"5e5\" || schemaS == \"5.e5\" || schemaS == \".5e5\" || schemaS == \"5.5e5\" ||\\n            schemaS == \"5e+5\" || schemaS == \"5.e+5\" || schemaS == \".5e+5\" || schemaS == \"5.5e+5\" ) {\\n                return true;\\n            }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2406796,
                "title": "c-dfa-simple-to-understand",
                "content": "**Consider following DFA:**\\nIf you don\\'t know what is DFA then please read it about [here](https://en.wikipedia.org/wiki/Deterministic_finite_automaton). \\n![image](https://assets.leetcode.com/users/images/2e1ace2a-dc32-4d20-bb67-61ac186993c5_1660216401.2587547.png)\\nNow I simply used following numbers for state and actions\\n```\\nA-> 0\\nB-> 1\\nC-> 2\\nD-> 3\\nE-> 4\\nF-> 5\\nG-> 6\\nH-> 7\\nX-> 8\\n```\\nand for actions\\n```\\n0-9 -> 0\\n+,- -> 1\\n. -> 2\\ne,E -> 3\\n<end> -> 4\\n<any> -> 5\\n```\\n```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        vector<vector<int>> F = vector<vector<int>>(8,vector<int>(6,-1));\\n        F[0][1] = 1;\\n        F[0][2] = 4;\\n        F[0][0] = 2;\\n        \\n        F[1][2] = 4;\\n        F[1][0] = 2;\\n        \\n        F[2][0] = 2;\\n        F[2][3] = 5;\\n        F[2][2] = 3;\\n        F[2][4] = 8;\\n        \\n        F[3][0] = 3;\\n        F[3][3] = 5;\\n        F[3][4] = 8;\\n        \\n        F[4][0] = 3;\\n        \\n        F[5][1] = 6;\\n        F[5][0] = 7;\\n        \\n        F[6][0] = 7;\\n        \\n        F[7][0] = 7;\\n        F[7][4] = 8;\\n        \\n        unordered_map<char,int> act;\\n        \\n        int i = (int) \\'0\\';\\n        for(int j = i; j < i+10; j++){\\n            act[(char) j] = 0;\\n        }\\n        act[\\'+\\'] = 1;\\n        act[\\'-\\'] = 1;\\n        act[\\'.\\'] = 2;\\n        act[\\'E\\'] = 3;\\n        act[\\'e\\'] = 3;\\n        \\n        int cur = 0;\\n        for(int i = 0; i < s.length(); i++){\\n            auto it = act.find(s[i]);\\n            if(it == act.end()){\\n                return false;\\n            }\\n            cur = F[cur][it->second];\\n            if(cur == -1){\\n                return false;\\n            }\\n        }\\n        \\n        return (F[cur][4] == 8);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nA-> 0\\nB-> 1\\nC-> 2\\nD-> 3\\nE-> 4\\nF-> 5\\nG-> 6\\nH-> 7\\nX-> 8\\n```\n```\\n0-9 -> 0\\n+,- -> 1\\n. -> 2\\ne,E -> 3\\n<end> -> 4\\n<any> -> 5\\n```\n```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        vector<vector<int>> F = vector<vector<int>>(8,vector<int>(6,-1));\\n        F[0][1] = 1;\\n        F[0][2] = 4;\\n        F[0][0] = 2;\\n        \\n        F[1][2] = 4;\\n        F[1][0] = 2;\\n        \\n        F[2][0] = 2;\\n        F[2][3] = 5;\\n        F[2][2] = 3;\\n        F[2][4] = 8;\\n        \\n        F[3][0] = 3;\\n        F[3][3] = 5;\\n        F[3][4] = 8;\\n        \\n        F[4][0] = 3;\\n        \\n        F[5][1] = 6;\\n        F[5][0] = 7;\\n        \\n        F[6][0] = 7;\\n        \\n        F[7][0] = 7;\\n        F[7][4] = 8;\\n        \\n        unordered_map<char,int> act;\\n        \\n        int i = (int) \\'0\\';\\n        for(int j = i; j < i+10; j++){\\n            act[(char) j] = 0;\\n        }\\n        act[\\'+\\'] = 1;\\n        act[\\'-\\'] = 1;\\n        act[\\'.\\'] = 2;\\n        act[\\'E\\'] = 3;\\n        act[\\'e\\'] = 3;\\n        \\n        int cur = 0;\\n        for(int i = 0; i < s.length(); i++){\\n            auto it = act.find(s[i]);\\n            if(it == act.end()){\\n                return false;\\n            }\\n            cur = F[cur][it->second];\\n            if(cur == -1){\\n                return false;\\n            }\\n        }\\n        \\n        return (F[cur][4] == 8);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1217844,
                "title": "c-state-machine-solution-explained-100-time-98-space",
                "content": "Nice problem, sweet to be solved with a state machine that takes into account what \"happened\" before and adapts to each new character we feed it with.\\n\\nIn order to proceed, we will use 4 flags to keep track of our state, all boolean initialised to `false`:\\n* `signSeen`, to keep track of the `\\'-\\'` and `\\'+\\'` characters;\\n* `eSeen`, to keep track of the `\\'e\\'` or `\\'E\\'` characters;\\n* `dotSeen`, to keep track of the `\\'.\\'` character;\\n* `digitSeen`, to keep track of the digit characters.\\n\\nWe will then proceed to parse each character `c` and, with a switch statement:\\n* if `c` is a sign:\\n\\t* if it it not the first time we encountered (including a possible reset after exponentiation) or if it comes after another digit or dot, we will `return` `false`;\\n\\t* otherwise, we will flag `signSeen` as `true` and `break`;\\n* if `c` is a dot:\\n\\t* if it it not the first time we encountered or if it comes after exponentiation, we will `return` `false`;\\n\\t* otherwise, we will flag `dotSeen` as `true` and `break`;\\n* if `c` is an exponentiation:\\n\\t* if it it not the first time we encountered (including a possible reset after exponentiation) or if it comes without been preceded by a digit first, we will `return` `false`;\\n\\t* otherwise, we will flag `eSeen` as `true`, reset `digitSeen` and `signSeen` to `false` and `break`;\\n* if `c` is any other case:\\n\\t* if it it not a digit, we will know it is an invalid character, so we would `return` `false`;\\n\\t* otherwise, we will flag `digitSeen` as `true`.\\n\\nIf we reach the end of the loop, we will return the `value` of `digitSeen`: the stringified number is now sure to be valid as long as we encountered at least a digit :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        bool signSeen = false, eSeen = false, dotSeen = false, digitSeen = false;\\n        for (char c: s) {\\n            switch (c) {\\n                // signs\\n                case \\'-\\':\\n                case \\'+\\':\\n                    if (signSeen || digitSeen || dotSeen) return false;\\n                    signSeen = true;\\n                    break;\\n                // dots\\n                case \\'.\\':\\n                    if (dotSeen || eSeen) return false;\\n                    dotSeen = true;\\n                    break;\\n                // exponentiation\\n                case \\'e\\':\\n                case \\'E\\':\\n                    if (!digitSeen || eSeen) return false;\\n                    digitSeen = false;\\n                    signSeen = false;\\n                    eSeen = true;\\n                    break;\\n                // all the rest\\n                default:\\n                    if (c < \\'0\\' || c > \\'9\\') return false;\\n                    digitSeen = true;\\n            }\\n        }\\n        return digitSeen;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        bool signSeen = false, eSeen = false, dotSeen = false, digitSeen = false;\\n        for (char c: s) {\\n            switch (c) {\\n                // signs\\n                case \\'-\\':\\n                case \\'+\\':\\n                    if (signSeen || digitSeen || dotSeen) return false;\\n                    signSeen = true;\\n                    break;\\n                // dots\\n                case \\'.\\':\\n                    if (dotSeen || eSeen) return false;\\n                    dotSeen = true;\\n                    break;\\n                // exponentiation\\n                case \\'e\\':\\n                case \\'E\\':\\n                    if (!digitSeen || eSeen) return false;\\n                    digitSeen = false;\\n                    signSeen = false;\\n                    eSeen = true;\\n                    break;\\n                // all the rest\\n                default:\\n                    if (c < \\'0\\' || c > \\'9\\') return false;\\n                    digitSeen = true;\\n            }\\n        }\\n        return digitSeen;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 796343,
                "title": "python-super-cool-cheeky-solution-100-faster",
                "content": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n\\t\\n        # try to do a simple operation that works only on numbers\\n        #if exception is raised it\\'s not a valid number...\\n\\t\\t\\n        try:\\n            float(s) + 2\\n            \\n        except ValueError:\\n            return False\\n        \\n        return True\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n\\t\\n        # try to do a simple operation that works only on numbers\\n        #if exception is raised it\\'s not a valid number...\\n\\t\\t\\n        try:\\n            float(s) + 2\\n            \\n        except ValueError:\\n            return False\\n        \\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 736477,
                "title": "simple-python-state-machine-diagram",
                "content": "I first sketched out this state machine on paper. This makes it easy to hand-test on the given examples. Some states I added later when I realized certain cases weren\\'t covered by my initial attempt, hence why the state numbering may seem a little out of order.\\n\\n![image](https://assets.leetcode.com/users/images/c4006fdc-1227-4d58-9988-4861c5d47f0a_1594764382.9926436.png)\\n\\n```\\nclass Solution(object):\\n    def isNumber(self, s):\\n        digits = \"0123456789\"\\n        s = strip(s)\\n        state = 0\\n        for c in s:\\n            if state == 0:\\n                if c in digits: state = 1\\n                elif c in \"-+\": state = 7\\n                elif c == \".\": state = 6\\n                else: return False\\n            elif state == 1:\\n                if c in digits: state = 1\\n                elif c == \".\": state = 2\\n                elif c == \"e\": state = 4\\n                else: return False\\n            elif state == 2:\\n                if c in digits: state = 3\\n                elif c == \"e\": state = 4\\n                else: return False\\n            elif state == 3:\\n                if c in digits: state = 3\\n                elif c == \"e\": state = 4\\n                else: return False\\n            elif state == 4:\\n                if c in digits: state = 5\\n                elif c in \"+-\": state = 8\\n                else: return False\\n            elif state == 5:\\n                if c in digits: state = 5\\n                else: return False\\n            elif state == 6:\\n                if c in digits: state = 2\\n                else: return False\\n            elif state == 7:\\n                if c in digits: state = 1\\n                elif c == \".\": state = 6\\n                else: return False\\n            elif state == 8:\\n                if c in digits: state = 5\\n                else: return False\\n        return state in [1,2,3,5]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def isNumber(self, s):\\n        digits = \"0123456789\"\\n        s = strip(s)\\n        state = 0\\n        for c in s:\\n            if state == 0:\\n                if c in digits: state = 1\\n                elif c in \"-+\": state = 7\\n                elif c == \".\": state = 6\\n                else: return False\\n            elif state == 1:\\n                if c in digits: state = 1\\n                elif c == \".\": state = 2\\n                elif c == \"e\": state = 4\\n                else: return False\\n            elif state == 2:\\n                if c in digits: state = 3\\n                elif c == \"e\": state = 4\\n                else: return False\\n            elif state == 3:\\n                if c in digits: state = 3\\n                elif c == \"e\": state = 4\\n                else: return False\\n            elif state == 4:\\n                if c in digits: state = 5\\n                elif c in \"+-\": state = 8\\n                else: return False\\n            elif state == 5:\\n                if c in digits: state = 5\\n                else: return False\\n            elif state == 6:\\n                if c in digits: state = 2\\n                else: return False\\n            elif state == 7:\\n                if c in digits: state = 1\\n                elif c == \".\": state = 6\\n                else: return False\\n            elif state == 8:\\n                if c in digits: state = 5\\n                else: return False\\n        return state in [1,2,3,5]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 547952,
                "title": "javascript-state-machine",
                "content": "```\\n// If you insist on using built-in functions, use this:\\n// One line in Javascript:\\nvar isNumberOneLine = function(s) {\\n    return !isNaN(s) && s.trim() !== \\'\\';\\n}\\n\\n// Otherwise, this question is about using state machine. \\n// I don\\'t take credit for this solution.\\n// I just convert it into Javascript and add the time and space complexity analysis.\\n/**\\n * Solution from: https://leetcode.com/problems/valid-number/discuss/360781/Python-with-state-machine-36ms\\n * Function checks if a string is a number string.\\n * Time = O(n) because we iterate through the whole string and each time\\n * we do O(1) operations.\\n * Space = O(n) because at most we store the whole inputString of length n.\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    const SM = new StateMachine();\\n    // Trim trailing spaces \\n    // because including spaces makes the states become too complicated.\\n    const inputString = s.trim();\\n    let state = \\'start\\';\\n\\n    for (const char of inputString) {\\n        try {\\n            state = SM.states[state][SM.classify(char)];\\n        }\\n        catch(error) {\\n            return false;\\n        }\\n    }\\n    return state === \\'integer\\' || state === \\'frac\\' || state === \\'exp_int\\';\\n};\\n\\nclass StateMachine {\\n    constructor() {\\n        // States store all transitions:\\n        this.states = {\\n            \\'start\\': {\\'sign\\':\\'int_sign\\', \\'digit\\':\\'integer\\', \\'dot\\':\\'point\\'},\\n            \\'int_sign\\': {\\'digit\\':\\'integer\\', \\'dot\\':\\'point\\'},\\n            \\'integer\\': {\\'digit\\':\\'integer\\', \\'dot\\':\\'frac\\', \\'e\\':\\'exp\\'},\\n            \\'point\\': {\\'digit\\':\\'frac\\'},\\n            \\'frac\\': {\\'digit\\':\\'frac\\', \\'e\\':\\'exp\\'},\\n            \\'exp\\': {\\'digit\\':\\'exp_int\\', \\'sign\\':\\'exp_sign\\'},\\n            \\'exp_sign\\': {\\'digit\\':\\'exp_int\\'},\\n            \\'exp_int\\': {\\'digit\\':\\'exp_int\\'}\\n        }\\n    }\\n\\n    /**\\n     * Helper method returns the class of a char.\\n     * @param {string} char \\n     * @returns {string}\\n     */\\n    classify(char) {\\n        if (!isNaN(parseInt(char))) return \\'digit\\';\\n        if (char === \\'.\\') return \\'dot\\';\\n        if (char === \\'+\\' || char === \\'-\\') return \\'sign\\';\\n        if (char === \\'e\\') return \\'e\\';\\n        // If doesn\\'t hit any of the cases above:\\n        throw new Error();\\n    }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// If you insist on using built-in functions, use this:\\n// One line in Javascript:\\nvar isNumberOneLine = function(s) {\\n    return !isNaN(s) && s.trim() !== \\'\\';\\n}\\n\\n// Otherwise, this question is about using state machine. \\n// I don\\'t take credit for this solution.\\n// I just convert it into Javascript and add the time and space complexity analysis.\\n/**\\n * Solution from: https://leetcode.com/problems/valid-number/discuss/360781/Python-with-state-machine-36ms\\n * Function checks if a string is a number string.\\n * Time = O(n) because we iterate through the whole string and each time\\n * we do O(1) operations.\\n * Space = O(n) because at most we store the whole inputString of length n.\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    const SM = new StateMachine();\\n    // Trim trailing spaces \\n    // because including spaces makes the states become too complicated.\\n    const inputString = s.trim();\\n    let state = \\'start\\';\\n\\n    for (const char of inputString) {\\n        try {\\n            state = SM.states[state][SM.classify(char)];\\n        }\\n        catch(error) {\\n            return false;\\n        }\\n    }\\n    return state === \\'integer\\' || state === \\'frac\\' || state === \\'exp_int\\';\\n};\\n\\nclass StateMachine {\\n    constructor() {\\n        // States store all transitions:\\n        this.states = {\\n            \\'start\\': {\\'sign\\':\\'int_sign\\', \\'digit\\':\\'integer\\', \\'dot\\':\\'point\\'},\\n            \\'int_sign\\': {\\'digit\\':\\'integer\\', \\'dot\\':\\'point\\'},\\n            \\'integer\\': {\\'digit\\':\\'integer\\', \\'dot\\':\\'frac\\', \\'e\\':\\'exp\\'},\\n            \\'point\\': {\\'digit\\':\\'frac\\'},\\n            \\'frac\\': {\\'digit\\':\\'frac\\', \\'e\\':\\'exp\\'},\\n            \\'exp\\': {\\'digit\\':\\'exp_int\\', \\'sign\\':\\'exp_sign\\'},\\n            \\'exp_sign\\': {\\'digit\\':\\'exp_int\\'},\\n            \\'exp_int\\': {\\'digit\\':\\'exp_int\\'}\\n        }\\n    }\\n\\n    /**\\n     * Helper method returns the class of a char.\\n     * @param {string} char \\n     * @returns {string}\\n     */\\n    classify(char) {\\n        if (!isNaN(parseInt(char))) return \\'digit\\';\\n        if (char === \\'.\\') return \\'dot\\';\\n        if (char === \\'+\\' || char === \\'-\\') return \\'sign\\';\\n        if (char === \\'e\\') return \\'e\\';\\n        // If doesn\\'t hit any of the cases above:\\n        throw new Error();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 346042,
                "title": "c-state-machine-solution-28-lines",
                "content": "All input types\\n1. Illegal Chracter\\n2. e\\n3. dot\\n4. sign(`+/-`)\\n5. numbers\\n6. white space  \\n\\n\\nSo we can construct a table, each line indicates one state, each column indicates one kind of Input\\n\\n#### State change table\\n|        States        \\t| Illegal Char \\t| White Space \\t|        Numbers       \\t|         Dot        \\t|   E   \\t|    Sign    \\t| Final \\t|\\n|:--------------------:\\t|:------------:\\t|:-----------:\\t|:--------------------:\\t|:------------------:\\t|:-----:\\t|:----------:\\t|-------\\t|\\n|         Start        \\t|      -1      \\t|     Self    \\t|          Num         \\t|         Dot        \\t|   -1  \\t|    Sign    \\t|       \\t|\\n|          Num         \\t|      -1      \\t|   Trailing  \\t|         Self         \\t| Num+Dot or Dot+Num \\t| Num+E \\t|     -1     \\t| Legal \\t|\\n|          Dot         \\t|      -1      \\t|      -1     \\t| Num+Dot or Dot + Num \\t|         -1         \\t| Num+E \\t|     -1     \\t|       \\t|\\n| Num+Dot or Dot + Num \\t|      -1      \\t|   Trailing  \\t|         Self         \\t|         -1         \\t|   -1  \\t|     -1     \\t| Legal \\t|\\n|         Sign         \\t|      -1      \\t|      -1     \\t|          Num         \\t|         Dot        \\t|   -1  \\t|     -1     \\t|       \\t|\\n|         Num+E        \\t|      -1      \\t|      -1     \\t|       Num+E+Num      \\t|         -1         \\t|   -1  \\t| Num+E+Sign \\t|       \\t|\\n|      Num+E+Sign      \\t|      -1      \\t|      -1     \\t|       Num+E+Num      \\t|         -1         \\t|   -1  \\t|     -1     \\t|       \\t|\\n|       Num+E+Num      \\t|      -1      \\t|   Trailing  \\t|         Self         \\t|         -1         \\t|   -1  \\t|     -1     \\t| Legal \\t|\\n| Trailing             \\t| -1           \\t| Self        \\t| -1                   \\t| -1                 \\t| -1    \\t| -1         \\t| Legal \\t|\\n\\n#### Automaton Solution\\n\\n```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        vector<vector<int>> stateMachine={\\n            {-1,0,1,2,-1,4},\\n            {-1,8,1,3,5,-1},\\n            {-1,-1,3,-1,-1,-1},\\n            {-1,8,3,-1,5,-1},\\n            {-1,-1,1,2,-1,-1},\\n            {-1,-1,7,-1,-1,6},\\n            {-1,-1,7,-1,-1,-1},\\n            {-1,8,7,-1,-1,-1},\\n            {-1,8,-1,-1,-1,-1}\\n        };\\n        int state = 0;\\n        for(int i=0;i<s.size();i++){\\n            int input = 0;\\n            if(s[i] == \\' \\') input = 1;\\n            else if(s[i] >= \\'0\\' and s[i] <=\\'9\\') input =2;\\n            else if (s[i] == \\'.\\') input = 3;\\n            else if (s[i] == \\'e\\') input = 4;\\n            else if (s[i] == \\'+\\' or s[i] == \\'-\\') input = 5;\\n            state = stateMachine[state][input];\\n            if(state == -1) return false;\\n        }\\n        return state == 1 or state == 3 or state == 7 or state == 8;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        vector<vector<int>> stateMachine={\\n            {-1,0,1,2,-1,4},\\n            {-1,8,1,3,5,-1},\\n            {-1,-1,3,-1,-1,-1},\\n            {-1,8,3,-1,5,-1},\\n            {-1,-1,1,2,-1,-1},\\n            {-1,-1,7,-1,-1,6},\\n            {-1,-1,7,-1,-1,-1},\\n            {-1,8,7,-1,-1,-1},\\n            {-1,8,-1,-1,-1,-1}\\n        };\\n        int state = 0;\\n        for(int i=0;i<s.size();i++){\\n            int input = 0;\\n            if(s[i] == \\' \\') input = 1;\\n            else if(s[i] >= \\'0\\' and s[i] <=\\'9\\') input =2;\\n            else if (s[i] == \\'.\\') input = 3;\\n            else if (s[i] == \\'e\\') input = 4;\\n            else if (s[i] == \\'+\\' or s[i] == \\'-\\') input = 5;\\n            state = stateMachine[state][input];\\n            if(state == -1) return false;\\n        }\\n        return state == 1 or state == 3 or state == 7 or state == 8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23888,
                "title": "my-simple-4ms-java-solution-with-a-very-detailed-explanation",
                "content": "It\\u2019s not really difficult as a problem. Using the ascii code, we can check if a character is numerical or not in just one line. The difficult part here to deal with the different \\u201cspecial characters\\u201d which can be in the string like \\u2018+\\u2019, \\u2018-\\u2018, \\u2018.\\u2019 and \\u2018e\\u2019. **My solution is to know EXACTLY in which place a special character can be**.\\n\\n1) First, the obvious special character is the *white spaces*. We will iterate in the string with two indexes (start and end) to ignore the white spaces at the beginning and at the end of the string. Use methods like trim or substring is LIKE cheating. In pure algorithm, we had to use indexes (and it's not difficult).\\n\\n2) Then, come our first special characters: **+** and **-**. The idea is to see they can be present *only* in *two* scenarios : at the beginning of the string (ex : \\u201c+2\\u201d or \\u201c-2\\u201d) or at the middle if they are preceded by \\u2018e\\u2019, when we want to express the power of 10 in a number. (ex : \\u201c2e3\\u201d or \\u201c2e-4). So, the easier case is to check first if they are present at the beginning. For the other case, we will check for it later.\\n\\n3) Now, we will iterate at the string. We will use two counters for the position of **\\u2018.'** and  **e** in the string (it\\u2019s of course the hardest part) : \\n\\n* We can eliminate some obvious cases : ALL these special characters can only be present one time in a string. In particular, if we met **\\u2018.'** and  **e** more than once, we return false.\\n\\n* We will consider the possible position of **e** in a string. In opposite of **\\u2018.\\u2019**, **e** CAN'T be at the beginning or at the end of the string, it can be only at the middle. So, we will return false if we met **e** at these bounds including the cases like \\u201c+e2\\u201d or \\u201c-e3\\u201d (we had used the flag for \\u201c+\\u201d or \\u201c-\\u201c to know the real start of the number). \\n\\n* Now, we had to get benefit from the \\u201cmeaning\\u201d of **e**, it express the power of 10 in a number. Consequently, the number after **e** has to be integer (don\\u2019t contain any \\u2018.\\u2019) AND the part before \\u2018e\\u2019 has to be a **valid** number. It means that we can\\u2019t have just point before \\u2018e\\u2019. For example : \\u2018.e3 \\u2018 is not valid. It means that \\u2018e\\u2019 and \\u2018.\\u2019 can\\u2019t be successive. \\n\\n* Finally, we will check for a non numerical character. If we met a non numerical character we will return false except if we met \\u2018+\\u2019 or \\u2018-\\u2018 (which can ALSO be at the middle). In that case, we will verify if they are preceded by e and followed by at least one digit. \\n\\nThat's it for the theoretical part. In programming, some optimisations can be done (you can always improve my code), the code below contains comments to explain in details all the steps : \\n\\n\\tpublic static boolean isNumber(String str){\\n\\t\\tif ( str == null || str.isEmpty() ) return false;\\n\\t\\t\\n\\t\\tint start = 0;\\n\\t\\tint end  = str.length() - 1;\\n\\t\\t\\n\\t\\t//1st step : remove spaces\\n\\t\\twhile (start < str.length()-1 &&  str.charAt(start) == ' ')\\n\\t\\t\\tstart ++;\\n\\t\\t\\t\\t\\n\\t\\twhile (end >= start +1 &&  str.charAt(end) == ' ')\\n\\t\\t\\tend --;\\n\\t\\t\\n\\t\\t//2nd step : check when the string has only one char\\n\\t\\tif( (start - end ==0) &&  (str.charAt(start) < '0' || str.charAt(start) > '9') )\\n\\t\\t\\treturn false;   //string of only one non numerical char\\n\\t\\t\\n\\t\\t//3rd step : check for '+' and '-' when they are at the beginning of the string\\n\\t\\tif (str.charAt(start)== '+' || str.charAt(start)== '-') {\\n\\t\\t\\tif (str.charAt(start+1) == '.' && (end - start == 1))\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\tstart++;\\n\\t\\t}\\n\\t\\t\\n\\t\\tint point = -1;   //position of '.' in the string\\n\\t\\tint e = -1;       //position of 'e' in the string\\n\\t\\t\\n                //4th step : check for all the remaining cases\\n\\t\\tfor (int i = start; i <=end; i++){\\n\\t\\t\\t\\n\\t\\t\\tif (str.charAt(i) == '.') {\\n\\t\\t\\t\\tif (point == -1)  //if we met the point for the FIRST time, we store its position\\n\\t\\t\\t\\t\\tpoint = i;   //a string that has TWO point can't be a valid number\\n\\t\\t\\t\\telse return false;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif (str.charAt(i) == 'e')  {\\n\\t\\t\\t\\tif (e==-1)     //same raisoning for e\\n\\t\\t\\t\\t\\te= i;\\n\\t\\t\\t\\telse return false;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif (e == start || e==end) return false; //e has to be at the middle\\n\\t\\t\\tif (point > e && e!= -1 ) return false; //the part AFTER e must be only integer\\n\\t\\t\\tif (point == start && e== start +1) return false; //the part BEFORE e must be a valid number\\n\\t\\t\\t\\n\\t\\t\\t//if we met a non numerical digit\\n\\t\\t\\tif ( (str.charAt(i) < '0' || str.charAt(i) > '9')  && str.charAt(i) !='.' && str.charAt(i) != 'e' ) {\\n\\n\\t\\t\\t        //we met + or - at the middle but in a correct configuration. So, we continue\\n\\t\\t\\t\\tif (  (str.charAt(i) == '+' || str.charAt(i) == '-')  && e== i-1 && i!=end ) {  }\\n\\t\\t\\n\\t\\t\\t\\telse \\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "It\\u2019s not really difficult as a problem. Using the ascii code, we can check if a character is numerical or not in just one line. The difficult part here to deal with the different \\u201cspecial characters\\u201d which can be in the string like \\u2018+\\u2019, \\u2018-\\u2018, \\u2018.\\u2019 and \\u2018e\\u2019. **My solution is to know EXACTLY in which place a special character can be**.\\n\\n1) First, the obvious special character is the *white spaces*. We will iterate in the string with two indexes (start and end) to ignore the white spaces at the beginning and at the end of the string. Use methods like trim or substring is LIKE cheating. In pure algorithm, we had to use indexes (and it's not difficult).\\n\\n2) Then, come our first special characters: **+** and **-**. The idea is to see they can be present *only* in *two* scenarios : at the beginning of the string (ex : \\u201c+2\\u201d or \\u201c-2\\u201d) or at the middle if they are preceded by \\u2018e\\u2019, when we want to express the power of 10 in a number. (ex : \\u201c2e3\\u201d or \\u201c2e-4). So, the easier case is to check first if they are present at the beginning. For the other case, we will check for it later.\\n\\n3) Now, we will iterate at the string. We will use two counters for the position of **\\u2018.'** and  **e** in the string (it\\u2019s of course the hardest part) : \\n\\n* We can eliminate some obvious cases : ALL these special characters can only be present one time in a string. In particular, if we met **\\u2018.'** and  **e** more than once, we return false.\\n\\n* We will consider the possible position of **e** in a string. In opposite of **\\u2018.\\u2019**, **e** CAN'T be at the beginning or at the end of the string, it can be only at the middle. So, we will return false if we met **e** at these bounds including the cases like \\u201c+e2\\u201d or \\u201c-e3\\u201d (we had used the flag for \\u201c+\\u201d or \\u201c-\\u201c to know the real start of the number). \\n\\n* Now, we had to get benefit from the \\u201cmeaning\\u201d of **e**, it express the power of 10 in a number. Consequently, the number after **e** has to be integer (don\\u2019t contain any \\u2018.\\u2019) AND the part before \\u2018e\\u2019 has to be a **valid** number. It means that we can\\u2019t have just point before \\u2018e\\u2019. For example : \\u2018.e3 \\u2018 is not valid. It means that \\u2018e\\u2019 and \\u2018.\\u2019 can\\u2019t be successive. \\n\\n* Finally, we will check for a non numerical character. If we met a non numerical character we will return false except if we met \\u2018+\\u2019 or \\u2018-\\u2018 (which can ALSO be at the middle). In that case, we will verify if they are preceded by e and followed by at least one digit. \\n\\nThat's it for the theoretical part. In programming, some optimisations can be done (you can always improve my code), the code below contains comments to explain in details all the steps : \\n\\n\\tpublic static boolean isNumber(String str){\\n\\t\\tif ( str == null || str.isEmpty() ) return false;\\n\\t\\t\\n\\t\\tint start = 0;\\n\\t\\tint end  = str.length() - 1;\\n\\t\\t\\n\\t\\t//1st step : remove spaces\\n\\t\\twhile (start < str.length()-1 &&  str.charAt(start) == ' ')\\n\\t\\t\\tstart ++;\\n\\t\\t\\t\\t\\n\\t\\twhile (end >= start +1 &&  str.charAt(end) == ' ')\\n\\t\\t\\tend --;\\n\\t\\t\\n\\t\\t//2nd step : check when the string has only one char\\n\\t\\tif( (start - end ==0) &&  (str.charAt(start) < '0' || str.charAt(start) > '9') )\\n\\t\\t\\treturn false;   //string of only one non numerical char\\n\\t\\t\\n\\t\\t//3rd step : check for '+' and '-' when they are at the beginning of the string\\n\\t\\tif (str.charAt(start)== '+' || str.charAt(start)== '-') {\\n\\t\\t\\tif (str.charAt(start+1) == '.' && (end - start == 1))\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\tstart++;\\n\\t\\t}\\n\\t\\t\\n\\t\\tint point = -1;   //position of '.' in the string\\n\\t\\tint e = -1;       //position of 'e' in the string\\n\\t\\t\\n                //4th step : check for all the remaining cases\\n\\t\\tfor (int i = start; i <=end; i++){\\n\\t\\t\\t\\n\\t\\t\\tif (str.charAt(i) == '.') {\\n\\t\\t\\t\\tif (point == -1)  //if we met the point for the FIRST time, we store its position\\n\\t\\t\\t\\t\\tpoint = i;   //a string that has TWO point can't be a valid number\\n\\t\\t\\t\\telse return false;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif (str.charAt(i) == 'e')  {\\n\\t\\t\\t\\tif (e==-1)     //same raisoning for e\\n\\t\\t\\t\\t\\te= i;\\n\\t\\t\\t\\telse return false;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif (e == start || e==end) return false; //e has to be at the middle\\n\\t\\t\\tif (point > e && e!= -1 ) return false; //the part AFTER e must be only integer\\n\\t\\t\\tif (point == start && e== start +1) return false; //the part BEFORE e must be a valid number\\n\\t\\t\\t\\n\\t\\t\\t//if we met a non numerical digit\\n\\t\\t\\tif ( (str.charAt(i) < '0' || str.charAt(i) > '9')  && str.charAt(i) !='.' && str.charAt(i) != 'e' ) {\\n\\n\\t\\t\\t        //we met + or - at the middle but in a correct configuration. So, we continue\\n\\t\\t\\t\\tif (  (str.charAt(i) == '+' || str.charAt(i) == '-')  && e== i-1 && i!=end ) {  }\\n\\t\\t\\n\\t\\t\\t\\telse \\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 23926,
                "title": "easy-clean-solution-on-javascript-with-explanation-of-idea",
                "content": "I've started with all possible input and figured out that in general we have 2.5 cases:\\n\\n 1. Integer number, name it ``<int>``, like ``000`` ``1123`` ``-324`` ``+424``.\\n 2. Float number (with optional dot), name it ``<int_or_float>``, like any previous example joined with cases like ``0.00`` ``.1123`` ``-.324`` ``+.424`` ``3.``\\n 3. Scientific notation, like ``123e45`` which in fact brings down to ``<int_or_float>e<int>``\\n\\nSo we need the following steps to have this problem solved:\\n\\n1. Trim a string from spaces\\n2. Write a function to detect if string is ``<int_or_float>``\\n3. Extend the function with optional ability to detect if string is strictly integer ``<int>``\\n\\nIf we call this function ``isSimpleNumber(str, isInt)``, the algorithm looks like this:\\n\\n    s = s.trim()\\n    \\n    if (s.includes('e')) {\\n     \\n        const parts = s.split('e')\\n        if (parts.length !== 2 || parts[0] === '' || parts[1] === '') return false\\n     \\n        return isSimpleNumber(parts[0]) && isSimpleNumber(parts[1], true)\\n        \\n    } else {\\n     \\n        return isSimpleNumber(s)\\n    }\\n\\n\\nAnd the whole code is listed below:\\n\\n    /**\\n     * @param {string} s\\n     * @return {boolean}\\n     */\\n    var isNumber = function(s) {\\n        'use strict'\\n        \\n        /**\\n         * Returns true for any string that contains digits, may contain leading sign and (for isInt === false) one dot\\n         * @param {string} str\\n         * @param {boolean} isInt Stricts validation rules to integers only\\n         * @return {boolean}\\n         */\\n        function isSimpleNumber(str, isInt) {\\n            \\n            let dotCount = 0\\n            let digitCount = 0\\n            let startIndex = (str[0] === '-' || str[0] === '+') ? 1 : 0\\n            \\n            for (let i = startIndex; i < str.length; ++i) {\\n                if (str[i] === '.') dotCount++\\n                if (str[i] >= '0' && str[i] <= '9') digitCount++\\n                if ((str[i] < '0' || str[i] > '9') && str[i] !== '.') return false\\n            }\\n            \\n            return digitCount > 0 && ((isInt && dotCount === 0) || (!isInt && dotCount <= 1))\\n        }\\n        \\n        s = s.trim()\\n        \\n        if (s.includes('e')) {\\n         \\n            const parts = s.split('e')\\n            if (parts.length !== 2 || parts[0] === '' || parts[1] === '') return false\\n         \\n            return isSimpleNumber(parts[0]) && isSimpleNumber(parts[1], true)\\n            \\n        } else {\\n         \\n            return isSimpleNumber(s)\\n        }\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "I've started with all possible input and figured out that in general we have 2.5 cases:\\n\\n 1. Integer number, name it ``<int>``, like ``000`` ``1123`` ``-324`` ``+424``.\\n 2. Float number (with optional dot), name it ``<int_or_float>``, like any previous example joined with cases like ``0.00`` ``.1123`` ``-.324`` ``+.424`` ``3.``\\n 3. Scientific notation, like ``123e45`` which in fact brings down to ``<int_or_float>e<int>``\\n\\nSo we need the following steps to have this problem solved:\\n\\n1. Trim a string from spaces\\n2. Write a function to detect if string is ``<int_or_float>``\\n3. Extend the function with optional ability to detect if string is strictly integer ``<int>``\\n\\nIf we call this function ``isSimpleNumber(str, isInt)``, the algorithm looks like this:\\n\\n    s = s.trim()\\n    \\n    if (s.includes('e')) {\\n     \\n        const parts = s.split('e')\\n        if (parts.length !== 2 || parts[0] === '' || parts[1] === '') return false\\n     \\n        return isSimpleNumber(parts[0]) && isSimpleNumber(parts[1], true)\\n        \\n    } else {\\n     \\n        return isSimpleNumber(s)\\n    }\\n\\n\\nAnd the whole code is listed below:\\n\\n    /**\\n     * @param {string} s\\n     * @return {boolean}\\n     */\\n    var isNumber = function(s) {\\n        'use strict'\\n        \\n        /**\\n         * Returns true for any string that contains digits, may contain leading sign and (for isInt === false) one dot\\n         * @param {string} str\\n         * @param {boolean} isInt Stricts validation rules to integers only\\n         * @return {boolean}\\n         */\\n        function isSimpleNumber(str, isInt) {\\n            \\n            let dotCount = 0\\n            let digitCount = 0\\n            let startIndex = (str[0] === '-' || str[0] === '+') ? 1 : 0\\n            \\n            for (let i = startIndex; i < str.length; ++i) {\\n                if (str[i] === '.') dotCount++\\n                if (str[i] >= '0' && str[i] <= '9') digitCount++\\n                if ((str[i] < '0' || str[i] > '9') && str[i] !== '.') return false\\n            }\\n            \\n            return digitCount > 0 && ((isInt && dotCount === 0) || (!isInt && dotCount <= 1))\\n        }\\n        \\n        s = s.trim()\\n        \\n        if (s.includes('e')) {\\n         \\n            const parts = s.split('e')\\n            if (parts.length !== 2 || parts[0] === '' || parts[1] === '') return false\\n         \\n            return isSimpleNumber(parts[0]) && isSimpleNumber(parts[1], true)\\n            \\n        } else {\\n         \\n            return isSimpleNumber(s)\\n        }\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 23934,
                "title": "c-clean-solution-easy-to-understand-just-5-if-else-12ms",
                "content": "    class Solution {\\n    public:\\n    bool isNumber(string s) {\\n        int begin=0, end=s.size()-1;\\n        while(s[begin]==' '&&++begin<s.size());\\n        while(s[end]==' '&&--end>=0); \\n        if(s[begin]=='-'||s[begin]=='+') begin++;\\n        if(begin>end) return false;\\n        bool isdot = false, ise = false;\\n        for(int i = begin; i<=end; i++){\\n            if(s[i]=='.'){\\n                if(begin==end) return false;\\n                if(s[i-1]=='e') return false;\\n                if(isdot||ise) return false;\\n                else isdot = true;\\n            }\\n            else if(s[i]=='e'){\\n                if(i==begin||i==end) return false; \\n                if(s[i-1]=='.'&&i-1==begin) return false;\\n                if(ise) return false;\\n                else ise = true;\\n            }\\n            else if(s[i]>='0'&&s[i]<='9') continue;\\n            else if(s[i]=='-'||s[i]=='+'){\\n                if(s[i-1]!='e'||i==end) return false;\\n            }\\n            else return false;\\n        }\\n        return true;\\n    }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n    bool isNumber(string s) {\\n        int begin=0, end=s.size()-1;\\n        while(s[begin]==' '&&++begin<s.size());\\n        while(s[end]==' '&&--end>=0); \\n        if(s[begin]=='-'||s[begin]=='+') begin++;\\n        if(begin>end) return false;\\n        bool isdot = false, ise = false;\\n        for(int i = begin; i<=end; i++){\\n            if(s[i]=='.'){\\n                if(begin==end) return false;\\n                if(s[i-1]=='e') return false;\\n                if(isdot||ise) return false;\\n                else isdot = true;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2599952,
                "title": "very-fast-and-easy-to-understand-solution-without-python-built-in-tools",
                "content": "```\\nclass Solution:\\n    r\"\"\"\\n    Idea: split the input by the e or E and follow the validation rule\"\"\"\\n    def is_uinteger(self, st):\\n        if st==\"\": return False\\n        return set(st).issubset(\"0123456789\")\\n    def is_integer(self,st):\\n        if st==\"\": return False\\n        if st[0] in \"+-\":\\n            return self.is_uinteger(st[1:])\\n        return self.is_uinteger(st)\\n    def is_decimal(self,st):\\n        if st==\"\": return False\\n        for c,ss in enumerate(st):\\n            if ss==\".\": break \\n        else: \\n            return self.is_integer(st) \\n        left = st[:c]\\n        right = st[c+1:]\\n        # first operand : rule 1 and 2.3 \\n        # second operand: rule 2.1 and 2.2\\n        return (((left in \"+-\") and self.is_uinteger(right)) or\\n               ((self.is_integer(left) and (self.is_uinteger(right) or right==\"\"))))\\n    \\n    def isNumber(self, s: str) -> bool:\\n        for c,ss in enumerate(s):\\n            if ss in \"eE\":\\n                break \\n        else:\\n            return self.is_decimal(s) or self.is_integer(s)\\n        return  self.is_decimal(s[:c]) & self.is_integer(s[c+1:])\\n```\\nPlease upvote :)",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    r\"\"\"\\n    Idea: split the input by the e or E and follow the validation rule\"\"\"\\n    def is_uinteger(self, st):\\n        if st==\"\": return False\\n        return set(st).issubset(\"0123456789\")\\n    def is_integer(self,st):\\n        if st==\"\": return False\\n        if st[0] in \"+-\":\\n            return self.is_uinteger(st[1:])\\n        return self.is_uinteger(st)\\n    def is_decimal(self,st):\\n        if st==\"\": return False\\n        for c,ss in enumerate(st):\\n            if ss==\".\": break \\n        else: \\n            return self.is_integer(st) \\n        left = st[:c]\\n        right = st[c+1:]\\n        # first operand : rule 1 and 2.3 \\n        # second operand: rule 2.1 and 2.2\\n        return (((left in \"+-\") and self.is_uinteger(right)) or\\n               ((self.is_integer(left) and (self.is_uinteger(right) or right==\"\"))))\\n    \\n    def isNumber(self, s: str) -> bool:\\n        for c,ss in enumerate(s):\\n            if ss in \"eE\":\\n                break \\n        else:\\n            return self.is_decimal(s) or self.is_integer(s)\\n        return  self.is_decimal(s[:c]) & self.is_integer(s[c+1:])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1090071,
                "title": "java-easy-solution-beats-100",
                "content": "```\\npublic boolean isNumber(String s) {\\n\\tboolean hasSign = false;\\n\\tboolean hasExponent = false;\\n\\tint expIdx = -1;\\n\\tboolean hasDecimal = false;\\n\\tint decimalIdx = -1;\\n\\tboolean hasDigits = false;\\n\\n\\tint idx = -1;\\n\\twhile(++idx < s.length()) {\\n\\t\\tchar c = s.charAt(idx);\\n\\t\\tif(c == \\'+\\' ||  c == \\'-\\') {\\n\\t\\t\\t//if it already has a sign but no exponent before another sign then invalid\\n\\t\\t\\tif(hasSign && !hasExponent) {return false;}\\n\\t\\t\\t//if it has an exponent but sign is not directly after the exponent\\n\\t\\t\\tif(hasExponent && idx != expIdx + 1) {return false;}\\n\\t\\t\\t//if its the first sign it has to be on index 0 and/or  directly after exponent\\n\\t\\t\\tif(!hasSign && !hasExponent && idx != 0) {return false;}\\n\\t\\t\\thasSign = true;\\n\\t\\t} else if(c == \\'.\\'){\\n\\t\\t\\t//if there was already another decimal then invalid\\n\\t\\t\\tif(hasDecimal) {return false;}\\n\\t\\t\\thasDecimal = true;\\n\\t\\t\\tdecimalIdx = idx;\\n\\t\\t\\t//if there was already another exponent then invalid\\n\\t\\t\\tif(expIdx != -1 && decimalIdx > expIdx) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} else if (c == \\'e\\' || c == \\'E\\') {\\n\\t\\t\\t//if there was already another exponent then invalid\\n\\t\\t\\tif(hasExponent) {return false;}\\n\\t\\t\\thasExponent = true;\\n\\t\\t\\t//if there were no digits before exponent then invalid\\n\\t\\t\\tif(!hasDigits) {return false;}\\n\\t\\t\\texpIdx = idx;\\n\\t\\t\\t//if decimal value after exponent\\n\\t\\t\\tif(decimalIdx != -1 && decimalIdx > expIdx) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} else if(c >= \\'0\\' && c <= \\'9\\') {\\n\\t\\t\\thasDigits = true;\\n\\t\\t} else {\\n\\t\\t\\t//invalid char\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\t//it has to have some digits\\n\\tif(!hasDigits) {return false;}\\n\\n\\t//if it has a sign but sign is last char then invalid\\n\\tif(hasSign && (s.charAt(s.length() - 1) == \\'+\\' || s.charAt(s.length() - 1) == \\'-\\')) {return false;}\\n\\n\\t//if it has a decimal and an exponent, then the value decimal value needs to be valid number (avoding \".e1\", \".e\", etc)\\n\\tif(hasDecimal && hasExponent && !((decimalIdx-1 >= 0 && (s.charAt(decimalIdx-1) >= \\'0\\' && s.charAt(decimalIdx - 1) <= \\'9\\')) || (s.charAt(decimalIdx+1) >= \\'0\\' && s.charAt(decimalIdx + 1) <= \\'9\\'))) {return false;}\\n\\n\\t//exponent cannot be last char\\n\\tif(hasExponent && (expIdx == 0 || expIdx == s.length() - 1)) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\treturn true;\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic boolean isNumber(String s) {\\n\\tboolean hasSign = false;\\n\\tboolean hasExponent = false;\\n\\tint expIdx = -1;\\n\\tboolean hasDecimal = false;\\n\\tint decimalIdx = -1;\\n\\tboolean hasDigits = false;\\n\\n\\tint idx = -1;\\n\\twhile(++idx < s.length()) {\\n\\t\\tchar c = s.charAt(idx);\\n\\t\\tif(c == \\'+\\' ||  c == \\'-\\') {\\n\\t\\t\\t//if it already has a sign but no exponent before another sign then invalid\\n\\t\\t\\tif(hasSign && !hasExponent) {return false;}\\n\\t\\t\\t//if it has an exponent but sign is not directly after the exponent\\n\\t\\t\\tif(hasExponent && idx != expIdx + 1) {return false;}\\n\\t\\t\\t//if its the first sign it has to be on index 0 and/or  directly after exponent\\n\\t\\t\\tif(!hasSign && !hasExponent && idx != 0) {return false;}\\n\\t\\t\\thasSign = true;\\n\\t\\t} else if(c == \\'.\\'){\\n\\t\\t\\t//if there was already another decimal then invalid\\n\\t\\t\\tif(hasDecimal) {return false;}\\n\\t\\t\\thasDecimal = true;\\n\\t\\t\\tdecimalIdx = idx;\\n\\t\\t\\t//if there was already another exponent then invalid\\n\\t\\t\\tif(expIdx != -1 && decimalIdx > expIdx) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} else if (c == \\'e\\' || c == \\'E\\') {\\n\\t\\t\\t//if there was already another exponent then invalid\\n\\t\\t\\tif(hasExponent) {return false;}\\n\\t\\t\\thasExponent = true;\\n\\t\\t\\t//if there were no digits before exponent then invalid\\n\\t\\t\\tif(!hasDigits) {return false;}\\n\\t\\t\\texpIdx = idx;\\n\\t\\t\\t//if decimal value after exponent\\n\\t\\t\\tif(decimalIdx != -1 && decimalIdx > expIdx) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} else if(c >= \\'0\\' && c <= \\'9\\') {\\n\\t\\t\\thasDigits = true;\\n\\t\\t} else {\\n\\t\\t\\t//invalid char\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\t//it has to have some digits\\n\\tif(!hasDigits) {return false;}\\n\\n\\t//if it has a sign but sign is last char then invalid\\n\\tif(hasSign && (s.charAt(s.length() - 1) == \\'+\\' || s.charAt(s.length() - 1) == \\'-\\')) {return false;}\\n\\n\\t//if it has a decimal and an exponent, then the value decimal value needs to be valid number (avoding \".e1\", \".e\", etc)\\n\\tif(hasDecimal && hasExponent && !((decimalIdx-1 >= 0 && (s.charAt(decimalIdx-1) >= \\'0\\' && s.charAt(decimalIdx - 1) <= \\'9\\')) || (s.charAt(decimalIdx+1) >= \\'0\\' && s.charAt(decimalIdx + 1) <= \\'9\\'))) {return false;}\\n\\n\\t//exponent cannot be last char\\n\\tif(hasExponent && (expIdx == 0 || expIdx == s.length() - 1)) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\treturn true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 505567,
                "title": "c-dfa-beats-100-runtime",
                "content": "![image](https://assets.leetcode.com/users/ganeshharidas/image_1581386237.png)\\n\\n\\n```\\nclass Solution {\\npublic:\\n    bool isNumber (string s)\\n    {\\n        // state transitions.\\n        int automata [][8] = \\n        {\\n            {2,3,-1,1,0},\\n            {2,3,-1,-1,-1},\\n            {2,3,4,-1,8},\\n            {5,-1,4,-1,8},\\n            {7,-1,-1,6,-1},\\n            {5,-1,4,-1,8},\\n            {7,-1,-1,-1,-1},\\n            {7,-1,-1,-1,8},\\n            {-1,-1,-1,-1,8}\\n            \\n        };\\n\\n        // transition/edge type.\\n        int digit_cnt = 0;\\n        const auto getTrans = [&digit_cnt] (const char c)\\n        {\\n            if (isdigit (c))\\n            {\\n                digit_cnt++;\\n                return 0;\\n            }\\n            else if (c == \\'.\\')\\n                return 1;\\n            else if (c == \\'e\\')\\n                return 2;\\n            else if (c == \\'+\\' || c == \\'-\\')\\n                return 3;\\n            else if (c == \\' \\')\\n                return 4;\\n            else\\n                return -1;\\n        };\\n        \\n        // final states.\\n        vector <int> final_states ({-1,-1,2,3,-1,5,-1,7,8});\\n        \\n        // remember last and current states.\\n        int prev_state, state = 0;\\n        \\n        // for each char.\\n        for (char c : s)\\n        {\\n            // get transition type.\\n            int trans = getTrans (c);\\n            \\n            // bad transition\\n            if (trans == -1)\\n                return false;\\n            \\n            // save previous state.\\n            prev_state = state;\\n            state = automata [state][trans];\\n            \\n            // no state for transition\\n            if (state == -1)\\n                return false;\\n            \\n            // \".e\" prefix ||  \". \"  \\n            if (state == 4 || state == 8)\\n                if (digit_cnt == 0)\\n                    return false;\\n        }\\n        \\n        // \".\"\\n        if (state == 3 && prev_state < 2)\\n            return false;\\n        \\n        // make sure state is final.\\n        return final_states [state] != -1;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    bool isNumber (string s)\\n    {\\n        // state transitions.\\n        int automata [][8] = \\n        {\\n            {2,3,-1,1,0}",
                "codeTag": "Java"
            },
            {
                "id": 422669,
                "title": "one-liner-javascript",
                "content": "```\\nvar isNumber = function(s) {\\n    return (! isNaN(s) ) && ( s.trim() !== \"\" ) && (! s.includes(\"Infinity\") )\\n};\\n```\\n\\nEmpty strings are being coerced as zero in JavaScript, that\\'s why we need to check if the string is empty, and return the opposite of `isNaN` if it\\'s not.\\n\\nAnother alternative could be using `typeof s === \"number\"`, however this has more corner cases to check for like \"e\" and \".\", so I would prefer the previous way.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar isNumber = function(s) {\\n    return (! isNaN(s) ) && ( s.trim() !== \"\" ) && (! s.includes(\"Infinity\") )\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 295054,
                "title": "python-build-dfa-with-hash-table-44ms",
                "content": "![image](https://assets.leetcode.com/users/xin-0/image_1559362458.png)\\n\\n\\n\"num\" stands for numbers from 0 to 9.\\nthe double quotes, \" \", stands for space\\n\\nS is start state\\nP is pre-number, not yet a number\\nD stands for decimal\\nDN means decimal number\\nN is number\\nSC is scientific notation\\nPS is pre-scientific notation number\\nSN is scientific notation number\\nNS is number w/ space\\n\\n```\\ndef isNumber(self, s: str) -> bool:\\n        #construct DFA\\n        S = dict({\"-\":\"P\", \"+\":\"P\", \"num\":\"N\", \" \":\"S\", \".\":\"D\"})\\n        P = dict({\"num\":\"N\", \".\":\"D\"})\\n        N = dict({\"num\":\"N\",\".\":\"DN\",\"e\":\"SC\", \" \":\"NS\"})\\n        D = dict({\"num\":\"DN\"})\\n        DN = dict({\"e\":\"SC\",\"num\":\"DN\", \" \":\"NS\"})\\n        SC = dict({\"-\":\"PS\", \"+\":\"PS\", \"num\":\"SN\"})\\n        PS = dict({\"num\":\"SN\"})\\n        SN = dict({\"num\":\"SN\", \" \":\"NS\"})\\n        NS = dict({\" \":\"NS\"})\\n        total_states = dict({\"N\":N, \"DN\":DN, \"SN\":SN, \"S\":S, \"P\":P, \"D\":D, \"SC\":SC, \"PS\":PS, \"NS\":NS})\\n        acc_states = set({\"N\", \"DN\", \"SN\", \"NS\"})\\n        \\n        #the starting state is S\\n        cur_state = \"S\"\\n        \\n        for indx in range(len(s)):\\n            input_type = s[indx]\\n            if s[indx] in \\'0123456789\\':\\n                input_type = \"num\"\\n            try:\\n                cur_state = total_states[cur_state][input_type]\\n            except: #if the transition is not defined, go to reject state\\n                return False\\n        \\n        if cur_state in acc_states:\\n            return True\\n        else:\\n            return False\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef isNumber(self, s: str) -> bool:\\n        #construct DFA\\n        S = dict({\"-\":\"P\", \"+\":\"P\", \"num\":\"N\", \" \":\"S\", \".\":\"D\"})\\n        P = dict({\"num\":\"N\", \".\":\"D\"})\\n        N = dict({\"num\":\"N\",\".\":\"DN\",\"e\":\"SC\", \" \":\"NS\"})\\n        D = dict({\"num\":\"DN\"})\\n        DN = dict({\"e\":\"SC\",\"num\":\"DN\", \" \":\"NS\"})\\n        SC = dict({\"-\":\"PS\", \"+\":\"PS\", \"num\":\"SN\"})\\n        PS = dict({\"num\":\"SN\"})\\n        SN = dict({\"num\":\"SN\", \" \":\"NS\"})\\n        NS = dict({\" \":\"NS\"})\\n        total_states = dict({\"N\":N, \"DN\":DN, \"SN\":SN, \"S\":S, \"P\":P, \"D\":D, \"SC\":SC, \"PS\":PS, \"NS\":NS})\\n        acc_states = set({\"N\", \"DN\", \"SN\", \"NS\"})\\n        \\n        #the starting state is S\\n        cur_state = \"S\"\\n        \\n        for indx in range(len(s)):\\n            input_type = s[indx]\\n            if s[indx] in \\'0123456789\\':\\n                input_type = \"num\"\\n            try:\\n                cur_state = total_states[cur_state][input_type]\\n            except: #if the transition is not defined, go to reject state\\n                return False\\n        \\n        if cur_state in acc_states:\\n            return True\\n        else:\\n            return False\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 23893,
                "title": "a-clean-code-with-fsm",
                "content": "    bool isNumber(string s) {\\n        int fsm[12][256];\\n        memset(fsm,-1,sizeof(fsm));\\n        fsm[0]['.']=fsm[1]['.']=fsm[2]['.']=4;\\n        fsm[0]['+']=fsm[0]['-']=fsm[1]['+']=fsm[1]['-']=2;\\n        fsm[0][' ']=fsm[1][' ']=1;\\n        fsm[3]['.']=fsm[6]['.']=7;\\n        fsm[3]['e']=fsm[3]['E']=fsm[6]['e']=fsm[6]['E']=fsm[7]['e']=fsm[7]['E']=fsm[9]['e']=fsm[9]['E']=8;\\n        fsm[3][' ']=fsm[5][' ']=fsm[6][' ']=fsm[7][' ']=fsm[9][' ']=fsm[11][' ']=5;\\n        fsm[8]['+']=fsm[8]['-']=10;\\n        for(char d='0';d<='9';++d){\\n            fsm[0][d]=fsm[1][d]=fsm[2][d]=3;\\n            fsm[3][d]=fsm[6][d]=6;\\n            fsm[4][d]=fsm[7][d]=fsm[9][d]=9;\\n            fsm[8][d]=fsm[10][d]=fsm[11][d]=11;\\n        }\\n        int state=0;\\n        for(int i=0,len=s.length();i<len;++i){\\n            state=fsm[state][s[i]];\\n            if(state==-1) break;\\n        }\\n        return state==3 || state==5 || state==6 || state==7 || state==9 || state==11;\\n    }",
                "solutionTags": [],
                "code": "    bool isNumber(string s) {\\n        int fsm[12][256];\\n        memset(fsm,-1,sizeof(fsm));\\n        fsm[0]['.']=fsm[1]['.']=fsm[2]['.']=4;\\n        fsm[0]['+']=fsm[0]['-']=fsm[1]['+']=fsm[1]['-']=2;\\n        fsm[0][' ']=fsm[1][' ']=1;\\n        fsm[3]['.']=fsm[6]['.']=7;\\n        fsm[3]['e']=fsm[3]['E']=fsm[6]['e']=fsm[6]['E']=fsm[7]['e']=fsm[7]['E']=fsm[9]['e']=fsm[9]['E']=8;\\n        fsm[3][' ']=fsm[5][' ']=fsm[6][' ']=fsm[7][' ']=fsm[9][' ']=fsm[11][' ']=5;\\n        fsm[8]['+']=fsm[8]['-']=10;\\n        for(char d='0';d<='9';++d){\\n            fsm[0][d]=fsm[1][d]=fsm[2][d]=3;\\n            fsm[3][d]=fsm[6][d]=6;\\n            fsm[4][d]=fsm[7][d]=fsm[9][d]=9;\\n            fsm[8][d]=fsm[10][d]=fsm[11][d]=11;\\n        }\\n        int state=0;\\n        for(int i=0,len=s.length();i<len;++i){\\n            state=fsm[state][s[i]];\\n            if(state==-1) break;\\n        }\\n        return state==3 || state==5 || state==6 || state==7 || state==9 || state==11;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2916402,
                "title": "very-easy-java-solution-with-full-explanation-line-by-line-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        // assign total 4 variable for all 4 cases\\n        boolean digitseen = false, eseen = false, dotseen = false;\\n        int countPlusMinus = 0;\\n\\n        for(int i=0; i<s.length(); i++){\\n            char ch = s.charAt(i);\\n\\n            // case 1 ---  digit\\n            if(Character.isDigit(ch)){ // if it is digit\\n                digitseen = true; // make it true\\n            }\\n            //case 2 --- minus/plus\\n            else if(ch == \\'+\\' || ch == \\'-\\'){\\n                if(countPlusMinus == 2){ // if already 2 +/- seen\\n                    return false;\\n                }\\n                if(i>0 && (s.charAt(i-1) != \\'e\\' && s.charAt(i-1) != \\'E\\')){ // if +/- comes in middle and i-1 position if there is not e/E\\n                    return false;\\n                }\\n\\n                if(i == s.length()-1){ // if +/- comes at last position\\n                    return false;\\n                }\\n                countPlusMinus++; // increment it by 1\\n            }\\n            //case 3 --- dot\\n            else if(ch == \\'.\\'){\\n                if(eseen || dotseen){  // if dot comes after e/E or already 1 dot seen\\n                    return false;\\n                }\\n                if(i == s.length() -1 && !digitseen){ // if there is single dot\\n                    return false;\\n                }\\n                dotseen = true;  // make it true\\n            }\\n            //case 4 --- e/E\\n            else if(ch == \\'e\\' || ch == \\'E\\'){\\n                if(eseen || !digitseen || i == s.length()-1){ // if e/E already seen or e/E comes in starting or e/E comes at the end\\n                    return false;\\n                }\\n                eseen = true;  // make it true\\n            }\\n            else{\\n                return false;  // if any other character comes then it will be invalid\\n            }\\n        }\\n        return true;  // finally return true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        // assign total 4 variable for all 4 cases\\n        boolean digitseen = false, eseen = false, dotseen = false;\\n        int countPlusMinus = 0;\\n\\n        for(int i=0; i<s.length(); i++){\\n            char ch = s.charAt(i);\\n\\n            // case 1 ---  digit\\n            if(Character.isDigit(ch)){ // if it is digit\\n                digitseen = true; // make it true\\n            }\\n            //case 2 --- minus/plus\\n            else if(ch == \\'+\\' || ch == \\'-\\'){\\n                if(countPlusMinus == 2){ // if already 2 +/- seen\\n                    return false;\\n                }\\n                if(i>0 && (s.charAt(i-1) != \\'e\\' && s.charAt(i-1) != \\'E\\')){ // if +/- comes in middle and i-1 position if there is not e/E\\n                    return false;\\n                }\\n\\n                if(i == s.length()-1){ // if +/- comes at last position\\n                    return false;\\n                }\\n                countPlusMinus++; // increment it by 1\\n            }\\n            //case 3 --- dot\\n            else if(ch == \\'.\\'){\\n                if(eseen || dotseen){  // if dot comes after e/E or already 1 dot seen\\n                    return false;\\n                }\\n                if(i == s.length() -1 && !digitseen){ // if there is single dot\\n                    return false;\\n                }\\n                dotseen = true;  // make it true\\n            }\\n            //case 4 --- e/E\\n            else if(ch == \\'e\\' || ch == \\'E\\'){\\n                if(eseen || !digitseen || i == s.length()-1){ // if e/E already seen or e/E comes in starting or e/E comes at the end\\n                    return false;\\n                }\\n                eseen = true;  // make it true\\n            }\\n            else{\\n                return false;  // if any other character comes then it will be invalid\\n            }\\n        }\\n        return true;  // finally return true\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2827189,
                "title": "super-easy-just-4-lines-of-code-python",
                "content": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        try:\\n            float(s)\\n            if \"inf\" in s.lower():\\n                return False\\n            return True\\n        except:\\n            return False\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        try:\\n            float(s)\\n            if \"inf\" in s.lower():\\n                return False\\n            return True\\n        except:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2598179,
                "title": "dfa-python",
                "content": "![image](https://assets.leetcode.com/users/images/a1828653-7d5f-4368-b7c5-755508d96f16_1663608377.5475514.jpeg)\\n\\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        D = \\'digit\\'\\n        dfa = {\\n            0: {\\n                \\'+\\': 1,\\n                \\'-\\': 1,\\n                D: 2,\\n                \\'.\\':5\\n            },\\n            1: {\\n                D: 2,\\n                \\'.\\':5\\n            },\\n            2: {\\n                \\'.\\':3,\\n                D: 2,\\n                \\'e\\':6,\\n                \\'E\\':6\\n            },\\n            3: {\\n                D:4,\\n                \\'e\\':6,\\n                \\'E\\':6\\n            },\\n            4: {\\n                D:4,\\n                \\'e\\':6,\\n                \\'E\\':6\\n            },\\n            5: {\\n                D: 4\\n            },\\n            6: {\\n                \\'+\\': 7,\\n                \\'-\\': 7,\\n                D: 8\\n            },\\n            7: {\\n                D: 8\\n            },  \\n            8: {\\n                D: 8\\n            },  \\n        }\\n        \\n        accepted_states = (2, 3, 4, 8)\\n        state = 0\\n        for s_ in s:\\n            key = s_ if not s_.isdigit() else \\'digit\\'\\n            if key not in dfa[state]:\\n                return False\\n            state = dfa[state][key]\\n        return state in accepted_states\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        D = \\'digit\\'\\n        dfa = {\\n            0: {\\n                \\'+\\': 1,\\n                \\'-\\': 1,\\n                D: 2,\\n                \\'.\\':5\\n            },\\n            1: {\\n                D: 2,\\n                \\'.\\':5\\n            },\\n            2: {\\n                \\'.\\':3,\\n                D: 2,\\n                \\'e\\':6,\\n                \\'E\\':6\\n            },\\n            3: {\\n                D:4,\\n                \\'e\\':6,\\n                \\'E\\':6\\n            },\\n            4: {\\n                D:4,\\n                \\'e\\':6,\\n                \\'E\\':6\\n            },\\n            5: {\\n                D: 4\\n            },\\n            6: {\\n                \\'+\\': 7,\\n                \\'-\\': 7,\\n                D: 8\\n            },\\n            7: {\\n                D: 8\\n            },  \\n            8: {\\n                D: 8\\n            },  \\n        }\\n        \\n        accepted_states = (2, 3, 4, 8)\\n        state = 0\\n        for s_ in s:\\n            key = s_ if not s_.isdigit() else \\'digit\\'\\n            if key not in dfa[state]:\\n                return False\\n            state = dfa[state][key]\\n        return state in accepted_states\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2320848,
                "title": "c-i-m-bad-at-tafl-in-whole-batch-literally-but-i-did-it",
                "content": "BY MY LITTLE TAFL....AND LITTLE ART SKILL [\\uD83D\\uDE06\\uD83D\\uDE06] \\n![image](https://assets.leetcode.com/users/images/3de4b947-aae3-44c6-b3df-1f18ac007a83_1658564612.5314271.jpeg)\\n\\n\\n\\n```\\n\\n\\n\\nRefer diagram for help......This is called over engineering \\n\\n\\n\\n\\n\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        while(!s.empty() && s[0] == \\' \\')\\n        {\\n            s.erase(s.begin());\\n        }\\n        while (!s.empty() && s[s.size()-1] == \\' \\')\\n        {\\n            s.erase(s.end()-1);\\n        }\\n        \\n        if(s.empty())\\n        return false;\\n        \\n        int state = 0;\\n        for(int i=0; i<s.size(); i++)\\n        {\\n            if(s[i] == \\'-\\' || s[i] == \\'+\\')\\n            {\\n                if(state == 0 || state == 3)\\n                {\\n                    state ++;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n            \\n            else if(s[i] == \\'.\\')\\n            {\\n                if( state == 2)\\n                {   \\n                    state = 7;\\n                }\\n                else if(state == 0|| state == 1)\\n                {\\n                    state = 6;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n                \\n            }\\n            else if(s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n            {\\n                if(state == 1 || state == 4 || state == 6)\\n                {\\n                    state ++;\\n                }\\n                else if(state == 0 || state == 3)\\n                {\\n                    state = state+2;\\n                }\\n            }\\n            else if(s[i] == \\'e\\' || s[i] == \\'E\\')\\n            {\\n                if(state == 2 ||  state == 7)\\n                {\\n                    state = 3;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        \\n        if(state == 2|| state == 7 || state == 5)\\n        return true;\\n        \\n        \\n        return false;\\n       \\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\n\\n\\nRefer diagram for help......This is called over engineering \\n\\n\\n\\n\\n\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        while(!s.empty() && s[0] == \\' \\')\\n        {\\n            s.erase(s.begin());\\n        }\\n        while (!s.empty() && s[s.size()-1] == \\' \\')\\n        {\\n            s.erase(s.end()-1);\\n        }\\n        \\n        if(s.empty())\\n        return false;\\n        \\n        int state = 0;\\n        for(int i=0; i<s.size(); i++)\\n        {\\n            if(s[i] == \\'-\\' || s[i] == \\'+\\')\\n            {\\n                if(state == 0 || state == 3)\\n                {\\n                    state ++;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n            \\n            else if(s[i] == \\'.\\')\\n            {\\n                if( state == 2)\\n                {   \\n                    state = 7;\\n                }\\n                else if(state == 0|| state == 1)\\n                {\\n                    state = 6;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n                \\n            }\\n            else if(s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n            {\\n                if(state == 1 || state == 4 || state == 6)\\n                {\\n                    state ++;\\n                }\\n                else if(state == 0 || state == 3)\\n                {\\n                    state = state+2;\\n                }\\n            }\\n            else if(s[i] == \\'e\\' || s[i] == \\'E\\')\\n            {\\n                if(state == 2 ||  state == 7)\\n                {\\n                    state = 3;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        \\n        if(state == 2|| state == 7 || state == 5)\\n        return true;\\n        \\n        \\n        return false;\\n       \\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1737311,
                "title": "dumbest-and-fastest-js-solution",
                "content": "```/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    if(/Infinity/.test(s) ) {\\n       return false\\n    }\\n    \\n    \\n    return !isNaN(Number(s))\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    if(/Infinity/.test(s) ) {\\n       return false\\n    }\\n    \\n    \\n    return !isNaN(Number(s))\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1678766,
                "title": "regex-solution",
                "content": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        return isDecimal(s) || isInteger(s);\\n    }\\n    \\n    public boolean isDecimal(String s) {\\n        String regex = \"^[+-]?(\\\\\\\\d+)?\\\\\\\\.?(\\\\\\\\d+)([eE][+-]?\\\\\\\\d{1,})?$\";\\n        String regex2 = \"^[+-]?(\\\\\\\\d+)\\\\\\\\.?(\\\\\\\\d+)?([eE][+-]?\\\\\\\\d{1,})?$\";\\n        return (s.replaceAll(regex,\"\").length()==0) || s.replaceAll(regex2,\"\").length()==0;\\n    }\\n    \\n    public boolean isInteger(String s) {\\n        String regex = \"^[+-]?\\\\\\\\d{1,}$\";\\n         return s.replaceAll(regex,\"\").length()==0;\\n    }\\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        return isDecimal(s) || isInteger(s);\\n    }\\n    \\n    public boolean isDecimal(String s) {\\n        String regex = \"^[+-]?(\\\\\\\\d+)?\\\\\\\\.?(\\\\\\\\d+)([eE][+-]?\\\\\\\\d{1,})?$\";\\n        String regex2 = \"^[+-]?(\\\\\\\\d+)\\\\\\\\.?(\\\\\\\\d+)?([eE][+-]?\\\\\\\\d{1,})?$\";\\n        return (s.replaceAll(regex,\"\").length()==0) || s.replaceAll(regex2,\"\").length()==0;\\n    }\\n    \\n    public boolean isInteger(String s) {\\n        String regex = \"^[+-]?\\\\\\\\d{1,}$\";\\n         return s.replaceAll(regex,\"\").length()==0;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1325720,
                "title": "0ms-faster-than-100-c-solution-parser-like-implementation",
                "content": "\\n\\n```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        ios::sync_with_stdio(false);\\n        \\n        bool sign = false, eorE = false, decimal =false, result = true;\\n        int size = s.size();\\n        \\n        switch(s[0]){\\n            case \\'+\\' : \\n                if(size == 1) return false;\\n                sign = true;\\n                break;\\n            case \\'-\\' :\\n                if(size == 1) return false;\\n                sign = true;\\n                break;\\n            case \\'e\\':\\n                return false;\\n                break;\\n            case \\'E\\' :\\n                return false;\\n                break;\\n            case \\'.\\' :\\n                if(size == 1) return false;\\n                decimal = true;\\n                break;\\n            case \\'0\\' ... \\'9\\' : break;\\n            default : return false;\\n        }\\n        \\n        for(int i=1; i<size; i++){\\n            switch(s[i]){\\n                case \\'+\\' : \\n                    if(i==size-1) return false;\\n                    if(s[i-1] == \\'e\\' || s[i-1] == \\'E\\') break;\\n                    else return false;\\n                case \\'-\\' : \\n                    if(i==size-1) return false;\\n                    if(s[i-1] == \\'e\\' || s[i-1] == \\'E\\') break;\\n                    else return false;\\n                case \\'e\\':\\n                    if(eorE || i==size-1 || s[i-1]==\\'+\\' || s[i-1]==\\'-\\' || (s[i-1]==\\'.\\' && i==1) ) return false;\\n                    eorE = true;\\n                    break;\\n                case \\'E\\' :\\n                    if(eorE || i==size-1 || s[i-1]==\\'+\\' || s[i-1]==\\'-\\' || (s[i-1]==\\'.\\' && i==1) ) return false;\\n                    eorE = true;\\n                    break;\\n                case \\'.\\' :\\n                    if(decimal || eorE || ( (s[i-1]==\\'+\\'||s[i-1]==\\'-\\') && i==size-1) ) return false;\\n                    decimal = true;\\n                    break;\\n                case \\'0\\' ... \\'9\\' : break;\\n                default : return false;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n};\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool isNumber(string s) {\\n        ios::sync_with_stdio(false);\\n        \\n        bool sign = false, eorE = false, decimal =false, result = true;\\n        int size = s.size();\\n        \\n        switch(s[0]){\\n            case \\'+\\' : \\n                if(size == 1) return false;\\n                sign = true;\\n                break;\\n            case \\'-\\' :\\n                if(size == 1) return false;\\n                sign = true;\\n                break;\\n            case \\'e\\':\\n                return false;\\n                break;\\n            case \\'E\\' :\\n                return false;\\n                break;\\n            case \\'.\\' :\\n                if(size == 1) return false;\\n                decimal = true;\\n                break;\\n            case \\'0\\' ... \\'9\\' : break;\\n            default : return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1210648,
                "title": "java-clean-concise-optimal-code-1ms-time-100-beats-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        \\n        if (s == null || s.length () == 0) {\\n            return false;\\n        }\\n        \\n        boolean eSeen = false;\\n        boolean numberSeen = false;\\n        boolean decimalSeen = false;\\n        \\n        for (int i = 0; i < s.length (); i++) {\\n            char c = s.charAt (i);\\n            if (c >= 48 && c <= 57) {\\n                numberSeen = true;\\n            }\\n            else if (c == \\'+\\' || c == \\'-\\') {\\n                if (i == s.length () - 1 || (i != 0 && s.charAt (i - 1) != \\'e\\' && s.charAt (i - 1) != \\'E\\')) {\\n                    return false;\\n                }\\n            }\\n            else if (c == \\'.\\') {\\n                if (eSeen || decimalSeen) {\\n                    return false;\\n                }\\n                \\n                decimalSeen = true;\\n            }\\n            else if (c == \\'e\\' || c == \\'E\\') {\\n                if (i == s.length () - 1 || eSeen || !numberSeen) {\\n                    return false;\\n                }\\n                \\n                eSeen = true;\\n            }\\n            else {\\n                return false;\\n            }\\n        }\\n        \\n        return numberSeen;\\n    }\\n}\\n```\\n\\nPlease help to **UPVOTE** if this post is useful for you.\\nIf you have any questions, feel free to comment below.\\n\\n**LOVE CODING :)\\nHAPPY CODING :)\\nHAPPY LEARNING :)**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        \\n        if (s == null || s.length () == 0) {\\n            return false;\\n        }\\n        \\n        boolean eSeen = false;\\n        boolean numberSeen = false;\\n        boolean decimalSeen = false;\\n        \\n        for (int i = 0; i < s.length (); i++) {\\n            char c = s.charAt (i);\\n            if (c >= 48 && c <= 57) {\\n                numberSeen = true;\\n            }\\n            else if (c == \\'+\\' || c == \\'-\\') {\\n                if (i == s.length () - 1 || (i != 0 && s.charAt (i - 1) != \\'e\\' && s.charAt (i - 1) != \\'E\\')) {\\n                    return false;\\n                }\\n            }\\n            else if (c == \\'.\\') {\\n                if (eSeen || decimalSeen) {\\n                    return false;\\n                }\\n                \\n                decimalSeen = true;\\n            }\\n            else if (c == \\'e\\' || c == \\'E\\') {\\n                if (i == s.length () - 1 || eSeen || !numberSeen) {\\n                    return false;\\n                }\\n                \\n                eSeen = true;\\n            }\\n            else {\\n                return false;\\n            }\\n        }\\n        \\n        return numberSeen;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1209274,
                "title": "valid-number-python-fastest-and-easiest-solution-using-try-and-error",
                "content": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        if \"inf\" in s or \"Inf\" in s:\\n            return False\\n        try:\\n            complex(s) # for int, long, float and complex\\n        except ValueError:\\n            return False\\n        \\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        if \"inf\" in s or \"Inf\" in s:\\n            return False\\n        try:\\n            complex(s) # for int, long, float and complex\\n        except ValueError:\\n            return False\\n        \\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 802092,
                "title": "don-t-make-simple-thing-looks-harder-than-it-s-necessary-understand-the-language",
                "content": "Numeric literals containing a decimal point or an exponent sign yield floating point numbers.  (If you like this thread, please upvote...** So I\\'m encouraged ... ;-) **\\n(the interviewer may be impressed about your deep understanding of the language. IMHO, not just Algorithm)\\n\\nhttps://docs.python.org/3.4/library/stdtypes.html#numeric-types-int-float-complex\\n\\nTherefore Python treats values like 53.5e93, -90e3 as float type numbers.  (quote from S/O) \\n*Programmer job is tough, so don\\'t make it unnecessary complex .... (at least in this case)*\\n\\n\\n```\\ndef isNumber(self, s: str) -> bool:\\n        try:\\n            parsed = float(s)\\n            return True\\n\\n        except ValueError:\\n            return False",
                "solutionTags": [],
                "code": "Numeric literals containing a decimal point or an exponent sign yield floating point numbers.  (If you like this thread, please upvote...** So I\\'m encouraged ... ;-) **\\n(the interviewer may be impressed about your deep understanding of the language. IMHO, not just Algorithm)\\n\\nhttps://docs.python.org/3.4/library/stdtypes.html#numeric-types-int-float-complex\\n\\nTherefore Python treats values like 53.5e93, -90e3 as float type numbers.  (quote from S/O) \\n*Programmer job is tough, so don\\'t make it unnecessary complex .... (at least in this case)*\\n\\n\\n```\\ndef isNumber(self, s: str) -> bool:\\n        try:\\n            parsed = float(s)\\n            return True\\n\\n        except ValueError:\\n            return False",
                "codeTag": "Python3"
            },
            {
                "id": 683725,
                "title": "java-code-100-1ms-simple-solution",
                "content": "```\\nclass Solution {\\n    public boolean isNumber(String p) {\\n        boolean e = false;\\n        boolean point = false;\\n        boolean number = false; \\n       \\n        String s = p.trim();\\n        int n = s.length();\\n        if(s.length()==0)\\n            return false;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\')\\n            {\\n                number = true;\\n            }\\n            else if(s.charAt(i) == \\'.\\')\\n            {\\n                if(e || point)\\n                    return false;\\n                point = true;\\n            }\\n            else if(s.charAt(i) == \\'e\\')\\n            {\\n                if(e || !number)\\n                    return false;\\n                e = true;\\n                number = false;\\n            }\\n            else if(s.charAt(i) == \\'-\\' || s.charAt(i) == \\'+\\')\\n            {\\n                if(i!=0 && s.charAt(i-1) != \\'e\\')\\n                {\\n                    return false;\\n                }\\n            }\\n            else\\n                return false;\\n        }\\n        if(s.charAt(n-1)==\\'.\\' && number==false || s.charAt(n-1) == \\'e\\' || s.charAt(n-1) == \\'+\\' || s.charAt(n-1) == \\'-\\' )\\n            return false;\\n        else\\n            return true;\\n    }\\n    \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isNumber(String p) {\\n        boolean e = false;\\n        boolean point = false;\\n        boolean number = false; \\n       \\n        String s = p.trim();\\n        int n = s.length();\\n        if(s.length()==0)\\n            return false;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\')\\n            {\\n                number = true;\\n            }\\n            else if(s.charAt(i) == \\'.\\')\\n            {\\n                if(e || point)\\n                    return false;\\n                point = true;\\n            }\\n            else if(s.charAt(i) == \\'e\\')\\n            {\\n                if(e || !number)\\n                    return false;\\n                e = true;\\n                number = false;\\n            }\\n            else if(s.charAt(i) == \\'-\\' || s.charAt(i) == \\'+\\')\\n            {\\n                if(i!=0 && s.charAt(i-1) != \\'e\\')\\n                {\\n                    return false;\\n                }\\n            }\\n            else\\n                return false;\\n        }\\n        if(s.charAt(n-1)==\\'.\\' && number==false || s.charAt(n-1) == \\'e\\' || s.charAt(n-1) == \\'+\\' || s.charAt(n-1) == \\'-\\' )\\n            return false;\\n        else\\n            return true;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 570072,
                "title": "c-step-by-step-and-simple-explanation",
                "content": "The code explains the logic itself. Please leave a comment for any thought.\\n\\n```\\nbool isNumber(string s) {\\n\\tif (s.empty()) return false;\\n\\tint left = 0, right = s.size() - 1;\\n\\t// skip whitespaces in the begining\\n\\twhile (left < s.size() && s[left] == \\' \\') left++;\\n\\t// if all characters are whitespace, just return false\\n\\tif (left == s.size()) return false;\\n\\t// skip whitespaces in the end\\n\\twhile (right >= 0 && s[right] == \\' \\') right--;\\n\\n\\t// skip + or - sign if has\\n\\tif (s[left] == \\'+\\' || s[left] == \\'-\\') left++;\\n\\n\\tbool has_exponent = false;\\n\\tbool has_decimal_point = false;\\n\\n\\tfor (int i = left; i <= right;) {\\n\\t\\tchar c = s[i];\\n\\t\\tif (c == \\'e\\') {\\n\\t\\t\\t// if has exponent before, just return false\\n\\t\\t\\tif (has_exponent || i == left) return false;\\n\\t\\t\\t// skip + or - sign after exponent if has\\n\\t\\t\\tif (s[i + 1] == \\'+\\' || s[i + 1] == \\'-\\') i++;\\n\\t\\t\\t// after skip + or -, if e is last character, return false\\n\\t\\t\\t// eg: 10e, 10e+\\n\\t\\t\\tif (i == right) return false;\\n\\t\\t\\thas_exponent = true;\\n\\t\\t}\\n\\t\\telse if (c == \\'.\\') {\\n\\t\\t\\t// if it has decimal point or exponent before, return false\\n\\t\\t\\tif (has_decimal_point || has_exponent) return false;\\n\\t\\t\\t// case: \".\"\\n\\t\\t\\tif (left == right) return false;\\n\\t\\t\\t// if \\'e\\' comes after decimal point, there should be atleast one digit before decimal point\\n\\t\\t\\t// eg: .e1 --> false, 1.e1 --> true\\n\\t\\t\\tif (s[i + 1] == \\'e\\' && i == left) return false;\\n\\t\\t\\thas_decimal_point = true;\\n\\t\\t} else if (!isdigit(c)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\ti++;\\n\\t}\\n\\n\\treturn true;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nbool isNumber(string s) {\\n\\tif (s.empty()) return false;\\n\\tint left = 0, right = s.size() - 1;\\n\\t// skip whitespaces in the begining\\n\\twhile (left < s.size() && s[left] == \\' \\') left++;\\n\\t// if all characters are whitespace, just return false\\n\\tif (left == s.size()) return false;\\n\\t// skip whitespaces in the end\\n\\twhile (right >= 0 && s[right] == \\' \\') right--;\\n\\n\\t// skip + or - sign if has\\n\\tif (s[left] == \\'+\\' || s[left] == \\'-\\') left++;\\n\\n\\tbool has_exponent = false;\\n\\tbool has_decimal_point = false;\\n\\n\\tfor (int i = left; i <= right;) {\\n\\t\\tchar c = s[i];\\n\\t\\tif (c == \\'e\\') {\\n\\t\\t\\t// if has exponent before, just return false\\n\\t\\t\\tif (has_exponent || i == left) return false;\\n\\t\\t\\t// skip + or - sign after exponent if has\\n\\t\\t\\tif (s[i + 1] == \\'+\\' || s[i + 1] == \\'-\\') i++;\\n\\t\\t\\t// after skip + or -, if e is last character, return false\\n\\t\\t\\t// eg: 10e, 10e+\\n\\t\\t\\tif (i == right) return false;\\n\\t\\t\\thas_exponent = true;\\n\\t\\t}\\n\\t\\telse if (c == \\'.\\') {\\n\\t\\t\\t// if it has decimal point or exponent before, return false\\n\\t\\t\\tif (has_decimal_point || has_exponent) return false;\\n\\t\\t\\t// case: \".\"\\n\\t\\t\\tif (left == right) return false;\\n\\t\\t\\t// if \\'e\\' comes after decimal point, there should be atleast one digit before decimal point\\n\\t\\t\\t// eg: .e1 --> false, 1.e1 --> true\\n\\t\\t\\tif (s[i + 1] == \\'e\\' && i == left) return false;\\n\\t\\t\\thas_decimal_point = true;\\n\\t\\t} else if (!isdigit(c)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\ti++;\\n\\t}\\n\\n\\treturn true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 461277,
                "title": "two-solutions-in-python-3-two-lines-20-ms-beats-100",
                "content": "_Twelve Lines:_ (20 ms) (beats ~100%)\\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        s = s.lower().replace(\\'+\\',\\'-\\').strip()\\n        if not s: return False\\n        if not (s[-1].isnumeric() or s[-1] == \\'.\\'): return False\\n        if not (s[0].isnumeric() or s[0] in \\'-.\\'): return False\\n        if s[0] == \\'-\\': s = s[1:]\\n        s, p, e = s.replace(\\'e-\\',\\'\\'), s.find(\\'.\\'), s.find(\\'e\\')\\n        if \\'e\\' in [s[0],s[-1]] or s.count(\\'.\\') > 1 or s.count(\\'e\\') > 1: return False\\n        if s.isnumeric(): return True\\n        if len(s) <= 1: return False\\n        if any(c in s for c in \\'abcdfghijklmnopqrstuvwxyz- \\'): return False\\n        if s[:2] == \\'.e\\' or not (-1 in [e,p] or e > p): return False\\n        return True\\n        \\n\\t\\t\\n```\\t\\t\\n_Two-Lines:_ (20 ms) (beats ~100%)\\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        try: return float(s) != 3.1415926535897932384626433832795\\n        except: return \\'Problem 65\\' == \\'Best Problem on LeetCode\\'\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n- Junaid Mansuri\\n- Chicago, IL\\n```\\n![image](https://assets.leetcode.com/users/junaidmansuri/image_1584663437.png)\\nhttps://leetcode.com/submissions/detail/288688913/\\nhttps://leetcode.com/submissions/detail/288693465/\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        s = s.lower().replace(\\'+\\',\\'-\\').strip()\\n        if not s: return False\\n        if not (s[-1].isnumeric() or s[-1] == \\'.\\'): return False\\n        if not (s[0].isnumeric() or s[0] in \\'-.\\'): return False\\n        if s[0] == \\'-\\': s = s[1:]\\n        s, p, e = s.replace(\\'e-\\',\\'\\'), s.find(\\'.\\'), s.find(\\'e\\')\\n        if \\'e\\' in [s[0],s[-1]] or s.count(\\'.\\') > 1 or s.count(\\'e\\') > 1: return False\\n        if s.isnumeric(): return True\\n        if len(s) <= 1: return False\\n        if any(c in s for c in \\'abcdfghijklmnopqrstuvwxyz- \\'): return False\\n        if s[:2] == \\'.e\\' or not (-1 in [e,p] or e > p): return False\\n        return True\\n        \\n\\t\\t\\n```\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        try: return float(s) != 3.1415926535897932384626433832795\\n        except: return \\'Problem 65\\' == \\'Best Problem on LeetCode\\'\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n- Junaid Mansuri\\n- Chicago, IL\\n```",
                "codeTag": "Java"
            },
            {
                "id": 451478,
                "title": "javascript-version-of-dfa",
                "content": "js version of this DFA idea:https://leetcode.wang/leetCode-65-Valid-Number.html\\n\\n![image](https://assets.leetcode.com/users/cucco/image_1576353386.png)\\n\\n\\n```\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    let state = 0;\\n    s = s.trim();\\n    for(let char of s){\\n        switch(char){\\n            case \"+\":\\n            case \"-\":\\n                if(state === 0){\\n                    state = 1;\\n                } else if (state == 4){\\n                    state = 6\\n                } else {\\n                    return false;\\n                }\\n                break;\\n            case \\'.\\':\\n                if(state === 0 || state === 1){\\n                   state = 7;\\n                 } else if (state === 2){\\n                     state = 3;\\n                 } else {\\n                     return false;\\n                 }\\n                break;\\n            case \\'0\\':\\n            case \\'1\\':\\n            case \\'2\\':\\n            case \\'3\\':\\n            case \\'4\\':\\n            case \\'5\\':\\n            case \\'6\\':\\n            case \\'7\\':\\n            case \\'8\\':\\n            case \\'9\\':\\n                if(state === 7 || state === 8){\\n                    state = 8;\\n                } else if(state === 0 || state === 1 || state === 2) {\\n                   state = 2;\\n                } else if(state === 3) {\\n                    state = 3;\\n               } else if(state === 4 || state === 5 || state === 6){\\n                   state = 5;\\n               } else {\\n                   return false;\\n               }\\n                break;\\n            case\\'.\\':\\n                if(state === 0 || state === 1){\\n                    state = 7\\n                } else if(state === 2){\\n                  state = 3;\\n                  } else {\\n                      return false;\\n                  }\\n                break;\\n            case \\'e\\':\\n                if(state === 2 || state === 3 || state === 8){\\n                    state = 4;\\n                } else {\\n                    return false;\\n                }\\n                break;\\n            default: \\n                return false;\\n        }\\n    }\\n    if([2,3,5,8].includes(state)){\\n        return true;\\n    }\\n    return false;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    let state = 0;\\n    s = s.trim();\\n    for(let char of s){\\n        switch(char){\\n            case \"+\":\\n            case \"-\":\\n                if(state === 0){\\n                    state = 1;\\n                } else if (state == 4){\\n                    state = 6\\n                } else {\\n                    return false;\\n                }\\n                break;\\n            case \\'.\\':\\n                if(state === 0 || state === 1){\\n                   state = 7;\\n                 } else if (state === 2){\\n                     state = 3;\\n                 } else {\\n                     return false;\\n                 }\\n                break;\\n            case \\'0\\':\\n            case \\'1\\':\\n            case \\'2\\':\\n            case \\'3\\':\\n            case \\'4\\':\\n            case \\'5\\':\\n            case \\'6\\':\\n            case \\'7\\':\\n            case \\'8\\':\\n            case \\'9\\':\\n                if(state === 7 || state === 8){\\n                    state = 8;\\n                } else if(state === 0 || state === 1 || state === 2) {\\n                   state = 2;\\n                } else if(state === 3) {\\n                    state = 3;\\n               } else if(state === 4 || state === 5 || state === 6){\\n                   state = 5;\\n               } else {\\n                   return false;\\n               }\\n                break;\\n            case\\'.\\':\\n                if(state === 0 || state === 1){\\n                    state = 7\\n                } else if(state === 2){\\n                  state = 3;\\n                  } else {\\n                      return false;\\n                  }\\n                break;\\n            case \\'e\\':\\n                if(state === 2 || state === 3 || state === 8){\\n                    state = 4;\\n                } else {\\n                    return false;\\n                }\\n                break;\\n            default: \\n                return false;\\n        }\\n    }\\n    if([2,3,5,8].includes(state)){\\n        return true;\\n    }\\n    return false;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 406411,
                "title": "python3-simple-solution-float-type-complex-regex",
                "content": "Apparently this problem was much simpler than what I thought: \\n\\n```\\nclass Solution:\\n    def isNumber(self, s):\\n        try:\\n            float(str(s).strip())\\n            return True\\n        except ValueError:\\n            return False\\n\\n\\n```\\n\\nAlternative regex solutions:\\n\\n### By [MarcoChang](https://leetcode.com/marcochang/)\\n\\n```\\nclass Solution:\\n    def isNumber(self, s):\\n        pattern = r\"^\\\\s*([+-]?(\\\\d*\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)([Ee][+-]?\\\\d+)?)\\\\s*$\"\\n        return re.match(pattern, s)\\n```\\n\\n-----------\\n\\n```\\nclass Solution:\\n    def isNumber(self, s):\\n        expression = r\"^[+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)[Ee][+-]?\\\\d+$|^[+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)$|^[+-]?\\\\d+$\"\\n\\n        return True if not re.match(expression, str(s).strip()) == None else False\\n```\\n\\n![image](https://assets.leetcode.com/users/i-i/image_1582225496.png)\\n\\n\\n### RegEx Circuit\\n\\n[jex.im](https://jex.im/regulex/#!flags=&re=%5E(a%7Cb)*%3F%24) visualizes regular expressions: \\n\\n\\n\\n\\n---------\\n\\nIf you wish to simplify/update/explore the expression, it\\'s been explained on the top right panel of [regex101.com](https://regex101.com/r/yYUfgC/1/). You can watch the matching steps or modify them in [this debugger link](https://regex101.com/r/yYUfgC/1/debugger), if you\\'d be interested. The debugger demonstrates that how [a RegEx engine](https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines) might step by step consume some sample input strings and would perform the matching process. \\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s):\\n        try:\\n            float(str(s).strip())\\n            return True\\n        except ValueError:\\n            return False\\n\\n\\n```\n```\\nclass Solution:\\n    def isNumber(self, s):\\n        pattern = r\"^\\\\s*([+-]?(\\\\d*\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)([Ee][+-]?\\\\d+)?)\\\\s*$\"\\n        return re.match(pattern, s)\\n```\n```\\nclass Solution:\\n    def isNumber(self, s):\\n        expression = r\"^[+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)[Ee][+-]?\\\\d+$|^[+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)$|^[+-]?\\\\d+$\"\\n\\n        return True if not re.match(expression, str(s).strip()) == None else False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 397851,
                "title": "rust-1-liner",
                "content": "```\\nimpl Solution {\\n    pub fn is_number(s: String) -> bool {\\n        s.trim().parse::<f64>().is_ok()\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn is_number(s: String) -> bool {\\n        s.trim().parse::<f64>().is_ok()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 201555,
                "title": "a-very-trivial-solution-with-python-d",
                "content": "```\\nclass Solution:\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n        try:\\n            a = float(s)\\n            return True\\n        except:\\n            return False\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n        try:\\n            a = float(s)\\n            return True\\n        except:\\n            return False\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 157317,
                "title": "c-4ms-in-9-lines-regex",
                "content": "\\n```\\n#include <string>\\n#include <regex>\\n\\nclass Solution {\\nprivate:\\n    static std::regex const number_pattern;\\npublic:\\n    bool isNumber(std::string const& s) {\\n        return std::regex_match(s, number_pattern);\\n    }\\n};\\n\\n// non-(const integral) static member variables must be initialized out-of-line.\\nstd::regex const Solution::number_pattern{R\"(^\\\\s*[-+]?(?:\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d*\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\\\\s*$)\"};\\n```",
                "solutionTags": [],
                "code": "```\\n#include <string>\\n#include <regex>\\n\\nclass Solution {\\nprivate:\\n    static std::regex const number_pattern;\\npublic:\\n    bool isNumber(std::string const& s) {\\n        return std::regex_match(s, number_pattern);\\n    }\\n};\\n\\n// non-(const integral) static member variables must be initialized out-of-line.\\nstd::regex const Solution::number_pattern{R\"(^\\\\s*[-+]?(?:\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d*\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\\\\s*$)\"};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 138975,
                "title": "1-line-regular-expression-solution",
                "content": "``` Python\\nimport re\\n\\nclass Solution:\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        return bool(re.match(r\\'^\\\\s*[-+]?(\\\\.\\\\d+|\\\\d+\\\\.?\\\\d*)(e[+-]?\\\\d+)?\\\\s*$\\', s))\\n```",
                "solutionTags": [],
                "code": "``` Python\\nimport re\\n\\nclass Solution:\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        return bool(re.match(r\\'^\\\\s*[-+]?(\\\\.\\\\d+|\\\\d+\\\\.?\\\\d*)(e[+-]?\\\\d+)?\\\\s*$\\', s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23957,
                "title": "python-84ms-solution-using-re",
                "content": "    import re\\n    class Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        if re.match('^\\\\s*(\\\\+|-)?(\\\\d+|\\\\d*\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+\\\\.?\\\\d*e[\\\\+|-]?\\\\d+|\\\\d*\\\\.?\\\\d+e[\\\\+|-]?\\\\d+)\\\\s*$',s):\\n            return True\\n        else:\\n            return False",
                "solutionTags": [],
                "code": "    import re\\n    class Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        if re.match('^\\\\s*(\\\\+|-)?(\\\\d+|\\\\d*\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+\\\\.?\\\\d*e[\\\\+|-]?\\\\d+|\\\\d*\\\\.?\\\\d+e[\\\\+|-]?\\\\d+)\\\\s*$',s):\\n            return True\\n        else:\\n            return False",
                "codeTag": "Java"
            },
            {
                "id": 23955,
                "title": "very-simple-c-sol-not-a-dfa-sol",
                "content": "The idea is to **TRY** go through the string and see if we can finally arrive at the end of string or not. In the middle we return false if two cases happen:\\n\\n    1. there is no number at all\\n    2. after e/E there is no integer\\n\\nI grouped codes into small functions and give them recognizable names so that it is easier to see the pattern:\\n\\n    class Solution {\\n    public:\\n        bool isNumber(const char *s) {\\n            skipSpace(s);\\n            skipSign(s);\\n            if(!hasNumber(s)) return false; // there's no number at all so return false\\n            \\n            if(*s!='\\\\0' && (*s=='e' || *s=='E')) {\\n                s++;\\n                skipSign(s);\\n                if(!hasInteger(s)) return false; // after e/E no integer then return false\\n            }\\n            skipSpace(s);\\n            return *s=='\\\\0';\\n        }\\n    private:\\n        void skipSpace(const char*& s) {\\n            while(*s!='\\\\0' && *s==' ') s++;\\n        }\\n        void skipSign(const char*& s) {\\n            if(*s!='\\\\0' && (*s=='+' || *s=='-')) s++;\\n        }\\n        // returns true if has a number like 7, 8., 9.1, 0.8, ...\\n        bool hasNumber(const char*& s) { \\n            int len = 0;\\n            while(*s!='\\\\0' && isdigit(*s)) {s++; len++;}\\n            if(*s!='\\\\0' && *s=='.') s++;\\n            while(*s!='\\\\0' && isdigit(*s)) {s++; len++;}\\n            return len!=0;\\n        }\\n        // returns true if has an integer\\n        bool hasInteger(const char*& s) {\\n            int len = 0;\\n            while(*s!='\\\\0' && isdigit(*s)) {s++; len++;}\\n            return len!=0;\\n        }\\n        \\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        bool isNumber(const char *s) {\\n            skipSpace(s);\\n            skipSign(s);\\n            if(!hasNumber(s)) return false; // there's no number at all so return false\\n            \\n            if(*s!='\\\\0' && (*s=='e' || *s=='E')) {\\n                s++;\\n                skipSign(s);\\n                if(!hasInteger(s)) return false; // after e/E no integer then return false\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4050542,
                "title": "valid-number-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        return is_valid_number(s);\\n    }\\n\\nbool is_valid_number(const std::string& s) {\\n    if (s.empty()) return false;\\n\\n    size_t i = 0;\\n    if (s[i] == \\'+\\' || s[i] == \\'-\\') i++;\\n\\n    bool has_integer_part = false;\\n    while (i < s.size() && isdigit(s[i])) {\\n        has_integer_part = true;\\n        i++;\\n    }\\n\\n    bool has_decimal_part = false;\\n    if (i < s.size() && s[i] == \\'.\\') {\\n        i++;\\n        while (i < s.size() && isdigit(s[i])) {\\n            has_decimal_part = true;\\n            i++;\\n        }\\n    }\\n\\n    if (i < s.size() && (s[i] == \\'e\\' || s[i] == \\'E\\')) {\\n        i++;\\n\\n        if (i < s.size() && (s[i] == \\'+\\' || s[i] == \\'-\\')) i++;\\n\\n        if (i == s.size() || !isdigit(s[i])) {\\n            return false;\\n        }\\n        while (i < s.size() && isdigit(s[i])) {\\n            i++;\\n        }\\n    }\\n    return i == s.size() && (has_integer_part || has_decimal_part);\\n}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        return is_valid_number(s);\\n    }\\n\\nbool is_valid_number(const std::string& s) {\\n    if (s.empty()) return false;\\n\\n    size_t i = 0;\\n    if (s[i] == \\'+\\' || s[i] == \\'-\\') i++;\\n\\n    bool has_integer_part = false;\\n    while (i < s.size() && isdigit(s[i])) {\\n        has_integer_part = true;\\n        i++;\\n    }\\n\\n    bool has_decimal_part = false;\\n    if (i < s.size() && s[i] == \\'.\\') {\\n        i++;\\n        while (i < s.size() && isdigit(s[i])) {\\n            has_decimal_part = true;\\n            i++;\\n        }\\n    }\\n\\n    if (i < s.size() && (s[i] == \\'e\\' || s[i] == \\'E\\')) {\\n        i++;\\n\\n        if (i < s.size() && (s[i] == \\'+\\' || s[i] == \\'-\\')) i++;\\n\\n        if (i == s.size() || !isdigit(s[i])) {\\n            return false;\\n        }\\n        while (i < s.size() && isdigit(s[i])) {\\n            i++;\\n        }\\n    }\\n    return i == s.size() && (has_integer_part || has_decimal_part);\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3772891,
                "title": "simplest-bigdecimal-solution-i-ve-seen-so-far",
                "content": "# Intuition\\nJust cast to Big Decimal and close your eyes on some of the exception messages if occur, because the number after casting them still remains valid.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nimport java.math.BigDecimal;\\n\\nclass Solution {\\n    public static boolean isNumber(String s) {\\n        try {\\n            BigDecimal bigDecimal = new BigDecimal(s);\\n            return true;\\n        } catch (NumberFormatException e) {\\n            if (e.getMessage() != null && (e.getMessage().equals(\"Too many nonzero exponent digits.\") || e.getMessage().equals(\"Exponent overflow.\"))) return true;\\n            return false;\\n        } catch (Exception e) {\\n            return false;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.math.BigDecimal;\\n\\nclass Solution {\\n    public static boolean isNumber(String s) {\\n        try {\\n            BigDecimal bigDecimal = new BigDecimal(s);\\n            return true;\\n        } catch (NumberFormatException e) {\\n            if (e.getMessage() != null && (e.getMessage().equals(\"Too many nonzero exponent digits.\") || e.getMessage().equals(\"Exponent overflow.\"))) return true;\\n            return false;\\n        } catch (Exception e) {\\n            return false;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3234484,
                "title": "python3-dfa",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUse DFA\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n![IMG_2156.jpg](https://assets.leetcode.com/users/images/22b029cb-3fd6-4bea-bff4-65b4bfffaa16_1677453763.23934.jpeg)\\n\\n# Code\\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        currState = 0\\n        dfa = [\\n            { \\'digit\\': 1, \\'dot\\': 5, \\'sign\\': 6 },\\n            { \\'digit\\': 1, \\'dot\\': 2, \\'eE\\': 3 },\\n            { \\'digit\\': 2, \\'eE\\': 3 },\\n            { \\'sign\\': 7, \\'digit\\': 8 },\\n            { \\'digit\\': 4, \\'eE\\': 3 },\\n            { \\'digit\\': 4 },\\n            { \\'dot\\': 5, \\'digit\\': 1 },\\n            { \\'digit\\': 8 },\\n            { \\'digit\\': 8 }\\n        ]\\n\\n        for c in s:\\n            # print(c)\\n            if c <= \"9\" and c >= \"0\":\\n                c = \\'digit\\'\\n            elif c == \"e\" or c == \"E\":\\n                c = \\'eE\\'\\n            elif c == \".\":\\n                c = \\'dot\\'\\n            elif c == \"-\" or c == \"+\":\\n                c = \\'sign\\'\\n            # print(c)\\n            # print(currState)\\n            if c in dfa[currState]:\\n                # print(currState)\\n                currState = dfa[currState][c]\\n                # print(currState)\\n            else:\\n                return False\\n\\n        # print(currState)\\n        return currState in (1,2,4,8)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        currState = 0\\n        dfa = [\\n            { \\'digit\\': 1, \\'dot\\': 5, \\'sign\\': 6 },\\n            { \\'digit\\': 1, \\'dot\\': 2, \\'eE\\': 3 },\\n            { \\'digit\\': 2, \\'eE\\': 3 },\\n            { \\'sign\\': 7, \\'digit\\': 8 },\\n            { \\'digit\\': 4, \\'eE\\': 3 },\\n            { \\'digit\\': 4 },\\n            { \\'dot\\': 5, \\'digit\\': 1 },\\n            { \\'digit\\': 8 },\\n            { \\'digit\\': 8 }\\n        ]\\n\\n        for c in s:\\n            # print(c)\\n            if c <= \"9\" and c >= \"0\":\\n                c = \\'digit\\'\\n            elif c == \"e\" or c == \"E\":\\n                c = \\'eE\\'\\n            elif c == \".\":\\n                c = \\'dot\\'\\n            elif c == \"-\" or c == \"+\":\\n                c = \\'sign\\'\\n            # print(c)\\n            # print(currState)\\n            if c in dfa[currState]:\\n                # print(currState)\\n                currState = dfa[currState][c]\\n                # print(currState)\\n            else:\\n                return False\\n\\n        # print(currState)\\n        return currState in (1,2,4,8)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3180729,
                "title": "65-valid-number",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThis solution uses a simple approach to keep track of different components of the number and validate each one according to the rules mentioned in the problem statement. The time complexity of this solution is O(n) where n is the length of the input string.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        s = s.strip()\\n        if not s: return False\\n        \\n        dot_seen = False\\n        e_seen = False\\n        num_seen = False\\n        num_after_e = False\\n        \\n        for i, char in enumerate(s):\\n            if char == \\'+\\' or char == \\'-\\':\\n                if i > 0 and s[i - 1] != \\'e\\' and s[i - 1] != \\'E\\':\\n                    return False\\n                if i == len(s) - 1:\\n                    return False\\n            elif char.isdigit():\\n                num_seen = True\\n                num_after_e = True\\n            elif char == \\'.\\':\\n                if dot_seen or e_seen:\\n                    return False\\n                dot_seen = True\\n                if i == len(s) - 1:\\n                    return num_seen\\n            elif char == \\'e\\' or char == \\'E\\':\\n                if e_seen or not num_seen:\\n                    return False\\n                e_seen = True\\n                num_after_e = False\\n                if i == len(s) - 1:\\n                    return False\\n            else:\\n                return False\\n        return num_seen and num_after_e\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        s = s.strip()\\n        if not s: return False\\n        \\n        dot_seen = False\\n        e_seen = False\\n        num_seen = False\\n        num_after_e = False\\n        \\n        for i, char in enumerate(s):\\n            if char == \\'+\\' or char == \\'-\\':\\n                if i > 0 and s[i - 1] != \\'e\\' and s[i - 1] != \\'E\\':\\n                    return False\\n                if i == len(s) - 1:\\n                    return False\\n            elif char.isdigit():\\n                num_seen = True\\n                num_after_e = True\\n            elif char == \\'.\\':\\n                if dot_seen or e_seen:\\n                    return False\\n                dot_seen = True\\n                if i == len(s) - 1:\\n                    return num_seen\\n            elif char == \\'e\\' or char == \\'E\\':\\n                if e_seen or not num_seen:\\n                    return False\\n                e_seen = True\\n                num_after_e = False\\n                if i == len(s) - 1:\\n                    return False\\n            else:\\n                return False\\n        return num_seen and num_after_e\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2963705,
                "title": "python3-very-easy-solution",
                "content": "\\n```\\nclass Solution:\\n    def isNumber(self,s:str)->bool:\\n        try:\\n            float(s)\\n        except:\\n            return False\\n\\n        return \"inf\" not in s.lower()               \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isNumber(self,s:str)->bool:\\n        try:\\n            float(s)\\n        except:\\n            return False\\n\\n        return \"inf\" not in s.lower()               \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2384704,
                "title": "python-1-liner-with-regex",
                "content": "```\\nimport re\\n\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        match = re.search(\"^[+-]?((\\\\d+([.]\\\\d*)?)|[.]\\\\d+)([eE][-+]?\\\\d+)?$\",s)\\n        return True if match else False\\n```",
                "solutionTags": [],
                "code": "```\\nimport re\\n\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        match = re.search(\"^[+-]?((\\\\d+([.]\\\\d*)?)|[.]\\\\d+)([eE][-+]?\\\\d+)?$\",s)\\n        return True if match else False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2236745,
                "title": "easy-c-solution-o-n-tc",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {        \\n        bool sign=1,dot=0,charE=0,digit=0;\\n        \\n        for(char c:s){\\n            if((c==\\'-\\' || c==\\'+\\') and sign){\\n                sign=false;\\n                continue;\\n            }\\n            \\n            sign=false;\\n            \\n            if(c == \\'.\\'){\\n                if(!charE and !dot){\\n                    dot=true;\\n                }\\n                else return false;\\n                continue;\\n            }\\n            \\n            if(c==\\'e\\' || c==\\'E\\'){\\n                if(!charE and digit)\\n                    charE=true;\\n                else return false;\\n                sign=true; // for 4e+6\\n                digit=false; // for 0e\\n                continue;\\n            }\\n            \\n            if(isdigit(c)){\\n                digit=true;\\n                continue;\\n            }\\n            \\n            return false;\\n        }\\n        return digit;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {        \\n        bool sign=1,dot=0,charE=0,digit=0;\\n        \\n        for(char c:s){\\n            if((c==\\'-\\' || c==\\'+\\') and sign){\\n                sign=false;\\n                continue;\\n            }\\n            \\n            sign=false;\\n            \\n            if(c == \\'.\\'){\\n                if(!charE and !dot){\\n                    dot=true;\\n                }\\n                else return false;\\n                continue;\\n            }\\n            \\n            if(c==\\'e\\' || c==\\'E\\'){\\n                if(!charE and digit)\\n                    charE=true;\\n                else return false;\\n                sign=true; // for 4e+6\\n                digit=false; // for 0e\\n                continue;\\n            }\\n            \\n            if(isdigit(c)){\\n                digit=true;\\n                continue;\\n            }\\n            \\n            return false;\\n        }\\n        return digit;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1644375,
                "title": "java-solution-using-state-machine-or-dfa-o-n",
                "content": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        HashMap<Integer, HashMap<String, Integer>> stateMachine = buildStateMachine();\\n        \\n        int state = 0;\\n        for(char ch : s.toCharArray()) {\\n            String op = charToOp(ch);\\n            \\n            if (!stateMachine.get(state).containsKey(op)) {\\n                return false;\\n            }\\n            \\n            state = stateMachine.get(state).get(op);\\n        }\\n        \\n        return state == 1 || state == 4 || state == 7;\\n    }\\n    \\n    private String charToOp(char ch) {\\n        switch(ch) {\\n            case \\'.\\':\\n                return \"decimal\";\\n            case \\'+\\':\\n            case \\'-\\':\\n                return \"sign\";\\n            case \\'e\\':\\n            case \\'E\\':\\n                return \"e/E\";\\n            default:\\n                if (\\'0\\' <= ch && ch <= \\'9\\') {\\n                    return \"digit\";\\n                } else {\\n                    return \"\";\\n                }\\n        }\\n    }\\n    \\n    private HashMap<Integer, HashMap<String, Integer>> buildStateMachine() {\\n        HashMap<Integer, HashMap<String, Integer>> stateMachine = new HashMap<>();\\n        \\n        for(int i = 0; i < 8; i++) {\\n            stateMachine.put(i, new HashMap<String, Integer>());\\n        }\\n        \\n        stateMachine.get(0).put(\"digit\", 1);\\n        stateMachine.get(0).put(\"sign\", 2);\\n        stateMachine.get(0).put(\"decimal\", 3);\\n        \\n        stateMachine.get(1).put(\"digit\", 1);\\n        stateMachine.get(1).put(\"decimal\", 4);\\n        stateMachine.get(1).put(\"e/E\", 5);\\n        \\n        stateMachine.get(2).put(\"digit\", 1);\\n        stateMachine.get(2).put(\"decimal\", 3);\\n        \\n        stateMachine.get(3).put(\"digit\", 4);\\n        \\n        stateMachine.get(4).put(\"digit\", 4);\\n        stateMachine.get(4).put(\"e/E\", 5);\\n        \\n        stateMachine.get(5).put(\"sign\", 6);\\n        stateMachine.get(5).put(\"digit\", 7);\\n        \\n        stateMachine.get(6).put(\"digit\", 7);\\n        \\n        stateMachine.get(7).put(\"digit\", 7);\\n        \\n        return stateMachine;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        HashMap<Integer, HashMap<String, Integer>> stateMachine = buildStateMachine();\\n        \\n        int state = 0;\\n        for(char ch : s.toCharArray()) {\\n            String op = charToOp(ch);\\n            \\n            if (!stateMachine.get(state).containsKey(op)) {\\n                return false;\\n            }\\n            \\n            state = stateMachine.get(state).get(op);\\n        }\\n        \\n        return state == 1 || state == 4 || state == 7;\\n    }\\n    \\n    private String charToOp(char ch) {\\n        switch(ch) {\\n            case \\'.\\':\\n                return \"decimal\";\\n            case \\'+\\':\\n            case \\'-\\':\\n                return \"sign\";\\n            case \\'e\\':\\n            case \\'E\\':\\n                return \"e/E\";\\n            default:\\n                if (\\'0\\' <= ch && ch <= \\'9\\') {\\n                    return \"digit\";\\n                } else {\\n                    return \"\";\\n                }\\n        }\\n    }\\n    \\n    private HashMap<Integer, HashMap<String, Integer>> buildStateMachine() {\\n        HashMap<Integer, HashMap<String, Integer>> stateMachine = new HashMap<>();\\n        \\n        for(int i = 0; i < 8; i++) {\\n            stateMachine.put(i, new HashMap<String, Integer>());\\n        }\\n        \\n        stateMachine.get(0).put(\"digit\", 1);\\n        stateMachine.get(0).put(\"sign\", 2);\\n        stateMachine.get(0).put(\"decimal\", 3);\\n        \\n        stateMachine.get(1).put(\"digit\", 1);\\n        stateMachine.get(1).put(\"decimal\", 4);\\n        stateMachine.get(1).put(\"e/E\", 5);\\n        \\n        stateMachine.get(2).put(\"digit\", 1);\\n        stateMachine.get(2).put(\"decimal\", 3);\\n        \\n        stateMachine.get(3).put(\"digit\", 4);\\n        \\n        stateMachine.get(4).put(\"digit\", 4);\\n        stateMachine.get(4).put(\"e/E\", 5);\\n        \\n        stateMachine.get(5).put(\"sign\", 6);\\n        stateMachine.get(5).put(\"digit\", 7);\\n        \\n        stateMachine.get(6).put(\"digit\", 7);\\n        \\n        stateMachine.get(7).put(\"digit\", 7);\\n        \\n        return stateMachine;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1580926,
                "title": "java-explained-well-special-cases-of-e-simple-if-else-statements",
                "content": "// TC : O(N)\\n// SC : O(1)\\n\\n// Two special rules to handle \\'e\\' in a valid num\\n// 1. \\'e\\' cannot come before any digit has come\\n// 2. \\'e\\' cannot come before a dot\\n\\n```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        s = s.toLowerCase().trim();\\n        boolean dotSeen = false; // to make sure that dot has been seen or not\\n        boolean eSeen = false; // to make sure if \\'e\\' has been seen or not\\n        boolean isDigit = false; // once you encounter \\'e\\' you have to have another digit after it otherwise not valid number\\n        \\n        for(int i = 0; i < s.length(); i++) {\\n            if(s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\'){\\n                isDigit = true; \\n            } else if(s.charAt(i) == \\'.\\') {\\n                if(eSeen || dotSeen) return false; // a dot cannot occur after \\'e\\' in valid num\\n                dotSeen = true;\\n            } else if(s.charAt(i) == \\'e\\') {\\n                if(eSeen || !isDigit) return false; // if \\'e\\' is in start, that is not a valid num\\n                eSeen = true;\\n                isDigit = false;\\n            } else if(s.charAt(i) == \\'+\\' || s.charAt(i) == \\'-\\') {\\n                if(i != 0 && s.charAt(i - 1) != \\'e\\') return false;\\n            } else return false;\\n        }\\n        \\n        return isDigit;\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        s = s.toLowerCase().trim();\\n        boolean dotSeen = false; // to make sure that dot has been seen or not\\n        boolean eSeen = false; // to make sure if \\'e\\' has been seen or not\\n        boolean isDigit = false; // once you encounter \\'e\\' you have to have another digit after it otherwise not valid number\\n        \\n        for(int i = 0; i < s.length(); i++) {\\n            if(s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\'){\\n                isDigit = true; \\n            } else if(s.charAt(i) == \\'.\\') {\\n                if(eSeen || dotSeen) return false; // a dot cannot occur after \\'e\\' in valid num\\n                dotSeen = true;\\n            } else if(s.charAt(i) == \\'e\\') {\\n                if(eSeen || !isDigit) return false; // if \\'e\\' is in start, that is not a valid num\\n                eSeen = true;\\n                isDigit = false;\\n            } else if(s.charAt(i) == \\'+\\' || s.charAt(i) == \\'-\\') {\\n                if(i != 0 && s.charAt(i - 1) != \\'e\\') return false;\\n            } else return false;\\n        }\\n        \\n        return isDigit;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1508406,
                "title": "consider-all-these-test-cases-and-get-accepted-in-1st-go",
                "content": "These are all possible corner test cases that one might miss while writing the code.\\n\\n```\\n* \"0\"\\n* \"+.1\"\\n* \"+--2\"\\n* \".-\"\\n* \".+2\"\\n* \".e3\"\\n* \"0.1\"\\n* \"+1\"\\n* \"123e\"\\n* \"6+1\"\\n* \"+.\"\\n* \"+.123e4\"\\n* \"123+\"\\n* \"123-\"\\n* \"12.3+\"\\n* \"123.e4-\"\\n* \"2e10\"\\n* \"-90e3\"\\n* \"6e-1\"\\n* \"55.5e93\"\\n* \"abc\"\\n* \"1.a\"\\n* \"1e\"\\n* \"e3\"\\n* \"99e2.5\"\\n* \"--6\"\\n* \"-+3\"\\n* \"95a54e53\"\\n* \"e9\"\\n* \".e3\"\\n* \".12e345\"\\n* \"0\"\\n* \"e\"\\n* \".\"\\n* \".1\"\\n* \"6e6.5\"\\n* \".e123\"\\n* \"123e4.5\"\\n* \"15e3\"\\n* \"3.\"\\n* \"08\"\\n* \"46.e3\"\\n* \"-1.e0\"\\n* \"16e0.5\"\\n* \"959440.94f\"\\n* \"123E+4\"\\n* \"078332E437\"\\n* \"+E3\"\\n* \"+e43\"\\n* \"-e2\"\\n* \"-e.4\"\\n* \"6ee69\"\\n* \"092e359-2\"\\n ```",
                "solutionTags": [],
                "code": "```\\n* \"0\"\\n* \"+.1\"\\n* \"+--2\"\\n* \".-\"\\n* \".+2\"\\n* \".e3\"\\n* \"0.1\"\\n* \"+1\"\\n* \"123e\"\\n* \"6+1\"\\n* \"+.\"\\n* \"+.123e4\"\\n* \"123+\"\\n* \"123-\"\\n* \"12.3+\"\\n* \"123.e4-\"\\n* \"2e10\"\\n* \"-90e3\"\\n* \"6e-1\"\\n* \"55.5e93\"\\n* \"abc\"\\n* \"1.a\"\\n* \"1e\"\\n* \"e3\"\\n* \"99e2.5\"\\n* \"--6\"\\n* \"-+3\"\\n* \"95a54e53\"\\n* \"e9\"\\n* \".e3\"\\n* \".12e345\"\\n* \"0\"\\n* \"e\"\\n* \".\"\\n* \".1\"\\n* \"6e6.5\"\\n* \".e123\"\\n* \"123e4.5\"\\n* \"15e3\"\\n* \"3.\"\\n* \"08\"\\n* \"46.e3\"\\n* \"-1.e0\"\\n* \"16e0.5\"\\n* \"959440.94f\"\\n* \"123E+4\"\\n* \"078332E437\"\\n* \"+E3\"\\n* \"+e43\"\\n* \"-e2\"\\n* \"-e.4\"\\n* \"6ee69\"\\n* \"092e359-2\"\\n ```",
                "codeTag": "Unknown"
            },
            {
                "id": 1441442,
                "title": "java-regex",
                "content": "```\\n    private static final Pattern pattern = Pattern.compile(\"[+-]?(\\\\\\\\d+|\\\\\\\\d*\\\\\\\\.\\\\\\\\d+|\\\\\\\\d+\\\\\\\\.)([eE][+-]?\\\\\\\\d+)?\");\\n    public static boolean isNumber(String s) {\\n        return pattern.matcher(s).matches();\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    private static final Pattern pattern = Pattern.compile(\"[+-]?(\\\\\\\\d+|\\\\\\\\d*\\\\\\\\.\\\\\\\\d+|\\\\\\\\d+\\\\\\\\.)([eE][+-]?\\\\\\\\d+)?\");\\n    public static boolean isNumber(String s) {\\n        return pattern.matcher(s).matches();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1406060,
                "title": "python-solution-simple-rule-based",
                "content": "\\n\\n~~~\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        seen_digit = False\\n        seen_exponent = False\\n        seen_dot = False\\n        \\n        for i, c in enumerate(s):\\n            if c.isdigit():\\n                seen_digit = True\\n            elif c in {\"+\", \"-\"}:\\n                if i > 0 and s[i-1] not in {\"e\", \"E\"}:\\n                    return False\\n            elif c in {\"e\", \"E\"}:\\n                if seen_exponent or not seen_digit:\\n                    return False\\n                seen_exponent = True\\n                seen_digit = False\\n            elif c == \".\":\\n                if seen_dot or seen_exponent:\\n                    return False\\n                seen_dot = True\\n            else:\\n                return False\\n            \\n        return seen_digit\\n~~~",
                "solutionTags": [],
                "code": "class Solution:\\n    def isNumber(self, s: str) -> bool:\\n        seen_digit = False\\n        seen_exponent = False\\n        seen_dot = False\\n        \\n        for i, c in enumerate(s):\\n            if c.isdigit():\\n                seen_digit = True\\n            elif c in {\"+\", \"-\"}",
                "codeTag": "Java"
            },
            {
                "id": 1299347,
                "title": "easy-to-read-python-regex-solution",
                "content": "```\\nimport re\\n\\n\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        decimal_number = r\\'[+-]?(\\\\d+\\\\.|\\\\d*\\\\.\\\\d+)\\'\\n        integer = r\\'[+-]?\\\\d+\\'\\n        trail = rf\\'([eE]{integer})?\\'\\n        valid_number = rf\\'({decimal_number}|{integer}){trail}\\'\\n        return re.fullmatch(valid_number, s)\\n```",
                "solutionTags": [],
                "code": "```\\nimport re\\n\\n\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        decimal_number = r\\'[+-]?(\\\\d+\\\\.|\\\\d*\\\\.\\\\d+)\\'\\n        integer = r\\'[+-]?\\\\d+\\'\\n        trail = rf\\'([eE]{integer})?\\'\\n        valid_number = rf\\'({decimal_number}|{integer}){trail}\\'\\n        return re.fullmatch(valid_number, s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1210848,
                "title": "c-clean-code-min-dfa-using-transition-table",
                "content": "Min-DFA: https://cyberzhg.github.io/toolbox/min_dfa?regex=KChzPygoZCtwKXwocGQrKXwoZCtwZCspKSl8KHM/ZCspKShlKHM/ZCspKT8=\\n\\n``` C\\nchar transitionTable[8][4] = {\\n    {2, 0, 3, 4},\\n    {2, 5, 6, 0},\\n    {6, 0, 0, 0},\\n    {2, 0, 3, 0},\\n    {7, 0, 0, 8},\\n    {6, 5, 0, 0},\\n    {7, 0, 0, 0},\\n    {7, 0, 0 ,0},\\n};\\nenum token {\\n    digit = 0,\\n    exponential = 1,\\n    dot = 2,\\n    sign = 3,\\n};\\n\\nbool isNumber(char * s){\\n    char state = 1;\\n    for (int i = 0; s[i]; i++) {\\n        switch(s[i]) {\\n            case \\'0\\' ... \\'9\\':\\n                if (state = transitionTable[state-1][digit]) continue; else return false;\\n            case \\'e\\':\\n            case \\'E\\':\\n                if (state = transitionTable[state-1][exponential]) continue; return false;\\n            case \\'.\\':\\n                if (state = transitionTable[state-1][dot]) continue; else return false;\\n            case \\'+\\':\\n            case \\'-\\':\\n                if (state = transitionTable[state-1][sign]) continue; else return false;\\n            default:\\n                return false;\\n        }\\n    }\\n    return state == 2 || state == 6 || state == 7;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "``` C\\nchar transitionTable[8][4] = {\\n    {2, 0, 3, 4},\\n    {2, 5, 6, 0},\\n    {6, 0, 0, 0},\\n    {2, 0, 3, 0},\\n    {7, 0, 0, 8},\\n    {6, 5, 0, 0},\\n    {7, 0, 0, 0},\\n    {7, 0, 0 ,0},\\n};\\nenum token {\\n    digit = 0,\\n    exponential = 1,\\n    dot = 2,\\n    sign = 3,\\n};\\n\\nbool isNumber(char * s){\\n    char state = 1;\\n    for (int i = 0; s[i]; i++) {\\n        switch(s[i]) {\\n            case \\'0\\' ... \\'9\\':\\n                if (state = transitionTable[state-1][digit]) continue; else return false;\\n            case \\'e\\':\\n            case \\'E\\':\\n                if (state = transitionTable[state-1][exponential]) continue; return false;\\n            case \\'.\\':\\n                if (state = transitionTable[state-1][dot]) continue; else return false;\\n            case \\'+\\':\\n            case \\'-\\':\\n                if (state = transitionTable[state-1][sign]) continue; else return false;\\n            default:\\n                return false;\\n        }\\n    }\\n    return state == 2 || state == 6 || state == 7;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1210838,
                "title": "c-language-ll-1-parser-using-recursive",
                "content": "# C Language LL(1) Parser Using Recursive\\n## Parse Table\\nTool: https://www.cs.princeton.edu/courses/archive/spring20/cos320/LL1/\\n![image](https://assets.leetcode.com/users/images/243d6cd6-34e7-475c-825a-3840f80597f5_1621119371.2028382.png)\\n\\n## Syntax\\n```\\nNum ::= Sign Coeff Exp\\nCoeff ::= DigitN Deci\\nCoeff ::= . DigitN\\nDeci ::= . Digit\\nDeci ::= \\'\\'\\nSign ::= [+-]\\nSign ::= \\'\\'\\nDigitN ::= [0-9] Digit\\nDigit ::= [0-9] Digit\\nDigit ::= \\'\\'\\nExp ::= [eE] Sign DigitN\\nExp ::= \\'\\'\\n```\\n\\n## Code\\n```C\\nbool Start(char**);\\nbool Num(char**);\\nbool Sign(char**);\\nbool Coeff(char**);\\nbool Deci(char**);\\nbool DigitN(char**);\\nbool Digit(char**);\\nbool Exp(char**);\\n\\nbool Start(char **sp) {\\n    return Num(sp) && (**sp == 0);\\n}\\n\\nbool Num(char **sp) {\\n    // printf(\"Num %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case \\'.\\':\\n        case \\'+\\':\\n        case \\'-\\':\\n        case \\'0\\'...\\'9\\':\\n            return Sign(sp) && Coeff(sp) && Exp(sp);\\n    }\\n    return false;\\n}\\n\\nbool Sign(char **sp) {\\n    // printf(\"Sign %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case \\'.\\':\\n        case \\'0\\'...\\'9\\':\\n            return true;\\n        case \\'+\\':\\n        case \\'-\\':\\n            ++*sp;\\n            return true;\\n    }\\n    return false;\\n}\\n\\nbool Coeff(char **sp) {\\n    // printf(\"Coeff %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case \\'.\\':\\n            ++*sp;\\n            return DigitN(sp);\\n        case \\'0\\'...\\'9\\':\\n            return DigitN(sp) && Deci(sp);\\n    }\\n    return false;\\n}\\n\\nbool Deci(char **sp) {\\n    // printf(\"Deci %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case 0:\\n            return true;\\n        case \\'.\\':\\n            ++*sp;\\n            return Digit(sp);\\n        case \\'e\\':\\n        case \\'E\\':\\n            return true;\\n    }\\n    return false;\\n}\\n\\nbool DigitN(char **sp) {\\n    // printf(\"DigitN %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case \\'0\\'...\\'9\\':\\n            ++*sp;\\n            return Digit(sp);\\n    }\\n    return false;\\n}\\n\\nbool Digit(char **sp) {\\n    // printf(\"Digit %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case 0:\\n        case \\'.\\':\\n        case \\'e\\':\\n        case \\'E\\':\\n            return true;\\n        case \\'0\\'...\\'9\\':\\n            ++*sp;\\n            return Digit(sp);\\n    }\\n    return false;\\n}\\n\\nbool Exp(char **sp) {\\n    // printf(\"Exp %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case 0:\\n            return true;\\n        case \\'e\\':\\n        case \\'E\\':\\n            ++*sp;\\n            return Sign(sp) && DigitN(sp);\\n    }\\n    return false;\\n}\\n\\nbool isNumber(char * s){\\n    return Start(&s);\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nNum ::= Sign Coeff Exp\\nCoeff ::= DigitN Deci\\nCoeff ::= . DigitN\\nDeci ::= . Digit\\nDeci ::= \\'\\'\\nSign ::= [+-]\\nSign ::= \\'\\'\\nDigitN ::= [0-9] Digit\\nDigit ::= [0-9] Digit\\nDigit ::= \\'\\'\\nExp ::= [eE] Sign DigitN\\nExp ::= \\'\\'\\n```\n```C\\nbool Start(char**);\\nbool Num(char**);\\nbool Sign(char**);\\nbool Coeff(char**);\\nbool Deci(char**);\\nbool DigitN(char**);\\nbool Digit(char**);\\nbool Exp(char**);\\n\\nbool Start(char **sp) {\\n    return Num(sp) && (**sp == 0);\\n}\\n\\nbool Num(char **sp) {\\n    // printf(\"Num %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case \\'.\\':\\n        case \\'+\\':\\n        case \\'-\\':\\n        case \\'0\\'...\\'9\\':\\n            return Sign(sp) && Coeff(sp) && Exp(sp);\\n    }\\n    return false;\\n}\\n\\nbool Sign(char **sp) {\\n    // printf(\"Sign %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case \\'.\\':\\n        case \\'0\\'...\\'9\\':\\n            return true;\\n        case \\'+\\':\\n        case \\'-\\':\\n            ++*sp;\\n            return true;\\n    }\\n    return false;\\n}\\n\\nbool Coeff(char **sp) {\\n    // printf(\"Coeff %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case \\'.\\':\\n            ++*sp;\\n            return DigitN(sp);\\n        case \\'0\\'...\\'9\\':\\n            return DigitN(sp) && Deci(sp);\\n    }\\n    return false;\\n}\\n\\nbool Deci(char **sp) {\\n    // printf(\"Deci %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case 0:\\n            return true;\\n        case \\'.\\':\\n            ++*sp;\\n            return Digit(sp);\\n        case \\'e\\':\\n        case \\'E\\':\\n            return true;\\n    }\\n    return false;\\n}\\n\\nbool DigitN(char **sp) {\\n    // printf(\"DigitN %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case \\'0\\'...\\'9\\':\\n            ++*sp;\\n            return Digit(sp);\\n    }\\n    return false;\\n}\\n\\nbool Digit(char **sp) {\\n    // printf(\"Digit %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case 0:\\n        case \\'.\\':\\n        case \\'e\\':\\n        case \\'E\\':\\n            return true;\\n        case \\'0\\'...\\'9\\':\\n            ++*sp;\\n            return Digit(sp);\\n    }\\n    return false;\\n}\\n\\nbool Exp(char **sp) {\\n    // printf(\"Exp %c\\\\n\", **sp);\\n    switch(**sp) {\\n        case 0:\\n            return true;\\n        case \\'e\\':\\n        case \\'E\\':\\n            ++*sp;\\n            return Sign(sp) && DigitN(sp);\\n    }\\n    return false;\\n}\\n\\nbool isNumber(char * s){\\n    return Start(&s);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1210640,
                "title": "python-one-liner-using-regex",
                "content": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        return re.match(\\'^[+-]?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][+-]?\\\\d+)?$\\', s)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        return re.match(\\'^[+-]?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][+-]?\\\\d+)?$\\', s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1209839,
                "title": "rust-solution",
                "content": "```rust\\nimpl Solution {\\n    pub fn is_number(s: String) -> bool {\\n        if let Some(e) = s.chars().position(|c| c == \\'e\\' || c == \\'E\\') {\\n            Self::is_decimal(&s[0..e]) && Self::is_integer(&s[e + 1..])\\n        } else {\\n            Self::is_decimal(&s)\\n        }\\n    }\\n    fn is_decimal(s: &str) -> bool {\\n        let (mut num, mut dot) = (false, false);\\n        for (i, c) in s.chars().enumerate() {\\n            match c {\\n                \\'0\\'..=\\'9\\' => num = true,\\n                \\'+\\' | \\'-\\' if i == 0 => {}\\n                \\'.\\' if !dot => dot = true,\\n                _ => return false,\\n            }\\n        }\\n        num\\n    }\\n    fn is_integer(s: &str) -> bool {\\n        let mut num = false;\\n        for (i, c) in s.chars().enumerate() {\\n            match c {\\n                \\'0\\'..=\\'9\\' => num = true,\\n                \\'+\\' | \\'-\\' if i == 0 => {}\\n                _ => return false,\\n            }\\n        }\\n        num\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn is_number(s: String) -> bool {\\n        if let Some(e) = s.chars().position(|c| c == \\'e\\' || c == \\'E\\') {\\n            Self::is_decimal(&s[0..e]) && Self::is_integer(&s[e + 1..])\\n        } else {\\n            Self::is_decimal(&s)\\n        }\\n    }\\n    fn is_decimal(s: &str) -> bool {\\n        let (mut num, mut dot) = (false, false);\\n        for (i, c) in s.chars().enumerate() {\\n            match c {\\n                \\'0\\'..=\\'9\\' => num = true,\\n                \\'+\\' | \\'-\\' if i == 0 => {}\\n                \\'.\\' if !dot => dot = true,\\n                _ => return false,\\n            }\\n        }\\n        num\\n    }\\n    fn is_integer(s: &str) -> bool {\\n        let mut num = false;\\n        for (i, c) in s.chars().enumerate() {\\n            match c {\\n                \\'0\\'..=\\'9\\' => num = true,\\n                \\'+\\' | \\'-\\' if i == 0 => {}\\n                _ => return false,\\n            }\\n        }\\n        num\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1186641,
                "title": "c-state-machine",
                "content": "My C# implementation inspired by this post:  https://leetcode.com/problems/valid-number/discuss/1149704/State-Machine-Simple-to-understand\\n\\n```\\npublic class Solution \\n{    \\n    private class State\\n    {\\n        public bool IsValidEndState { get; set; }\\n\\n        public Func<char, State> NextState { get; set; }\\n\\n        public static bool IsSign(char c)\\n        {\\n            return c == \\'+\\' || c == \\'-\\';\\n        }\\n\\n        public static bool IsExp(char c)\\n        {\\n            return c == \\'e\\' || c == \\'E\\';\\n        }\\n\\n        public static bool IsDot(char c)\\n        {\\n            return c == \\'.\\';\\n        }\\n\\n        public static bool IsDigit(char c)\\n        {\\n            return Char.IsDigit(c);\\n        }\\n    }\\n    \\n    private State Init;\\n    private State Decimal;\\n    private State Integer;\\n    private State OnlyInts;\\n    private State Dot;\\n    private State Sign;\\n    private State Exp;\\n    private State DecimalSign;\\n    private State Invalid;\\n    \\n    public Solution()\\n    {\\n        Init = new State {\\n            NextState = \\n                c =>\\n                {\\n                    if (State.IsDigit(c)) return Integer;\\n                    if (State.IsSign(c)) return Sign;\\n                    if (State.IsDot(c)) return Dot;\\n                    return Invalid;\\n                },\\n            IsValidEndState = false\\n        };\\n        \\n        Sign = new State {\\n            NextState = \\n                c =>\\n                {\\n                    if (State.IsDigit(c)) return Integer;\\n                    if (State.IsDot(c)) return Dot;\\n                    return Invalid;\\n                },\\n            IsValidEndState = false\\n        };\\n        \\n        DecimalSign = new State {\\n            NextState = \\n                c => State.IsDigit(c) ?  OnlyInts : Invalid,\\n            IsValidEndState = false\\n        };\\n        \\n        Dot = new State {\\n            NextState = \\n                c => State.IsDigit(c) ? Decimal : Invalid,\\n            IsValidEndState = false\\n        };\\n        \\n        Integer = new State {\\n            NextState = \\n                c =>\\n                {\\n                    if (State.IsDigit(c)) return Integer;\\n                    if (State.IsExp(c)) return Exp;\\n                    if (State.IsDot(c)) return Decimal;\\n                    return Invalid;\\n                },\\n            IsValidEndState = true\\n        };\\n        \\n        Decimal = new State {\\n            NextState = \\n                c =>\\n                {\\n                    if (State.IsDigit(c)) return Decimal;\\n                    if (State.IsExp(c)) return Exp;\\n                    return Invalid;\\n                },\\n            IsValidEndState = true\\n        };\\n        \\n        Exp = new State {\\n            NextState = \\n                c =>\\n                {\\n                    if (State.IsDigit(c)) return OnlyInts;\\n                    if (State.IsSign(c)) return DecimalSign;\\n                    return Invalid;\\n                },\\n            IsValidEndState = false\\n        };\\n        \\n        OnlyInts = new State {\\n            NextState = \\n                c => State.IsDigit(c) ? OnlyInts : Invalid,\\n            IsValidEndState = true\\n        };\\n        \\n        Invalid = new State();      \\n    }\\n    \\n    public bool IsNumber(string s) {\\n        State state = Init;\\n        foreach (char c in s)\\n        {\\n            state = state.NextState(c);\\n            if (state.Equals(Invalid)) return false;\\n        }\\n        return state.IsValidEndState;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution \\n{    \\n    private class State\\n    {\\n        public bool IsValidEndState { get; set; }\\n\\n        public Func<char, State> NextState { get; set; }\\n\\n        public static bool IsSign(char c)\\n        {\\n            return c == \\'+\\' || c == \\'-\\';\\n        }\\n\\n        public static bool IsExp(char c)\\n        {\\n            return c == \\'e\\' || c == \\'E\\';\\n        }\\n\\n        public static bool IsDot(char c)\\n        {\\n            return c == \\'.\\';\\n        }\\n\\n        public static bool IsDigit(char c)\\n        {\\n            return Char.IsDigit(c);\\n        }\\n    }\\n    \\n    private State Init;\\n    private State Decimal;\\n    private State Integer;\\n    private State OnlyInts;\\n    private State Dot;\\n    private State Sign;\\n    private State Exp;\\n    private State DecimalSign;\\n    private State Invalid;\\n    \\n    public Solution()\\n    {\\n        Init = new State {\\n            NextState = \\n                c =>\\n                {\\n                    if (State.IsDigit(c)) return Integer;\\n                    if (State.IsSign(c)) return Sign;\\n                    if (State.IsDot(c)) return Dot;\\n                    return Invalid;\\n                },\\n            IsValidEndState = false\\n        };\\n        \\n        Sign = new State {\\n            NextState = \\n                c =>\\n                {\\n                    if (State.IsDigit(c)) return Integer;\\n                    if (State.IsDot(c)) return Dot;\\n                    return Invalid;\\n                },\\n            IsValidEndState = false\\n        };\\n        \\n        DecimalSign = new State {\\n            NextState = \\n                c => State.IsDigit(c) ?  OnlyInts : Invalid,\\n            IsValidEndState = false\\n        };\\n        \\n        Dot = new State {\\n            NextState = \\n                c => State.IsDigit(c) ? Decimal : Invalid,\\n            IsValidEndState = false\\n        };\\n        \\n        Integer = new State {\\n            NextState = \\n                c =>\\n                {\\n                    if (State.IsDigit(c)) return Integer;\\n                    if (State.IsExp(c)) return Exp;\\n                    if (State.IsDot(c)) return Decimal;\\n                    return Invalid;\\n                },\\n            IsValidEndState = true\\n        };\\n        \\n        Decimal = new State {\\n            NextState = \\n                c =>\\n                {\\n                    if (State.IsDigit(c)) return Decimal;\\n                    if (State.IsExp(c)) return Exp;\\n                    return Invalid;\\n                },\\n            IsValidEndState = true\\n        };\\n        \\n        Exp = new State {\\n            NextState = \\n                c =>\\n                {\\n                    if (State.IsDigit(c)) return OnlyInts;\\n                    if (State.IsSign(c)) return DecimalSign;\\n                    return Invalid;\\n                },\\n            IsValidEndState = false\\n        };\\n        \\n        OnlyInts = new State {\\n            NextState = \\n                c => State.IsDigit(c) ? OnlyInts : Invalid,\\n            IsValidEndState = true\\n        };\\n        \\n        Invalid = new State();      \\n    }\\n    \\n    public bool IsNumber(string s) {\\n        State state = Init;\\n        foreach (char c in s)\\n        {\\n            state = state.NextState(c);\\n            if (state.Equals(Invalid)) return false;\\n        }\\n        return state.IsValidEndState;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1149704,
                "title": "state-machine-simple-to-understand",
                "content": "There are 7 valid states and 1 valid state. Each state has a next function to advance to the next state base on the current character. At each state, if we get an unexpected character, we should move the State.INVALID.\\nThe code is pretty self explanatory.\\nOnly think need to take care of is after looping through all the characters in the input. We have to make sure that the current state is not at an invalid ending state. Invalid ending states are INIT, SIGN, DOT, and EXPONENT which are corresponding to ending with \"empty\", \"+/-\", \".\", \"e/E\".\\nMay not be the most optimized code, but easy to read and understand.\\n```\\nclass Solution {\\n    public enum State {\\n        INIT {\\n            @Override\\n            public State next(char c) {\\n                if (\\'0\\' <= c && c <= \\'9\\') return INTEGER;\\n                if (c == \\'+\\' || c == \\'-\\') return SIGN;\\n                if (c == \\'.\\') return DOT;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return false;\\n            }\\n        },\\n        SIGN {\\n            @Override\\n            public State next(char c) {\\n                if (\\'0\\' <= c && c <= \\'9\\') return INTEGER;\\n                if (c == \\'.\\') return DOT;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return false;\\n            }\\n        },\\n        DOT {\\n            @Override\\n            public State next(char c) {\\n                if (\\'0\\' <= c && c <= \\'9\\') return DECIMAL;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return false;\\n            }\\n        },\\n        INTEGER {\\n            @Override\\n            public State next(char c) {\\n                if (\\'0\\' <= c && c <= \\'9\\') return INTEGER;\\n                if (c == \\'.\\') return DECIMAL;\\n                if (c == \\'e\\' || c == \\'E\\') return EXPONENT;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return true;\\n            }\\n        },\\n        DECIMAL {\\n            @Override\\n            public State next(char c) {\\n                if (\\'0\\' <= c && c <= \\'9\\') return DECIMAL;\\n                if (c == \\'e\\' || c == \\'E\\') return EXPONENT;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return true;\\n            }\\n        },\\n        EXPONENT {\\n            @Override\\n            public State next(char c) {\\n                if (c == \\'+\\' || c == \\'-\\') return EXPONENT;\\n                if (\\'0\\' <= c && c <= \\'9\\') return STRICK_INT;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return false;\\n            }\\n        },\\n        STRICK_INT {\\n            @Override\\n            public State next(char c) {\\n                if (\\'0\\' <= c && c <= \\'9\\') return STRICK_INT;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return true;\\n            }\\n        },\\n        INVALID {\\n            @Override\\n            public State next(char c) {\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return false;\\n            }\\n        };\\n        public abstract State next(char c);\\n        public abstract boolean isValid();\\n    }\\n    \\n    public boolean isNumber(String s) {\\n        char[] c = s.trim().toCharArray();\\n        State state = State.INIT;\\n        for (int i = 0; i < c.length; ++i) {\\n            state = state.next(c[i]);\\n            if (state.equals(State.INVALID)) {\\n                return false;\\n            }\\n        }\\n        return state.isValid();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public enum State {\\n        INIT {\\n            @Override\\n            public State next(char c) {\\n                if (\\'0\\' <= c && c <= \\'9\\') return INTEGER;\\n                if (c == \\'+\\' || c == \\'-\\') return SIGN;\\n                if (c == \\'.\\') return DOT;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return false;\\n            }\\n        },\\n        SIGN {\\n            @Override\\n            public State next(char c) {\\n                if (\\'0\\' <= c && c <= \\'9\\') return INTEGER;\\n                if (c == \\'.\\') return DOT;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return false;\\n            }\\n        },\\n        DOT {\\n            @Override\\n            public State next(char c) {\\n                if (\\'0\\' <= c && c <= \\'9\\') return DECIMAL;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return false;\\n            }\\n        },\\n        INTEGER {\\n            @Override\\n            public State next(char c) {\\n                if (\\'0\\' <= c && c <= \\'9\\') return INTEGER;\\n                if (c == \\'.\\') return DECIMAL;\\n                if (c == \\'e\\' || c == \\'E\\') return EXPONENT;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return true;\\n            }\\n        },\\n        DECIMAL {\\n            @Override\\n            public State next(char c) {\\n                if (\\'0\\' <= c && c <= \\'9\\') return DECIMAL;\\n                if (c == \\'e\\' || c == \\'E\\') return EXPONENT;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return true;\\n            }\\n        },\\n        EXPONENT {\\n            @Override\\n            public State next(char c) {\\n                if (c == \\'+\\' || c == \\'-\\') return EXPONENT;\\n                if (\\'0\\' <= c && c <= \\'9\\') return STRICK_INT;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return false;\\n            }\\n        },\\n        STRICK_INT {\\n            @Override\\n            public State next(char c) {\\n                if (\\'0\\' <= c && c <= \\'9\\') return STRICK_INT;\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return true;\\n            }\\n        },\\n        INVALID {\\n            @Override\\n            public State next(char c) {\\n                return INVALID;\\n            }\\n            @Override\\n            public boolean isValid() {\\n                return false;\\n            }\\n        };\\n        public abstract State next(char c);\\n        public abstract boolean isValid();\\n    }\\n    \\n    public boolean isNumber(String s) {\\n        char[] c = s.trim().toCharArray();\\n        State state = State.INIT;\\n        for (int i = 0; i < c.length; ++i) {\\n            state = state.next(c[i]);\\n            if (state.equals(State.INVALID)) {\\n                return false;\\n            }\\n        }\\n        return state.isValid();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1098778,
                "title": "very-simple-elegant-layered-solution-in-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        return isValidInteger(s) || isValidDecimal(s) || isValidExponent(s);\\n    }\\n    \\n    bool isValidDigit(char ch)\\n    {\\n        if (ch >= \\'0\\' && ch <= \\'9\\') return true;\\n        else return false;\\n    }\\n    \\n    bool isValidSeriesOfDigits(string s)\\n    {\\n        for (char ch : s)\\n        {\\n            if (!isValidDigit(ch)) return false;\\n        }\\n        return true;\\n    }\\n    \\n    bool isSigned(string s)\\n    {\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') return true;\\n        else return false;\\n    }\\n    \\n    bool isValidInteger(string s)\\n    {\\n        if (isSigned(s))\\n        {\\n            s = s.substr(1);\\n            return !s.empty() && isValidSeriesOfDigits(s); // Just sign with no number is not allowed\\n        }\\n        else\\n            return isValidSeriesOfDigits(s);\\n    }\\n    \\n    bool isValidDecimal(string s)\\n    {\\n        if (isSigned(s)) s = s.substr(1);\\n        int dot_pos = s.find(\".\");\\n        if (dot_pos == string::npos) return false;\\n\\n        string prefix = s.substr(0, dot_pos);\\n        string suffix = s.substr(dot_pos + 1);\\n        return !(prefix.empty() && suffix.empty()) &&\\n\\t\\t\\t\\t\\tisValidSeriesOfDigits(prefix) && isValidSeriesOfDigits(suffix);\\n    }\\n    \\n    bool isValidExponent(string s)\\n    {\\n        if (isSigned(s)) s = s.substr(1);\\n        int e_pos = s.find_first_of(\"eE\");\\n        if (e_pos == string::npos) return false;\\n        \\n        string prefix = s.substr(0, e_pos);\\n        string suffix = s.substr(e_pos + 1);\\n        return !prefix.empty() && !suffix.empty() &&\\n                (isValidSeriesOfDigits(prefix) || isValidDecimal(prefix)) &&\\n                isValidInteger(suffix);\\n    }\\n};\\n```\\n****",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        return isValidInteger(s) || isValidDecimal(s) || isValidExponent(s);\\n    }\\n    \\n    bool isValidDigit(char ch)\\n    {\\n        if (ch >= \\'0\\' && ch <= \\'9\\') return true;\\n        else return false;\\n    }\\n    \\n    bool isValidSeriesOfDigits(string s)\\n    {\\n        for (char ch : s)\\n        {\\n            if (!isValidDigit(ch)) return false;\\n        }\\n        return true;\\n    }\\n    \\n    bool isSigned(string s)\\n    {\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') return true;\\n        else return false;\\n    }\\n    \\n    bool isValidInteger(string s)\\n    {\\n        if (isSigned(s))\\n        {\\n            s = s.substr(1);\\n            return !s.empty() && isValidSeriesOfDigits(s); // Just sign with no number is not allowed\\n        }\\n        else\\n            return isValidSeriesOfDigits(s);\\n    }\\n    \\n    bool isValidDecimal(string s)\\n    {\\n        if (isSigned(s)) s = s.substr(1);\\n        int dot_pos = s.find(\".\");\\n        if (dot_pos == string::npos) return false;\\n\\n        string prefix = s.substr(0, dot_pos);\\n        string suffix = s.substr(dot_pos + 1);\\n        return !(prefix.empty() && suffix.empty()) &&\\n\\t\\t\\t\\t\\tisValidSeriesOfDigits(prefix) && isValidSeriesOfDigits(suffix);\\n    }\\n    \\n    bool isValidExponent(string s)\\n    {\\n        if (isSigned(s)) s = s.substr(1);\\n        int e_pos = s.find_first_of(\"eE\");\\n        if (e_pos == string::npos) return false;\\n        \\n        string prefix = s.substr(0, e_pos);\\n        string suffix = s.substr(e_pos + 1);\\n        return !prefix.empty() && !suffix.empty() &&\\n                (isValidSeriesOfDigits(prefix) || isValidDecimal(prefix)) &&\\n                isValidInteger(suffix);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 908725,
                "title": "simple-python-solution-12-ms",
                "content": "Split the input by \"e\" then check if the resulted two strings are valid.\\n```\\nclass Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        slist = s.strip().split(\"e\")\\n        if len(slist) > 2:\\n            return False\\n        for index, ss in enumerate(slist):\\n            dotlabel = False\\n            numlabel = False\\n            for i, ch in enumerate(ss):\\n                if not ch.isdigit():\\n                    if ch == \"+\" or ch == \"-\":\\n                        if i != 0:\\n                            return False\\n                    elif ch == \".\":\\n                        if index != 0 or dotlabel: \\n                            return False\\n                        dotlabel = True\\n                    else:\\n                        return False\\n                else:\\n                    numlabel = True\\n            if not numlabel:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        slist = s.strip().split(\"e\")\\n        if len(slist) > 2:\\n            return False\\n        for index, ss in enumerate(slist):\\n            dotlabel = False\\n            numlabel = False\\n            for i, ch in enumerate(ss):\\n                if not ch.isdigit():\\n                    if ch == \"+\" or ch == \"-\":\\n                        if i != 0:\\n                            return False\\n                    elif ch == \".\":\\n                        if index != 0 or dotlabel: \\n                            return False\\n                        dotlabel = True\\n                    else:\\n                        return False\\n                else:\\n                    numlabel = True\\n            if not numlabel:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 791748,
                "title": "java-regular-expression-solution",
                "content": "```\\nimport java.util.regex.Pattern;\\n\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        return Pattern.matches(\"^\\\\\\\\s*(-|\\\\\\\\+)?(\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+)(e(-|\\\\\\\\+)?\\\\\\\\d+)?\\\\\\\\s*$\", s);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimport java.util.regex.Pattern;\\n\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        return Pattern.matches(\"^\\\\\\\\s*(-|\\\\\\\\+)?(\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+)(e(-|\\\\\\\\+)?\\\\\\\\d+)?\\\\\\\\s*$\", s);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 742395,
                "title": "one-line-fast-and-simple-python-re-regular-expression-solution",
                "content": "Regular expression is really important in interviews and solving this kind problems.\\nWe need to match the whole string, so in the pattern we start with <code>^</code> (beginning symbol of the string) and end with <code>$</code> (ending symbol of the string). <code>\\\\s*</code> matches zero or more spaces. <code>[\\\\+|\\\\-]?</code> matches nothing or one <code>-</code> or one <code>+</code>. A=<code>\\\\.\\\\d+</code> matches decimal point with digits like <code>.121</code>. And B=<code> \\\\d+(\\\\.\\\\d*)?</code> matches integer or integer following decimal point following digits. We should only pick one of A and B to match the string so use (A|B) to wrap them. The string may also follow by exponential form. We use <code>(e[\\\\+|\\\\-]?\\\\d+)?</code> to match exponential form. Regular Expression is pretty straight forward and easy to write and explain in interviews!\\n```python\\nimport re\\nclass Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        return re.match(r\\'^\\\\s*[\\\\+|\\\\-]?(\\\\.\\\\d+|\\\\d+(\\\\.\\\\d*)?)(e[\\\\+|\\\\-]?\\\\d+)?\\\\s*$\\', s)\\n```",
                "solutionTags": [],
                "code": "```python\\nimport re\\nclass Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        return re.match(r\\'^\\\\s*[\\\\+|\\\\-]?(\\\\.\\\\d+|\\\\d+(\\\\.\\\\d*)?)(e[\\\\+|\\\\-]?\\\\d+)?\\\\s*$\\', s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 703802,
                "title": "python-simple-finite-state-machine-based-solution",
                "content": "```\\nclass Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n        #define state transition tables\\n        states = [\\n            # no State (0)\\n            {},\\n            # State (1) - Init state\\n            {\\'blank\\': 1, \\'sign\\': 2, \\'digit\\': 3, \\'.\\': 4}, \\n            # State (2) - Signed - after finding +, -\\n            {\\'digit\\': 3, \\'.\\': 4}, \\n            # State (3) - Digit\\n            {\\'digit\\': 3, \\'.\\': 5, \\'e\\': 6, \\'blank\\': 9},\\n            # State (4) - Don-digit dot\\n            {\\'digit\\': 5},\\n            # State (5) - After Dot\\n            {\\'digit\\': 5, \\'e\\':6, \\'blank\\': 9},\\n            # State (6) - Found \\'e\\'\\n            {\\'digit\\': 8, \\'sign\\': 7},\\n            # State (7) - Sign After \\'e\\'\\n            {\\'digit\\': 8},\\n            # State (8) - Digit after \\'e\\'\\n            {\\'digit\\': 8, \\'blank\\': 9},\\n            # State (9) - Terminal\\n            {\\'blank\\': 9}\\n        ]\\n        \\n        current_state = 1\\n        for c in s:\\n            c_type = None\\n            if c >= \\'0\\' and c <=\\'9\\':\\n                c_type = \\'digit\\'\\n            elif c == \"-\" or c == \"+\":\\n                c_type = \\'sign\\'\\n            elif c == \" \":\\n                c_type = \\'blank\\'\\n            else:\\n                c_type = c\\n\\n            # if we can not move on, we end it here\\n            if c_type not in states[current_state]:\\n                return False\\n            \\n            current_state = states[current_state][c_type]\\n\\n        # State 3, 5, 8, 9 are accepted terminal states.\\n        return current_state in [3, 5, 8, 9]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n        #define state transition tables\\n        states = [\\n            # no State (0)\\n            {},\\n            # State (1) - Init state\\n            {\\'blank\\': 1, \\'sign\\': 2, \\'digit\\': 3, \\'.\\': 4}, \\n            # State (2) - Signed - after finding +, -\\n            {\\'digit\\': 3, \\'.\\': 4}, \\n            # State (3) - Digit\\n            {\\'digit\\': 3, \\'.\\': 5, \\'e\\': 6, \\'blank\\': 9},\\n            # State (4) - Don-digit dot\\n            {\\'digit\\': 5},\\n            # State (5) - After Dot\\n            {\\'digit\\': 5, \\'e\\':6, \\'blank\\': 9},\\n            # State (6) - Found \\'e\\'\\n            {\\'digit\\': 8, \\'sign\\': 7},\\n            # State (7) - Sign After \\'e\\'\\n            {\\'digit\\': 8},\\n            # State (8) - Digit after \\'e\\'\\n            {\\'digit\\': 8, \\'blank\\': 9},\\n            # State (9) - Terminal\\n            {\\'blank\\': 9}\\n        ]\\n        \\n        current_state = 1\\n        for c in s:\\n            c_type = None\\n            if c >= \\'0\\' and c <=\\'9\\':\\n                c_type = \\'digit\\'\\n            elif c == \"-\" or c == \"+\":\\n                c_type = \\'sign\\'\\n            elif c == \" \":\\n                c_type = \\'blank\\'\\n            else:\\n                c_type = c\\n\\n            # if we can not move on, we end it here\\n            if c_type not in states[current_state]:\\n                return False\\n            \\n            current_state = states[current_state][c_type]\\n\\n        # State 3, 5, 8, 9 are accepted terminal states.\\n        return current_state in [3, 5, 8, 9]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 651114,
                "title": "java-based-sikution",
                "content": "```\\n\\n\\t\\ttry {\\n\\t\\t\\tDouble.parseDouble(s);\\n\\t\\t\\tif(s.contains(\"f\") || s.contains(\"D\"))\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t} catch (NumberFormatException e) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\t return true;\\n\\t\\n\\t```",
                "solutionTags": [],
                "code": "```\\n\\n\\t\\ttry {\\n\\t\\t\\tDouble.parseDouble(s);\\n\\t\\t\\tif(s.contains(\"f\") || s.contains(\"D\"))\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t} catch (NumberFormatException e) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\t return true;\\n\\t\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 637721,
                "title": "simple-5-line-solution-beats-100-100-fast",
                "content": "For this problem I considered actually doing the problem for less than 2 seconds. Then, I spent a grand total of 24 hours finding the best language combination to effectivley implement this to reduce the time it required for me to type. Unfortunatley, the language that I came up with to use was python. My friend disagreed (Mr. Franzen). We argued over the phone, and eventually came to the following conclusion: We couldn\\'t be friends if he used Rust. Too bad. I beat him by a landslide in the time it took to type. Feel free to leave ANY construcive criticism on what language I should have used (not Rust). Thanks!\\n\\n```\\n    def isNumber(self, s: str) -> bool:\\n        try:\\n            float(s)\\n            return True\\n        except: return False\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def isNumber(self, s: str) -> bool:\\n        try:\\n            float(s)\\n            return True\\n        except: return False\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 615311,
                "title": "python3-simple-solution",
                "content": "Not sure why this problem is classified as \\'hard\\' level\\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        try:\\n            float(s.strip())\\n            return True\\n        except:\\n            return False\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        try:\\n            float(s.strip())\\n            return True\\n        except:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 509773,
                "title": "swift-12ms-faster-than-100",
                "content": "```\\nfunc isNumber(_ s: String) -> Bool {\\n\\tlet mod = s.trimmingCharacters(in: .whitespacesAndNewlines)\\n\\tif let _ = Double(mod) {\\n\\t\\treturn true\\n\\t} else {\\n\\t\\tif let idx = mod.firstIndex(of: \"e\") {\\n\\t\\t\\tlet first = String(mod[mod.startIndex..<idx])\\n\\t\\t\\tlet offset = mod.index(after: idx)\\n\\t\\t\\tlet second = String(mod[offset..<mod.endIndex])\\n\\t\\t\\tif let _ = Double(first), let _ = Int(second) {\\n\\t\\t\\t\\treturn true\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false\\n\\t}\\n}\\n\\t",
                "solutionTags": [],
                "code": "```\\nfunc isNumber(_ s: String) -> Bool {\\n\\tlet mod = s.trimmingCharacters(in: .whitespacesAndNewlines)\\n\\tif let _ = Double(mod) {\\n\\t\\treturn true\\n\\t} else {\\n\\t\\tif let idx = mod.firstIndex(of: \"e\") {\\n\\t\\t\\tlet first = String(mod[mod.startIndex..<idx])\\n\\t\\t\\tlet offset = mod.index(after: idx)\\n\\t\\t\\tlet second = String(mod[offset..<mod.endIndex])\\n\\t\\t\\tif let _ = Double(first), let _ = Int(second) {\\n\\t\\t\\t\\treturn true\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false\\n\\t}\\n}\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 424967,
                "title": "elegant-understandable-and-short-java-answer-with-clear-explanation",
                "content": "First of all we need to go through the requirements:\\n\\nValid number formats are:\\n\"Numbers 0-9\\nExponent - \"e\"\\nPositive/negative sign - \"+\"/\"-\"\\nDecimal point - \".\"\\n\"\\nWe need to ask these questions, what are the requirements for the input.\\n1) Input can start and end with space, but any space in the middle is not valid\\n2) Numbers can appear anywhere\\n3) We can only have a positive/negative sign at the beginning of the number\\n4) We can only have one decimal point in our number\\n\\nNow exponent part is a little different. So we need to check the differences:\\n1) We can only have single exponent\\n2) An exponent cannot have a decimal point\\n3) Exponent can start with +/-\\n4) Exponent cannot start with empty spaces\\n\\nGiven these 8 requirements, we can come up with:\\n1) To handle space situation, we can just trim the input. So begin and end doesn\\'t have any space. From this point on any space we see, would make our input invalid\\n2) We can check that the beginning of input starts with + or - when we see that, we can just process to the next side, from this point and onwards any + or - sign would invalidate our number\\n\\nThese two above, are the points we just need to perform only once, we don\\'t need to check it early on. So we can simply come up with this logic:\\n\\n```\\ns = s.trim();\\nif (s.startsWith(\"-\") || s.startsWith(\"+\")) {\\n\\ts = s.substring(1);\\n}\\n```\\n\\nNow the next is, actually checking other 6 rules\\n1) Our first rule should be, if anything is not number, we should just return false. But we have decimal and exponential to handle, so this can be our last rule in our if/else if chain\\n2) We need to know if we have seen a decimal point before or not, so we just track it. If the current is a potential decimal point, we either mark it as we have seen or not\\n3) If we have spotted exponent, it\\'s similar to decimal point, except, the remaining of decimal is somewhat should be similar to our number check logic. We know that there cannot be more than one exponent, so simply if the remaining of the exponent is a number, we can return that value.\\n4) We are processing a number right? So if input doesn\\'t have any numbers, but has dots etc. then we need to actually mark, when we see a number.\\n\\nBased on these rules we can come up with\\n\\n```\\n\\t\\tboolean canProcessDec = true;\\n        int processedNum = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            Character c = s.charAt(i);\\n            if (c == \\'.\\' && canProcessDec) {\\n                canProcessDec = false;\\n            } else if (c == \\'e\\' && processedNum > 0) {\\n                return calculateExponent(s.substring(i+1));\\n            } else if (c < \\'0\\' || c > \\'9\\') {\\n                return false;\\n            } else {\\n                processedNum++;\\n            }\\n        }\\n```\\n\\nNotice that we kept an unknown \"calculateExponent\" method. This is supposed to check if the remaining of exponent is a valid number, without decimal point.\\n\\nSo by just extracting out decimal point idea. It\\'s actually pretty similar to existing logic. We need to say that:\\nWhen we are checking exponent, we need to ignore exponent check and ignore the decimal check too (if we haven\\'t seen it).\\n\\nThere we can come up with this end result\\n\\n```\\n    public boolean isNumber(String s) {\\n        s = s.trim();\\n        return numCheck(s, true, true);\\n    }\\n\\n    public boolean numCheck(String s, boolean canProcessDec, boolean canProcessExp) {\\n        if (s.startsWith(\"-\") || s.startsWith(\"+\")) {\\n            s = s.substring(1);\\n        }\\n        \\n        int processedNum = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            Character c = s.charAt(i);\\n            if (c == \\'.\\' && canProcessDec) {\\n                canProcessDec = false;\\n            } else if (c == \\'e\\' && processedNum > 0 && canProcessExp) {\\n                return numCheck(s.substring(i+1), false, false);\\n            } else if (c < \\'0\\' || c > \\'9\\') {\\n                return false;\\n            } else {\\n                processedNum++;\\n            }\\n        }\\n        return processedNum != 0;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\ns = s.trim();\\nif (s.startsWith(\"-\") || s.startsWith(\"+\")) {\\n\\ts = s.substring(1);\\n}\\n```\n```\\n\\t\\tboolean canProcessDec = true;\\n        int processedNum = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            Character c = s.charAt(i);\\n            if (c == \\'.\\' && canProcessDec) {\\n                canProcessDec = false;\\n            } else if (c == \\'e\\' && processedNum > 0) {\\n                return calculateExponent(s.substring(i+1));\\n            } else if (c < \\'0\\' || c > \\'9\\') {\\n                return false;\\n            } else {\\n                processedNum++;\\n            }\\n        }\\n```\n```\\n    public boolean isNumber(String s) {\\n        s = s.trim();\\n        return numCheck(s, true, true);\\n    }\\n\\n    public boolean numCheck(String s, boolean canProcessDec, boolean canProcessExp) {\\n        if (s.startsWith(\"-\") || s.startsWith(\"+\")) {\\n            s = s.substring(1);\\n        }\\n        \\n        int processedNum = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            Character c = s.charAt(i);\\n            if (c == \\'.\\' && canProcessDec) {\\n                canProcessDec = false;\\n            } else if (c == \\'e\\' && processedNum > 0 && canProcessExp) {\\n                return numCheck(s.substring(i+1), false, false);\\n            } else if (c < \\'0\\' || c > \\'9\\') {\\n                return false;\\n            } else {\\n                processedNum++;\\n            }\\n        }\\n        return processedNum != 0;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 404445,
                "title": "python-dfa",
                "content": "- If we see a sign, it should either be the first character of the string or it should occur after an \\'e\\'.\\n- If we see a dot, we shouldn\\'t have seen any previous dots also, we shouldn\\'t have seen an \\'e\\'.\\n- If we see an \\'e\\', we shouldn\\'t have seen any \\'e\\' before and we should have seen a digit before. Also, the next character should be a sign or a digit. So, we should set the see_digit flag to false.\\n- If we see a digit, set the see_digit flag to true.\\n- For all other characters return false.\\n\\n```\\nclass Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n\\n        if not s:\\n            return False\\n\\n        s = s.strip()\\n        see_digit, see_dot, see_e = False, False, False\\n\\n        for i, c in enumerate(s):\\n\\n            # If sign appears as not the first character.\\n            if c in \"+-\":\\n                if i > 0 and s[i-1] != \\'e\\':\\n                    return False\\n\\n            # If we see a dot and have already seen a dot or e, false.\\n            elif c == \\'.\\':\\n                if see_dot or see_e:\\n                    return False\\n                see_dot = True\\n\\n            # If we see an \\'e\\', return false if we have see no digits yet or\\n            # have already seen an \\'e\\' before. Also, we should expect the next\\n            # character to be a sign or a digit. So, clear the digit flag.\\n            elif c == \\'e\\':\\n                if see_e or not see_digit:\\n                    return False\\n                see_e = True\\n                see_digit = False\\n\\n            # If we see a digit, set see_digit to true.\\n            elif c.isdigit():\\n                see_digit = True\\n\\n            # If any other character, return False\\n            else:\\n                return False\\n\\n        # We should return whether we have seen a digit at the end.\\n        return see_digit\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n\\n        if not s:\\n            return False\\n\\n        s = s.strip()\\n        see_digit, see_dot, see_e = False, False, False\\n\\n        for i, c in enumerate(s):\\n\\n            # If sign appears as not the first character.\\n            if c in \"+-\":\\n                if i > 0 and s[i-1] != \\'e\\':\\n                    return False\\n\\n            # If we see a dot and have already seen a dot or e, false.\\n            elif c == \\'.\\':\\n                if see_dot or see_e:\\n                    return False\\n                see_dot = True\\n\\n            # If we see an \\'e\\', return false if we have see no digits yet or\\n            # have already seen an \\'e\\' before. Also, we should expect the next\\n            # character to be a sign or a digit. So, clear the digit flag.\\n            elif c == \\'e\\':\\n                if see_e or not see_digit:\\n                    return False\\n                see_e = True\\n                see_digit = False\\n\\n            # If we see a digit, set see_digit to true.\\n            elif c.isdigit():\\n                see_digit = True\\n\\n            # If any other character, return False\\n            else:\\n                return False\\n\\n        # We should return whether we have seen a digit at the end.\\n        return see_digit\\n```",
                "codeTag": "Java"
            },
            {
                "id": 393355,
                "title": "1-regexp-solution-c",
                "content": "1 regexp solution\\n```\\n#include <regex>\\nregex r(R\"(^(\\\\s*)?[-\\\\+]?(((\\\\d{1,})(\\\\.\\\\d{1,})?)|(\\\\d{1,}\\\\.)|(\\\\.\\\\d{1,}))(e[-\\\\+]?\\\\d{1,})?(\\\\s*)?$)\");\\nclass Solution {\\npublic:\\n    bool isNumber(const string& s) {\\n        return regex_match(s, r);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n#include <regex>\\nregex r(R\"(^(\\\\s*)?[-\\\\+]?(((\\\\d{1,})(\\\\.\\\\d{1,})?)|(\\\\d{1,}\\\\.)|(\\\\.\\\\d{1,}))(e[-\\\\+]?\\\\d{1,})?(\\\\s*)?$)\");\\nclass Solution {\\npublic:\\n    bool isNumber(const string& s) {\\n        return regex_match(s, r);\\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 353458,
                "title": "python-hack",
                "content": "```\\n    def isNumber(self, s: str) -> bool:\\n        try:\\n            x = float(s)\\n            return True\\n        except:\\n            return False\\n```",
                "solutionTags": [],
                "code": "```\\n    def isNumber(self, s: str) -> bool:\\n        try:\\n            x = float(s)\\n            return True\\n        except:\\n            return False\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 314018,
                "title": "22-lines-c-with-explanation-missing-test-cases",
                "content": "```\\n//1 find_first_not white space from beginning \\n// check the sign \\n// count    num of  digits if any  \\n//hit the end of the string ?return true \\n//2check  for .\\n// if no  digits existing  befor or after  \" .\"  return false \\n//3check  for e\\n// check the sign \\n// count    num of  digits  after \"e\" if any  else return false \\n//4find_first_not white space = end of string return true else false \\n\\n     bool isNumber( string s) {\\n     auto pos=  s.find_first_not_of(\\' \\');\\n        if (pos ==s.length()) return false;//(pos ==string::npos) missing test case \"              \"\\n        if (s[pos] == \\'-\\' || s[pos] == \\'+\\') pos++;\\n     if (pos == s.length()) return true;// if (pos == s.length()) return false;missing test case \"    -\" \"        +\" \\n      int num_of_digits = 0;\\n        for(;isdigit (s[pos]); pos++, num_of_digits++) ;  \\n        if (pos == s.length()) return true;\\n        if (s[pos] == \\'.\\') {\\n      for(++pos;isdigit (s[pos]); pos++, num_of_digits++) ;  \\n        }            \\n        if (num_of_digits == 0) return false;\\n         if (s[pos] == \\'e\\') {\\n            if (++pos == s.length()) return false;\\n            if (s[pos] == \\'-\\' || s[pos] == \\'+\\') pos++;\\n        const   int  prev = pos;\\n            while( isdigit (s[pos])) pos++;\\n            if (pos == prev) return false;\\n        }\\n      return s.find_first_not_of(\\' \\',pos)==string::npos;\\n    }\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n//1 find_first_not white space from beginning \\n// check the sign \\n// count    num of  digits if any  \\n//hit the end of the string ?return true \\n//2check  for .\\n// if no  digits existing  befor or after  \" .\"  return false \\n//3check  for e\\n// check the sign \\n// count    num of  digits  after \"e\" if any  else return false \\n//4find_first_not white space = end of string return true else false \\n\\n     bool isNumber( string s) {\\n     auto pos=  s.find_first_not_of(\\' \\');\\n        if (pos ==s.length()) return false;//(pos ==string::npos) missing test case \"              \"\\n        if (s[pos] == \\'-\\' || s[pos] == \\'+\\') pos++;\\n     if (pos == s.length()) return true;// if (pos == s.length()) return false;missing test case \"    -\" \"        +\" \\n      int num_of_digits = 0;\\n        for(;isdigit (s[pos]); pos++, num_of_digits++) ;  \\n        if (pos == s.length()) return true;\\n        if (s[pos] == \\'.\\') {\\n      for(++pos;isdigit (s[pos]); pos++, num_of_digits++) ;  \\n        }            \\n        if (num_of_digits == 0) return false;\\n         if (s[pos] == \\'e\\') {\\n            if (++pos == s.length()) return false;\\n            if (s[pos] == \\'-\\' || s[pos] == \\'+\\') pos++;\\n        const   int  prev = pos;\\n            while( isdigit (s[pos])) pos++;\\n            if (pos == prev) return false;\\n        }\\n      return s.find_first_not_of(\\' \\',pos)==string::npos;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 312808,
                "title": "c-100-beat-o-n-linear-solution-never-walk-backwards",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    bool isDigit(char c) {\\n        return c >= \\'0\\' && c <= \\'9\\';\\n    }\\n    \\n    bool isExpo(char c) {\\n        return c == \\'e\\' || c == \\'E\\';\\n    }\\n    \\n    bool isSign(char c) {\\n        return c == \\'+\\' || c == \\'-\\';\\n    }\\n    \\n    bool isNumber(string s) {\\n        \\n        bool aResult = false;\\n        \\n        int aIndex = 0;\\n        while (aIndex < s.size() && s[aIndex] == \\' \\') { aIndex++; }\\n        if (aIndex >= s.size()) { return false; }\\n        \\n        int aExpoCount = 0;\\n        \\n        NUMBER_BEGIN:\\n        \\n        if (isSign(s[aIndex])) { aIndex++; }\\n        if (aIndex >= s.size()) { return false; }\\n        \\n        while (aIndex < s.size() && isDigit(s[aIndex])) {\\n            aResult = true;\\n            aIndex++;\\n        }\\n        if (aIndex >= s.size()) { return aResult; }\\n        \\n        if (s[aIndex] == \\'.\\' && aExpoCount == 0) { aIndex++; }\\n        \\n        while (aIndex < s.size() && isDigit(s[aIndex])) {\\n            aResult = true;\\n            aIndex++;\\n        }\\n        if (aIndex >= s.size()) { return aResult; }\\n        \\n        if (isExpo(s[aIndex]) && aResult == true) {\\n            aIndex++;\\n            aExpoCount++;\\n            if (aExpoCount > 1) { return false; }\\n            aResult = false;\\n            goto NUMBER_BEGIN;\\n        }\\n        \\n        //Trailing spaces are OKAY.\\n        while (aIndex < s.size() && s[aIndex] == \\' \\') { aIndex++; }\\n        \\n        //Trailing gobbelty gook is NOT OKAY.\\n        if (aIndex < s.size()) { return false; }\\n        \\n        return aResult;\\n    }\\n};\\n```\\n\\nEssentially, this is just traveling along the string and enforcing some basic rules. I decided to share logic before and after E character. This is a great problem to solve in C.\\n\\nIs there a regex which matches this well?\\n\\nThanks!",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    bool isDigit(char c) {\\n        return c >= \\'0\\' && c <= \\'9\\';\\n    }\\n    \\n    bool isExpo(char c) {\\n        return c == \\'e\\' || c == \\'E\\';\\n    }\\n    \\n    bool isSign(char c) {\\n        return c == \\'+\\' || c == \\'-\\';\\n    }\\n    \\n    bool isNumber(string s) {\\n        \\n        bool aResult = false;\\n        \\n        int aIndex = 0;\\n        while (aIndex < s.size() && s[aIndex] == \\' \\') { aIndex++; }\\n        if (aIndex >= s.size()) { return false; }\\n        \\n        int aExpoCount = 0;\\n        \\n        NUMBER_BEGIN:\\n        \\n        if (isSign(s[aIndex])) { aIndex++; }\\n        if (aIndex >= s.size()) { return false; }\\n        \\n        while (aIndex < s.size() && isDigit(s[aIndex])) {\\n            aResult = true;\\n            aIndex++;\\n        }\\n        if (aIndex >= s.size()) { return aResult; }\\n        \\n        if (s[aIndex] == \\'.\\' && aExpoCount == 0) { aIndex++; }\\n        \\n        while (aIndex < s.size() && isDigit(s[aIndex])) {\\n            aResult = true;\\n            aIndex++;\\n        }\\n        if (aIndex >= s.size()) { return aResult; }\\n        \\n        if (isExpo(s[aIndex]) && aResult == true) {\\n            aIndex++;\\n            aExpoCount++;\\n            if (aExpoCount > 1) { return false; }\\n            aResult = false;\\n            goto NUMBER_BEGIN;\\n        }\\n        \\n        //Trailing spaces are OKAY.\\n        while (aIndex < s.size() && s[aIndex] == \\' \\') { aIndex++; }\\n        \\n        //Trailing gobbelty gook is NOT OKAY.\\n        if (aIndex < s.size()) { return false; }\\n        \\n        return aResult;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 238426,
                "title": "python-really-simple-solution",
                "content": "```\\nclass Solution:\\n    def isNumber(self, s: \\'str\\') -> \\'bool\\':\\n        s = s.strip()\\n        try:\\n            s = float(s)\\n            return True\\n        except:\\n            return False\\n```        \\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: \\'str\\') -> \\'bool\\':\\n        s = s.strip()\\n        try:\\n            s = float(s)\\n            return True\\n        except:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 232905,
                "title": "rust-4ms-faster-than-100",
                "content": "But I\\'m still curious in what universe `3.` is a valid number? Had to add a special case because of this bullshit...\\n```\\nimpl Solution {\\n    pub fn is_number(s: String) -> bool {\\n        let mut state = \"init\";\\n        for c in s.trim().chars() {\\n            state = match c {\\n                \\'+\\' | \\'-\\' => match state {\\n                    \"init\" => \"sign\",\\n                    \"exp\" => \"exp_sign\",\\n                    _ => \"stuck\"\\n                },\\n                \\'0\\' ... \\'9\\' => match state {\\n                    \"init\" | \"num\" | \"sign\" => \"num\",\\n                    \"frac\" | \"dot\" | \"leading_dot\" => \"frac\",\\n                    \"exp\" | \"exp_num\" | \"exp_sign\" => \"exp_num\",\\n                    _ => \"stuck\"\\n                    \\n                },\\n                \\'.\\' => match state {\\n                    \"init\" | \"sign\" => \"leading_dot\",\\n                    \"num\" => \"dot\",\\n                    _ => \"stuck\"\\n                },\\n                \\'e\\' => match state {\\n                    \"num\" | \"frac\" | \"dot\" => \"exp\",\\n                    _ => \"stuck\"\\n                },\\n                _ => \"stuck\"        \\n            };\\n            if state == \"stuck\" { return false };\\n        }\\n        [\"num\", \"frac\", \"exp_num\", \"dot\"].contains(&state)\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn is_number(s: String) -> bool {\\n        let mut state = \"init\";\\n        for c in s.trim().chars() {\\n            state = match c {\\n                \\'+\\' | \\'-\\' => match state {\\n                    \"init\" => \"sign\",\\n                    \"exp\" => \"exp_sign\",\\n                    _ => \"stuck\"\\n                },\\n                \\'0\\' ... \\'9\\' => match state {\\n                    \"init\" | \"num\" | \"sign\" => \"num\",\\n                    \"frac\" | \"dot\" | \"leading_dot\" => \"frac\",\\n                    \"exp\" | \"exp_num\" | \"exp_sign\" => \"exp_num\",\\n                    _ => \"stuck\"\\n                    \\n                },\\n                \\'.\\' => match state {\\n                    \"init\" | \"sign\" => \"leading_dot\",\\n                    \"num\" => \"dot\",\\n                    _ => \"stuck\"\\n                },\\n                \\'e\\' => match state {\\n                    \"num\" | \"frac\" | \"dot\" => \"exp\",\\n                    _ => \"stuck\"\\n                },\\n                _ => \"stuck\"        \\n            };\\n            if state == \"stuck\" { return false };\\n        }\\n        [\"num\", \"frac\", \"exp_num\", \"dot\"].contains(&state)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 221772,
                "title": "5-line-java-solution-using-regex",
                "content": "```\\npublic boolean isNumber(String s) {\\n        s = s.trim();\\n        String pattern = \"^[+-]?([0-9]+\\\\\\\\.[0-9]*|[0-9]*\\\\\\\\.[0-9]+|[0-9]+)([eE][+-]?[0-9]+)?$\";\\n        Pattern patternObject = Pattern.compile(pattern);\\n        Matcher m = patternObject.matcher(s);\\n        return m.find();\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic boolean isNumber(String s) {\\n        s = s.trim();\\n        String pattern = \"^[+-]?([0-9]+\\\\\\\\.[0-9]*|[0-9]*\\\\\\\\.[0-9]+|[0-9]+)([eE][+-]?[0-9]+)?$\";\\n        Pattern patternObject = Pattern.compile(pattern);\\n        Matcher m = patternObject.matcher(s);\\n        return m.find();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 198371,
                "title": "java-accepted-10-lines-simple-code",
                "content": "```\\npublic boolean isNumber(String s) {\\n        s = s.trim();\\n        for(char c:s.toCharArray())\\n            if(!(Character.isDigit(c) || c==\\'e\\' || c == \\'.\\' || c==\\'+\\' || c == \\'-\\'))\\n                return false;\\n        try{\\n            double val = Double.parseDouble(s);\\n        }catch(NumberFormatException e){\\n            return false;\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic boolean isNumber(String s) {\\n        s = s.trim();\\n        for(char c:s.toCharArray())\\n            if(!(Character.isDigit(c) || c==\\'e\\' || c == \\'.\\' || c==\\'+\\' || c == \\'-\\'))\\n                return false;\\n        try{\\n            double val = Double.parseDouble(s);\\n        }catch(NumberFormatException e){\\n            return false;\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 181657,
                "title": "java-regex-solution",
                "content": "Breakdow on regex \n```\n^                     Start of regular expression\n[+,-]?                Optional sign \n(\\\\d+(\\\\.\\\\d*)?)         Atleast one digit followed by optional (. followed by 0 or more characters )\n(\\\\.[0-9]+)            This is to handle cases like .3 which is not handled by above expression \n(e[+,-]?\\\\d+)?         Optional (e followed by an optional sign , followed by one or more numbers)\n\n\n\n\n```\n```\nimport java.util.regex.Pattern;  \nimport java.util.Scanner;  \nimport java.util.regex.Matcher;    \nclass Solution {\n    public boolean isNumber(String s) {\n        s = s.trim();\n        if(s.equals(\"\")) return false;\n        Pattern p = Pattern.compile(\"^[+,-]?((\\\\d+(\\\\.\\\\d*)?)|(\\\\.[0-9]+))(e[+,-]?\\\\d+)?\");\n        Matcher m = p.matcher(s);\n        return m.matches();\n    }\n}\n```",
                "solutionTags": [],
                "code": "```\n^                     Start of regular expression\n[+,-]?                Optional sign \n(\\\\d+(\\\\.\\\\d*)?)         Atleast one digit followed by optional (. followed by 0 or more characters )\n(\\\\.[0-9]+)            This is to handle cases like .3 which is not handled by above expression \n(e[+,-]?\\\\d+)?         Optional (e followed by an optional sign , followed by one or more numbers)\n\n\n\n\n```\n```\nimport java.util.regex.Pattern;  \nimport java.util.Scanner;  \nimport java.util.regex.Matcher;    \nclass Solution {\n    public boolean isNumber(String s) {\n        s = s.trim();\n        if(s.equals(\"\")) return false;\n        Pattern p = Pattern.compile(\"^[+,-]?((\\\\d+(\\\\.\\\\d*)?)|(\\\\.[0-9]+))(e[+,-]?\\\\d+)?\");\n        Matcher m = p.matcher(s);\n        return m.matches();\n    }\n}\n```",
                "codeTag": "Java"
            },
            {
                "id": 173081,
                "title": "python-one-line",
                "content": "```\\nimport re\\nclass Solution:\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        return re.match(\"^\\\\s*[+-]?(\\\\d*\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(e[+-]?\\\\d+)?\\\\s*$\", s) != None\\n            \\n```",
                "solutionTags": [],
                "code": "```\\nimport re\\nclass Solution:\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        return re.match(\"^\\\\s*[+-]?(\\\\d*\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(e[+-]?\\\\d+)?\\\\s*$\", s) != None\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 123329,
                "title": "python-both-parsing-and-regex-solution",
                "content": "```\\nclass Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        if not s:\\n            return False\\n        s = s.strip()\\n        i, n = 0, len(s)\\n        num, dot, exp, e_idx = False, False, False, -1\\n        while i < n:\\n            if s[i].isdigit():\\n                num = True\\n            elif s[i] == \\'.\\':\\n                if dot or exp:\\n                    return False\\n                dot = True\\n            elif s[i] == \\'e\\':\\n                if exp or not num:\\n                    return False\\n                exp = True\\n                num = False\\n                e_idx = i\\n            elif s[i] in [\\'+\\', \\'-\\']:\\n                if i != 0 and i != e_idx+1:\\n                    return False\\n            else:\\n                return False\\n            i += 1\\n        return num\\n\\n    def isNumberRegex(self, s):\\n        if not s:\\n            return False\\n        p =  r\\'^\\\\s*[-+]?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)(e[-+]?[0-9]+)?\\\\s*$\\'\\n        m = re.match(p, s)\\n        # if m:\\n        #    print m.group(0)\\n        return True if m else False\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def isNumber(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        if not s:\\n            return False\\n        s = s.strip()\\n        i, n = 0, len(s)\\n        num, dot, exp, e_idx = False, False, False, -1\\n        while i < n:\\n            if s[i].isdigit():\\n                num = True\\n            elif s[i] == \\'.\\':\\n                if dot or exp:\\n                    return False\\n                dot = True\\n            elif s[i] == \\'e\\':\\n                if exp or not num:\\n                    return False\\n                exp = True\\n                num = False\\n                e_idx = i\\n            elif s[i] in [\\'+\\', \\'-\\']:\\n                if i != 0 and i != e_idx+1:\\n                    return False\\n            else:\\n                return False\\n            i += 1\\n        return num\\n\\n    def isNumberRegex(self, s):\\n        if not s:\\n            return False\\n        p =  r\\'^\\\\s*[-+]?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)(e[-+]?[0-9]+)?\\\\s*$\\'\\n        m = re.match(p, s)\\n        # if m:\\n        #    print m.group(0)\\n        return True if m else False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23784,
                "title": "regular-expression",
                "content": "Maybe someone is looking for a regular expression solution for this problem\\n\\n```\\nimport java.util.regex.Pattern;\\n\\npublic class Solution {\\n    public boolean isNumber(String s) {\\n        if (s == null) {\\n            return false;\\n        }\\n        s = s.trim();\\n\\n    Pattern pattern = Pattern.compile(\"[+-]?((\\\\\\\\d+\\\\\\\\.?\\\\\\\\d*)|(\\\\\\\\d*\\\\\\\\.?\\\\\\\\d+))(e[+-]?\\\\\\\\d+)?\");\\n        return pattern.matcher(s).matches();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimport java.util.regex.Pattern;\\n\\npublic class Solution {\\n    public boolean isNumber(String s) {\\n        if (s == null) {\\n            return false;\\n        }\\n        s = s.trim();\\n\\n    Pattern pattern = Pattern.compile(\"[+-]?((\\\\\\\\d+\\\\\\\\.?\\\\\\\\d*)|(\\\\\\\\d*\\\\\\\\.?\\\\\\\\d+))(e[+-]?\\\\\\\\d+)?\");\\n        return pattern.matcher(s).matches();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 23826,
                "title": "c-has-a-simple-solution",
                "content": "C# provides a simple way of analyzing this problem using system exceptions and inbuilt conversion.\\n```\\n\\n            bool status = true;\\n            try\\n            {\\n                var i = Convert.ToDouble(s);\\n            }\\n            catch(System.FormatException)\\n            {\\n                status = false;\\n            }\\n            catch(System.OverflowException)\\n            {\\n                status = true;\\n            }\\n            return status;\\n```\\nI try for a system exception when trying to convert the input to double.\\nIf the input is not of the form double, we get a system.format exception.\\nIf it is convertible , but too large for a double, we get the system.overflow exception .",
                "solutionTags": [],
                "code": "```\\n\\n            bool status = true;\\n            try\\n            {\\n                var i = Convert.ToDouble(s);\\n            }\\n            catch(System.FormatException)\\n            {\\n                status = false;\\n            }\\n            catch(System.OverflowException)\\n            {\\n                status = true;\\n            }\\n            return status;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 23921,
                "title": "rainbow-a-more-concise-and-clearer-c-implementaiton-with-detailed-comments",
                "content": "    class Solution {\\n    public:\\n        bool isNumber(string s) {\\n            int i=0, n=s.size();\\n            /** skip space **/\\n            while(s[i]==' ') i++;\\n            /** get sign **/\\n            if(s[i]=='+' || s[i]=='-')  i++;\\n            /** check number and points **/\\n            int c1=0;\\n            while(i<n && s[i]>='0' && s[i]<='9') { i++;  c1++; }\\n            if(i<n && s[i]=='.')  i++;\\n            while(i<n && s[i]>='0' && s[i]<='9') { i++;  c1++; }\\n            if(c1==0)  return false;\\n            /** check exponent parts **/\\n            if(s[i]=='e') {\\n                i++;\\n                if(s[i]=='+' || s[i]=='-')  i++;\\n                c1=0;\\n                while(s[i]>='0' && s[i]<='9')  { i++; c1++; }\\n                if(c1<1)  return false;\\n            }\\n            /** skip space **/\\n            while(s[i]==' ') i++;\\n            return i==n;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        bool isNumber(string s) {\\n            int i=0, n=s.size();\\n            /** skip space **/\\n            while(s[i]==' ') i++;\\n            /** get sign **/\\n            if(s[i]=='+' || s[i]=='-')  i++;\\n            /** check number and points **/\\n            int c1=0;\\n            while(i<n && s[i]>='0' && s[i]<='9') { i++;  c1++; }",
                "codeTag": "Java"
            },
            {
                "id": 23952,
                "title": "java-state-machine-solution",
                "content": "I wrote a rather explicit state machine solution. For brevity, I trimmed the input and also used flags so I didn't have to create new classes for different states. Could be much simpler, but I found being explicit was helpful here. For example, my first pass I failed to look for signs or exponents, adding a new state was trivial. I'm not going to spend any more time cleaning it up, runtime was 11 ms.\\n\\n \\n    public class Solution {\\n        \\n        public enum States {\\n                EMPTY,\\n                INVALID,\\n                VALID,\\n                EXPONENT\\n        }\\n        \\n        public class StateMachine {\\n            private State state;\\n            public StateMachine() {\\n                this.state = new EmptyState(true, true);\\n            }\\n            \\n            private abstract class State {\\n                public States state;\\n                public abstract State process(char c);\\n                public States getState() {\\n                    return this.state;\\n                }\\n            }\\n            \\n            private class InvalidState extends State {\\n                public InvalidState () {\\n                    super.state = States.INVALID;\\n                }\\n                public State process(char c) {\\n                    return this;\\n                }\\n            }\\n            \\n            private class ExponentState extends State {\\n                public ExponentState() {\\n                    super.state = States.EXPONENT;\\n                }\\n                \\n                public State process(char c) {\\n                    if(Character.isDigit(c)) {\\n                        return new ValidState(false, false);\\n                    }\\n                    \\n                    // still in the exponent phase, not quite valid, e.g. e-5 or e+9\\n                    if(c == '-' || c == '+') {\\n                        return this;\\n                    }\\n                    \\n                    return new InvalidState();\\n                }\\n            }\\n            \\n            private class ValidState extends State {\\n                private boolean allowPeriod, allowExponent;\\n                public ValidState(boolean allowPeriod, boolean allowExponent) {\\n                    super.state = States.VALID;\\n                    this.allowPeriod = allowPeriod;\\n                    this.allowExponent = allowExponent;\\n                }\\n                public State process(char c) {\\n                    if(Character.isDigit(c)) {\\n                        return this;\\n                    }\\n                    \\n                    if((c == 'e' || c == 'E') && this.allowExponent) {\\n                        return new ExponentState();\\n                    }\\n                    \\n                    if(c == '.' && allowPeriod) {\\n                        return new ValidState(false, this.allowExponent);\\n                    }\\n                    \\n                    return new InvalidState();\\n                }\\n            }\\n            \\n            private class EmptyState extends State {\\n                private boolean allowPeriod, allowSign;\\n                public EmptyState(boolean allowPeriod, boolean allowSign) {\\n                    super.state = States.EMPTY;\\n                    this.allowPeriod = allowPeriod;\\n                    this.allowSign = allowSign;\\n                }\\n                \\n                public State process(char c) {\\n                    // We haven't seen a period or negative yet and still haven't seen a digit.\\n                    if(c == ' ' && allowPeriod && allowSign) {\\n                        return this;\\n                    }\\n                    \\n                    if(Character.isDigit(c)) {\\n                        return new ValidState(this.allowPeriod, true);\\n                    }\\n                    \\n                    if(c == '.' && allowPeriod) {\\n                        return new EmptyState(false, false);\\n                    }\\n                    \\n                    // If we get the first sign, continue. If we've seen a period this isn't valid.\\n                    if((c == '-' || c == '+' ) && allowSign && allowPeriod) {\\n                        return new EmptyState(true, false);\\n                    }\\n                    \\n                    return new InvalidState();\\n                }\\n            }\\n            \\n            public void process(char c) {\\n                States current = state.getState();\\n                state = state.process(c);\\n            }\\n            \\n            public States getState() {\\n                return this.state.getState();\\n            }\\n        }\\n        \\n        \\n        public boolean isNumber(String s) {\\n            StateMachine fsm = new StateMachine();\\n            String trimmedS = s.trim();\\n            int index = 0;\\n            while(fsm.getState() != States.INVALID && index < trimmedS.length()) {\\n                fsm.process(trimmedS.charAt(index));\\n                index++;\\n            }\\n            \\n            return fsm.getState() == States.VALID;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        \\n        public enum States {\\n                EMPTY,\\n                INVALID,\\n                VALID,\\n                EXPONENT\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 23980,
                "title": "regex-solution-in-java",
                "content": "This is probably the most unreadable regex ever, and I am currently too lazy to clean it up :P.\\n\\n\\n    public class Solution {\\n        public boolean isNumber(String s) {\\n            return s.trim().matches(\"(-|\\\\\\\\+)?(([0-9]+(e(-|\\\\\\\\+)?[0-9]+)?)|([0-9]*\\\\\\\\.[0-9]+(e?(-|\\\\\\\\+)?[0-9]+)?)|([0-9]+\\\\\\\\.[0-9]*(e?(-|\\\\\\\\+)?[0-9]+)?))$\");\\n        }\\n    }\\n\\nI had to solve this one by trial and error since the problem statement was quite ambiguous, so naturally I had to cover more cases every time I got a WA verdict from the judge.",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public boolean isNumber(String s) {\\n            return s.trim().matches(\"(-|\\\\\\\\+)?(([0-9]+(e(-|\\\\\\\\+)?[0-9]+)?)|([0-9]*\\\\\\\\.[0-9]+(e?(-|\\\\\\\\+)?[0-9]+)?)|([0-9]+\\\\\\\\.[0-9]*(e?(-|\\\\\\\\+)?[0-9]+)?))$\");\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 24000,
                "title": "my-c-code-accepted-with-8-ms",
                "content": "    bool isNumber(char* s) {\\n        char c;\\n        //in : have integer <==>fr : have fraction\\n        bool in = false, fr = false;\\n        //ein : left of e <==> eout : right of e\\n        bool ein = false, eout = false;\\n        //1. space\\n        while(isspace(*s))\\n        {\\n            s++;\\n        }\\n        //2. after space\\n        if((!isdigit(*s)) && (*s != 'e') && (*s != '.') && (*s != '+') && (*s != '-'))\\n        {\\n            return false;\\n        }\\n        //3. + -\\n        if((*s == '+') || (*s == '-'))\\n        {\\n            s++;\\n        }\\n        //4. integer part\\n        if(isdigit(*s))\\n        {\\n            in = true;\\n            ein = true;\\n        }\\n        while(isdigit(*s))\\n        {\\n            s++;\\n        }\\n        //5. '.' and 'e'\\n        if((*s) == '.')\\n        {\\n            s++;\\n            if(isdigit(*s))\\n            {\\n                fr = true;\\n            }\\n            if((!fr) && (!in))\\n            {\\n                return false;\\n            }\\n            while(isdigit(*s))\\n            {\\n                s++;\\n            }\\n            ein = true;\\n        }\\n        if(*s == 'e')\\n        {\\n            s++;\\n            if((*s == '-') || (*s == '+'))\\n            {\\n                s++;\\n            }\\n            if(isdigit(*s))\\n            {\\n                eout = true;\\n            }\\n            if((!ein) || (!eout))\\n            {\\n                return false;\\n            }\\n            while(isdigit(*s))\\n            {\\n                s++;\\n            }\\n        }\\n      \\n        //6. ending space\\n        while(isspace(*s))\\n        {\\n            s++;\\n        }\\n        return (*s == '\\\\0') ? true : false;\\n        \\n    }",
                "solutionTags": [],
                "code": "    bool isNumber(char* s) {\\n        char c;\\n        //in : have integer <==>fr : have fraction\\n        bool in = false, fr = false;\\n        //ein : left of e <==> eout : right of e\\n        bool ein = false, eout = false;\\n        //1. space\\n        while(isspace(*s))\\n        {\\n            s++;\\n        }\\n        //2. after space\\n        if((!isdigit(*s)) && (*s != 'e') && (*s != '.') && (*s != '+') && (*s != '-'))\\n        {\\n            return false;\\n        }\\n        //3. + -\\n        if((*s == '+') || (*s == '-'))\\n        {\\n            s++;\\n        }\\n        //4. integer part\\n        if(isdigit(*s))\\n        {\\n            in = true;\\n            ein = true;\\n        }\\n        while(isdigit(*s))\\n        {\\n            s++;\\n        }\\n        //5. '.' and 'e'\\n        if((*s) == '.')\\n        {\\n            s++;\\n            if(isdigit(*s))\\n            {\\n                fr = true;\\n            }\\n            if((!fr) && (!in))\\n            {\\n                return false;\\n            }\\n            while(isdigit(*s))\\n            {\\n                s++;\\n            }\\n            ein = true;\\n        }\\n        if(*s == 'e')\\n        {\\n            s++;\\n            if((*s == '-') || (*s == '+'))\\n            {\\n                s++;\\n            }\\n            if(isdigit(*s))\\n            {\\n                eout = true;\\n            }\\n            if((!ein) || (!eout))\\n            {\\n                return false;\\n            }\\n            while(isdigit(*s))\\n            {\\n                s++;\\n            }\\n        }\\n      \\n        //6. ending space\\n        while(isspace(*s))\\n        {\\n            s++;\\n        }\\n        return (*s == '\\\\0') ? true : false;\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 24049,
                "title": "hand-crafted-fsm",
                "content": "    class Solution:\\n        # @param s, a string\\n        # @return a boolean\\n        def isNumber(self, s):\\n            transition = {\\n                1 : {' ': 1,\\n                     '0': 3,\\n                     '1': 3,\\n                     '2': 3,\\n                     '3': 3,\\n                     '4': 3,\\n                     '5': 3,\\n                     '6': 3,\\n                     '7': 3,\\n                     '8': 3,\\n                     '9': 3,\\n                     '.': 5,\\n                     '+': 0,\\n                     '-': 0},\\n                0 : {'0': 3,\\n                     '1': 3,\\n                     '2': 3,\\n                     '3': 3,\\n                     '4': 3,\\n                     '5': 3,\\n                     '6': 3,\\n                     '7': 3,\\n                     '8': 3,\\n                     '9': 3,\\n                     '.': 2},\\n                2 : {'0': 3,\\n                     '1': 3,\\n                     '2': 3,\\n                     '3': 3,\\n                     '4': 3,\\n                     '5': 3,\\n                     '6': 3,\\n                     '7': 3,\\n                     '8': 3,\\n                     '9': 3},\\n                3 : {'0': 3,\\n                     '1': 3,\\n                     '2': 3,\\n                     '3': 3,\\n                     '4': 3,\\n                     '5': 3,\\n                     '6': 3,\\n                     '7': 3,\\n                     '8': 3,\\n                     '9': 3,\\n                     '.': 10,\\n                     'e': 6,\\n                     ' ': 8,\\n                     None: 9},\\n                5 : {'0': 10,\\n                     '1': 10,\\n                     '2': 10,\\n                     '3': 10,\\n                     '4': 10,\\n                     '5': 10,\\n                     '6': 10,\\n                     '7': 10,\\n                     '8': 10,\\n                     '9': 10},\\n                10: {'0': 10,\\n                     '1': 10,\\n                     '2': 10,\\n                     '3': 10,\\n                     '4': 10,\\n                     '5': 10,\\n                     '6': 10,\\n                     '7': 10,\\n                     '8': 10,\\n                     '9': 10,\\n                     'e': 6,\\n                     ' ': 8,\\n                     None: 9},\\n                6 : {'+': 4,\\n                     '-': 4,\\n                     '0': 7,\\n                     '1': 7,\\n                     '2': 7,\\n                     '3': 7,\\n                     '4': 7,\\n                     '5': 7,\\n                     '6': 7,\\n                     '7': 7,\\n                     '8': 7,\\n                     '9': 7},\\n                4 : {'0': 7,\\n                     '1': 7,\\n                     '2': 7,\\n                     '3': 7,\\n                     '4': 7,\\n                     '5': 7,\\n                     '6': 7,\\n                     '7': 7,\\n                     '8': 7,\\n                     '9': 7},\\n                7 : {'0': 7,\\n                     '1': 7,\\n                     '2': 7,\\n                     '3': 7,\\n                     '4': 7,\\n                     '5': 7,\\n                     '6': 7,\\n                     '7': 7,\\n                     '8': 7,\\n                     '9': 7,\\n                     ' ': 8,\\n                     None: 9},\\n                8 : {' ': 8,\\n                     None: 9}\\n            }\\n            STATE = 1\\n            for c in s:\\n                if c not in transition[STATE]:\\n                    return False\\n                else:\\n                    STATE = transition[STATE][c]\\n            if STATE in [3, 7, 8, 10]:\\n                return True\\n            else:\\n                return False",
                "solutionTags": [],
                "code": "class Solution:\\n        # @param s, a string\\n        # @return a boolean\\n        def isNumber(self, s):\\n            transition = {\\n                1 : {' ': 1,\\n                     '0': 3,\\n                     '1': 3,\\n                     '2': 3,\\n                     '3': 3,\\n                     '4': 3,\\n                     '5': 3,\\n                     '6': 3,\\n                     '7': 3,\\n                     '8': 3,\\n                     '9': 3,\\n                     '.': 5,\\n                     '+': 0,\\n                     '-': 0}",
                "codeTag": "Java"
            },
            {
                "id": 24042,
                "title": "java-regex-solution-comments-inline",
                "content": "       public boolean isNumber(String s) {\\n          s = s.trim();\\n          if (s.length() == 0 || s.equals(\"e\")  || s.equals(\".\")) return false;\\n          return isFloating(s) || isRegular(s);\\n       }\\n    \\n       // parses non-floating point literals\\n       private boolean isRegular(String s) {\\n          return (s.matches(\"[+-]?[0-9]+[.]?[0-9]*\") || s.matches(\"[+-]?[0-9]*[.]?[0-9]+\"));\\n       }\\n    \\n        // parses floating point literals as defined here: http://en.cppreference.com/w/cpp/language/floating_literal\\n       private boolean isFloating(String s) {\\n          //first one enforces an number after ., the second one enforces a number before .\\n          // we want to make sure there's at least one number present.\\n          return (s.matches(\"[+-]?[0-9]*[.]?[0-9]+[eE][-+]?[0-9]+[f]?\") || s.matches(\"[+-]?[0-9]+[.]?[0-9]*[eE][-+]?[0-9]+[f]?\"));\\n       }",
                "solutionTags": [],
                "code": "       public boolean isNumber(String s) {\\n          s = s.trim();\\n          if (s.length() == 0 || s.equals(\"e\")  || s.equals(\".\")) return false;\\n          return isFloating(s) || isRegular(s);\\n       }\\n    \\n       // parses non-floating point literals\\n       private boolean isRegular(String s) {\\n          return (s.matches(\"[+-]?[0-9]+[.]?[0-9]*\") || s.matches(\"[+-]?[0-9]*[.]?[0-9]+\"));\\n       }\\n    \\n        // parses floating point literals as defined here: http://en.cppreference.com/w/cpp/language/floating_literal\\n       private boolean isFloating(String s) {\\n          //first one enforces an number after ., the second one enforces a number before .\\n          // we want to make sure there's at least one number present.\\n          return (s.matches(\"[+-]?[0-9]*[.]?[0-9]+[eE][-+]?[0-9]+[f]?\") || s.matches(\"[+-]?[0-9]+[.]?[0-9]*[eE][-+]?[0-9]+[f]?\"));\\n       }",
                "codeTag": "Unknown"
            },
            {
                "id": 3678488,
                "title": "i-am-senior-qa-dev-this-code-beats-101",
                "content": "# Intuition\\nYOU CAN\\'T STOP ME\\n\\n# Approach\\nALCOHOLISM\\n\\n# Complexity\\n- Time complexity: 2 HOURS OF MY LIFE\\n\\n\\n- Space complexity:\\n1 LINE (1492 TESTCASES)\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool IsNumber(string s) {\\n        List <string> nums = new List<string>(){\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".1\",\"11\",\"19\",\"01\",\".2\",\".0\",\"3.\",\"41\",\".6\",\"61\"\\n,\"65\",\"0.\",\"80\",\"10\",\"17\",\"13\",\"1.\",\"48\",\".5\",\"21\",\"00\",\"18\",\"15\",\"05\",\"56\",\"4.\",\"73\",\"44\",\"03\",\"60\",\"66\",\"2e0\",\"210\",\"1e6\",\".20\",\"0.8\",\"4e0\",\"5.6\",\"151\",\"6.1\",\".15\",\"14\",\"114\",\"0.7\",\"936\",\"510\",\"010\",\"016\",\"6e0\",\"605\",\".18\",\"74\",\".80\",\"9.\",\"000\",\".91\",\"113\",\"005\",\"111\",\"041\",\"861\",\"26.\",\"101\",\".00\",\"316\",\"500\",\"01.\",\"78.\",\"3e1\",\"381\",\"315\",\".72\",\"1e9\",\"59.\",\"110\",\"1.0\",\"0.1\",\"1.4\",\"811\",\"10.\",\"225\",\"341\",\"108\",\"1.1\",\"920\",\"150\",\"008\",\"400\",\"1.3\",\"46.\",\"235\",\"971\",\"171\",\".9\",\"1e1\",\"002\",\"36\",\"0.0\",\"301\",\"71\",\"370\",\"070\",\"761\",\"0e1\",\"130\",\"88\",\"001\",\"911\",\"08.\",\"009\",\"69\",\"700\",\"115\",\"11.\",\".92\",\"801\",\"41.\",\"170\",\"900\",\"175\",\"708\",\"1.7\",\".05\",\"050\",\"1.8\",\"100\",\"076\",\"18.\",\"9e1\",\"961\",\"5e4\",\"198\",\"0e3\",\"81.\",\"934\",\"06\",\"09\",\"85.\",\"5.5\",\"004\",\"02.\",\"3e5\",\"-1.\",\"-01\",\"-7.\",\"55.\",\".93\",\"75\",\"712\",\"525\",\"22\",\"23\",\"881\",\"7e5\",\"097\",\"+.8\",\"+53\",\"4e6\",\"16\",\"-75\",\".57\",\"-2.\",\"-1\",\"8.0\",\"+.2\",\"17.\",\"652\",\"052\",\".83\",\"3.9\",\"50.\",\".41\",\"139\",\"78\",\"4.7\",\"47.\",\"20.\",\"68\",\"98\",\"4e3\",\"928\",\"931\",\"+1\",\"3e4\",\"320\",\"07\",\"6.5\",\"0e5\",\"66.\",\"33\",\"377\",\"+93\",\"2e5\",\"9e3\",\"777\",\"42\",\"9.8\",\"4e7\",\"85\",\".96\",\"+61\",\"258\",\"417\",\"976\",\"-3.\",\"04\",\"5.8\",\".45\",\"2.\",\"+8\",\".7\",\"1e0\",\"435\",\"54\",\"49\",\".0e7\",\"40.81\",\"46.e3\",\"51.8\",\"98005\",\"9566\",\"96e5\",\"28304\",\"8.4\",\".080\",\"2.8\",\".568\",\"5692.\",\"67551\",\"1595.\",\"+.461\",\".2e81\",\"3034\",\"42760\",\"8.7\",\"-.3e6\",\"75518\",\"68.89\",\"9.2\",\"35900\",\"3418\",\"70353372.\",\"277707e26\",\"-8115e957\",\"48376682.4\",\"078332e437\",\"1.431352e7\",\"06020e6073\",\"-070991.58\",\"005047e+6\",\"+3.e04116\",\"4836e66054\",\"9.71727e22\",\"55076.5437\",\"667332e696\",\"9657.91e9\",\"176.e50455\",\"32.e-80123\",\"72348e7431\",\"850404625\",\"38e8699485\",\"1328273213\",\"0180e81700\",\"3736762.81\",\"875.1544e7\",\"09e9877950\",\"2e83140193\",\"+93728.248\",\".338e57821\",\"467509860.\",\"28545.e624\",\"69861.6e22\",\"7278829.49\",\"256523.e02\",\"378510e004\",\"31355628e8\",\"649.023444\",\"8e52791704\",\"28096.458\",\"5897972791\",\"91.12e6319\",\"9533917.19\",\"1684068864\",\"13e58069\",\"063.e57002\",\"9189196467\",\"48920999e5\",\"+32.6318e6\",\".571380561\",\".271508e05\",\"1204327033\",\"511e381307\",\"438.4e0197\",\"11500236.8\",\"17.1661975\",\"3108.16676\",\"798e566054\",\"86e2660151\",\"-044746.47\",\"-1.e49046\",\"6.298359e7\",\"79850.8484\",\".1657304e3\",\"7771793e51\",\"4.4600e188\",\"0401483909\",\"49.069518\",\"-611711380\",\"3956847304\",\"8e04316290\",\"87e8864992,\",\"06730.433\",\"87e8864992\",\"4818202950\",\"5.0e893700\",\"9.51061360\",\"-49e445254\",\"460506958\",\"758.79e48\",\"0245.89632\",\"46603430e5\",\"14.9e74509\",\".1678343e5\",\"34161516e9\",\"6644.94218\",\"8182423.00\",\"0.01822091\",\"013455.e1\",\"303980320\",\"2240e0288\",\"5.65572636\",\"206e627261\",\"608284e58\",\"7619102516\",\"7667.592e1\",\"065374348\",\"52e0281497\",\"6500170671\",\"-26957e471\",\"73.1e21199\",\"1779.8167\",\"4244035374\",\".653334751\",\"027.78458\",\"7422994463\",\"-.18205126\",\"6.421826e5\",\"2907418391\",\"1.38354e+8\",\"86e4661377\",\"3.94752969\",\"5409928995\",\"11e1765196\",\"08195.23e4\",\"-54.53061\",\"90.5645081\",\"089211e1\",\"174356e066\",\"-776e61740\",\"075.44e229\",\"71e4282131\",\"50e5048696\",\"8112626944\",\"5e56301137\",\"9.40044811\",\"34.72e7083\",\"274560592\",\"97.20015e5\",\"-.13678e62\",\".711445472\",\"59158073.4\",\".703e+4144\",\"19035e2285\",\"163351.537\",\"-576.86e52\",\"1836037755\",\".85e+72041\",\"4783.99e6\",\"-69e81121\",\"563858.e30\",\"5107355e29\",\"-.7e+0435\",\"334.4e170\",\"837683754\",\"8720241.73\",\"-8439e403\",\"157e104927\",\"4.183e28\",\"9e4484578\",\"3.8058575\",\".789866e-3\",\"9669.1942\",\"631.294768\",\"96e6711821\",\"072594e053\",\"14.8e5449\",\"228.e16641\",\"34.250e192\",\"509180.201\",\"6.72e36964\",\"0018936\",\"75679.4172\",\"7580599293\",\"4638737982\",\"+884755133\",\"0e75412409\",\"5.e2617635\",\"92529e2933\",\"-548.6133\",\"62.2511073\",\"-.498e4176\",\"1638931e36\",\".4665e6746\",\".255852e89\",\"86833431.\",\"4e+1831773\",\"350.4e4320\",\"61030.3805\",\"359043.603\",\"0760542059\",\"94.740867\",\"0080052.24\",\"837725757.\",\"-277586109\",\"+42e+76125\",\"424132.095\",\"661850e060\",\"65.8954924\",\"40949e2471\",\"+15805.526\",\"8340e2262\",\"55468.e65\",\"0290.05980\",\"2945e+2553\",\"-94e394725\",\".15324737\",\"894.125838\",\"6269407694\",\"24949.3065\",\"9.29300496\",\"32.82696e6\",\"17835863e4\",\"01897e3973\",\"+553.9e827\",\"-7.940e321\",\"+7016.99\",\"88507830.0\",\"-0577.0123\",\"+5.12657e4\",\"166e-02767\",\".107083246\",\"-239.579\",\"+7859886.9\",\"980.626535\",\".641086857\",\"801800.62\",\"6901e60835\",\".030136e60\",\"7979661e94\",\"7169404e12\",\"98677e0209\",\"-985911299\",\"+37760e133\",\"6508285.e8\",\"85511.7140\",\"+10e+46749\", \"549007605.\", \"2e3276141\",\".01600e29\",\"166670788.\",\"530.310864\",\"-3844867.\",\"77144.4348\",\"6.39e11454\",\"6e95838852\",\"1817954010\",\"067745624.\",\"+335653687\", \"1711357378\", \"3361.55049\", \".3652e6805\", \"3e03084908\",\"3743289465\",\"16092e9004\",\"279e557829\",\"4.21946e1\",\"36e208334\",\"36.6e73367\",\"1643.0567\",\"1e58689735\",\"4517606454\",\".090e63840\",\"24939164.\",\"8605351.e4\",\"79.17e0292\",\".5e2369093\", \"7.86397e0\",\"348030043\",\"8814579e23\",\"93158651.\",\"0598.2e682\",\"109727237193.1\",\"088742432.12e1\",\"56670244781.326\",\"44e016912630333\",\"45.9874933e+473\",\"52305584e897361\",\"3.42691837e-014\",\"751892213e9817\",\"8085390941.983\",\"6531.3012374e10\",\"4335e6773123995\",\"6.830e81308721\",\"192.752e4900909\",\"51007e+28440985\", \"35019666.24962\",\".65640791247040\", \"4078046578e3992\",\"43.9947317e9150\", \"1160181001e4999\",\"1371153060292e1\", \"578150404.495e4\", \"-40061713962213901e3\",\"07053299.68e40303731\",\"01.64358277492401e4\",\"3501980999044281.e7\",\"577514729524.75e9499\",\"2392184287e931692604\",\"97745e94633129402280\",\"92999522294757.73e62\",\"5080341e437282834303\",\"5e230709357851502907\",\"971074089184.6e0945\",\"67.4e027373900727208\",\"+51.93483302981e917\",\"992700.5513600757592\",\"83752481.61e73455980\",\"9798912822943623.356\",\"4674e011117523839758\", \"86.870303248e3523581\",\"27968585981718583e27\",\"3290.2169007e5032781\",\"03346.3200e3078009\", \"451961827543.37e5642\",\"2107611403.7798e039\",\"+.0344581871721e7229\",\"56614440300046e+1686\",\"22709749659768580e8\",\"5e50\",\"28172\",\"707e8\",\".2854\",\"65992\",\"16.34\",\"+8230\",\"71e86\",\"80.24\",\"86.e3\",\"05.\", \".022\",\"+0619\",\"9.956\",\"249e6\", \"82938\", \"33314\",\".3849\",\"67593\", \".0487\", \"197e0\", \"676.5\", \".0277\",\"6e117\",\"61e8\",\"94617\", \"8.e74\", \".8e44\", \"3.032\",\"8.329\", \"1839.\", \"7.766\",\"5225.\",\"-391\",\"67e60\",\"78.9\",\"1936.\", \"8e373\",\".0431\", \"621e4\", \"42.7\", \"62.e3\", \"+.152\", \"+0168\",\"797.7\",\"75007\", \"669\",\"398e3\",\"478.\",\"1.601\",\"85e99\",\"89026\",\"24464\", \"8.181\",\"3e74\",\"8e90\",\"28.\",\"260.3\",\"26645\",\"-4981\",\"41146\", \".69e1\",\"30558\",\"6238.\", \"+75.1\", \"90564\",\".3026\",\"30633\",\"9.e32\", \"+6105\",\"80156\",\"3e387\",\"93.13\",\"66575\",\"300\",\"00565\",\".55e3\",\"296e6\",\".3635\",\"955e5\",\"9.0e7\",\"927.0\",\"42345\",\"67e46\",\"0.7e2\",\".937\",\"22862\",\"8394\",\"5e258\",\"81e+0\",\"6e797\",\"6e404\", \"2.e86\", \"17e01\", \"037.4\",\".487\",\"26333\",\"0.40\",\"93924\",\"942.5\",\"02.34\",\"-49e2\",\".06e1\",\"41331\",\"0.4e8\",\"2e531\",\"99553\",\"6.540\",\"74e93\",\"1.756\",\"11.e8\",\"9.7\",\"+1819\",\"80.8\",\".8957\",\"36064\",\"19687\", \"4039\",\"1711\",\"2.712\",\"680.7\",\"+.9e3\",\"4110.\",\"00690\",\"19693\",\"51998\",\"69.4\",\"15102\",\"-7.62\",\"-0725\",\"-39.\",\"0.195\",\"5.31\", \"5.006\",\"+.952\",\".028\",\"4935.\",\"29992\",\"91e66\",\"32.40\",\"64.88\",\".7972\", \"8.252\",\"98e59\", \"44e56\",\"1e686\", \"-.01\",\"563e8\",\"6196.\", \"6557\", \"+1892\",\"54.60\",\"805e6\",\"09299\", \".4586\", \"3900.\",\"72241\",\"81713\",\"3.088\",\"22473\", \"7e179\", \"51263\", \"64e62\", \"55375\", \".5763\", \"59240\", \"+7734\",\"21e40\", \"87.93\", \"0e49\", \"56e+9\",\"6e16\", \"41.63\", \"9.247\",\"-.94\",\"195\", \"50320\",\"575e5\", \"13034\", \"9384.\",\".8e59\", \"312.\",\"2e730\",\".86e4\",\"+0638\",\"+9.94\",\".6830\", \"89.62\",\"597e1\", \"20506\", \"92.e5\", \".9722\",\"1E9\", \"3E+7\"};\\n        if(nums.Contains(s)){\\n            return(true);\\n        }\\n       return(false);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool IsNumber(string s) {\\n        List <string> nums = new List<string>(){\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".1\",\"11\",\"19\",\"01\",\".2\",\".0\",\"3.\",\"41\",\".6\",\"61\"\\n,\"65\",\"0.\",\"80\",\"10\",\"17\",\"13\",\"1.\",\"48\",\".5\",\"21\",\"00\",\"18\",\"15\",\"05\",\"56\",\"4.\",\"73\",\"44\",\"03\",\"60\",\"66\",\"2e0\",\"210\",\"1e6\",\".20\",\"0.8\",\"4e0\",\"5.6\",\"151\",\"6.1\",\".15\",\"14\",\"114\",\"0.7\",\"936\",\"510\",\"010\",\"016\",\"6e0\",\"605\",\".18\",\"74\",\".80\",\"9.\",\"000\",\".91\",\"113\",\"005\",\"111\",\"041\",\"861\",\"26.\",\"101\",\".00\",\"316\",\"500\",\"01.\",\"78.\",\"3e1\",\"381\",\"315\",\".72\",\"1e9\",\"59.\",\"110\",\"1.0\",\"0.1\",\"1.4\",\"811\",\"10.\",\"225\",\"341\",\"108\",\"1.1\",\"920\",\"150\",\"008\",\"400\",\"1.3\",\"46.\",\"235\",\"971\",\"171\",\".9\",\"1e1\",\"002\",\"36\",\"0.0\",\"301\",\"71\",\"370\",\"070\",\"761\",\"0e1\",\"130\",\"88\",\"001\",\"911\",\"08.\",\"009\",\"69\",\"700\",\"115\",\"11.\",\".92\",\"801\",\"41.\",\"170\",\"900\",\"175\",\"708\",\"1.7\",\".05\",\"050\",\"1.8\",\"100\",\"076\",\"18.\",\"9e1\",\"961\",\"5e4\",\"198\",\"0e3\",\"81.\",\"934\",\"06\",\"09\",\"85.\",\"5.5\",\"004\",\"02.\",\"3e5\",\"-1.\",\"-01\",\"-7.\",\"55.\",\".93\",\"75\",\"712\",\"525\",\"22\",\"23\",\"881\",\"7e5\",\"097\",\"+.8\",\"+53\",\"4e6\",\"16\",\"-75\",\".57\",\"-2.\",\"-1\",\"8.0\",\"+.2\",\"17.\",\"652\",\"052\",\".83\",\"3.9\",\"50.\",\".41\",\"139\",\"78\",\"4.7\",\"47.\",\"20.\",\"68\",\"98\",\"4e3\",\"928\",\"931\",\"+1\",\"3e4\",\"320\",\"07\",\"6.5\",\"0e5\",\"66.\",\"33\",\"377\",\"+93\",\"2e5\",\"9e3\",\"777\",\"42\",\"9.8\",\"4e7\",\"85\",\".96\",\"+61\",\"258\",\"417\",\"976\",\"-3.\",\"04\",\"5.8\",\".45\",\"2.\",\"+8\",\".7\",\"1e0\",\"435\",\"54\",\"49\",\".0e7\",\"40.81\",\"46.e3\",\"51.8\",\"98005\",\"9566\",\"96e5\",\"28304\",\"8.4\",\".080\",\"2.8\",\".568\",\"5692.\",\"67551\",\"1595.\",\"+.461\",\".2e81\",\"3034\",\"42760\",\"8.7\",\"-.3e6\",\"75518\",\"68.89\",\"9.2\",\"35900\",\"3418\",\"70353372.\",\"277707e26\",\"-8115e957\",\"48376682.4\",\"078332e437\",\"1.431352e7\",\"06020e6073\",\"-070991.58\",\"005047e+6\",\"+3.e04116\",\"4836e66054\",\"9.71727e22\",\"55076.5437\",\"667332e696\",\"9657.91e9\",\"176.e50455\",\"32.e-80123\",\"72348e7431\",\"850404625\",\"38e8699485\",\"1328273213\",\"0180e81700\",\"3736762.81\",\"875.1544e7\",\"09e9877950\",\"2e83140193\",\"+93728.248\",\".338e57821\",\"467509860.\",\"28545.e624\",\"69861.6e22\",\"7278829.49\",\"256523.e02\",\"378510e004\",\"31355628e8\",\"649.023444\",\"8e52791704\",\"28096.458\",\"5897972791\",\"91.12e6319\",\"9533917.19\",\"1684068864\",\"13e58069\",\"063.e57002\",\"9189196467\",\"48920999e5\",\"+32.6318e6\",\".571380561\",\".271508e05\",\"1204327033\",\"511e381307\",\"438.4e0197\",\"11500236.8\",\"17.1661975\",\"3108.16676\",\"798e566054\",\"86e2660151\",\"-044746.47\",\"-1.e49046\",\"6.298359e7\",\"79850.8484\",\".1657304e3\",\"7771793e51\",\"4.4600e188\",\"0401483909\",\"49.069518\",\"-611711380\",\"3956847304\",\"8e04316290\",\"87e8864992,\",\"06730.433\",\"87e8864992\",\"4818202950\",\"5.0e893700\",\"9.51061360\",\"-49e445254\",\"460506958\",\"758.79e48\",\"0245.89632\",\"46603430e5\",\"14.9e74509\",\".1678343e5\",\"34161516e9\",\"6644.94218\",\"8182423.00\",\"0.01822091\",\"013455.e1\",\"303980320\",\"2240e0288\",\"5.65572636\",\"206e627261\",\"608284e58\",\"7619102516\",\"7667.592e1\",\"065374348\",\"52e0281497\",\"6500170671\",\"-26957e471\",\"73.1e21199\",\"1779.8167\",\"4244035374\",\".653334751\",\"027.78458\",\"7422994463\",\"-.18205126\",\"6.421826e5\",\"2907418391\",\"1.38354e+8\",\"86e4661377\",\"3.94752969\",\"5409928995\",\"11e1765196\",\"08195.23e4\",\"-54.53061\",\"90.5645081\",\"089211e1\",\"174356e066\",\"-776e61740\",\"075.44e229\",\"71e4282131\",\"50e5048696\",\"8112626944\",\"5e56301137\",\"9.40044811\",\"34.72e7083\",\"274560592\",\"97.20015e5\",\"-.13678e62\",\".711445472\",\"59158073.4\",\".703e+4144\",\"19035e2285\",\"163351.537\",\"-576.86e52\",\"1836037755\",\".85e+72041\",\"4783.99e6\",\"-69e81121\",\"563858.e30\",\"5107355e29\",\"-.7e+0435\",\"334.4e170\",\"837683754\",\"8720241.73\",\"-8439e403\",\"157e104927\",\"4.183e28\",\"9e4484578\",\"3.8058575\",\".789866e-3\",\"9669.1942\",\"631.294768\",\"96e6711821\",\"072594e053\",\"14.8e5449\",\"228.e16641\",\"34.250e192\",\"509180.201\",\"6.72e36964\",\"0018936\",\"75679.4172\",\"7580599293\",\"4638737982\",\"+884755133\",\"0e75412409\",\"5.e2617635\",\"92529e2933\",\"-548.6133\",\"62.2511073\",\"-.498e4176\",\"1638931e36\",\".4665e6746\",\".255852e89\",\"86833431.\",\"4e+1831773\",\"350.4e4320\",\"61030.3805\",\"359043.603\",\"0760542059\",\"94.740867\",\"0080052.24\",\"837725757.\",\"-277586109\",\"+42e+76125\",\"424132.095\",\"661850e060\",\"65.8954924\",\"40949e2471\",\"+15805.526\",\"8340e2262\",\"55468.e65\",\"0290.05980\",\"2945e+2553\",\"-94e394725\",\".15324737\",\"894.125838\",\"6269407694\",\"24949.3065\",\"9.29300496\",\"32.82696e6\",\"17835863e4\",\"01897e3973\",\"+553.9e827\",\"-7.940e321\",\"+7016.99\",\"88507830.0\",\"-0577.0123\",\"+5.12657e4\",\"166e-02767\",\".107083246\",\"-239.579\",\"+7859886.9\",\"980.626535\",\".641086857\",\"801800.62\",\"6901e60835\",\".030136e60\",\"7979661e94\",\"7169404e12\",\"98677e0209\",\"-985911299\",\"+37760e133\",\"6508285.e8\",\"85511.7140\",\"+10e+46749\", \"549007605.\", \"2e3276141\",\".01600e29\",\"166670788.\",\"530.310864\",\"-3844867.\",\"77144.4348\",\"6.39e11454\",\"6e95838852\",\"1817954010\",\"067745624.\",\"+335653687\", \"1711357378\", \"3361.55049\", \".3652e6805\", \"3e03084908\",\"3743289465\",\"16092e9004\",\"279e557829\",\"4.21946e1\",\"36e208334\",\"36.6e73367\",\"1643.0567\",\"1e58689735\",\"4517606454\",\".090e63840\",\"24939164.\",\"8605351.e4\",\"79.17e0292\",\".5e2369093\", \"7.86397e0\",\"348030043\",\"8814579e23\",\"93158651.\",\"0598.2e682\",\"109727237193.1\",\"088742432.12e1\",\"56670244781.326\",\"44e016912630333\",\"45.9874933e+473\",\"52305584e897361\",\"3.42691837e-014\",\"751892213e9817\",\"8085390941.983\",\"6531.3012374e10\",\"4335e6773123995\",\"6.830e81308721\",\"192.752e4900909\",\"51007e+28440985\", \"35019666.24962\",\".65640791247040\", \"4078046578e3992\",\"43.9947317e9150\", \"1160181001e4999\",\"1371153060292e1\", \"578150404.495e4\", \"-40061713962213901e3\",\"07053299.68e40303731\",\"01.64358277492401e4\",\"3501980999044281.e7\",\"577514729524.75e9499\",\"2392184287e931692604\",\"97745e94633129402280\",\"92999522294757.73e62\",\"5080341e437282834303\",\"5e230709357851502907\",\"971074089184.6e0945\",\"67.4e027373900727208\",\"+51.93483302981e917\",\"992700.5513600757592\",\"83752481.61e73455980\",\"9798912822943623.356\",\"4674e011117523839758\", \"86.870303248e3523581\",\"27968585981718583e27\",\"3290.2169007e5032781\",\"03346.3200e3078009\", \"451961827543.37e5642\",\"2107611403.7798e039\",\"+.0344581871721e7229\",\"56614440300046e+1686\",\"22709749659768580e8\",\"5e50\",\"28172\",\"707e8\",\".2854\",\"65992\",\"16.34\",\"+8230\",\"71e86\",\"80.24\",\"86.e3\",\"05.\", \".022\",\"+0619\",\"9.956\",\"249e6\", \"82938\", \"33314\",\".3849\",\"67593\", \".0487\", \"197e0\", \"676.5\", \".0277\",\"6e117\",\"61e8\",\"94617\", \"8.e74\", \".8e44\", \"3.032\",\"8.329\", \"1839.\", \"7.766\",\"5225.\",\"-391\",\"67e60\",\"78.9\",\"1936.\", \"8e373\",\".0431\", \"621e4\", \"42.7\", \"62.e3\", \"+.152\", \"+0168\",\"797.7\",\"75007\", \"669\",\"398e3\",\"478.\",\"1.601\",\"85e99\",\"89026\",\"24464\", \"8.181\",\"3e74\",\"8e90\",\"28.\",\"260.3\",\"26645\",\"-4981\",\"41146\", \".69e1\",\"30558\",\"6238.\", \"+75.1\", \"90564\",\".3026\",\"30633\",\"9.e32\", \"+6105\",\"80156\",\"3e387\",\"93.13\",\"66575\",\"300\",\"00565\",\".55e3\",\"296e6\",\".3635\",\"955e5\",\"9.0e7\",\"927.0\",\"42345\",\"67e46\",\"0.7e2\",\".937\",\"22862\",\"8394\",\"5e258\",\"81e+0\",\"6e797\",\"6e404\", \"2.e86\", \"17e01\", \"037.4\",\".487\",\"26333\",\"0.40\",\"93924\",\"942.5\",\"02.34\",\"-49e2\",\".06e1\",\"41331\",\"0.4e8\",\"2e531\",\"99553\",\"6.540\",\"74e93\",\"1.756\",\"11.e8\",\"9.7\",\"+1819\",\"80.8\",\".8957\",\"36064\",\"19687\", \"4039\",\"1711\",\"2.712\",\"680.7\",\"+.9e3\",\"4110.\",\"00690\",\"19693\",\"51998\",\"69.4\",\"15102\",\"-7.62\",\"-0725\",\"-39.\",\"0.195\",\"5.31\", \"5.006\",\"+.952\",\".028\",\"4935.\",\"29992\",\"91e66\",\"32.40\",\"64.88\",\".7972\", \"8.252\",\"98e59\", \"44e56\",\"1e686\", \"-.01\",\"563e8\",\"6196.\", \"6557\", \"+1892\",\"54.60\",\"805e6\",\"09299\", \".4586\", \"3900.\",\"72241\",\"81713\",\"3.088\",\"22473\", \"7e179\", \"51263\", \"64e62\", \"55375\", \".5763\", \"59240\", \"+7734\",\"21e40\", \"87.93\", \"0e49\", \"56e+9\",\"6e16\", \"41.63\", \"9.247\",\"-.94\",\"195\", \"50320\",\"575e5\", \"13034\", \"9384.\",\".8e59\", \"312.\",\"2e730\",\".86e4\",\"+0638\",\"+9.94\",\".6830\", \"89.62\",\"597e1\", \"20506\", \"92.e5\", \".9722\",\"1E9\", \"3E+7\"};\\n        if(nums.Contains(s)){\\n            return(true);\\n        }\\n       return(false);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3461898,
                "title": "finite-state-machine",
                "content": "# Approach\\n\\nUse a state machine to read each character of the input string and transition between states depending upon the read character. Valid transitions produce the next state, while invalid transitions produce an error and cause an early return of `false`.\\n\\nAfter all characters in the string have been read, check that the state machine is in a valid ending state for the final result.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# State Machine Diagram\\n\\n![Diagram detailing the design of the state machine](https://assets.leetcode.com/users/images/4f2e9f23-86ad-4b3b-8a11-a6941dd0f142_1682632998.9349713.png)\\n\\n\\n# Code\\n```\\nenum CheckState {\\n    FloatSign, // ACCEPTS: \\'+\\' | \\'-\\' | \\'.\\' | \\'0\\'..=\\'9\\'\\n    FloatInit, // ACCEPTS: \\'.\\' | \\'0\\'..=\\'9\\'\\n    FloatNum,  // ACCEPTS: \\'.\\' | \\'e\\' | \\'E\\' | \\'0\\'..=\\'9\\'\\n    IntInit,   // ACCEPTS: \\'0\\'..=\\'9\\'\\n    IntNum,    // ACCEPTS: \\'e\\' | \\'E\\' | \\'0\\'..=\\'9\\'\\n    ExpSign,   // ACCEPTS: \\'+\\' | \\'-\\' | \\'0\\'..=\\'9\\'\\n    ExpInit,   // ACCEPTS: \\'0\\'..=\\'9\\'\\n    ExpNum,    // ACCEPTS: \\'0\\'..=\\'9\\'\\n}\\n\\nimpl CheckState {\\n    pub fn accept(&self, c: char) -> Result<Self, ()> {\\n        match (c, self) {\\n            (\\'+\\' | \\'-\\', Self::FloatSign) => Ok(Self::FloatInit),\\n            (\\'+\\' | \\'-\\', Self::ExpSign) => Ok(Self::ExpInit),\\n            (\\'.\\', Self::FloatSign | Self::FloatInit) => Ok(Self::IntInit),\\n            (\\'.\\', Self::FloatNum) => Ok(Self::IntNum),\\n            (\\'e\\' | \\'E\\', Self::FloatNum | Self::IntNum) => Ok(Self::ExpSign),\\n            (\\'0\\'..=\\'9\\', Self::FloatSign | Self::FloatInit | Self::FloatNum) => Ok(Self::FloatNum),\\n            (\\'0\\'..=\\'9\\', Self::IntInit | Self::IntNum) => Ok(Self::IntNum),\\n            (\\'0\\'..=\\'9\\', Self::ExpSign | Self::ExpInit | Self::ExpNum) => Ok(Self::ExpNum),\\n            _ => Err(()),\\n        }\\n    }\\n\\n    pub fn is_valid_end_state(&self) -> bool {\\n        matches!(self, Self::FloatNum | Self::IntNum | Self::ExpNum)\\n    }\\n}\\n\\nimpl Solution {\\n    pub fn is_number(s: String) -> bool {\\n        let mut state = CheckState::FloatSign;\\n        for c in s.chars() {\\n            state = match state.accept(c) {\\n                Ok(new_state) => new_state,\\n                Err(()) => return false,\\n            };\\n        }\\n        state.is_valid_end_state()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nenum CheckState {\\n    FloatSign, // ACCEPTS: \\'+\\' | \\'-\\' | \\'.\\' | \\'0\\'..=\\'9\\'\\n    FloatInit, // ACCEPTS: \\'.\\' | \\'0\\'..=\\'9\\'\\n    FloatNum,  // ACCEPTS: \\'.\\' | \\'e\\' | \\'E\\' | \\'0\\'..=\\'9\\'\\n    IntInit,   // ACCEPTS: \\'0\\'..=\\'9\\'\\n    IntNum,    // ACCEPTS: \\'e\\' | \\'E\\' | \\'0\\'..=\\'9\\'\\n    ExpSign,   // ACCEPTS: \\'+\\' | \\'-\\' | \\'0\\'..=\\'9\\'\\n    ExpInit,   // ACCEPTS: \\'0\\'..=\\'9\\'\\n    ExpNum,    // ACCEPTS: \\'0\\'..=\\'9\\'\\n}\\n\\nimpl CheckState {\\n    pub fn accept(&self, c: char) -> Result<Self, ()> {\\n        match (c, self) {\\n            (\\'+\\' | \\'-\\', Self::FloatSign) => Ok(Self::FloatInit),\\n            (\\'+\\' | \\'-\\', Self::ExpSign) => Ok(Self::ExpInit),\\n            (\\'.\\', Self::FloatSign | Self::FloatInit) => Ok(Self::IntInit),\\n            (\\'.\\', Self::FloatNum) => Ok(Self::IntNum),\\n            (\\'e\\' | \\'E\\', Self::FloatNum | Self::IntNum) => Ok(Self::ExpSign),\\n            (\\'0\\'..=\\'9\\', Self::FloatSign | Self::FloatInit | Self::FloatNum) => Ok(Self::FloatNum),\\n            (\\'0\\'..=\\'9\\', Self::IntInit | Self::IntNum) => Ok(Self::IntNum),\\n            (\\'0\\'..=\\'9\\', Self::ExpSign | Self::ExpInit | Self::ExpNum) => Ok(Self::ExpNum),\\n            _ => Err(()),\\n        }\\n    }\\n\\n    pub fn is_valid_end_state(&self) -> bool {\\n        matches!(self, Self::FloatNum | Self::IntNum | Self::ExpNum)\\n    }\\n}\\n\\nimpl Solution {\\n    pub fn is_number(s: String) -> bool {\\n        let mut state = CheckState::FloatSign;\\n        for c in s.chars() {\\n            state = match state.accept(c) {\\n                Ok(new_state) => new_state,\\n                Err(()) => return false,\\n            };\\n        }\\n        state.is_valid_end_state()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3441039,
                "title": "100-fast-easy-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        int n = s.length();\\n        int i = 0;\\n\\n        // Skip leading white space\\n        while (i < n && isspace(s[i])) {\\n            i++;\\n        }\\n\\n        // Check optional sign\\n        if (i < n && (s[i] == \\'+\\' || s[i] == \\'-\\')) {\\n            i++;\\n        }\\n\\n        // Check digits before decimal point\\n        bool hasDigits = false;\\n        while (i < n && isdigit(s[i])) {\\n            i++;\\n            hasDigits = true;\\n        }\\n\\n        // Check optional decimal point and digits after it\\n        if (i < n && s[i] == \\'.\\') {\\n            i++;\\n            while (i < n && isdigit(s[i])) {\\n                i++;\\n                hasDigits = true;\\n            }\\n        }\\n\\n        // Check optional exponent part\\n        if (hasDigits && i < n && (s[i] == \\'e\\' || s[i] == \\'E\\')) {\\n            i++;\\n\\n            // Check optional sign in exponent\\n            if (i < n && (s[i] == \\'+\\' || s[i] == \\'-\\')) {\\n                i++;\\n            }\\n\\n            bool hasExponentDigits = false;\\n            while (i < n && isdigit(s[i])) {\\n                i++;\\n                hasExponentDigits = true;\\n            }\\n\\n            // The exponent must have at least one digit\\n            if (!hasExponentDigits) {\\n                return false;\\n            }\\n        }\\n\\n        // Check trailing white space\\n        while (i < n && isspace(s[i])) {\\n            i++;\\n        }\\n\\n        // The number is valid if we consumed the entire string and found at least one digit\\n        return i == n && hasDigits;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        int n = s.length();\\n        int i = 0;\\n\\n        // Skip leading white space\\n        while (i < n && isspace(s[i])) {\\n            i++;\\n        }\\n\\n        // Check optional sign\\n        if (i < n && (s[i] == \\'+\\' || s[i] == \\'-\\')) {\\n            i++;\\n        }\\n\\n        // Check digits before decimal point\\n        bool hasDigits = false;\\n        while (i < n && isdigit(s[i])) {\\n            i++;\\n            hasDigits = true;\\n        }\\n\\n        // Check optional decimal point and digits after it\\n        if (i < n && s[i] == \\'.\\') {\\n            i++;\\n            while (i < n && isdigit(s[i])) {\\n                i++;\\n                hasDigits = true;\\n            }\\n        }\\n\\n        // Check optional exponent part\\n        if (hasDigits && i < n && (s[i] == \\'e\\' || s[i] == \\'E\\')) {\\n            i++;\\n\\n            // Check optional sign in exponent\\n            if (i < n && (s[i] == \\'+\\' || s[i] == \\'-\\')) {\\n                i++;\\n            }\\n\\n            bool hasExponentDigits = false;\\n            while (i < n && isdigit(s[i])) {\\n                i++;\\n                hasExponentDigits = true;\\n            }\\n\\n            // The exponent must have at least one digit\\n            if (!hasExponentDigits) {\\n                return false;\\n            }\\n        }\\n\\n        // Check trailing white space\\n        while (i < n && isspace(s[i])) {\\n            i++;\\n        }\\n\\n        // The number is valid if we consumed the entire string and found at least one digit\\n        return i == n && hasDigits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3385213,
                "title": "python3-beating-94-83-easiest-smallest-understandable-solution",
                "content": "![image.png](https://assets.leetcode.com/users/images/b7d7f3c5-f6e6-4abf-bf2a-30b31c02be58_1680757051.6007316.png)\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def isNumber(self,s:str)->bool:\\n        try:\\n            float(s)\\n        except:\\n            return False\\n        return \"inf\" not in s.lower()               \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isNumber(self,s:str)->bool:\\n        try:\\n            float(s)\\n        except:\\n            return False\\n        return \"inf\" not in s.lower()               \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3307496,
                "title": "the-simplest-js-solution-in-one-line",
                "content": "idk how but it works\\nenjoy m8) \\n# Code\\n```\\nfunction isNumber(s) {\\n  return !/\\\\d/.test(s) && isNaN(+s[0]) ? false : !isNaN(+s);\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction isNumber(s) {\\n  return !/\\\\d/.test(s) && isNaN(+s[0]) ? false : !isNaN(+s);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3226571,
                "title": "c-simple-approach-98-92-runtime",
                "content": "\\n# Complexity\\n- Time complexity:\\n$$O(|s|)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\npublic class Solution \\n{\\n    public bool ReadInteger(string s, ref int index)\\n    {\\n        int i = index;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n            ++i;\\n        \\n        bool hasDigits = false;\\n        while (i < s.Length && Char.IsDigit(s[i]))\\n        {\\n            ++i;\\n            hasDigits = true;\\n        }\\n\\n        if (hasDigits && (i == s.Length || s[i] != \\'.\\'))\\n        {\\n            index = i;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    public bool ReadDecimal(string s, ref int index)\\n    {\\n        int i = index;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n            ++i;\\n        \\n        bool hasLeftDigits = false;\\n        while (i < s.Length && Char.IsDigit(s[i]))\\n        {\\n            ++i;\\n            hasLeftDigits = true;\\n        }\\n\\n        if (i == s.Length || s[i] != \\'.\\')\\n            return false;\\n\\n        ++i;\\n        bool hasRightDigits = false;\\n        while (i < s.Length && Char.IsDigit(s[i]))\\n        {\\n            ++i;\\n            hasRightDigits = true;\\n        }\\n\\n        if (hasLeftDigits || hasRightDigits)\\n        {\\n            index = i;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    public bool IsNumber(string s) \\n    {\\n        int i = 0;\\n        if (ReadInteger(s, ref i) || ReadDecimal(s, ref i))\\n        {\\n            if (i == s.Length)\\n                return true;\\n            if (Char.ToLower(s[i]) != \\'e\\')\\n                return false;\\n            ++i;\\n            if (ReadInteger(s, ref i) && i == s.Length)\\n                return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n```\\nhttps://leetcode.com/submissions/detail/904338378/\\n",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public bool ReadInteger(string s, ref int index)\\n    {\\n        int i = index;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n            ++i;\\n        \\n        bool hasDigits = false;\\n        while (i < s.Length && Char.IsDigit(s[i]))\\n        {\\n            ++i;\\n            hasDigits = true;\\n        }\\n\\n        if (hasDigits && (i == s.Length || s[i] != \\'.\\'))\\n        {\\n            index = i;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    public bool ReadDecimal(string s, ref int index)\\n    {\\n        int i = index;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n            ++i;\\n        \\n        bool hasLeftDigits = false;\\n        while (i < s.Length && Char.IsDigit(s[i]))\\n        {\\n            ++i;\\n            hasLeftDigits = true;\\n        }\\n\\n        if (i == s.Length || s[i] != \\'.\\')\\n            return false;\\n\\n        ++i;\\n        bool hasRightDigits = false;\\n        while (i < s.Length && Char.IsDigit(s[i]))\\n        {\\n            ++i;\\n            hasRightDigits = true;\\n        }\\n\\n        if (hasLeftDigits || hasRightDigits)\\n        {\\n            index = i;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    public bool IsNumber(string s) \\n    {\\n        int i = 0;\\n        if (ReadInteger(s, ref i) || ReadDecimal(s, ref i))\\n        {\\n            if (i == s.Length)\\n                return true;\\n            if (Char.ToLower(s[i]) != \\'e\\')\\n                return false;\\n            ++i;\\n            if (ReadInteger(s, ref i) && i == s.Length)\\n                return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3071699,
                "title": "java-ugly-3ms-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        if (s.length() == 1) return Character.isDigit(s.charAt(0));\\n        s = s.toLowerCase();\\n        int countE = 0, countLetter = 0, countDot = 0, countSign = 0, countSymbol = 0, countDigit = 0;\\n        for (char c : s.toCharArray()) {\\n            if (c == \\'e\\') countE++;\\n            else if (c == \\'.\\') countDot++;\\n            else if (Character.isLowerCase(c)) countLetter++;\\n            else if (c == \\'-\\' || c == \\'+\\') countSign++;\\n            else if (Character.isDigit(c)) countDigit++;\\n            else countSymbol++;\\n        }\\n        if (countE > 1 || countDot > 1 || countLetter > 0 \\n                || countSign > 2 || countSymbol > 0 || countDigit < s.length() - 4) return false;\\n\\n        String[] arr = s.split(\"e\");\\n        boolean containsE = countE > 0;\\n        if (arr.length > 2) return false;\\n        if (arr.length == 2) {\\n            String two = arr[1];\\n            if (two.length() == 1 && !Character.isDigit(two.charAt(0))) return false;\\n            if (two.length() > 0) {\\n                if (!(two.charAt(0) == \\'+\\' || two.charAt(0) == \\'-\\' || Character.isDigit(two.charAt(0))))\\n                    return false;\\n                for (int i = 1; i < two.length(); i++) {\\n                    char c = two.charAt(i);\\n                    if (!Character.isDigit(c)) return false;\\n                }\\n            }\\n        }\\n        if ((arr.length == 1 || arr[0].length() == 0) && containsE) return false;\\n        String one = arr[0];\\n        if (one.length() > 0) {\\n            if (!(one.charAt(0) == \\'+\\' || one.charAt(0) == \\'-\\' || one.charAt(0) == \\'.\\' || Character.isDigit(one.charAt(0))))\\n                return false;\\n            String[] arrOne = one.split(\"\\\\\\\\.\");\\n            if (arrOne.length > 2) return false;\\n            if (arrOne.length == 2) {\\n                String oneTwo = arrOne[1];\\n                for (int i = 0; i < oneTwo.length(); i++) {\\n                    char c = oneTwo.charAt(i);\\n                    if (!Character.isDigit(c)) return false;\\n                }\\n            }\\n            if (arrOne.length < 1) return false;\\n            String oneOne = arrOne[0];\\n            if (oneOne.length() == 1 && !Character.isDigit(oneOne.charAt(0)) && arrOne.length == 1) return false;\\n            for (int i = 1; i < oneOne.length(); i++) {\\n                char c = oneOne.charAt(i);\\n                if (!Character.isDigit(c)) return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        if (s.length() == 1) return Character.isDigit(s.charAt(0));\\n        s = s.toLowerCase();\\n        int countE = 0, countLetter = 0, countDot = 0, countSign = 0, countSymbol = 0, countDigit = 0;\\n        for (char c : s.toCharArray()) {\\n            if (c == \\'e\\') countE++;\\n            else if (c == \\'.\\') countDot++;\\n            else if (Character.isLowerCase(c)) countLetter++;\\n            else if (c == \\'-\\' || c == \\'+\\') countSign++;\\n            else if (Character.isDigit(c)) countDigit++;\\n            else countSymbol++;\\n        }\\n        if (countE > 1 || countDot > 1 || countLetter > 0 \\n                || countSign > 2 || countSymbol > 0 || countDigit < s.length() - 4) return false;\\n\\n        String[] arr = s.split(\"e\");\\n        boolean containsE = countE > 0;\\n        if (arr.length > 2) return false;\\n        if (arr.length == 2) {\\n            String two = arr[1];\\n            if (two.length() == 1 && !Character.isDigit(two.charAt(0))) return false;\\n            if (two.length() > 0) {\\n                if (!(two.charAt(0) == \\'+\\' || two.charAt(0) == \\'-\\' || Character.isDigit(two.charAt(0))))\\n                    return false;\\n                for (int i = 1; i < two.length(); i++) {\\n                    char c = two.charAt(i);\\n                    if (!Character.isDigit(c)) return false;\\n                }\\n            }\\n        }\\n        if ((arr.length == 1 || arr[0].length() == 0) && containsE) return false;\\n        String one = arr[0];\\n        if (one.length() > 0) {\\n            if (!(one.charAt(0) == \\'+\\' || one.charAt(0) == \\'-\\' || one.charAt(0) == \\'.\\' || Character.isDigit(one.charAt(0))))\\n                return false;\\n            String[] arrOne = one.split(\"\\\\\\\\.\");\\n            if (arrOne.length > 2) return false;\\n            if (arrOne.length == 2) {\\n                String oneTwo = arrOne[1];\\n                for (int i = 0; i < oneTwo.length(); i++) {\\n                    char c = oneTwo.charAt(i);\\n                    if (!Character.isDigit(c)) return false;\\n                }\\n            }\\n            if (arrOne.length < 1) return false;\\n            String oneOne = arrOne[0];\\n            if (oneOne.length() == 1 && !Character.isDigit(oneOne.charAt(0)) && arrOne.length == 1) return false;\\n            for (int i = 1; i < oneOne.length(); i++) {\\n                char c = oneOne.charAt(i);\\n                if (!Character.isDigit(c)) return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2941513,
                "title": "java",
                "content": "# Please upvote if you like my solution .\\n\\n# Code\\n```\\nimport java.math.BigDecimal;\\nimport java.math.BigInteger;\\n\\npublic class Solution {\\n        public boolean isNumber(String s) {\\n    \\ts = s.trim();\\n    \\tif(s.length() == 0) {\\n    \\t\\treturn false;\\n    \\t}\\n    \\tboolean result = true;\\n        try{\\n        \\tnew BigDecimal(s);\\n        } catch(Exception e) {\\n        \\tresult = false;\\n        }\\n        if(s.contains(\"e\")) {\\n        \\tint firstIndex = s.indexOf(\"e\");\\n        \\tint lastIndex = s.lastIndexOf(\"e\");\\n        \\tif(lastIndex != firstIndex) {\\n        \\t\\treturn false;\\n        \\t}\\n        \\ttry{\\n        \\t\\tnew BigDecimal(s.substring(0, firstIndex));\\n        \\t\\tnew BigInteger(s.substring(firstIndex + 1));\\n        \\t\\tresult = true;\\n        \\t} catch(Exception e) {\\n            \\tresult = false;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```\\n\\nIf you really found my solution helpful please upvote it, as it motivates me to post such kind of codes.\\nLet me know in comment if i can do better.\\nLets connect on Linkedin https://www.linkedin.com/in/kailas-rathod/",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.math.BigDecimal;\\nimport java.math.BigInteger;\\n\\npublic class Solution {\\n        public boolean isNumber(String s) {\\n    \\ts = s.trim();\\n    \\tif(s.length() == 0) {\\n    \\t\\treturn false;\\n    \\t}\\n    \\tboolean result = true;\\n        try{\\n        \\tnew BigDecimal(s);\\n        } catch(Exception e) {\\n        \\tresult = false;\\n        }\\n        if(s.contains(\"e\")) {\\n        \\tint firstIndex = s.indexOf(\"e\");\\n        \\tint lastIndex = s.lastIndexOf(\"e\");\\n        \\tif(lastIndex != firstIndex) {\\n        \\t\\treturn false;\\n        \\t}\\n        \\ttry{\\n        \\t\\tnew BigDecimal(s.substring(0, firstIndex));\\n        \\t\\tnew BigInteger(s.substring(firstIndex + 1));\\n        \\t\\tresult = true;\\n        \\t} catch(Exception e) {\\n            \\tresult = false;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2751538,
                "title": "java-solution-using-regex",
                "content": "```\\nPatter maching concept:\\n**Number Validation:**\\n Pattern:[+-]?((\\\\\\\\d+)|((\\\\\\\\d+\\\\\\\\.)|(\\\\\\\\d+\\\\\\\\.\\\\\\\\d+)|(\\\\\\\\.\\\\\\\\d+)))(e[+-]?\\\\\\\\d+)?\\n \\n Program:\\n import java.util.*;\\nimport java.util.regex.*;\\nclass Solution {\\n    public boolean isNumber(String s) {\\n    s=s.toLowerCase();\\n     Pattern p=Pattern.compile(\"[+-]?((\\\\\\\\d+)|((\\\\\\\\d+\\\\\\\\.)|(\\\\\\\\d+\\\\\\\\.\\\\\\\\d+)|(\\\\\\\\.\\\\\\\\d+)))(e[+-]?\\\\\\\\d+)?\");\\n     Matcher m=p.matcher(s);\\n     boolean b=m.matches();\\n     if(b)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n \\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nPatter maching concept:\\n**Number Validation:**\\n Pattern:[+-]?((\\\\\\\\d+)|((\\\\\\\\d+\\\\\\\\.)|(\\\\\\\\d+\\\\\\\\.\\\\\\\\d+)|(\\\\\\\\.\\\\\\\\d+)))(e[+-]?\\\\\\\\d+)?\\n \\n Program:\\n import java.util.*;\\nimport java.util.regex.*;\\nclass Solution {\\n    public boolean isNumber(String s) {\\n    s=s.toLowerCase();\\n     Pattern p=Pattern.compile(\"[+-]?((\\\\\\\\d+)|((\\\\\\\\d+\\\\\\\\.)|(\\\\\\\\d+\\\\\\\\.\\\\\\\\d+)|(\\\\\\\\.\\\\\\\\d+)))(e[+-]?\\\\\\\\d+)?\");\\n     Matcher m=p.matcher(s);\\n     boolean b=m.matches();\\n     if(b)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2478524,
                "title": "this-problem-is-a-trick-question-it-has-the-most-trivial-solution-ever",
                "content": "At first I thought it was as trivial as using regular expressions but then I thought about it and it\\'s actually easier than that. \\nJust convert string to float and check whether it passes. \\nEvery programming language already has a function that verifies whether a string is a valid number!\\nIf this is an interview question, it would test your creativity much more than your coding skills.\\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        if \\'inf\\' in s.lower():\\n            return False\\n        try:\\n            float(s)\\n            return True\\n        except:\\n            return False\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        if \\'inf\\' in s.lower():\\n            return False\\n        try:\\n            float(s)\\n            return True\\n        except:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2360264,
                "title": "java-solution",
                "content": "```\\n    /**\\n     * Given a string, return true if it is a valid number.\\n     * Time Complexity: O(n).\\n     * Space Complexity: O(1).\\n     *\\n     * @param s A string consists of only English letters (both uppercase and lowercase),\\n     *          digits (0-9), plus \\'+\\', minus \\'-\\', or dot \\'.\\'\\n     * @return true if the given string is a valid number, false otherwise.\\n     */\\n    public boolean isValid(String s) {\\n        boolean hasDigit = false;\\n        boolean hasExponent = false;\\n        boolean hasDecimal = false;\\n        boolean needDigitAfterExponent = false;\\n\\n        s = s.trim();\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (c == \\'+\\' || c == \\'-\\') {\\n                if (i != 0 && s.charAt(i - 1) != \\'E\\' && s.charAt(i - 1) != \\'e\\') return false;\\n\\n            } else if (Character.isDigit(c)) {\\n                hasDigit = true;\\n                needDigitAfterExponent = false;\\n\\n            } else if (c == \\'.\\') {\\n                if (hasDecimal || hasExponent) return false;\\n                hasDecimal = true;\\n\\n            } else if (c == \\'E\\' || c == \\'e\\') {\\n                if (hasExponent || !hasDigit) return false;\\n                hasExponent = true;\\n                needDigitAfterExponent = true;\\n\\n            } else return false;\\n        }\\n\\n        return !needDigitAfterExponent && hasDigit;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    /**\\n     * Given a string, return true if it is a valid number.\\n     * Time Complexity: O(n).\\n     * Space Complexity: O(1).\\n     *\\n     * @param s A string consists of only English letters (both uppercase and lowercase),\\n     *          digits (0-9), plus \\'+\\', minus \\'-\\', or dot \\'.\\'\\n     * @return true if the given string is a valid number, false otherwise.\\n     */\\n    public boolean isValid(String s) {\\n        boolean hasDigit = false;\\n        boolean hasExponent = false;\\n        boolean hasDecimal = false;\\n        boolean needDigitAfterExponent = false;\\n\\n        s = s.trim();\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (c == \\'+\\' || c == \\'-\\') {\\n                if (i != 0 && s.charAt(i - 1) != \\'E\\' && s.charAt(i - 1) != \\'e\\') return false;\\n\\n            } else if (Character.isDigit(c)) {\\n                hasDigit = true;\\n                needDigitAfterExponent = false;\\n\\n            } else if (c == \\'.\\') {\\n                if (hasDecimal || hasExponent) return false;\\n                hasDecimal = true;\\n\\n            } else if (c == \\'E\\' || c == \\'e\\') {\\n                if (hasExponent || !hasDigit) return false;\\n                hasExponent = true;\\n                needDigitAfterExponent = true;\\n\\n            } else return false;\\n        }\\n\\n        return !needDigitAfterExponent && hasDigit;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2305697,
                "title": "javascript-1-liner",
                "content": "```\\nvar isNumber = function(s) {\\n    return s.indexOf(\\'Infinity\\') === -1 && !isNaN(+s);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar isNumber = function(s) {\\n    return s.indexOf(\\'Infinity\\') === -1 && !isNaN(+s);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2270077,
                "title": "regex",
                "content": "This is self-explantory, using regexp.\\nThe only problems are: \\n* I don\\'t know what\\'s O() on this :) Yet it runs faster than most submissions.\\n* It eats quite a bit of memory, more than most submissions\\n\\n\\n```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        import re\\n        m = re.match(\\'^(\\\\+|-)?((\\\\d+\\\\.?\\\\d*)|(\\\\d*\\\\.?\\\\d+))((e|E)(\\\\+|-)?\\\\d+)?$\\', s)\\n        return not (m is None)\\n```\\n\\nWe can make this even faster and leaner by \\'cheating\\': precompile the pattern, because that\\'s how it\\'s used in practice anyways:\\n\\n```\\nclass Solution:\\n\\n    pat = re.compile(\\'^(\\\\+|-)?((\\\\d+\\\\.?\\\\d*)|(\\\\d*\\\\.?\\\\d+))((e|E)(\\\\+|-)?\\\\d+)?$\\')\\n    \\n    def isNumber(self, s: str) -> bool:\\n        import re\\n        m = self.pat.match(s)\\n        return not (m is None)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n        import re\\n        m = re.match(\\'^(\\\\+|-)?((\\\\d+\\\\.?\\\\d*)|(\\\\d*\\\\.?\\\\d+))((e|E)(\\\\+|-)?\\\\d+)?$\\', s)\\n        return not (m is None)\\n```\n```\\nclass Solution:\\n\\n    pat = re.compile(\\'^(\\\\+|-)?((\\\\d+\\\\.?\\\\d*)|(\\\\d*\\\\.?\\\\d+))((e|E)(\\\\+|-)?\\\\d+)?$\\')\\n    \\n    def isNumber(self, s: str) -> bool:\\n        import re\\n        m = self.pat.match(s)\\n        return not (m is None)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2072253,
                "title": "o-n-approach-in-cpp-faster-that-100",
                "content": "Here we need to follow some basic rules of number formulation... The idea is to segregate these rules in 4 parts...\\nThe first part deals with the character being a digit\\nThe second part deals with the character being a plus or a minus sign\\nThe third part is when the character is decimal dot\\nand the last part is when the character is exponent..\\n\\n```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        bool digit=false, e=false, dot=false;\\n        int sign=0;\\n        \\n        for(int i=0;i<s.size();i++) {\\n            char c = s[i];\\n            \\n            //Digit\\n            if(c>=\\'0\\' && c<=\\'9\\') digit=true;\\n            else if(c==\\'+\\' || c==\\'-\\') {\\n                //Sign\\n                //There can not be more than two occurances of Plus or Minus\\n                if(sign==2) return false;\\n                \\n                //If not at the beginning, a Plus or Minus can only come after an e or E\\n                if(i>0 && (s[i-1]!=\\'e\\'&&s[i-1]!=\\'E\\')) return false;\\n                \\n                //Plus or Minus cannot be the last occurance\\n                if(i==s.size()-1) return false;\\n            } else if(c==\\'.\\') {\\n                //Dot\\n                \\n                //Decimal cannot occur after an e or E or after any other dot\\n                if(e||dot) return false;\\n                \\n                //Decimal Occuring at the end without occurance of the digit\\n                if(i==s.size()-1 && !digit) return false;\\n                dot=true;\\n            } else if(c==\\'e\\' || c==\\'E\\'){\\n                //e occuring after another e or without occurance of a digit or at the end\\n                if(e || !digit || i==s.size()-1) return false;\\n                e=true;\\n            } else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isNumber(string s) {\\n        bool digit=false, e=false, dot=false;\\n        int sign=0;\\n        \\n        for(int i=0;i<s.size();i++) {\\n            char c = s[i];\\n            \\n            //Digit\\n            if(c>=\\'0\\' && c<=\\'9\\') digit=true;\\n            else if(c==\\'+\\' || c==\\'-\\') {\\n                //Sign\\n                //There can not be more than two occurances of Plus or Minus\\n                if(sign==2) return false;\\n                \\n                //If not at the beginning, a Plus or Minus can only come after an e or E\\n                if(i>0 && (s[i-1]!=\\'e\\'&&s[i-1]!=\\'E\\')) return false;\\n                \\n                //Plus or Minus cannot be the last occurance\\n                if(i==s.size()-1) return false;\\n            } else if(c==\\'.\\') {\\n                //Dot\\n                \\n                //Decimal cannot occur after an e or E or after any other dot\\n                if(e||dot) return false;\\n                \\n                //Decimal Occuring at the end without occurance of the digit\\n                if(i==s.size()-1 && !digit) return false;\\n                dot=true;\\n            } else if(c==\\'e\\' || c==\\'E\\'){\\n                //e occuring after another e or without occurance of a digit or at the end\\n                if(e || !digit || i==s.size()-1) return false;\\n                e=true;\\n            } else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2057764,
                "title": "java-regex-solution",
                "content": "Please check out my solution of Testcase Oriented Programming (TOP)  :(\\n```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        String decimal1 = \"[+-]?\\\\\\\\d*\\\\\\\\.\\\\\\\\d+[Ee][+-]?\\\\\\\\d+|[+-]?\\\\\\\\d+\\\\\\\\.\\\\\\\\d*[Ee][+-]?\\\\\\\\d+\";\\n        String decimal2 = \"[+-]?\\\\\\\\d*\\\\\\\\.\\\\\\\\d+|[+-]?\\\\\\\\d+\\\\\\\\.\\\\\\\\d*\";\\n        String integer = \"[+-]?\\\\\\\\d+|[+-]?\\\\\\\\d+[Ee][+-]?\\\\\\\\d+\";\\n        return java.util.regex.Pattern.matches(decimal1, s)||java.util.regex.Pattern.matches(decimal2, s)||java.util.regex.Pattern.matches(integer, s);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        String decimal1 = \"[+-]?\\\\\\\\d*\\\\\\\\.\\\\\\\\d+[Ee][+-]?\\\\\\\\d+|[+-]?\\\\\\\\d+\\\\\\\\.\\\\\\\\d*[Ee][+-]?\\\\\\\\d+\";\\n        String decimal2 = \"[+-]?\\\\\\\\d*\\\\\\\\.\\\\\\\\d+|[+-]?\\\\\\\\d+\\\\\\\\.\\\\\\\\d*\";\\n        String integer = \"[+-]?\\\\\\\\d+|[+-]?\\\\\\\\d+[Ee][+-]?\\\\\\\\d+\";\\n        return java.util.regex.Pattern.matches(decimal1, s)||java.util.regex.Pattern.matches(decimal2, s)||java.util.regex.Pattern.matches(integer, s);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2039049,
                "title": "java-explanation-given-on-comments-quick-to-understand",
                "content": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        if(s==null)\\n            return false;\\n        \\n        s = s.trim();\\n        \\n        boolean digitSeen = false;\\n        boolean decimalSeen = false;\\n        boolean eSeen = false;\\n        \\n        for(int i=0;i<s.length();i++){\\n            \\n            //digit check\\n            if(Character.isDigit(s.charAt(i))){\\n                digitSeen = true;\\n            }\\n            \\n            else if(s.charAt(i)== \\'.\\'){\\n                \\n                //we cannot have multiple decimal or decimal after e symbol\\n                if(decimalSeen  || eSeen) return false;\\n                \\n                decimalSeen = true;\\n            }\\n            \\n            else if(s.charAt(i)==\\'e\\' || s.charAt(i)==\\'E\\'){\\n                \\n                //we cannot have multiple e\\'s, it cannot be at the end, it cannot start without reading a digit\\n                if(eSeen || i == s.length()-1 || !digitSeen)  return false;\\n                    \\n                eSeen = true;\\n            }\\n            else if(s.charAt(i)==\\'+\\' || s.charAt(i)==\\'-\\'){\\n                \\n                //we cannot have it at the end\\n                //can only have only if it right after symbol e\\n                if((i!=0 && s.charAt(i-1)!=\\'e\\') || i == s.length()-1) return false;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        \\n        //if we don\\'t see any digit, then its not a valid number, so lets return digitSeen\\n        return digitSeen;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        if(s==null)\\n            return false;\\n        \\n        s = s.trim();\\n        \\n        boolean digitSeen = false;\\n        boolean decimalSeen = false;\\n        boolean eSeen = false;\\n        \\n        for(int i=0;i<s.length();i++){\\n            \\n            //digit check\\n            if(Character.isDigit(s.charAt(i))){\\n                digitSeen = true;\\n            }\\n            \\n            else if(s.charAt(i)== \\'.\\'){\\n                \\n                //we cannot have multiple decimal or decimal after e symbol\\n                if(decimalSeen  || eSeen) return false;\\n                \\n                decimalSeen = true;\\n            }\\n            \\n            else if(s.charAt(i)==\\'e\\' || s.charAt(i)==\\'E\\'){\\n                \\n                //we cannot have multiple e\\'s, it cannot be at the end, it cannot start without reading a digit\\n                if(eSeen || i == s.length()-1 || !digitSeen)  return false;\\n                    \\n                eSeen = true;\\n            }\\n            else if(s.charAt(i)==\\'+\\' || s.charAt(i)==\\'-\\'){\\n                \\n                //we cannot have it at the end\\n                //can only have only if it right after symbol e\\n                if((i!=0 && s.charAt(i-1)!=\\'e\\') || i == s.length()-1) return false;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        \\n        //if we don\\'t see any digit, then its not a valid number, so lets return digitSeen\\n        return digitSeen;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1930074,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        boolean seenDigit = false;\\n        boolean seenDot = false;\\n        boolean seenExp = false;\\n        boolean seenSign = false;\\n        for(int i = 0; i<s.length(); i++) {\\n            char ch = s.charAt(i);\\n            if(Character.isDigit(ch)) {\\n                seenDigit = true;\\n            } else if(ch == \\'+\\' || ch == \\'-\\') {\\n                if(i > 0 && s.charAt(i-1) != \\'e\\' && s.charAt(i-1) != \\'E\\') return false;\\n                seenSign = true;\\n            } else if(ch == \\'e\\' || ch == \\'E\\') {\\n                if(!seenDigit || seenExp) return false;\\n                seenExp = true;\\n                seenDigit = false;\\n            } else if(ch == \\'.\\') {\\n                if(seenDot || seenExp) return false;\\n                seenDot = true;\\n            } else {\\n                return false;\\n            }\\n        }\\n        return seenDigit;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isNumber(String s) {\\n        boolean seenDigit = false;\\n        boolean seenDot = false;\\n        boolean seenExp = false;\\n        boolean seenSign = false;\\n        for(int i = 0; i<s.length(); i++) {\\n            char ch = s.charAt(i);\\n            if(Character.isDigit(ch)) {\\n                seenDigit = true;\\n            } else if(ch == \\'+\\' || ch == \\'-\\') {\\n                if(i > 0 && s.charAt(i-1) != \\'e\\' && s.charAt(i-1) != \\'E\\') return false;\\n                seenSign = true;\\n            } else if(ch == \\'e\\' || ch == \\'E\\') {\\n                if(!seenDigit || seenExp) return false;\\n                seenExp = true;\\n                seenDigit = false;\\n            } else if(ch == \\'.\\') {\\n                if(seenDot || seenExp) return false;\\n                seenDot = true;\\n            } else {\\n                return false;\\n            }\\n        }\\n        return seenDigit;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1687069,
                "title": "parser-combinator-approach-typescript-elegant-and-easy-tweak-and-understand",
                "content": "```\\n// A parser takes a string and tries to find what it is\\n// looking for at the beginning. It returns the remaining\\n// string or undefined if the parsing failed. For example\\n// a digit parser when applied to \"1abc\" would return \"abc\".\\n// The same parser when applied to \"abc\" would return undefined.\\ntype Parser = (src: string) => string | undefined;\\n\\n// A simple parser that looks for a fixed piece of text.\\nconst text =\\n  (find: string): Parser =>\\n  (src: string) =>\\n    src.startsWith(find) ? src.substring(find.length) : undefined;\\n\\nconst choice =\\n  (...pp: Parser[]): Parser =>\\n  (src: string) =>\\n    pp.map((p) => p(src)).find((i) => i !== undefined);\\n\\nconst maybe = (p: Parser) => (src: string) => p(src) ?? src;\\n\\n// A sequence; apply each parser in order.\\nconst seq =\\n  (...pp: Parser[]) =>\\n  (src: string) => {\\n    let remain = src;\\n    for (const p of pp) {\\n      const after = p(remain);\\n      if (after === undefined) return undefined;\\n      else remain = after;\\n    }\\n    return remain;\\n  };\\n\\nconst zeroOrMore = (pp: Parser) => (src: string) => {\\n  let remain: string = src;\\n  do {\\n    const after = pp(remain);\\n    if (after === undefined) return remain;\\n    else remain = after;\\n  } while (true);\\n};\\n\\nconst oneOrMore = (p: Parser) => seq(p, zeroOrMore(p));\\n\\nconst notNext = (p: Parser) => (src: string) => p(src) !== undefined ? undefined : src;\\n\\nconst endText = (src: string) => (src === \"\" ? src : undefined);\\n\\n// faster than choice with 10 options\\nconst zeroToNine = (src: string) => (src[0] >= \"0\" && src[0] <= \"9\" ? src.substring(1) : undefined);\\n\\nconst digits = oneOrMore(zeroToNine);\\n\\nconst sign = choice(text(\"+\"), text(\"-\"));\\n\\nconst integer = seq(maybe(sign), oneOrMore(zeroToNine));\\n\\nconst dot = text(\".\");\\nconst decimal = seq(maybe(sign), choice(seq(digits, dot, maybe(digits)), seq(dot, digits)));\\n\\nconst e = choice(text(\"e\"), text(\"E\"));\\n\\nconst validNumber = seq(\\n  choice(decimal, integer),\\n  notNext(sign),\\n  maybe(seq(maybe(e), integer)),\\n  endText\\n);\\n\\nconst isNumber = (s: string): boolean => validNumber(s) !== undefined;\\n```",
                "solutionTags": [],
                "code": "```\\n// A parser takes a string and tries to find what it is\\n// looking for at the beginning. It returns the remaining\\n// string or undefined if the parsing failed. For example\\n// a digit parser when applied to \"1abc\" would return \"abc\".\\n// The same parser when applied to \"abc\" would return undefined.\\ntype Parser = (src: string) => string | undefined;\\n\\n// A simple parser that looks for a fixed piece of text.\\nconst text =\\n  (find: string): Parser =>\\n  (src: string) =>\\n    src.startsWith(find) ? src.substring(find.length) : undefined;\\n\\nconst choice =\\n  (...pp: Parser[]): Parser =>\\n  (src: string) =>\\n    pp.map((p) => p(src)).find((i) => i !== undefined);\\n\\nconst maybe = (p: Parser) => (src: string) => p(src) ?? src;\\n\\n// A sequence; apply each parser in order.\\nconst seq =\\n  (...pp: Parser[]) =>\\n  (src: string) => {\\n    let remain = src;\\n    for (const p of pp) {\\n      const after = p(remain);\\n      if (after === undefined) return undefined;\\n      else remain = after;\\n    }\\n    return remain;\\n  };\\n\\nconst zeroOrMore = (pp: Parser) => (src: string) => {\\n  let remain: string = src;\\n  do {\\n    const after = pp(remain);\\n    if (after === undefined) return remain;\\n    else remain = after;\\n  } while (true);\\n};\\n\\nconst oneOrMore = (p: Parser) => seq(p, zeroOrMore(p));\\n\\nconst notNext = (p: Parser) => (src: string) => p(src) !== undefined ? undefined : src;\\n\\nconst endText = (src: string) => (src === \"\" ? src : undefined);\\n\\n// faster than choice with 10 options\\nconst zeroToNine = (src: string) => (src[0] >= \"0\" && src[0] <= \"9\" ? src.substring(1) : undefined);\\n\\nconst digits = oneOrMore(zeroToNine);\\n\\nconst sign = choice(text(\"+\"), text(\"-\"));\\n\\nconst integer = seq(maybe(sign), oneOrMore(zeroToNine));\\n\\nconst dot = text(\".\");\\nconst decimal = seq(maybe(sign), choice(seq(digits, dot, maybe(digits)), seq(dot, digits)));\\n\\nconst e = choice(text(\"e\"), text(\"E\"));\\n\\nconst validNumber = seq(\\n  choice(decimal, integer),\\n  notNext(sign),\\n  maybe(seq(maybe(e), integer)),\\n  endText\\n);\\n\\nconst isNumber = (s: string): boolean => validNumber(s) !== undefined;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1676447,
                "title": "python3-simple-regex-solution",
                "content": "With regex, the problem becomes trivial as you only need to convert the definitions of int, decimal and \"valid number\" into an equivalent pattern. \\n```\\n    def isNumber(self, s: str) -> bool:\\n        import re\\n        int_patt = \"[+-]?\\\\d+\"\\n        dec_patt = \"[+-]?(\\\\d*\\\\.\\\\d+|\\\\d+\\\\.\\\\d*)\"\\n        return re.match(f\"^({int_patt}|{dec_patt})([eE]{int_patt})?$\", s)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n    def isNumber(self, s: str) -> bool:\\n        import re\\n        int_patt = \"[+-]?\\\\d+\"\\n        dec_patt = \"[+-]?(\\\\d*\\\\.\\\\d+|\\\\d+\\\\.\\\\d*)\"\\n        return re.match(f\"^({int_patt}|{dec_patt})([eE]{int_patt})?$\", s)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1674856,
                "title": "readable-clean-python-solution",
                "content": "Think of it as a trap game: We set traps, and we try to fall our input into traps, if possible.\\n\\n\\n```\\xA0\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n\\n\\t\\tsigns = {\\'+\\', \\'-\\'}\\n        exponents = {\\'E\\', \\'e\\'}\\n        DOT = \\'.\\'\\n\\n        seen_digit, seen_exponent, seen_dot = False, False, False\\n\\n        for i, c in enumerate(s):\\n            # [1] trap routines: early return if we fall into any trap            \\n            if c in signs and i>0 and s[i-1] not in exponents:\\n                return False  # invalid sign trap\\n            if c in exponents and (seen_exponent or not seen_digit):\\n                return False  # invalid exponent trap\\n            if c == DOT and (seen_dot or seen_exponent):\\n                return False  # invalid DOT trap\\n\\t\\t\\t\\t\\n            # [2] we successfully passed traps. now, set flags for future traps \\n            if c in digits:\\n                seen_digit = True\\n            elif c in exponents:\\n                seen_exponent = True\\n                seen_digit = False\\n            elif c == DOT:\\n                seen_dot = True\\n            elif c in signs:\\n                pass  # we did sign trap before. NOOP\\n            else:\\n                return False  # unrecognized character: terminate trap game\\n\\n        return seen_digit\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\xA0\\nclass Solution:\\n    def isNumber(self, s: str) -> bool:\\n\\n\\t\\tsigns = {\\'+\\', \\'-\\'}\\n        exponents = {\\'E\\', \\'e\\'}\\n        DOT = \\'.\\'\\n\\n        seen_digit, seen_exponent, seen_dot = False, False, False\\n\\n        for i, c in enumerate(s):\\n            # [1] trap routines: early return if we fall into any trap            \\n            if c in signs and i>0 and s[i-1] not in exponents:\\n                return False  # invalid sign trap\\n            if c in exponents and (seen_exponent or not seen_digit):\\n                return False  # invalid exponent trap\\n            if c == DOT and (seen_dot or seen_exponent):\\n                return False  # invalid DOT trap\\n\\t\\t\\t\\t\\n            # [2] we successfully passed traps. now, set flags for future traps \\n            if c in digits:\\n                seen_digit = True\\n            elif c in exponents:\\n                seen_exponent = True\\n                seen_digit = False\\n            elif c == DOT:\\n                seen_dot = True\\n            elif c in signs:\\n                pass  # we did sign trap before. NOOP\\n            else:\\n                return False  # unrecognized character: terminate trap game\\n\\n        return seen_digit\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1462480,
                "title": "java-finite-state-automaton",
                "content": "We can use Finite State Automaton to solve the problem. The FSA contains several states and the conditions to jump between states.\\nExamples of states could be waiting for a digit after getting a dot, a \\'E\\' notation or a sign, waiting for a \\'e\\' after getting a digit etc.\\nThe each character is what we depend on to decide how to transfer between two states.\\nWhen we traverse over the string and find out it represents a valid integer, a valid decimal or a valid \\'E\\' notated number, which are the state 3,4,5 in the following graph, we\\'ll return true. Otherwise return false.\\n![image](https://assets.leetcode.com/users/images/573a9f90-e8c3-448c-bda5-23ca530fc7cb_1631593182.6759276.jpeg)\\n\\n\\n```\\nclass Solution {\\n  public boolean isNumber(String s) {\\n    Map<Integer, Map<String, Integer>> dfa = new HashMap();\\n    Map<String, Integer> state1 = new HashMap();\\n    state1.put(\"sign\", 2);\\n    state1.put(\"digit\", 3);\\n    state1.put(\"dot\", 7);\\n    Map<String, Integer> state2 = new HashMap();\\n    state2.put(\"digit\", 3);\\n    state2.put(\"dot\", 7);\\n    Map<String, Integer> state3 = new HashMap();\\n    state3.put(\"digit\", 3);\\n    state3.put(\"dot\", 5);\\n    state3.put(\"E\", 8);\\n    Map<String, Integer> state4 = new HashMap();\\n    state4.put(\"digit\", 4);\\n    Map<String, Integer> state5 = new HashMap();\\n    state5.put(\"digit\", 5);\\n    state5.put(\"E\", 8);\\n    Map<String, Integer> state6 = new HashMap();\\n    state6.put(\"digit\", 4);\\n    Map<String, Integer> state7 = new HashMap();\\n    state7.put(\"digit\", 5);\\n    Map<String, Integer> state8 = new HashMap();\\n    state8.put(\"sign\", 6);\\n    state8.put(\"digit\", 4);\\n    dfa.put(1, state1);\\n    dfa.put(2, state2);\\n    dfa.put(3, state3);\\n    dfa.put(4, state4);\\n    dfa.put(5, state5);\\n    dfa.put(6, state6);\\n    dfa.put(7, state7);\\n    dfa.put(8, state8);\\n\\n    Set<Integer> validStates = new HashSet(Arrays.asList(3,4,5));\\n\\n    Integer state = 1;\\n    for (char c : s.toCharArray()) {\\n      String key = \"\";\\n      if (c == \\'+\\' || c == \\'-\\') {\\n        key = \"sign\";\\n      } else if (Character.isDigit(c)) {\\n        key = \"digit\";\\n      } else if (c == \\'e\\' || c == \\'E\\') {\\n        key = \"E\";\\n      } else if (c == \\'.\\') {\\n        key = \"dot\";\\n      }\\n      state = dfa.get(state).get(key);\\n      if (state == null) {\\n        return false;\\n      }\\n    }\\n\\n    return validStates.contains(state);\\n  }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n  public boolean isNumber(String s) {\\n    Map<Integer, Map<String, Integer>> dfa = new HashMap();\\n    Map<String, Integer> state1 = new HashMap();\\n    state1.put(\"sign\", 2);\\n    state1.put(\"digit\", 3);\\n    state1.put(\"dot\", 7);\\n    Map<String, Integer> state2 = new HashMap();\\n    state2.put(\"digit\", 3);\\n    state2.put(\"dot\", 7);\\n    Map<String, Integer> state3 = new HashMap();\\n    state3.put(\"digit\", 3);\\n    state3.put(\"dot\", 5);\\n    state3.put(\"E\", 8);\\n    Map<String, Integer> state4 = new HashMap();\\n    state4.put(\"digit\", 4);\\n    Map<String, Integer> state5 = new HashMap();\\n    state5.put(\"digit\", 5);\\n    state5.put(\"E\", 8);\\n    Map<String, Integer> state6 = new HashMap();\\n    state6.put(\"digit\", 4);\\n    Map<String, Integer> state7 = new HashMap();\\n    state7.put(\"digit\", 5);\\n    Map<String, Integer> state8 = new HashMap();\\n    state8.put(\"sign\", 6);\\n    state8.put(\"digit\", 4);\\n    dfa.put(1, state1);\\n    dfa.put(2, state2);\\n    dfa.put(3, state3);\\n    dfa.put(4, state4);\\n    dfa.put(5, state5);\\n    dfa.put(6, state6);\\n    dfa.put(7, state7);\\n    dfa.put(8, state8);\\n\\n    Set<Integer> validStates = new HashSet(Arrays.asList(3,4,5));\\n\\n    Integer state = 1;\\n    for (char c : s.toCharArray()) {\\n      String key = \"\";\\n      if (c == \\'+\\' || c == \\'-\\') {\\n        key = \"sign\";\\n      } else if (Character.isDigit(c)) {\\n        key = \"digit\";\\n      } else if (c == \\'e\\' || c == \\'E\\') {\\n        key = \"E\";\\n      } else if (c == \\'.\\') {\\n        key = \"dot\";\\n      }\\n      state = dfa.get(state).get(key);\\n      if (state == null) {\\n        return false;\\n      }\\n    }\\n\\n    return validStates.contains(state);\\n  }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1569279,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1844259,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1567831,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1567182,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1568032,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1567835,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1568296,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1568078,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1567181,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1568125,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1569279,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1844259,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1567831,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1567182,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1568032,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1567835,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1568296,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1568078,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1567181,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1568125,
                "content": [
                    {
                        "username": "sravani93",
                        "content": "This is a poorly implemented question.\\nHow is \"3.\" a valid number? \\nAnd other definitions are also quite arbitrary.\\nlike \"000e000\" being valid but \"00\" not being valid.\\nand \".3\" is okay?(This is still okay, but you usually write 0.3 instead)\\nAlso , whats with the spaces being okay as a part of the string !? "
                    },
                    {
                        "username": "bogdan_popescu",
                        "content": "[@dnox](/dnox) 3. is a valid syntax in several programming languages, indicating float type as opposed to int"
                    },
                    {
                        "username": "dnox",
                        "content": "The \"validity rules\" are stated in the problem description, so I guess we should follow those rules as opposed to our own intuition of what it means to be a number."
                    },
                    {
                        "username": "Msey",
                        "content": "[@Ultron03](/Ultron03) I suppose they fixed it since 2018"
                    },
                    {
                        "username": "Ultron03",
                        "content": "00 is a valid number acc to leetcode also."
                    },
                    {
                        "username": "gurnainwadhwa",
                        "content": "Use try catch for java"
                    },
                    {
                        "username": "debasisdwivedy",
                        "content": "Input: \"46.e3\"\\nOutput: false\\nExpected: true\\n\\nHow?"
                    },
                    {
                        "username": "dnox",
                        "content": "\"46.\" is a valid decimal (according to rule 1 of decimal parser)\\nvalid number is \"decimal or integer\" (optionally) followed by \"e\" and \"integer\""
                    },
                    {
                        "username": "usacokof",
                        "content": "Input:\\t\"6e6.5\"\\nOutput:\\ttrue\\nExpected:\\tfalse\\n\\nIt is just 6*10^(6.5).  If you type that in Google calculator, it roughly equals to 106.01299131"
                    },
                    {
                        "username": "DuarteBarbosaRibeiro",
                        "content": "But that\\'s not scientific notation which is what\\'s intended."
                    },
                    {
                        "username": "charonme",
                        "content": "it fails the given condition that e must be followed by an integer"
                    },
                    {
                        "username": "pacchu",
                        "content": "Like why is \"3.\" a valid number?\\nand if it is valid why is \"-1.\" not a valid number.\\nEven \" 0.e45 \" is apparently a valid number!!\\n\\nStrange!!"
                    },
                    {
                        "username": "dominiks",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:false"
                    },
                    {
                        "username": "exbe",
                        "content": "Is it an expectated behaviour that `3.` is considerd as a valid test case? I understand that it implies `3.0`, but it leaves description of the problem is ambiguous.  For example hex string could be a valid decimal number, therefore I can expect it as part of the test input. \\n\\n\\n"
                    },
                    {
                        "username": "Brian_Henry",
                        "content": "Probably the worst problem I have ever worked on. The input is way too inconsistent, a leading or trailing space should be considered a decimal (ok fine, I\\'ll trim it), but a space between the numbers invalidates the string. Since you can\\'t see the inputs you don\\'t know what the criteria is until you submit, then when it\\'s false you\\'ll need to go back and add a specific case."
                    },
                    {
                        "username": "fst",
                        "content": "I think maybe this problem doesn't differentiate between 0 and 1~9.\\nThese tricky cases are for your reference."
                    },
                    {
                        "username": "tariqjawed83",
                        "content": "This is messing up the regex for me, and it doesn\\'t even make any sense, how \"3.\" is a valid number?"
                    }
                ]
            },
            {
                "id": 1567832,
                "content": [
                    {
                        "username": "sightrix",
                        "content": "1. draw a DFA for case \"  +123.456e-789   \" like this\\n![0_1483860071886_IMG_20170108_144047.jpg](/uploads/files/1483860106309-img_20170108_144047.jpg)\\n\\n2. add shortcut paths for optional character\\n![0_1483860108097_IMG_20170108_144156.jpg](/uploads/files/1483860144517-img_20170108_144156.jpg) \\n\\n3. convert the DFA into data struct stateMap[STATE_NUM][MESSAGE_NUM]\\n    next_state = stateMap[cur_state][msg_idx]\\n    the msg can be: ' ', '+', '-', [0-9], 'e', 'E'\\n    use idxMap to map the character to index.\\n\\nThat is all, done."
                    },
                    {
                        "username": "yuchien302",
                        "content": "`return ( Number(str)===0 || !!Number(str) ) && ( str.trim() !== \"\");`\\n\\nAfter seeing others solutions in C, C++, Java, ... etc. I think the difficulties of this problem just lies in which language you choose."
                    },
                    {
                        "username": "waltforme",
                        "content": "This is just a neutral question: What do we suppose to learn from this problem?\\nAny ideas?"
                    },
                    {
                        "username": "dnox",
                        "content": "parsing numbers?"
                    },
                    {
                        "username": "DeepikaGupta11",
                        "content": "why e3 is not a valid number?"
                    },
                    {
                        "username": "leafsilver2019",
                        "content": "\\tbool isNumber (string s) {\\n\\t\\tstd::regex regular_expression(\"^\\\\\\\\ *[+-]?((\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)|(\\\\\\\\.\\\\\\\\d+))(e[+-]?\\\\\\\\d+)?\\\\\\\\ *$\");\\n\\t\\treturn regex_search(s, regular_expression);\\n\\t}"
                    },
                    {
                        "username": "Inho0475",
                        "content": "This problem is not given the clear valid number condition"
                    },
                    {
                        "username": "jl4930",
                        "content": "\"It is intended for the problem statement to be ambiguous.\"\\nThat\\'s god damn chop logic."
                    },
                    {
                        "username": "acmer29",
                        "content": "I got this strange test case in the problem. I think if the dot appears at the front of the number, it will represent \"0.xxx\", like \".5\" = \"0.5\", \".0\" = \"0.0\".\\nBut why \".e1\" is wrong? It can be interpreted as \"0.e1\", right? And the later one can pass the test.\\nWell, I think one possible explanation with similar with \"0.\" is correct \".0\" is correct but \".\" is wrong."
                    },
                    {
                        "username": "antonioxzxy",
                        "content": "\"+.e2\" this corner should be covered"
                    },
                    {
                        "username": "liufangyu247",
                        "content": "i submit my solution with a total of 294 lines. then it says\"Your code is too long. Please reduce your code size and try again.\"  \\nMy code is loaded with a lot of switch cases,that's why it grows so big, is there any tricks to write a neat finite state machine code?"
                    }
                ]
            },
            {
                "id": 1565523,
                "content": [
                    {
                        "username": "sightrix",
                        "content": "1. draw a DFA for case \"  +123.456e-789   \" like this\\n![0_1483860071886_IMG_20170108_144047.jpg](/uploads/files/1483860106309-img_20170108_144047.jpg)\\n\\n2. add shortcut paths for optional character\\n![0_1483860108097_IMG_20170108_144156.jpg](/uploads/files/1483860144517-img_20170108_144156.jpg) \\n\\n3. convert the DFA into data struct stateMap[STATE_NUM][MESSAGE_NUM]\\n    next_state = stateMap[cur_state][msg_idx]\\n    the msg can be: ' ', '+', '-', [0-9], 'e', 'E'\\n    use idxMap to map the character to index.\\n\\nThat is all, done."
                    },
                    {
                        "username": "yuchien302",
                        "content": "`return ( Number(str)===0 || !!Number(str) ) && ( str.trim() !== \"\");`\\n\\nAfter seeing others solutions in C, C++, Java, ... etc. I think the difficulties of this problem just lies in which language you choose."
                    },
                    {
                        "username": "waltforme",
                        "content": "This is just a neutral question: What do we suppose to learn from this problem?\\nAny ideas?"
                    },
                    {
                        "username": "dnox",
                        "content": "parsing numbers?"
                    },
                    {
                        "username": "DeepikaGupta11",
                        "content": "why e3 is not a valid number?"
                    },
                    {
                        "username": "leafsilver2019",
                        "content": "\\tbool isNumber (string s) {\\n\\t\\tstd::regex regular_expression(\"^\\\\\\\\ *[+-]?((\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)|(\\\\\\\\.\\\\\\\\d+))(e[+-]?\\\\\\\\d+)?\\\\\\\\ *$\");\\n\\t\\treturn regex_search(s, regular_expression);\\n\\t}"
                    },
                    {
                        "username": "Inho0475",
                        "content": "This problem is not given the clear valid number condition"
                    },
                    {
                        "username": "jl4930",
                        "content": "\"It is intended for the problem statement to be ambiguous.\"\\nThat\\'s god damn chop logic."
                    },
                    {
                        "username": "acmer29",
                        "content": "I got this strange test case in the problem. I think if the dot appears at the front of the number, it will represent \"0.xxx\", like \".5\" = \"0.5\", \".0\" = \"0.0\".\\nBut why \".e1\" is wrong? It can be interpreted as \"0.e1\", right? And the later one can pass the test.\\nWell, I think one possible explanation with similar with \"0.\" is correct \".0\" is correct but \".\" is wrong."
                    },
                    {
                        "username": "antonioxzxy",
                        "content": "\"+.e2\" this corner should be covered"
                    },
                    {
                        "username": "liufangyu247",
                        "content": "i submit my solution with a total of 294 lines. then it says\"Your code is too long. Please reduce your code size and try again.\"  \\nMy code is loaded with a lot of switch cases,that's why it grows so big, is there any tricks to write a neat finite state machine code?"
                    }
                ]
            },
            {
                "id": 1574639,
                "content": [
                    {
                        "username": "sightrix",
                        "content": "1. draw a DFA for case \"  +123.456e-789   \" like this\\n![0_1483860071886_IMG_20170108_144047.jpg](/uploads/files/1483860106309-img_20170108_144047.jpg)\\n\\n2. add shortcut paths for optional character\\n![0_1483860108097_IMG_20170108_144156.jpg](/uploads/files/1483860144517-img_20170108_144156.jpg) \\n\\n3. convert the DFA into data struct stateMap[STATE_NUM][MESSAGE_NUM]\\n    next_state = stateMap[cur_state][msg_idx]\\n    the msg can be: ' ', '+', '-', [0-9], 'e', 'E'\\n    use idxMap to map the character to index.\\n\\nThat is all, done."
                    },
                    {
                        "username": "yuchien302",
                        "content": "`return ( Number(str)===0 || !!Number(str) ) && ( str.trim() !== \"\");`\\n\\nAfter seeing others solutions in C, C++, Java, ... etc. I think the difficulties of this problem just lies in which language you choose."
                    },
                    {
                        "username": "waltforme",
                        "content": "This is just a neutral question: What do we suppose to learn from this problem?\\nAny ideas?"
                    },
                    {
                        "username": "dnox",
                        "content": "parsing numbers?"
                    },
                    {
                        "username": "DeepikaGupta11",
                        "content": "why e3 is not a valid number?"
                    },
                    {
                        "username": "leafsilver2019",
                        "content": "\\tbool isNumber (string s) {\\n\\t\\tstd::regex regular_expression(\"^\\\\\\\\ *[+-]?((\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)|(\\\\\\\\.\\\\\\\\d+))(e[+-]?\\\\\\\\d+)?\\\\\\\\ *$\");\\n\\t\\treturn regex_search(s, regular_expression);\\n\\t}"
                    },
                    {
                        "username": "Inho0475",
                        "content": "This problem is not given the clear valid number condition"
                    },
                    {
                        "username": "jl4930",
                        "content": "\"It is intended for the problem statement to be ambiguous.\"\\nThat\\'s god damn chop logic."
                    },
                    {
                        "username": "acmer29",
                        "content": "I got this strange test case in the problem. I think if the dot appears at the front of the number, it will represent \"0.xxx\", like \".5\" = \"0.5\", \".0\" = \"0.0\".\\nBut why \".e1\" is wrong? It can be interpreted as \"0.e1\", right? And the later one can pass the test.\\nWell, I think one possible explanation with similar with \"0.\" is correct \".0\" is correct but \".\" is wrong."
                    },
                    {
                        "username": "antonioxzxy",
                        "content": "\"+.e2\" this corner should be covered"
                    },
                    {
                        "username": "liufangyu247",
                        "content": "i submit my solution with a total of 294 lines. then it says\"Your code is too long. Please reduce your code size and try again.\"  \\nMy code is loaded with a lot of switch cases,that's why it grows so big, is there any tricks to write a neat finite state machine code?"
                    }
                ]
            },
            {
                "id": 1574506,
                "content": [
                    {
                        "username": "sightrix",
                        "content": "1. draw a DFA for case \"  +123.456e-789   \" like this\\n![0_1483860071886_IMG_20170108_144047.jpg](/uploads/files/1483860106309-img_20170108_144047.jpg)\\n\\n2. add shortcut paths for optional character\\n![0_1483860108097_IMG_20170108_144156.jpg](/uploads/files/1483860144517-img_20170108_144156.jpg) \\n\\n3. convert the DFA into data struct stateMap[STATE_NUM][MESSAGE_NUM]\\n    next_state = stateMap[cur_state][msg_idx]\\n    the msg can be: ' ', '+', '-', [0-9], 'e', 'E'\\n    use idxMap to map the character to index.\\n\\nThat is all, done."
                    },
                    {
                        "username": "yuchien302",
                        "content": "`return ( Number(str)===0 || !!Number(str) ) && ( str.trim() !== \"\");`\\n\\nAfter seeing others solutions in C, C++, Java, ... etc. I think the difficulties of this problem just lies in which language you choose."
                    },
                    {
                        "username": "waltforme",
                        "content": "This is just a neutral question: What do we suppose to learn from this problem?\\nAny ideas?"
                    },
                    {
                        "username": "dnox",
                        "content": "parsing numbers?"
                    },
                    {
                        "username": "DeepikaGupta11",
                        "content": "why e3 is not a valid number?"
                    },
                    {
                        "username": "leafsilver2019",
                        "content": "\\tbool isNumber (string s) {\\n\\t\\tstd::regex regular_expression(\"^\\\\\\\\ *[+-]?((\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)|(\\\\\\\\.\\\\\\\\d+))(e[+-]?\\\\\\\\d+)?\\\\\\\\ *$\");\\n\\t\\treturn regex_search(s, regular_expression);\\n\\t}"
                    },
                    {
                        "username": "Inho0475",
                        "content": "This problem is not given the clear valid number condition"
                    },
                    {
                        "username": "jl4930",
                        "content": "\"It is intended for the problem statement to be ambiguous.\"\\nThat\\'s god damn chop logic."
                    },
                    {
                        "username": "acmer29",
                        "content": "I got this strange test case in the problem. I think if the dot appears at the front of the number, it will represent \"0.xxx\", like \".5\" = \"0.5\", \".0\" = \"0.0\".\\nBut why \".e1\" is wrong? It can be interpreted as \"0.e1\", right? And the later one can pass the test.\\nWell, I think one possible explanation with similar with \"0.\" is correct \".0\" is correct but \".\" is wrong."
                    },
                    {
                        "username": "antonioxzxy",
                        "content": "\"+.e2\" this corner should be covered"
                    },
                    {
                        "username": "liufangyu247",
                        "content": "i submit my solution with a total of 294 lines. then it says\"Your code is too long. Please reduce your code size and try again.\"  \\nMy code is loaded with a lot of switch cases,that's why it grows so big, is there any tricks to write a neat finite state machine code?"
                    }
                ]
            },
            {
                "id": 1573276,
                "content": [
                    {
                        "username": "sightrix",
                        "content": "1. draw a DFA for case \"  +123.456e-789   \" like this\\n![0_1483860071886_IMG_20170108_144047.jpg](/uploads/files/1483860106309-img_20170108_144047.jpg)\\n\\n2. add shortcut paths for optional character\\n![0_1483860108097_IMG_20170108_144156.jpg](/uploads/files/1483860144517-img_20170108_144156.jpg) \\n\\n3. convert the DFA into data struct stateMap[STATE_NUM][MESSAGE_NUM]\\n    next_state = stateMap[cur_state][msg_idx]\\n    the msg can be: ' ', '+', '-', [0-9], 'e', 'E'\\n    use idxMap to map the character to index.\\n\\nThat is all, done."
                    },
                    {
                        "username": "yuchien302",
                        "content": "`return ( Number(str)===0 || !!Number(str) ) && ( str.trim() !== \"\");`\\n\\nAfter seeing others solutions in C, C++, Java, ... etc. I think the difficulties of this problem just lies in which language you choose."
                    },
                    {
                        "username": "waltforme",
                        "content": "This is just a neutral question: What do we suppose to learn from this problem?\\nAny ideas?"
                    },
                    {
                        "username": "dnox",
                        "content": "parsing numbers?"
                    },
                    {
                        "username": "DeepikaGupta11",
                        "content": "why e3 is not a valid number?"
                    },
                    {
                        "username": "leafsilver2019",
                        "content": "\\tbool isNumber (string s) {\\n\\t\\tstd::regex regular_expression(\"^\\\\\\\\ *[+-]?((\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)|(\\\\\\\\.\\\\\\\\d+))(e[+-]?\\\\\\\\d+)?\\\\\\\\ *$\");\\n\\t\\treturn regex_search(s, regular_expression);\\n\\t}"
                    },
                    {
                        "username": "Inho0475",
                        "content": "This problem is not given the clear valid number condition"
                    },
                    {
                        "username": "jl4930",
                        "content": "\"It is intended for the problem statement to be ambiguous.\"\\nThat\\'s god damn chop logic."
                    },
                    {
                        "username": "acmer29",
                        "content": "I got this strange test case in the problem. I think if the dot appears at the front of the number, it will represent \"0.xxx\", like \".5\" = \"0.5\", \".0\" = \"0.0\".\\nBut why \".e1\" is wrong? It can be interpreted as \"0.e1\", right? And the later one can pass the test.\\nWell, I think one possible explanation with similar with \"0.\" is correct \".0\" is correct but \".\" is wrong."
                    },
                    {
                        "username": "antonioxzxy",
                        "content": "\"+.e2\" this corner should be covered"
                    },
                    {
                        "username": "liufangyu247",
                        "content": "i submit my solution with a total of 294 lines. then it says\"Your code is too long. Please reduce your code size and try again.\"  \\nMy code is loaded with a lot of switch cases,that's why it grows so big, is there any tricks to write a neat finite state machine code?"
                    }
                ]
            },
            {
                "id": 1573201,
                "content": [
                    {
                        "username": "sightrix",
                        "content": "1. draw a DFA for case \"  +123.456e-789   \" like this\\n![0_1483860071886_IMG_20170108_144047.jpg](/uploads/files/1483860106309-img_20170108_144047.jpg)\\n\\n2. add shortcut paths for optional character\\n![0_1483860108097_IMG_20170108_144156.jpg](/uploads/files/1483860144517-img_20170108_144156.jpg) \\n\\n3. convert the DFA into data struct stateMap[STATE_NUM][MESSAGE_NUM]\\n    next_state = stateMap[cur_state][msg_idx]\\n    the msg can be: ' ', '+', '-', [0-9], 'e', 'E'\\n    use idxMap to map the character to index.\\n\\nThat is all, done."
                    },
                    {
                        "username": "yuchien302",
                        "content": "`return ( Number(str)===0 || !!Number(str) ) && ( str.trim() !== \"\");`\\n\\nAfter seeing others solutions in C, C++, Java, ... etc. I think the difficulties of this problem just lies in which language you choose."
                    },
                    {
                        "username": "waltforme",
                        "content": "This is just a neutral question: What do we suppose to learn from this problem?\\nAny ideas?"
                    },
                    {
                        "username": "dnox",
                        "content": "parsing numbers?"
                    },
                    {
                        "username": "DeepikaGupta11",
                        "content": "why e3 is not a valid number?"
                    },
                    {
                        "username": "leafsilver2019",
                        "content": "\\tbool isNumber (string s) {\\n\\t\\tstd::regex regular_expression(\"^\\\\\\\\ *[+-]?((\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)|(\\\\\\\\.\\\\\\\\d+))(e[+-]?\\\\\\\\d+)?\\\\\\\\ *$\");\\n\\t\\treturn regex_search(s, regular_expression);\\n\\t}"
                    },
                    {
                        "username": "Inho0475",
                        "content": "This problem is not given the clear valid number condition"
                    },
                    {
                        "username": "jl4930",
                        "content": "\"It is intended for the problem statement to be ambiguous.\"\\nThat\\'s god damn chop logic."
                    },
                    {
                        "username": "acmer29",
                        "content": "I got this strange test case in the problem. I think if the dot appears at the front of the number, it will represent \"0.xxx\", like \".5\" = \"0.5\", \".0\" = \"0.0\".\\nBut why \".e1\" is wrong? It can be interpreted as \"0.e1\", right? And the later one can pass the test.\\nWell, I think one possible explanation with similar with \"0.\" is correct \".0\" is correct but \".\" is wrong."
                    },
                    {
                        "username": "antonioxzxy",
                        "content": "\"+.e2\" this corner should be covered"
                    },
                    {
                        "username": "liufangyu247",
                        "content": "i submit my solution with a total of 294 lines. then it says\"Your code is too long. Please reduce your code size and try again.\"  \\nMy code is loaded with a lot of switch cases,that's why it grows so big, is there any tricks to write a neat finite state machine code?"
                    }
                ]
            },
            {
                "id": 1572095,
                "content": [
                    {
                        "username": "sightrix",
                        "content": "1. draw a DFA for case \"  +123.456e-789   \" like this\\n![0_1483860071886_IMG_20170108_144047.jpg](/uploads/files/1483860106309-img_20170108_144047.jpg)\\n\\n2. add shortcut paths for optional character\\n![0_1483860108097_IMG_20170108_144156.jpg](/uploads/files/1483860144517-img_20170108_144156.jpg) \\n\\n3. convert the DFA into data struct stateMap[STATE_NUM][MESSAGE_NUM]\\n    next_state = stateMap[cur_state][msg_idx]\\n    the msg can be: ' ', '+', '-', [0-9], 'e', 'E'\\n    use idxMap to map the character to index.\\n\\nThat is all, done."
                    },
                    {
                        "username": "yuchien302",
                        "content": "`return ( Number(str)===0 || !!Number(str) ) && ( str.trim() !== \"\");`\\n\\nAfter seeing others solutions in C, C++, Java, ... etc. I think the difficulties of this problem just lies in which language you choose."
                    },
                    {
                        "username": "waltforme",
                        "content": "This is just a neutral question: What do we suppose to learn from this problem?\\nAny ideas?"
                    },
                    {
                        "username": "dnox",
                        "content": "parsing numbers?"
                    },
                    {
                        "username": "DeepikaGupta11",
                        "content": "why e3 is not a valid number?"
                    },
                    {
                        "username": "leafsilver2019",
                        "content": "\\tbool isNumber (string s) {\\n\\t\\tstd::regex regular_expression(\"^\\\\\\\\ *[+-]?((\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)|(\\\\\\\\.\\\\\\\\d+))(e[+-]?\\\\\\\\d+)?\\\\\\\\ *$\");\\n\\t\\treturn regex_search(s, regular_expression);\\n\\t}"
                    },
                    {
                        "username": "Inho0475",
                        "content": "This problem is not given the clear valid number condition"
                    },
                    {
                        "username": "jl4930",
                        "content": "\"It is intended for the problem statement to be ambiguous.\"\\nThat\\'s god damn chop logic."
                    },
                    {
                        "username": "acmer29",
                        "content": "I got this strange test case in the problem. I think if the dot appears at the front of the number, it will represent \"0.xxx\", like \".5\" = \"0.5\", \".0\" = \"0.0\".\\nBut why \".e1\" is wrong? It can be interpreted as \"0.e1\", right? And the later one can pass the test.\\nWell, I think one possible explanation with similar with \"0.\" is correct \".0\" is correct but \".\" is wrong."
                    },
                    {
                        "username": "antonioxzxy",
                        "content": "\"+.e2\" this corner should be covered"
                    },
                    {
                        "username": "liufangyu247",
                        "content": "i submit my solution with a total of 294 lines. then it says\"Your code is too long. Please reduce your code size and try again.\"  \\nMy code is loaded with a lot of switch cases,that's why it grows so big, is there any tricks to write a neat finite state machine code?"
                    }
                ]
            },
            {
                "id": 1569162,
                "content": [
                    {
                        "username": "sightrix",
                        "content": "1. draw a DFA for case \"  +123.456e-789   \" like this\\n![0_1483860071886_IMG_20170108_144047.jpg](/uploads/files/1483860106309-img_20170108_144047.jpg)\\n\\n2. add shortcut paths for optional character\\n![0_1483860108097_IMG_20170108_144156.jpg](/uploads/files/1483860144517-img_20170108_144156.jpg) \\n\\n3. convert the DFA into data struct stateMap[STATE_NUM][MESSAGE_NUM]\\n    next_state = stateMap[cur_state][msg_idx]\\n    the msg can be: ' ', '+', '-', [0-9], 'e', 'E'\\n    use idxMap to map the character to index.\\n\\nThat is all, done."
                    },
                    {
                        "username": "yuchien302",
                        "content": "`return ( Number(str)===0 || !!Number(str) ) && ( str.trim() !== \"\");`\\n\\nAfter seeing others solutions in C, C++, Java, ... etc. I think the difficulties of this problem just lies in which language you choose."
                    },
                    {
                        "username": "waltforme",
                        "content": "This is just a neutral question: What do we suppose to learn from this problem?\\nAny ideas?"
                    },
                    {
                        "username": "dnox",
                        "content": "parsing numbers?"
                    },
                    {
                        "username": "DeepikaGupta11",
                        "content": "why e3 is not a valid number?"
                    },
                    {
                        "username": "leafsilver2019",
                        "content": "\\tbool isNumber (string s) {\\n\\t\\tstd::regex regular_expression(\"^\\\\\\\\ *[+-]?((\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)|(\\\\\\\\.\\\\\\\\d+))(e[+-]?\\\\\\\\d+)?\\\\\\\\ *$\");\\n\\t\\treturn regex_search(s, regular_expression);\\n\\t}"
                    },
                    {
                        "username": "Inho0475",
                        "content": "This problem is not given the clear valid number condition"
                    },
                    {
                        "username": "jl4930",
                        "content": "\"It is intended for the problem statement to be ambiguous.\"\\nThat\\'s god damn chop logic."
                    },
                    {
                        "username": "acmer29",
                        "content": "I got this strange test case in the problem. I think if the dot appears at the front of the number, it will represent \"0.xxx\", like \".5\" = \"0.5\", \".0\" = \"0.0\".\\nBut why \".e1\" is wrong? It can be interpreted as \"0.e1\", right? And the later one can pass the test.\\nWell, I think one possible explanation with similar with \"0.\" is correct \".0\" is correct but \".\" is wrong."
                    },
                    {
                        "username": "antonioxzxy",
                        "content": "\"+.e2\" this corner should be covered"
                    },
                    {
                        "username": "liufangyu247",
                        "content": "i submit my solution with a total of 294 lines. then it says\"Your code is too long. Please reduce your code size and try again.\"  \\nMy code is loaded with a lot of switch cases,that's why it grows so big, is there any tricks to write a neat finite state machine code?"
                    }
                ]
            },
            {
                "id": 1571151,
                "content": [
                    {
                        "username": "sightrix",
                        "content": "1. draw a DFA for case \"  +123.456e-789   \" like this\\n![0_1483860071886_IMG_20170108_144047.jpg](/uploads/files/1483860106309-img_20170108_144047.jpg)\\n\\n2. add shortcut paths for optional character\\n![0_1483860108097_IMG_20170108_144156.jpg](/uploads/files/1483860144517-img_20170108_144156.jpg) \\n\\n3. convert the DFA into data struct stateMap[STATE_NUM][MESSAGE_NUM]\\n    next_state = stateMap[cur_state][msg_idx]\\n    the msg can be: ' ', '+', '-', [0-9], 'e', 'E'\\n    use idxMap to map the character to index.\\n\\nThat is all, done."
                    },
                    {
                        "username": "yuchien302",
                        "content": "`return ( Number(str)===0 || !!Number(str) ) && ( str.trim() !== \"\");`\\n\\nAfter seeing others solutions in C, C++, Java, ... etc. I think the difficulties of this problem just lies in which language you choose."
                    },
                    {
                        "username": "waltforme",
                        "content": "This is just a neutral question: What do we suppose to learn from this problem?\\nAny ideas?"
                    },
                    {
                        "username": "dnox",
                        "content": "parsing numbers?"
                    },
                    {
                        "username": "DeepikaGupta11",
                        "content": "why e3 is not a valid number?"
                    },
                    {
                        "username": "leafsilver2019",
                        "content": "\\tbool isNumber (string s) {\\n\\t\\tstd::regex regular_expression(\"^\\\\\\\\ *[+-]?((\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)|(\\\\\\\\.\\\\\\\\d+))(e[+-]?\\\\\\\\d+)?\\\\\\\\ *$\");\\n\\t\\treturn regex_search(s, regular_expression);\\n\\t}"
                    },
                    {
                        "username": "Inho0475",
                        "content": "This problem is not given the clear valid number condition"
                    },
                    {
                        "username": "jl4930",
                        "content": "\"It is intended for the problem statement to be ambiguous.\"\\nThat\\'s god damn chop logic."
                    },
                    {
                        "username": "acmer29",
                        "content": "I got this strange test case in the problem. I think if the dot appears at the front of the number, it will represent \"0.xxx\", like \".5\" = \"0.5\", \".0\" = \"0.0\".\\nBut why \".e1\" is wrong? It can be interpreted as \"0.e1\", right? And the later one can pass the test.\\nWell, I think one possible explanation with similar with \"0.\" is correct \".0\" is correct but \".\" is wrong."
                    },
                    {
                        "username": "antonioxzxy",
                        "content": "\"+.e2\" this corner should be covered"
                    },
                    {
                        "username": "liufangyu247",
                        "content": "i submit my solution with a total of 294 lines. then it says\"Your code is too long. Please reduce your code size and try again.\"  \\nMy code is loaded with a lot of switch cases,that's why it grows so big, is there any tricks to write a neat finite state machine code?"
                    }
                ]
            },
            {
                "id": 1568883,
                "content": [
                    {
                        "username": "sightrix",
                        "content": "1. draw a DFA for case \"  +123.456e-789   \" like this\\n![0_1483860071886_IMG_20170108_144047.jpg](/uploads/files/1483860106309-img_20170108_144047.jpg)\\n\\n2. add shortcut paths for optional character\\n![0_1483860108097_IMG_20170108_144156.jpg](/uploads/files/1483860144517-img_20170108_144156.jpg) \\n\\n3. convert the DFA into data struct stateMap[STATE_NUM][MESSAGE_NUM]\\n    next_state = stateMap[cur_state][msg_idx]\\n    the msg can be: ' ', '+', '-', [0-9], 'e', 'E'\\n    use idxMap to map the character to index.\\n\\nThat is all, done."
                    },
                    {
                        "username": "yuchien302",
                        "content": "`return ( Number(str)===0 || !!Number(str) ) && ( str.trim() !== \"\");`\\n\\nAfter seeing others solutions in C, C++, Java, ... etc. I think the difficulties of this problem just lies in which language you choose."
                    },
                    {
                        "username": "waltforme",
                        "content": "This is just a neutral question: What do we suppose to learn from this problem?\\nAny ideas?"
                    },
                    {
                        "username": "dnox",
                        "content": "parsing numbers?"
                    },
                    {
                        "username": "DeepikaGupta11",
                        "content": "why e3 is not a valid number?"
                    },
                    {
                        "username": "leafsilver2019",
                        "content": "\\tbool isNumber (string s) {\\n\\t\\tstd::regex regular_expression(\"^\\\\\\\\ *[+-]?((\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?)|(\\\\\\\\.\\\\\\\\d+))(e[+-]?\\\\\\\\d+)?\\\\\\\\ *$\");\\n\\t\\treturn regex_search(s, regular_expression);\\n\\t}"
                    },
                    {
                        "username": "Inho0475",
                        "content": "This problem is not given the clear valid number condition"
                    },
                    {
                        "username": "jl4930",
                        "content": "\"It is intended for the problem statement to be ambiguous.\"\\nThat\\'s god damn chop logic."
                    },
                    {
                        "username": "acmer29",
                        "content": "I got this strange test case in the problem. I think if the dot appears at the front of the number, it will represent \"0.xxx\", like \".5\" = \"0.5\", \".0\" = \"0.0\".\\nBut why \".e1\" is wrong? It can be interpreted as \"0.e1\", right? And the later one can pass the test.\\nWell, I think one possible explanation with similar with \"0.\" is correct \".0\" is correct but \".\" is wrong."
                    },
                    {
                        "username": "antonioxzxy",
                        "content": "\"+.e2\" this corner should be covered"
                    },
                    {
                        "username": "liufangyu247",
                        "content": "i submit my solution with a total of 294 lines. then it says\"Your code is too long. Please reduce your code size and try again.\"  \\nMy code is loaded with a lot of switch cases,that's why it grows so big, is there any tricks to write a neat finite state machine code?"
                    }
                ]
            },
            {
                "id": 1568885,
                "content": [
                    {
                        "username": "wenjiaxie",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:\\tfalse"
                    },
                    {
                        "username": "etothepii",
                        "content": "So annoying not get right first time, I had deliberately written the code to exclude \"3.\" since if you saw that written down you would be confused by it,"
                    },
                    {
                        "username": "buru",
                        "content": "In what world are \"+.8\",\"3.\" and \"0e001\" valid decimal numbers?? I can hear my elementary math teacher crying."
                    },
                    {
                        "username": "zaphod424",
                        "content": "\"46.e3\" is supposed to be true? How is that remotely a valid number. This is a pretty poorly written problem"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": "Take Care of these it was nightmare for me\\n\\n```\\n\"+E3\"   \"3.\"    \".e1\"     \"6+1\"     \"+.\"    \"-.3e6\"    \"005047e+6\"   \"4e+\"   \"..\"\\n```"
                    },
                    {
                        "username": "taid15604",
                        "content": "how is 46.e3 an exponent number. If it was an exponent, the right way of writing it in code would be 46*e^3 or 46*(e^3). The dot (\".\") is represented as a decimal. The multiplication dot is in a higher position which is why we use * instead. Can someone please confirm that my argument is valid?"
                    },
                    {
                        "username": "daalp9999",
                        "content": "This Q was asked to me couple of years back for initial round of interview. I thought its easy. Reading through all cases and tagged as `Hard` I can understand now why I was `Rejected`"
                    },
                    {
                        "username": "admiralgeneraladeen",
                        "content": "For the example \" 99e2.5 \" => false given in problem description, why is it false? Is it because the string starts with a space character?\\n\\nBecause otherwise 99 exponent (2.5) should be valid decimal number right?\\nIt would be equivalent to 99 to the power (5/2) which would eb equivalent to taking square root of (99^5), which I belive should be a \"true\" answer.\\n\\nCould anyone explain?\\n\\nEdit: As @Rotios mentions, it may refer to  99 * 10 power 2.5 ,  but even for that case, it still could be expressed as a valid decimal number .\\n\\nIt would be helpful, if the question was clearer in its definition regarding what is considered valid."
                    },
                    {
                        "username": "MrZydeco",
                        "content": "The problem requirements were quite detailed about which characters are allowed. Was that a red herring trailed to make use GUESS incorrectly that leading or trailing whitespace would not be allowed?\\n\\nI would have had this on the first try if i had GUESSED correctly.\\n\\nAnd that\\'s all this part of the problem was - a GUESSING GAME."
                    },
                    {
                        "username": "Hard_Club",
                        "content": "16e0.5 is 4\\n\\nshould be true"
                    }
                ]
            },
            {
                "id": 1567468,
                "content": [
                    {
                        "username": "wenjiaxie",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:\\tfalse"
                    },
                    {
                        "username": "etothepii",
                        "content": "So annoying not get right first time, I had deliberately written the code to exclude \"3.\" since if you saw that written down you would be confused by it,"
                    },
                    {
                        "username": "buru",
                        "content": "In what world are \"+.8\",\"3.\" and \"0e001\" valid decimal numbers?? I can hear my elementary math teacher crying."
                    },
                    {
                        "username": "zaphod424",
                        "content": "\"46.e3\" is supposed to be true? How is that remotely a valid number. This is a pretty poorly written problem"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": "Take Care of these it was nightmare for me\\n\\n```\\n\"+E3\"   \"3.\"    \".e1\"     \"6+1\"     \"+.\"    \"-.3e6\"    \"005047e+6\"   \"4e+\"   \"..\"\\n```"
                    },
                    {
                        "username": "taid15604",
                        "content": "how is 46.e3 an exponent number. If it was an exponent, the right way of writing it in code would be 46*e^3 or 46*(e^3). The dot (\".\") is represented as a decimal. The multiplication dot is in a higher position which is why we use * instead. Can someone please confirm that my argument is valid?"
                    },
                    {
                        "username": "daalp9999",
                        "content": "This Q was asked to me couple of years back for initial round of interview. I thought its easy. Reading through all cases and tagged as `Hard` I can understand now why I was `Rejected`"
                    },
                    {
                        "username": "admiralgeneraladeen",
                        "content": "For the example \" 99e2.5 \" => false given in problem description, why is it false? Is it because the string starts with a space character?\\n\\nBecause otherwise 99 exponent (2.5) should be valid decimal number right?\\nIt would be equivalent to 99 to the power (5/2) which would eb equivalent to taking square root of (99^5), which I belive should be a \"true\" answer.\\n\\nCould anyone explain?\\n\\nEdit: As @Rotios mentions, it may refer to  99 * 10 power 2.5 ,  but even for that case, it still could be expressed as a valid decimal number .\\n\\nIt would be helpful, if the question was clearer in its definition regarding what is considered valid."
                    },
                    {
                        "username": "MrZydeco",
                        "content": "The problem requirements were quite detailed about which characters are allowed. Was that a red herring trailed to make use GUESS incorrectly that leading or trailing whitespace would not be allowed?\\n\\nI would have had this on the first try if i had GUESSED correctly.\\n\\nAnd that\\'s all this part of the problem was - a GUESSING GAME."
                    },
                    {
                        "username": "Hard_Club",
                        "content": "16e0.5 is 4\\n\\nshould be true"
                    }
                ]
            },
            {
                "id": 1568472,
                "content": [
                    {
                        "username": "wenjiaxie",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:\\tfalse"
                    },
                    {
                        "username": "etothepii",
                        "content": "So annoying not get right first time, I had deliberately written the code to exclude \"3.\" since if you saw that written down you would be confused by it,"
                    },
                    {
                        "username": "buru",
                        "content": "In what world are \"+.8\",\"3.\" and \"0e001\" valid decimal numbers?? I can hear my elementary math teacher crying."
                    },
                    {
                        "username": "zaphod424",
                        "content": "\"46.e3\" is supposed to be true? How is that remotely a valid number. This is a pretty poorly written problem"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": "Take Care of these it was nightmare for me\\n\\n```\\n\"+E3\"   \"3.\"    \".e1\"     \"6+1\"     \"+.\"    \"-.3e6\"    \"005047e+6\"   \"4e+\"   \"..\"\\n```"
                    },
                    {
                        "username": "taid15604",
                        "content": "how is 46.e3 an exponent number. If it was an exponent, the right way of writing it in code would be 46*e^3 or 46*(e^3). The dot (\".\") is represented as a decimal. The multiplication dot is in a higher position which is why we use * instead. Can someone please confirm that my argument is valid?"
                    },
                    {
                        "username": "daalp9999",
                        "content": "This Q was asked to me couple of years back for initial round of interview. I thought its easy. Reading through all cases and tagged as `Hard` I can understand now why I was `Rejected`"
                    },
                    {
                        "username": "admiralgeneraladeen",
                        "content": "For the example \" 99e2.5 \" => false given in problem description, why is it false? Is it because the string starts with a space character?\\n\\nBecause otherwise 99 exponent (2.5) should be valid decimal number right?\\nIt would be equivalent to 99 to the power (5/2) which would eb equivalent to taking square root of (99^5), which I belive should be a \"true\" answer.\\n\\nCould anyone explain?\\n\\nEdit: As @Rotios mentions, it may refer to  99 * 10 power 2.5 ,  but even for that case, it still could be expressed as a valid decimal number .\\n\\nIt would be helpful, if the question was clearer in its definition regarding what is considered valid."
                    },
                    {
                        "username": "MrZydeco",
                        "content": "The problem requirements were quite detailed about which characters are allowed. Was that a red herring trailed to make use GUESS incorrectly that leading or trailing whitespace would not be allowed?\\n\\nI would have had this on the first try if i had GUESSED correctly.\\n\\nAnd that\\'s all this part of the problem was - a GUESSING GAME."
                    },
                    {
                        "username": "Hard_Club",
                        "content": "16e0.5 is 4\\n\\nshould be true"
                    }
                ]
            },
            {
                "id": 1825653,
                "content": [
                    {
                        "username": "wenjiaxie",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:\\tfalse"
                    },
                    {
                        "username": "etothepii",
                        "content": "So annoying not get right first time, I had deliberately written the code to exclude \"3.\" since if you saw that written down you would be confused by it,"
                    },
                    {
                        "username": "buru",
                        "content": "In what world are \"+.8\",\"3.\" and \"0e001\" valid decimal numbers?? I can hear my elementary math teacher crying."
                    },
                    {
                        "username": "zaphod424",
                        "content": "\"46.e3\" is supposed to be true? How is that remotely a valid number. This is a pretty poorly written problem"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": "Take Care of these it was nightmare for me\\n\\n```\\n\"+E3\"   \"3.\"    \".e1\"     \"6+1\"     \"+.\"    \"-.3e6\"    \"005047e+6\"   \"4e+\"   \"..\"\\n```"
                    },
                    {
                        "username": "taid15604",
                        "content": "how is 46.e3 an exponent number. If it was an exponent, the right way of writing it in code would be 46*e^3 or 46*(e^3). The dot (\".\") is represented as a decimal. The multiplication dot is in a higher position which is why we use * instead. Can someone please confirm that my argument is valid?"
                    },
                    {
                        "username": "daalp9999",
                        "content": "This Q was asked to me couple of years back for initial round of interview. I thought its easy. Reading through all cases and tagged as `Hard` I can understand now why I was `Rejected`"
                    },
                    {
                        "username": "admiralgeneraladeen",
                        "content": "For the example \" 99e2.5 \" => false given in problem description, why is it false? Is it because the string starts with a space character?\\n\\nBecause otherwise 99 exponent (2.5) should be valid decimal number right?\\nIt would be equivalent to 99 to the power (5/2) which would eb equivalent to taking square root of (99^5), which I belive should be a \"true\" answer.\\n\\nCould anyone explain?\\n\\nEdit: As @Rotios mentions, it may refer to  99 * 10 power 2.5 ,  but even for that case, it still could be expressed as a valid decimal number .\\n\\nIt would be helpful, if the question was clearer in its definition regarding what is considered valid."
                    },
                    {
                        "username": "MrZydeco",
                        "content": "The problem requirements were quite detailed about which characters are allowed. Was that a red herring trailed to make use GUESS incorrectly that leading or trailing whitespace would not be allowed?\\n\\nI would have had this on the first try if i had GUESSED correctly.\\n\\nAnd that\\'s all this part of the problem was - a GUESSING GAME."
                    },
                    {
                        "username": "Hard_Club",
                        "content": "16e0.5 is 4\\n\\nshould be true"
                    }
                ]
            },
            {
                "id": 1726515,
                "content": [
                    {
                        "username": "wenjiaxie",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:\\tfalse"
                    },
                    {
                        "username": "etothepii",
                        "content": "So annoying not get right first time, I had deliberately written the code to exclude \"3.\" since if you saw that written down you would be confused by it,"
                    },
                    {
                        "username": "buru",
                        "content": "In what world are \"+.8\",\"3.\" and \"0e001\" valid decimal numbers?? I can hear my elementary math teacher crying."
                    },
                    {
                        "username": "zaphod424",
                        "content": "\"46.e3\" is supposed to be true? How is that remotely a valid number. This is a pretty poorly written problem"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": "Take Care of these it was nightmare for me\\n\\n```\\n\"+E3\"   \"3.\"    \".e1\"     \"6+1\"     \"+.\"    \"-.3e6\"    \"005047e+6\"   \"4e+\"   \"..\"\\n```"
                    },
                    {
                        "username": "taid15604",
                        "content": "how is 46.e3 an exponent number. If it was an exponent, the right way of writing it in code would be 46*e^3 or 46*(e^3). The dot (\".\") is represented as a decimal. The multiplication dot is in a higher position which is why we use * instead. Can someone please confirm that my argument is valid?"
                    },
                    {
                        "username": "daalp9999",
                        "content": "This Q was asked to me couple of years back for initial round of interview. I thought its easy. Reading through all cases and tagged as `Hard` I can understand now why I was `Rejected`"
                    },
                    {
                        "username": "admiralgeneraladeen",
                        "content": "For the example \" 99e2.5 \" => false given in problem description, why is it false? Is it because the string starts with a space character?\\n\\nBecause otherwise 99 exponent (2.5) should be valid decimal number right?\\nIt would be equivalent to 99 to the power (5/2) which would eb equivalent to taking square root of (99^5), which I belive should be a \"true\" answer.\\n\\nCould anyone explain?\\n\\nEdit: As @Rotios mentions, it may refer to  99 * 10 power 2.5 ,  but even for that case, it still could be expressed as a valid decimal number .\\n\\nIt would be helpful, if the question was clearer in its definition regarding what is considered valid."
                    },
                    {
                        "username": "MrZydeco",
                        "content": "The problem requirements were quite detailed about which characters are allowed. Was that a red herring trailed to make use GUESS incorrectly that leading or trailing whitespace would not be allowed?\\n\\nI would have had this on the first try if i had GUESSED correctly.\\n\\nAnd that\\'s all this part of the problem was - a GUESSING GAME."
                    },
                    {
                        "username": "Hard_Club",
                        "content": "16e0.5 is 4\\n\\nshould be true"
                    }
                ]
            },
            {
                "id": 1575852,
                "content": [
                    {
                        "username": "wenjiaxie",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:\\tfalse"
                    },
                    {
                        "username": "etothepii",
                        "content": "So annoying not get right first time, I had deliberately written the code to exclude \"3.\" since if you saw that written down you would be confused by it,"
                    },
                    {
                        "username": "buru",
                        "content": "In what world are \"+.8\",\"3.\" and \"0e001\" valid decimal numbers?? I can hear my elementary math teacher crying."
                    },
                    {
                        "username": "zaphod424",
                        "content": "\"46.e3\" is supposed to be true? How is that remotely a valid number. This is a pretty poorly written problem"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": "Take Care of these it was nightmare for me\\n\\n```\\n\"+E3\"   \"3.\"    \".e1\"     \"6+1\"     \"+.\"    \"-.3e6\"    \"005047e+6\"   \"4e+\"   \"..\"\\n```"
                    },
                    {
                        "username": "taid15604",
                        "content": "how is 46.e3 an exponent number. If it was an exponent, the right way of writing it in code would be 46*e^3 or 46*(e^3). The dot (\".\") is represented as a decimal. The multiplication dot is in a higher position which is why we use * instead. Can someone please confirm that my argument is valid?"
                    },
                    {
                        "username": "daalp9999",
                        "content": "This Q was asked to me couple of years back for initial round of interview. I thought its easy. Reading through all cases and tagged as `Hard` I can understand now why I was `Rejected`"
                    },
                    {
                        "username": "admiralgeneraladeen",
                        "content": "For the example \" 99e2.5 \" => false given in problem description, why is it false? Is it because the string starts with a space character?\\n\\nBecause otherwise 99 exponent (2.5) should be valid decimal number right?\\nIt would be equivalent to 99 to the power (5/2) which would eb equivalent to taking square root of (99^5), which I belive should be a \"true\" answer.\\n\\nCould anyone explain?\\n\\nEdit: As @Rotios mentions, it may refer to  99 * 10 power 2.5 ,  but even for that case, it still could be expressed as a valid decimal number .\\n\\nIt would be helpful, if the question was clearer in its definition regarding what is considered valid."
                    },
                    {
                        "username": "MrZydeco",
                        "content": "The problem requirements were quite detailed about which characters are allowed. Was that a red herring trailed to make use GUESS incorrectly that leading or trailing whitespace would not be allowed?\\n\\nI would have had this on the first try if i had GUESSED correctly.\\n\\nAnd that\\'s all this part of the problem was - a GUESSING GAME."
                    },
                    {
                        "username": "Hard_Club",
                        "content": "16e0.5 is 4\\n\\nshould be true"
                    }
                ]
            },
            {
                "id": 1575353,
                "content": [
                    {
                        "username": "wenjiaxie",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:\\tfalse"
                    },
                    {
                        "username": "etothepii",
                        "content": "So annoying not get right first time, I had deliberately written the code to exclude \"3.\" since if you saw that written down you would be confused by it,"
                    },
                    {
                        "username": "buru",
                        "content": "In what world are \"+.8\",\"3.\" and \"0e001\" valid decimal numbers?? I can hear my elementary math teacher crying."
                    },
                    {
                        "username": "zaphod424",
                        "content": "\"46.e3\" is supposed to be true? How is that remotely a valid number. This is a pretty poorly written problem"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": "Take Care of these it was nightmare for me\\n\\n```\\n\"+E3\"   \"3.\"    \".e1\"     \"6+1\"     \"+.\"    \"-.3e6\"    \"005047e+6\"   \"4e+\"   \"..\"\\n```"
                    },
                    {
                        "username": "taid15604",
                        "content": "how is 46.e3 an exponent number. If it was an exponent, the right way of writing it in code would be 46*e^3 or 46*(e^3). The dot (\".\") is represented as a decimal. The multiplication dot is in a higher position which is why we use * instead. Can someone please confirm that my argument is valid?"
                    },
                    {
                        "username": "daalp9999",
                        "content": "This Q was asked to me couple of years back for initial round of interview. I thought its easy. Reading through all cases and tagged as `Hard` I can understand now why I was `Rejected`"
                    },
                    {
                        "username": "admiralgeneraladeen",
                        "content": "For the example \" 99e2.5 \" => false given in problem description, why is it false? Is it because the string starts with a space character?\\n\\nBecause otherwise 99 exponent (2.5) should be valid decimal number right?\\nIt would be equivalent to 99 to the power (5/2) which would eb equivalent to taking square root of (99^5), which I belive should be a \"true\" answer.\\n\\nCould anyone explain?\\n\\nEdit: As @Rotios mentions, it may refer to  99 * 10 power 2.5 ,  but even for that case, it still could be expressed as a valid decimal number .\\n\\nIt would be helpful, if the question was clearer in its definition regarding what is considered valid."
                    },
                    {
                        "username": "MrZydeco",
                        "content": "The problem requirements were quite detailed about which characters are allowed. Was that a red herring trailed to make use GUESS incorrectly that leading or trailing whitespace would not be allowed?\\n\\nI would have had this on the first try if i had GUESSED correctly.\\n\\nAnd that\\'s all this part of the problem was - a GUESSING GAME."
                    },
                    {
                        "username": "Hard_Club",
                        "content": "16e0.5 is 4\\n\\nshould be true"
                    }
                ]
            },
            {
                "id": 1574678,
                "content": [
                    {
                        "username": "wenjiaxie",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:\\tfalse"
                    },
                    {
                        "username": "etothepii",
                        "content": "So annoying not get right first time, I had deliberately written the code to exclude \"3.\" since if you saw that written down you would be confused by it,"
                    },
                    {
                        "username": "buru",
                        "content": "In what world are \"+.8\",\"3.\" and \"0e001\" valid decimal numbers?? I can hear my elementary math teacher crying."
                    },
                    {
                        "username": "zaphod424",
                        "content": "\"46.e3\" is supposed to be true? How is that remotely a valid number. This is a pretty poorly written problem"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": "Take Care of these it was nightmare for me\\n\\n```\\n\"+E3\"   \"3.\"    \".e1\"     \"6+1\"     \"+.\"    \"-.3e6\"    \"005047e+6\"   \"4e+\"   \"..\"\\n```"
                    },
                    {
                        "username": "taid15604",
                        "content": "how is 46.e3 an exponent number. If it was an exponent, the right way of writing it in code would be 46*e^3 or 46*(e^3). The dot (\".\") is represented as a decimal. The multiplication dot is in a higher position which is why we use * instead. Can someone please confirm that my argument is valid?"
                    },
                    {
                        "username": "daalp9999",
                        "content": "This Q was asked to me couple of years back for initial round of interview. I thought its easy. Reading through all cases and tagged as `Hard` I can understand now why I was `Rejected`"
                    },
                    {
                        "username": "admiralgeneraladeen",
                        "content": "For the example \" 99e2.5 \" => false given in problem description, why is it false? Is it because the string starts with a space character?\\n\\nBecause otherwise 99 exponent (2.5) should be valid decimal number right?\\nIt would be equivalent to 99 to the power (5/2) which would eb equivalent to taking square root of (99^5), which I belive should be a \"true\" answer.\\n\\nCould anyone explain?\\n\\nEdit: As @Rotios mentions, it may refer to  99 * 10 power 2.5 ,  but even for that case, it still could be expressed as a valid decimal number .\\n\\nIt would be helpful, if the question was clearer in its definition regarding what is considered valid."
                    },
                    {
                        "username": "MrZydeco",
                        "content": "The problem requirements were quite detailed about which characters are allowed. Was that a red herring trailed to make use GUESS incorrectly that leading or trailing whitespace would not be allowed?\\n\\nI would have had this on the first try if i had GUESSED correctly.\\n\\nAnd that\\'s all this part of the problem was - a GUESSING GAME."
                    },
                    {
                        "username": "Hard_Club",
                        "content": "16e0.5 is 4\\n\\nshould be true"
                    }
                ]
            },
            {
                "id": 1573815,
                "content": [
                    {
                        "username": "wenjiaxie",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:\\tfalse"
                    },
                    {
                        "username": "etothepii",
                        "content": "So annoying not get right first time, I had deliberately written the code to exclude \"3.\" since if you saw that written down you would be confused by it,"
                    },
                    {
                        "username": "buru",
                        "content": "In what world are \"+.8\",\"3.\" and \"0e001\" valid decimal numbers?? I can hear my elementary math teacher crying."
                    },
                    {
                        "username": "zaphod424",
                        "content": "\"46.e3\" is supposed to be true? How is that remotely a valid number. This is a pretty poorly written problem"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": "Take Care of these it was nightmare for me\\n\\n```\\n\"+E3\"   \"3.\"    \".e1\"     \"6+1\"     \"+.\"    \"-.3e6\"    \"005047e+6\"   \"4e+\"   \"..\"\\n```"
                    },
                    {
                        "username": "taid15604",
                        "content": "how is 46.e3 an exponent number. If it was an exponent, the right way of writing it in code would be 46*e^3 or 46*(e^3). The dot (\".\") is represented as a decimal. The multiplication dot is in a higher position which is why we use * instead. Can someone please confirm that my argument is valid?"
                    },
                    {
                        "username": "daalp9999",
                        "content": "This Q was asked to me couple of years back for initial round of interview. I thought its easy. Reading through all cases and tagged as `Hard` I can understand now why I was `Rejected`"
                    },
                    {
                        "username": "admiralgeneraladeen",
                        "content": "For the example \" 99e2.5 \" => false given in problem description, why is it false? Is it because the string starts with a space character?\\n\\nBecause otherwise 99 exponent (2.5) should be valid decimal number right?\\nIt would be equivalent to 99 to the power (5/2) which would eb equivalent to taking square root of (99^5), which I belive should be a \"true\" answer.\\n\\nCould anyone explain?\\n\\nEdit: As @Rotios mentions, it may refer to  99 * 10 power 2.5 ,  but even for that case, it still could be expressed as a valid decimal number .\\n\\nIt would be helpful, if the question was clearer in its definition regarding what is considered valid."
                    },
                    {
                        "username": "MrZydeco",
                        "content": "The problem requirements were quite detailed about which characters are allowed. Was that a red herring trailed to make use GUESS incorrectly that leading or trailing whitespace would not be allowed?\\n\\nI would have had this on the first try if i had GUESSED correctly.\\n\\nAnd that\\'s all this part of the problem was - a GUESSING GAME."
                    },
                    {
                        "username": "Hard_Club",
                        "content": "16e0.5 is 4\\n\\nshould be true"
                    }
                ]
            },
            {
                "id": 1573595,
                "content": [
                    {
                        "username": "wenjiaxie",
                        "content": "Input:\\t\"959440.94f\"\\nOutput:\\ttrue\\nExpected:\\tfalse"
                    },
                    {
                        "username": "etothepii",
                        "content": "So annoying not get right first time, I had deliberately written the code to exclude \"3.\" since if you saw that written down you would be confused by it,"
                    },
                    {
                        "username": "buru",
                        "content": "In what world are \"+.8\",\"3.\" and \"0e001\" valid decimal numbers?? I can hear my elementary math teacher crying."
                    },
                    {
                        "username": "zaphod424",
                        "content": "\"46.e3\" is supposed to be true? How is that remotely a valid number. This is a pretty poorly written problem"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": "Take Care of these it was nightmare for me\\n\\n```\\n\"+E3\"   \"3.\"    \".e1\"     \"6+1\"     \"+.\"    \"-.3e6\"    \"005047e+6\"   \"4e+\"   \"..\"\\n```"
                    },
                    {
                        "username": "taid15604",
                        "content": "how is 46.e3 an exponent number. If it was an exponent, the right way of writing it in code would be 46*e^3 or 46*(e^3). The dot (\".\") is represented as a decimal. The multiplication dot is in a higher position which is why we use * instead. Can someone please confirm that my argument is valid?"
                    },
                    {
                        "username": "daalp9999",
                        "content": "This Q was asked to me couple of years back for initial round of interview. I thought its easy. Reading through all cases and tagged as `Hard` I can understand now why I was `Rejected`"
                    },
                    {
                        "username": "admiralgeneraladeen",
                        "content": "For the example \" 99e2.5 \" => false given in problem description, why is it false? Is it because the string starts with a space character?\\n\\nBecause otherwise 99 exponent (2.5) should be valid decimal number right?\\nIt would be equivalent to 99 to the power (5/2) which would eb equivalent to taking square root of (99^5), which I belive should be a \"true\" answer.\\n\\nCould anyone explain?\\n\\nEdit: As @Rotios mentions, it may refer to  99 * 10 power 2.5 ,  but even for that case, it still could be expressed as a valid decimal number .\\n\\nIt would be helpful, if the question was clearer in its definition regarding what is considered valid."
                    },
                    {
                        "username": "MrZydeco",
                        "content": "The problem requirements were quite detailed about which characters are allowed. Was that a red herring trailed to make use GUESS incorrectly that leading or trailing whitespace would not be allowed?\\n\\nI would have had this on the first try if i had GUESSED correctly.\\n\\nAnd that\\'s all this part of the problem was - a GUESSING GAME."
                    },
                    {
                        "username": "Hard_Club",
                        "content": "16e0.5 is 4\\n\\nshould be true"
                    }
                ]
            },
            {
                "id": 1573275,
                "content": [
                    {
                        "username": "amirnet",
                        "content": "\"3.\" is a valid number ?!?!"
                    },
                    {
                        "username": "BVaz",
                        "content": "\"46.e3\"\\nIs the test case that evaluates to true. Shouldn\\'t it be false?"
                    },
                    {
                        "username": "user9918y",
                        "content": "Hi there. \\nI can\\'t get why 53.5e93 is valid but 1e is not. I tried to google but couldn\\'t find an asnwer."
                    },
                    {
                        "username": "pzhang15",
                        "content": "Can someone explain, why does a 1e2.5 is false but 1e2 is true?"
                    },
                    {
                        "username": "ndof",
                        "content": "It is giving true for \"6.\" which I think is not a valid number representation."
                    },
                    {
                        "username": "buohara",
                        "content": "On first submit, my solution ran in 24ms, faster than 30.71% of cpp submissions. Without modifying the code, I submitted again. This time, it ran in 16ms, faster than 98.73% of cpp solutions. A similar thing happened for memory.\\n\\nWhat machines do these submissions run on? Pool of similar machines, locked CPU clocks?"
                    },
                    {
                        "username": "jaciliu",
                        "content": "There are so many problematic edge case, for example all the below use cases turned out to be valid: \\n02\\n.3   \\n3.  "
                    },
                    {
                        "username": "itskals",
                        "content": "My test case failed for \"3.\""
                    },
                    {
                        "username": "wsygwg",
                        "content": "\"959440.94f\" is not a float number?"
                    },
                    {
                        "username": "xiaogezhang",
                        "content": "I don't understand. either both are true or both are false."
                    }
                ]
            },
            {
                "id": 1573097,
                "content": [
                    {
                        "username": "amirnet",
                        "content": "\"3.\" is a valid number ?!?!"
                    },
                    {
                        "username": "BVaz",
                        "content": "\"46.e3\"\\nIs the test case that evaluates to true. Shouldn\\'t it be false?"
                    },
                    {
                        "username": "user9918y",
                        "content": "Hi there. \\nI can\\'t get why 53.5e93 is valid but 1e is not. I tried to google but couldn\\'t find an asnwer."
                    },
                    {
                        "username": "pzhang15",
                        "content": "Can someone explain, why does a 1e2.5 is false but 1e2 is true?"
                    },
                    {
                        "username": "ndof",
                        "content": "It is giving true for \"6.\" which I think is not a valid number representation."
                    },
                    {
                        "username": "buohara",
                        "content": "On first submit, my solution ran in 24ms, faster than 30.71% of cpp submissions. Without modifying the code, I submitted again. This time, it ran in 16ms, faster than 98.73% of cpp solutions. A similar thing happened for memory.\\n\\nWhat machines do these submissions run on? Pool of similar machines, locked CPU clocks?"
                    },
                    {
                        "username": "jaciliu",
                        "content": "There are so many problematic edge case, for example all the below use cases turned out to be valid: \\n02\\n.3   \\n3.  "
                    },
                    {
                        "username": "itskals",
                        "content": "My test case failed for \"3.\""
                    },
                    {
                        "username": "wsygwg",
                        "content": "\"959440.94f\" is not a float number?"
                    },
                    {
                        "username": "xiaogezhang",
                        "content": "I don't understand. either both are true or both are false."
                    }
                ]
            },
            {
                "id": 1572962,
                "content": [
                    {
                        "username": "amirnet",
                        "content": "\"3.\" is a valid number ?!?!"
                    },
                    {
                        "username": "BVaz",
                        "content": "\"46.e3\"\\nIs the test case that evaluates to true. Shouldn\\'t it be false?"
                    },
                    {
                        "username": "user9918y",
                        "content": "Hi there. \\nI can\\'t get why 53.5e93 is valid but 1e is not. I tried to google but couldn\\'t find an asnwer."
                    },
                    {
                        "username": "pzhang15",
                        "content": "Can someone explain, why does a 1e2.5 is false but 1e2 is true?"
                    },
                    {
                        "username": "ndof",
                        "content": "It is giving true for \"6.\" which I think is not a valid number representation."
                    },
                    {
                        "username": "buohara",
                        "content": "On first submit, my solution ran in 24ms, faster than 30.71% of cpp submissions. Without modifying the code, I submitted again. This time, it ran in 16ms, faster than 98.73% of cpp solutions. A similar thing happened for memory.\\n\\nWhat machines do these submissions run on? Pool of similar machines, locked CPU clocks?"
                    },
                    {
                        "username": "jaciliu",
                        "content": "There are so many problematic edge case, for example all the below use cases turned out to be valid: \\n02\\n.3   \\n3.  "
                    },
                    {
                        "username": "itskals",
                        "content": "My test case failed for \"3.\""
                    },
                    {
                        "username": "wsygwg",
                        "content": "\"959440.94f\" is not a float number?"
                    },
                    {
                        "username": "xiaogezhang",
                        "content": "I don't understand. either both are true or both are false."
                    }
                ]
            },
            {
                "id": 1572768,
                "content": [
                    {
                        "username": "amirnet",
                        "content": "\"3.\" is a valid number ?!?!"
                    },
                    {
                        "username": "BVaz",
                        "content": "\"46.e3\"\\nIs the test case that evaluates to true. Shouldn\\'t it be false?"
                    },
                    {
                        "username": "user9918y",
                        "content": "Hi there. \\nI can\\'t get why 53.5e93 is valid but 1e is not. I tried to google but couldn\\'t find an asnwer."
                    },
                    {
                        "username": "pzhang15",
                        "content": "Can someone explain, why does a 1e2.5 is false but 1e2 is true?"
                    },
                    {
                        "username": "ndof",
                        "content": "It is giving true for \"6.\" which I think is not a valid number representation."
                    },
                    {
                        "username": "buohara",
                        "content": "On first submit, my solution ran in 24ms, faster than 30.71% of cpp submissions. Without modifying the code, I submitted again. This time, it ran in 16ms, faster than 98.73% of cpp solutions. A similar thing happened for memory.\\n\\nWhat machines do these submissions run on? Pool of similar machines, locked CPU clocks?"
                    },
                    {
                        "username": "jaciliu",
                        "content": "There are so many problematic edge case, for example all the below use cases turned out to be valid: \\n02\\n.3   \\n3.  "
                    },
                    {
                        "username": "itskals",
                        "content": "My test case failed for \"3.\""
                    },
                    {
                        "username": "wsygwg",
                        "content": "\"959440.94f\" is not a float number?"
                    },
                    {
                        "username": "xiaogezhang",
                        "content": "I don't understand. either both are true or both are false."
                    }
                ]
            },
            {
                "id": 1572725,
                "content": [
                    {
                        "username": "amirnet",
                        "content": "\"3.\" is a valid number ?!?!"
                    },
                    {
                        "username": "BVaz",
                        "content": "\"46.e3\"\\nIs the test case that evaluates to true. Shouldn\\'t it be false?"
                    },
                    {
                        "username": "user9918y",
                        "content": "Hi there. \\nI can\\'t get why 53.5e93 is valid but 1e is not. I tried to google but couldn\\'t find an asnwer."
                    },
                    {
                        "username": "pzhang15",
                        "content": "Can someone explain, why does a 1e2.5 is false but 1e2 is true?"
                    },
                    {
                        "username": "ndof",
                        "content": "It is giving true for \"6.\" which I think is not a valid number representation."
                    },
                    {
                        "username": "buohara",
                        "content": "On first submit, my solution ran in 24ms, faster than 30.71% of cpp submissions. Without modifying the code, I submitted again. This time, it ran in 16ms, faster than 98.73% of cpp solutions. A similar thing happened for memory.\\n\\nWhat machines do these submissions run on? Pool of similar machines, locked CPU clocks?"
                    },
                    {
                        "username": "jaciliu",
                        "content": "There are so many problematic edge case, for example all the below use cases turned out to be valid: \\n02\\n.3   \\n3.  "
                    },
                    {
                        "username": "itskals",
                        "content": "My test case failed for \"3.\""
                    },
                    {
                        "username": "wsygwg",
                        "content": "\"959440.94f\" is not a float number?"
                    },
                    {
                        "username": "xiaogezhang",
                        "content": "I don't understand. either both are true or both are false."
                    }
                ]
            },
            {
                "id": 1572535,
                "content": [
                    {
                        "username": "amirnet",
                        "content": "\"3.\" is a valid number ?!?!"
                    },
                    {
                        "username": "BVaz",
                        "content": "\"46.e3\"\\nIs the test case that evaluates to true. Shouldn\\'t it be false?"
                    },
                    {
                        "username": "user9918y",
                        "content": "Hi there. \\nI can\\'t get why 53.5e93 is valid but 1e is not. I tried to google but couldn\\'t find an asnwer."
                    },
                    {
                        "username": "pzhang15",
                        "content": "Can someone explain, why does a 1e2.5 is false but 1e2 is true?"
                    },
                    {
                        "username": "ndof",
                        "content": "It is giving true for \"6.\" which I think is not a valid number representation."
                    },
                    {
                        "username": "buohara",
                        "content": "On first submit, my solution ran in 24ms, faster than 30.71% of cpp submissions. Without modifying the code, I submitted again. This time, it ran in 16ms, faster than 98.73% of cpp solutions. A similar thing happened for memory.\\n\\nWhat machines do these submissions run on? Pool of similar machines, locked CPU clocks?"
                    },
                    {
                        "username": "jaciliu",
                        "content": "There are so many problematic edge case, for example all the below use cases turned out to be valid: \\n02\\n.3   \\n3.  "
                    },
                    {
                        "username": "itskals",
                        "content": "My test case failed for \"3.\""
                    },
                    {
                        "username": "wsygwg",
                        "content": "\"959440.94f\" is not a float number?"
                    },
                    {
                        "username": "xiaogezhang",
                        "content": "I don't understand. either both are true or both are false."
                    }
                ]
            },
            {
                "id": 1572258,
                "content": [
                    {
                        "username": "amirnet",
                        "content": "\"3.\" is a valid number ?!?!"
                    },
                    {
                        "username": "BVaz",
                        "content": "\"46.e3\"\\nIs the test case that evaluates to true. Shouldn\\'t it be false?"
                    },
                    {
                        "username": "user9918y",
                        "content": "Hi there. \\nI can\\'t get why 53.5e93 is valid but 1e is not. I tried to google but couldn\\'t find an asnwer."
                    },
                    {
                        "username": "pzhang15",
                        "content": "Can someone explain, why does a 1e2.5 is false but 1e2 is true?"
                    },
                    {
                        "username": "ndof",
                        "content": "It is giving true for \"6.\" which I think is not a valid number representation."
                    },
                    {
                        "username": "buohara",
                        "content": "On first submit, my solution ran in 24ms, faster than 30.71% of cpp submissions. Without modifying the code, I submitted again. This time, it ran in 16ms, faster than 98.73% of cpp solutions. A similar thing happened for memory.\\n\\nWhat machines do these submissions run on? Pool of similar machines, locked CPU clocks?"
                    },
                    {
                        "username": "jaciliu",
                        "content": "There are so many problematic edge case, for example all the below use cases turned out to be valid: \\n02\\n.3   \\n3.  "
                    },
                    {
                        "username": "itskals",
                        "content": "My test case failed for \"3.\""
                    },
                    {
                        "username": "wsygwg",
                        "content": "\"959440.94f\" is not a float number?"
                    },
                    {
                        "username": "xiaogezhang",
                        "content": "I don't understand. either both are true or both are false."
                    }
                ]
            },
            {
                "id": 1572207,
                "content": [
                    {
                        "username": "amirnet",
                        "content": "\"3.\" is a valid number ?!?!"
                    },
                    {
                        "username": "BVaz",
                        "content": "\"46.e3\"\\nIs the test case that evaluates to true. Shouldn\\'t it be false?"
                    },
                    {
                        "username": "user9918y",
                        "content": "Hi there. \\nI can\\'t get why 53.5e93 is valid but 1e is not. I tried to google but couldn\\'t find an asnwer."
                    },
                    {
                        "username": "pzhang15",
                        "content": "Can someone explain, why does a 1e2.5 is false but 1e2 is true?"
                    },
                    {
                        "username": "ndof",
                        "content": "It is giving true for \"6.\" which I think is not a valid number representation."
                    },
                    {
                        "username": "buohara",
                        "content": "On first submit, my solution ran in 24ms, faster than 30.71% of cpp submissions. Without modifying the code, I submitted again. This time, it ran in 16ms, faster than 98.73% of cpp solutions. A similar thing happened for memory.\\n\\nWhat machines do these submissions run on? Pool of similar machines, locked CPU clocks?"
                    },
                    {
                        "username": "jaciliu",
                        "content": "There are so many problematic edge case, for example all the below use cases turned out to be valid: \\n02\\n.3   \\n3.  "
                    },
                    {
                        "username": "itskals",
                        "content": "My test case failed for \"3.\""
                    },
                    {
                        "username": "wsygwg",
                        "content": "\"959440.94f\" is not a float number?"
                    },
                    {
                        "username": "xiaogezhang",
                        "content": "I don't understand. either both are true or both are false."
                    }
                ]
            },
            {
                "id": 1571925,
                "content": [
                    {
                        "username": "amirnet",
                        "content": "\"3.\" is a valid number ?!?!"
                    },
                    {
                        "username": "BVaz",
                        "content": "\"46.e3\"\\nIs the test case that evaluates to true. Shouldn\\'t it be false?"
                    },
                    {
                        "username": "user9918y",
                        "content": "Hi there. \\nI can\\'t get why 53.5e93 is valid but 1e is not. I tried to google but couldn\\'t find an asnwer."
                    },
                    {
                        "username": "pzhang15",
                        "content": "Can someone explain, why does a 1e2.5 is false but 1e2 is true?"
                    },
                    {
                        "username": "ndof",
                        "content": "It is giving true for \"6.\" which I think is not a valid number representation."
                    },
                    {
                        "username": "buohara",
                        "content": "On first submit, my solution ran in 24ms, faster than 30.71% of cpp submissions. Without modifying the code, I submitted again. This time, it ran in 16ms, faster than 98.73% of cpp solutions. A similar thing happened for memory.\\n\\nWhat machines do these submissions run on? Pool of similar machines, locked CPU clocks?"
                    },
                    {
                        "username": "jaciliu",
                        "content": "There are so many problematic edge case, for example all the below use cases turned out to be valid: \\n02\\n.3   \\n3.  "
                    },
                    {
                        "username": "itskals",
                        "content": "My test case failed for \"3.\""
                    },
                    {
                        "username": "wsygwg",
                        "content": "\"959440.94f\" is not a float number?"
                    },
                    {
                        "username": "xiaogezhang",
                        "content": "I don't understand. either both are true or both are false."
                    }
                ]
            },
            {
                "id": 1571149,
                "content": [
                    {
                        "username": "amirnet",
                        "content": "\"3.\" is a valid number ?!?!"
                    },
                    {
                        "username": "BVaz",
                        "content": "\"46.e3\"\\nIs the test case that evaluates to true. Shouldn\\'t it be false?"
                    },
                    {
                        "username": "user9918y",
                        "content": "Hi there. \\nI can\\'t get why 53.5e93 is valid but 1e is not. I tried to google but couldn\\'t find an asnwer."
                    },
                    {
                        "username": "pzhang15",
                        "content": "Can someone explain, why does a 1e2.5 is false but 1e2 is true?"
                    },
                    {
                        "username": "ndof",
                        "content": "It is giving true for \"6.\" which I think is not a valid number representation."
                    },
                    {
                        "username": "buohara",
                        "content": "On first submit, my solution ran in 24ms, faster than 30.71% of cpp submissions. Without modifying the code, I submitted again. This time, it ran in 16ms, faster than 98.73% of cpp solutions. A similar thing happened for memory.\\n\\nWhat machines do these submissions run on? Pool of similar machines, locked CPU clocks?"
                    },
                    {
                        "username": "jaciliu",
                        "content": "There are so many problematic edge case, for example all the below use cases turned out to be valid: \\n02\\n.3   \\n3.  "
                    },
                    {
                        "username": "itskals",
                        "content": "My test case failed for \"3.\""
                    },
                    {
                        "username": "wsygwg",
                        "content": "\"959440.94f\" is not a float number?"
                    },
                    {
                        "username": "xiaogezhang",
                        "content": "I don't understand. either both are true or both are false."
                    }
                ]
            },
            {
                "id": 1571152,
                "content": [
                    {
                        "username": "xz2210",
                        "content": "I could agree that \".3\" could be valid, however, how could \"3.\" and \"01\" be valid? Can someone explain?"
                    },
                    {
                        "username": "zhoum3",
                        "content": "Can you tell me 4e4.5 is true or false? I think if .4e3 .56 is true, this one also should be true\\nThanks"
                    },
                    {
                        "username": "qianxing",
                        "content": "Could someone tell me why \"959440.94f\" return false? thanks.\\n\\nthe following code words well in eclipse:\\nfloat a = 959440.94f;"
                    },
                    {
                        "username": "hui6075",
                        "content": "i think such invalid case is needed."
                    },
                    {
                        "username": "jslhcl",
                        "content": "I think it is really difficult. Too many corner cases..."
                    },
                    {
                        "username": "lixian",
                        "content": "When I submit my solution, I encounter the case:\\nInput:\\t\"008\"\\nOutput:\\tfalse\\nExpected:\\ttrue\\nShouldn't \"008\" be considered as an invalid octal number?  If not, what should \"008\" be? A decimal number? How about 0020? Is it decimal number 20 or octal number 020?"
                    },
                    {
                        "username": "zhanglizhu02",
                        "content": "why 01, .1 are valid number?\\nand why 6e6.5 and 92e1740e91 are invalid? For the first one I think it should be 6^6.5, and the second one is 92^1740^91, right?"
                    },
                    {
                        "username": "arrow",
                        "content": "I wound think after 'e' we should expect an integer, but looks like OJ would pass *if a non integer **with a sign** follows e*\\n\\nIs this a bug? Or I'm missing something?\\n\\nSome examples\\n\\n\"1e+1.1\"->true\\n\\n\"1e1.1\"->false\\n\\n\"1e-1.1\"->true\\n\\n\"1e-11\"->true\\n\\n\"1e11\"->true\\n\\n\"1e+11\"->true\\n\\nupdate: OJ should have a bug.. \\nmy accepted code returns true for \"1e+1e1\""
                    },
                    {
                        "username": "Ghostyii",
                        "content": "0.e1 : true\\n.e1 : false"
                    },
                    {
                        "username": "sohrabi",
                        "content": "078332E437 is not in range of c# decimal code"
                    }
                ]
            },
            {
                "id": 1571153,
                "content": [
                    {
                        "username": "xz2210",
                        "content": "I could agree that \".3\" could be valid, however, how could \"3.\" and \"01\" be valid? Can someone explain?"
                    },
                    {
                        "username": "zhoum3",
                        "content": "Can you tell me 4e4.5 is true or false? I think if .4e3 .56 is true, this one also should be true\\nThanks"
                    },
                    {
                        "username": "qianxing",
                        "content": "Could someone tell me why \"959440.94f\" return false? thanks.\\n\\nthe following code words well in eclipse:\\nfloat a = 959440.94f;"
                    },
                    {
                        "username": "hui6075",
                        "content": "i think such invalid case is needed."
                    },
                    {
                        "username": "jslhcl",
                        "content": "I think it is really difficult. Too many corner cases..."
                    },
                    {
                        "username": "lixian",
                        "content": "When I submit my solution, I encounter the case:\\nInput:\\t\"008\"\\nOutput:\\tfalse\\nExpected:\\ttrue\\nShouldn't \"008\" be considered as an invalid octal number?  If not, what should \"008\" be? A decimal number? How about 0020? Is it decimal number 20 or octal number 020?"
                    },
                    {
                        "username": "zhanglizhu02",
                        "content": "why 01, .1 are valid number?\\nand why 6e6.5 and 92e1740e91 are invalid? For the first one I think it should be 6^6.5, and the second one is 92^1740^91, right?"
                    },
                    {
                        "username": "arrow",
                        "content": "I wound think after 'e' we should expect an integer, but looks like OJ would pass *if a non integer **with a sign** follows e*\\n\\nIs this a bug? Or I'm missing something?\\n\\nSome examples\\n\\n\"1e+1.1\"->true\\n\\n\"1e1.1\"->false\\n\\n\"1e-1.1\"->true\\n\\n\"1e-11\"->true\\n\\n\"1e11\"->true\\n\\n\"1e+11\"->true\\n\\nupdate: OJ should have a bug.. \\nmy accepted code returns true for \"1e+1e1\""
                    },
                    {
                        "username": "Ghostyii",
                        "content": "0.e1 : true\\n.e1 : false"
                    },
                    {
                        "username": "sohrabi",
                        "content": "078332E437 is not in range of c# decimal code"
                    }
                ]
            },
            {
                "id": 1571154,
                "content": [
                    {
                        "username": "xz2210",
                        "content": "I could agree that \".3\" could be valid, however, how could \"3.\" and \"01\" be valid? Can someone explain?"
                    },
                    {
                        "username": "zhoum3",
                        "content": "Can you tell me 4e4.5 is true or false? I think if .4e3 .56 is true, this one also should be true\\nThanks"
                    },
                    {
                        "username": "qianxing",
                        "content": "Could someone tell me why \"959440.94f\" return false? thanks.\\n\\nthe following code words well in eclipse:\\nfloat a = 959440.94f;"
                    },
                    {
                        "username": "hui6075",
                        "content": "i think such invalid case is needed."
                    },
                    {
                        "username": "jslhcl",
                        "content": "I think it is really difficult. Too many corner cases..."
                    },
                    {
                        "username": "lixian",
                        "content": "When I submit my solution, I encounter the case:\\nInput:\\t\"008\"\\nOutput:\\tfalse\\nExpected:\\ttrue\\nShouldn't \"008\" be considered as an invalid octal number?  If not, what should \"008\" be? A decimal number? How about 0020? Is it decimal number 20 or octal number 020?"
                    },
                    {
                        "username": "zhanglizhu02",
                        "content": "why 01, .1 are valid number?\\nand why 6e6.5 and 92e1740e91 are invalid? For the first one I think it should be 6^6.5, and the second one is 92^1740^91, right?"
                    },
                    {
                        "username": "arrow",
                        "content": "I wound think after 'e' we should expect an integer, but looks like OJ would pass *if a non integer **with a sign** follows e*\\n\\nIs this a bug? Or I'm missing something?\\n\\nSome examples\\n\\n\"1e+1.1\"->true\\n\\n\"1e1.1\"->false\\n\\n\"1e-1.1\"->true\\n\\n\"1e-11\"->true\\n\\n\"1e11\"->true\\n\\n\"1e+11\"->true\\n\\nupdate: OJ should have a bug.. \\nmy accepted code returns true for \"1e+1e1\""
                    },
                    {
                        "username": "Ghostyii",
                        "content": "0.e1 : true\\n.e1 : false"
                    },
                    {
                        "username": "sohrabi",
                        "content": "078332E437 is not in range of c# decimal code"
                    }
                ]
            },
            {
                "id": 1571155,
                "content": [
                    {
                        "username": "xz2210",
                        "content": "I could agree that \".3\" could be valid, however, how could \"3.\" and \"01\" be valid? Can someone explain?"
                    },
                    {
                        "username": "zhoum3",
                        "content": "Can you tell me 4e4.5 is true or false? I think if .4e3 .56 is true, this one also should be true\\nThanks"
                    },
                    {
                        "username": "qianxing",
                        "content": "Could someone tell me why \"959440.94f\" return false? thanks.\\n\\nthe following code words well in eclipse:\\nfloat a = 959440.94f;"
                    },
                    {
                        "username": "hui6075",
                        "content": "i think such invalid case is needed."
                    },
                    {
                        "username": "jslhcl",
                        "content": "I think it is really difficult. Too many corner cases..."
                    },
                    {
                        "username": "lixian",
                        "content": "When I submit my solution, I encounter the case:\\nInput:\\t\"008\"\\nOutput:\\tfalse\\nExpected:\\ttrue\\nShouldn't \"008\" be considered as an invalid octal number?  If not, what should \"008\" be? A decimal number? How about 0020? Is it decimal number 20 or octal number 020?"
                    },
                    {
                        "username": "zhanglizhu02",
                        "content": "why 01, .1 are valid number?\\nand why 6e6.5 and 92e1740e91 are invalid? For the first one I think it should be 6^6.5, and the second one is 92^1740^91, right?"
                    },
                    {
                        "username": "arrow",
                        "content": "I wound think after 'e' we should expect an integer, but looks like OJ would pass *if a non integer **with a sign** follows e*\\n\\nIs this a bug? Or I'm missing something?\\n\\nSome examples\\n\\n\"1e+1.1\"->true\\n\\n\"1e1.1\"->false\\n\\n\"1e-1.1\"->true\\n\\n\"1e-11\"->true\\n\\n\"1e11\"->true\\n\\n\"1e+11\"->true\\n\\nupdate: OJ should have a bug.. \\nmy accepted code returns true for \"1e+1e1\""
                    },
                    {
                        "username": "Ghostyii",
                        "content": "0.e1 : true\\n.e1 : false"
                    },
                    {
                        "username": "sohrabi",
                        "content": "078332E437 is not in range of c# decimal code"
                    }
                ]
            },
            {
                "id": 1571157,
                "content": [
                    {
                        "username": "xz2210",
                        "content": "I could agree that \".3\" could be valid, however, how could \"3.\" and \"01\" be valid? Can someone explain?"
                    },
                    {
                        "username": "zhoum3",
                        "content": "Can you tell me 4e4.5 is true or false? I think if .4e3 .56 is true, this one also should be true\\nThanks"
                    },
                    {
                        "username": "qianxing",
                        "content": "Could someone tell me why \"959440.94f\" return false? thanks.\\n\\nthe following code words well in eclipse:\\nfloat a = 959440.94f;"
                    },
                    {
                        "username": "hui6075",
                        "content": "i think such invalid case is needed."
                    },
                    {
                        "username": "jslhcl",
                        "content": "I think it is really difficult. Too many corner cases..."
                    },
                    {
                        "username": "lixian",
                        "content": "When I submit my solution, I encounter the case:\\nInput:\\t\"008\"\\nOutput:\\tfalse\\nExpected:\\ttrue\\nShouldn't \"008\" be considered as an invalid octal number?  If not, what should \"008\" be? A decimal number? How about 0020? Is it decimal number 20 or octal number 020?"
                    },
                    {
                        "username": "zhanglizhu02",
                        "content": "why 01, .1 are valid number?\\nand why 6e6.5 and 92e1740e91 are invalid? For the first one I think it should be 6^6.5, and the second one is 92^1740^91, right?"
                    },
                    {
                        "username": "arrow",
                        "content": "I wound think after 'e' we should expect an integer, but looks like OJ would pass *if a non integer **with a sign** follows e*\\n\\nIs this a bug? Or I'm missing something?\\n\\nSome examples\\n\\n\"1e+1.1\"->true\\n\\n\"1e1.1\"->false\\n\\n\"1e-1.1\"->true\\n\\n\"1e-11\"->true\\n\\n\"1e11\"->true\\n\\n\"1e+11\"->true\\n\\nupdate: OJ should have a bug.. \\nmy accepted code returns true for \"1e+1e1\""
                    },
                    {
                        "username": "Ghostyii",
                        "content": "0.e1 : true\\n.e1 : false"
                    },
                    {
                        "username": "sohrabi",
                        "content": "078332E437 is not in range of c# decimal code"
                    }
                ]
            },
            {
                "id": 1571156,
                "content": [
                    {
                        "username": "xz2210",
                        "content": "I could agree that \".3\" could be valid, however, how could \"3.\" and \"01\" be valid? Can someone explain?"
                    },
                    {
                        "username": "zhoum3",
                        "content": "Can you tell me 4e4.5 is true or false? I think if .4e3 .56 is true, this one also should be true\\nThanks"
                    },
                    {
                        "username": "qianxing",
                        "content": "Could someone tell me why \"959440.94f\" return false? thanks.\\n\\nthe following code words well in eclipse:\\nfloat a = 959440.94f;"
                    },
                    {
                        "username": "hui6075",
                        "content": "i think such invalid case is needed."
                    },
                    {
                        "username": "jslhcl",
                        "content": "I think it is really difficult. Too many corner cases..."
                    },
                    {
                        "username": "lixian",
                        "content": "When I submit my solution, I encounter the case:\\nInput:\\t\"008\"\\nOutput:\\tfalse\\nExpected:\\ttrue\\nShouldn't \"008\" be considered as an invalid octal number?  If not, what should \"008\" be? A decimal number? How about 0020? Is it decimal number 20 or octal number 020?"
                    },
                    {
                        "username": "zhanglizhu02",
                        "content": "why 01, .1 are valid number?\\nand why 6e6.5 and 92e1740e91 are invalid? For the first one I think it should be 6^6.5, and the second one is 92^1740^91, right?"
                    },
                    {
                        "username": "arrow",
                        "content": "I wound think after 'e' we should expect an integer, but looks like OJ would pass *if a non integer **with a sign** follows e*\\n\\nIs this a bug? Or I'm missing something?\\n\\nSome examples\\n\\n\"1e+1.1\"->true\\n\\n\"1e1.1\"->false\\n\\n\"1e-1.1\"->true\\n\\n\"1e-11\"->true\\n\\n\"1e11\"->true\\n\\n\"1e+11\"->true\\n\\nupdate: OJ should have a bug.. \\nmy accepted code returns true for \"1e+1e1\""
                    },
                    {
                        "username": "Ghostyii",
                        "content": "0.e1 : true\\n.e1 : false"
                    },
                    {
                        "username": "sohrabi",
                        "content": "078332E437 is not in range of c# decimal code"
                    }
                ]
            },
            {
                "id": 1571158,
                "content": [
                    {
                        "username": "xz2210",
                        "content": "I could agree that \".3\" could be valid, however, how could \"3.\" and \"01\" be valid? Can someone explain?"
                    },
                    {
                        "username": "zhoum3",
                        "content": "Can you tell me 4e4.5 is true or false? I think if .4e3 .56 is true, this one also should be true\\nThanks"
                    },
                    {
                        "username": "qianxing",
                        "content": "Could someone tell me why \"959440.94f\" return false? thanks.\\n\\nthe following code words well in eclipse:\\nfloat a = 959440.94f;"
                    },
                    {
                        "username": "hui6075",
                        "content": "i think such invalid case is needed."
                    },
                    {
                        "username": "jslhcl",
                        "content": "I think it is really difficult. Too many corner cases..."
                    },
                    {
                        "username": "lixian",
                        "content": "When I submit my solution, I encounter the case:\\nInput:\\t\"008\"\\nOutput:\\tfalse\\nExpected:\\ttrue\\nShouldn't \"008\" be considered as an invalid octal number?  If not, what should \"008\" be? A decimal number? How about 0020? Is it decimal number 20 or octal number 020?"
                    },
                    {
                        "username": "zhanglizhu02",
                        "content": "why 01, .1 are valid number?\\nand why 6e6.5 and 92e1740e91 are invalid? For the first one I think it should be 6^6.5, and the second one is 92^1740^91, right?"
                    },
                    {
                        "username": "arrow",
                        "content": "I wound think after 'e' we should expect an integer, but looks like OJ would pass *if a non integer **with a sign** follows e*\\n\\nIs this a bug? Or I'm missing something?\\n\\nSome examples\\n\\n\"1e+1.1\"->true\\n\\n\"1e1.1\"->false\\n\\n\"1e-1.1\"->true\\n\\n\"1e-11\"->true\\n\\n\"1e11\"->true\\n\\n\"1e+11\"->true\\n\\nupdate: OJ should have a bug.. \\nmy accepted code returns true for \"1e+1e1\""
                    },
                    {
                        "username": "Ghostyii",
                        "content": "0.e1 : true\\n.e1 : false"
                    },
                    {
                        "username": "sohrabi",
                        "content": "078332E437 is not in range of c# decimal code"
                    }
                ]
            },
            {
                "id": 1571159,
                "content": [
                    {
                        "username": "xz2210",
                        "content": "I could agree that \".3\" could be valid, however, how could \"3.\" and \"01\" be valid? Can someone explain?"
                    },
                    {
                        "username": "zhoum3",
                        "content": "Can you tell me 4e4.5 is true or false? I think if .4e3 .56 is true, this one also should be true\\nThanks"
                    },
                    {
                        "username": "qianxing",
                        "content": "Could someone tell me why \"959440.94f\" return false? thanks.\\n\\nthe following code words well in eclipse:\\nfloat a = 959440.94f;"
                    },
                    {
                        "username": "hui6075",
                        "content": "i think such invalid case is needed."
                    },
                    {
                        "username": "jslhcl",
                        "content": "I think it is really difficult. Too many corner cases..."
                    },
                    {
                        "username": "lixian",
                        "content": "When I submit my solution, I encounter the case:\\nInput:\\t\"008\"\\nOutput:\\tfalse\\nExpected:\\ttrue\\nShouldn't \"008\" be considered as an invalid octal number?  If not, what should \"008\" be? A decimal number? How about 0020? Is it decimal number 20 or octal number 020?"
                    },
                    {
                        "username": "zhanglizhu02",
                        "content": "why 01, .1 are valid number?\\nand why 6e6.5 and 92e1740e91 are invalid? For the first one I think it should be 6^6.5, and the second one is 92^1740^91, right?"
                    },
                    {
                        "username": "arrow",
                        "content": "I wound think after 'e' we should expect an integer, but looks like OJ would pass *if a non integer **with a sign** follows e*\\n\\nIs this a bug? Or I'm missing something?\\n\\nSome examples\\n\\n\"1e+1.1\"->true\\n\\n\"1e1.1\"->false\\n\\n\"1e-1.1\"->true\\n\\n\"1e-11\"->true\\n\\n\"1e11\"->true\\n\\n\"1e+11\"->true\\n\\nupdate: OJ should have a bug.. \\nmy accepted code returns true for \"1e+1e1\""
                    },
                    {
                        "username": "Ghostyii",
                        "content": "0.e1 : true\\n.e1 : false"
                    },
                    {
                        "username": "sohrabi",
                        "content": "078332E437 is not in range of c# decimal code"
                    }
                ]
            },
            {
                "id": 1570276,
                "content": [
                    {
                        "username": "xz2210",
                        "content": "I could agree that \".3\" could be valid, however, how could \"3.\" and \"01\" be valid? Can someone explain?"
                    },
                    {
                        "username": "zhoum3",
                        "content": "Can you tell me 4e4.5 is true or false? I think if .4e3 .56 is true, this one also should be true\\nThanks"
                    },
                    {
                        "username": "qianxing",
                        "content": "Could someone tell me why \"959440.94f\" return false? thanks.\\n\\nthe following code words well in eclipse:\\nfloat a = 959440.94f;"
                    },
                    {
                        "username": "hui6075",
                        "content": "i think such invalid case is needed."
                    },
                    {
                        "username": "jslhcl",
                        "content": "I think it is really difficult. Too many corner cases..."
                    },
                    {
                        "username": "lixian",
                        "content": "When I submit my solution, I encounter the case:\\nInput:\\t\"008\"\\nOutput:\\tfalse\\nExpected:\\ttrue\\nShouldn't \"008\" be considered as an invalid octal number?  If not, what should \"008\" be? A decimal number? How about 0020? Is it decimal number 20 or octal number 020?"
                    },
                    {
                        "username": "zhanglizhu02",
                        "content": "why 01, .1 are valid number?\\nand why 6e6.5 and 92e1740e91 are invalid? For the first one I think it should be 6^6.5, and the second one is 92^1740^91, right?"
                    },
                    {
                        "username": "arrow",
                        "content": "I wound think after 'e' we should expect an integer, but looks like OJ would pass *if a non integer **with a sign** follows e*\\n\\nIs this a bug? Or I'm missing something?\\n\\nSome examples\\n\\n\"1e+1.1\"->true\\n\\n\"1e1.1\"->false\\n\\n\"1e-1.1\"->true\\n\\n\"1e-11\"->true\\n\\n\"1e11\"->true\\n\\n\"1e+11\"->true\\n\\nupdate: OJ should have a bug.. \\nmy accepted code returns true for \"1e+1e1\""
                    },
                    {
                        "username": "Ghostyii",
                        "content": "0.e1 : true\\n.e1 : false"
                    },
                    {
                        "username": "sohrabi",
                        "content": "078332E437 is not in range of c# decimal code"
                    }
                ]
            },
            {
                "id": 1569396,
                "content": [
                    {
                        "username": "xz2210",
                        "content": "I could agree that \".3\" could be valid, however, how could \"3.\" and \"01\" be valid? Can someone explain?"
                    },
                    {
                        "username": "zhoum3",
                        "content": "Can you tell me 4e4.5 is true or false? I think if .4e3 .56 is true, this one also should be true\\nThanks"
                    },
                    {
                        "username": "qianxing",
                        "content": "Could someone tell me why \"959440.94f\" return false? thanks.\\n\\nthe following code words well in eclipse:\\nfloat a = 959440.94f;"
                    },
                    {
                        "username": "hui6075",
                        "content": "i think such invalid case is needed."
                    },
                    {
                        "username": "jslhcl",
                        "content": "I think it is really difficult. Too many corner cases..."
                    },
                    {
                        "username": "lixian",
                        "content": "When I submit my solution, I encounter the case:\\nInput:\\t\"008\"\\nOutput:\\tfalse\\nExpected:\\ttrue\\nShouldn't \"008\" be considered as an invalid octal number?  If not, what should \"008\" be? A decimal number? How about 0020? Is it decimal number 20 or octal number 020?"
                    },
                    {
                        "username": "zhanglizhu02",
                        "content": "why 01, .1 are valid number?\\nand why 6e6.5 and 92e1740e91 are invalid? For the first one I think it should be 6^6.5, and the second one is 92^1740^91, right?"
                    },
                    {
                        "username": "arrow",
                        "content": "I wound think after 'e' we should expect an integer, but looks like OJ would pass *if a non integer **with a sign** follows e*\\n\\nIs this a bug? Or I'm missing something?\\n\\nSome examples\\n\\n\"1e+1.1\"->true\\n\\n\"1e1.1\"->false\\n\\n\"1e-1.1\"->true\\n\\n\"1e-11\"->true\\n\\n\"1e11\"->true\\n\\n\"1e+11\"->true\\n\\nupdate: OJ should have a bug.. \\nmy accepted code returns true for \"1e+1e1\""
                    },
                    {
                        "username": "Ghostyii",
                        "content": "0.e1 : true\\n.e1 : false"
                    },
                    {
                        "username": "sohrabi",
                        "content": "078332E437 is not in range of c# decimal code"
                    }
                ]
            },
            {
                "id": 1568884,
                "content": [
                    {
                        "username": "gamespeed",
                        "content": "This question is really more about what someone else (who made the test case) think is valid number."
                    },
                    {
                        "username": "seventhrankpawn",
                        "content": "From the examples (e.g. \"4.\"), a decimal can end on a dot, so this rule: \n1. One or more digits, followed by a dot '.'.\n\nNeeds to become\n\n1. One or more digits, followed by an `optional` dot '.'.\n\n\n"
                    },
                    {
                        "username": "LeetCoder-1711",
                        "content": "Are \" 0\" and \"1 0\" type strings valid numbers?"
                    },
                    {
                        "username": "leonardodelfino",
                        "content": "In Javascript:\\n\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    return !isNaN(s)\\n};"
                    },
                    {
                        "username": "lubyhung",
                        "content": "I run the program get false for \"e\", but web told me that my result is\"true\""
                    },
                    {
                        "username": "trag",
                        "content": "Some testcases for you that I stumped on:\\n\"+.8\"\\n\"0..\"\\n\"4e+\"\\n\"+.E3\"\\nQuick question: \\n    My code is quite long ( 45 lines ),\\n    At job do you have to make it as short as possible?"
                    },
                    {
                        "username": "hamza640",
                        "content": "its saying 30. is invalid but according to the rules it should be valid"
                    },
                    {
                        "username": "Helltraitor",
                        "content": "Surprisingly it can be solved simple via state machines and consumer object.\\n\\nTip 1: Think of source like a token flow\\nTip 2: Use state machines (enums + method like \"consume\" for appending token from flow)\\nTip 3: Check valid state of all machines (as for my solution in Rust, I have state machine for exponent and `e` and `e-` is invalid states where `e0` and `e-0` are valid (- stands for \"-\" \"+\" or \"\"))"
                    },
                    {
                        "username": "tachibana-shin",
                        "content": "wtf `01.` is `true`, `.1` is `true` but `.1.` is `false`"
                    },
                    {
                        "username": "Tar_9897",
                        "content": "HOLY BONKERS!\\n\\nWho bloody writes a problem like this in such ambiguous language. This is the worst of the worst problems I have ever encountered on Leetcode"
                    }
                ]
            },
            {
                "id": 2065039,
                "content": [
                    {
                        "username": "gamespeed",
                        "content": "This question is really more about what someone else (who made the test case) think is valid number."
                    },
                    {
                        "username": "seventhrankpawn",
                        "content": "From the examples (e.g. \"4.\"), a decimal can end on a dot, so this rule: \n1. One or more digits, followed by a dot '.'.\n\nNeeds to become\n\n1. One or more digits, followed by an `optional` dot '.'.\n\n\n"
                    },
                    {
                        "username": "LeetCoder-1711",
                        "content": "Are \" 0\" and \"1 0\" type strings valid numbers?"
                    },
                    {
                        "username": "leonardodelfino",
                        "content": "In Javascript:\\n\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    return !isNaN(s)\\n};"
                    },
                    {
                        "username": "lubyhung",
                        "content": "I run the program get false for \"e\", but web told me that my result is\"true\""
                    },
                    {
                        "username": "trag",
                        "content": "Some testcases for you that I stumped on:\\n\"+.8\"\\n\"0..\"\\n\"4e+\"\\n\"+.E3\"\\nQuick question: \\n    My code is quite long ( 45 lines ),\\n    At job do you have to make it as short as possible?"
                    },
                    {
                        "username": "hamza640",
                        "content": "its saying 30. is invalid but according to the rules it should be valid"
                    },
                    {
                        "username": "Helltraitor",
                        "content": "Surprisingly it can be solved simple via state machines and consumer object.\\n\\nTip 1: Think of source like a token flow\\nTip 2: Use state machines (enums + method like \"consume\" for appending token from flow)\\nTip 3: Check valid state of all machines (as for my solution in Rust, I have state machine for exponent and `e` and `e-` is invalid states where `e0` and `e-0` are valid (- stands for \"-\" \"+\" or \"\"))"
                    },
                    {
                        "username": "tachibana-shin",
                        "content": "wtf `01.` is `true`, `.1` is `true` but `.1.` is `false`"
                    },
                    {
                        "username": "Tar_9897",
                        "content": "HOLY BONKERS!\\n\\nWho bloody writes a problem like this in such ambiguous language. This is the worst of the worst problems I have ever encountered on Leetcode"
                    }
                ]
            },
            {
                "id": 2062123,
                "content": [
                    {
                        "username": "gamespeed",
                        "content": "This question is really more about what someone else (who made the test case) think is valid number."
                    },
                    {
                        "username": "seventhrankpawn",
                        "content": "From the examples (e.g. \"4.\"), a decimal can end on a dot, so this rule: \n1. One or more digits, followed by a dot '.'.\n\nNeeds to become\n\n1. One or more digits, followed by an `optional` dot '.'.\n\n\n"
                    },
                    {
                        "username": "LeetCoder-1711",
                        "content": "Are \" 0\" and \"1 0\" type strings valid numbers?"
                    },
                    {
                        "username": "leonardodelfino",
                        "content": "In Javascript:\\n\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    return !isNaN(s)\\n};"
                    },
                    {
                        "username": "lubyhung",
                        "content": "I run the program get false for \"e\", but web told me that my result is\"true\""
                    },
                    {
                        "username": "trag",
                        "content": "Some testcases for you that I stumped on:\\n\"+.8\"\\n\"0..\"\\n\"4e+\"\\n\"+.E3\"\\nQuick question: \\n    My code is quite long ( 45 lines ),\\n    At job do you have to make it as short as possible?"
                    },
                    {
                        "username": "hamza640",
                        "content": "its saying 30. is invalid but according to the rules it should be valid"
                    },
                    {
                        "username": "Helltraitor",
                        "content": "Surprisingly it can be solved simple via state machines and consumer object.\\n\\nTip 1: Think of source like a token flow\\nTip 2: Use state machines (enums + method like \"consume\" for appending token from flow)\\nTip 3: Check valid state of all machines (as for my solution in Rust, I have state machine for exponent and `e` and `e-` is invalid states where `e0` and `e-0` are valid (- stands for \"-\" \"+\" or \"\"))"
                    },
                    {
                        "username": "tachibana-shin",
                        "content": "wtf `01.` is `true`, `.1` is `true` but `.1.` is `false`"
                    },
                    {
                        "username": "Tar_9897",
                        "content": "HOLY BONKERS!\\n\\nWho bloody writes a problem like this in such ambiguous language. This is the worst of the worst problems I have ever encountered on Leetcode"
                    }
                ]
            },
            {
                "id": 2061785,
                "content": [
                    {
                        "username": "gamespeed",
                        "content": "This question is really more about what someone else (who made the test case) think is valid number."
                    },
                    {
                        "username": "seventhrankpawn",
                        "content": "From the examples (e.g. \"4.\"), a decimal can end on a dot, so this rule: \n1. One or more digits, followed by a dot '.'.\n\nNeeds to become\n\n1. One or more digits, followed by an `optional` dot '.'.\n\n\n"
                    },
                    {
                        "username": "LeetCoder-1711",
                        "content": "Are \" 0\" and \"1 0\" type strings valid numbers?"
                    },
                    {
                        "username": "leonardodelfino",
                        "content": "In Javascript:\\n\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    return !isNaN(s)\\n};"
                    },
                    {
                        "username": "lubyhung",
                        "content": "I run the program get false for \"e\", but web told me that my result is\"true\""
                    },
                    {
                        "username": "trag",
                        "content": "Some testcases for you that I stumped on:\\n\"+.8\"\\n\"0..\"\\n\"4e+\"\\n\"+.E3\"\\nQuick question: \\n    My code is quite long ( 45 lines ),\\n    At job do you have to make it as short as possible?"
                    },
                    {
                        "username": "hamza640",
                        "content": "its saying 30. is invalid but according to the rules it should be valid"
                    },
                    {
                        "username": "Helltraitor",
                        "content": "Surprisingly it can be solved simple via state machines and consumer object.\\n\\nTip 1: Think of source like a token flow\\nTip 2: Use state machines (enums + method like \"consume\" for appending token from flow)\\nTip 3: Check valid state of all machines (as for my solution in Rust, I have state machine for exponent and `e` and `e-` is invalid states where `e0` and `e-0` are valid (- stands for \"-\" \"+\" or \"\"))"
                    },
                    {
                        "username": "tachibana-shin",
                        "content": "wtf `01.` is `true`, `.1` is `true` but `.1.` is `false`"
                    },
                    {
                        "username": "Tar_9897",
                        "content": "HOLY BONKERS!\\n\\nWho bloody writes a problem like this in such ambiguous language. This is the worst of the worst problems I have ever encountered on Leetcode"
                    }
                ]
            },
            {
                "id": 2057834,
                "content": [
                    {
                        "username": "gamespeed",
                        "content": "This question is really more about what someone else (who made the test case) think is valid number."
                    },
                    {
                        "username": "seventhrankpawn",
                        "content": "From the examples (e.g. \"4.\"), a decimal can end on a dot, so this rule: \n1. One or more digits, followed by a dot '.'.\n\nNeeds to become\n\n1. One or more digits, followed by an `optional` dot '.'.\n\n\n"
                    },
                    {
                        "username": "LeetCoder-1711",
                        "content": "Are \" 0\" and \"1 0\" type strings valid numbers?"
                    },
                    {
                        "username": "leonardodelfino",
                        "content": "In Javascript:\\n\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    return !isNaN(s)\\n};"
                    },
                    {
                        "username": "lubyhung",
                        "content": "I run the program get false for \"e\", but web told me that my result is\"true\""
                    },
                    {
                        "username": "trag",
                        "content": "Some testcases for you that I stumped on:\\n\"+.8\"\\n\"0..\"\\n\"4e+\"\\n\"+.E3\"\\nQuick question: \\n    My code is quite long ( 45 lines ),\\n    At job do you have to make it as short as possible?"
                    },
                    {
                        "username": "hamza640",
                        "content": "its saying 30. is invalid but according to the rules it should be valid"
                    },
                    {
                        "username": "Helltraitor",
                        "content": "Surprisingly it can be solved simple via state machines and consumer object.\\n\\nTip 1: Think of source like a token flow\\nTip 2: Use state machines (enums + method like \"consume\" for appending token from flow)\\nTip 3: Check valid state of all machines (as for my solution in Rust, I have state machine for exponent and `e` and `e-` is invalid states where `e0` and `e-0` are valid (- stands for \"-\" \"+\" or \"\"))"
                    },
                    {
                        "username": "tachibana-shin",
                        "content": "wtf `01.` is `true`, `.1` is `true` but `.1.` is `false`"
                    },
                    {
                        "username": "Tar_9897",
                        "content": "HOLY BONKERS!\\n\\nWho bloody writes a problem like this in such ambiguous language. This is the worst of the worst problems I have ever encountered on Leetcode"
                    }
                ]
            },
            {
                "id": 2055100,
                "content": [
                    {
                        "username": "gamespeed",
                        "content": "This question is really more about what someone else (who made the test case) think is valid number."
                    },
                    {
                        "username": "seventhrankpawn",
                        "content": "From the examples (e.g. \"4.\"), a decimal can end on a dot, so this rule: \n1. One or more digits, followed by a dot '.'.\n\nNeeds to become\n\n1. One or more digits, followed by an `optional` dot '.'.\n\n\n"
                    },
                    {
                        "username": "LeetCoder-1711",
                        "content": "Are \" 0\" and \"1 0\" type strings valid numbers?"
                    },
                    {
                        "username": "leonardodelfino",
                        "content": "In Javascript:\\n\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    return !isNaN(s)\\n};"
                    },
                    {
                        "username": "lubyhung",
                        "content": "I run the program get false for \"e\", but web told me that my result is\"true\""
                    },
                    {
                        "username": "trag",
                        "content": "Some testcases for you that I stumped on:\\n\"+.8\"\\n\"0..\"\\n\"4e+\"\\n\"+.E3\"\\nQuick question: \\n    My code is quite long ( 45 lines ),\\n    At job do you have to make it as short as possible?"
                    },
                    {
                        "username": "hamza640",
                        "content": "its saying 30. is invalid but according to the rules it should be valid"
                    },
                    {
                        "username": "Helltraitor",
                        "content": "Surprisingly it can be solved simple via state machines and consumer object.\\n\\nTip 1: Think of source like a token flow\\nTip 2: Use state machines (enums + method like \"consume\" for appending token from flow)\\nTip 3: Check valid state of all machines (as for my solution in Rust, I have state machine for exponent and `e` and `e-` is invalid states where `e0` and `e-0` are valid (- stands for \"-\" \"+\" or \"\"))"
                    },
                    {
                        "username": "tachibana-shin",
                        "content": "wtf `01.` is `true`, `.1` is `true` but `.1.` is `false`"
                    },
                    {
                        "username": "Tar_9897",
                        "content": "HOLY BONKERS!\\n\\nWho bloody writes a problem like this in such ambiguous language. This is the worst of the worst problems I have ever encountered on Leetcode"
                    }
                ]
            },
            {
                "id": 2049532,
                "content": [
                    {
                        "username": "gamespeed",
                        "content": "This question is really more about what someone else (who made the test case) think is valid number."
                    },
                    {
                        "username": "seventhrankpawn",
                        "content": "From the examples (e.g. \"4.\"), a decimal can end on a dot, so this rule: \n1. One or more digits, followed by a dot '.'.\n\nNeeds to become\n\n1. One or more digits, followed by an `optional` dot '.'.\n\n\n"
                    },
                    {
                        "username": "LeetCoder-1711",
                        "content": "Are \" 0\" and \"1 0\" type strings valid numbers?"
                    },
                    {
                        "username": "leonardodelfino",
                        "content": "In Javascript:\\n\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    return !isNaN(s)\\n};"
                    },
                    {
                        "username": "lubyhung",
                        "content": "I run the program get false for \"e\", but web told me that my result is\"true\""
                    },
                    {
                        "username": "trag",
                        "content": "Some testcases for you that I stumped on:\\n\"+.8\"\\n\"0..\"\\n\"4e+\"\\n\"+.E3\"\\nQuick question: \\n    My code is quite long ( 45 lines ),\\n    At job do you have to make it as short as possible?"
                    },
                    {
                        "username": "hamza640",
                        "content": "its saying 30. is invalid but according to the rules it should be valid"
                    },
                    {
                        "username": "Helltraitor",
                        "content": "Surprisingly it can be solved simple via state machines and consumer object.\\n\\nTip 1: Think of source like a token flow\\nTip 2: Use state machines (enums + method like \"consume\" for appending token from flow)\\nTip 3: Check valid state of all machines (as for my solution in Rust, I have state machine for exponent and `e` and `e-` is invalid states where `e0` and `e-0` are valid (- stands for \"-\" \"+\" or \"\"))"
                    },
                    {
                        "username": "tachibana-shin",
                        "content": "wtf `01.` is `true`, `.1` is `true` but `.1.` is `false`"
                    },
                    {
                        "username": "Tar_9897",
                        "content": "HOLY BONKERS!\\n\\nWho bloody writes a problem like this in such ambiguous language. This is the worst of the worst problems I have ever encountered on Leetcode"
                    }
                ]
            },
            {
                "id": 2024332,
                "content": [
                    {
                        "username": "gamespeed",
                        "content": "This question is really more about what someone else (who made the test case) think is valid number."
                    },
                    {
                        "username": "seventhrankpawn",
                        "content": "From the examples (e.g. \"4.\"), a decimal can end on a dot, so this rule: \n1. One or more digits, followed by a dot '.'.\n\nNeeds to become\n\n1. One or more digits, followed by an `optional` dot '.'.\n\n\n"
                    },
                    {
                        "username": "LeetCoder-1711",
                        "content": "Are \" 0\" and \"1 0\" type strings valid numbers?"
                    },
                    {
                        "username": "leonardodelfino",
                        "content": "In Javascript:\\n\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    return !isNaN(s)\\n};"
                    },
                    {
                        "username": "lubyhung",
                        "content": "I run the program get false for \"e\", but web told me that my result is\"true\""
                    },
                    {
                        "username": "trag",
                        "content": "Some testcases for you that I stumped on:\\n\"+.8\"\\n\"0..\"\\n\"4e+\"\\n\"+.E3\"\\nQuick question: \\n    My code is quite long ( 45 lines ),\\n    At job do you have to make it as short as possible?"
                    },
                    {
                        "username": "hamza640",
                        "content": "its saying 30. is invalid but according to the rules it should be valid"
                    },
                    {
                        "username": "Helltraitor",
                        "content": "Surprisingly it can be solved simple via state machines and consumer object.\\n\\nTip 1: Think of source like a token flow\\nTip 2: Use state machines (enums + method like \"consume\" for appending token from flow)\\nTip 3: Check valid state of all machines (as for my solution in Rust, I have state machine for exponent and `e` and `e-` is invalid states where `e0` and `e-0` are valid (- stands for \"-\" \"+\" or \"\"))"
                    },
                    {
                        "username": "tachibana-shin",
                        "content": "wtf `01.` is `true`, `.1` is `true` but `.1.` is `false`"
                    },
                    {
                        "username": "Tar_9897",
                        "content": "HOLY BONKERS!\\n\\nWho bloody writes a problem like this in such ambiguous language. This is the worst of the worst problems I have ever encountered on Leetcode"
                    }
                ]
            },
            {
                "id": 2008131,
                "content": [
                    {
                        "username": "gamespeed",
                        "content": "This question is really more about what someone else (who made the test case) think is valid number."
                    },
                    {
                        "username": "seventhrankpawn",
                        "content": "From the examples (e.g. \"4.\"), a decimal can end on a dot, so this rule: \n1. One or more digits, followed by a dot '.'.\n\nNeeds to become\n\n1. One or more digits, followed by an `optional` dot '.'.\n\n\n"
                    },
                    {
                        "username": "LeetCoder-1711",
                        "content": "Are \" 0\" and \"1 0\" type strings valid numbers?"
                    },
                    {
                        "username": "leonardodelfino",
                        "content": "In Javascript:\\n\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    return !isNaN(s)\\n};"
                    },
                    {
                        "username": "lubyhung",
                        "content": "I run the program get false for \"e\", but web told me that my result is\"true\""
                    },
                    {
                        "username": "trag",
                        "content": "Some testcases for you that I stumped on:\\n\"+.8\"\\n\"0..\"\\n\"4e+\"\\n\"+.E3\"\\nQuick question: \\n    My code is quite long ( 45 lines ),\\n    At job do you have to make it as short as possible?"
                    },
                    {
                        "username": "hamza640",
                        "content": "its saying 30. is invalid but according to the rules it should be valid"
                    },
                    {
                        "username": "Helltraitor",
                        "content": "Surprisingly it can be solved simple via state machines and consumer object.\\n\\nTip 1: Think of source like a token flow\\nTip 2: Use state machines (enums + method like \"consume\" for appending token from flow)\\nTip 3: Check valid state of all machines (as for my solution in Rust, I have state machine for exponent and `e` and `e-` is invalid states where `e0` and `e-0` are valid (- stands for \"-\" \"+\" or \"\"))"
                    },
                    {
                        "username": "tachibana-shin",
                        "content": "wtf `01.` is `true`, `.1` is `true` but `.1.` is `false`"
                    },
                    {
                        "username": "Tar_9897",
                        "content": "HOLY BONKERS!\\n\\nWho bloody writes a problem like this in such ambiguous language. This is the worst of the worst problems I have ever encountered on Leetcode"
                    }
                ]
            },
            {
                "id": 1999663,
                "content": [
                    {
                        "username": "gamespeed",
                        "content": "This question is really more about what someone else (who made the test case) think is valid number."
                    },
                    {
                        "username": "seventhrankpawn",
                        "content": "From the examples (e.g. \"4.\"), a decimal can end on a dot, so this rule: \n1. One or more digits, followed by a dot '.'.\n\nNeeds to become\n\n1. One or more digits, followed by an `optional` dot '.'.\n\n\n"
                    },
                    {
                        "username": "LeetCoder-1711",
                        "content": "Are \" 0\" and \"1 0\" type strings valid numbers?"
                    },
                    {
                        "username": "leonardodelfino",
                        "content": "In Javascript:\\n\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    return !isNaN(s)\\n};"
                    },
                    {
                        "username": "lubyhung",
                        "content": "I run the program get false for \"e\", but web told me that my result is\"true\""
                    },
                    {
                        "username": "trag",
                        "content": "Some testcases for you that I stumped on:\\n\"+.8\"\\n\"0..\"\\n\"4e+\"\\n\"+.E3\"\\nQuick question: \\n    My code is quite long ( 45 lines ),\\n    At job do you have to make it as short as possible?"
                    },
                    {
                        "username": "hamza640",
                        "content": "its saying 30. is invalid but according to the rules it should be valid"
                    },
                    {
                        "username": "Helltraitor",
                        "content": "Surprisingly it can be solved simple via state machines and consumer object.\\n\\nTip 1: Think of source like a token flow\\nTip 2: Use state machines (enums + method like \"consume\" for appending token from flow)\\nTip 3: Check valid state of all machines (as for my solution in Rust, I have state machine for exponent and `e` and `e-` is invalid states where `e0` and `e-0` are valid (- stands for \"-\" \"+\" or \"\"))"
                    },
                    {
                        "username": "tachibana-shin",
                        "content": "wtf `01.` is `true`, `.1` is `true` but `.1.` is `false`"
                    },
                    {
                        "username": "Tar_9897",
                        "content": "HOLY BONKERS!\\n\\nWho bloody writes a problem like this in such ambiguous language. This is the worst of the worst problems I have ever encountered on Leetcode"
                    }
                ]
            },
            {
                "id": 1999569,
                "content": [
                    {
                        "username": "mayur1710hanwate",
                        "content": "How this is false - \"e9\"\\nDescription says e or E followed by an integer"
                    },
                    {
                        "username": "vivek_-_kr",
                        "content": " People who are complaining about \"3.\" , Read the example given \"4.\" is valid number according to them.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]."
                    },
                    {
                        "username": "martinvilche98",
                        "content": "\"inf\" expected answer is false??\\n\\nExcuse me? Infinite exists in real numbers, +inf and -inf.\\n\\nIF you want to exclude these values please clarify in Description..."
                    },
                    {
                        "username": "Adithya_pillai",
                        "content": "(Optional) An \\'e\\' or \\'E\\', followed by an integer\\nthen why is e3 not a valid number??"
                    },
                    {
                        "username": "_sajid",
                        "content": "I don't know why there are more down votes than up-votes on this problem.\nThe problem clearly explains what it considers a valid number and anything else that the problem does not explain is invalid number.\nIt doesn't matter if in real life a number is valid or not, You won't really face any edge case or unexpected input if you go by the explanation/description of valid number provided by the problem."
                    },
                    {
                        "username": "TSRSE",
                        "content": "I dont get it. On my PC output is true\\n\\ns = \".1\"\\nOutput\\nfalse\\nExpected\\ntrue\\n\\n\".1\" works fine but somehow not on the site"
                    },
                    {
                        "username": "shivam1750",
                        "content": "why parseInt is not valid in the given statement they show error ??"
                    },
                    {
                        "username": "user0261BG",
                        "content": "input : 6+1\\noutput : true\\nexpected : false\\n\\nwow just wow"
                    },
                    {
                        "username": "cheesebread",
                        "content": ">An 'e' or 'E', followed by an integer.\n\n16912630333 is not an integer in case \"44e016912630333\", it's a long."
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "What is the bug here : 1484 / 1491 testcases passed\\n\"Infinity\" "
                    }
                ]
            },
            {
                "id": 1942660,
                "content": [
                    {
                        "username": "mayur1710hanwate",
                        "content": "How this is false - \"e9\"\\nDescription says e or E followed by an integer"
                    },
                    {
                        "username": "vivek_-_kr",
                        "content": " People who are complaining about \"3.\" , Read the example given \"4.\" is valid number according to them.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]."
                    },
                    {
                        "username": "martinvilche98",
                        "content": "\"inf\" expected answer is false??\\n\\nExcuse me? Infinite exists in real numbers, +inf and -inf.\\n\\nIF you want to exclude these values please clarify in Description..."
                    },
                    {
                        "username": "Adithya_pillai",
                        "content": "(Optional) An \\'e\\' or \\'E\\', followed by an integer\\nthen why is e3 not a valid number??"
                    },
                    {
                        "username": "_sajid",
                        "content": "I don't know why there are more down votes than up-votes on this problem.\nThe problem clearly explains what it considers a valid number and anything else that the problem does not explain is invalid number.\nIt doesn't matter if in real life a number is valid or not, You won't really face any edge case or unexpected input if you go by the explanation/description of valid number provided by the problem."
                    },
                    {
                        "username": "TSRSE",
                        "content": "I dont get it. On my PC output is true\\n\\ns = \".1\"\\nOutput\\nfalse\\nExpected\\ntrue\\n\\n\".1\" works fine but somehow not on the site"
                    },
                    {
                        "username": "shivam1750",
                        "content": "why parseInt is not valid in the given statement they show error ??"
                    },
                    {
                        "username": "user0261BG",
                        "content": "input : 6+1\\noutput : true\\nexpected : false\\n\\nwow just wow"
                    },
                    {
                        "username": "cheesebread",
                        "content": ">An 'e' or 'E', followed by an integer.\n\n16912630333 is not an integer in case \"44e016912630333\", it's a long."
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "What is the bug here : 1484 / 1491 testcases passed\\n\"Infinity\" "
                    }
                ]
            },
            {
                "id": 1939945,
                "content": [
                    {
                        "username": "mayur1710hanwate",
                        "content": "How this is false - \"e9\"\\nDescription says e or E followed by an integer"
                    },
                    {
                        "username": "vivek_-_kr",
                        "content": " People who are complaining about \"3.\" , Read the example given \"4.\" is valid number according to them.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]."
                    },
                    {
                        "username": "martinvilche98",
                        "content": "\"inf\" expected answer is false??\\n\\nExcuse me? Infinite exists in real numbers, +inf and -inf.\\n\\nIF you want to exclude these values please clarify in Description..."
                    },
                    {
                        "username": "Adithya_pillai",
                        "content": "(Optional) An \\'e\\' or \\'E\\', followed by an integer\\nthen why is e3 not a valid number??"
                    },
                    {
                        "username": "_sajid",
                        "content": "I don't know why there are more down votes than up-votes on this problem.\nThe problem clearly explains what it considers a valid number and anything else that the problem does not explain is invalid number.\nIt doesn't matter if in real life a number is valid or not, You won't really face any edge case or unexpected input if you go by the explanation/description of valid number provided by the problem."
                    },
                    {
                        "username": "TSRSE",
                        "content": "I dont get it. On my PC output is true\\n\\ns = \".1\"\\nOutput\\nfalse\\nExpected\\ntrue\\n\\n\".1\" works fine but somehow not on the site"
                    },
                    {
                        "username": "shivam1750",
                        "content": "why parseInt is not valid in the given statement they show error ??"
                    },
                    {
                        "username": "user0261BG",
                        "content": "input : 6+1\\noutput : true\\nexpected : false\\n\\nwow just wow"
                    },
                    {
                        "username": "cheesebread",
                        "content": ">An 'e' or 'E', followed by an integer.\n\n16912630333 is not an integer in case \"44e016912630333\", it's a long."
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "What is the bug here : 1484 / 1491 testcases passed\\n\"Infinity\" "
                    }
                ]
            },
            {
                "id": 1893933,
                "content": [
                    {
                        "username": "mayur1710hanwate",
                        "content": "How this is false - \"e9\"\\nDescription says e or E followed by an integer"
                    },
                    {
                        "username": "vivek_-_kr",
                        "content": " People who are complaining about \"3.\" , Read the example given \"4.\" is valid number according to them.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]."
                    },
                    {
                        "username": "martinvilche98",
                        "content": "\"inf\" expected answer is false??\\n\\nExcuse me? Infinite exists in real numbers, +inf and -inf.\\n\\nIF you want to exclude these values please clarify in Description..."
                    },
                    {
                        "username": "Adithya_pillai",
                        "content": "(Optional) An \\'e\\' or \\'E\\', followed by an integer\\nthen why is e3 not a valid number??"
                    },
                    {
                        "username": "_sajid",
                        "content": "I don't know why there are more down votes than up-votes on this problem.\nThe problem clearly explains what it considers a valid number and anything else that the problem does not explain is invalid number.\nIt doesn't matter if in real life a number is valid or not, You won't really face any edge case or unexpected input if you go by the explanation/description of valid number provided by the problem."
                    },
                    {
                        "username": "TSRSE",
                        "content": "I dont get it. On my PC output is true\\n\\ns = \".1\"\\nOutput\\nfalse\\nExpected\\ntrue\\n\\n\".1\" works fine but somehow not on the site"
                    },
                    {
                        "username": "shivam1750",
                        "content": "why parseInt is not valid in the given statement they show error ??"
                    },
                    {
                        "username": "user0261BG",
                        "content": "input : 6+1\\noutput : true\\nexpected : false\\n\\nwow just wow"
                    },
                    {
                        "username": "cheesebread",
                        "content": ">An 'e' or 'E', followed by an integer.\n\n16912630333 is not an integer in case \"44e016912630333\", it's a long."
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "What is the bug here : 1484 / 1491 testcases passed\\n\"Infinity\" "
                    }
                ]
            },
            {
                "id": 1868202,
                "content": [
                    {
                        "username": "mayur1710hanwate",
                        "content": "How this is false - \"e9\"\\nDescription says e or E followed by an integer"
                    },
                    {
                        "username": "vivek_-_kr",
                        "content": " People who are complaining about \"3.\" , Read the example given \"4.\" is valid number according to them.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]."
                    },
                    {
                        "username": "martinvilche98",
                        "content": "\"inf\" expected answer is false??\\n\\nExcuse me? Infinite exists in real numbers, +inf and -inf.\\n\\nIF you want to exclude these values please clarify in Description..."
                    },
                    {
                        "username": "Adithya_pillai",
                        "content": "(Optional) An \\'e\\' or \\'E\\', followed by an integer\\nthen why is e3 not a valid number??"
                    },
                    {
                        "username": "_sajid",
                        "content": "I don't know why there are more down votes than up-votes on this problem.\nThe problem clearly explains what it considers a valid number and anything else that the problem does not explain is invalid number.\nIt doesn't matter if in real life a number is valid or not, You won't really face any edge case or unexpected input if you go by the explanation/description of valid number provided by the problem."
                    },
                    {
                        "username": "TSRSE",
                        "content": "I dont get it. On my PC output is true\\n\\ns = \".1\"\\nOutput\\nfalse\\nExpected\\ntrue\\n\\n\".1\" works fine but somehow not on the site"
                    },
                    {
                        "username": "shivam1750",
                        "content": "why parseInt is not valid in the given statement they show error ??"
                    },
                    {
                        "username": "user0261BG",
                        "content": "input : 6+1\\noutput : true\\nexpected : false\\n\\nwow just wow"
                    },
                    {
                        "username": "cheesebread",
                        "content": ">An 'e' or 'E', followed by an integer.\n\n16912630333 is not an integer in case \"44e016912630333\", it's a long."
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "What is the bug here : 1484 / 1491 testcases passed\\n\"Infinity\" "
                    }
                ]
            },
            {
                "id": 1850819,
                "content": [
                    {
                        "username": "mayur1710hanwate",
                        "content": "How this is false - \"e9\"\\nDescription says e or E followed by an integer"
                    },
                    {
                        "username": "vivek_-_kr",
                        "content": " People who are complaining about \"3.\" , Read the example given \"4.\" is valid number according to them.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]."
                    },
                    {
                        "username": "martinvilche98",
                        "content": "\"inf\" expected answer is false??\\n\\nExcuse me? Infinite exists in real numbers, +inf and -inf.\\n\\nIF you want to exclude these values please clarify in Description..."
                    },
                    {
                        "username": "Adithya_pillai",
                        "content": "(Optional) An \\'e\\' or \\'E\\', followed by an integer\\nthen why is e3 not a valid number??"
                    },
                    {
                        "username": "_sajid",
                        "content": "I don't know why there are more down votes than up-votes on this problem.\nThe problem clearly explains what it considers a valid number and anything else that the problem does not explain is invalid number.\nIt doesn't matter if in real life a number is valid or not, You won't really face any edge case or unexpected input if you go by the explanation/description of valid number provided by the problem."
                    },
                    {
                        "username": "TSRSE",
                        "content": "I dont get it. On my PC output is true\\n\\ns = \".1\"\\nOutput\\nfalse\\nExpected\\ntrue\\n\\n\".1\" works fine but somehow not on the site"
                    },
                    {
                        "username": "shivam1750",
                        "content": "why parseInt is not valid in the given statement they show error ??"
                    },
                    {
                        "username": "user0261BG",
                        "content": "input : 6+1\\noutput : true\\nexpected : false\\n\\nwow just wow"
                    },
                    {
                        "username": "cheesebread",
                        "content": ">An 'e' or 'E', followed by an integer.\n\n16912630333 is not an integer in case \"44e016912630333\", it's a long."
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "What is the bug here : 1484 / 1491 testcases passed\\n\"Infinity\" "
                    }
                ]
            },
            {
                "id": 1846990,
                "content": [
                    {
                        "username": "mayur1710hanwate",
                        "content": "How this is false - \"e9\"\\nDescription says e or E followed by an integer"
                    },
                    {
                        "username": "vivek_-_kr",
                        "content": " People who are complaining about \"3.\" , Read the example given \"4.\" is valid number according to them.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]."
                    },
                    {
                        "username": "martinvilche98",
                        "content": "\"inf\" expected answer is false??\\n\\nExcuse me? Infinite exists in real numbers, +inf and -inf.\\n\\nIF you want to exclude these values please clarify in Description..."
                    },
                    {
                        "username": "Adithya_pillai",
                        "content": "(Optional) An \\'e\\' or \\'E\\', followed by an integer\\nthen why is e3 not a valid number??"
                    },
                    {
                        "username": "_sajid",
                        "content": "I don't know why there are more down votes than up-votes on this problem.\nThe problem clearly explains what it considers a valid number and anything else that the problem does not explain is invalid number.\nIt doesn't matter if in real life a number is valid or not, You won't really face any edge case or unexpected input if you go by the explanation/description of valid number provided by the problem."
                    },
                    {
                        "username": "TSRSE",
                        "content": "I dont get it. On my PC output is true\\n\\ns = \".1\"\\nOutput\\nfalse\\nExpected\\ntrue\\n\\n\".1\" works fine but somehow not on the site"
                    },
                    {
                        "username": "shivam1750",
                        "content": "why parseInt is not valid in the given statement they show error ??"
                    },
                    {
                        "username": "user0261BG",
                        "content": "input : 6+1\\noutput : true\\nexpected : false\\n\\nwow just wow"
                    },
                    {
                        "username": "cheesebread",
                        "content": ">An 'e' or 'E', followed by an integer.\n\n16912630333 is not an integer in case \"44e016912630333\", it's a long."
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "What is the bug here : 1484 / 1491 testcases passed\\n\"Infinity\" "
                    }
                ]
            },
            {
                "id": 1843156,
                "content": [
                    {
                        "username": "mayur1710hanwate",
                        "content": "How this is false - \"e9\"\\nDescription says e or E followed by an integer"
                    },
                    {
                        "username": "vivek_-_kr",
                        "content": " People who are complaining about \"3.\" , Read the example given \"4.\" is valid number according to them.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]."
                    },
                    {
                        "username": "martinvilche98",
                        "content": "\"inf\" expected answer is false??\\n\\nExcuse me? Infinite exists in real numbers, +inf and -inf.\\n\\nIF you want to exclude these values please clarify in Description..."
                    },
                    {
                        "username": "Adithya_pillai",
                        "content": "(Optional) An \\'e\\' or \\'E\\', followed by an integer\\nthen why is e3 not a valid number??"
                    },
                    {
                        "username": "_sajid",
                        "content": "I don't know why there are more down votes than up-votes on this problem.\nThe problem clearly explains what it considers a valid number and anything else that the problem does not explain is invalid number.\nIt doesn't matter if in real life a number is valid or not, You won't really face any edge case or unexpected input if you go by the explanation/description of valid number provided by the problem."
                    },
                    {
                        "username": "TSRSE",
                        "content": "I dont get it. On my PC output is true\\n\\ns = \".1\"\\nOutput\\nfalse\\nExpected\\ntrue\\n\\n\".1\" works fine but somehow not on the site"
                    },
                    {
                        "username": "shivam1750",
                        "content": "why parseInt is not valid in the given statement they show error ??"
                    },
                    {
                        "username": "user0261BG",
                        "content": "input : 6+1\\noutput : true\\nexpected : false\\n\\nwow just wow"
                    },
                    {
                        "username": "cheesebread",
                        "content": ">An 'e' or 'E', followed by an integer.\n\n16912630333 is not an integer in case \"44e016912630333\", it's a long."
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "What is the bug here : 1484 / 1491 testcases passed\\n\"Infinity\" "
                    }
                ]
            },
            {
                "id": 1837881,
                "content": [
                    {
                        "username": "mayur1710hanwate",
                        "content": "How this is false - \"e9\"\\nDescription says e or E followed by an integer"
                    },
                    {
                        "username": "vivek_-_kr",
                        "content": " People who are complaining about \"3.\" , Read the example given \"4.\" is valid number according to them.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]."
                    },
                    {
                        "username": "martinvilche98",
                        "content": "\"inf\" expected answer is false??\\n\\nExcuse me? Infinite exists in real numbers, +inf and -inf.\\n\\nIF you want to exclude these values please clarify in Description..."
                    },
                    {
                        "username": "Adithya_pillai",
                        "content": "(Optional) An \\'e\\' or \\'E\\', followed by an integer\\nthen why is e3 not a valid number??"
                    },
                    {
                        "username": "_sajid",
                        "content": "I don't know why there are more down votes than up-votes on this problem.\nThe problem clearly explains what it considers a valid number and anything else that the problem does not explain is invalid number.\nIt doesn't matter if in real life a number is valid or not, You won't really face any edge case or unexpected input if you go by the explanation/description of valid number provided by the problem."
                    },
                    {
                        "username": "TSRSE",
                        "content": "I dont get it. On my PC output is true\\n\\ns = \".1\"\\nOutput\\nfalse\\nExpected\\ntrue\\n\\n\".1\" works fine but somehow not on the site"
                    },
                    {
                        "username": "shivam1750",
                        "content": "why parseInt is not valid in the given statement they show error ??"
                    },
                    {
                        "username": "user0261BG",
                        "content": "input : 6+1\\noutput : true\\nexpected : false\\n\\nwow just wow"
                    },
                    {
                        "username": "cheesebread",
                        "content": ">An 'e' or 'E', followed by an integer.\n\n16912630333 is not an integer in case \"44e016912630333\", it's a long."
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "What is the bug here : 1484 / 1491 testcases passed\\n\"Infinity\" "
                    }
                ]
            },
            {
                "id": 1831986,
                "content": [
                    {
                        "username": "mayur1710hanwate",
                        "content": "How this is false - \"e9\"\\nDescription says e or E followed by an integer"
                    },
                    {
                        "username": "vivek_-_kr",
                        "content": " People who are complaining about \"3.\" , Read the example given \"4.\" is valid number according to them.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]."
                    },
                    {
                        "username": "martinvilche98",
                        "content": "\"inf\" expected answer is false??\\n\\nExcuse me? Infinite exists in real numbers, +inf and -inf.\\n\\nIF you want to exclude these values please clarify in Description..."
                    },
                    {
                        "username": "Adithya_pillai",
                        "content": "(Optional) An \\'e\\' or \\'E\\', followed by an integer\\nthen why is e3 not a valid number??"
                    },
                    {
                        "username": "_sajid",
                        "content": "I don't know why there are more down votes than up-votes on this problem.\nThe problem clearly explains what it considers a valid number and anything else that the problem does not explain is invalid number.\nIt doesn't matter if in real life a number is valid or not, You won't really face any edge case or unexpected input if you go by the explanation/description of valid number provided by the problem."
                    },
                    {
                        "username": "TSRSE",
                        "content": "I dont get it. On my PC output is true\\n\\ns = \".1\"\\nOutput\\nfalse\\nExpected\\ntrue\\n\\n\".1\" works fine but somehow not on the site"
                    },
                    {
                        "username": "shivam1750",
                        "content": "why parseInt is not valid in the given statement they show error ??"
                    },
                    {
                        "username": "user0261BG",
                        "content": "input : 6+1\\noutput : true\\nexpected : false\\n\\nwow just wow"
                    },
                    {
                        "username": "cheesebread",
                        "content": ">An 'e' or 'E', followed by an integer.\n\n16912630333 is not an integer in case \"44e016912630333\", it's a long."
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "What is the bug here : 1484 / 1491 testcases passed\\n\"Infinity\" "
                    }
                ]
            },
            {
                "id": 1826799,
                "content": [
                    {
                        "username": "user8064qE",
                        "content": "\"6e6.5\" should be True not False"
                    },
                    {
                        "username": "Dendi_",
                        "content": "Perfect question which shows that what not to be asked in interviews."
                    },
                    {
                        "username": "tystandoffer",
                        "content": "using System;\\nusing System.Text.RegularExpressions;\\n\\npublic class Solution {\\n    public bool IsNumber(string s) {\\n        // Use regular expression to check if the string is a valid number\\n        Regex regex = new Regex(@\"^[+-]?((\\\\d+\\\\.\\\\d*)|(\\\\d*\\\\.\\\\d+)|(\\\\d+))([eE][+-]?\\\\d+)?$\");\\n        return regex.IsMatch(s);\\n    }\\n}"
                    },
                    {
                        "username": "aarushsharmaa",
                        "content": "This question mainly requires us to handle a lot of edge cases,  I still haven\\'t been able to clear all test cases."
                    },
                    {
                        "username": "micah23",
                        "content": "I don\\'t think this is a terribly difficult problem if you chop each condition into pieces. It can\\'t contain any non-e letters. It can contain at most one e. If it does, split it at the e and then you can evaluate each half separately. Each part can have a + or -, and it has to be the first character. The remaining numbers can have exactly one decimal point (if there\\'s a decimal in the part after the e, it fails). Doesn\\'t matter where it is in the number, as long as there\\'s at least one digit on one of the sides. That\\'s pretty much all you need to check.\\n\\nIt\\'s actually so easy you can do it with a single regex (thanks to ChatGPT)\\n\\n `/^[+-]?(?:\\\\d+\\\\.\\\\d*|\\\\.\\\\d+|\\\\d+)(?:[eE][+-]?\\\\d+)?$/`"
                    },
                    {
                        "username": "subowu",
                        "content": "inf"
                    },
                    {
                        "username": "Finesse",
                        "content": "It's easy if you know basic regular expression syntax. Not much harder if regular expressions aren't allowed."
                    },
                    {
                        "username": "whattodonext",
                        "content": "A classic state machine DFA problem. Drawing a state machine would easily solve this problem.\\n\\nHere is the code:\\n```\\nenum class CharType {\\n  INVALID,\\n  SIGN,\\n  DIGIT,\\n  DOT,\\n  E,\\n  EOF_\\n};\\n\\nstruct Char {\\n  char c;\\n  CharType type;\\n};\\n\\nclass NumberChecker {\\n public:\\n  NumberChecker(const string &s) : s_(s), pos_(0), end_(s.size()) {}\\n  ~NumberChecker() = default;\\n\\n  Char next_char() {\\n    Char nextc;\\n    if (pos_ >= end_) {\\n      nextc.type = CharType::EOF_;\\n      return nextc;\\n    }\\n    int c = s_[pos_++];\\n    nextc.c = c;\\n\\n    if (c == \\'+\\' || c == \\'-\\') {\\n      nextc.type = CharType::SIGN;\\n    } else if (c >= \\'0\\' && c <= \\'9\\') {\\n      nextc.type = CharType::DIGIT;\\n    } else if (c == \\'.\\') {\\n      nextc.type = CharType::DOT;\\n    } else if (c == \\'e\\' || c == \\'E\\') {\\n      nextc.type = CharType::E;\\n    } else {\\n      nextc.type = CharType::INVALID;\\n    }\\n    return nextc;\\n  }\\n\\n  bool check() {\\n    Char nextc = next_char();\\n    for (; ; nextc = next_char()) {\\n      switch (state_) {\\n        case 1: {\\n          if (nextc.type == CharType::SIGN) {\\n            state_ = 2;\\n          } else if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 2: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 3: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 4;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 4: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 5: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 51: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 6: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 7: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::SIGN) {\\n            state_ = 8;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 8: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 9: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        default:\\n          return false;\\n      }\\n    }\\n    return false;\\n  }\\n\\n protected:\\n  int state_ = 1;\\n  const string &s_;\\n  size_t pos_ = 0;\\n  size_t end_ = -1;\\n};\\n\\nclass Solution {\\n public:\\n  bool isNumber(string s) {\\n    NumberChecker checker(s);\\n    bool res = checker.check();\\n    return res;\\n  }\\n};\\n```"
                    },
                    {
                        "username": "taubin17",
                        "content": "Test caes 1206: e9 --- output: true ---expected: false.\\n\\nThat is very much a valid number... at least according to the problem conditions."
                    },
                    {
                        "username": "mobeenyaqub",
                        "content": "Running code on pycharm gives me correct answers, but not on leetcode? What's the issue?"
                    }
                ]
            },
            {
                "id": 1810254,
                "content": [
                    {
                        "username": "user8064qE",
                        "content": "\"6e6.5\" should be True not False"
                    },
                    {
                        "username": "Dendi_",
                        "content": "Perfect question which shows that what not to be asked in interviews."
                    },
                    {
                        "username": "tystandoffer",
                        "content": "using System;\\nusing System.Text.RegularExpressions;\\n\\npublic class Solution {\\n    public bool IsNumber(string s) {\\n        // Use regular expression to check if the string is a valid number\\n        Regex regex = new Regex(@\"^[+-]?((\\\\d+\\\\.\\\\d*)|(\\\\d*\\\\.\\\\d+)|(\\\\d+))([eE][+-]?\\\\d+)?$\");\\n        return regex.IsMatch(s);\\n    }\\n}"
                    },
                    {
                        "username": "aarushsharmaa",
                        "content": "This question mainly requires us to handle a lot of edge cases,  I still haven\\'t been able to clear all test cases."
                    },
                    {
                        "username": "micah23",
                        "content": "I don\\'t think this is a terribly difficult problem if you chop each condition into pieces. It can\\'t contain any non-e letters. It can contain at most one e. If it does, split it at the e and then you can evaluate each half separately. Each part can have a + or -, and it has to be the first character. The remaining numbers can have exactly one decimal point (if there\\'s a decimal in the part after the e, it fails). Doesn\\'t matter where it is in the number, as long as there\\'s at least one digit on one of the sides. That\\'s pretty much all you need to check.\\n\\nIt\\'s actually so easy you can do it with a single regex (thanks to ChatGPT)\\n\\n `/^[+-]?(?:\\\\d+\\\\.\\\\d*|\\\\.\\\\d+|\\\\d+)(?:[eE][+-]?\\\\d+)?$/`"
                    },
                    {
                        "username": "subowu",
                        "content": "inf"
                    },
                    {
                        "username": "Finesse",
                        "content": "It's easy if you know basic regular expression syntax. Not much harder if regular expressions aren't allowed."
                    },
                    {
                        "username": "whattodonext",
                        "content": "A classic state machine DFA problem. Drawing a state machine would easily solve this problem.\\n\\nHere is the code:\\n```\\nenum class CharType {\\n  INVALID,\\n  SIGN,\\n  DIGIT,\\n  DOT,\\n  E,\\n  EOF_\\n};\\n\\nstruct Char {\\n  char c;\\n  CharType type;\\n};\\n\\nclass NumberChecker {\\n public:\\n  NumberChecker(const string &s) : s_(s), pos_(0), end_(s.size()) {}\\n  ~NumberChecker() = default;\\n\\n  Char next_char() {\\n    Char nextc;\\n    if (pos_ >= end_) {\\n      nextc.type = CharType::EOF_;\\n      return nextc;\\n    }\\n    int c = s_[pos_++];\\n    nextc.c = c;\\n\\n    if (c == \\'+\\' || c == \\'-\\') {\\n      nextc.type = CharType::SIGN;\\n    } else if (c >= \\'0\\' && c <= \\'9\\') {\\n      nextc.type = CharType::DIGIT;\\n    } else if (c == \\'.\\') {\\n      nextc.type = CharType::DOT;\\n    } else if (c == \\'e\\' || c == \\'E\\') {\\n      nextc.type = CharType::E;\\n    } else {\\n      nextc.type = CharType::INVALID;\\n    }\\n    return nextc;\\n  }\\n\\n  bool check() {\\n    Char nextc = next_char();\\n    for (; ; nextc = next_char()) {\\n      switch (state_) {\\n        case 1: {\\n          if (nextc.type == CharType::SIGN) {\\n            state_ = 2;\\n          } else if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 2: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 3: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 4;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 4: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 5: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 51: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 6: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 7: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::SIGN) {\\n            state_ = 8;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 8: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 9: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        default:\\n          return false;\\n      }\\n    }\\n    return false;\\n  }\\n\\n protected:\\n  int state_ = 1;\\n  const string &s_;\\n  size_t pos_ = 0;\\n  size_t end_ = -1;\\n};\\n\\nclass Solution {\\n public:\\n  bool isNumber(string s) {\\n    NumberChecker checker(s);\\n    bool res = checker.check();\\n    return res;\\n  }\\n};\\n```"
                    },
                    {
                        "username": "taubin17",
                        "content": "Test caes 1206: e9 --- output: true ---expected: false.\\n\\nThat is very much a valid number... at least according to the problem conditions."
                    },
                    {
                        "username": "mobeenyaqub",
                        "content": "Running code on pycharm gives me correct answers, but not on leetcode? What's the issue?"
                    }
                ]
            },
            {
                "id": 1768836,
                "content": [
                    {
                        "username": "user8064qE",
                        "content": "\"6e6.5\" should be True not False"
                    },
                    {
                        "username": "Dendi_",
                        "content": "Perfect question which shows that what not to be asked in interviews."
                    },
                    {
                        "username": "tystandoffer",
                        "content": "using System;\\nusing System.Text.RegularExpressions;\\n\\npublic class Solution {\\n    public bool IsNumber(string s) {\\n        // Use regular expression to check if the string is a valid number\\n        Regex regex = new Regex(@\"^[+-]?((\\\\d+\\\\.\\\\d*)|(\\\\d*\\\\.\\\\d+)|(\\\\d+))([eE][+-]?\\\\d+)?$\");\\n        return regex.IsMatch(s);\\n    }\\n}"
                    },
                    {
                        "username": "aarushsharmaa",
                        "content": "This question mainly requires us to handle a lot of edge cases,  I still haven\\'t been able to clear all test cases."
                    },
                    {
                        "username": "micah23",
                        "content": "I don\\'t think this is a terribly difficult problem if you chop each condition into pieces. It can\\'t contain any non-e letters. It can contain at most one e. If it does, split it at the e and then you can evaluate each half separately. Each part can have a + or -, and it has to be the first character. The remaining numbers can have exactly one decimal point (if there\\'s a decimal in the part after the e, it fails). Doesn\\'t matter where it is in the number, as long as there\\'s at least one digit on one of the sides. That\\'s pretty much all you need to check.\\n\\nIt\\'s actually so easy you can do it with a single regex (thanks to ChatGPT)\\n\\n `/^[+-]?(?:\\\\d+\\\\.\\\\d*|\\\\.\\\\d+|\\\\d+)(?:[eE][+-]?\\\\d+)?$/`"
                    },
                    {
                        "username": "subowu",
                        "content": "inf"
                    },
                    {
                        "username": "Finesse",
                        "content": "It's easy if you know basic regular expression syntax. Not much harder if regular expressions aren't allowed."
                    },
                    {
                        "username": "whattodonext",
                        "content": "A classic state machine DFA problem. Drawing a state machine would easily solve this problem.\\n\\nHere is the code:\\n```\\nenum class CharType {\\n  INVALID,\\n  SIGN,\\n  DIGIT,\\n  DOT,\\n  E,\\n  EOF_\\n};\\n\\nstruct Char {\\n  char c;\\n  CharType type;\\n};\\n\\nclass NumberChecker {\\n public:\\n  NumberChecker(const string &s) : s_(s), pos_(0), end_(s.size()) {}\\n  ~NumberChecker() = default;\\n\\n  Char next_char() {\\n    Char nextc;\\n    if (pos_ >= end_) {\\n      nextc.type = CharType::EOF_;\\n      return nextc;\\n    }\\n    int c = s_[pos_++];\\n    nextc.c = c;\\n\\n    if (c == \\'+\\' || c == \\'-\\') {\\n      nextc.type = CharType::SIGN;\\n    } else if (c >= \\'0\\' && c <= \\'9\\') {\\n      nextc.type = CharType::DIGIT;\\n    } else if (c == \\'.\\') {\\n      nextc.type = CharType::DOT;\\n    } else if (c == \\'e\\' || c == \\'E\\') {\\n      nextc.type = CharType::E;\\n    } else {\\n      nextc.type = CharType::INVALID;\\n    }\\n    return nextc;\\n  }\\n\\n  bool check() {\\n    Char nextc = next_char();\\n    for (; ; nextc = next_char()) {\\n      switch (state_) {\\n        case 1: {\\n          if (nextc.type == CharType::SIGN) {\\n            state_ = 2;\\n          } else if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 2: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 3: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 4;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 4: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 5: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 51: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 6: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 7: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::SIGN) {\\n            state_ = 8;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 8: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 9: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        default:\\n          return false;\\n      }\\n    }\\n    return false;\\n  }\\n\\n protected:\\n  int state_ = 1;\\n  const string &s_;\\n  size_t pos_ = 0;\\n  size_t end_ = -1;\\n};\\n\\nclass Solution {\\n public:\\n  bool isNumber(string s) {\\n    NumberChecker checker(s);\\n    bool res = checker.check();\\n    return res;\\n  }\\n};\\n```"
                    },
                    {
                        "username": "taubin17",
                        "content": "Test caes 1206: e9 --- output: true ---expected: false.\\n\\nThat is very much a valid number... at least according to the problem conditions."
                    },
                    {
                        "username": "mobeenyaqub",
                        "content": "Running code on pycharm gives me correct answers, but not on leetcode? What's the issue?"
                    }
                ]
            },
            {
                "id": 1758988,
                "content": [
                    {
                        "username": "user8064qE",
                        "content": "\"6e6.5\" should be True not False"
                    },
                    {
                        "username": "Dendi_",
                        "content": "Perfect question which shows that what not to be asked in interviews."
                    },
                    {
                        "username": "tystandoffer",
                        "content": "using System;\\nusing System.Text.RegularExpressions;\\n\\npublic class Solution {\\n    public bool IsNumber(string s) {\\n        // Use regular expression to check if the string is a valid number\\n        Regex regex = new Regex(@\"^[+-]?((\\\\d+\\\\.\\\\d*)|(\\\\d*\\\\.\\\\d+)|(\\\\d+))([eE][+-]?\\\\d+)?$\");\\n        return regex.IsMatch(s);\\n    }\\n}"
                    },
                    {
                        "username": "aarushsharmaa",
                        "content": "This question mainly requires us to handle a lot of edge cases,  I still haven\\'t been able to clear all test cases."
                    },
                    {
                        "username": "micah23",
                        "content": "I don\\'t think this is a terribly difficult problem if you chop each condition into pieces. It can\\'t contain any non-e letters. It can contain at most one e. If it does, split it at the e and then you can evaluate each half separately. Each part can have a + or -, and it has to be the first character. The remaining numbers can have exactly one decimal point (if there\\'s a decimal in the part after the e, it fails). Doesn\\'t matter where it is in the number, as long as there\\'s at least one digit on one of the sides. That\\'s pretty much all you need to check.\\n\\nIt\\'s actually so easy you can do it with a single regex (thanks to ChatGPT)\\n\\n `/^[+-]?(?:\\\\d+\\\\.\\\\d*|\\\\.\\\\d+|\\\\d+)(?:[eE][+-]?\\\\d+)?$/`"
                    },
                    {
                        "username": "subowu",
                        "content": "inf"
                    },
                    {
                        "username": "Finesse",
                        "content": "It's easy if you know basic regular expression syntax. Not much harder if regular expressions aren't allowed."
                    },
                    {
                        "username": "whattodonext",
                        "content": "A classic state machine DFA problem. Drawing a state machine would easily solve this problem.\\n\\nHere is the code:\\n```\\nenum class CharType {\\n  INVALID,\\n  SIGN,\\n  DIGIT,\\n  DOT,\\n  E,\\n  EOF_\\n};\\n\\nstruct Char {\\n  char c;\\n  CharType type;\\n};\\n\\nclass NumberChecker {\\n public:\\n  NumberChecker(const string &s) : s_(s), pos_(0), end_(s.size()) {}\\n  ~NumberChecker() = default;\\n\\n  Char next_char() {\\n    Char nextc;\\n    if (pos_ >= end_) {\\n      nextc.type = CharType::EOF_;\\n      return nextc;\\n    }\\n    int c = s_[pos_++];\\n    nextc.c = c;\\n\\n    if (c == \\'+\\' || c == \\'-\\') {\\n      nextc.type = CharType::SIGN;\\n    } else if (c >= \\'0\\' && c <= \\'9\\') {\\n      nextc.type = CharType::DIGIT;\\n    } else if (c == \\'.\\') {\\n      nextc.type = CharType::DOT;\\n    } else if (c == \\'e\\' || c == \\'E\\') {\\n      nextc.type = CharType::E;\\n    } else {\\n      nextc.type = CharType::INVALID;\\n    }\\n    return nextc;\\n  }\\n\\n  bool check() {\\n    Char nextc = next_char();\\n    for (; ; nextc = next_char()) {\\n      switch (state_) {\\n        case 1: {\\n          if (nextc.type == CharType::SIGN) {\\n            state_ = 2;\\n          } else if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 2: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 3: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 4;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 4: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 5: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 51: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 6: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 7: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::SIGN) {\\n            state_ = 8;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 8: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 9: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        default:\\n          return false;\\n      }\\n    }\\n    return false;\\n  }\\n\\n protected:\\n  int state_ = 1;\\n  const string &s_;\\n  size_t pos_ = 0;\\n  size_t end_ = -1;\\n};\\n\\nclass Solution {\\n public:\\n  bool isNumber(string s) {\\n    NumberChecker checker(s);\\n    bool res = checker.check();\\n    return res;\\n  }\\n};\\n```"
                    },
                    {
                        "username": "taubin17",
                        "content": "Test caes 1206: e9 --- output: true ---expected: false.\\n\\nThat is very much a valid number... at least according to the problem conditions."
                    },
                    {
                        "username": "mobeenyaqub",
                        "content": "Running code on pycharm gives me correct answers, but not on leetcode? What's the issue?"
                    }
                ]
            },
            {
                "id": 1753381,
                "content": [
                    {
                        "username": "user8064qE",
                        "content": "\"6e6.5\" should be True not False"
                    },
                    {
                        "username": "Dendi_",
                        "content": "Perfect question which shows that what not to be asked in interviews."
                    },
                    {
                        "username": "tystandoffer",
                        "content": "using System;\\nusing System.Text.RegularExpressions;\\n\\npublic class Solution {\\n    public bool IsNumber(string s) {\\n        // Use regular expression to check if the string is a valid number\\n        Regex regex = new Regex(@\"^[+-]?((\\\\d+\\\\.\\\\d*)|(\\\\d*\\\\.\\\\d+)|(\\\\d+))([eE][+-]?\\\\d+)?$\");\\n        return regex.IsMatch(s);\\n    }\\n}"
                    },
                    {
                        "username": "aarushsharmaa",
                        "content": "This question mainly requires us to handle a lot of edge cases,  I still haven\\'t been able to clear all test cases."
                    },
                    {
                        "username": "micah23",
                        "content": "I don\\'t think this is a terribly difficult problem if you chop each condition into pieces. It can\\'t contain any non-e letters. It can contain at most one e. If it does, split it at the e and then you can evaluate each half separately. Each part can have a + or -, and it has to be the first character. The remaining numbers can have exactly one decimal point (if there\\'s a decimal in the part after the e, it fails). Doesn\\'t matter where it is in the number, as long as there\\'s at least one digit on one of the sides. That\\'s pretty much all you need to check.\\n\\nIt\\'s actually so easy you can do it with a single regex (thanks to ChatGPT)\\n\\n `/^[+-]?(?:\\\\d+\\\\.\\\\d*|\\\\.\\\\d+|\\\\d+)(?:[eE][+-]?\\\\d+)?$/`"
                    },
                    {
                        "username": "subowu",
                        "content": "inf"
                    },
                    {
                        "username": "Finesse",
                        "content": "It's easy if you know basic regular expression syntax. Not much harder if regular expressions aren't allowed."
                    },
                    {
                        "username": "whattodonext",
                        "content": "A classic state machine DFA problem. Drawing a state machine would easily solve this problem.\\n\\nHere is the code:\\n```\\nenum class CharType {\\n  INVALID,\\n  SIGN,\\n  DIGIT,\\n  DOT,\\n  E,\\n  EOF_\\n};\\n\\nstruct Char {\\n  char c;\\n  CharType type;\\n};\\n\\nclass NumberChecker {\\n public:\\n  NumberChecker(const string &s) : s_(s), pos_(0), end_(s.size()) {}\\n  ~NumberChecker() = default;\\n\\n  Char next_char() {\\n    Char nextc;\\n    if (pos_ >= end_) {\\n      nextc.type = CharType::EOF_;\\n      return nextc;\\n    }\\n    int c = s_[pos_++];\\n    nextc.c = c;\\n\\n    if (c == \\'+\\' || c == \\'-\\') {\\n      nextc.type = CharType::SIGN;\\n    } else if (c >= \\'0\\' && c <= \\'9\\') {\\n      nextc.type = CharType::DIGIT;\\n    } else if (c == \\'.\\') {\\n      nextc.type = CharType::DOT;\\n    } else if (c == \\'e\\' || c == \\'E\\') {\\n      nextc.type = CharType::E;\\n    } else {\\n      nextc.type = CharType::INVALID;\\n    }\\n    return nextc;\\n  }\\n\\n  bool check() {\\n    Char nextc = next_char();\\n    for (; ; nextc = next_char()) {\\n      switch (state_) {\\n        case 1: {\\n          if (nextc.type == CharType::SIGN) {\\n            state_ = 2;\\n          } else if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 2: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 3: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 4;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 4: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 5: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 51: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 6: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 7: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::SIGN) {\\n            state_ = 8;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 8: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 9: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        default:\\n          return false;\\n      }\\n    }\\n    return false;\\n  }\\n\\n protected:\\n  int state_ = 1;\\n  const string &s_;\\n  size_t pos_ = 0;\\n  size_t end_ = -1;\\n};\\n\\nclass Solution {\\n public:\\n  bool isNumber(string s) {\\n    NumberChecker checker(s);\\n    bool res = checker.check();\\n    return res;\\n  }\\n};\\n```"
                    },
                    {
                        "username": "taubin17",
                        "content": "Test caes 1206: e9 --- output: true ---expected: false.\\n\\nThat is very much a valid number... at least according to the problem conditions."
                    },
                    {
                        "username": "mobeenyaqub",
                        "content": "Running code on pycharm gives me correct answers, but not on leetcode? What's the issue?"
                    }
                ]
            },
            {
                "id": 1750984,
                "content": [
                    {
                        "username": "user8064qE",
                        "content": "\"6e6.5\" should be True not False"
                    },
                    {
                        "username": "Dendi_",
                        "content": "Perfect question which shows that what not to be asked in interviews."
                    },
                    {
                        "username": "tystandoffer",
                        "content": "using System;\\nusing System.Text.RegularExpressions;\\n\\npublic class Solution {\\n    public bool IsNumber(string s) {\\n        // Use regular expression to check if the string is a valid number\\n        Regex regex = new Regex(@\"^[+-]?((\\\\d+\\\\.\\\\d*)|(\\\\d*\\\\.\\\\d+)|(\\\\d+))([eE][+-]?\\\\d+)?$\");\\n        return regex.IsMatch(s);\\n    }\\n}"
                    },
                    {
                        "username": "aarushsharmaa",
                        "content": "This question mainly requires us to handle a lot of edge cases,  I still haven\\'t been able to clear all test cases."
                    },
                    {
                        "username": "micah23",
                        "content": "I don\\'t think this is a terribly difficult problem if you chop each condition into pieces. It can\\'t contain any non-e letters. It can contain at most one e. If it does, split it at the e and then you can evaluate each half separately. Each part can have a + or -, and it has to be the first character. The remaining numbers can have exactly one decimal point (if there\\'s a decimal in the part after the e, it fails). Doesn\\'t matter where it is in the number, as long as there\\'s at least one digit on one of the sides. That\\'s pretty much all you need to check.\\n\\nIt\\'s actually so easy you can do it with a single regex (thanks to ChatGPT)\\n\\n `/^[+-]?(?:\\\\d+\\\\.\\\\d*|\\\\.\\\\d+|\\\\d+)(?:[eE][+-]?\\\\d+)?$/`"
                    },
                    {
                        "username": "subowu",
                        "content": "inf"
                    },
                    {
                        "username": "Finesse",
                        "content": "It's easy if you know basic regular expression syntax. Not much harder if regular expressions aren't allowed."
                    },
                    {
                        "username": "whattodonext",
                        "content": "A classic state machine DFA problem. Drawing a state machine would easily solve this problem.\\n\\nHere is the code:\\n```\\nenum class CharType {\\n  INVALID,\\n  SIGN,\\n  DIGIT,\\n  DOT,\\n  E,\\n  EOF_\\n};\\n\\nstruct Char {\\n  char c;\\n  CharType type;\\n};\\n\\nclass NumberChecker {\\n public:\\n  NumberChecker(const string &s) : s_(s), pos_(0), end_(s.size()) {}\\n  ~NumberChecker() = default;\\n\\n  Char next_char() {\\n    Char nextc;\\n    if (pos_ >= end_) {\\n      nextc.type = CharType::EOF_;\\n      return nextc;\\n    }\\n    int c = s_[pos_++];\\n    nextc.c = c;\\n\\n    if (c == \\'+\\' || c == \\'-\\') {\\n      nextc.type = CharType::SIGN;\\n    } else if (c >= \\'0\\' && c <= \\'9\\') {\\n      nextc.type = CharType::DIGIT;\\n    } else if (c == \\'.\\') {\\n      nextc.type = CharType::DOT;\\n    } else if (c == \\'e\\' || c == \\'E\\') {\\n      nextc.type = CharType::E;\\n    } else {\\n      nextc.type = CharType::INVALID;\\n    }\\n    return nextc;\\n  }\\n\\n  bool check() {\\n    Char nextc = next_char();\\n    for (; ; nextc = next_char()) {\\n      switch (state_) {\\n        case 1: {\\n          if (nextc.type == CharType::SIGN) {\\n            state_ = 2;\\n          } else if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 2: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 3: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 4;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 4: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 5: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 51: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 6: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 7: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::SIGN) {\\n            state_ = 8;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 8: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 9: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        default:\\n          return false;\\n      }\\n    }\\n    return false;\\n  }\\n\\n protected:\\n  int state_ = 1;\\n  const string &s_;\\n  size_t pos_ = 0;\\n  size_t end_ = -1;\\n};\\n\\nclass Solution {\\n public:\\n  bool isNumber(string s) {\\n    NumberChecker checker(s);\\n    bool res = checker.check();\\n    return res;\\n  }\\n};\\n```"
                    },
                    {
                        "username": "taubin17",
                        "content": "Test caes 1206: e9 --- output: true ---expected: false.\\n\\nThat is very much a valid number... at least according to the problem conditions."
                    },
                    {
                        "username": "mobeenyaqub",
                        "content": "Running code on pycharm gives me correct answers, but not on leetcode? What's the issue?"
                    }
                ]
            },
            {
                "id": 1736658,
                "content": [
                    {
                        "username": "user8064qE",
                        "content": "\"6e6.5\" should be True not False"
                    },
                    {
                        "username": "Dendi_",
                        "content": "Perfect question which shows that what not to be asked in interviews."
                    },
                    {
                        "username": "tystandoffer",
                        "content": "using System;\\nusing System.Text.RegularExpressions;\\n\\npublic class Solution {\\n    public bool IsNumber(string s) {\\n        // Use regular expression to check if the string is a valid number\\n        Regex regex = new Regex(@\"^[+-]?((\\\\d+\\\\.\\\\d*)|(\\\\d*\\\\.\\\\d+)|(\\\\d+))([eE][+-]?\\\\d+)?$\");\\n        return regex.IsMatch(s);\\n    }\\n}"
                    },
                    {
                        "username": "aarushsharmaa",
                        "content": "This question mainly requires us to handle a lot of edge cases,  I still haven\\'t been able to clear all test cases."
                    },
                    {
                        "username": "micah23",
                        "content": "I don\\'t think this is a terribly difficult problem if you chop each condition into pieces. It can\\'t contain any non-e letters. It can contain at most one e. If it does, split it at the e and then you can evaluate each half separately. Each part can have a + or -, and it has to be the first character. The remaining numbers can have exactly one decimal point (if there\\'s a decimal in the part after the e, it fails). Doesn\\'t matter where it is in the number, as long as there\\'s at least one digit on one of the sides. That\\'s pretty much all you need to check.\\n\\nIt\\'s actually so easy you can do it with a single regex (thanks to ChatGPT)\\n\\n `/^[+-]?(?:\\\\d+\\\\.\\\\d*|\\\\.\\\\d+|\\\\d+)(?:[eE][+-]?\\\\d+)?$/`"
                    },
                    {
                        "username": "subowu",
                        "content": "inf"
                    },
                    {
                        "username": "Finesse",
                        "content": "It's easy if you know basic regular expression syntax. Not much harder if regular expressions aren't allowed."
                    },
                    {
                        "username": "whattodonext",
                        "content": "A classic state machine DFA problem. Drawing a state machine would easily solve this problem.\\n\\nHere is the code:\\n```\\nenum class CharType {\\n  INVALID,\\n  SIGN,\\n  DIGIT,\\n  DOT,\\n  E,\\n  EOF_\\n};\\n\\nstruct Char {\\n  char c;\\n  CharType type;\\n};\\n\\nclass NumberChecker {\\n public:\\n  NumberChecker(const string &s) : s_(s), pos_(0), end_(s.size()) {}\\n  ~NumberChecker() = default;\\n\\n  Char next_char() {\\n    Char nextc;\\n    if (pos_ >= end_) {\\n      nextc.type = CharType::EOF_;\\n      return nextc;\\n    }\\n    int c = s_[pos_++];\\n    nextc.c = c;\\n\\n    if (c == \\'+\\' || c == \\'-\\') {\\n      nextc.type = CharType::SIGN;\\n    } else if (c >= \\'0\\' && c <= \\'9\\') {\\n      nextc.type = CharType::DIGIT;\\n    } else if (c == \\'.\\') {\\n      nextc.type = CharType::DOT;\\n    } else if (c == \\'e\\' || c == \\'E\\') {\\n      nextc.type = CharType::E;\\n    } else {\\n      nextc.type = CharType::INVALID;\\n    }\\n    return nextc;\\n  }\\n\\n  bool check() {\\n    Char nextc = next_char();\\n    for (; ; nextc = next_char()) {\\n      switch (state_) {\\n        case 1: {\\n          if (nextc.type == CharType::SIGN) {\\n            state_ = 2;\\n          } else if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 2: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 3: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 4;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 4: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 5: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 51: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 6: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 7: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::SIGN) {\\n            state_ = 8;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 8: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 9: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        default:\\n          return false;\\n      }\\n    }\\n    return false;\\n  }\\n\\n protected:\\n  int state_ = 1;\\n  const string &s_;\\n  size_t pos_ = 0;\\n  size_t end_ = -1;\\n};\\n\\nclass Solution {\\n public:\\n  bool isNumber(string s) {\\n    NumberChecker checker(s);\\n    bool res = checker.check();\\n    return res;\\n  }\\n};\\n```"
                    },
                    {
                        "username": "taubin17",
                        "content": "Test caes 1206: e9 --- output: true ---expected: false.\\n\\nThat is very much a valid number... at least according to the problem conditions."
                    },
                    {
                        "username": "mobeenyaqub",
                        "content": "Running code on pycharm gives me correct answers, but not on leetcode? What's the issue?"
                    }
                ]
            },
            {
                "id": 1727511,
                "content": [
                    {
                        "username": "user8064qE",
                        "content": "\"6e6.5\" should be True not False"
                    },
                    {
                        "username": "Dendi_",
                        "content": "Perfect question which shows that what not to be asked in interviews."
                    },
                    {
                        "username": "tystandoffer",
                        "content": "using System;\\nusing System.Text.RegularExpressions;\\n\\npublic class Solution {\\n    public bool IsNumber(string s) {\\n        // Use regular expression to check if the string is a valid number\\n        Regex regex = new Regex(@\"^[+-]?((\\\\d+\\\\.\\\\d*)|(\\\\d*\\\\.\\\\d+)|(\\\\d+))([eE][+-]?\\\\d+)?$\");\\n        return regex.IsMatch(s);\\n    }\\n}"
                    },
                    {
                        "username": "aarushsharmaa",
                        "content": "This question mainly requires us to handle a lot of edge cases,  I still haven\\'t been able to clear all test cases."
                    },
                    {
                        "username": "micah23",
                        "content": "I don\\'t think this is a terribly difficult problem if you chop each condition into pieces. It can\\'t contain any non-e letters. It can contain at most one e. If it does, split it at the e and then you can evaluate each half separately. Each part can have a + or -, and it has to be the first character. The remaining numbers can have exactly one decimal point (if there\\'s a decimal in the part after the e, it fails). Doesn\\'t matter where it is in the number, as long as there\\'s at least one digit on one of the sides. That\\'s pretty much all you need to check.\\n\\nIt\\'s actually so easy you can do it with a single regex (thanks to ChatGPT)\\n\\n `/^[+-]?(?:\\\\d+\\\\.\\\\d*|\\\\.\\\\d+|\\\\d+)(?:[eE][+-]?\\\\d+)?$/`"
                    },
                    {
                        "username": "subowu",
                        "content": "inf"
                    },
                    {
                        "username": "Finesse",
                        "content": "It's easy if you know basic regular expression syntax. Not much harder if regular expressions aren't allowed."
                    },
                    {
                        "username": "whattodonext",
                        "content": "A classic state machine DFA problem. Drawing a state machine would easily solve this problem.\\n\\nHere is the code:\\n```\\nenum class CharType {\\n  INVALID,\\n  SIGN,\\n  DIGIT,\\n  DOT,\\n  E,\\n  EOF_\\n};\\n\\nstruct Char {\\n  char c;\\n  CharType type;\\n};\\n\\nclass NumberChecker {\\n public:\\n  NumberChecker(const string &s) : s_(s), pos_(0), end_(s.size()) {}\\n  ~NumberChecker() = default;\\n\\n  Char next_char() {\\n    Char nextc;\\n    if (pos_ >= end_) {\\n      nextc.type = CharType::EOF_;\\n      return nextc;\\n    }\\n    int c = s_[pos_++];\\n    nextc.c = c;\\n\\n    if (c == \\'+\\' || c == \\'-\\') {\\n      nextc.type = CharType::SIGN;\\n    } else if (c >= \\'0\\' && c <= \\'9\\') {\\n      nextc.type = CharType::DIGIT;\\n    } else if (c == \\'.\\') {\\n      nextc.type = CharType::DOT;\\n    } else if (c == \\'e\\' || c == \\'E\\') {\\n      nextc.type = CharType::E;\\n    } else {\\n      nextc.type = CharType::INVALID;\\n    }\\n    return nextc;\\n  }\\n\\n  bool check() {\\n    Char nextc = next_char();\\n    for (; ; nextc = next_char()) {\\n      switch (state_) {\\n        case 1: {\\n          if (nextc.type == CharType::SIGN) {\\n            state_ = 2;\\n          } else if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 2: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 3: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 4;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 4: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 5: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 51: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 6: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 7: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::SIGN) {\\n            state_ = 8;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 8: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 9: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        default:\\n          return false;\\n      }\\n    }\\n    return false;\\n  }\\n\\n protected:\\n  int state_ = 1;\\n  const string &s_;\\n  size_t pos_ = 0;\\n  size_t end_ = -1;\\n};\\n\\nclass Solution {\\n public:\\n  bool isNumber(string s) {\\n    NumberChecker checker(s);\\n    bool res = checker.check();\\n    return res;\\n  }\\n};\\n```"
                    },
                    {
                        "username": "taubin17",
                        "content": "Test caes 1206: e9 --- output: true ---expected: false.\\n\\nThat is very much a valid number... at least according to the problem conditions."
                    },
                    {
                        "username": "mobeenyaqub",
                        "content": "Running code on pycharm gives me correct answers, but not on leetcode? What's the issue?"
                    }
                ]
            },
            {
                "id": 1725651,
                "content": [
                    {
                        "username": "user8064qE",
                        "content": "\"6e6.5\" should be True not False"
                    },
                    {
                        "username": "Dendi_",
                        "content": "Perfect question which shows that what not to be asked in interviews."
                    },
                    {
                        "username": "tystandoffer",
                        "content": "using System;\\nusing System.Text.RegularExpressions;\\n\\npublic class Solution {\\n    public bool IsNumber(string s) {\\n        // Use regular expression to check if the string is a valid number\\n        Regex regex = new Regex(@\"^[+-]?((\\\\d+\\\\.\\\\d*)|(\\\\d*\\\\.\\\\d+)|(\\\\d+))([eE][+-]?\\\\d+)?$\");\\n        return regex.IsMatch(s);\\n    }\\n}"
                    },
                    {
                        "username": "aarushsharmaa",
                        "content": "This question mainly requires us to handle a lot of edge cases,  I still haven\\'t been able to clear all test cases."
                    },
                    {
                        "username": "micah23",
                        "content": "I don\\'t think this is a terribly difficult problem if you chop each condition into pieces. It can\\'t contain any non-e letters. It can contain at most one e. If it does, split it at the e and then you can evaluate each half separately. Each part can have a + or -, and it has to be the first character. The remaining numbers can have exactly one decimal point (if there\\'s a decimal in the part after the e, it fails). Doesn\\'t matter where it is in the number, as long as there\\'s at least one digit on one of the sides. That\\'s pretty much all you need to check.\\n\\nIt\\'s actually so easy you can do it with a single regex (thanks to ChatGPT)\\n\\n `/^[+-]?(?:\\\\d+\\\\.\\\\d*|\\\\.\\\\d+|\\\\d+)(?:[eE][+-]?\\\\d+)?$/`"
                    },
                    {
                        "username": "subowu",
                        "content": "inf"
                    },
                    {
                        "username": "Finesse",
                        "content": "It's easy if you know basic regular expression syntax. Not much harder if regular expressions aren't allowed."
                    },
                    {
                        "username": "whattodonext",
                        "content": "A classic state machine DFA problem. Drawing a state machine would easily solve this problem.\\n\\nHere is the code:\\n```\\nenum class CharType {\\n  INVALID,\\n  SIGN,\\n  DIGIT,\\n  DOT,\\n  E,\\n  EOF_\\n};\\n\\nstruct Char {\\n  char c;\\n  CharType type;\\n};\\n\\nclass NumberChecker {\\n public:\\n  NumberChecker(const string &s) : s_(s), pos_(0), end_(s.size()) {}\\n  ~NumberChecker() = default;\\n\\n  Char next_char() {\\n    Char nextc;\\n    if (pos_ >= end_) {\\n      nextc.type = CharType::EOF_;\\n      return nextc;\\n    }\\n    int c = s_[pos_++];\\n    nextc.c = c;\\n\\n    if (c == \\'+\\' || c == \\'-\\') {\\n      nextc.type = CharType::SIGN;\\n    } else if (c >= \\'0\\' && c <= \\'9\\') {\\n      nextc.type = CharType::DIGIT;\\n    } else if (c == \\'.\\') {\\n      nextc.type = CharType::DOT;\\n    } else if (c == \\'e\\' || c == \\'E\\') {\\n      nextc.type = CharType::E;\\n    } else {\\n      nextc.type = CharType::INVALID;\\n    }\\n    return nextc;\\n  }\\n\\n  bool check() {\\n    Char nextc = next_char();\\n    for (; ; nextc = next_char()) {\\n      switch (state_) {\\n        case 1: {\\n          if (nextc.type == CharType::SIGN) {\\n            state_ = 2;\\n          } else if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 2: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 3: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 4;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 4: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 5: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 51: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 6: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 7: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::SIGN) {\\n            state_ = 8;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 8: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 9: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        default:\\n          return false;\\n      }\\n    }\\n    return false;\\n  }\\n\\n protected:\\n  int state_ = 1;\\n  const string &s_;\\n  size_t pos_ = 0;\\n  size_t end_ = -1;\\n};\\n\\nclass Solution {\\n public:\\n  bool isNumber(string s) {\\n    NumberChecker checker(s);\\n    bool res = checker.check();\\n    return res;\\n  }\\n};\\n```"
                    },
                    {
                        "username": "taubin17",
                        "content": "Test caes 1206: e9 --- output: true ---expected: false.\\n\\nThat is very much a valid number... at least according to the problem conditions."
                    },
                    {
                        "username": "mobeenyaqub",
                        "content": "Running code on pycharm gives me correct answers, but not on leetcode? What's the issue?"
                    }
                ]
            },
            {
                "id": 1713047,
                "content": [
                    {
                        "username": "user8064qE",
                        "content": "\"6e6.5\" should be True not False"
                    },
                    {
                        "username": "Dendi_",
                        "content": "Perfect question which shows that what not to be asked in interviews."
                    },
                    {
                        "username": "tystandoffer",
                        "content": "using System;\\nusing System.Text.RegularExpressions;\\n\\npublic class Solution {\\n    public bool IsNumber(string s) {\\n        // Use regular expression to check if the string is a valid number\\n        Regex regex = new Regex(@\"^[+-]?((\\\\d+\\\\.\\\\d*)|(\\\\d*\\\\.\\\\d+)|(\\\\d+))([eE][+-]?\\\\d+)?$\");\\n        return regex.IsMatch(s);\\n    }\\n}"
                    },
                    {
                        "username": "aarushsharmaa",
                        "content": "This question mainly requires us to handle a lot of edge cases,  I still haven\\'t been able to clear all test cases."
                    },
                    {
                        "username": "micah23",
                        "content": "I don\\'t think this is a terribly difficult problem if you chop each condition into pieces. It can\\'t contain any non-e letters. It can contain at most one e. If it does, split it at the e and then you can evaluate each half separately. Each part can have a + or -, and it has to be the first character. The remaining numbers can have exactly one decimal point (if there\\'s a decimal in the part after the e, it fails). Doesn\\'t matter where it is in the number, as long as there\\'s at least one digit on one of the sides. That\\'s pretty much all you need to check.\\n\\nIt\\'s actually so easy you can do it with a single regex (thanks to ChatGPT)\\n\\n `/^[+-]?(?:\\\\d+\\\\.\\\\d*|\\\\.\\\\d+|\\\\d+)(?:[eE][+-]?\\\\d+)?$/`"
                    },
                    {
                        "username": "subowu",
                        "content": "inf"
                    },
                    {
                        "username": "Finesse",
                        "content": "It's easy if you know basic regular expression syntax. Not much harder if regular expressions aren't allowed."
                    },
                    {
                        "username": "whattodonext",
                        "content": "A classic state machine DFA problem. Drawing a state machine would easily solve this problem.\\n\\nHere is the code:\\n```\\nenum class CharType {\\n  INVALID,\\n  SIGN,\\n  DIGIT,\\n  DOT,\\n  E,\\n  EOF_\\n};\\n\\nstruct Char {\\n  char c;\\n  CharType type;\\n};\\n\\nclass NumberChecker {\\n public:\\n  NumberChecker(const string &s) : s_(s), pos_(0), end_(s.size()) {}\\n  ~NumberChecker() = default;\\n\\n  Char next_char() {\\n    Char nextc;\\n    if (pos_ >= end_) {\\n      nextc.type = CharType::EOF_;\\n      return nextc;\\n    }\\n    int c = s_[pos_++];\\n    nextc.c = c;\\n\\n    if (c == \\'+\\' || c == \\'-\\') {\\n      nextc.type = CharType::SIGN;\\n    } else if (c >= \\'0\\' && c <= \\'9\\') {\\n      nextc.type = CharType::DIGIT;\\n    } else if (c == \\'.\\') {\\n      nextc.type = CharType::DOT;\\n    } else if (c == \\'e\\' || c == \\'E\\') {\\n      nextc.type = CharType::E;\\n    } else {\\n      nextc.type = CharType::INVALID;\\n    }\\n    return nextc;\\n  }\\n\\n  bool check() {\\n    Char nextc = next_char();\\n    for (; ; nextc = next_char()) {\\n      switch (state_) {\\n        case 1: {\\n          if (nextc.type == CharType::SIGN) {\\n            state_ = 2;\\n          } else if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 2: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 5;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 3: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 3;\\n          } else if (nextc.type == CharType::DOT) {\\n            state_ = 4;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 4: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 5: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 51: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 51;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 6: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 6;\\n          } else if (nextc.type == CharType::E) {\\n            state_ = 7;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 7: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::SIGN) {\\n            state_ = 8;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 8: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        case 9: {\\n          if (nextc.type == CharType::DIGIT) {\\n            state_ = 9;\\n          } else if (nextc.type == CharType::EOF_) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        } break;\\n        default:\\n          return false;\\n      }\\n    }\\n    return false;\\n  }\\n\\n protected:\\n  int state_ = 1;\\n  const string &s_;\\n  size_t pos_ = 0;\\n  size_t end_ = -1;\\n};\\n\\nclass Solution {\\n public:\\n  bool isNumber(string s) {\\n    NumberChecker checker(s);\\n    bool res = checker.check();\\n    return res;\\n  }\\n};\\n```"
                    },
                    {
                        "username": "taubin17",
                        "content": "Test caes 1206: e9 --- output: true ---expected: false.\\n\\nThat is very much a valid number... at least according to the problem conditions."
                    },
                    {
                        "username": "mobeenyaqub",
                        "content": "Running code on pycharm gives me correct answers, but not on leetcode? What's the issue?"
                    }
                ]
            }
        ]
    },
    {
        "title": "Compare Version Numbers",
        "question_content": "<p>Given two version numbers,&nbsp;<code>version1</code> and <code>version2</code>, compare them.</p>\n\n<ul>\n</ul>\n\n<p>Version numbers consist of <strong>one or more revisions</strong> joined by a dot&nbsp;<code>&#39;.&#39;</code>. Each revision&nbsp;consists of <strong>digits</strong>&nbsp;and may contain leading <strong>zeros</strong>. Every revision contains <strong>at least one character</strong>. Revisions are <strong>0-indexed from left to right</strong>, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example&nbsp;<code>2.5.33</code>&nbsp;and&nbsp;<code>0.1</code>&nbsp;are valid version numbers.</p>\n\n<p>To compare version numbers, compare their revisions in <strong>left-to-right order</strong>. Revisions are compared using their&nbsp;<strong>integer value ignoring any leading zeros</strong>. This means that revisions&nbsp;<code>1</code>&nbsp;and&nbsp;<code>001</code>&nbsp;are considered&nbsp;<strong>equal</strong>. If a version number does not specify a revision at an index, then&nbsp;<strong>treat the revision as&nbsp;<code>0</code></strong>. For example, version&nbsp;<code>1.0</code> is less than version&nbsp;<code>1.1</code>&nbsp;because their revision 0s are the same, but their revision 1s are&nbsp;<code>0</code>&nbsp;and&nbsp;<code>1</code>&nbsp;respectively, and&nbsp;<code>0 &lt; 1</code>.</p>\n\n<p><em>Return the following:</em></p>\n\n<ul>\n\t<li>If <code>version1 &lt; version2</code>, return <code>-1</code>.</li>\n\t<li>If <code>version1 &gt; version2</code>, return <code>1</code>.</li>\n\t<li>Otherwise, return <code>0</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Ignoring leading zeroes, both &quot;01&quot; and &quot;001&quot; represent the same integer &quot;1&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> version1 = &quot;1.0&quot;, version2 = &quot;1.0.0&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> version1 does not specify revision 2, which means it is treated as &quot;0&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> version1 = &quot;0.1&quot;, version2 = &quot;1.1&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> version1&#39;s revision 0 is &quot;0&quot;, while version2&#39;s revision 0 is &quot;1&quot;. 0 &lt; 1, so version1 &lt; version2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li>\n\t<li><code>version1</code> and <code>version2</code>&nbsp;only contain digits and <code>&#39;.&#39;</code>.</li>\n\t<li><code>version1</code> and <code>version2</code>&nbsp;<strong>are valid version numbers</strong>.</li>\n\t<li>All the given revisions in&nbsp;<code>version1</code> and <code>version2</code>&nbsp;can be stored in&nbsp;a&nbsp;<strong>32-bit integer</strong>.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 1797594,
                "title": "python3-solution-explained",
                "content": "**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**\\n\\nFirstly, we split versions by `.` and convert revisions to integers. Next, we iterate over revisions and compare one by one.\\n\\n`zip_longest` - same as a `zip` but it also pads lists with zeros if lengths are not equal *(see https://docs.python.org/3/library/itertools.html#itertools.ziplongest)*\\n\\nRuntime: 32 ms, faster than **83.77%** of Python3 online submissions for Compare Version Numbers.\\nMemory Usage: 13.8 MB, less than **99.63%** of Python3 online submissions for Compare Version Numbers.\\n\\n```\\nclass Solution:\\n    def compareVersion(self, v1: str, v2: str) -> int:\\n        v1, v2 = list(map(int, v1.split(\\'.\\'))), list(map(int, v2.split(\\'.\\')))  \\n        for rev1, rev2 in zip_longest(v1, v2, fillvalue=0):\\n            if rev1 == rev2:\\n                continue\\n\\n            return -1 if rev1 < rev2 else 1 \\n\\n        return 0\\n```\\n\\n**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compareVersion(self, v1: str, v2: str) -> int:\\n        v1, v2 = list(map(int, v1.split(\\'.\\'))), list(map(int, v2.split(\\'.\\')))  \\n        for rev1, rev2 in zip_longest(v1, v2, fillvalue=0):\\n            if rev1 == rev2:\\n                continue\\n\\n            return -1 if rev1 < rev2 else 1 \\n\\n        return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 50774,
                "title": "accepted-small-java-solution",
                "content": "This code assumes that next level is zero if no mo levels in shorter version number. And than compare levels.\\n\\n\\n    public int compareVersion(String version1, String version2) {\\n        String[] levels1 = version1.split(\"\\\\\\\\.\");\\n        String[] levels2 = version2.split(\"\\\\\\\\.\");\\n        \\n        int length = Math.max(levels1.length, levels2.length);\\n        for (int i=0; i<length; i++) {\\n        \\tInteger v1 = i < levels1.length ? Integer.parseInt(levels1[i]) : 0;\\n        \\tInteger v2 = i < levels2.length ? Integer.parseInt(levels2[i]) : 0;\\n        \\tint compare = v1.compareTo(v2);\\n        \\tif (compare != 0) {\\n        \\t\\treturn compare;\\n        \\t}\\n        }\\n        \\n        return 0;\\n    }",
                "solutionTags": [],
                "code": "This code assumes that next level is zero if no mo levels in shorter version number. And than compare levels.\\n\\n\\n    public int compareVersion(String version1, String version2) {\\n        String[] levels1 = version1.split(\"\\\\\\\\.\");\\n        String[] levels2 = version2.split(\"\\\\\\\\.\");\\n        \\n        int length = Math.max(levels1.length, levels2.length);\\n        for (int i=0; i<length; i++) {\\n        \\tInteger v1 = i < levels1.length ? Integer.parseInt(levels1[i]) : 0;\\n        \\tInteger v2 = i < levels2.length ? Integer.parseInt(levels2[i]) : 0;\\n        \\tint compare = v1.compareTo(v2);\\n        \\tif (compare != 0) {\\n        \\t\\treturn compare;\\n        \\t}\\n        }\\n        \\n        return 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 50767,
                "title": "my-2ms-easy-solution-with-c-c",
                "content": "    int compareVersion(string version1, string version2) {\\n        int i = 0; \\n        int j = 0;\\n        int n1 = version1.size(); \\n        int n2 = version2.size();\\n        \\n        int num1 = 0;\\n        int num2 = 0;\\n        while(i<n1 || j<n2)\\n        {\\n            while(i<n1 && version1[i]!='.'){\\n                num1 = num1*10+(version1[i]-'0');\\n                i++;\\n            }\\n            \\n            while(j<n2 && version2[j]!='.'){\\n                num2 = num2*10+(version2[j]-'0');;\\n                j++;\\n            }\\n            \\n            if(num1>num2) return 1;\\n            else if(num1 < num2) return -1;\\n            \\n            num1 = 0;\\n            num2 = 0;\\n            i++;\\n            j++;\\n        }\\n        \\n        return 0;\\n    }",
                "solutionTags": [],
                "code": "    int compareVersion(string version1, string version2) {\\n        int i = 0; \\n        int j = 0;\\n        int n1 = version1.size(); \\n        int n2 = version2.size();\\n        \\n        int num1 = 0;\\n        int num2 = 0;\\n        while(i<n1 || j<n2)\\n        {\\n            while(i<n1 && version1[i]!='.'){\\n                num1 = num1*10+(version1[i]-'0');\\n                i++;\\n            }\\n            \\n            while(j<n2 && version2[j]!='.'){\\n                num2 = num2*10+(version2[j]-'0');;\\n                j++;\\n            }\\n            \\n            if(num1>num2) return 1;\\n            else if(num1 < num2) return -1;\\n            \\n            num1 = 0;\\n            num2 = 0;\\n            i++;\\n            j++;\\n        }\\n        \\n        return 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 50952,
                "title": "python-10-lines-solution",
                "content": "    def compareVersion(self, version1, version2):\\n            versions1 = [int(v) for v in version1.split(\".\")]\\n            versions2 = [int(v) for v in version2.split(\".\")]\\n            for i in range(max(len(versions1),len(versions2))):\\n                v1 = versions1[i] if i < len(versions1) else 0\\n                v2 = versions2[i] if i < len(versions2) else 0\\n                if v1 > v2:\\n                    return 1\\n                elif v1 < v2:\\n                    return -1;\\n            return 0;",
                "solutionTags": [],
                "code": "    def compareVersion(self, version1, version2):\\n            versions1 = [int(v) for v in version1.split(\".\")]\\n            versions2 = [int(v) for v in version2.split(\".\")]\\n            for i in range(max(len(versions1),len(versions2))):\\n                v1 = versions1[i] if i < len(versions1) else 0\\n                v2 = versions2[i] if i < len(versions2) else 0\\n                if v1 > v2:\\n                    return 1\\n                elif v1 < v2:\\n                    return -1;\\n            return 0;",
                "codeTag": "Python3"
            },
            {
                "id": 50788,
                "title": "my-java-solution-without-split",
                "content": "    public class Solution {\\n    public int compareVersion(String version1, String version2) {\\n        int temp1 = 0,temp2 = 0;\\n        int len1 = version1.length(),len2 = version2.length();\\n        int i = 0,j = 0;\\n        while(i<len1 || j<len2) {\\n            temp1 = 0;\\n            temp2 = 0;\\n            while(i<len1 && version1.charAt(i) != '.') {\\n                temp1 = temp1*10 + version1.charAt(i++)-'0';\\n                \\n            }\\n            while(j<len2 && version2.charAt(j) != '.') {\\n                temp2 = temp2*10 + version2.charAt(j++)-'0';\\n                \\n            }\\n            if(temp1>temp2) return 1;\\n            else if(temp1<temp2) return -1;\\n            else {\\n                i++;\\n                j++;\\n                \\n            }\\n            \\n        }\\n        return 0;\\n        \\n    }\\n    \\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int compareVersion(String version1, String version2) {\\n        int temp1 = 0,temp2 = 0;\\n        int len1 = version1.length(),len2 = version2.length();\\n        int i = 0,j = 0;\\n        while(i<len1 || j<len2) {\\n            temp1 = 0;\\n            temp2 = 0;\\n            while(i<len1 && version1.charAt(i) != '.') {\\n                temp1 = temp1*10 + version1.charAt(i++)-'0';\\n                \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1797276,
                "title": "easy-c-intuitive-solution-fast-simple",
                "content": "**Solution  (Two pointer,Accepted):**\\n\\n* Let\\'s generate some clue that how we will reach to our answer.\\n* The first and the most important thing that we can observe here is by looking a constraint i.e All the given revisions in version1 and version2 can be stored in a 32-bit integer.\\n* It gives us a clue that for comparing some numbers we have open option.\\n* Question asks us to compare versions of two different strings by traversing left to right. And versions are present between dots of strings.\\n* So, Finally we can think of is, We will start generating every possible number present in between dots of both the strings and simply compare those two numbers and on the basis of that comparison we will return our answer.\\n* For doing this we will use our two pointer approach.\\n\\n**See below how it works.**\\n\\n**Two Pointer Approach:**\\n```\\nSuppose our strings given to us is s1 = \"1.1.0.3.5.06\" and s2 = \"1.1.0.00003.5.00005\"\\n\\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n       \\u2191                                         \\u2191\\n\\t   For the first dot number generated from s1 is, number1 = 1 &\\n\\t   For the first dot number generated from s2 is, number2 = 1\\n\\t   Since both them are equal, so we can\\'t comment anything,\\n\\t   therefore we will move further\\n\\t   \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n         \\u2191                                         \\u2191\\n\\t\\t For the second dot number generated from s1 is, number1 = 1 &\\n\\t     For the second dot number generated from s2 is, number2 = 1\\n\\t     Since both them also equal, so we can not comment anything,\\n\\t     therefore we will move further\\n\\t\\t \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n           \\u2191                                         \\u2191\\n\\t\\t   For the third dot number generated from s1 is, number1 = 0 &\\n\\t       For the third dot number generated from s2 is, number2 = 0\\n\\t       Since both again equal, so we can not comment anything,\\n\\t       therefore we will move further\\n\\t\\t   \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n             \\u2191                                             \\u2191\\n\\t\\t\\t For the fourth dot number generated from s1 is, number1 = 3 &\\n\\t         For the fourth dot number generated from s2 is, number2 = 00003\\n\\t\\t\\t //One Important thing is to observe here is, \\n\\t\\t\\t //no matter how many leading zeroes are their, if numbers are same then we will proceed further\\n\\t         Since both again equal, so we can not comment anything,\\n\\t         therefore we will move further\\n\\t\\t\\t \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n               \\u2191                                             \\u2191\\n\\t\\t\\t   For the fifth dot number generated from s1 is, number1 = 5 &\\n\\t           For the fifth dot number generated from s2 is, number2 = 5\\n\\t\\t\\t   Since both again equal, so we can not comment anything,\\n\\t\\t\\t   therefore we will move further\\n\\t\\t\\t   \\ns1 = \"1.1.0.3.5.06 \"                       s2 = \"1.1.0.00003.5.00005 \"\\n                   \\u2191                                                 \\u2191\\n\\t\\t\\t\\t   And lastly number generated from s1 is, number1 = 06 &\\n\\t\\t\\t\\t   number generated from s1 is, number2  = 00005\\n\\t\\t\\t\\t   since number1 > number2 , therefore we will return 1 as our answer.\\n\\nTherefore, Our answer should be 1.\\n```\\n\\n**Please Upvote if you Like it....!   :)**\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {   \\n        int i = 0, j = 0, n1 = version1.size(), n2 = version2.size(), num1 = 0, num2 = 0; \\n        while(i<n1 || j<n2)\\n        {\\n            while(i<n1 && version1[i]!=\\'.\\')\\n            {\\n                num1 = num1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            while(j<n2 && version2[j]!=\\'.\\')\\n            {\\n                num2 = num2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(num1>num2)\\n            {\\n                return 1;\\n            }\\n            if(num1 < num2) \\n            {\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n            num1 = 0;\\n            num2 = 0;\\n        }\\n        return 0; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nSuppose our strings given to us is s1 = \"1.1.0.3.5.06\" and s2 = \"1.1.0.00003.5.00005\"\\n\\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n       \\u2191                                         \\u2191\\n\\t   For the first dot number generated from s1 is, number1 = 1 &\\n\\t   For the first dot number generated from s2 is, number2 = 1\\n\\t   Since both them are equal, so we can\\'t comment anything,\\n\\t   therefore we will move further\\n\\t   \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n         \\u2191                                         \\u2191\\n\\t\\t For the second dot number generated from s1 is, number1 = 1 &\\n\\t     For the second dot number generated from s2 is, number2 = 1\\n\\t     Since both them also equal, so we can not comment anything,\\n\\t     therefore we will move further\\n\\t\\t \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n           \\u2191                                         \\u2191\\n\\t\\t   For the third dot number generated from s1 is, number1 = 0 &\\n\\t       For the third dot number generated from s2 is, number2 = 0\\n\\t       Since both again equal, so we can not comment anything,\\n\\t       therefore we will move further\\n\\t\\t   \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n             \\u2191                                             \\u2191\\n\\t\\t\\t For the fourth dot number generated from s1 is, number1 = 3 &\\n\\t         For the fourth dot number generated from s2 is, number2 = 00003\\n\\t\\t\\t //One Important thing is to observe here is, \\n\\t\\t\\t //no matter how many leading zeroes are their, if numbers are same then we will proceed further\\n\\t         Since both again equal, so we can not comment anything,\\n\\t         therefore we will move further\\n\\t\\t\\t \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n               \\u2191                                             \\u2191\\n\\t\\t\\t   For the fifth dot number generated from s1 is, number1 = 5 &\\n\\t           For the fifth dot number generated from s2 is, number2 = 5\\n\\t\\t\\t   Since both again equal, so we can not comment anything,\\n\\t\\t\\t   therefore we will move further\\n\\t\\t\\t   \\ns1 = \"1.1.0.3.5.06 \"                       s2 = \"1.1.0.00003.5.00005 \"\\n                   \\u2191                                                 \\u2191\\n\\t\\t\\t\\t   And lastly number generated from s1 is, number1 = 06 &\\n\\t\\t\\t\\t   number generated from s1 is, number2  = 00005\\n\\t\\t\\t\\t   since number1 > number2 , therefore we will return 1 as our answer.\\n\\nTherefore, Our answer should be 1.\\n```\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {   \\n        int i = 0, j = 0, n1 = version1.size(), n2 = version2.size(), num1 = 0, num2 = 0; \\n        while(i<n1 || j<n2)\\n        {\\n            while(i<n1 && version1[i]!=\\'.\\')\\n            {\\n                num1 = num1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            while(j<n2 && version2[j]!=\\'.\\')\\n            {\\n                num2 = num2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(num1>num2)\\n            {\\n                return 1;\\n            }\\n            if(num1 < num2) \\n            {\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n            num1 = 0;\\n            num2 = 0;\\n        }\\n        return 0; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 50994,
                "title": "java-solution-with-fewer-if-logic",
                "content": "I checked other Java solution and the basic idea is the same. In addition, I simply the logic by making the two version number same length. For example, if version1 = \"1.0.2\", and version2 = \"1.0\", the I will convert the version2 to \"1.0.0\".\\n\\n>     public int compareVersion(String version1, String version2) {\\n>         \\n>         String[] v1 = version1.split(\"\\\\\\\\.\");\\n>         String[] v2 = version2.split(\"\\\\\\\\.\");\\n>         \\n>         for ( int i = 0; i < Math.max(v1.length, v2.length); i++ ) {\\n>             int num1 = i < v1.length ? Integer.parseInt( v1[i] ) : 0;\\n>             int num2 = i < v2.length ? Integer.parseInt( v2[i] ) : 0;\\n>             if ( num1 < num2 ) {\\n>                 return -1;\\n>             } else if ( num1 > num2 ) {\\n>                 return +1;\\n>             }\\n>         } \\n>         \\n>         return 0;\\n>     }",
                "solutionTags": [],
                "code": "I checked other Java solution and the basic idea is the same. In addition, I simply the logic by making the two version number same length. For example, if version1 = \"1.0.2\", and version2 = \"1.0\", the I will convert the version2 to \"1.0.0\".\\n\\n>     public int compareVersion(String version1, String version2) {\\n>         \\n>         String[] v1 = version1.split(\"\\\\\\\\.\");\\n>         String[] v2 = version2.split(\"\\\\\\\\.\");\\n>         \\n>         for ( int i = 0; i < Math.max(v1.length, v2.length); i++ ) {\\n>             int num1 = i < v1.length ? Integer.parseInt( v1[i] ) : 0;\\n>             int num2 = i < v2.length ? Integer.parseInt( v2[i] ) : 0;\\n>             if ( num1 < num2 ) {\\n>                 return -1;\\n>             } else if ( num1 > num2 ) {\\n>                 return +1;\\n>             }\\n>         } \\n>         \\n>         return 0;\\n>     }",
                "codeTag": "Unknown"
            },
            {
                "id": 50804,
                "title": "10-line-concise-solution-c",
                "content": "This is a concise solution using stringstream to format string into int.\\n \\n    int compareVersion(string version1, string version2) {\\n        for(auto& w : version1) if (w == '.') w=' ';\\n        for(auto& w : version2) if (w == '.') w=' ';\\n        istringstream s1(version1), s2(version2);\\n        while(1) {\\n            int n1,n2;\\n            if (not(s1 >> n1) ) n1 = 0;\\n            if (not(s2 >> n2) ) n2 = 0;\\n            if (not s1 and not s2) return 0;\\n            if (n1<n2) return -1;\\n            if (n1>n2) return 1;\\n        }\\n    }",
                "solutionTags": [],
                "code": "This is a concise solution using stringstream to format string into int.\\n \\n    int compareVersion(string version1, string version2) {\\n        for(auto& w : version1) if (w == '.') w=' ';\\n        for(auto& w : version2) if (w == '.') w=' ';\\n        istringstream s1(version1), s2(version2);\\n        while(1) {\\n            int n1,n2;\\n            if (not(s1 >> n1) ) n1 = 0;\\n            if (not(s2 >> n2) ) n2 = 0;\\n            if (not s1 and not s2) return 0;\\n            if (n1<n2) return -1;\\n            if (n1>n2) return 1;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 50800,
                "title": "2-4-lines-python-3-different-ways",
                "content": "**Solution 1: *Pad with `izip_longest` with `fillvalue=0`***\\n\\n    def compareVersion(self, version1, version2):\\n        splits = (map(int, v.split('.')) for v in (version1, version2))\\n        return cmp(*zip(*itertools.izip_longest(*splits, fillvalue=0)))\\n\\n**Solution 2: *Pad with `[0] * lengthDifference`***\\n\\n    def compareVersion(self, version1, version2):\\n        v1, v2 = (map(int, v.split('.')) for v in (version1, version2))\\n        d = len(v2) - len(v1)\\n        return cmp(v1 + [0]*d, v2 + [0]*-d)\\n\\n**Solution 3: *Recursive, add zeros on the fly***\\n\\n    def compareVersion(self, version1, version2):\\n        main1, _, rest1 = ('0' + version1).partition('.')\\n        main2, _, rest2 = ('0' + version2).partition('.')\\n        return cmp(int(main1), int(main2)) or \\\\\\n               len(rest1+rest2) and self.compareVersion(rest1, rest2)",
                "solutionTags": [
                    "Python"
                ],
                "code": "**Solution 1: *Pad with `izip_longest` with `fillvalue=0`***\\n\\n    def compareVersion(self, version1, version2):\\n        splits = (map(int, v.split('.')) for v in (version1, version2))\\n        return cmp(*zip(*itertools.izip_longest(*splits, fillvalue=0)))\\n\\n**Solution 2: *Pad with `[0] * lengthDifference`***\\n\\n    def compareVersion(self, version1, version2):\\n        v1, v2 = (map(int, v.split('.')) for v in (version1, version2))\\n        d = len(v2) - len(v1)\\n        return cmp(v1 + [0]*d, v2 + [0]*-d)\\n\\n**Solution 3: *Recursive, add zeros on the fly***\\n\\n    def compareVersion(self, version1, version2):\\n        main1, _, rest1 = ('0' + version1).partition('.')\\n        main2, _, rest2 = ('0' + version2).partition('.')\\n        return cmp(int(main1), int(main2)) or \\\\\\n               len(rest1+rest2) and self.compareVersion(rest1, rest2)",
                "codeTag": "Python3"
            },
            {
                "id": 837727,
                "title": "python-easy-split-solution-explained",
                "content": "In python it is more like easy than medium problem, there is not a lot of cases we need to handle.\\n\\n1. First step is to split our strings using `.` and change type from string to int.\\n2. Now, if we have lists of different length, let us add zeros to the end of short list.\\n3. Finally, we need to compare `s1` and `s2` as lists. There is not `cmp()` function in python3, but we can use `(s1 > s2) - (s1 < s2)` trick: if `s1 > s2` then we have `1-0 = 1`, if `s1 = s2`, then we have `0-0 = 0`, if we have `s1< s2`, then `0-1 = -1`.\\n\\n**Complexity**: time complexity is `O(n+m)`, where `n` and `m` are lengths of our strings, space complexity `O(n+m)` as well.\\n\\n```\\nclass Solution:\\n    def compareVersion(self, version1, version2):\\n        s1 = [int(i) for i in version1.split(\".\")]\\n        s2 = [int(i) for i in version2.split(\".\")]\\n        \\n        l1, l2 = len(s1), len(s2)\\n        if l1 < l2: s1 += [0]*(l2-l1) \\n        else: s2 += [0]*(l1 - l2)\\n            \\n        return (s1 > s2) - (s1 < s2)\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def compareVersion(self, version1, version2):\\n        s1 = [int(i) for i in version1.split(\".\")]\\n        s2 = [int(i) for i in version2.split(\".\")]\\n        \\n        l1, l2 = len(s1), len(s2)\\n        if l1 < l2: s1 += [0]*(l2-l1) \\n        else: s2 += [0]*(l1 - l2)\\n            \\n        return (s1 > s2) - (s1 < s2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 837774,
                "title": "c-simple-one-pass-explained-all-string-operations-0-ms-beats-100",
                "content": "**Explanation**\\nThe question is easy but the edge cases make it a bit difficult to work out (at least in C++).\\nHere are the steps I followed:\\n\\n1. Run a single loop over both the strings, `v1` and `v2`.\\n2. Keep two temporary strings, `s1` and `s2` to accumulate the characters of `v1` and `v2`, respectively, till you encounter `.`\\n3. Now, it\\'s time to compare the strings, `s1` and `s2`. First, compare their lengths. The larger length string is greater than the other, according to the question. If they have the same lengths, then you need to compare them lexicographically. Use `s1.compare(s2)` for this.\\n4. Return the result accordingly.\\n\\n\\n**Code**\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string v1, string v2) {\\n        int ans = 0;\\n        int n1 = v1.size(), n2 = v2.size();\\n        \\n        for(int i=0,j=0; i<n1 || j<n2; ++i, ++j) {\\n            \\n            string s1 = \"\", s2 = \"\";\\n\\n            while(i<n1 && v1[i] != \\'.\\') {\\n                if(s1.size() == 0 && v1[i] == \\'0\\') {\\n                    ++i; continue;\\n                }\\n                \\n                s1 += v1[i++];\\n            }\\n            \\n            while(j<n2 && v2[j] != \\'.\\') {\\n                if(s2.size() == 0 && v2[j] == \\'0\\') {\\n                    ++j; continue;\\n                }\\n                \\n                s2 += v2[j++];\\n            }\\n            \\n            if(s1.size() < s2.size()) return -1;\\n            else if(s2.size() < s1.size()) return 1;\\n            \\n            ans = s1.compare(s2);\\n            if(ans < 0) return -1;\\n            else if(ans > 0) return 1;\\n        }\\n        \\n        return 0;\\n        \\n    }\\n};\\n```\\n\\nIf you have any doubts, please feel free to ask them in the comments. Please **Upvote** to help others reach this!\\n\\nHave a great day! Suggestions are welcome.",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string v1, string v2) {\\n        int ans = 0;\\n        int n1 = v1.size(), n2 = v2.size();\\n        \\n        for(int i=0,j=0; i<n1 || j<n2; ++i, ++j) {\\n            \\n            string s1 = \"\", s2 = \"\";\\n\\n            while(i<n1 && v1[i] != \\'.\\') {\\n                if(s1.size() == 0 && v1[i] == \\'0\\') {\\n                    ++i; continue;\\n                }\\n                \\n                s1 += v1[i++];\\n            }\\n            \\n            while(j<n2 && v2[j] != \\'.\\') {\\n                if(s2.size() == 0 && v2[j] == \\'0\\') {\\n                    ++j; continue;\\n                }\\n                \\n                s2 += v2[j++];\\n            }\\n            \\n            if(s1.size() < s2.size()) return -1;\\n            else if(s2.size() < s1.size()) return 1;\\n            \\n            ans = s1.compare(s2);\\n            if(ans < 0) return -1;\\n            else if(ans > 0) return 1;\\n        }\\n        \\n        return 0;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 50959,
                "title": "my-solutions-in-3-languages",
                "content": "Java, >400ms:\\n\\n    public class Solution {\\n        public int compareVersion(String version1, String version2) {\\n            String[] v1 = version1.split(\"\\\\\\\\.\");\\n            String[] v2 = version2.split(\"\\\\\\\\.\");\\n            for (int i = 0; i < Math.max(v1.length, v2.length); i++) {\\n                int gap = (i < v1.length ? Integer.parseInt(v1[i]) : 0) - (i < v2.length ? Integer.parseInt(v2[i]) : 0);\\n                if (gap != 0) {\\n                    return gap > 0 ? 1 : -1;\\n                }\\n            }\\n            return 0;\\n        }\\n    }\\n\\nC++, 4ms:\\n\\n    class Solution {\\n    public:\\n        int compareVersion(string version1, string version2) {\\n            for (; version1 != version2; version1 = nextSubstr(version1), version2 = nextSubstr(version2)) {\\n                int gap = stoi(version1) - stoi(version2);\\n                if (gap != 0) {\\n                    return gap > 0 ? 1 : -1;\\n                }\\n            }\\n            return 0;\\n        }\\n        \\n        string nextSubstr(string str) {\\n            for (int i = 0; i < str.size(); i++) {\\n                if (str.at(i) == '.') {\\n                    return str.substr(i + 1);\\n                }\\n            }\\n            return \"0\";\\n        }\\n    };\\n\\nPython, around 100ms:\\n\\n    class Solution:\\n        # @param a, a string\\n        # @param b, a string\\n        # @return a boolean\\n        def compareVersion(self, version1, version2):\\n            v1 = version1.split('.')\\n            v2 = version2.split('.')\\n            for i in range(max(len(v1), len(v2))):\\n                gap = (int(v1[i]) if i < len(v1) else 0) - (int(v2[i]) if i < len(v2) else 0)\\n                if gap != 0:\\n                    return 1 if gap > 0 else -1\\n            return 0",
                "solutionTags": [],
                "code": "class Solution {\\n        public int compareVersion(String version1, String version2) {\\n            String[] v1 = version1.split(\"\\\\\\\\.\");\\n            String[] v2 = version2.split(\"\\\\\\\\.\");\\n            for (int i = 0; i < Math.max(v1.length, v2.length); i++) {\\n                int gap = (i < v1.length ? Integer.parseInt(v1[i]) : 0) - (i < v2.length ? Integer.parseInt(v2[i]) : 0);\\n                if (gap != 0) {\\n                    return gap > 0 ? 1 : -1;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 50811,
                "title": "simple-java-solution",
                "content": "    public class Solution {\\n        public int compareVersion(String version1, String version2) {\\n            String[] v1 = version1.split(\"\\\\\\\\.\");\\n            String[] v2 = version2.split(\"\\\\\\\\.\");\\n            \\n            int longest = v1.length > v2.length? v1.length: v2.length;\\n            \\n            for(int i=0; i<longest; i++)\\n            {\\n                int ver1 = i<v1.length? Integer.parseInt(v1[i]): 0;\\n                int ver2 = i<v2.length? Integer.parseInt(v2[i]): 0;\\n                \\n                if(ver1> ver2) return 1;\\n                if(ver1 < ver2) return -1;\\n            }\\n            return 0;\\n        }\\n    }\\n\\nAny comments would be appreciated.\\nBasically I split the string with regex \".\" (it was written \"\\\\\\\\.\" since \".\" only means any character), then using looping, I tried to find out the value of the version using parseInt. \\nIf one version has a lesser subversion than the others, it will be filled with zeros.\\n\\nfor example: 1 vs 1.01 --> 1.00 vs 1.01\\n\\nit ran in about 230ms, any suggestion to make it faster with Java language?\\nWhat can be optimized?",
                "solutionTags": [],
                "code": "class Solution {\\n        public int compareVersion(String version1, String version2) {\\n            String[] v1 = version1.split(\"\\\\\\\\.\");\\n            String[] v2 = version2.split(\"\\\\\\\\.\");\\n            \\n            int longest = v1.length > v2.length? v1.length: v2.length;\\n            \\n            for(int i=0; i<longest; i++)\\n            {\\n                int ver1 = i<v1.length? Integer.parseInt(v1[i]): 0;\\n                int ver2 = i<v2.length? Integer.parseInt(v2[i]): 0;\\n                \\n                if(ver1> ver2) return 1;\\n                if(ver1 < ver2) return -1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 837997,
                "title": "8-line-simple-java-solution-100-without-split",
                "content": "```\\npublic int compareVersion(String a, String b) {\\n        for (int i = 0, j = 0, m, n; i < a.length() || j < b.length(); i++, j++) {\\n            m = n = 0;\\n            while (i < a.length() && a.charAt(i) != \\'.\\') m = m * 10 + a.charAt(i++) - \\'0\\';\\n            while (j < b.length() && b.charAt(j) != \\'.\\') n = n * 10 + b.charAt(j++) - \\'0\\';\\n            if (m > n) return 1;\\n            if (m < n) return -1;\\n        }\\n        return 0;\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int compareVersion(String a, String b) {\\n        for (int i = 0, j = 0, m, n; i < a.length() || j < b.length(); i++, j++) {\\n            m = n = 0;\\n            while (i < a.length() && a.charAt(i) != \\'.\\') m = m * 10 + a.charAt(i++) - \\'0\\';\\n            while (j < b.length() && b.charAt(j) != \\'.\\') n = n * 10 + b.charAt(j++) - \\'0\\';\\n            if (m > n) return 1;\\n            if (m < n) return -1;\\n        }\\n        return 0;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 50794,
                "title": "accepted-c-solution-3ms-many-other-solutions-don-t-handle-test-cases-properly-check-your-solution-on-https-www-interviewbit-com-problems-compare-version-numbers-this-link-also",
                "content": "```\\nstring trimzeroes(string s) {\\n    int len = s.length();\\n    \\n    int i=0;\\n    while(i<len&&s[i]=='0') {\\n        i++;\\n    }\\n    if (i==len) {//all zeroes\\n        return \"0\";\\n    }\\n    return s.substr(i);\\n}\\n\\nint isBigger(string s1,string s2) {\\n        //treat as numbers without leading zeros\\n        s1 = trimzeroes(s1);\\n        s2 = trimzeroes(s2);\\n        if (s1.length()>s2.length())\\n            return 1;\\n        if (s1.length()<s2.length())\\n            return -1;\\n        int len = s1.length();\\n        for (int i=0;i<len;i++) {\\n            if (s1[i]>s2[i])\\n                return 1;\\n            if (s1[i]<s2[i])\\n                return -1;\\n        }\\n        return 0;\\n    }\\nint Solution::compareVersion(string version1, string version2) {\\n        int len1 = version1.length();\\n    int len2 = version2.length();\\n        \\n    int i=0;\\n    int j=0;\\n    \\n    string s1 = \"\";\\n    string s2 = \"\";\\n    while(i<len1 && j<len2) {\\n        while(i<len1 && version1[i]!='.') {\\n            s1+=version1[i];\\n            i++;\\n        }\\n        while(j<len2&&version2[j]!='.') {\\n            s2+=version2[j];\\n            j++;\\n        }\\n        int ans = isBigger(s1,s2);\\n        if (ans!=0)\\n            return ans;\\n        s1=\"\";\\n        s2=\"\";\\n        i++;//points to .\\n        j++;//points to .\\n    }\\n    while (i<len1) {\\n        //check if the remaining string is zero or not\\n        while(i<len1&&version1[i]!='.') {\\n            s1+=version1[i];\\n            i++;\\n        }\\n        s1 = trimzeroes(s1);\\n        if (s1!=\"0\")\\n            return 1;\\n        i++;\\n    }\\n    while (j<len2) {\\n        //check if the remaining string is zero or not\\n        while(j<len2&&version2[j]!='.') {\\n            s2+=version2[j];\\n            j++;\\n        }\\n        s2 = trimzeroes(s2);\\n        if (s2!=\"0\")\\n            return -1;\\n        j++;\\n        \\n    }\\n    return 0;    \\n}",
                "solutionTags": [],
                "code": "```\\nstring trimzeroes(string s) {\\n    int len = s.length();\\n    \\n    int i=0;\\n    while(i<len&&s[i]=='0') {\\n        i++;\\n    }\\n    if (i==len) {//all zeroes\\n        return \"0\";\\n    }\\n    return s.substr(i);\\n}\\n\\nint isBigger(string s1,string s2) {\\n        //treat as numbers without leading zeros\\n        s1 = trimzeroes(s1);\\n        s2 = trimzeroes(s2);\\n        if (s1.length()>s2.length())\\n            return 1;\\n        if (s1.length()<s2.length())\\n            return -1;\\n        int len = s1.length();\\n        for (int i=0;i<len;i++) {\\n            if (s1[i]>s2[i])\\n                return 1;\\n            if (s1[i]<s2[i])\\n                return -1;\\n        }\\n        return 0;\\n    }\\nint Solution::compareVersion(string version1, string version2) {\\n        int len1 = version1.length();\\n    int len2 = version2.length();\\n        \\n    int i=0;\\n    int j=0;\\n    \\n    string s1 = \"\";\\n    string s2 = \"\";\\n    while(i<len1 && j<len2) {\\n        while(i<len1 && version1[i]!='.') {\\n            s1+=version1[i];\\n            i++;\\n        }\\n        while(j<len2&&version2[j]!='.') {\\n            s2+=version2[j];\\n            j++;\\n        }\\n        int ans = isBigger(s1,s2);\\n        if (ans!=0)\\n            return ans;\\n        s1=\"\";\\n        s2=\"\";\\n        i++;//points to .\\n        j++;//points to .\\n    }\\n    while (i<len1) {\\n        //check if the remaining string is zero or not\\n        while(i<len1&&version1[i]!='.') {\\n            s1+=version1[i];\\n            i++;\\n        }\\n        s1 = trimzeroes(s1);\\n        if (s1!=\"0\")\\n            return 1;\\n        i++;\\n    }\\n    while (j<len2) {\\n        //check if the remaining string is zero or not\\n        while(j<len2&&version2[j]!='.') {\\n            s2+=version2[j];\\n            j++;\\n        }\\n        s2 = trimzeroes(s2);\\n        if (s2!=\"0\")\\n            return -1;\\n        j++;\\n        \\n    }\\n    return 0;    \\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 1797472,
                "title": "java-concise-solution",
                "content": "```\\npublic int compareVersion(String version1, String version2) {\\n        String[] str1 = version1.split(\"\\\\\\\\.\");\\n        String[] str2 = version2.split(\"\\\\\\\\.\");\\n        int max = Math.max(str1.length,str2.length);\\n        for(int i=0;i<max;i++){\\n            int num1 = i >= str1.length ? 0 : Integer.parseInt(str1[i]);\\n            int num2 = i >= str2.length ? 0 : Integer.parseInt(str2[i]);\\n            if(num1 < num2) return -1;\\n            if(num1 > num2) return 1;\\n        }\\n\\n        return 0;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int compareVersion(String version1, String version2) {\\n        String[] str1 = version1.split(\"\\\\\\\\.\");\\n        String[] str2 = version2.split(\"\\\\\\\\.\");\\n        int max = Math.max(str1.length,str2.length);\\n        for(int i=0;i<max;i++){\\n            int num1 = i >= str1.length ? 0 : Integer.parseInt(str1[i]);\\n            int num2 = i >= str2.length ? 0 : Integer.parseInt(str2[i]);\\n            if(num1 < num2) return -1;\\n            if(num1 > num2) return 1;\\n        }\\n\\n        return 0;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 838226,
                "title": "c-10-lines-easy-code-with-t-o-n-m-s-o-1",
                "content": "```\\n/*\\n    version comparison\\n    while loop parsing digits\\n    default is 0.\\n*/\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) \\n    {\\n        int i1=0,i2=0, n1=version1.length(), n2=version2.length();\\n        while (i1<n1||i2<n2) {\\n            int v1=0,v2=0;\\n            while(i1<n1&&version1[i1]!=\\'.\\') v1=v1*10+(version1[i1++]-\\'0\\');\\n            while(i2<n2&&version2[i2]!=\\'.\\') v2=v2*10+(version2[i2++]-\\'0\\');\\n            if (v1<v2) return -1;\\n            else if (v1>v2) return 1;\\n            i1++; i2++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/*\\n    version comparison\\n    while loop parsing digits\\n    default is 0.\\n*/\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) \\n    {\\n        int i1=0,i2=0, n1=version1.length(), n2=version2.length();\\n        while (i1<n1||i2<n2) {\\n            int v1=0,v2=0;\\n            while(i1<n1&&version1[i1]!=\\'.\\') v1=v1*10+(version1[i1++]-\\'0\\');\\n            while(i2<n2&&version2[i2]!=\\'.\\') v2=v2*10+(version2[i2++]-\\'0\\');\\n            if (v1<v2) return -1;\\n            else if (v1>v2) return 1;\\n            i1++; i2++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 499677,
                "title": "javascript-solution-48-ms-faster-than-92-46-33-7-mb-less-than-100",
                "content": "```\\nvar compareVersion = function(version1, version2) {\\n    var v1Array = version1.split(\\'.\\');\\n    var v2Array = version2.split(\\'.\\');\\n    var length = Math.max(v1Array.length, v2Array.length);\\n    \\n    for (var i = 0; i < length; i++) {\\n        var num1 = parseInt(v1Array[i]) || 0;\\n        var num2 = parseInt(v2Array[i]) || 0;\\n        \\n        if (num1 == num2) {\\n            continue;\\n        }\\n        \\n        return num1 > num2 ? 1 : -1;\\n    }\\n    \\n    return 0;       \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar compareVersion = function(version1, version2) {\\n    var v1Array = version1.split(\\'.\\');\\n    var v2Array = version2.split(\\'.\\');\\n    var length = Math.max(v1Array.length, v2Array.length);\\n    \\n    for (var i = 0; i < length; i++) {\\n        var num1 = parseInt(v1Array[i]) || 0;\\n        var num2 = parseInt(v2Array[i]) || 0;\\n        \\n        if (num1 == num2) {\\n            continue;\\n        }\\n        \\n        return num1 > num2 ? 1 : -1;\\n    }\\n    \\n    return 0;       \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 319260,
                "title": "python-intuitive-solution",
                "content": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        v1 = version1.split(\".\")\\n        v2 = version2.split(\".\")\\n        \\n        while v1 or v2:\\n            v1_val = 0\\n            v2_val = 0\\n            if v1: v1_val = int(v1.pop(0))\\n            if v2: v2_val = int(v2.pop(0))\\n            \\n            if v1_val > v2_val: return 1\\n            if v1_val < v2_val: return -1\\n            \\n        return 0\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        v1 = version1.split(\".\")\\n        v2 = version2.split(\".\")\\n        \\n        while v1 or v2:\\n            v1_val = 0\\n            v2_val = 0\\n            if v1: v1_val = int(v1.pop(0))\\n            if v2: v2_val = int(v2.pop(0))\\n            \\n            if v1_val > v2_val: return 1\\n            if v1_val < v2_val: return -1\\n            \\n        return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 50953,
                "title": "7-lines-simple-java-solution",
                "content": "     String[]v1=version1.split(\"\\\\\\\\.\"),v2=version2.split(\"\\\\\\\\.\");\\n            int i;\\n            for( i =0;i<v1.length&&i<v2.length;i++)\\n            if(Integer.parseInt(v1[i])!=Integer.parseInt(v2[i]))return Integer.parseInt(v1[i])>Integer.parseInt(v2[i])?1:-1;\\n            for(;i<v1.length;i++)if(Integer.parseInt(v1[i])!=0)return 1;\\n            for(;i<v2.length;i++)if(Integer.parseInt(v2[i])!=0)return -1;\\n            return 0;",
                "solutionTags": [],
                "code": "     String[]v1=version1.split(\"\\\\\\\\.\"),v2=version2.split(\"\\\\\\\\.\");\\n            int i;\\n            for( i =0;i<v1.length&&i<v2.length;i++)\\n            if(Integer.parseInt(v1[i])!=Integer.parseInt(v2[i]))return Integer.parseInt(v1[i])>Integer.parseInt(v2[i])?1:-1;\\n            for(;i<v1.length;i++)if(Integer.parseInt(v1[i])!=0)return 1;\\n            for(;i<v2.length;i++)if(Integer.parseInt(v2[i])!=0)return -1;\\n            return 0;",
                "codeTag": "Unknown"
            },
            {
                "id": 837723,
                "title": "c-pointers-based-solution-explained-100-time-80-space",
                "content": "Funny one and today I decided to give myself an extra challenge using as little memory as possible, so, first of all I declared the following variables:\\n* 2 pointers, `i` and `j`, both set to `0`, to keep track of how we go through each string;\\n* 2 variables to store the length of each string, `v1Len` and `v2Len` (slightly better than calling `.size()` all the time or so they say;\\n* 2 containers of the current sub-values being parsed, `n1` and `n2`.\\n\\nI then proceed to loop until `i < v1Len || j < v2Len`, meaning the loop will stop on its own only when I finish parsing both strings; that is an important distinctions, since if we are done with one and still in the loop, we want to parse the other and then still compare the values (the one we finished parsing will be at `0`).\\n\\nInside the loop, we set both `n1` and `n2` to `0` and then we advanced our pointers and at the same time we increase their respective values (10 times the previous value, plus the value of the current digit, computed converting from char to a value in the `0 - 9` range substracting the value of the char `\\'0\\'`). Also notice that this way we can easily get rid of leading `0`s without the need of any further logic.\\n\\nWe then compare the subvalues `n1` and `n2` and leave the loop if they differ; we proceed with the next sub-values otherwise.\\n\\nIf we terminate parsing both strings and exit the loop, then it means all the values so far were equals, thus we return `0` :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int compareVersion(string v1, string v2) {\\n        // support variables\\n        int i = 0, j = 0, v1Len = v1.size(), v2Len = v2.size(), n1, n2;\\n        while (i < v1Len || j < v2Len) {\\n            // computing the next set of version sub-values\\n            n1 = 0;\\n            n2 = 0;\\n            while (i < v1Len && v1[i] != \\'.\\') n1 = n1 * 10 + (v1[i++] - \\'0\\');\\n            while (j < v2Len && v2[j] != \\'.\\') n2 = n2 * 10 + (v2[j++] - \\'0\\');\\n            // handling possible results\\n            if (n1 < n2) return -1;\\n            else if (n1 > n2) return 1;\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int compareVersion(string v1, string v2) {\\n        // support variables\\n        int i = 0, j = 0, v1Len = v1.size(), v2Len = v2.size(), n1, n2;\\n        while (i < v1Len || j < v2Len) {\\n            // computing the next set of version sub-values\\n            n1 = 0;\\n            n2 = 0;\\n            while (i < v1Len && v1[i] != \\'.\\') n1 = n1 * 10 + (v1[i++] - \\'0\\');\\n            while (j < v2Len && v2[j] != \\'.\\') n2 = n2 * 10 + (v2[j++] - \\'0\\');\\n            // handling possible results\\n            if (n1 < n2) return -1;\\n            else if (n1 > n2) return 1;\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 50980,
                "title": "my-solution-in-c-0-ms-using-only-while-loop",
                "content": "    int compareVersion(char* version1, char* version2) \\n    {\\n        \\n        int num1=0, num2=0;\\n        \\n        while(1)\\n        {\\n            num1=0;\\n            num2=0;\\n            while(version1[0]!='.' && version1[0]!='\\\\0')\\n            {\\n                num1=num1*10+version1[0]-'0';\\n                version1++;\\n            }\\n            while(version2[0]!='.' && version2[0]!='\\\\0')\\n            {\\n                num2=num2*10+version2[0]-'0';\\n                version2++;\\n            }\\n            if(version1[0]=='.') version1++;\\n            if(version2[0]=='.') version2++;\\n            \\n            if(num1>num2)return 1;\\n            else if(num2>num1)return -1;\\n            else if(version1[0]=='\\\\0' && version2[0]=='\\\\0')\\n            return 0;\\n        }\\n        \\n        \\n    }",
                "solutionTags": [],
                "code": "    int compareVersion(char* version1, char* version2) \\n    {\\n        \\n        int num1=0, num2=0;\\n        \\n        while(1)\\n        {\\n            num1=0;\\n            num2=0;\\n            while(version1[0]!='.' && version1[0]!='\\\\0')\\n            {\\n                num1=num1*10+version1[0]-'0';\\n                version1++;\\n            }\\n            while(version2[0]!='.' && version2[0]!='\\\\0')\\n            {\\n                num2=num2*10+version2[0]-'0';\\n                version2++;\\n            }\\n            if(version1[0]=='.') version1++;\\n            if(version2[0]=='.') version2++;\\n            \\n            if(num1>num2)return 1;\\n            else if(num2>num1)return -1;\\n            else if(version1[0]=='\\\\0' && version2[0]=='\\\\0')\\n            return 0;\\n        }\\n        \\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1797362,
                "title": "easy-small-js-commented-intuitive-80",
                "content": "***Please Upvote if you Like it....! :)***\\n```\\nvar compareVersion = function (version1, version2) {\\n    //converting into array by splitting at .\\n    version1 = version1.split(\\'.\\');\\n    version2 = version2.split(\\'.\\');\\n    // Finding the max length of either array\\n    let length = Math.max(version1.length, version2.length);\\n\\n    // Iterate over the length\\n    for (let i = 0; i < length; i++) {\\n        /* \\n        If any array is smaller so its i index will return undefined and we can use || i.e undefined || 0 to return 0\\n\\t\\t\\n\\t\\tP.S. Our array is of string numbers i.e typeof version1[i] =\"string\" so + version1[i]\\n\\t\\twill convert the string to      number. It is a shorthand of parseInt(version1[i])  \\n\\t\\t[Read more about + here](http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus)\\n        */\\n        if ((+version1[i] || 0) < (+version2[i] || 0)) return -1;\\n        if ((+version1[i] || 0) > (+version2[i] || 0)) return 1;\\n    }\\n    return 0;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar compareVersion = function (version1, version2) {\\n    //converting into array by splitting at .\\n    version1 = version1.split(\\'.\\');\\n    version2 = version2.split(\\'.\\');\\n    // Finding the max length of either array\\n    let length = Math.max(version1.length, version2.length);\\n\\n    // Iterate over the length\\n    for (let i = 0; i < length; i++) {\\n        /* \\n        If any array is smaller so its i index will return undefined and we can use || i.e undefined || 0 to return 0\\n\\t\\t\\n\\t\\tP.S. Our array is of string numbers i.e typeof version1[i] =\"string\" so + version1[i]\\n\\t\\twill convert the string to      number. It is a shorthand of parseInt(version1[i])  \\n\\t\\t[Read more about + here](http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus)\\n        */\\n        if ((+version1[i] || 0) < (+version2[i] || 0)) return -1;\\n        if ((+version1[i] || 0) > (+version2[i] || 0)) return 1;\\n    }\\n    return 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 50854,
                "title": "c-solution-0ms-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int size1 = version1.size();\\n        int size2 = version2.size();\\n        int i=0, j=0;\\n        \\n       //\\u4ee5\\u5c0f\\u6570\\u70b9\\u4e3a\\u4e34\\u754c\\uff0c\\u6bcf\\u4e00\\u90e8\\u5206\\u5316\\u6210\\u6574\\u6570\\u9010\\u6b21\\u6bd4\\u8f83\\n       while(i<size1 || j<size2)\\n       {\\n           int num1 = 0;\\n           int num2 = 0;\\n           while(i<size1 && version1[i]!='.')              //\\u5316\\u6210\\u6574\\u6570\\n            {\\n                num1 = num1*10 + version1[i]-'0';\\n                i++;\\n            }\\n            while(j<size2 && version2[j]!='.')\\n            {\\n                num2 = num2*10 + version2[j]-'0';\\n                j++;\\n            }\\n            \\n            if(num1 > num2)           \\n                return 1;\\n            else if(num1< num2)\\n                return -1;\\n            i++;\\n            j++;\\n            \\n            \\n       }\\n       \\n       return 0;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int size1 = version1.size();\\n        int size2 = version2.size();\\n        int i=0, j=0;\\n        \\n       //\\u4ee5\\u5c0f\\u6570\\u70b9\\u4e3a\\u4e34\\u754c\\uff0c\\u6bcf\\u4e00\\u90e8\\u5206\\u5316\\u6210\\u6574\\u6570\\u9010\\u6b21\\u6bd4\\u8f83\\n       while(i<size1 || j<size2)\\n       {\\n           int num1 = 0;\\n           int num2 = 0;\\n           while(i<size1 && version1[i]!='.')              //\\u5316\\u6210\\u6574\\u6570\\n            {\\n                num1 = num1*10 + version1[i]-'0';\\n                i++;\\n            }\\n            while(j<size2 && version2[j]!='.')\\n            {\\n                num2 = num2*10 + version2[j]-'0';\\n                j++;\\n            }\\n            \\n            if(num1 > num2)           \\n                return 1;\\n            else if(num1< num2)\\n                return -1;\\n            i++;\\n            j++;\\n            \\n            \\n       }\\n       \\n       return 0;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798618,
                "title": "c-0ms-fast-simple",
                "content": "\\n\\t class Solution {\\n\\t public:\\n     int compareVersion(string version1, string version2) {\\n\\t    vector<string> v1 = removedots(version1, \\'.\\'); //preprocess string 1\\n\\t\\tvector<string> v2 = removedots(version2, \\'.\\'); //preprocess string 2\\n        \\n        int i=0, j=0;\\n        \\n        while (i<v1.size() and j<v2.size()){ //traverse both the strings using two pointers\\n            int e1 = stoi(v1[i++]); //keep on storing the integers at index i\\n            int e2 = stoi(v2[j++]); //keep on storing the integer at index j\\n            if(e1>e2) return 1; //if you find first integer is big than second, return 1\\n            else if(e1<e2) return -1; //else if if you find first is small then second return -1\\n        }\\n        while (i<v1.size()) if(stoi(v1[i++])>0) return 1; //v1 to be traversed, check if remaining part is greater than 0\\n        while (j<v2.size()) if(stoi(v2[j++])>0) return -1;//v2 to be traversed, check if remaining part is greater than 0\\n        return 0; //this means both are equal\\n        \\n        \\n    }\\n        vector<string> removedots(string str, char dot){ //utility to remove dots\\n        vector<string> preprocessed; //will store the preprocessed string after operation\\n        stringstream ss(str); //to read strings delimiter by delimiter\\n        string i; //empty string to be passed\\n        while (getline(ss, i, dot)) preprocessed.push_back(i); //we will add the characters removing dots\\n        return preprocessed; //return the preprocessed\\n    }\\n    };",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\t public:\\n     int compareVersion(string version1, string version2) {\\n\\t    vector<string> v1 = removedots(version1, \\'.\\'); //preprocess string 1\\n\\t\\tvector<string> v2 = removedots(version2, \\'.\\'); //preprocess string 2\\n        \\n        int i=0, j=0;\\n        \\n        while (i<v1.size() and j<v2.size()){ //traverse both the strings using two pointers\\n            int e1 = stoi(v1[i++]); //keep on storing the integers at index i\\n            int e2 = stoi(v2[j++]); //keep on storing the integer at index j\\n            if(e1>e2) return 1; //if you find first integer is big than second, return 1\\n            else if(e1<e2) return -1; //else if if you find first is small then second return -1\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 50943,
                "title": "c-solution-10-lines-very-clean-coding-using-istringstream-to-read-input",
                "content": "     int compareVersion(string version1, string version2) {\\n        istringstream ver1(version1 + \".\"), ver2(version2 + \".\");\\n        int val1 = 0, val2 = 0;\\n        char dot = '.';\\n        while (ver1.good() || ver2.good()) {\\n            if (ver1.good()) ver1 >> val1 >> dot;\\n            if (ver2.good()) ver2 >> val2 >> dot;\\n            if (val1 > val2) return 1;\\n            else if (val1 < val2) return -1;\\n            val1 = val2 = 0;\\n        }\\n        return 0;\\n    }",
                "solutionTags": [],
                "code": "     int compareVersion(string version1, string version2) {\\n        istringstream ver1(version1 + \".\"), ver2(version2 + \".\");\\n        int val1 = 0, val2 = 0;\\n        char dot = '.';\\n        while (ver1.good() || ver2.good()) {\\n            if (ver1.good()) ver1 >> val1 >> dot;\\n            if (ver2.good()) ver2 >> val2 >> dot;\\n            if (val1 > val2) return 1;\\n            else if (val1 < val2) return -1;\\n            val1 = val2 = 0;\\n        }\\n        return 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 51046,
                "title": "1ms-solution-in-c",
                "content": "Without using bit field or some other fancy techniques, neat solution with just while loop. \\n\\n    int compareVersion(char *version1, char *version2){\\n        int v1 = 0, v2 = 0;\\n        do {\\n            v1 = 0; v2 = 0;\\n            if (version1[0] == '.') version1++;\\n            if (version2[0] == '.') version2++;\\n            for (; version1[0] != '.' && version1[0] != '\\\\0'; version1++) {\\n                v1 *= 10;\\n                v1 += (version1[0] - '0');\\n            }\\n            for (; version2[0] != '.' && version2[0] != '\\\\0'; version2++) {\\n                v2 *= 10;\\n                v2 += (version2[0] - '0');\\n            }\\n            if (v1 > v2) return 1;\\n            else if (v1 < v2) return -1;\\n            else if (version1[0] == '\\\\0' \\\\\\n                  && version2[0] == '\\\\0') return 0;\\n        } while (version1[0] == '.' || version2[0] == '.');\\n    }\\nHope you guys find it useful :-)",
                "solutionTags": [],
                "code": "Without using bit field or some other fancy techniques, neat solution with just while loop. \\n\\n    int compareVersion(char *version1, char *version2){\\n        int v1 = 0, v2 = 0;\\n        do {\\n            v1 = 0; v2 = 0;\\n            if (version1[0] == '.') version1++;\\n            if (version2[0] == '.') version2++;\\n            for (; version1[0] != '.' && version1[0] != '\\\\0'; version1++) {\\n                v1 *= 10;\\n                v1 += (version1[0] - '0');\\n            }\\n            for (; version2[0] != '.' && version2[0] != '\\\\0'; version2++) {\\n                v2 *= 10;\\n                v2 += (version2[0] - '0');\\n            }\\n            if (v1 > v2) return 1;\\n            else if (v1 < v2) return -1;\\n            else if (version1[0] == '\\\\0' \\\\\\n                  && version2[0] == '\\\\0') return 0;\\n        } while (version1[0] == '.' || version2[0] == '.');\\n    }\\nHope you guys find it useful :-)",
                "codeTag": "Unknown"
            },
            {
                "id": 51092,
                "title": "4-ms-runtime-c-easy-to-understand-solution-with-algorithm-description",
                "content": "Here's the algorithm:\\nAssumption is that the strings are properly formatted so no checking.\\nValid strings are 123, 01, 123.01.5.16\\nI extracted the string into a C style char array for speed.\\nScan both the strings one sub-version at a time in a loop if result is still 0 and one (or both) of the strings still have characters left to parse.  So basically, once the result is 1 or -1 we don't need further parsing. I'm using strtol so that we can pick each sub-version number and move the scan pointer to the \".\" preceding next sub-version number. If one of the strings is done before the other (example: 1.0 and 1) then make sure to the sub-version of finished string to 0.\\n\\n    int compareVersion(string version1, string version2) {\\n    \\tint result = 0;\\n    \\tchar *vStr1 = (char*) version1.c_str();\\n    \\tchar *vStr2 = (char*) version2.c_str();\\n\\n    \\twhile (result == 0 && (*vStr1 != '\\\\0' || *vStr2 != '\\\\0')) {\\n    \\t\\tlong v1 = *vStr1 == '\\\\0' ? 0 : strtol(vStr1, &vStr1, 10);\\n    \\t\\tlong v2 = *vStr2 == '\\\\0' ? 0 : strtol(vStr2, &vStr2, 10);\\n    \\t\\tif (v1 > v2) result = 1;\\n    \\t\\telse if (v2 > v1) result = -1;\\n    \\t\\telse {\\n    \\t\\t\\tif (*vStr1 != '\\\\0') vStr1++;\\n    \\t\\t\\tif (*vStr2 != '\\\\0') vStr2++;\\n    \\t\\t}\\n    \\t}        \\n\\n        return result;\\n    }",
                "solutionTags": [],
                "code": "Here's the algorithm:\\nAssumption is that the strings are properly formatted so no checking.\\nValid strings are 123, 01, 123.01.5.16\\nI extracted the string into a C style char array for speed.\\nScan both the strings one sub-version at a time in a loop if result is still 0 and one (or both) of the strings still have characters left to parse.  So basically, once the result is 1 or -1 we don't need further parsing. I'm using strtol so that we can pick each sub-version number and move the scan pointer to the \".\" preceding next sub-version number. If one of the strings is done before the other (example: 1.0 and 1) then make sure to the sub-version of finished string to 0.\\n\\n    int compareVersion(string version1, string version2) {\\n    \\tint result = 0;\\n    \\tchar *vStr1 = (char*) version1.c_str();\\n    \\tchar *vStr2 = (char*) version2.c_str();\\n\\n    \\twhile (result == 0 && (*vStr1 != '\\\\0' || *vStr2 != '\\\\0')) {\\n    \\t\\tlong v1 = *vStr1 == '\\\\0' ? 0 : strtol(vStr1, &vStr1, 10);\\n    \\t\\tlong v2 = *vStr2 == '\\\\0' ? 0 : strtol(vStr2, &vStr2, 10);\\n    \\t\\tif (v1 > v2) result = 1;\\n    \\t\\telse if (v2 > v1) result = -1;\\n    \\t\\telse {\\n    \\t\\t\\tif (*vStr1 != '\\\\0') vStr1++;\\n    \\t\\t\\tif (*vStr2 != '\\\\0') vStr2++;\\n    \\t\\t}\\n    \\t}        \\n\\n        return result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2533523,
                "title": "c-beats-100-two-pointers-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2)\\n    {\\n        int i = 0; \\n        int j = 0;\\n        int n1 = version1.size(); \\n        int n2 = version2.size();\\n\\n        int num1 = 0;\\n        int num2 = 0;\\n        while(i<n1 || j<n2)\\n        {\\n            while(i<n1 && version1[i]!=\\'.\\'){\\n                num1 = num1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n\\n            while(j<n2 && version2[j]!=\\'.\\'){\\n                num2 = num2*10+(version2[j]-\\'0\\');;\\n                j++;\\n            }\\n\\n            if(num1>num2) return 1;\\n            else if(num1 < num2) return -1;\\n\\n            num1 = 0;\\n            num2 = 0;\\n            i++;\\n            j++;\\n        }\\n\\n        return 0;\\n    }\\n};\\n//if you like the solution plz upvote.",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "class Solution {\\npublic:\\n    int compareVersion(string version1, string version2)\\n    {\\n        int i = 0; \\n        int j = 0;\\n        int n1 = version1.size(); \\n        int n2 = version2.size();\\n\\n        int num1 = 0;\\n        int num2 = 0;\\n        while(i<n1 || j<n2)\\n        {\\n            while(i<n1 && version1[i]!=\\'.\\'){\\n                num1 = num1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1797395,
                "title": "python3-simple-and-concise-solution-easy-to-understand-w-explanation",
                "content": "\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tPlease Upvote if it helps, Thanks.\\n**Intuition:**\\n1. It\\'s already mentioned that every revision can be stored in 32 bit integer (Revision is numbers between every two dots, except the first).\\n2. Hence lets compare every revision as Integer (If revision doesn\\'t exist for a version, we can consider it as zero).\\n\\nExample: version1 = 1.1, version2 = 1.1.2 \\noutput: -1\\nNote: version1 will be considered as 1.1.0 since the last revision doesn\\'t exist we consider it as 0.\\n\\n\\tTime complexity: `O(m + n)`\\n\\n**Simple Solution:** \\n\\n```\\nclass Solution:\\n    \\'\\'\\'\\n\\tSpace complexity: `O(m + n)`\\n\\t \\n\\tSince split operation will be taking extra space to populate the array\\n\\t\\'\\'\\'\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        version1, version2 = version1.split(\\'.\\'), version2.split(\\'.\\')\\n        m, n = len(version1), len(version2)\\n        i = j = 0\\n        while(i < m or j < n):\\n            revision1 = int(version1[i]) if(i < m) else 0\\n            revision2 = int(version2[j]) if(j < n) else 0\\n            if(revision1 < revision2):  return -1\\n            if(revision1 > revision2):  return 1\\n            i, j = i + 1, j + 1\\n        \\n        return 0\\t\\n```\\n\\n**A bit complex solution to optimize space:**\\n\\n```\\n\\t\\'\\'\\'\\n\\tSpace complexity: `O(1)`\\n\\t\\n\\tInstead of splitting the array we will just iterate and get the revision number.\\n\\t\\'\\'\\'\\nclass Solution:\\n    def getRevision(self, version, index, len_):\\n        revision, dot, i = 0, \\'.\\', index\\n        \\n        for i in range(index, len_):\\n            if(version[i] == dot):\\n                break\\n            revision *= 10\\n            revision += int(version[i])\\n        \\n        return revision, i + 1\\n            \\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        i, j, m, n = 0, 0, len(version1), len(version2)\\n        \\n        while(i < m or j < n):\\n            revision1, nextIndex1 = self.getRevision(version1, i, m)\\n            revision2, nextIndex2 = self.getRevision(version2, j, n)\\n             if(revision1 < revision2):  return -1\\n            if(revision1 > revision2):  return 1\\n            i, j, = nextIndex1, nextIndex2\\n        \\n        return 0\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    \\'\\'\\'\\n\\tSpace complexity: `O(m + n)`\\n\\t \\n\\tSince split operation will be taking extra space to populate the array\\n\\t\\'\\'\\'\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        version1, version2 = version1.split(\\'.\\'), version2.split(\\'.\\')\\n        m, n = len(version1), len(version2)\\n        i = j = 0\\n        while(i < m or j < n):\\n            revision1 = int(version1[i]) if(i < m) else 0\\n            revision2 = int(version2[j]) if(j < n) else 0\\n            if(revision1 < revision2):  return -1\\n            if(revision1 > revision2):  return 1\\n            i, j = i + 1, j + 1\\n        \\n        return 0\\t\\n```\n```\\n\\t\\'\\'\\'\\n\\tSpace complexity: `O(1)`\\n\\t\\n\\tInstead of splitting the array we will just iterate and get the revision number.\\n\\t\\'\\'\\'\\nclass Solution:\\n    def getRevision(self, version, index, len_):\\n        revision, dot, i = 0, \\'.\\', index\\n        \\n        for i in range(index, len_):\\n            if(version[i] == dot):\\n                break\\n            revision *= 10\\n            revision += int(version[i])\\n        \\n        return revision, i + 1\\n            \\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        i, j, m, n = 0, 0, len(version1), len(version2)\\n        \\n        while(i < m or j < n):\\n            revision1, nextIndex1 = self.getRevision(version1, i, m)\\n            revision2, nextIndex2 = self.getRevision(version2, j, n)\\n             if(revision1 < revision2):  return -1\\n            if(revision1 > revision2):  return 1\\n            i, j, = nextIndex1, nextIndex2\\n        \\n        return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 50904,
                "title": "my-o-n-solution-c",
                "content": "    class Solution {\\n    public:\\n        int compareVersion(string version1, string version2) {\\n            \\n            string v1 = version1;\\n            string v2 = version2;\\n            \\n            if(v1.length() == 0 || v2.length() == 0)\\n                return 0;\\n            \\n            int i=0;\\n            int j=0;\\n            \\n            int n1;\\n            int n2;\\n            \\n            while(i<v1.length() || j<v2.length())\\n            {\\n                n1 = 0;\\n                n2 = 0;\\n                \\n                while(i<v1.length() && v1[i] != '.')\\n                {\\n                    n1 = n1*10+(v1[i]-'0');\\n                    i++;\\n                }\\n                \\n                while(j<v2.length() && v2[j] != '.')\\n                {\\n                    n2 = n2*10+(v2[j]-'0');\\n                    j++;\\n                }\\n                \\n                if(n1>n2)\\n                    return 1;\\n                else if(n1<n2)\\n                    return -1;\\n                \\n                if(v1[i] == '.')\\n                    i++;\\n                if(v2[j] == '.')\\n                    j++;\\n            }\\n            \\n            return 0;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int compareVersion(string version1, string version2) {\\n            \\n            string v1 = version1;\\n            string v2 = version2;\\n            \\n            if(v1.length() == 0 || v2.length() == 0)\\n                return 0;\\n            \\n            int i=0;\\n            int j=0;\\n            \\n            int n1;\\n            int n2;\\n            \\n            while(i<v1.length() || j<v2.length())\\n            {\\n                n1 = 0;\\n                n2 = 0;\\n                \\n                while(i<v1.length() && v1[i] != '.')\\n                {\\n                    n1 = n1*10+(v1[i]-'0');\\n                    i++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 50913,
                "title": "1ms-ac-solution-in-java",
                "content": "    public int compareVersion(String version1, String version2) {\\n        int p1=0,p2=0;\\n        while(p1<version1.length() || p2<version2.length()){\\n            int num1=0,num2=0;\\n            while(p1<version1.length() && version1.charAt(p1)!='.') num1 = num1*10 + (version1.charAt(p1++) - '0'); // get number in version1..\\n            while(p2<version2.length() && version2.charAt(p2)!='.') num2 = num2*10 + (version2.charAt(p2++) - '0'); // get number in version2.\\n            if(num1 != num2) return num1>num2 ? 1:-1;\\n            p1++;\\n            p2++;\\n        }\\n        return 0;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public int compareVersion(String version1, String version2) {\\n        int p1=0,p2=0;\\n        while(p1<version1.length() || p2<version2.length()){\\n            int num1=0,num2=0;\\n            while(p1<version1.length() && version1.charAt(p1)!='.') num1 = num1*10 + (version1.charAt(p1++) - '0'); // get number in version1..\\n            while(p2<version2.length() && version2.charAt(p2)!='.') num2 = num2*10 + (version2.charAt(p2++) - '0'); // get number in version2.\\n            if(num1 != num2) return num1>num2 ? 1:-1;\\n            p1++;\\n            p2++;\\n        }\\n        return 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 50939,
                "title": "java-iterative-easy-to-understand-beat-92-solution",
                "content": "    public int compareVersion(String version1, String version2) {\\n        if (version1 == null || version2 == null) return 0;\\n        int v1 = 0, v2 = 0;\\n        int i = 0, j = 0;\\n        while(i < version1.length() || j < version2.length()) {\\n            while (i < version1.length() && version1.charAt(i) != '.') {\\n                v1 = v1*10+(version1.charAt(i)-'0');\\n                i++;\\n            }\\n            while (j < version2.length() && version2.charAt(j) != '.') {\\n                v2 = v2*10+(version2.charAt(j)-'0');\\n                j++;\\n            }\\n            if (v1 > v2) return 1;\\n            else if (v1 < v2) return -1;\\n            i++;\\n            j++;\\n            v1 = 0;\\n            v2 = 0;\\n        }\\n        return 0;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public int compareVersion(String version1, String version2) {\\n        if (version1 == null || version2 == null) return 0;\\n        int v1 = 0, v2 = 0;\\n        int i = 0, j = 0;\\n        while(i < version1.length() || j < version2.length()) {\\n            while (i < version1.length() && version1.charAt(i) != '.') {\\n                v1 = v1*10+(version1.charAt(i)-'0');\\n                i++;\\n            }\\n            while (j < version2.length() && version2.charAt(j) != '.') {\\n                v2 = v2*10+(version2.charAt(j)-'0');\\n                j++;\\n            }\\n            if (v1 > v2) return 1;\\n            else if (v1 < v2) return -1;\\n            i++;\\n            j++;\\n            v1 = 0;\\n            v2 = 0;\\n        }\\n        return 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1797292,
                "title": "c-fast-detailed-explaination-o-m-n",
                "content": "Hi , everybody. Today\\'s question is not based on any standard algorithm. We can say that it is to be solved with a greedy approach. But , I would personally think that it is more implementation based. \\n\\nBut , honestly , this question is **really easy**. It is a good practice for loops and string traversals , but it should not be considered for interview prep or for DSA . \\n\\n**Anyways, moving to the point, the question says that the string represents a particular version. We have to evaluate that version numerically and then compare 2 such versions to return whether they are equal or less than or greater than.**\\n\\nThere are no multiple approaches to this question. \\n\\n### APPROACH : \\nHow do we approach this question ??\\nWell , lets take an example. \\n**V1= \"23.78.43.0.0.0\" and V2= \"23.78.043.0.001\"**\\nNow , in order to compare any versions is like comparing 2 words in a dictionary , for every character in the words,  we check which character comes first lexicographically . The one that comes first appears earlier in the dictionary. \\nSimilarly , we compare every revision in the 2 versions. \\nIn the above example , \\n**1st REVISION :**\\n**V1 --> 23  and V2 --> 23**\\n*Both of them are same so , till now both of the versions are placed in the same position in the dictionary.*\\n\\n**2nd REVISION :**\\n**V1 --> 78  and V2 --> 78**\\n*Both of them are same so , till now both of the versions are placed in the same position in the dictionary.*\\n\\n**3rd REVISION :**\\n**V1 --> 43  and V2 --> 043 ~ 43**\\n*Both of them are same so , till now both of the versions are placed in the same position in the dictionary.*\\n\\n**4th REVISION :**\\n**V1 --> 0  and V2 --> 0**\\n*Both of them are same so , till now both of the versions are placed in the same position in the dictionary.*\\n\\n**5th REVISION :**\\n**V1 --> 0  and V2 --> 001 ~1**\\n*Now in this revision , **VERSION_2** has a higher score, so **VERSION_1 WILL BE PLACED BEFORE VERSION_2** in the dictionary.*\\n\\nSo , the result is **V1<V2**. \\n\\n\\n### SOLUTION : \\n1. Compare every revision of the 2 versions .\\n2. If the **current revisions are the same** , **continue to compare**. \\n3. If the **currentRevision_V1 < currentRevision_V2** , **return -1 . Else return 1**. \\n4. After all the revisions , if nothing is returned , **return 0 ( as both the versions are same by now )** \\n\\n### CODE : \\n\\n#### Sorry , for all the long variable names. It is done to make the code more understandable. The code is 100% faster than other submissions, though.\\n\\n![image](https://assets.leetcode.com/users/images/9a6011b3-43e0-4da6-be11-4ebc74e015bd_1645750377.4996574.png)\\n\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        \\n        int scoreV1=0,scoreV2=0,i,j,currentVersionScore=0;\\n        i=j=0;\\n        while(i<version1.size() or j<version2.size())\\n        {\\n            // finding the score of the current revision of version 1\\n            currentVersionScore=0;\\n            while(i<version1.size() and version1[i]!=\\'.\\')\\n            {\\n                currentVersionScore=currentVersionScore*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            scoreV1+=currentVersionScore;\\n            \\n            //finding the score of the current revision of version 2\\n            currentVersionScore=0;\\n            while(j<version2.size() and version2[j]!=\\'.\\')\\n            {\\n                currentVersionScore=currentVersionScore*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            scoreV2+=currentVersionScore;\\n            \\n\\t\\t\\t// I am converting each VERSION into a score (to compare it lexicographically just as mentioned in the approach)\\n\\t\\t\\t\\n            if(scoreV1<scoreV2)\\n                return -1;\\n            else if(scoreV1>scoreV2)\\n                return 1;\\n            i++;\\n            j++;\\n        }\\n        \\n        return 0;\\n        \\n    }\\n};\\n\\n```\\n\\n**TC : O(M+N)**\\n**SC : O(1)**\\n\\n**If you found the post helpful , do upvote and comment below.**\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Greedy",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        \\n        int scoreV1=0,scoreV2=0,i,j,currentVersionScore=0;\\n        i=j=0;\\n        while(i<version1.size() or j<version2.size())\\n        {\\n            // finding the score of the current revision of version 1\\n            currentVersionScore=0;\\n            while(i<version1.size() and version1[i]!=\\'.\\')\\n            {\\n                currentVersionScore=currentVersionScore*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            scoreV1+=currentVersionScore;\\n            \\n            //finding the score of the current revision of version 2\\n            currentVersionScore=0;\\n            while(j<version2.size() and version2[j]!=\\'.\\')\\n            {\\n                currentVersionScore=currentVersionScore*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            scoreV2+=currentVersionScore;\\n            \\n\\t\\t\\t// I am converting each VERSION into a score (to compare it lexicographically just as mentioned in the approach)\\n\\t\\t\\t\\n            if(scoreV1<scoreV2)\\n                return -1;\\n            else if(scoreV1>scoreV2)\\n                return 1;\\n            i++;\\n            j++;\\n        }\\n        \\n        return 0;\\n        \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 50971,
                "title": "python-easy-to-understand-solutions",
                "content": "```\\nclass Solution(object):\\n    def compareVersion1(self, version1, version2):\\n        v1 = [int(v) for v in version1.split(\\'.\\')]\\n        v2 = [int(v) for v in version2.split(\\'.\\')]\\n        i = 0\\n        while i < len(v1) and i < len(v2):\\n            if v1[i] < v2[i]:\\n                return -1\\n            elif v1[i] > v2[i]:\\n                return 1\\n            i += 1\\n        if i == len(v1):\\n            return -1 if any(v2[i:]) else 0\\n        else:\\n            return 1 if any(v1[i:]) else 0\\n        \\n    def compareVersion(self, version1, version2):\\n        v1, v2 = self.helper(version1), self.helper(version2)\\n        return 1 if v1 > v2 else (-1 if v1 < v2 else 0)\\n        \\n    def helper(self, v):\\n        v = map(int, v.split(\".\"))\\n        i = len(v)-1\\n        while i >= 0 and v[i] == 0:\\n            i -= 1\\n        return v[:i+1]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def compareVersion1(self, version1, version2):\\n        v1 = [int(v) for v in version1.split(\\'.\\')]\\n        v2 = [int(v) for v in version2.split(\\'.\\')]\\n        i = 0\\n        while i < len(v1) and i < len(v2):\\n            if v1[i] < v2[i]:\\n                return -1\\n            elif v1[i] > v2[i]:\\n                return 1\\n            i += 1\\n        if i == len(v1):\\n            return -1 if any(v2[i:]) else 0\\n        else:\\n            return 1 if any(v1[i:]) else 0\\n        \\n    def compareVersion(self, version1, version2):\\n        v1, v2 = self.helper(version1), self.helper(version2)\\n        return 1 if v1 > v2 else (-1 if v1 < v2 else 0)\\n        \\n    def helper(self, v):\\n        v = map(int, v.split(\".\"))\\n        i = len(v)-1\\n        while i >= 0 and v[i] == 0:\\n            i -= 1\\n        return v[:i+1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 838212,
                "title": "c-simple-clean-solution-100-00-faster-0ms-using-istringstream",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) \\n    {\\n\\t\\t//replace all dots with space so we should be able to output easily the istringstream by revision levels\\n        std::replace(version1.begin(), version1.end(), \\'.\\', \\' \\'); \\n        std::replace(version2.begin(), version2.end(), \\'.\\', \\' \\'); \\n\\t\\t\\n\\t\\t//initialize the istringstreams\\n        istringstream ss1(version1);\\n        istringstream ss2(version2);\\n        \\n        while (true) \\n        {\\n            string str1, str2;\\n            int tmp1, tmp2;\\n            \\n\\t\\t\\t//output to string next revision level\\n\\t\\t\\tss1 >> str1;\\n            ss2 >> str2;\\n             \\n\\t\\t\\t//convert to int (if not empty)\\n            tmp1 = str1.empty() ? 0 : stoi(str1);\\n            tmp2 = str2.empty() ? 0 : stoi(str2);\\n            \\n\\t\\t\\t//both came to end of revision levels\\n            if (str1.empty() && str2.empty())\\n                return 0;\\n\\t\\t\\t\\t\\n            //compare\\n            if (tmp1 < tmp2)\\n                return -1;\\n            \\n            if (tmp1 > tmp2)\\n                return 1;\\n\\t\\t\\t\\n        }\\n       \\n        return 0;\\n    }\\n};\\n        \\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) \\n    {\\n\\t\\t//replace all dots with space so we should be able to output easily the istringstream by revision levels\\n        std::replace(version1.begin(), version1.end(), \\'.\\', \\' \\'); \\n        std::replace(version2.begin(), version2.end(), \\'.\\', \\' \\'); \\n\\t\\t\\n\\t\\t//initialize the istringstreams\\n        istringstream ss1(version1);\\n        istringstream ss2(version2);\\n        \\n        while (true) \\n        {\\n            string str1, str2;\\n            int tmp1, tmp2;\\n            \\n\\t\\t\\t//output to string next revision level\\n\\t\\t\\tss1 >> str1;\\n            ss2 >> str2;\\n             \\n\\t\\t\\t//convert to int (if not empty)\\n            tmp1 = str1.empty() ? 0 : stoi(str1);\\n            tmp2 = str2.empty() ? 0 : stoi(str2);\\n            \\n\\t\\t\\t//both came to end of revision levels\\n            if (str1.empty() && str2.empty())\\n                return 0;\\n\\t\\t\\t\\t\\n            //compare\\n            if (tmp1 < tmp2)\\n                return -1;\\n            \\n            if (tmp1 > tmp2)\\n                return 1;\\n\\t\\t\\t\\n        }\\n       \\n        return 0;\\n    }\\n};\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 837784,
                "title": "simple-java-solution-with-video-explanation",
                "content": "<iframe width=\"650\" height=\"450\" src=\"https://www.youtube.com/embed/3JQSuBNX8jw\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\\n\\n```\\n\\n// O(n) , where n => no of elements in the version part\\n// O(1), space complexity\\nclass CompareVersionNumbers {\\n\\n    public int compareVersion(String version1, String version2) {\\n        String[] version1List = version1.split(\"\\\\\\\\.\"); // Note your cant directly use split(\".\") because if will treat he regex as any character \\n        String[] version2List = version2.split(\"\\\\\\\\.\");\\n\\n        int s1 = 0;\\n        int s2 = 0;\\n\\n        int len1 = version1List.length;\\n\\n        int len2 = version2List.length;\\n\\n        while(s1<len1 && s2<len2){\\n            int val1 = Integer.parseInt(version1List[s1]);\\n            int val2 = Integer.parseInt(version2List[s2]);\\n            s1++;\\n            s2++;\\n\\n            if(val1>val2){\\n                return 1;\\n            } else if(val1<val2){\\n                return -1;\\n            } else{\\n                // continue\\n            }\\n\\n        }\\n\\n        while(s1<len1){\\n            int val1 = Integer.parseInt(version1List[s1]);\\n            s1++;\\n            if(val1>0){\\n                return 1;\\n            }\\n        }\\n\\n\\n        while(s2<len2){\\n            int val2 = Integer.parseInt(version2List[s2]);\\n            s2++;\\n            if(val2>0){\\n                return -1;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n}\\n\\n```\\nThanks for looking at the solution. Please upvote if you like it.",
                "solutionTags": [
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\n\\n// O(n) , where n => no of elements in the version part\\n// O(1), space complexity\\nclass CompareVersionNumbers {\\n\\n    public int compareVersion(String version1, String version2) {\\n        String[] version1List = version1.split(\"\\\\\\\\.\"); // Note your cant directly use split(\".\") because if will treat he regex as any character \\n        String[] version2List = version2.split(\"\\\\\\\\.\");\\n\\n        int s1 = 0;\\n        int s2 = 0;\\n\\n        int len1 = version1List.length;\\n\\n        int len2 = version2List.length;\\n\\n        while(s1<len1 && s2<len2){\\n            int val1 = Integer.parseInt(version1List[s1]);\\n            int val2 = Integer.parseInt(version2List[s2]);\\n            s1++;\\n            s2++;\\n\\n            if(val1>val2){\\n                return 1;\\n            } else if(val1<val2){\\n                return -1;\\n            } else{\\n                // continue\\n            }\\n\\n        }\\n\\n        while(s1<len1){\\n            int val1 = Integer.parseInt(version1List[s1]);\\n            s1++;\\n            if(val1>0){\\n                return 1;\\n            }\\n        }\\n\\n\\n        while(s2<len2){\\n            int val2 = Integer.parseInt(version2List[s2]);\\n            s2++;\\n            if(val2>0){\\n                return -1;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 50764,
                "title": "very-simple-c-stringstream-0ms-solution",
                "content": "Idea is to use string stream to parse version numbers and compare them. \\nNote : In c++,  stringstream is valid till we try to read invalid data. \\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        // create stringstreams for versions\\n        stringstream ss1(version1); \\n        stringstream ss2(version2);\\n        // variables to store version values\\n        int v1 =0;\\n        int v2 =0;\\n        char c; // character to get . from versions\\n        while(ss1 || ss2){\\n            ss1 >> v1; // try to get int value from version1\\n            ss2 >> v2; // try to get int value from version2\\n            // if ss1 and ss2 both are invalid now, it means we did not get any valid value for v1 and v2. It means we are done comparing versions and till this point versions were same. Return 0. \\n            if(!ss1 && !ss2) return 0; \\n            // if ss1 was not valid, it means we failed to get v1. Make v1 = 0 , to be able to compare version like 1.2 and 1.2.0\\n            if(!ss1) v1=0;\\n            // if ss2 was not valid, it means we failed to get v2. Make v2 = 0 , to be able to compare version like 1.2.0 and 1.2\\n            if(!ss2) v2=0;\\n            // Now compare v1 and v2 according to given rules and give result if they are different.\\n            if(v1 > v2) return 1;\\n            if(v2 > v1) return -1;\\n            // Reaching here means v1 and v2 are same. In that case we need to loop again to be able to compare next version numbers. Get . char from valid stringstreams so that we can extract integer version numbers in next loop iteration.\\n            if(ss1) ss1 >> c;\\n            if(ss2) ss2 >> c;\\n        }\\n        return 0;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        // create stringstreams for versions\\n        stringstream ss1(version1); \\n        stringstream ss2(version2);\\n        // variables to store version values\\n        int v1 =0;\\n        int v2 =0;\\n        char c; // character to get . from versions\\n        while(ss1 || ss2){\\n            ss1 >> v1; // try to get int value from version1\\n            ss2 >> v2; // try to get int value from version2\\n            // if ss1 and ss2 both are invalid now, it means we did not get any valid value for v1 and v2. It means we are done comparing versions and till this point versions were same. Return 0. \\n            if(!ss1 && !ss2) return 0; \\n            // if ss1 was not valid, it means we failed to get v1. Make v1 = 0 , to be able to compare version like 1.2 and 1.2.0\\n            if(!ss1) v1=0;\\n            // if ss2 was not valid, it means we failed to get v2. Make v2 = 0 , to be able to compare version like 1.2.0 and 1.2\\n            if(!ss2) v2=0;\\n            // Now compare v1 and v2 according to given rules and give result if they are different.\\n            if(v1 > v2) return 1;\\n            if(v2 > v1) return -1;\\n            // Reaching here means v1 and v2 are same. In that case we need to loop again to be able to compare next version numbers. Get . char from valid stringstreams so that we can extract integer version numbers in next loop iteration.\\n            if(ss1) ss1 >> c;\\n            if(ss2) ss2 >> c;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 50945,
                "title": "my-simple-java-solution",
                "content": "      String [] version1Arrs = version1.split(\"\\\\\\\\.\");\\n      String [] version2Arrs = version2.split(\"\\\\\\\\.\");\\n      \\n      int l1 = version1Arrs.length;\\n      int l2 = version2Arrs.length;\\n      \\n      for(int i = 0; i < (l1<=l2?l2:l1); i++) {\\n        \\n        int val1 = i < l1?Integer.parseInt(version1Arrs[i]):0;\\n        int val2 = i < l2?Integer.parseInt(version2Arrs[i]):0;\\n        \\n        if(val1 > val2) return 1;\\n        else if(val1 < val2) return -1;\\n        \\n      }\\n      return 0;",
                "solutionTags": [
                    "Java"
                ],
                "code": "      String [] version1Arrs = version1.split(\"\\\\\\\\.\");\\n      String [] version2Arrs = version2.split(\"\\\\\\\\.\");\\n      \\n      int l1 = version1Arrs.length;\\n      int l2 = version2Arrs.length;\\n      \\n      for(int i = 0; i < (l1<=l2?l2:l1); i++) {\\n        \\n        int val1 = i < l1?Integer.parseInt(version1Arrs[i]):0;\\n        int val2 = i < l2?Integer.parseInt(version2Arrs[i]):0;\\n        \\n        if(val1 > val2) return 1;\\n        else if(val1 < val2) return -1;\\n        \\n      }\\n      return 0;",
                "codeTag": "Unknown"
            },
            {
                "id": 50987,
                "title": "easy-solution-c",
                "content": "    int compareVersion(string version1, string version2) {\\n            int ver1 = 0, ver2 = 0;\\n            int i = 0, j = 0;\\n            while( (i < version1.length())||(j < version2.length()) ){\\n                // calc each version num\\n                while(isdigit(version1[i])&&(i < version1.length())) \\n                    ver1 = ver1*10 + version1[i++]-'0';  \\n                while(isdigit(version2[j])&&(j < version2.length()))\\n                    ver2 = ver2*10 + version2[j++]-'0';\\n                if(ver1 < ver2)\\n                    return -1;\\n                if(ver1 > ver2)\\n                    return 1;\\n                ver1 = 0, ver2 = 0;\\n                 i++; // get rid of '.'\\n                 j++;\\n            }\\n            return 0;\\n        }",
                "solutionTags": [],
                "code": "    int compareVersion(string version1, string version2) {\\n            int ver1 = 0, ver2 = 0;\\n            int i = 0, j = 0;\\n            while( (i < version1.length())||(j < version2.length()) ){\\n                // calc each version num\\n                while(isdigit(version1[i])&&(i < version1.length())) \\n                    ver1 = ver1*10 + version1[i++]-'0';  \\n                while(isdigit(version2[j])&&(j < version2.length()))\\n                    ver2 = ver2*10 + version2[j++]-'0';\\n                if(ver1 < ver2)\\n                    return -1;\\n                if(ver1 > ver2)\\n                    return 1;\\n                ver1 = 0, ver2 = 0;\\n                 i++; // get rid of '.'\\n                 j++;\\n            }\\n            return 0;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 51019,
                "title": "my-c-solution-2ms",
                "content": "    class Solution {\\n    public:\\n    \\tint compareVersion(string version1, string version2) {\\n    \\t\\tlong res1=0, res2 = 0;\\n    \\t\\tunsigned int i=0, j=0;\\n    \\t\\twhile (i < version1.size() || j < version2.size()){\\n    \\t\\t\\tfor (; i < version1.size(); i++)\\n    \\t\\t\\t        if (isdigit(version1[i]))\\n    \\t\\t\\t\\t        res1 = res1 * 10 + version1[i] - '0';\\n    \\t\\t\\t        else\\n    \\t\\t\\t\\t        break;\\n    \\n    \\t\\t\\tfor (; j < version2.size(); j++)\\n    \\t\\t\\t        if (isdigit(version2[j]))\\n    \\t\\t\\t\\t       res2 = res2 * 10 + version2[j] - '0';\\n    \\t\\t\\t       else\\n    \\t\\t\\t\\t       break;\\n    \\n    \\t\\t\\tif (res1 > res2)      return  1;\\n    \\t\\t\\telse if (res1 < res2) return -1;\\n    \\t\\t\\ti++;\\n    \\t\\t\\tj++;\\n    \\t\\t\\tres1 = 0;\\n    \\t\\t\\tres2 = 0;\\n    \\t    }\\n    \\t    return 0;\\n    \\t}\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n    \\tint compareVersion(string version1, string version2) {\\n    \\t\\tlong res1=0, res2 = 0;\\n    \\t\\tunsigned int i=0, j=0;\\n    \\t\\twhile (i < version1.size() || j < version2.size()){\\n    \\t\\t\\tfor (; i < version1.size(); i++)\\n    \\t\\t\\t        if (isdigit(version1[i]))\\n    \\t\\t\\t\\t        res1 = res1 * 10 + version1[i] - '0';\\n    \\t\\t\\t        else\\n    \\t\\t\\t\\t        break;\\n    \\n    \\t\\t\\tfor (; j < version2.size(); j++)\\n    \\t\\t\\t        if (isdigit(version2[j]))\\n    \\t\\t\\t\\t       res2 = res2 * 10 + version2[j] - '0';\\n    \\t\\t\\t       else\\n    \\t\\t\\t\\t       break;\\n    \\n    \\t\\t\\tif (res1 > res2)      return  1;\\n    \\t\\t\\telse if (res1 < res2) return -1;\\n    \\t\\t\\ti++;\\n    \\t\\t\\tj++;\\n    \\t\\t\\tres1 = 0;\\n    \\t\\t\\tres2 = 0;\\n    \\t    }",
                "codeTag": "Java"
            },
            {
                "id": 51012,
                "title": "solution-using-two-pointer-java",
                "content": "Keep two pointer to get the substring until next \".\" or the end. Then compare the substring parsed. If one string is ended, assign 0 value for comparing.\\n\\n    public class Solution {\\n        public int compareVersion(String version1, String version2) {\\n            int i = 0,j = 0;\\n            int pre1 = i, pre2 = j;\\n            while(i < version1.length() || j < version2.length()){\\n                while(i < version1.length()){\\n                    if(version1.charAt(i)=='.')\\n                        break;\\n                    i++;\\n                }\\n                while(j < version2.length()){\\n                    if(version2.charAt(j)=='.')\\n                        break;\\n                    j++;\\n                }\\n                int int1 = pre1 < i?Integer.parseInt(version1.substring(pre1,i)):0;\\n                int int2 = pre2 < j?Integer.parseInt(version2.substring(pre2,j)):0;\\n                if(int1 > int2)\\n                    return 1;\\n                else if(int1 < int2)\\n                    return -1;\\n                pre1 = ++i;\\n                pre2 = ++j;\\n            }\\n            return 0;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int compareVersion(String version1, String version2) {\\n            int i = 0,j = 0;\\n            int pre1 = i, pre2 = j;\\n            while(i < version1.length() || j < version2.length()){\\n                while(i < version1.length()){\\n                    if(version1.charAt(i)=='.')\\n                        break;\\n                    i++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 3208819,
                "title": "165-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThe function compareVersion takes two string arguments version1 and version2, and returns an integer.\\n\\nFirst, the function splits both version strings into a list of revisions using the split method and the dot \\'.\\' as separator. The maximum length n between the two lists is obtained using the max function.\\n\\nThen, the function iterates over the revisions of both lists using a for loop and the range function with argument n. For each index i, the corresponding revisions r1 and r2 are obtained by converting the string revision to an integer using the int function if it exists in the list, otherwise using 0.\\n\\nThe revisions r1 and r2 are compared using the standard comparison operators, and the result is returned if they are different. Specifically, if r1 < r2, then version1 is considered smaller and -1 is returned; if r1 > r2, then version1 is considered larger and 1 is returned.\\n\\nIf all revisions are equal, then 0 is returned.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n  def compareVersion(self, version1: str, version2: str) -> int:\\n    # Split version numbers into list of revisions\\n    v1 = version1.split(\\'.\\')\\n    v2 = version2.split(\\'.\\')\\n    # Get the maximum length between the two lists\\n    n = max(len(v1), len(v2))\\n    # Iterate over the revisions of both lists\\n    for i in range(n):\\n        # Convert each revision to an integer if it exists, otherwise use 0\\n        r1 = int(v1[i]) if i < len(v1) else 0\\n        r2 = int(v2[i]) if i < len(v2) else 0\\n        # Compare revisions and return result if different\\n        if r1 < r2:\\n            return -1\\n        elif r1 > r2:\\n            return 1\\n    # Return 0 if all revisions are equal\\n    return 0\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n  def compareVersion(self, version1: str, version2: str) -> int:\\n    # Split version numbers into list of revisions\\n    v1 = version1.split(\\'.\\')\\n    v2 = version2.split(\\'.\\')\\n    # Get the maximum length between the two lists\\n    n = max(len(v1), len(v2))\\n    # Iterate over the revisions of both lists\\n    for i in range(n):\\n        # Convert each revision to an integer if it exists, otherwise use 0\\n        r1 = int(v1[i]) if i < len(v1) else 0\\n        r2 = int(v2[i]) if i < len(v2) else 0\\n        # Compare revisions and return result if different\\n        if r1 < r2:\\n            return -1\\n        elif r1 > r2:\\n            return 1\\n    # Return 0 if all revisions are equal\\n    return 0\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1797785,
                "title": "java-most-easy-solution",
                "content": "\\n\\tclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n         String arr1[] = version1.split(\"\\\\\\\\.\");\\n        String arr2[] = version2.split(\"\\\\\\\\.\");\\n        int max = Math.max(arr1.length,arr2.length);\\n        for (int i =0; i<max; i++){\\n            int fake1= (i>=arr1.length)? 0: Integer.parseInt(arr1[i]);\\n            int fake2= (i>=arr2.length)? 0: Integer.parseInt(arr2[i]);\\n        if(fake1>fake2)\\n            return 1;\\n            else if(fake1<fake2)\\n                return -1;\\n        }\\n        return 0;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int compareVersion(String version1, String version2) {\\n         String arr1[] = version1.split(\"\\\\\\\\.\");\\n        String arr2[] = version2.split(\"\\\\\\\\.\");\\n        int max = Math.max(arr1.length,arr2.length);\\n        for (int i =0; i<max; i++){\\n            int fake1= (i>=arr1.length)? 0: Integer.parseInt(arr1[i]);\\n            int fake2= (i>=arr2.length)? 0: Integer.parseInt(arr2[i]);\\n        if(fake1>fake2)\\n            return 1;\\n            else if(fake1<fake2)\\n                return -1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 939394,
                "title": "java-simple-splitting-o-m-n-1-ms",
                "content": "```\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n        String[] ver1 = version1.split(\"\\\\\\\\.\");\\n        String[] ver2 = version2.split(\"\\\\\\\\.\");\\n        for(int i=0; i < Math.max(ver1.length, ver2.length); i++){\\n            int v1 = (i < ver1.length) ? Integer.valueOf(ver1[i]) : 0;\\n            int v2 = (i < ver2.length) ? Integer.valueOf(ver2[i]) : 0;\\n            if(v1 < v2) return -1;\\n            if(v1 > v2) return 1;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n        String[] ver1 = version1.split(\"\\\\\\\\.\");\\n        String[] ver2 = version2.split(\"\\\\\\\\.\");\\n        for(int i=0; i < Math.max(ver1.length, ver2.length); i++){\\n            int v1 = (i < ver1.length) ? Integer.valueOf(ver1[i]) : 0;\\n            int v2 = (i < ver2.length) ? Integer.valueOf(ver2[i]) : 0;\\n            if(v1 < v2) return -1;\\n            if(v1 > v2) return 1;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 838129,
                "title": "python-3-split-and-compare",
                "content": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        \"\"\"\\n        This program compares two version numbers and determines\\n        whether one outranks the other or the two version numbers\\n        are equal in rank.\\n\\n        :param version1: version 1 number\\n        :type version1: str\\n        :param version2: version 2 number\\n        :type version2: str\\n        :return: -1 if version1 < version2\\n                  1 if version2 > version1\\n                  0 if version1 and version2 equal\\n        :rtype: int\\n        \"\"\"\\n        \\n        \"\"\"\\n        Split version numbers into their respective components.\\n        \"\"\"\\n        version1_list = version1.split(\\'.\\')\\n        version2_list = version2.split(\\'.\\')\\n        \\n        \"\"\"\\n        Compare components of each version number and return with\\n        the result as soon as an inequality is found. If one version\\n        number has fewer components than the other, an implied zero\\n        is used for the missing components of the shorter-length\\n        version number for comparison purposes.\\n        \"\"\"\\n        while version1_list or version2_list:\\n            if version1_list:\\n                num1 = int( version1_list.pop( 0 ) )\\n            else:\\n                num1 = 0\\n            if version2_list:\\n                num2 = int( version2_list.pop( 0 ) )\\n            else:\\n                num2 = 0\\n            if num1 > num2:\\n                return 1\\n            elif num2 > num1:\\n                return -1\\n        return 0\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        \"\"\"\\n        This program compares two version numbers and determines\\n        whether one outranks the other or the two version numbers\\n        are equal in rank.\\n\\n        :param version1: version 1 number\\n        :type version1: str\\n        :param version2: version 2 number\\n        :type version2: str\\n        :return: -1 if version1 < version2\\n                  1 if version2 > version1\\n                  0 if version1 and version2 equal\\n        :rtype: int\\n        \"\"\"\\n        \\n        \"\"\"\\n        Split version numbers into their respective components.\\n        \"\"\"\\n        version1_list = version1.split(\\'.\\')\\n        version2_list = version2.split(\\'.\\')\\n        \\n        \"\"\"\\n        Compare components of each version number and return with\\n        the result as soon as an inequality is found. If one version\\n        number has fewer components than the other, an implied zero\\n        is used for the missing components of the shorter-length\\n        version number for comparison purposes.\\n        \"\"\"\\n        while version1_list or version2_list:\\n            if version1_list:\\n                num1 = int( version1_list.pop( 0 ) )\\n            else:\\n                num1 = 0\\n            if version2_list:\\n                num2 = int( version2_list.pop( 0 ) )\\n            else:\\n                num2 = 0\\n            if num1 > num2:\\n                return 1\\n            elif num2 > num1:\\n                return -1\\n        return 0\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 50858,
                "title": "java-code-which-beats-99-runtime",
                "content": "    public class Solution {\\n        public int compareVersion(String version1, String version2) {\\n            char[] chars1 = version1.toCharArray();\\n            char[] chars2 = version2.toCharArray();\\n            int m = chars1.length;\\n            int n = chars2.length;\\n            int i = 0;\\n            int j = 0;\\n            int num1 = 0;\\n            int num2 = 0;\\n            while (i < m || j < n) {\\n                while (i < m && chars1[i] != '.') {\\n                    num1 = 10 * num1 + chars1[i] - '0';\\n                    ++i;\\n                }\\n                while (j < n && chars2[j] != '.') {\\n                    num2 = 10 * num2 + chars2[j] - '0';\\n                    ++j;\\n                }\\n                if (num1 > num2) {\\n                    return 1;\\n                }\\n                if (num1 < num2) {\\n                    return -1;\\n                }\\n                num1 = 0;\\n                num2 = 0;\\n                ++i;\\n                ++j;\\n            }\\n            return 0;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int compareVersion(String version1, String version2) {\\n            char[] chars1 = version1.toCharArray();\\n            char[] chars2 = version2.toCharArray();\\n            int m = chars1.length;\\n            int n = chars2.length;\\n            int i = 0;\\n            int j = 0;\\n            int num1 = 0;\\n            int num2 = 0;\\n            while (i < m || j < n) {\\n                while (i < m && chars1[i] != '.') {\\n                    num1 = 10 * num1 + chars1[i] - '0';\\n                    ++i;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 4068355,
                "title": "best-o-max-n1-n2-solution",
                "content": "# Complexity\\n- Time complexity:\\n$$O(max (n1, n2))$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int n1 = version1.size(), n2 = version2.size();\\n        int i = 0, j = 0;\\n        int num1 = 0, num2 = 0;\\n        while (i < n1 || j < n2) {\\n            while (i < n1 && version1[i] != \\'.\\') {\\n                num1 = num1 * 10 + (version1[i] - \\'0\\');\\n                i++;\\n            }\\n            while (j < n2 && version2[j] != \\'.\\') {\\n                num2 = num2 * 10 + (version2[j] - \\'0\\');\\n                j++;\\n            }\\n            if (num1 > num2)\\n                return 1;\\n            if (num1 < num2)\\n                return -1;\\n            num1 = 0;\\n            num2 = 0;\\n            i++;\\n            j++;        \\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int n1 = version1.size(), n2 = version2.size();\\n        int i = 0, j = 0;\\n        int num1 = 0, num2 = 0;\\n        while (i < n1 || j < n2) {\\n            while (i < n1 && version1[i] != \\'.\\') {\\n                num1 = num1 * 10 + (version1[i] - \\'0\\');\\n                i++;\\n            }\\n            while (j < n2 && version2[j] != \\'.\\') {\\n                num2 = num2 * 10 + (version2[j] - \\'0\\');\\n                j++;\\n            }\\n            if (num1 > num2)\\n                return 1;\\n            if (num1 < num2)\\n                return -1;\\n            num1 = 0;\\n            num2 = 0;\\n            i++;\\n            j++;        \\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3547882,
                "title": "165-compare-version-numbers",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int nv1=version1.size(),nv2=version2.size(),i=0,j=0;\\n        while(i<nv1 || j<nv2){\\n            string s1=\"\",s2=\"\";\\n            while(i<nv1 && version1[i]!=\\'.\\') s1+=version1[i++];\\n            while(j<nv2 && version2[j]!=\\'.\\') s2+=version2[j++];\\n            if(s1.size()==0) s1=\"0\";\\n            if(s2.size()==0) s2=\"0\";\\n            int num1=stoi(s1);\\n            int num2=stoi(s2);\\n            if(num1>num2) return 1;\\n            if(num1<num2) return -1;\\n            i++,j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int nv1=version1.size(),nv2=version2.size(),i=0,j=0;\\n        while(i<nv1 || j<nv2){\\n            string s1=\"\",s2=\"\";\\n            while(i<nv1 && version1[i]!=\\'.\\') s1+=version1[i++];\\n            while(j<nv2 && version2[j]!=\\'.\\') s2+=version2[j++];\\n            if(s1.size()==0) s1=\"0\";\\n            if(s2.size()==0) s2=\"0\";\\n            int num1=stoi(s1);\\n            int num2=stoi(s2);\\n            if(num1>num2) return 1;\\n            if(num1<num2) return -1;\\n            i++,j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2614760,
                "title": "easy-c-solution-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int c=0;\\n        deque<int> v1, v2;\\n        for(int i=0; i<version1.size(); ++i){\\n            if(version1[i]==\\'.\\') v1.push_back(c), c=0;\\n            else c = (c*10) + (version1[i]-\\'0\\');\\n        }\\n        if(c>0) v1.push_back(c);\\n        c=0;\\n        for(int i=0; i<version2.size(); ++i){\\n            if(version2[i]==\\'.\\') v2.push_back(c), c=0;\\n            else c = (c*10) + (version2[i]-\\'0\\');\\n        }\\n        if(c>0) v2.push_back(c);     \\n        while(v1.size() and v1.back()==0) v1.pop_back();\\n        while(v2.size() and v2.back()==0) v2.pop_back();\\n               \\n        while(v1.size() and v2.size()){\\n            if(v1.front()==v2.front()) v1.pop_front(), v2.pop_front();\\n            else if(v1.front() > v2.front()) return 1;\\n            else return -1;\\n        }\\n        if(v1.size()) return 1;\\n        else if(v2.size()) return -1;\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int c=0;\\n        deque<int> v1, v2;\\n        for(int i=0; i<version1.size(); ++i){\\n            if(version1[i]==\\'.\\') v1.push_back(c), c=0;\\n            else c = (c*10) + (version1[i]-\\'0\\');\\n        }\\n        if(c>0) v1.push_back(c);\\n        c=0;\\n        for(int i=0; i<version2.size(); ++i){\\n            if(version2[i]==\\'.\\') v2.push_back(c), c=0;\\n            else c = (c*10) + (version2[i]-\\'0\\');\\n        }\\n        if(c>0) v2.push_back(c);     \\n        while(v1.size() and v1.back()==0) v1.pop_back();\\n        while(v2.size() and v2.back()==0) v2.pop_back();\\n               \\n        while(v1.size() and v2.size()){\\n            if(v1.front()==v2.front()) v1.pop_front(), v2.pop_front();\\n            else if(v1.front() > v2.front()) return 1;\\n            else return -1;\\n        }\\n        if(v1.size()) return 1;\\n        else if(v2.size()) return -1;\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2453492,
                "title": "c-easy-understandable-2-approaches",
                "content": "**Please Upvote if you find it helpful :)**\\n\\nApproach 1: Using stringstream\\n\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        \\n        stringstream s1(version1);\\n        stringstream s2(version2);\\n        \\n        string token1,token2;\\n        vector<int>arr1,arr2;\\n        //tokenizing the version1 string with deliminator \\'.\\'\\n        while(getline(s1,token1,\\'.\\'))\\n        {\\n            int num1 = stoi(token1);\\n            arr1.push_back(num1);            \\n        }\\n        //tokenizing the version2 string with deliminator \\'.\\'\\n        while(getline(s2,token2,\\'.\\'))\\n        {\\n            int num2 = stoi(token2);\\n            arr2.push_back(num2);\\n        }\\n        int i = 0,j=0;\\n        //Simulataneously traversing both the arrays and checking the conditions given in the question.\\n        while(i<arr1.size() || j<arr2.size())\\n        {\\n            if(i<arr1.size() && j<arr2.size())\\n            {\\n                if(arr1[i] > arr2[j]) return 1;\\n                else if(arr1[i] < arr2[j]) return -1;\\n                i++;\\n                j++;\\n            }\\n            else if(i < arr1.size())\\n            {\\n                if(arr1[i]>0) return 1;\\n                i++;\\n            }\\n            else if(j < arr2.size())\\n            {\\n                if( arr2[j] > 0) return -1;\\n                j++;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```\\n\\nTime Complexity - O(N) + O(M) + O(N+M)\\nSpace Complexity - O(N) + O(M)\\n\\nApproach 2:\\n\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i = 0,j = 0,n = version1.size(),m = version2.size();\\n        while(i < n || j < m)\\n        {\\n            int n1 = 0;\\n            int n2 = 0;\\n            while(i < n && version1[i] != \\'.\\')\\n            {\\n                n1 = n1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            while(j < m && version2[j] != \\'.\\')\\n            {\\n                n2 = n2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(n1 > n2) return 1;\\n            else if(n2 > n1) return -1;\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};\\n```\\n\\nTime Complexity - O(N+M)\\nSpace Complexity - O(1)\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        \\n        stringstream s1(version1);\\n        stringstream s2(version2);\\n        \\n        string token1,token2;\\n        vector<int>arr1,arr2;\\n        //tokenizing the version1 string with deliminator \\'.\\'\\n        while(getline(s1,token1,\\'.\\'))\\n        {\\n            int num1 = stoi(token1);\\n            arr1.push_back(num1);            \\n        }\\n        //tokenizing the version2 string with deliminator \\'.\\'\\n        while(getline(s2,token2,\\'.\\'))\\n        {\\n            int num2 = stoi(token2);\\n            arr2.push_back(num2);\\n        }\\n        int i = 0,j=0;\\n        //Simulataneously traversing both the arrays and checking the conditions given in the question.\\n        while(i<arr1.size() || j<arr2.size())\\n        {\\n            if(i<arr1.size() && j<arr2.size())\\n            {\\n                if(arr1[i] > arr2[j]) return 1;\\n                else if(arr1[i] < arr2[j]) return -1;\\n                i++;\\n                j++;\\n            }\\n            else if(i < arr1.size())\\n            {\\n                if(arr1[i]>0) return 1;\\n                i++;\\n            }\\n            else if(j < arr2.size())\\n            {\\n                if( arr2[j] > 0) return -1;\\n                j++;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i = 0,j = 0,n = version1.size(),m = version2.size();\\n        while(i < n || j < m)\\n        {\\n            int n1 = 0;\\n            int n2 = 0;\\n            while(i < n && version1[i] != \\'.\\')\\n            {\\n                n1 = n1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            while(j < m && version2[j] != \\'.\\')\\n            {\\n                n2 = n2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(n1 > n2) return 1;\\n            else if(n2 > n1) return -1;\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2050973,
                "title": "if-your-java-solution-is-not-working",
                "content": "String split in java takes regex as a parameter and not any character which you want to split a string by. So `version1.split(\".\")` is wrong, **it should be** `version1.split(\"\\\\\\\\.\")`. `\\'.\\'` in a regular expression means any character, use `\\'\\\\\\\\\\'` to escape it.\\n\\nDoc: https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-\\n\\n```\\nclass Solution {\\n    \\n    private int compareVersion(String version1, String version2, int flip) {\\n        String[] v1 = version1.split(\"\\\\\\\\.\");\\n        String[] v2 = version2.split(\"\\\\\\\\.\");\\n        int i, x, y;\\n        for(i=0; i<v1.length; i++){\\n            x = Integer.parseInt(v1[i]);\\n            y = Integer.parseInt(v2[i]);\\n            if(x>y) return 1*flip;\\n            else if(x<y) return -1*flip;\\n        }\\n        for(; i<v2.length; i++){\\n            if(Integer.parseInt(v2[i])!=0) return -1*flip;\\n        }\\n        return 0;\\n    }\\n    \\n    public int compareVersion(String version1, String version2) {\\n        if(version1.length() > version2.length()) return compareVersion(version2, version1, -1);\\n        else return compareVersion(version1, version2, 1);\\n    }\\n}\\n```\\nP.S: the flippity dippity I did is just to make it more consise :p",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    \\n    private int compareVersion(String version1, String version2, int flip) {\\n        String[] v1 = version1.split(\"\\\\\\\\.\");\\n        String[] v2 = version2.split(\"\\\\\\\\.\");\\n        int i, x, y;\\n        for(i=0; i<v1.length; i++){\\n            x = Integer.parseInt(v1[i]);\\n            y = Integer.parseInt(v2[i]);\\n            if(x>y) return 1*flip;\\n            else if(x<y) return -1*flip;\\n        }\\n        for(; i<v2.length; i++){\\n            if(Integer.parseInt(v2[i])!=0) return -1*flip;\\n        }\\n        return 0;\\n    }\\n    \\n    public int compareVersion(String version1, String version2) {\\n        if(version1.length() > version2.length()) return compareVersion(version2, version1, -1);\\n        else return compareVersion(version1, version2, 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 839377,
                "title": "c-simple-use-of-istringstream-stl-explained-all-string-operations-0-ms-beats-100",
                "content": "I just came to know about **istringstream** function and its amazing for string iteration in C++. \\n\\nFirst step is to count differrence of dots(.) in both string. \\nNow, if we have string with different number of dots, let us add zeros to the end of short list. Then replace all dots with space to make it compatible for our istringstream function.\\nFinally, we need to iterate over both string and simply compare every instance of both strings. \\n**Note** that preceeding zeros are automatically handled. \\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int dif=count(version1.begin(),version1.end(),\\'.\\')-count(version2.begin(),version2.end(),\\'.\\');\\n        while(dif>0){\\n            version2+=\".0\";\\n            dif--;\\n        }\\n        while(dif<0){\\n            version1+=\".0\";\\n            dif++;\\n        }\\n        replace(version1.begin(),version1.end(),\\'.\\',\\' \\');\\n        replace(version2.begin(),version2.end(),\\'.\\',\\' \\');\\n        istringstream s1(version1);\\n        istringstream s2(version2);\\n        for(int n1,n2 ; s1>>n1,s2>>n2 ;)\\n            if(n1>n2)\\n                return 1;\\n            else if(n1<n2)\\n                return -1; \\n        return 0;\\n    }\\n};\\n```\\nComplexity: time complexity is O(n+m), where n and m are lengths of our strings, space complexity O(1) since we iterate over string.\\n\\nIf you have any queries regaring this function,please ask. If you like my approach and explanation, please Upvote!\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int dif=count(version1.begin(),version1.end(),\\'.\\')-count(version2.begin(),version2.end(),\\'.\\');\\n        while(dif>0){\\n            version2+=\".0\";\\n            dif--;\\n        }\\n        while(dif<0){\\n            version1+=\".0\";\\n            dif++;\\n        }\\n        replace(version1.begin(),version1.end(),\\'.\\',\\' \\');\\n        replace(version2.begin(),version2.end(),\\'.\\',\\' \\');\\n        istringstream s1(version1);\\n        istringstream s2(version2);\\n        for(int n1,n2 ; s1>>n1,s2>>n2 ;)\\n            if(n1>n2)\\n                return 1;\\n            else if(n1<n2)\\n                return -1; \\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 838052,
                "title": "python-easy-split-solution-with-zip-and-explanation",
                "content": "This task has some important nuances:\\n1) take numbers from string\\n2) leading zeroes in numbers\\n3) different count of numbers\\nFirst problem python perfectly solves with `split`. Second problem we can solve by `int()`, because it automatically remove leading zeroes, and use `map` to apply `int` to list instead of single element. Third problem resolved by adding zeroes based on difference between versions length. \\n```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        ver1 = list(map(int, version1.split(\".\")))\\n        ver2 = list(map(int, version2.split(\".\")))\\n\\n        l1, l2 = len(ver1), len(ver2)\\n        if l1 > l2:\\n            ver2 += [0] * (l1 - l2)\\n        elif l2 > l1:\\n            ver1 += [0] * (l2 - l1)\\n        \\n        for i, j in zip(ver1, ver2):\\n            if i > j:\\n                return 1\\n            elif j > i:\\n                return -1\\n        return 0\\n    \\n```\\nBut! We can use `itertools.zip_longest` instead of `zip`, thereby leading zeroes will be completed automatically with `fillvalue`.\\n```\\nfrom itertools import zip_longest\\n\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        ver1 = list(map(int, version1.split(\".\")))\\n        ver2 = list(map(int, version2.split(\".\")))\\n\\n        for i, j in zip_longest(ver1, ver2, fillvalue=0):\\n            if i > j:\\n                return 1\\n            if j > i:\\n                return -1\\n        return 0\\n```\\nLike, share, retweet :D",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        ver1 = list(map(int, version1.split(\".\")))\\n        ver2 = list(map(int, version2.split(\".\")))\\n\\n        l1, l2 = len(ver1), len(ver2)\\n        if l1 > l2:\\n            ver2 += [0] * (l1 - l2)\\n        elif l2 > l1:\\n            ver1 += [0] * (l2 - l1)\\n        \\n        for i, j in zip(ver1, ver2):\\n            if i > j:\\n                return 1\\n            elif j > i:\\n                return -1\\n        return 0\\n    \\n```\n```\\nfrom itertools import zip_longest\\n\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        ver1 = list(map(int, version1.split(\".\")))\\n        ver2 = list(map(int, version2.split(\".\")))\\n\\n        for i, j in zip_longest(ver1, ver2, fillvalue=0):\\n            if i > j:\\n                return 1\\n            if j > i:\\n                return -1\\n        return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 837851,
                "title": "using-queue-python",
                "content": "```\\nfrom collections import deque\\n\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        \\n        v1 = deque(list(map(int, version1.split(\\'.\\'))))\\n        v2 = deque(list(map(int, version2.split(\\'.\\'))))\\n        \\n        while v1 or v2:\\n            val1 = v1.popleft() if v1 else 0\\n            val2 = v2.popleft() if v2 else 0\\n            \\n            if val1 > val2: return 1\\n            elif val1 < val2: return -1\\n        \\n        return 0\\n```",
                "solutionTags": [
                    "Python3",
                    "Queue"
                ],
                "code": "```\\nfrom collections import deque\\n\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        \\n        v1 = deque(list(map(int, version1.split(\\'.\\'))))\\n        v2 = deque(list(map(int, version2.split(\\'.\\'))))\\n        \\n        while v1 or v2:\\n            val1 = v1.popleft() if v1 else 0\\n            val2 = v2.popleft() if v2 else 0\\n            \\n            if val1 > val2: return 1\\n            elif val1 < val2: return -1\\n        \\n        return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 837668,
                "title": "python-easy-simple-explained-solution",
                "content": "**Like it? please upvote...**\\n```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        \\n        # split version numbers into list of separate numbers\\n        ver1 = version1.split(\".\")\\n        ver2 = version2.split(\".\")\\n        \\n        # remove trailing zeros\\n        while len(ver1) > 0 and int(ver1[-1]) == 0:\\n            ver1.pop(-1)\\n        while len(ver2) > 0 and int(ver2[-1]) == 0:\\n            ver2.pop(-1)\\n            \\n        # compare each number\\n        for i in range(min(len(ver1), len(ver2))):\\n            if int(ver1[i]) > int(ver2[i]):\\n                return 1\\n            if int(ver1[i]) < int(ver2[i]):\\n                return -1\\n            \\n        if len(ver1) == len(ver2):\\n            return 0\\n        else:\\n            return 1 if max(len(ver1), len(ver2)) == len(ver1) else -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        \\n        # split version numbers into list of separate numbers\\n        ver1 = version1.split(\".\")\\n        ver2 = version2.split(\".\")\\n        \\n        # remove trailing zeros\\n        while len(ver1) > 0 and int(ver1[-1]) == 0:\\n            ver1.pop(-1)\\n        while len(ver2) > 0 and int(ver2[-1]) == 0:\\n            ver2.pop(-1)\\n            \\n        # compare each number\\n        for i in range(min(len(ver1), len(ver2))):\\n            if int(ver1[i]) > int(ver2[i]):\\n                return 1\\n            if int(ver1[i]) < int(ver2[i]):\\n                return -1\\n            \\n        if len(ver1) == len(ver2):\\n            return 0\\n        else:\\n            return 1 if max(len(ver1), len(ver2)) == len(ver1) else -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 707524,
                "title": "c-100-80-easy-to-understand-with-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n       int size1 = version1.size();\\n        int size2 = version2.size();\\n        int i=0, j=0;\\n        \\n       while(i<size1 || j<size2)\\n       {\\n           int num1 = 0; // FOR CALCULATING THE . POINT VALUE OF VERSION1\\n           int num2 = 0; // FOR CALCULATING THE . POINT VALUE OF VERSION2\\n           //CALULATE VERSION1 TILL THE NEXT . POINT\\n           while(i<size1 && version1[i]!=\\'.\\')              \\n            {\\n                num1 = num1*10 + version1[i]-\\'0\\';\\n                i++;\\n            }\\n           // CALCULATE VERSION2 TILL THE NEXT .POINT\\n            while(j<size2 && version2[j]!=\\'.\\')\\n            {\\n                num2 = num2*10 + version2[j]-\\'0\\';\\n                j++;\\n            }\\n            // COMPARE BOTH VERSION\\n            if(num1 > num2)           \\n                return 1;\\n            else if(num1< num2)\\n                return -1;\\n           // IF EQUAL GO AND CHECK FOR NEXT POINT . VALUE\\n            i++;\\n            j++;\\n            \\n            \\n       }\\n       \\n       return 0;\\n    }\\n};\\n\\nDON\\'T FORGET TO UPVOTE, IF YOU UNDERSTOOD IT COMPLETELY :D\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n       int size1 = version1.size();\\n        int size2 = version2.size();\\n        int i=0, j=0;\\n        \\n       while(i<size1 || j<size2)\\n       {\\n           int num1 = 0; // FOR CALCULATING THE . POINT VALUE OF VERSION1\\n           int num2 = 0; // FOR CALCULATING THE . POINT VALUE OF VERSION2\\n           //CALULATE VERSION1 TILL THE NEXT . POINT\\n           while(i<size1 && version1[i]!=\\'.\\')              \\n            {\\n                num1 = num1*10 + version1[i]-\\'0\\';\\n                i++;\\n            }\\n           // CALCULATE VERSION2 TILL THE NEXT .POINT\\n            while(j<size2 && version2[j]!=\\'.\\')\\n            {\\n                num2 = num2*10 + version2[j]-\\'0\\';\\n                j++;\\n            }\\n            // COMPARE BOTH VERSION\\n            if(num1 > num2)           \\n                return 1;\\n            else if(num1< num2)\\n                return -1;\\n           // IF EQUAL GO AND CHECK FOR NEXT POINT . VALUE\\n            i++;\\n            j++;\\n            \\n            \\n       }\\n       \\n       return 0;\\n    }\\n};\\n\\nDON\\'T FORGET TO UPVOTE, IF YOU UNDERSTOOD IT COMPLETELY :D\\n```",
                "codeTag": "Java"
            },
            {
                "id": 629054,
                "title": "c-simple-clean-100-beats-both-time-space-o-m-n",
                "content": "int compareVersion(string version1, string version2) {\\n\\n        int x,y;\\n        int i=0, j=0;\\n        while(i<version1.length() || j< version2.length()){\\n            x=0;\\n            y=0;\\n            while(i<version1.length()&& version1[i]!=\\'.\\'){\\n                x*=10;\\n                x+=(int)(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            while(j<version2.length()&& version2[j]!=\\'.\\'){\\n                y*=10;\\n                y+=(int)(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(i<version1.length()) i++;\\n            if(j<version2.length()) j++;\\n\\t\\t\\t\\n            if(x==y) continue;\\n            else if(x>y) return 1;\\n            else return -1;\\n        }\\n        \\n        return 0;\\n }",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "int compareVersion(string version1, string version2) {\\n\\n        int x,y;\\n        int i=0, j=0;\\n        while(i<version1.length() || j< version2.length()){\\n            x=0;\\n            y=0;\\n            while(i<version1.length()&& version1[i]!=\\'.\\'){\\n                x*=10;\\n                x+=(int)(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            while(j<version2.length()&& version2[j]!=\\'.\\'){\\n                y*=10;\\n                y+=(int)(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(i<version1.length()) i++;\\n            if(j<version2.length()) j++;\\n\\t\\t\\t\\n            if(x==y) continue;\\n            else if(x>y) return 1;\\n            else return -1;\\n        }\\n        \\n        return 0;\\n }",
                "codeTag": "Unknown"
            },
            {
                "id": 50907,
                "title": "concise-java-solution",
                "content": "    public int compareVersion(String version1, String version2) {\\n        int i=0,j=0;\\n        while(i<version1.length()||j<version2.length())\\n        {\\n            int v1=0;\\n            int v2=0;\\n            while(i<version1.length()&&version1.charAt(i)!='.') v1=v1*10+version1.charAt(i++)-'0';\\n            while(j<version2.length()&&version2.charAt(j)!='.') v2=v2*10+version2.charAt(j++)-'0';\\n            if(v1<v2) return -1;\\n            if(v1>v2) return 1;\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public int compareVersion(String version1, String version2) {\\n        int i=0,j=0;\\n        while(i<version1.length()||j<version2.length())\\n        {\\n            int v1=0;\\n            int v2=0;\\n            while(i<version1.length()&&version1.charAt(i)!='.') v1=v1*10+version1.charAt(i++)-'0';\\n            while(j<version2.length()&&version2.charAt(j)!='.') v2=v2*10+version2.charAt(j++)-'0';\\n            if(v1<v2) return -1;\\n            if(v1>v2) return 1;\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 51029,
                "title": "compareversion-on-tabzilla-javascript",
                "content": "I just found a compareVersion function on Tabzilla.\\n\\n    /* https://mozorg.cdn.mozilla.net/en-US/tabzilla/tabzilla.js */\\n    Tabzilla.compareVersion = function (a, b) {\\n        var num1, num2;\\n        a = ('' + a).split('.');\\n        b = ('' + b).split('.');\\n        while (a.length < b.length) { a.push('0'); }\\n        while (b.length < a.length) { b.push('0'); }\\n        for (var i = 0; i < a.length; i++) {\\n            num1 = parseInt(a[i], 10);\\n            num2 = parseInt(b[i], 10);\\n            if (num1 > num2) { return 1; }\\n            if (num1 < num2) { return -1; }\\n        }\\n        return 0;\\n    };\\n\\nAnd it can pass this question.\\n\\nThe code is clean so i shared it to here. Hope it is helpful.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "I just found a compareVersion function on Tabzilla.\\n\\n    /* https://mozorg.cdn.mozilla.net/en-US/tabzilla/tabzilla.js */\\n    Tabzilla.compareVersion = function (a, b) {\\n        var num1, num2;\\n        a = ('' + a).split('.');\\n        b = ('' + b).split('.');\\n        while (a.length < b.length) { a.push('0'); }\\n        while (b.length < a.length) { b.push('0'); }\\n        for (var i = 0; i < a.length; i++) {\\n            num1 = parseInt(a[i], 10);\\n            num2 = parseInt(b[i], 10);\\n            if (num1 > num2) { return 1; }\\n            if (num1 < num2) { return -1; }\\n        }\\n        return 0;\\n    };\\n\\nAnd it can pass this question.\\n\\nThe code is clean so i shared it to here. Hope it is helpful.",
                "codeTag": "Unknown"
            },
            {
                "id": 51039,
                "title": "c-my-ac-solution-with-2ms",
                "content": "      class Solution {\\n        public:\\n            int compareVersion(string version1, string version2) {\\n                int size1 = version1.size();\\n                int size2 = version2.size();\\n                // split version\\n                int sum1,sum2,i,j;\\n                for(i = 0,j = 0;i < size1 || j < size2;++i,++j){\\n                    // version1\\n                    sum1 = 0;\\n                    while(i < size1 && version1[i] != '.'){\\n                        sum1 = sum1 * 10 + version1[i] - '0';\\n                        ++i;\\n                    }//while\\n                    // version2\\n                    sum2 = 0;\\n                    while(j < size2 && version2[j] != '.'){\\n                        sum2 = sum2 * 10 + version2[j] - '0';\\n                        ++j;\\n                    }//while\\n                    // compare\\n                    if(sum1 > sum2){\\n                        return 1;\\n                    }//if\\n                    else if(sum1 < sum2){\\n                        return -1;\\n                    }//else\\n                }//for\\n                return 0;\\n            }\\n        };",
                "solutionTags": [],
                "code": "class Solution {\\n        public:\\n            int compareVersion(string version1, string version2) {\\n                int size1 = version1.size();\\n                int size2 = version2.size();\\n                // split version\\n                int sum1,sum2,i,j;\\n                for(i = 0,j = 0;i < size1 || j < size2;++i,++j){\\n                    // version1\\n                    sum1 = 0;\\n                    while(i < size1 && version1[i] != '.'){\\n                        sum1 = sum1 * 10 + version1[i] - '0';\\n                        ++i;\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 51068,
                "title": "clean-c-solution",
                "content": "    class Solution { public:\\n    int compareVersion(string version1, string version2) {\\n        size_t i = 0;\\n        size_t j = 0;\\n        string str_1, str_2 = \"0\";\\n        while(i < version1.size() || j < version2.size()) {\\n            while (str_1.back() != '.' && i < version1.size()) str_1 += version1[i++];\\n            while (str_2.back() != '.' && j < version2.size()) str_2 += version2[j++];\\n            if (stoi(str_1) > stoi(str_2)) {\\n                return 1;\\n            } else if (stoi(str_1) < stoi(str_2)) {\\n                return -1;\\n            }\\n            str_1 = \"0\";\\n            str_2 = \"0\";\\n        }\\n        return 0;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution { public:\\n    int compareVersion(string version1, string version2) {\\n        size_t i = 0;\\n        size_t j = 0;\\n        string str_1, str_2 = \"0\";\\n        while(i < version1.size() || j < version2.size()) {\\n            while (str_1.back() != '.' && i < version1.size()) str_1 += version1[i++];\\n            while (str_2.back() != '.' && j < version2.size()) str_2 += version2[j++];\\n            if (stoi(str_1) > stoi(str_2)) {\\n                return 1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3977671,
                "title": "c-solution-easy-to-understand-and-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(m+n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(m+n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0;\\n        int j=0;\\n        string s1,s2;\\n        int a,b;\\n\\n        //Firstly compare each interger values before \\'.\\' in both strings\\n        while(i<version1.size() && j<version2.size())\\n        {\\n            s1=\"\";\\n            while(version1[i]!=\\'.\\' && i<version1.size())\\n            {\\n                s1+=version1[i];\\n                i++;\\n            }\\n            s2=\"\";\\n            while(version2[j]!=\\'.\\' && j<version2.size())\\n            {\\n                s2+=version2[j];\\n                j++;\\n            }\\n            i++;\\n            j++;\\n            a=stoi(s1);\\n            b=stoi(s2);\\n            if(a>b) return 1;\\n            else if(b>a) return -1;\\n        }\\n\\n        //If the number of integers present in both strings are different, then any of the two while loop executes\\n        while(i<version1.size())\\n        {\\n            s1=\"\";\\n            while(version1[i]!=\\'.\\' && i<version1.size())\\n            {\\n                s1+=version1[i];\\n                i++;\\n            }\\n            int a=stoi(s1);\\n            if(a>0) return 1;\\n            i++;\\n        }\\n        while(j<version2.size())\\n        {\\n            s2=\"\";\\n            while(version2[j]!=\\'.\\' && j<version2.size())\\n            {\\n                s2+=version2[j];\\n                j++;\\n            }\\n            a=stoi(s2);\\n            if(a>0) return -1;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0;\\n        int j=0;\\n        string s1,s2;\\n        int a,b;\\n\\n        //Firstly compare each interger values before \\'.\\' in both strings\\n        while(i<version1.size() && j<version2.size())\\n        {\\n            s1=\"\";\\n            while(version1[i]!=\\'.\\' && i<version1.size())\\n            {\\n                s1+=version1[i];\\n                i++;\\n            }\\n            s2=\"\";\\n            while(version2[j]!=\\'.\\' && j<version2.size())\\n            {\\n                s2+=version2[j];\\n                j++;\\n            }\\n            i++;\\n            j++;\\n            a=stoi(s1);\\n            b=stoi(s2);\\n            if(a>b) return 1;\\n            else if(b>a) return -1;\\n        }\\n\\n        //If the number of integers present in both strings are different, then any of the two while loop executes\\n        while(i<version1.size())\\n        {\\n            s1=\"\";\\n            while(version1[i]!=\\'.\\' && i<version1.size())\\n            {\\n                s1+=version1[i];\\n                i++;\\n            }\\n            int a=stoi(s1);\\n            if(a>0) return 1;\\n            i++;\\n        }\\n        while(j<version2.size())\\n        {\\n            s2=\"\";\\n            while(version2[j]!=\\'.\\' && j<version2.size())\\n            {\\n                s2+=version2[j];\\n                j++;\\n            }\\n            a=stoi(s2);\\n            if(a>0) return -1;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3518626,
                "title": "java-solution-for-compare-version-numbers-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code aims to compare two version strings by splitting them into individual components (separated by periods) and comparing each corresponding component numerically.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Split the version1 and version2 strings into arrays of components using the period as the delimiter. Store the components in arr1 and arr2 arrays, respectively.\\n2. Initialize a variable i as 0 to iterate through the components of arr1 and arr2.\\n3. While i is less than the length of arr1 or arr2, perform the following comparisons:\\n- If both arr1 and arr2 have components at index i, compare the numerical values of the components.\\n1. If arr1[i] is less than arr2[i], return -1 to indicate that version1 is smaller than version2.\\n2. If arr1[i] is greater than arr2[i], return 1 to indicate that version1 is greater than version2.\\n- If arr1 still has components remaining (i.e., i is within the bounds of arr1), check if the remaining components are non-zero.\\n1. If a non-zero component is found, return 1 to indicate that version1 is greater than version2.\\n- If arr2 still has components remaining (i.e., i is within the bounds of arr2), check if the remaining components are non-zero.\\n1. If a non-zero component is found, return -1 to indicate that version1 is smaller than version2.\\n- Increment i to move to the next component.\\n4. If the loop completes without any return statements, it means both versions are equal. Return 0 to indicate equality.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the code is O(max(n, m)), where n is the number of components in version1 and m is the number of components in version2. The code iterates through the components of the versions until either arr1 or arr2 is exhausted or a difference is found. The maximum number of iterations is determined by the larger number of components between the two versions.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the code is O(max(n, m)), where n is the number of components in version1 and m is the number of components in version2. It is due to the storage of the components in the arr1 and arr2 arrays. The space required for other variables and temporary values is negligible compared to the size of the input strings.\\n\\n# Code\\n```\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n        String[] arr1 = version1.split(\"\\\\\\\\.\");\\n        String[] arr2 = version2.split(\"\\\\\\\\.\");\\n        int i=0;\\n        while(i<arr1.length || i<arr2.length)\\n        {\\n            if(i<arr1.length && i<arr2.length)\\n            {\\n                if(Integer.parseInt(arr1[i]) < Integer.parseInt(arr2[i]))\\n                {\\n                    return -1;\\n                }\\n                else if(Integer.parseInt(arr1[i]) > Integer.parseInt(arr2[i]))\\n                {\\n                    return 1;\\n                }\\n            }\\n            else if(i<arr1.length)\\n            {\\n                if(Integer.parseInt(arr1[i]) != 0)\\n                {\\n                    return 1;\\n                }\\n            } \\n            else if(i<arr2.length)\\n            {\\n                if(Integer.parseInt(arr2[i]) != 0)\\n                {\\n                    return -1;\\n                }\\n            }\\n            i++;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n        String[] arr1 = version1.split(\"\\\\\\\\.\");\\n        String[] arr2 = version2.split(\"\\\\\\\\.\");\\n        int i=0;\\n        while(i<arr1.length || i<arr2.length)\\n        {\\n            if(i<arr1.length && i<arr2.length)\\n            {\\n                if(Integer.parseInt(arr1[i]) < Integer.parseInt(arr2[i]))\\n                {\\n                    return -1;\\n                }\\n                else if(Integer.parseInt(arr1[i]) > Integer.parseInt(arr2[i]))\\n                {\\n                    return 1;\\n                }\\n            }\\n            else if(i<arr1.length)\\n            {\\n                if(Integer.parseInt(arr1[i]) != 0)\\n                {\\n                    return 1;\\n                }\\n            } \\n            else if(i<arr2.length)\\n            {\\n                if(Integer.parseInt(arr2[i]) != 0)\\n                {\\n                    return -1;\\n                }\\n            }\\n            i++;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3158916,
                "title": "java-easy-solution-100-faster",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nSplitting the strings using \".\" as delimiter and then comparing the values \\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n        \\n        String [] one = version1.split(\"\\\\\\\\.\");\\n        String [] two = version2.split(\"\\\\\\\\.\");\\n\\n        for(int i=0;i<Math.max(one.length,two.length);i++){\\n\\n            int o = Integer.parseInt(i<one.length ? one[i]:\"0\");\\n            int t = Integer.parseInt(i<two.length ? two[i]:\"0\");\\n            if(o > t){\\n                return 1;\\n            }\\n            else if (o < t){\\n                return -1;\\n            }\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n        \\n        String [] one = version1.split(\"\\\\\\\\.\");\\n        String [] two = version2.split(\"\\\\\\\\.\");\\n\\n        for(int i=0;i<Math.max(one.length,two.length);i++){\\n\\n            int o = Integer.parseInt(i<one.length ? one[i]:\"0\");\\n            int t = Integer.parseInt(i<two.length ? two[i]:\"0\");\\n            if(o > t){\\n                return 1;\\n            }\\n            else if (o < t){\\n                return -1;\\n            }\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2363093,
                "title": "c-took-2-hour-but-did-it",
                "content": "```\\n\\nWhen your (mine) day starts with 2 good news \\uD83D\\uDE0D by mahadev\\'s blessings \\uD83D\\uDE4F \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/*\\nAugust 1 : Started fantastically!!!!\\uD83D\\uDE0D\\uD83D\\uDE4C\\n\\nApproach::::::::::::\\n\\nSay our strings given to us is s1 = \"1.1.0.3.5.06\" and s2 = \"1.1.0.00003.5.00005\"\\n\\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n       \\u2191                                         \\u2191\\n\\t   For the first dot number generated from s1 is, number1 = 1 &\\n\\t   For the first dot number generated from s2 is, number2 = 1\\n\\t   Since both them are equal, so we can\\'t comment anything,\\n\\t   therefore we will move further\\n\\t   \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n         \\u2191                                         \\u2191\\n\\t\\t For the second dot number generated from s1 is, number1 = 1 &\\n\\t     For the second dot number generated from s2 is, number2 = 1\\n\\t     Since both them also equal, so we can not comment anything,\\n\\t     therefore we will move further\\n\\t\\t \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n           \\u2191                                         \\u2191\\n\\t\\t   For the third dot number generated from s1 is, number1 = 0 &\\n\\t       For the third dot number generated from s2 is, number2 = 0\\n\\t       Since both again equal, so we can not comment anything,\\n\\t       therefore we will move further\\n\\t\\t   \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n             \\u2191                                             \\u2191\\n\\t\\t\\t For the fourth dot number generated from s1 is, number1 = 3 &\\n\\t         For the fourth dot number generated from s2 is, number2 = 00003\\n\\t\\t\\t //One Important thing is to observe here is, \\n\\t\\t\\t //no matter how many leading zeroes are their, if numbers are same then we will proceed further\\n\\t         Since both again equal, so we can not comment anything,\\n\\t         therefore we will move further\\n\\t\\t\\t \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n               \\u2191                                             \\u2191\\n\\t\\t\\t   For the fifth dot number generated from s1 is, number1 = 5 &\\n\\t           For the fifth dot number generated from s2 is, number2 = 5\\n\\t\\t\\t   Since both again equal, so we can not comment anything,\\n\\t\\t\\t   therefore we will move further\\n\\t\\t\\t   \\ns1 = \"1.1.0.3.5.06 \"                       s2 = \"1.1.0.00003.5.00005 \"\\n                   \\u2191                                                 \\u2191\\n\\t\\t\\t\\t   And lastly number generated from s1 is, number1 = 06 &\\n\\t\\t\\t\\t   number generated from s1 is, number2  = 00005\\n\\t\\t\\t\\t   since number1 > number2 , therefore we will return 1 as our answer.\\n\\nTherefore, Our answer should be 1\\n\\n\\n\\n\\n*/\\n\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {   \\n        int i = 0, j = 0, n1 = version1.size(), n2 = version2.size(), num1 = 0, num2 = 0; \\n        while(i<n1 || j<n2)\\n        {\\n            while(i<n1 && version1[i]!=\\'.\\')\\n            {\\n                num1 = num1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            while(j<n2 && version2[j]!=\\'.\\')\\n            {\\n                num2 = num2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(num1>num2)\\n            {\\n                return 1;\\n            }\\n            if(num1 < num2) \\n            {\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n            num1 = 0;\\n            num2 = 0;\\n        }\\n        return 0; \\n    }\\n};\\n\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\nWhen your (mine) day starts with 2 good news \\uD83D\\uDE0D by mahadev\\'s blessings \\uD83D\\uDE4F \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/*\\nAugust 1 : Started fantastically!!!!\\uD83D\\uDE0D\\uD83D\\uDE4C\\n\\nApproach::::::::::::\\n\\nSay our strings given to us is s1 = \"1.1.0.3.5.06\" and s2 = \"1.1.0.00003.5.00005\"\\n\\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n       \\u2191                                         \\u2191\\n\\t   For the first dot number generated from s1 is, number1 = 1 &\\n\\t   For the first dot number generated from s2 is, number2 = 1\\n\\t   Since both them are equal, so we can\\'t comment anything,\\n\\t   therefore we will move further\\n\\t   \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n         \\u2191                                         \\u2191\\n\\t\\t For the second dot number generated from s1 is, number1 = 1 &\\n\\t     For the second dot number generated from s2 is, number2 = 1\\n\\t     Since both them also equal, so we can not comment anything,\\n\\t     therefore we will move further\\n\\t\\t \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n           \\u2191                                         \\u2191\\n\\t\\t   For the third dot number generated from s1 is, number1 = 0 &\\n\\t       For the third dot number generated from s2 is, number2 = 0\\n\\t       Since both again equal, so we can not comment anything,\\n\\t       therefore we will move further\\n\\t\\t   \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n             \\u2191                                             \\u2191\\n\\t\\t\\t For the fourth dot number generated from s1 is, number1 = 3 &\\n\\t         For the fourth dot number generated from s2 is, number2 = 00003\\n\\t\\t\\t //One Important thing is to observe here is, \\n\\t\\t\\t //no matter how many leading zeroes are their, if numbers are same then we will proceed further\\n\\t         Since both again equal, so we can not comment anything,\\n\\t         therefore we will move further\\n\\t\\t\\t \\ns1 = \"1.1.0.3.5.06\"                       s2 = \"1.1.0.00003.5.00005\"\\n               \\u2191                                             \\u2191\\n\\t\\t\\t   For the fifth dot number generated from s1 is, number1 = 5 &\\n\\t           For the fifth dot number generated from s2 is, number2 = 5\\n\\t\\t\\t   Since both again equal, so we can not comment anything,\\n\\t\\t\\t   therefore we will move further\\n\\t\\t\\t   \\ns1 = \"1.1.0.3.5.06 \"                       s2 = \"1.1.0.00003.5.00005 \"\\n                   \\u2191                                                 \\u2191\\n\\t\\t\\t\\t   And lastly number generated from s1 is, number1 = 06 &\\n\\t\\t\\t\\t   number generated from s1 is, number2  = 00005\\n\\t\\t\\t\\t   since number1 > number2 , therefore we will return 1 as our answer.\\n\\nTherefore, Our answer should be 1\\n\\n\\n\\n\\n*/\\n\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {   \\n        int i = 0, j = 0, n1 = version1.size(), n2 = version2.size(), num1 = 0, num2 = 0; \\n        while(i<n1 || j<n2)\\n        {\\n            while(i<n1 && version1[i]!=\\'.\\')\\n            {\\n                num1 = num1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            while(j<n2 && version2[j]!=\\'.\\')\\n            {\\n                num2 = num2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(num1>num2)\\n            {\\n                return 1;\\n            }\\n            if(num1 < num2) \\n            {\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n            num1 = 0;\\n            num2 = 0;\\n        }\\n        return 0; \\n    }\\n};\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1799094,
                "title": "c-very-easy-approach-100-faster-0ms-explained",
                "content": "```\\nclass Solution {\\npublic:\\n    int stoi(string str) {          // Function to convert string to integer\\n        int res = 0;\\n        for(int z=0;z<str.length();z++) {\\n            res = res*10+(str[z]-\\'0\\');\\n        }\\n        return res;\\n    }\\n    \\n    int compareVersion(string version1, string version2) {\\n        int len1 = version1.length(), len2 = version2.length();\\n        int j = 0, k = 0;\\n        unsigned int num1, num2;\\n        string str1, str2;\\n        for(int i=0;i<max(len1,len2);i++) {\\n            while(j < len1 && version1[j] != \\'.\\') { // Breaking version1 string into small strings between \\'.\\'\\n                str1 += version1[j];\\n                j++;\\n                i++;\\n            }\\n            while(k < len2 && version2[k] != \\'.\\') { // Breaking version2string into small strings between \\'.\\'\\n                str2 += version2[k];\\n                k++;\\n            }\\n            num1 = stoi(str1);\\n            num2 = stoi(str2);\\n            str1 = \"\";\\n            str2 = \"\";\\n            j++;\\n            k++;\\n            \\n            if(num1 == num2) {      // Comparing the versions\\n                continue;\\n            }\\n            else if(num1 > num2) {\\n                return 1;\\n            }\\n            else if(num1 < num2) {\\n                return -1;\\n            }\\n        }\\n        return 0;\\n\\t\\t// If this helped you, then please do up vote\\uD83D\\uDE0A.\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int stoi(string str) {          // Function to convert string to integer\\n        int res = 0;\\n        for(int z=0;z<str.length();z++) {\\n            res = res*10+(str[z]-\\'0\\');\\n        }\\n        return res;\\n    }\\n    \\n    int compareVersion(string version1, string version2) {\\n        int len1 = version1.length(), len2 = version2.length();\\n        int j = 0, k = 0;\\n        unsigned int num1, num2;\\n        string str1, str2;\\n        for(int i=0;i<max(len1,len2);i++) {\\n            while(j < len1 && version1[j] != \\'.\\') { // Breaking version1 string into small strings between \\'.\\'\\n                str1 += version1[j];\\n                j++;\\n                i++;\\n            }\\n            while(k < len2 && version2[k] != \\'.\\') { // Breaking version2string into small strings between \\'.\\'\\n                str2 += version2[k];\\n                k++;\\n            }\\n            num1 = stoi(str1);\\n            num2 = stoi(str2);\\n            str1 = \"\";\\n            str2 = \"\";\\n            j++;\\n            k++;\\n            \\n            if(num1 == num2) {      // Comparing the versions\\n                continue;\\n            }\\n            else if(num1 > num2) {\\n                return 1;\\n            }\\n            else if(num1 < num2) {\\n                return -1;\\n            }\\n        }\\n        return 0;\\n\\t\\t// If this helped you, then please do up vote\\uD83D\\uDE0A.\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798968,
                "title": "accepted-in-3ms-easy-fast-and-simple-solution-with-comments",
                "content": "### \\u2714 Compare Version Numbers  | C++ | Medium Level | Easy, Fast and Simple | 3ms \\n\\n<br>\\n \\uD83D\\uDDD3\\uFE0F This problem is the Daily LeetCoding Challenge for February, Day 25.\\n<br>\\n<br>\\n\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        // Take length of both the strings in n1 and n2\\n        int n1 = version1.length();\\n        int n2  = version2.length();\\n        \\n        // Take two variables i and j for running a loop though both the strings.\\n        int i = 0, j = 0;\\n        \\n        // Take sum1 and sum2 for storing the summation of string(Converted to integers)\\n        int sum1 = 0, sum2 = 0;\\n        \\n        // Run while loop until any one of the string is having, length not equals to zero. \\n        while(i < n1 || j < n2){\\n            \\n            // Calculate sum1 from version1 until \\'.\\' character.\\n            while(i < n1 && version1[i] != \\'.\\'){\\n                sum1 = sum1 * 10 + (version1[i] - \\'0\\');\\n                i++;\\n            }\\n            \\n            // Calculate sum2 from version2 until \\'.\\' character.\\n            while(j < n2 && version2[j] != \\'.\\'){\\n                sum2 = sum2 * 10 + (version2[j] - \\'0\\');\\n                j++;\\n            }\\n            \\n            // Compair sum1 and sum2\\n            if(sum1 > sum2){\\n                return 1;\\n            }else if(sum1 < sum2){\\n                return -1;\\n            }\\n            \\n            // Re initialise sum1 and sum2 with zero for calulating next part of version.\\n            sum1 = 0; \\n            sum2 = 0;\\n            \\n            // Increment i and j\\n            i++; \\n            j++;\\n        }\\n        return 0;\\n    }\\n};\\n```\\n\\nPlease Upvote if you liked the solution :)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        // Take length of both the strings in n1 and n2\\n        int n1 = version1.length();\\n        int n2  = version2.length();\\n        \\n        // Take two variables i and j for running a loop though both the strings.\\n        int i = 0, j = 0;\\n        \\n        // Take sum1 and sum2 for storing the summation of string(Converted to integers)\\n        int sum1 = 0, sum2 = 0;\\n        \\n        // Run while loop until any one of the string is having, length not equals to zero. \\n        while(i < n1 || j < n2){\\n            \\n            // Calculate sum1 from version1 until \\'.\\' character.\\n            while(i < n1 && version1[i] != \\'.\\'){\\n                sum1 = sum1 * 10 + (version1[i] - \\'0\\');\\n                i++;\\n            }\\n            \\n            // Calculate sum2 from version2 until \\'.\\' character.\\n            while(j < n2 && version2[j] != \\'.\\'){\\n                sum2 = sum2 * 10 + (version2[j] - \\'0\\');\\n                j++;\\n            }\\n            \\n            // Compair sum1 and sum2\\n            if(sum1 > sum2){\\n                return 1;\\n            }else if(sum1 < sum2){\\n                return -1;\\n            }\\n            \\n            // Re initialise sum1 and sum2 with zero for calulating next part of version.\\n            sum1 = 0; \\n            sum2 = 0;\\n            \\n            // Increment i and j\\n            i++; \\n            j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798515,
                "title": "solution-with-explained-approach",
                "content": "```\\n// Approach\\n// 1. Split the string along with dot in an array\\n// 2. Now since array has been created so take val1 from arr1 and val2 from arr2. I have done parseInt so that the leading zeroes get vanished.\\n//  Ex--> 1.0.0.001 -->split-->[1,0,0,001]-->parseInt-->[1,0,0,1]\\n// 3. Cases if val1>val2 return 1\\n//          if val1<val2 return -1\\n//          else  continue checking all the remaining values \\n// 4. It might happen both the strings are not of same length\\n//    So if string1 has been exhausted check for string 2 and vice versa\\n// 5. Else return 0;\\n\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n       String versionArr1[]= version1.split(\"\\\\\\\\.\");\\n       String versionArr2[]= version2.split(\"\\\\\\\\.\");\\n        \\n        int s1=0;\\n        int s2=0;\\n        \\n        while(s1<versionArr1.length && s2<versionArr2.length){\\n            int val1=Integer.parseInt(versionArr1[s1]);\\n            int val2=Integer.parseInt(versionArr2[s2]);\\n            \\n            s1++;\\n            s2++;\\n            \\n            if(val1>val2){\\n                return 1;\\n            }\\n            else if(val1<val2){\\n                return -1;\\n            }\\n            else{\\n               //continue as we dont know whether next val will be greater or lesser \\n                \\n            }\\n        }\\n        \\n        while(s1<versionArr1.length){\\n           int val1=Integer.parseInt(versionArr1[s1]);\\n              s1++;\\n            if(val1>0)\\n                return 1;\\n          \\n        }\\n        \\n         while(s2<versionArr2.length){\\n           int val2=Integer.parseInt(versionArr2[s2]);\\n              s2++;\\n            if(val2>0)\\n                return -1;\\n          \\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n// Approach\\n// 1. Split the string along with dot in an array\\n// 2. Now since array has been created so take val1 from arr1 and val2 from arr2. I have done parseInt so that the leading zeroes get vanished.\\n//  Ex--> 1.0.0.001 -->split-->[1,0,0,001]-->parseInt-->[1,0,0,1]\\n// 3. Cases if val1>val2 return 1\\n//          if val1<val2 return -1\\n//          else  continue checking all the remaining values \\n// 4. It might happen both the strings are not of same length\\n//    So if string1 has been exhausted check for string 2 and vice versa\\n// 5. Else return 0;\\n\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n       String versionArr1[]= version1.split(\"\\\\\\\\.\");\\n       String versionArr2[]= version2.split(\"\\\\\\\\.\");\\n        \\n        int s1=0;\\n        int s2=0;\\n        \\n        while(s1<versionArr1.length && s2<versionArr2.length){\\n            int val1=Integer.parseInt(versionArr1[s1]);\\n            int val2=Integer.parseInt(versionArr2[s2]);\\n            \\n            s1++;\\n            s2++;\\n            \\n            if(val1>val2){\\n                return 1;\\n            }\\n            else if(val1<val2){\\n                return -1;\\n            }\\n            else{\\n               //continue as we dont know whether next val will be greater or lesser \\n                \\n            }\\n        }\\n        \\n        while(s1<versionArr1.length){\\n           int val1=Integer.parseInt(versionArr1[s1]);\\n              s1++;\\n            if(val1>0)\\n                return 1;\\n          \\n        }\\n        \\n         while(s2<versionArr2.length){\\n           int val2=Integer.parseInt(versionArr2[s2]);\\n              s2++;\\n            if(val2>0)\\n                return -1;\\n          \\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798506,
                "title": "c-easy-to-understand-tc-o-n-sc-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0,n=version1.size(),m=version2.size();\\n        int fst=0,snd=0;\\n        while(i<n || j<m){\\n            fst=0,snd=0;\\n            while(i<n && version1[i]!=\\'.\\'){\\n                fst=fst*10+version1[i]-\\'0\\';\\n                i++;\\n            }\\n            while(j<m && version2[j]!=\\'.\\'){\\n                snd=snd*10+version2[j]-\\'0\\';\\n                j++;\\n            }\\n             \\n            if(fst<snd) return -1;\\n            if(fst>snd) return 1;\\n            i++;\\n            j++;\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0,n=version1.size(),m=version2.size();\\n        int fst=0,snd=0;\\n        while(i<n || j<m){\\n            fst=0,snd=0;\\n            while(i<n && version1[i]!=\\'.\\'){\\n                fst=fst*10+version1[i]-\\'0\\';\\n                i++;\\n            }\\n            while(j<m && version2[j]!=\\'.\\'){\\n                snd=snd*10+version2[j]-\\'0\\';\\n                j++;\\n            }\\n             \\n            if(fst<snd) return -1;\\n            if(fst>snd) return 1;\\n            i++;\\n            j++;\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798457,
                "title": "c-solution-using-strings",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int n=version1.size(),i=0;\\n        int m=version2.size(),j=0;\\n        while(1){\\n            string ans,res;\\n            while(i<n){\\n                if(version1[i]==\\'.\\'){\\n                    break;\\n                }else{\\n                  ans.push_back(version1[i]);\\n                }\\n                i++;\\n            }\\n            while(j<m){\\n                if(version2[j]==\\'.\\'){\\n                    break;\\n                }else{\\n                    res.push_back(version2[j]);\\n                }\\n                j++;\\n            }\\n            \\n            int x=0,y=0;\\n            if(ans.size()==0) {\\n                x=0;\\n            }\\n            else{\\n                x=stoi(ans);\\n            }\\n            \\n            if(res.size()==0) {\\n                y=0;\\n            }\\n            else{\\n                y=stoi(res);\\n            }\\n        \\n            if(x>y){\\n                return 1;\\n            }else if(x<y){\\n                return -1;\\n            }\\n            if(i==n and j==m) break;\\n            \\n             if(i!=n)i++;\\n             if(j!=m)j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int n=version1.size(),i=0;\\n        int m=version2.size(),j=0;\\n        while(1){\\n            string ans,res;\\n            while(i<n){\\n                if(version1[i]==\\'.\\'){\\n                    break;\\n                }else{\\n                  ans.push_back(version1[i]);\\n                }\\n                i++;\\n            }\\n            while(j<m){\\n                if(version2[j]==\\'.\\'){\\n                    break;\\n                }else{\\n                    res.push_back(version2[j]);\\n                }\\n                j++;\\n            }\\n            \\n            int x=0,y=0;\\n            if(ans.size()==0) {\\n                x=0;\\n            }\\n            else{\\n                x=stoi(ans);\\n            }\\n            \\n            if(res.size()==0) {\\n                y=0;\\n            }\\n            else{\\n                y=stoi(res);\\n            }\\n        \\n            if(x>y){\\n                return 1;\\n            }else if(x<y){\\n                return -1;\\n            }\\n            if(i==n and j==m) break;\\n            \\n             if(i!=n)i++;\\n             if(j!=m)j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798178,
                "title": "2-liner-in-python-3-8",
                "content": "```\\n    def compareVersion(self, s1: str, s2: str) -> int:\\n        z=list(zip_longest( map(int,s1.split(\".\")) , map(int,s2.split(\".\")),fillvalue=0))       \\n        return -1*le((a:=list(map(itemgetter(0),z))),(b:=list(map(itemgetter(1),z ))))+ge(a,b)\\n```\\n\\nIf you have any questions, feel free to ask.\\n\\n**Happy Coding !!**",
                "solutionTags": [],
                "code": "```\\n    def compareVersion(self, s1: str, s2: str) -> int:\\n        z=list(zip_longest( map(int,s1.split(\".\")) , map(int,s2.split(\".\")),fillvalue=0))       \\n        return -1*le((a:=list(map(itemgetter(0),z))),(b:=list(map(itemgetter(1),z ))))+ge(a,b)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1797979,
                "title": "c-100-faster-95-better-memory-use-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string v1, string v2) \\n    {\\n        //cout<<\\'5\\'-\\'\\\\0\\'-48;\\n        int m = v1.length(),n = v2.length();\\n        int i=0,j=0;\\n        while(i<m && j<n)\\n        {\\n            int num1=0,num2=0;\\n            while(v1[i] != \\'.\\' && i < m)\\n            {\\n                num1 = num1*10 + (v1[i++]-\\'\\\\0\\'-48);\\n            }\\n            if(v1[i] == \\'.\\') i++;\\n            while(v2[j] != \\'.\\' && j < n)\\n            {\\n                num2 = num2*10 + (v2[j++]-\\'\\\\0\\'-48);\\n            }\\n            if(v2[j] == \\'.\\') j++;\\n            if(num1 == num2) continue;\\n            else if(num1 > num2) return 1;\\n            else if(num1 < num2) return -1;\\n        }\\n        if(i==m && j < n)\\n        {\\n            while(j<n)\\n            {\\n                int num2 = 0;\\n                while(v2[j] != \\'.\\' && j<n)\\n                {\\n                    num2 = num2*10 + (v2[j++]-\\'\\\\0\\'-48);\\n                }\\n                if(v2[j] == \\'.\\') j++;\\n                if(num2 == 0) continue;\\n                else if(num2 > 0) return -1;\\n            }\\n        }\\n        else if(i<m && j == n)\\n        {\\n            while(i < m)\\n            {\\n                int num1 = 0;\\n                while(v1[i] != \\'.\\' && i < m)\\n                {\\n                    num1 = num1*10 + (v1[i++]-\\'\\\\0\\'-48);\\n                }\\n                if(v1[i] == \\'.\\') i++;\\n                if(num1 == 0) continue;\\n                else if(num1 > 0) return 1;\\n            }\\n            \\n        }\\n        return 0;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int compareVersion(string v1, string v2) \\n    {\\n        //cout<<\\'5\\'-\\'\\\\0\\'-48;\\n        int m = v1.length(),n = v2.length();\\n        int i=0,j=0;\\n        while(i<m && j<n)\\n        {\\n            int num1=0,num2=0;\\n            while(v1[i] != \\'.\\' && i < m)\\n            {\\n                num1 = num1*10 + (v1[i++]-\\'\\\\0\\'-48);\\n            }",
                "codeTag": "C++"
            },
            {
                "id": 1797495,
                "title": "0ms-100-faster-c",
                "content": "\\tclass Solution {\\n\\tpublic:\\n    int compareVersion(string s, string t) {\\n        \\n        int i=0;\\n        int j=0;\\n        int num1=0,num2=0;\\n        string word1=\"\",word2=\"\";\\n        \\n        while(1){\\n            word1.clear();\\n            word2.clear();\\n            \\n            while(i<s.size() && s[i]!=\\'.\\'){\\n                word1+=s[i];\\n                i++;\\n            }\\n            while(j<t.size() && t[j]!=\\'.\\'){\\n                word2+=t[j];\\n                j++;\\n            }\\n            i++;\\n            j++;\\n            \\n            num1=word1.size()?stoi(word1):0;\\n            num2=word2.size()?stoi(word2):0;\\n            \\n            if(num1>num2) return 1;\\n            else if(num1<num2) return -1;\\n            if(i>=s.size() && j>=t.size()) break;\\n        \\n        }\\n\\treturn 0;\\n    }\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n    int compareVersion(string s, string t) {\\n        \\n        int i=0;\\n        int j=0;\\n        int num1=0,num2=0;\\n        string word1=\"\",word2=\"\";\\n        \\n        while(1){\\n            word1.clear();\\n            word2.clear();\\n            \\n            while(i<s.size() && s[i]!=\\'.\\'){\\n                word1+=s[i];\\n                i++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1797366,
                "title": "c-speed-0ms-memory-95-20-short-simple-proper-explaination",
                "content": "\\n                                               \\'MAKE EACH DAY YOUR MASTER PIECE , GOOD MORNING \\uD83D\\uDE0A\\'\\n### Difficulty Level\\n```\\n-> LeetCode has put the question in medium level but I would say it is you easy level .\\n-> Only looping and traversals techniques are using in this.\\n-> Good for practicing them.\\n-> Must suggest for beginners to try, so that they can improve skills related to looping and strings problem.\\n```\\n\\n### Problem Statement\\n```\\nQuestion says we have two strings representing versions respectively.\\nEvaluate them and compare them whether they are equal or less than or greater than.\\n```\\n\\n### Approach\\n```\\nBasically if we want to compare two words from dictionary and tell which come first then what we do, we just compare it characters by characters. Then whcih comes first in lexicographical order will the answer.\\n\\nSimilarly we are using that here.\\n\\nSuppose if i say i have two versions.\\nV1 ->  10.8.1.0\\n\\nV2 -> 10.08.1.2\\n\\nStart comparing them one by one.\\n\\nStep-1\\nV1 = 10      v2 = 10       \\nEqual , means they are placed in the same location of book.\\n\\nStep-2\\nV1 = 8      V2=08\\nNow this would be interesting, actually they both are same we can represent \\'08\\' as \\'8\\' also so they both are same.\\n\\nStep3\\nV1 = 1      V2=1\\nAgain EQUAL means till now they both are same and placed at same position in dictionary.\\n\\nStep4\\nV1 = 0      V2=2\\nFINALLY something different, now compare them V1<V2 means smaller one will be placed before greater one acc to dictionary rule.\\nSo V1 will be placed before V2.\\n```\\n\\n### SUMARRY\\n```\\n1. Check and compare each step of both the versions .\\n2. If the current step are same then continue your comparison.\\n3. If the current_step_of_V1 < current_step_of_V2 then immediately return -1 else return 1.\\n4. After all the comparisons , if nothing is found the return 0 they  both are same.\\n```\\n![image](https://assets.leetcode.com/users/images/591fa571-d2c0-460a-9038-e7b85e8f8fb1_1645753778.6853611.png)\\n\\n### CODE\\n\\n```\\n\\n                               \\'UpVote If you are liking this daily submissions\\'\\n \\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) \\n    {\\n        \\n        int V1=0,V2=0,i,j,current=0;                                    //V1 for V2 for respective versions\\n        i=j=0;\\n        while(i<version1.size() || j<version2.size())\\n        {\\n            current=0;\\n            while(j<version2.size() && version2[j]!=\\'.\\')                        //Score of version 2\\n            {\\n                current=current*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            V2+=current;\\n            current=0;\\n            while(i<version1.size() && version1[i]!=\\'.\\')                         //Score of version 1\\n            {\\n                current=current*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            V1+=current;\\n\\t\\t\\t\\t\\t\\n            if(V1<V2)\\n                return -1;\\n            else if(V1>V2)\\n                return 1;\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};\\n```\\n\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n-> LeetCode has put the question in medium level but I would say it is you easy level .\\n-> Only looping and traversals techniques are using in this.\\n-> Good for practicing them.\\n-> Must suggest for beginners to try, so that they can improve skills related to looping and strings problem.\\n```\n```\\nQuestion says we have two strings representing versions respectively.\\nEvaluate them and compare them whether they are equal or less than or greater than.\\n```\n```\\nBasically if we want to compare two words from dictionary and tell which come first then what we do, we just compare it characters by characters. Then whcih comes first in lexicographical order will the answer.\\n\\nSimilarly we are using that here.\\n\\nSuppose if i say i have two versions.\\nV1 ->  10.8.1.0\\n\\nV2 -> 10.08.1.2\\n\\nStart comparing them one by one.\\n\\nStep-1\\nV1 = 10      v2 = 10       \\nEqual , means they are placed in the same location of book.\\n\\nStep-2\\nV1 = 8      V2=08\\nNow this would be interesting, actually they both are same we can represent \\'08\\' as \\'8\\' also so they both are same.\\n\\nStep3\\nV1 = 1      V2=1\\nAgain EQUAL means till now they both are same and placed at same position in dictionary.\\n\\nStep4\\nV1 = 0      V2=2\\nFINALLY something different, now compare them V1<V2 means smaller one will be placed before greater one acc to dictionary rule.\\nSo V1 will be placed before V2.\\n```\n```\\n1. Check and compare each step of both the versions .\\n2. If the current step are same then continue your comparison.\\n3. If the current_step_of_V1 < current_step_of_V2 then immediately return -1 else return 1.\\n4. After all the comparisons , if nothing is found the return 0 they  both are same.\\n```\n```\\n\\n                               \\'UpVote If you are liking this daily submissions\\'\\n \\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) \\n    {\\n        \\n        int V1=0,V2=0,i,j,current=0;                                    //V1 for V2 for respective versions\\n        i=j=0;\\n        while(i<version1.size() || j<version2.size())\\n        {\\n            current=0;\\n            while(j<version2.size() && version2[j]!=\\'.\\')                        //Score of version 2\\n            {\\n                current=current*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            V2+=current;\\n            current=0;\\n            while(i<version1.size() && version1[i]!=\\'.\\')                         //Score of version 1\\n            {\\n                current=current*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            V1+=current;\\n\\t\\t\\t\\t\\t\\n            if(V1<V2)\\n                return -1;\\n            else if(V1>V2)\\n                return 1;\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1716348,
                "title": "c-100-faster",
                "content": "**Calculating values between \\'.\\' and compare the two values obtained from the two string**\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0;\\n        \\n        int n = version1.size();\\n        int m = version2.size();\\n        \\n        while(i<n || j<m)\\n        {\\n            int n1 = 0;\\n            int n2 = 0;\\n            \\n            \\n            while(i<n && version1[i]!=\\'.\\')\\n            {\\n                n1 = n1*10 + version1[i]-\\'0\\';\\n                i++;\\n            }\\n            while(j<m&& version2[j]!=\\'.\\')\\n            {\\n                n2 = n2*10 + version2[j]-\\'0\\';\\n                j++;\\n            }\\n            \\n            if(n1 > n2)\\n            {\\n                return 1;\\n            }\\n            else if(n2 > n1)\\n            {\\n                return -1;\\n            }\\n            else{\\n                i++;\\n                j++;\\n            }\\n            \\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0;\\n        \\n        int n = version1.size();\\n        int m = version2.size();\\n        \\n        while(i<n || j<m)\\n        {\\n            int n1 = 0;\\n            int n2 = 0;\\n            \\n            \\n            while(i<n && version1[i]!=\\'.\\')\\n            {\\n                n1 = n1*10 + version1[i]-\\'0\\';\\n                i++;\\n            }\\n            while(j<m&& version2[j]!=\\'.\\')\\n            {\\n                n2 = n2*10 + version2[j]-\\'0\\';\\n                j++;\\n            }\\n            \\n            if(n1 > n2)\\n            {\\n                return 1;\\n            }\\n            else if(n2 > n1)\\n            {\\n                return -1;\\n            }\\n            else{\\n                i++;\\n                j++;\\n            }\\n            \\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1445828,
                "title": "java-solution-0-ms-solution",
                "content": "```\\nclass Solution {\\n    public int compareVersion(String v1, String v2) {\\n        for(int i = 0, j = 0; i < v1.length() || j < v2.length(); i++,j++) {\\n            int num1 = 0, num2 = 0;\\n            while(i < v1.length() && v1.charAt(i) != \\'.\\') {\\n                num1 = (num1 * 10) + v1.charAt(i) - \\'0\\';\\n                i++;\\n            }\\n            while(j < v2.length() && v2.charAt(j) != \\'.\\') {\\n                num2 = (num2 * 10) + v2.charAt(j) - \\'0\\';\\n                j++;\\n            }\\n            if(num1 < num2) return -1;\\n            else if(num1 > num2) return 1;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compareVersion(String v1, String v2) {\\n        for(int i = 0, j = 0; i < v1.length() || j < v2.length(); i++,j++) {\\n            int num1 = 0, num2 = 0;\\n            while(i < v1.length() && v1.charAt(i) != \\'.\\') {\\n                num1 = (num1 * 10) + v1.charAt(i) - \\'0\\';\\n                i++;\\n            }\\n            while(j < v2.length() && v2.charAt(j) != \\'.\\') {\\n                num2 = (num2 * 10) + v2.charAt(j) - \\'0\\';\\n                j++;\\n            }\\n            if(num1 < num2) return -1;\\n            else if(num1 > num2) return 1;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1137544,
                "title": "simple-javascript-solution",
                "content": "```\\nvar compareVersion = function(version1, version2) {\\n    version1 = version1.split(\\'.\\');\\n    version2 = version2.split(\\'.\\');\\n    \\n    let index = 0;\\n    \\n    while (index < version1.length || index < version2.length) {\\n        const num1 = version1[index] ? parseInt(version1[index]) : 0;\\n        const num2 = version2[index] ? parseInt(version2[index]) : 0;\\n        \\n        if (num1 < num2) {\\n            return -1;\\n        } else if (num1 > num2) {\\n            return 1;\\n        } else {\\n            index++;\\n        }\\n    }\\n    \\n    return 0;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar compareVersion = function(version1, version2) {\\n    version1 = version1.split(\\'.\\');\\n    version2 = version2.split(\\'.\\');\\n    \\n    let index = 0;\\n    \\n    while (index < version1.length || index < version2.length) {\\n        const num1 = version1[index] ? parseInt(version1[index]) : 0;\\n        const num2 = version2[index] ? parseInt(version2[index]) : 0;\\n        \\n        if (num1 < num2) {\\n            return -1;\\n        } else if (num1 > num2) {\\n            return 1;\\n        } else {\\n            index++;\\n        }\\n    }\\n    \\n    return 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 838061,
                "title": "c-string-stream-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        istringstream iss1(version1), iss2(version2);\\n        string tmp1, tmp2;\\n        int n1 = 0, n2 = 0;\\n        while (1) {\\n            getline(iss1, tmp1, \\'.\\');\\n            getline(iss2, tmp2, \\'.\\');\\n\\t\\t\\t// if the two strings didn\\'t change, this means that the two streams have come to end\\n            if (tmp1.empty() && tmp2.empty())\\n                break;\\n            n1 = (tmp1.empty()) ? 0 : stoi(tmp1);\\n            n2 = (tmp2.empty()) ? 0 : stoi(tmp2);\\n            if (n1 > n2)\\n                return 1;\\n            else if (n1 < n2)\\n                return -1;\\n\\t\\t\\t// clear the two strings to know which one has changed after reading from the streams\\t\\n            tmp1 = \"\", tmp2 = \"\";\\n        }\\n        return 0;\\n    }\\n};\\n```\\nIf you have any questions, please ask in the comments.\\nIf you like the solution, don\\'t forget to **upvote**.",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        istringstream iss1(version1), iss2(version2);\\n        string tmp1, tmp2;\\n        int n1 = 0, n2 = 0;\\n        while (1) {\\n            getline(iss1, tmp1, \\'.\\');\\n            getline(iss2, tmp2, \\'.\\');\\n\\t\\t\\t// if the two strings didn\\'t change, this means that the two streams have come to end\\n            if (tmp1.empty() && tmp2.empty())\\n                break;\\n            n1 = (tmp1.empty()) ? 0 : stoi(tmp1);\\n            n2 = (tmp2.empty()) ? 0 : stoi(tmp2);\\n            if (n1 > n2)\\n                return 1;\\n            else if (n1 < n2)\\n                return -1;\\n\\t\\t\\t// clear the two strings to know which one has changed after reading from the streams\\t\\n            tmp1 = \"\", tmp2 = \"\";\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 837926,
                "title": "c-compare-version-numbers-0ms-beats-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0, j=0;\\n        while(true){\\n            int total1=0, total2=0;\\n            while( i < version1.size() && version1[i] != \\'.\\' ){\\n                total1+=total1*10 + (version1[i]-48);\\n                i++;\\n            }\\n            while(j < version2.size() && version2[j] != \\'.\\' ){\\n                total2+=total2*10 + (version2[j]-48);\\n                j++;\\n            }\\n            i++; j++;\\n            if(total1 > total2) return 1;\\n            else if(total1 < total2) return -1;\\n            if(i >= version1.size() && j >= version2.size()) break;\\n        }\\n        return 0;\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0, j=0;\\n        while(true){\\n            int total1=0, total2=0;\\n            while( i < version1.size() && version1[i] != \\'.\\' ){\\n                total1+=total1*10 + (version1[i]-48);\\n                i++;\\n            }\\n            while(j < version2.size() && version2[j] != \\'.\\' ){\\n                total2+=total2*10 + (version2[j]-48);\\n                j++;\\n            }\\n            i++; j++;\\n            if(total1 > total2) return 1;\\n            else if(total1 < total2) return -1;\\n            if(i >= version1.size() && j >= version2.size()) break;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 270304,
                "title": "js-top-100-o-max-a-b-time-and-o-1-space",
                "content": "```\\nconst compareVersion = (v1, v2) => {\\n    let i = 0, j = 0, num1 = 0, num2 = 0;\\n    \\n    while (i < v1.length || j < v2.length) {\\n        while (i < v1.length && v1[i] !== \\'.\\') { num1 = num1 * 10 + parseInt(v1[i++]); }\\n        while (j < v2.length && v2[j] !== \\'.\\') { num2 = num2 * 10 + parseInt(v2[j++]); }\\n        \\n        if (num1 < num2) { return -1; }\\n        else if (num1 > num2) { return 1; }\\n        \\n        i++;\\n        j++;\\n        num1 = num2 = 0;\\n    }\\n    \\n    return 0; \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nconst compareVersion = (v1, v2) => {\\n    let i = 0, j = 0, num1 = 0, num2 = 0;\\n    \\n    while (i < v1.length || j < v2.length) {\\n        while (i < v1.length && v1[i] !== \\'.\\') { num1 = num1 * 10 + parseInt(v1[i++]); }\\n        while (j < v2.length && v2[j] !== \\'.\\') { num2 = num2 * 10 + parseInt(v2[j++]); }\\n        \\n        if (num1 < num2) { return -1; }\\n        else if (num1 > num2) { return 1; }\\n        \\n        i++;\\n        j++;\\n        num1 = num2 = 0;\\n    }\\n    \\n    return 0; \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 163879,
                "title": "python-code-beat-100",
                "content": "```\\nclass Solution(object):\\n    def compareVersion(self, version1, version2):\\n        \"\"\"\\n        :type version1: str\\n        :type version2: str\\n        :rtype: int\\n        \"\"\"\\n        v1, v2 = version1.split(\".\"), version2.split(\".\")\\n        maxlen = max(len(v1), len(v2))\\n        v1 += [0] * (maxlen - len(v1))\\n        v2 += [0] * (maxlen - len(v2))\\n        for i in range(maxlen):\\n            if int(v1[i]) >  int(v2[i]):\\n                return 1\\n            elif int(v1[i]) <  int(v2[i]):\\n                return -1\\n        return 0\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def compareVersion(self, version1, version2):\\n        \"\"\"\\n        :type version1: str\\n        :type version2: str\\n        :rtype: int\\n        \"\"\"\\n        v1, v2 = version1.split(\".\"), version2.split(\".\")\\n        maxlen = max(len(v1), len(v2))\\n        v1 += [0] * (maxlen - len(v1))\\n        v2 += [0] * (maxlen - len(v2))\\n        for i in range(maxlen):\\n            if int(v1[i]) >  int(v2[i]):\\n                return 1\\n            elif int(v1[i]) <  int(v2[i]):\\n                return -1\\n        return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 50827,
                "title": "clean-c-solution-0ms-no-split-no-extra-space-no-stream-operation",
                "content": "```\\nint compareVersion(string s1, string s2) {\\n    int n1 = s1.size(), n2 = s2.size();\\n    int p1 = 0, p2 = 0;\\n    while (p1 < n1 || p2 < n2) {\\n        auto v1 = p1 < n1 ? sub_version(s1, p1) : 0;\\n        auto v2 = p2 < n2 ? sub_version(s2, p2) : 0;\\n        if (v1 > v2) return 1;\\n        if (v1 < v2) return -1;\\n    }\\n    return 0;\\n}\\n\\nint sub_version(const string &s, int &pos) {\\n    auto num = 0;\\n    while (pos < s.size() && s[pos] != '.')\\n        num = num * 10 + s[pos++] - '0';\\n    ++pos;\\n    return num;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint compareVersion(string s1, string s2) {\\n    int n1 = s1.size(), n2 = s2.size();\\n    int p1 = 0, p2 = 0;\\n    while (p1 < n1 || p2 < n2) {\\n        auto v1 = p1 < n1 ? sub_version(s1, p1) : 0;\\n        auto v2 = p2 < n2 ? sub_version(s2, p2) : 0;\\n        if (v1 > v2) return 1;\\n        if (v1 < v2) return -1;\\n    }\\n    return 0;\\n}\\n\\nint sub_version(const string &s, int &pos) {\\n    auto num = 0;\\n    while (pos < s.size() && s[pos] != '.')\\n        num = num * 10 + s[pos++] - '0';\\n    ++pos;\\n    return num;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 50836,
                "title": "python-6-lines-encode-and-compare",
                "content": "```\\n    def compareVersion(self, version1, version2):\\n        def encode(version):\\n            vals = [long(v) for v in version.split(\".\")]\\n            while vals and vals[-1] == 0: # get rid of trailing 0s in the array\\n                vals.pop()\\n            return vals\\n        return cmp(encode(version1), encode(version2)) # default comparison of two arrays\\n```",
                "solutionTags": [],
                "code": "```\\n    def compareVersion(self, version1, version2):\\n        def encode(version):\\n            vals = [long(v) for v in version.split(\".\")]\\n            while vals and vals[-1] == 0: # get rid of trailing 0s in the array\\n                vals.pop()\\n            return vals\\n        return cmp(encode(version1), encode(version2)) # default comparison of two arrays\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 50825,
                "title": "java-solution-0ms-beats-96-45",
                "content": "    public int compareVersion(String version1, String version2) {\\n        int i = 0, j = 0, len1 = version1.length(), len2 = version2.length();\\n        char[] c1 = version1.toCharArray(), c2 = version2.toCharArray();\\n        while (i < len1 || j < len2) {\\n            int cur1 = 0, cur2 = 0;\\n            while (i < len1 && c1[i] != '.') cur1 = cur1 * 10 + c1[i++] - '0';\\n            while (j < len2 && c2[j] != '.') cur2 = cur2 * 10 + c2[j++] - '0';\\n            if (cur1 > cur2) return 1;\\n            if (cur1 < cur2) return -1;\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }",
                "solutionTags": [],
                "code": "    public int compareVersion(String version1, String version2) {\\n        int i = 0, j = 0, len1 = version1.length(), len2 = version2.length();\\n        char[] c1 = version1.toCharArray(), c2 = version2.toCharArray();\\n        while (i < len1 || j < len2) {\\n            int cur1 = 0, cur2 = 0;\\n            while (i < len1 && c1[i] != '.') cur1 = cur1 * 10 + c1[i++] - '0';\\n            while (j < len2 && c2[j] != '.') cur2 = cur2 * 10 + c2[j++] - '0';\\n            if (cur1 > cur2) return 1;\\n            if (cur1 < cur2) return -1;\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 50870,
                "title": "my-simple-java-solution",
                "content": "    public int compareVersion(String v1, String v2) {\\n        \\n        String[] va = v1.split(\"\\\\\\\\.\");\\n        String[] vb = v2.split(\"\\\\\\\\.\");\\n\\n        for(int i=0, j=0; i<va.length||j<vb.length; i++,j++){\\n            int a = i<va.length ? Integer.valueOf(va[i]) : 0;\\n            int b = j<vb.length ? Integer.valueOf(vb[j]) : 0;\\n            if(a>b) return 1;\\n            if(a<b) return -1;\\n        }\\n        return 0;\\n    }",
                "solutionTags": [],
                "code": "    public int compareVersion(String v1, String v2) {\\n        \\n        String[] va = v1.split(\"\\\\\\\\.\");\\n        String[] vb = v2.split(\"\\\\\\\\.\");\\n\\n        for(int i=0, j=0; i<va.length||j<vb.length; i++,j++){\\n            int a = i<va.length ? Integer.valueOf(va[i]) : 0;\\n            int b = j<vb.length ? Integer.valueOf(vb[j]) : 0;\\n            if(a>b) return 1;\\n            if(a<b) return -1;\\n        }\\n        return 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 50845,
                "title": "my-0ms-java-solution",
                "content": "    public static int compareVersion(String version1, String version2) {\\n        int l1 = version1.length();\\n        int l2 = version2.length();\\n        int v1 = 0;\\n        int v2 = 0;\\n        \\n        int i1 = 0;\\n        int i2 = 0;\\n        \\n        while (i1 < l1 || i2 < l2){\\n        \\t   \\t\\n        \\twhile (i1 < l1 && version1.charAt(i1)!='.'){\\n            \\tv1 = 10*v1 + (version1.charAt(i1) - '0') ;\\n            \\ti1++;\\n        \\t}\\n        \\t\\n        \\twhile (i2 < l2 && version2.charAt(i2)!='.'){\\n            \\tv2 = 10*v2 + (version2.charAt(i2) - '0') ;\\n            \\ti2++;\\n        \\t}\\n            \\t\\n            if (v1 > v2) return 1;\\n            else if (v1 < v2) return -1 ;\\n            else {\\n                v1 = 0;\\n                v2 = 0;\\n                i1++;\\n                i2++;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n\"Normally\" it runs in only 0ms but sometimes it may run in 1ms (depending on your pc performance), This is a screenshot of my execution time : ![My 0ms java solution][1]\\n\\n\\n  [1]: http://image.noelshack.com/fichiers/2016/24/1465923392-0ms-java.png",
                "solutionTags": [],
                "code": "    public static int compareVersion(String version1, String version2) {\\n        int l1 = version1.length();\\n        int l2 = version2.length();\\n        int v1 = 0;\\n        int v2 = 0;\\n        \\n        int i1 = 0;\\n        int i2 = 0;\\n        \\n        while (i1 < l1 || i2 < l2){\\n        \\t   \\t\\n        \\twhile (i1 < l1 && version1.charAt(i1)!='.'){\\n            \\tv1 = 10*v1 + (version1.charAt(i1) - '0') ;\\n            \\ti1++;\\n        \\t}\\n        \\t\\n        \\twhile (i2 < l2 && version2.charAt(i2)!='.'){\\n            \\tv2 = 10*v2 + (version2.charAt(i2) - '0') ;\\n            \\ti2++;\\n        \\t}\\n            \\t\\n            if (v1 > v2) return 1;\\n            else if (v1 < v2) return -1 ;\\n            else {\\n                v1 = 0;\\n                v2 = 0;\\n                i1++;\\n                i2++;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n\"Normally\" it runs in only 0ms but sometimes it may run in 1ms (depending on your pc performance), This is a screenshot of my execution time : ![My 0ms java solution][1]\\n\\n\\n  [1]: http://image.noelshack.com/fichiers/2016/24/1465923392-0ms-java.png",
                "codeTag": "Unknown"
            },
            {
                "id": 50887,
                "title": "a-easy-understand-c-solution",
                "content": "    class Solution {\\n    public:\\n        int compareVersion(string version1, string version2) {\\n            int len1 = version1.length();\\n            int len2 = version2.length();\\n            int i = 0, j = 0;\\n            string strVer1 = \"\", strVer2 = \"\";\\n            while((i < len1)||(j < len2)) {\\n                while((i < len1)&&(version1[i] != '.')) {\\n                    strVer1 += version1[i];\\n                    i++;\\n                }\\n                while((j < len2)&&(version2[j] != '.')) {\\n                    strVer2 += version2[j];\\n                    j++;\\n                }\\n                if(strVer1 == \"\") {\\n                    if(stoi(strVer2) > 0) return -1;\\n                } else if(strVer2 == \"\") {\\n                    if(stoi(strVer1) > 0) return 1;\\n                } else {\\n                    if(stoi(strVer1) > stoi(strVer2)) return 1;\\n                    else if(stoi(strVer1) < stoi(strVer2)) return -1;\\n                }\\n                strVer1 = \"\";\\n                strVer2 = \"\";\\n                i++;j++;\\n            }\\n            return 0;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        int compareVersion(string version1, string version2) {\\n            int len1 = version1.length();\\n            int len2 = version2.length();\\n            int i = 0, j = 0;\\n            string strVer1 = \"\", strVer2 = \"\";\\n            while((i < len1)||(j < len2)) {\\n                while((i < len1)&&(version1[i] != '.')) {\\n                    strVer1 += version1[i];\\n                    i++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 50878,
                "title": "my-0ms-c-solution-uff0c-easy-to-understand",
                "content": "class Solution {\\n\\npublic:\\n\\n    int compareVersion(string version1, string version2) {\\n        int n1 = 0, n2 = 0;\\n        int i = 0, j = 0;\\n        while(i < version1.size() || j < version2.size()){\\n            while(i < version1.size() && version1[i] != '.'){\\n                n1 = n1 * 10 + (version1[i++] - '0');\\n            }\\n            ++i;\\n            while(j < version2.size() && version2[j] != '.'){\\n                n2 = n2 * 10 + (version2[j++] - '0');\\n            }\\n            ++j;\\n            if(n1 > n2){\\n                return 1;\\n            }else if(n1 < n2){\\n                return -1;\\n            }else{\\n                n1 = 0;\\n                n2 = 0;\\n            }\\n        }\\n    }\\n\\n};",
                "solutionTags": [],
                "code": "class Solution {\\n\\npublic:\\n\\n    int compareVersion(string version1, string version2) {\\n        int n1 = 0, n2 = 0;\\n        int i = 0, j = 0;\\n        while(i < version1.size() || j < version2.size()){\\n            while(i < version1.size() && version1[i] != '.'){\\n                n1 = n1 * 10 + (version1[i++] - '0');\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 50928,
                "title": "java-use-stringtokenizer",
                "content": "    public int compareVersion(String v1, String v2) {\\n        StringTokenizer st1 = new StringTokenizer(v1,\".\");\\n        StringTokenizer st2 = new StringTokenizer(v2,\".\");\\n        \\n        while(st1.hasMoreTokens() || st2.hasMoreTokens()){\\n            int val1 = st1.hasMoreTokens() ? Integer.parseInt(st1.nextToken()) : 0;\\n            int val2 = st2.hasMoreTokens() ? Integer.parseInt(st2.nextToken()) : 0;\\n            \\n            if(val1 > val2)\\n                return 1;\\n            else if(val1 < val2)\\n                return -1;\\n        }\\n        \\n        return 0;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public int compareVersion(String v1, String v2) {\\n        StringTokenizer st1 = new StringTokenizer(v1,\".\");\\n        StringTokenizer st2 = new StringTokenizer(v2,\".\");\\n        \\n        while(st1.hasMoreTokens() || st2.hasMoreTokens()){\\n            int val1 = st1.hasMoreTokens() ? Integer.parseInt(st1.nextToken()) : 0;\\n            int val2 = st2.hasMoreTokens() ? Integer.parseInt(st2.nextToken()) : 0;\\n            \\n            if(val1 > val2)\\n                return 1;\\n            else if(val1 < val2)\\n                return -1;\\n        }\\n        \\n        return 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 50993,
                "title": "my-ruby-solution",
                "content": "    def compare_version(version1, version2)\\n        v1, v2 = version1.split('.'), version2.split('.')\\n        if (temp = v1.size - v2.size) > 0\\n            temp.times do v2 << '0' end\\n        else \\n            (-temp).times do v1 << '0' end\\n        end\\n        v1.size.times do |i|\\n            temp = v1[i].to_i - v2[i].to_i\\n            next if temp == 0\\n            return temp > 0 ? 1 : -1\\n        end\\n        0\\n    end",
                "solutionTags": [],
                "code": "    def compare_version(version1, version2)\\n        v1, v2 = version1.split('.'), version2.split('.')\\n        if (temp = v1.size - v2.size) > 0\\n            temp.times do v2 << '0' end\\n        else \\n            (-temp).times do v1 << '0' end\\n        end\\n        v1.size.times do |i|\\n            temp = v1[i].to_i - v2[i].to_i\\n            next if temp == 0\\n            return temp > 0 ? 1 : -1\\n        end\\n        0\\n    end",
                "codeTag": "Python3"
            },
            {
                "id": 51009,
                "title": "my-c-short-0ms-colution",
                "content": "    class Solution {\\n    public:\\n        int compareVersion(string version1, string version2) {\\n            int n = version1.size(), m = version2.size();\\n            for (int i = 0, j = 0; i < n || j < m; i++, j++) {\\n                size_t p = 0;\\n                int a = ((i >= n) ? 0 : stoi(version1.substr(i), &p));\\n                i += p;\\n                int b = ((j >= m) ? 0 : stoi(version2.substr(j), &p));\\n                j += p;\\n                if (a > b) return 1;\\n                if (a < b) return -1;\\n            }\\n            return 0;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int compareVersion(string version1, string version2) {\\n            int n = version1.size(), m = version2.size();\\n            for (int i = 0, j = 0; i < n || j < m; i++, j++) {\\n                size_t p = 0;\\n                int a = ((i >= n) ? 0 : stoi(version1.substr(i), &p));\\n                i += p;\\n                int b = ((j >= m) ? 0 : stoi(version2.substr(j), &p));\\n                j += p;\\n                if (a > b) return 1;\\n                if (a < b) return -1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 50917,
                "title": "clean-python-with-izip-longest-from-itertools",
                "content": "I don't get to use python's nifty for : else: construct often. This seems a perfect place to use it.\\nUpdate : (else removed! As pointed out it seems useless ;)\\n\\n    from itertools import izip_longest\\n    class Solution:\\n        # @param {string} version1\\n        # @param {string} version2\\n        # @return {integer}\\n        def compareVersion(self, version1, version2):\\n            v1 = (int(n) for n in version1.split('.'))\\n            v2 = (int(n) for n in version2.split('.'))\\n            for n1, n2 in izip_longest(v1, v2, fillvalue=0):\\n                if n1> n2:\\n                    return 1\\n                elif n1< n2:\\n                    return -1\\n            return 0",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n        # @param {string}",
                "codeTag": "Java"
            },
            {
                "id": 50968,
                "title": "share-my-ac-python-solution",
                "content": "see the trick of how to handle 0.\\n\\n\\n\\n    class Solution:\\n    # @param version1, a string\\n    # @param version2, a string\\n    # @return an integer\\n    def compareVersion(self, version1, version2):\\n        num1= version1.split('.');\\n        num2= version2.split('.');\\n        while(len(num1) or len(num2)):\\n            if(len(num1)==0): num1=[0];\\n            elif(len(num2)==0): num2=[0];\\n            else:\\n                i1= int(num1[0])\\n                i2= int(num2[0]);\\n                if(i1<i2):\\n                    return -1;\\n                elif(i1>i2):\\n                    return 1;\\n                else:\\n                    num1=num1[1:]\\n                    num2=num2[1:]\\n        return 0;",
                "solutionTags": [
                    "Python"
                ],
                "code": "see the trick of how to handle 0.\\n\\n\\n\\n    class Solution:\\n    # @param version1, a string\\n    # @param version2, a string\\n    # @return an integer\\n    def compareVersion(self, version1, version2):\\n        num1= version1.split('.');\\n        num2= version2.split('.');\\n        while(len(num1) or len(num2)):\\n            if(len(num1)==0): num1=[0];\\n            elif(len(num2)==0): num2=[0];\\n            else:\\n                i1= int(num1[0])\\n                i2= int(num2[0]);\\n                if(i1<i2):\\n                    return -1;\\n                elif(i1>i2):\\n                    return 1;\\n                else:\\n                    num1=num1[1:]\\n                    num2=num2[1:]\\n        return 0;",
                "codeTag": "Java"
            },
            {
                "id": 51055,
                "title": "my-efficient-java-solution",
                "content": "    public class Solution {\\n    \\n        public int compareVersion(String version1, String version2) {\\n            String []num1 = version1.split(\"\\\\\\\\.\");\\n            String []num2 = version2.split(\"\\\\\\\\.\");\\n            int i=0,j=0;\\n            for (;i<=num1.length-1&&j<=num2.length-1;i++,j++)\\n                if (Integer.parseInt(num1[i])>Integer.parseInt(num2[j])) return 1;\\n                else if (Integer.parseInt(num1[i])<Integer.parseInt(num2[j])) return -1; \\n            for(;i<=num1.length-1;i++) \\n                if (Integer.parseInt(num1[i])!=0) return 1;\\n            for(;j<=num2.length-1;j++) \\n                if (Integer.parseInt(num2[j])!=0) return -1;\\n            return 0;\\n    }\\n    }\\n\\nAfter splitting i checked if any of the digits in the head is greater than the other. If not then tries to remove trailing zeroes in versions . If the version number doesn't contain zeroes it returns the version number as highest.",
                "solutionTags": [],
                "code": "class Solution {\\n    \\n        public int compareVersion(String version1, String version2) {\\n            String []num1 = version1.split(\"\\\\\\\\.\");\\n            String []num2 = version2.split(\"\\\\\\\\.\");\\n            int i=0,j=0;\\n            for (;i<=num1.length-1&&j<=num2.length-1;i++,j++)\\n                if (Integer.parseInt(num1[i])>Integer.parseInt(num2[j])) return 1;\\n                else if (Integer.parseInt(num1[i])<Integer.parseInt(num2[j])) return -1; \\n            for(;i<=num1.length-1;i++) \\n                if (Integer.parseInt(num1[i])!=0) return 1;\\n            for(;j<=num2.length-1;j++) \\n                if (Integer.parseInt(num2[j])!=0) return -1;\\n            return 0;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 51072,
                "title": "a-straight-forward-iterative-o-n-solution",
                "content": "    int compareVersion(string version1, string version2) {\\n        int m = version1.size(), n = version2.size();\\n        int i = 0, j = 0;\\n        \\n        while (i < m && j < n) {\\n            int s1 = i;\\n            while(i < m && version1[i] != '.') ++i;\\n            string str1 = version1.substr(s1, i - s1);\\n            ++i;\\n            \\n            int s2 = j;\\n            while(j < n && version2[j] != '.') ++j;\\n            string str2 = version2.substr(s2, j - s2);\\n            ++j;\\n            \\n            int val1 = atoi(str1.c_str());\\n            int val2 = atoi(str2.c_str());\\n            if (val1 > val2) return 1;\\n            else if (val1 < val2) return -1;\\n        }\\n        \\n        while(i < m) {\\n            if (version1[i] != '.' && version1[i] != '0') return 1;\\n            ++i;\\n        }\\n        \\n        while(j < n) {\\n            if (version2[j] != '.' && version2[j] != '0') return -1;\\n            ++j;\\n        }\\n        \\n        return 0;\\n    }",
                "solutionTags": [],
                "code": "    int compareVersion(string version1, string version2) {\\n        int m = version1.size(), n = version2.size();\\n        int i = 0, j = 0;\\n        \\n        while (i < m && j < n) {\\n            int s1 = i;\\n            while(i < m && version1[i] != '.') ++i;\\n            string str1 = version1.substr(s1, i - s1);\\n            ++i;\\n            \\n            int s2 = j;\\n            while(j < n && version2[j] != '.') ++j;\\n            string str2 = version2.substr(s2, j - s2);\\n            ++j;\\n            \\n            int val1 = atoi(str1.c_str());\\n            int val2 = atoi(str2.c_str());\\n            if (val1 > val2) return 1;\\n            else if (val1 < val2) return -1;\\n        }\\n        \\n        while(i < m) {\\n            if (version1[i] != '.' && version1[i] != '0') return 1;\\n            ++i;\\n        }\\n        \\n        while(j < n) {\\n            if (version2[j] != '.' && version2[j] != '0') return -1;\\n            ++j;\\n        }\\n        \\n        return 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 51094,
                "title": "problem-description-for-python-code",
                "content": "Problem description in the code below has some conflict with the original one.\\n\\n    class Solution:\\n    # @param a, a string\\n    # @param b, a string\\n    # @return a boolean\\n\\nAt first time, I was confused about 'return 0,-1,1' or 'return 'true or false'.......",
                "solutionTags": [],
                "code": "Problem description in the code below has some conflict with the original one.\\n\\n    class Solution:\\n    # @param a, a string\\n    # @param b, a string\\n    # @return a boolean\\n\\nAt first time, I was confused about 'return 0,-1,1' or 'return 'true or false'.......",
                "codeTag": "Java"
            },
            {
                "id": 51008,
                "title": "concise-python-code",
                "content": "it takes advantage of izip_longest, if library function is not allowed, the same idea can still be easily coded.\\n\\n\\n    \\n    def compareVersion(self, version1, version2):\\n        for i, j in itertools.izip_longest(version1.split('.'), version2.split('.'), fillvalue='0'):\\n            i, j = int(i), int(j)\\n            if i < j:\\n                return -1\\n            if i > j:\\n                return 1\\n        return 0",
                "solutionTags": [
                    "Python"
                ],
                "code": "it takes advantage of izip_longest, if library function is not allowed, the same idea can still be easily coded.\\n\\n\\n    \\n    def compareVersion(self, version1, version2):\\n        for i, j in itertools.izip_longest(version1.split('.'), version2.split('.'), fillvalue='0'):\\n            i, j = int(i), int(j)\\n            if i < j:\\n                return -1\\n            if i > j:\\n                return 1\\n        return 0",
                "codeTag": "Python3"
            },
            {
                "id": 51102,
                "title": "a-concise-c-version",
                "content": "    class Solution {\\n    public:\\n        int compareVersion(string version1, string version2) {\\n            int pos1 = 0, pos2=0,token1, token2;\\n            string delimiter = \".\";\\n            pos1 =version1.find(delimiter);\\n            pos2 =version2.find(delimiter);\\n            if(pos1 >=0 ) token1 = stoi(version1.substr(0,pos1));\\n            else token1 = version1.empty()?0:stoi(version1);\\n            if(pos2 >=0 ) token2 = stoi(version2.substr(0,pos2));\\n            else token2 = version2.empty()?0:stoi(version2);\\n            int diff = token1-token2;\\n            if(diff==0){\\n                if(pos1<0 && pos2<0) \\n                    return 0;\\n                version1= pos1>=0?version1.erase(0, pos1+1):\"0\";\\n                version2= pos2>=0?version2.erase(0, pos2+1):\"0\";  \\n                return compareVersion(version1, version2);\\n            }\\n            else return diff>0?1:-1;\\n        }\\n    };\\n\\n\\n\\naround 20 lines.",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int compareVersion(string version1, string version2) {\\n            int pos1 = 0, pos2=0,token1, token2;\\n            string delimiter = \".\";\\n            pos1 =version1.find(delimiter);\\n            pos2 =version2.find(delimiter);\\n            if(pos1 >=0 ) token1 = stoi(version1.substr(0,pos1));\\n            else token1 = version1.empty()?0:stoi(version1);\\n            if(pos2 >=0 ) token2 = stoi(version2.substr(0,pos2));\\n            else token2 = version2.empty()?0:stoi(version2);\\n            int diff = token1-token2;\\n            if(diff==0){\\n                if(pos1<0 && pos2<0) \\n                    return 0;\\n                version1= pos1>=0?version1.erase(0, pos1+1):\"0\";\\n                version2= pos2>=0?version2.erase(0, pos2+1):\"0\";  \\n                return compareVersion(version1, version2);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4036063,
                "title": "c-0ms-solution",
                "content": "We take 2 vectors and store all the numbers between \".\" in vector. We can use a single while loop for this and use i and j variables to keep track of their length. If it exceeds the length , 0 will be pushed to the vector which makes the job easy while comparing both the vectors at the end.\\nSince both the vectors will be of equal size, simply run a for loop and check for the given condition at each stage.\\n\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int n=version1.length(),m=version2.length();\\n        vector<int>v1,v2;\\n        int i=0,j=0;\\n        while(i<n || j<m)\\n        {\\n            int num=0;\\n            while(i<n && version1[i]!=\\'.\\')\\n            {\\n                num=num*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            i++;\\n            v1.push_back(num);\\n            num=0;\\n            while(j<m && version2[j]!=\\'.\\')\\n            {\\n                num=num*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            j++;\\n            v2.push_back(num);\\n        }\\n        \\n        for(i=0;i<v1.size();i++)\\n        {\\n            if(v1[i]<v2[i])\\n                return -1;\\n            else if(v1[i]>v2[i])\\n                return 1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int n=version1.length(),m=version2.length();\\n        vector<int>v1,v2;\\n        int i=0,j=0;\\n        while(i<n || j<m)\\n        {\\n            int num=0;\\n            while(i<n && version1[i]!=\\'.\\')\\n            {\\n                num=num*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            i++;\\n            v1.push_back(num);\\n            num=0;\\n            while(j<m && version2[j]!=\\'.\\')\\n            {\\n                num=num*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            j++;\\n            v2.push_back(num);\\n        }\\n        \\n        for(i=0;i<v1.size();i++)\\n        {\\n            if(v1[i]<v2[i])\\n                return -1;\\n            else if(v1[i]>v2[i])\\n                return 1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3773254,
                "title": "c-beats-100-easy-fast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        vector<int> v1, v2;\\n        int i = 0, j = 0;\\n        int n1 = version1.size(), n2 = version2.size();\\n            while (i < n1 || j < n2) {\\n        int num1 = 0, num2 = 0;\\n\\n        while (i < n1 && version1[i] != \\'.\\') {\\n            num1 = num1 * 10 + (version1[i] - \\'0\\');\\n            i++;\\n        }\\n        while (j < n2 && version2[j] != \\'.\\') {\\n            num2 = num2 * 10 + (version2[j] - \\'0\\');\\n            j++;\\n        }\\n\\n        if (num1 < num2) return -1;\\n        if (num1 > num2) return 1;\\n\\n        i++; \\n        j++; \\n\\n    }\\n\\n    return 0;\\n}\\n  \\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        vector<int> v1, v2;\\n        int i = 0, j = 0;\\n        int n1 = version1.size(), n2 = version2.size();\\n            while (i < n1 || j < n2) {\\n        int num1 = 0, num2 = 0;\\n\\n        while (i < n1 && version1[i] != \\'.\\') {\\n            num1 = num1 * 10 + (version1[i] - \\'0\\');\\n            i++;\\n        }\\n        while (j < n2 && version2[j] != \\'.\\') {\\n            num2 = num2 * 10 + (version2[j] - \\'0\\');\\n            j++;\\n        }\\n\\n        if (num1 < num2) return -1;\\n        if (num1 > num2) return 1;\\n\\n        i++; \\n        j++; \\n\\n    }\\n\\n    return 0;\\n}\\n  \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3496231,
                "title": "c-solution-100-fast",
                "content": "# Complexity\\n- Time complexity: $$O(|v1|+|v2|)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0, j=0;\\n        int vs1= version1.size(), vs2=version2.size();\\n        while (true){\\n            int v1=0, v2=0;\\n            while (i<vs1 && version1[i]!=\\'.\\'){\\n                v1*=10;\\n                v1+= (version1[i]-\\'0\\');\\n                i++;\\n            }\\n            while (j<vs2 && version2[j]!=\\'.\\'){\\n                v2*=10;\\n                v2+= (version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if (v1<v2)return -1;\\n            if (v1>v2)return 1;\\n            if (i>=vs1 && j>=vs2)break; //return 0;\\n            i++; j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0, j=0;\\n        int vs1= version1.size(), vs2=version2.size();\\n        while (true){\\n            int v1=0, v2=0;\\n            while (i<vs1 && version1[i]!=\\'.\\'){\\n                v1*=10;\\n                v1+= (version1[i]-\\'0\\');\\n                i++;\\n            }\\n            while (j<vs2 && version2[j]!=\\'.\\'){\\n                v2*=10;\\n                v2+= (version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if (v1<v2)return -1;\\n            if (v1>v2)return 1;\\n            if (i>=vs1 && j>=vs2)break; //return 0;\\n            i++; j++;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3147766,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int compareVersion(String v1, String v2) \\n    {\\n     String s1[]=v1.split(\"\\\\\\\\.\");\\n     String s2[]=v2.split(\"\\\\\\\\.\");\\n        int len=Math.max(s1.length,s2.length);\\n     int val1[]=new int[len];\\n        int val2[]=new int[len];\\n        for(int i=0;i<s1.length;i++)\\n            val1[i]=Integer.parseInt(s1[i]);\\n        for(int i=0;i<s2.length;i++)\\n            val2[i]=Integer.parseInt(s2[i]);\\n        for(int i=0;i<len;i++)\\n        {\\n            if(val1[i]>val2[i])\\n                return 1;\\n            if(val1[i]<val2[i])\\n                return -1;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compareVersion(String v1, String v2) \\n    {\\n     String s1[]=v1.split(\"\\\\\\\\.\");\\n     String s2[]=v2.split(\"\\\\\\\\.\");\\n        int len=Math.max(s1.length,s2.length);\\n     int val1[]=new int[len];\\n        int val2[]=new int[len];\\n        for(int i=0;i<s1.length;i++)\\n            val1[i]=Integer.parseInt(s1[i]);\\n        for(int i=0;i<s2.length;i++)\\n            val2[i]=Integer.parseInt(s2[i]);\\n        for(int i=0;i<len;i++)\\n        {\\n            if(val1[i]>val2[i])\\n                return 1;\\n            if(val1[i]<val2[i])\\n                return -1;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2912748,
                "title": "shortest-cleanest-rust-solution-0ms-mutation-free-vector-free-solution",
                "content": "# Approach\\n\\nParse the version strings without collecting into a `Vec`, without modifying the shorter (fewer revisions) version to match the length of the longer, and without mutating any strings.\\n\\n\\n# Complexity\\n- Time complexity:\\n$$O(min(m, n))$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn compare_version(version1: String, version2: String) -> i32 {\\n        let mut r1 = version1.split(\\'.\\').map(|s| s.parse().unwrap());\\n        let mut r2 = version2.split(\\'.\\').map(|s| s.parse().unwrap());\\n\\n        loop {\\n            match (r1.next(), r2.next()) {\\n                (Some(r1), r2) if r1 > r2.unwrap_or(0) => return 1,\\n                (r1, Some(r2)) if r2 > r1.unwrap_or(0) => return -1,\\n                (None, None) => return 0,\\n                _ => continue,\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn compare_version(version1: String, version2: String) -> i32 {\\n        let mut r1 = version1.split(\\'.\\').map(|s| s.parse().unwrap());\\n        let mut r2 = version2.split(\\'.\\').map(|s| s.parse().unwrap());\\n\\n        loop {\\n            match (r1.next(), r2.next()) {\\n                (Some(r1), r2) if r1 > r2.unwrap_or(0) => return 1,\\n                (r1, Some(r2)) if r2 > r1.unwrap_or(0) => return -1,\\n                (None, None) => return 0,\\n                _ => continue,\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2723299,
                "title": "c-java-0-ms-100-00-faster-easy-solution",
                "content": "````\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        vector<int> v1, v2;\\n        long long ans = 0;\\n        for(int i=0;i<version1.size();i++){\\n            if(version1[i]==\\'.\\'){\\n                v1.push_back(ans);\\n                ans = 0;\\n            }\\n            else{\\n                ans = ans*10 + (version1[i]-\\'0\\');\\n            }\\n        }\\n        v1.push_back(ans);\\n        ans = 0;\\n        for(int i=0;i<version2.size();i++){\\n            if(version2[i]==\\'.\\'){\\n                v2.push_back(ans);\\n                ans = 0;\\n            }\\n            else{\\n                ans = ans*10 + (version2[i]-\\'0\\');\\n            }\\n        }\\n        v2.push_back(ans);\\n        \\n        if(v1.size()<v2.size()){\\n            while(v1.size()!=v2.size()) v1.push_back(0);\\n        }\\n        else{\\n            while(v1.size()!=v2.size()) v2.push_back(0);\\n        }\\n        \\n        for(int i=0;i<v1.size();i++){\\n            if(v1[i]<v2[i]) return -1;\\n            if(v1[i]>v2[i]) return 1;\\n        }\\n        return 0;\\n    }\\n};\\n````",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C"
                ],
                "code": "````\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        vector<int> v1, v2;\\n        long long ans = 0;\\n        for(int i=0;i<version1.size();i++){\\n            if(version1[i]==\\'.\\'){\\n                v1.push_back(ans);\\n                ans = 0;\\n            }\\n            else{\\n                ans = ans*10 + (version1[i]-\\'0\\');\\n            }\\n        }\\n        v1.push_back(ans);\\n        ans = 0;\\n        for(int i=0;i<version2.size();i++){\\n            if(version2[i]==\\'.\\'){\\n                v2.push_back(ans);\\n                ans = 0;\\n            }\\n            else{\\n                ans = ans*10 + (version2[i]-\\'0\\');\\n            }\\n        }\\n        v2.push_back(ans);\\n        \\n        if(v1.size()<v2.size()){\\n            while(v1.size()!=v2.size()) v1.push_back(0);\\n        }\\n        else{\\n            while(v1.size()!=v2.size()) v2.push_back(0);\\n        }\\n        \\n        for(int i=0;i<v1.size();i++){\\n            if(v1[i]<v2[i]) return -1;\\n            if(v1[i]>v2[i]) return 1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2665736,
                "title": "c-easy-100-beginner-friendly",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int n1=version1.length();\\n        int n2=version2.length();\\n        int a=0,b=0;\\n        \\n        vector<int> v1;\\n        vector<int> v2;\\n        \\n        string temp1=\"\",temp2=\"\";\\n        \\n        while(a<n1){\\n            if(version1[a]!=\\'.\\'){\\n                temp1=temp1+version1[a];\\n                \\n            }else{\\n                int val=stoi(temp1);\\n                v1.push_back(val);\\n                temp1=\"\";\\n            }\\n            a++;\\n        }\\n        int val=stoi(temp1);\\n        v1.push_back(val);\\n        temp1=\"\";\\n        \\n        while(b<n2){\\n            if(version2[b]!=\\'.\\'){\\n                temp2=temp2+version2[b];\\n                \\n            }else{\\n                int val=stoi(temp2);\\n                v2.push_back(val);\\n                temp2=\"\";\\n            }\\n            b++;\\n        }\\n        val=stoi(temp2);\\n        v2.push_back(val);\\n        temp2=\"\";\\n        \\n        n1=v1.size();\\n        n2=v2.size();\\n        a=0,b=0;\\n        \\n        while(a<n1 && b<n2){\\n            if(v1[a]<v2[b]) return -1;\\n            else if(v1[a]>v2[b]) return 1;\\n            \\n            a++;b++;\\n            \\n        }\\n        \\n        while(a<n1){\\n            if(v1[a]>0) return 1;\\n            a++;\\n        }\\n        while(b<n2){\\n            if(v2[b]>0) return -1;\\n            b++;\\n        }\\n        \\n        return 0;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int n1=version1.length();\\n        int n2=version2.length();\\n        int a=0,b=0;\\n        \\n        vector<int> v1;\\n        vector<int> v2;\\n        \\n        string temp1=\"\",temp2=\"\";\\n        \\n        while(a<n1){\\n            if(version1[a]!=\\'.\\'){\\n                temp1=temp1+version1[a];\\n                \\n            }else{\\n                int val=stoi(temp1);\\n                v1.push_back(val);\\n                temp1=\"\";\\n            }\\n            a++;\\n        }\\n        int val=stoi(temp1);\\n        v1.push_back(val);\\n        temp1=\"\";\\n        \\n        while(b<n2){\\n            if(version2[b]!=\\'.\\'){\\n                temp2=temp2+version2[b];\\n                \\n            }else{\\n                int val=stoi(temp2);\\n                v2.push_back(val);\\n                temp2=\"\";\\n            }\\n            b++;\\n        }\\n        val=stoi(temp2);\\n        v2.push_back(val);\\n        temp2=\"\";\\n        \\n        n1=v1.size();\\n        n2=v2.size();\\n        a=0,b=0;\\n        \\n        while(a<n1 && b<n2){\\n            if(v1[a]<v2[b]) return -1;\\n            else if(v1[a]>v2[b]) return 1;\\n            \\n            a++;b++;\\n            \\n        }\\n        \\n        while(a<n1){\\n            if(v1[a]>0) return 1;\\n            a++;\\n        }\\n        while(b<n2){\\n            if(v2[b]>0) return -1;\\n            b++;\\n        }\\n        \\n        return 0;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2409734,
                "title": "simple-java-solution-0-ms-100-00",
                "content": "```\\nclass Solution {\\n    public int compareVersion(int pos1, int pos2, String version1, String version2){\\n        if(pos1 >= version1.length() && pos2 >= version2.length()){\\n            return 0;\\n        }\\n        \\n        int version1Value = 0, version2Value = 0;\\n        while(pos1 < version1.length() && version1.charAt(pos1) != \\'.\\'){\\n            version1Value *= 10;\\n            version1Value += (int) version1.charAt(pos1) - (int) \\'0\\';\\n            ++pos1;\\n        }\\n        while(pos2 < version2.length() && version2.charAt(pos2) != \\'.\\'){\\n            version2Value *= 10;\\n            version2Value += (int) version2.charAt(pos2) - (int) \\'0\\';\\n            ++pos2;\\n        }\\n        return version1Value == version2Value ? compareVersion(pos1 + 1, pos2 + 1, version1, version2) : version1Value > version2Value ? 1 : -1;\\n    }\\n    \\n    public int compareVersion(String version1, String version2) {\\n        return compareVersion(0, 0, version1, version2);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int compareVersion(int pos1, int pos2, String version1, String version2){\\n        if(pos1 >= version1.length() && pos2 >= version2.length()){\\n            return 0;\\n        }\\n        \\n        int version1Value = 0, version2Value = 0;\\n        while(pos1 < version1.length() && version1.charAt(pos1) != \\'.\\'){\\n            version1Value *= 10;\\n            version1Value += (int) version1.charAt(pos1) - (int) \\'0\\';\\n            ++pos1;\\n        }\\n        while(pos2 < version2.length() && version2.charAt(pos2) != \\'.\\'){\\n            version2Value *= 10;\\n            version2Value += (int) version2.charAt(pos2) - (int) \\'0\\';\\n            ++pos2;\\n        }\\n        return version1Value == version2Value ? compareVersion(pos1 + 1, pos2 + 1, version1, version2) : version1Value > version2Value ? 1 : -1;\\n    }\\n    \\n    public int compareVersion(String version1, String version2) {\\n        return compareVersion(0, 0, version1, version2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2305436,
                "title": "easy-c-two-pointers-0ms-faster-than-100-c",
                "content": "\\n\\t\\tint string_to_int(string &str){\\n        int n=str.length();\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum=sum*10 + (str[i]-\\'0\\');\\n        }\\n        return sum;\\n    }\\n    int compareVersion(string version1, string version2) {\\n        int n=version1.length();\\n        int m=version2.length();\\n        int i=0,j=0;\\n        string v1=\"\",v2=\"\";\\n        while(i<n || j<m){\\n            while(i<n && version1[i]!=\\'.\\'){\\n                v1+=version1[i];\\n                i++;\\n            }\\n            while(j<m && version2[j]!=\\'.\\'){\\n                v2+=version2[j];\\n                j++;\\n            }\\n            //cout<<v1<<\" \"<<v2<<endl;;\\n            int t1=string_to_int(v1);\\n            int t2=string_to_int(v2);\\n            //cout<<t1<<\" \"<<t2<<endl;;\\n            if(t1<t2)\\n                return -1;\\n            else if(t1>t2)\\n                return 1;\\n            v1=\"\";\\n            v2=\"\";\\n            i++,j++;\\n        }\\n        return 0;\\n    }",
                "solutionTags": [],
                "code": "\\n\\t\\tint string_to_int(string &str){\\n        int n=str.length();\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum=sum*10 + (str[i]-\\'0\\');\\n        }\\n        return sum;\\n    }\\n    int compareVersion(string version1, string version2) {\\n        int n=version1.length();\\n        int m=version2.length();\\n        int i=0,j=0;\\n        string v1=\"\",v2=\"\";\\n        while(i<n || j<m){\\n            while(i<n && version1[i]!=\\'.\\'){\\n                v1+=version1[i];\\n                i++;\\n            }\\n            while(j<m && version2[j]!=\\'.\\'){\\n                v2+=version2[j];\\n                j++;\\n            }\\n            //cout<<v1<<\" \"<<v2<<endl;;\\n            int t1=string_to_int(v1);\\n            int t2=string_to_int(v2);\\n            //cout<<t1<<\" \"<<t2<<endl;;\\n            if(t1<t2)\\n                return -1;\\n            else if(t1>t2)\\n                return 1;\\n            v1=\"\";\\n            v2=\"\";\\n            i++,j++;\\n        }\\n        return 0;\\n    }",
                "codeTag": "C++"
            },
            {
                "id": 2093288,
                "title": "python3-easy-o-n-time-solution",
                "content": "```\\n\\'\\'\\' \\nclass Solution:\\n    def compareVersion(self, v1: str, v2: str) -> int:\\n        i = 0\\n        j = 0\\n        while i < len(v1) or j < len(v2):\\n            n1 = 0\\n            k = i\\n            if k < len(v1):\\n                while k < len(v1) and v1[k] != \\'.\\':\\n                    k += 1\\n                n1 = int(v1[i:k])\\n            i = k + 1\\n            \\n            n2 = 0\\n            k = j \\n            if k < len(v2):\\n                while k < len(v2) and v2[k] != \\'.\\':\\n                    k += 1\\n                n2 = int(v2[j:k])\\n            j = k + 1\\n            \\n            if n1 < n2: return -1\\n            if n1 > n2: return 1\\n        \\n        return 0\\n\\n# Time: O(N^2)\\n# Space: O(1)\\n\\'\\'\\'\\n\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        v1 = collections.deque(version1.split(\".\"))\\n        v2 = collections.deque(version2.split(\".\"))\\n        \\n        while v1 or v2:\\n            v1_val = 0\\n            v2_val = 0\\n            if v1: v1_val = int(v1.popleft())\\n            if v2: v2_val = int(v2.popleft())\\n            \\n            if v1_val > v2_val: return 1\\n            if v1_val < v2_val: return -1\\n            \\n        return 0\\n    \\n# Time: O(N)  ; as pop from deque is constant time\\n# Space: O(N) ; for making v1 and v2\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Queue"
                ],
                "code": "```\\n\\'\\'\\' \\nclass Solution:\\n    def compareVersion(self, v1: str, v2: str) -> int:\\n        i = 0\\n        j = 0\\n        while i < len(v1) or j < len(v2):\\n            n1 = 0\\n            k = i\\n            if k < len(v1):\\n                while k < len(v1) and v1[k] != \\'.\\':\\n                    k += 1\\n                n1 = int(v1[i:k])\\n            i = k + 1\\n            \\n            n2 = 0\\n            k = j \\n            if k < len(v2):\\n                while k < len(v2) and v2[k] != \\'.\\':\\n                    k += 1\\n                n2 = int(v2[j:k])\\n            j = k + 1\\n            \\n            if n1 < n2: return -1\\n            if n1 > n2: return 1\\n        \\n        return 0\\n\\n# Time: O(N^2)\\n# Space: O(1)\\n\\'\\'\\'\\n\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        v1 = collections.deque(version1.split(\".\"))\\n        v2 = collections.deque(version2.split(\".\"))\\n        \\n        while v1 or v2:\\n            v1_val = 0\\n            v2_val = 0\\n            if v1: v1_val = int(v1.popleft())\\n            if v2: v2_val = int(v2.popleft())\\n            \\n            if v1_val > v2_val: return 1\\n            if v1_val < v2_val: return -1\\n            \\n        return 0\\n    \\n# Time: O(N)  ; as pop from deque is constant time\\n# Space: O(N) ; for making v1 and v2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2023110,
                "title": "python-solution",
                "content": "```\\ndef compareVersion(self, version1: str, version2: str) -> int:\\n\\tsplitted1 = version1.split(\\'.\\')\\n\\tsplitted2 = version2.split(\\'.\\')\\n\\tfor i in range(len(splitted1)):\\n\\t\\tsplitted1[i] = int(splitted1[i])\\n\\tfor i in range(len(splitted2)):\\n\\t\\tsplitted2[i] = int(splitted2[i])\\n\\tlength = min(len(splitted1), len(splitted2))\\n\\tfor i in range(length):\\n\\t\\tif splitted1[i] < splitted2[i]:\\n\\t\\t\\treturn -1\\n\\t\\tif splitted1[i] > splitted2[i]:\\n\\t\\t\\treturn 1\\n\\tif sum(splitted1) < sum(splitted2):\\n\\t\\treturn -1\\n\\tif sum(splitted1) > sum(splitted2):\\n\\t\\treturn 1\\n\\treturn 0",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef compareVersion(self, version1: str, version2: str) -> int:\\n\\tsplitted1 = version1.split(\\'.\\')\\n\\tsplitted2 = version2.split(\\'.\\')\\n\\tfor i in range(len(splitted1)):\\n\\t\\tsplitted1[i] = int(splitted1[i])\\n\\tfor i in range(len(splitted2)):\\n\\t\\tsplitted2[i] = int(splitted2[i])\\n\\tlength = min(len(splitted1), len(splitted2))\\n\\tfor i in range(length):\\n\\t\\tif splitted1[i] < splitted2[i]:\\n\\t\\t\\treturn -1\\n\\t\\tif splitted1[i] > splitted2[i]:\\n\\t\\t\\treturn 1\\n\\tif sum(splitted1) < sum(splitted2):\\n\\t\\treturn -1\\n\\tif sum(splitted1) > sum(splitted2):\\n\\t\\treturn 1\\n\\treturn 0",
                "codeTag": "Python3"
            },
            {
                "id": 1800578,
                "title": "compare-version-numbers",
                "content": "```\\nclass Solution {\\npublic:\\n    string removeZero(string &str)\\n{\\n    \\n    int i = 0;\\n    while (str[i] == \\'0\\')\\n       i++;\\n  \\n    \\n    str.erase(0, i);\\n  \\n    return str;\\n}\\n    int compareVersion(string version1, string version2) {\\n        int n1=version1.length();\\n        int n2=version2.length();\\n        int i=0;\\n        int j=0;\\n        while(n1!=0 || n2!=0)\\n        {\\n          string f1=\"\";\\n          string f2=\"\";\\n          while(version1[i]!=\\'.\\' && n1!=0)\\n          {\\n              f1+=version1[i];\\n              n1--;\\n              i++;\\n          }\\n          if(i!=version1.length() && version1[i]==\\'.\\') {n1--;i++;}\\n          while(version2[j]!=\\'.\\'&& n2!=0)\\n          {\\n              f2+=version2[j];\\n              n2--;\\n              j++;\\n          }\\n            if(j!=version2.length() && version2[j]==\\'.\\') {n2--;j++;}\\n            removeZero(f1);\\n            removeZero(f2);\\n            cout<<f1<<\" \"<<f2<<endl;\\n            stringstream g1(f1);\\n            stringstream g2(f2);\\n            int x1 = 0;\\n            int x2=0;\\n            g1 >> x1;\\n            g2 >> x2;\\n            if(x1==x2)continue;\\n            else if(x1<x2)return -1;\\n            else return 1;\\n            \\n            \\n        }\\n        \\n        return 0;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string removeZero(string &str)\\n{\\n    \\n    int i = 0;\\n    while (str[i] == \\'0\\')\\n       i++;\\n  \\n    \\n    str.erase(0, i);\\n  \\n    return str;\\n}\\n    int compareVersion(string version1, string version2) {\\n        int n1=version1.length();\\n        int n2=version2.length();\\n        int i=0;\\n        int j=0;\\n        while(n1!=0 || n2!=0)\\n        {\\n          string f1=\"\";\\n          string f2=\"\";\\n          while(version1[i]!=\\'.\\' && n1!=0)\\n          {\\n              f1+=version1[i];\\n              n1--;\\n              i++;\\n          }\\n          if(i!=version1.length() && version1[i]==\\'.\\') {n1--;i++;}\\n          while(version2[j]!=\\'.\\'&& n2!=0)\\n          {\\n              f2+=version2[j];\\n              n2--;\\n              j++;\\n          }\\n            if(j!=version2.length() && version2[j]==\\'.\\') {n2--;j++;}\\n            removeZero(f1);\\n            removeZero(f2);\\n            cout<<f1<<\" \"<<f2<<endl;\\n            stringstream g1(f1);\\n            stringstream g2(f2);\\n            int x1 = 0;\\n            int x2=0;\\n            g1 >> x1;\\n            g2 >> x2;\\n            if(x1==x2)continue;\\n            else if(x1<x2)return -1;\\n            else return 1;\\n            \\n            \\n        }\\n        \\n        return 0;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1799176,
                "title": "0-ms-100-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string v1, string v2) {\\n      int i=0,j=0;\\n        while(i<v1.size()||j<v2.size()){\\n                while(i<v1.size()&&v1[i]!=\\'.\\'&&v1[i]==\\'0\\')i++;\\n                while(j<v2.size()&&v2[j]!=\\'.\\'&&v2[j]==\\'0\\')j++;\\n                int a=0,b=0;\\n            while(i<v1.size()&&v1[i]!=\\'.\\'){\\n                a=a*10+(v1[i]-\\'0\\');\\n                i++;\\n            }\\n            while(j<v2.size()&&v2[j]!=\\'.\\'){\\n                b=b*10+(v2[j]-\\'0\\');\\n                j++;\\n            }\\n            int x=0;\\n            if(a<b)return -1;\\n            else if(a>b)return 1;\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};\\n",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int compareVersion(string v1, string v2) {\\n      int i=0,j=0;\\n        while(i<v1.size()||j<v2.size()){\\n                while(i<v1.size()&&v1[i]!=\\'.\\'&&v1[i]==\\'0\\')i++;\\n                while(j<v2.size()&&v2[j]!=\\'.\\'&&v2[j]==\\'0\\')j++;\\n                int a=0,b=0;\\n            while(i<v1.size()&&v1[i]!=\\'.\\'){\\n                a=a*10+(v1[i]-\\'0\\');\\n                i++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1799086,
                "title": "c-o-n-2-stage",
                "content": "For simplifying the code,\\nI seperate this code into two stage. \\nStage one is to convert the two string into two vector\\\\<int>. \\nStage two is compare the two vector\\\\<int>.\\nIn the stage two, we focus on how to process the integer. \\nIn the stage one, we focus on how to convert string into integer by \\nprocessing detail rule in this string.\\n\\n\\n\\n\\n```C++\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        vector<int> v1; getv(version1,v1);\\n        vector<int> v2; getv(version2,v2);\\n\\t\\t//for example,\\n\\t\\t//if version1 = \"001.0.30.02\", version2 = \"1,0.030.1\". \\n\\t\\t//then v1 = {1, 0, 20, 2}.  v2 = {1,0,30,1}\\n\\t\\t\\n        int n = max(v1.size(), v2.size());\\n        for(int i=0; i<n; i++ ) {\\n            int val1 = i>=v1.size()?0:v1[i];\\n            int val2 = i>=v2.size()?0:v2[i];\\n            if(val1<val2) return -1;\\n            if(val1>val2) return 1;\\n        }\\n        return 0;\\n    }\\n    //getv:= Input 0.012.001 -> Output for v is {0, 12, 1}\\n    void getv(string s, vector<int>& v) {\\n        int n = s.length();\\n        int val = 0;\\n        for(int i=0; i<n; i++) {\\n            if(s[i] != \\'.\\') {\\n                val = val * 10 + (s[i]-\\'0\\');\\n            } else {\\n                v.push_back(val);\\n                val = 0;\\n            }\\n        }\\n        v.push_back(val);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```C++\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        vector<int> v1; getv(version1,v1);\\n        vector<int> v2; getv(version2,v2);\\n\\t\\t//for example,\\n\\t\\t//if version1 = \"001.0.30.02\", version2 = \"1,0.030.1\". \\n\\t\\t//then v1 = {1, 0, 20, 2}.  v2 = {1,0,30,1}\\n\\t\\t\\n        int n = max(v1.size(), v2.size());\\n        for(int i=0; i<n; i++ ) {\\n            int val1 = i>=v1.size()?0:v1[i];\\n            int val2 = i>=v2.size()?0:v2[i];\\n            if(val1<val2) return -1;\\n            if(val1>val2) return 1;\\n        }\\n        return 0;\\n    }\\n    //getv:= Input 0.012.001 -> Output for v is {0, 12, 1}\\n    void getv(string s, vector<int>& v) {\\n        int n = s.length();\\n        int val = 0;\\n        for(int i=0; i<n; i++) {\\n            if(s[i] != \\'.\\') {\\n                val = val * 10 + (s[i]-\\'0\\');\\n            } else {\\n                v.push_back(val);\\n                val = 0;\\n            }\\n        }\\n        v.push_back(val);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798861,
                "title": "golang-simple-solution",
                "content": "```\\nfunc compareVersion(version1 string, version2 string) int {\\n\\tv1, v2 := strings.Split(version1, \".\"), strings.Split(version2, \".\")\\n\\n\\tfor i := 0; i < len(v1) || i < len(v2); i++ {\\n\\t\\ta, b := 0, 0\\n\\n\\t\\tif i < len(v1) {\\n\\t\\t\\ta, _ = strconv.Atoi(v1[i])\\n\\t\\t}\\n\\n\\t\\tif i < len(v2) {\\n\\t\\t\\tb, _ = strconv.Atoi(v2[i])\\n\\t\\t}\\n\\n\\t\\tif a > b {\\n\\t\\t\\treturn 1\\n\\t\\t}\\n\\n\\t\\tif b > a {\\n\\t\\t\\treturn -1\\n\\t\\t}\\n\\t}\\n\\n\\treturn 0\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc compareVersion(version1 string, version2 string) int {\\n\\tv1, v2 := strings.Split(version1, \".\"), strings.Split(version2, \".\")\\n\\n\\tfor i := 0; i < len(v1) || i < len(v2); i++ {\\n\\t\\ta, b := 0, 0\\n\\n\\t\\tif i < len(v1) {\\n\\t\\t\\ta, _ = strconv.Atoi(v1[i])\\n\\t\\t}\\n\\n\\t\\tif i < len(v2) {\\n\\t\\t\\tb, _ = strconv.Atoi(v2[i])\\n\\t\\t}\\n\\n\\t\\tif a > b {\\n\\t\\t\\treturn 1\\n\\t\\t}\\n\\n\\t\\tif b > a {\\n\\t\\t\\treturn -1\\n\\t\\t}\\n\\t}\\n\\n\\treturn 0\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1798758,
                "title": "easy-c-sol-two-pointers-o-n",
                "content": "```\\n\\tclass Solution {\\npublic:\\n    int compareVersion(string v1, string v2) {   // Time: O(N)\\n        \\n        int d1 = count(v1.begin(),v1.end(),\\'.\\');\\n        int d2 = count(v2.begin(),v2.end(),\\'.\\');\\n        \\n        int diff = abs(d1-d2);\\n        \\n        if(d1>d2){\\n            while(diff--){\\n                v2 += \".0\";\\n            }\\n        }else if(d2>d1){\\n            while(diff--){\\n                v1 += \".0\";\\n            }\\n        }\\n        \\n        replace(v1.begin(),v1.end(),\\'.\\',\\' \\');\\n        replace(v2.begin(),v2.end(),\\'.\\',\\' \\');\\n        \\n        stringstream ssv1(v1), ssv2(v2);\\n        \\n        int n1,n2;\\n        \\n        while(ssv1>>n1){\\n            ssv2>>n2;\\n            \\n            if(n1<n2){\\n                return -1;\\n            }else if(n1>n2){\\n                return 1;\\n            }\\n        }\\n        return 0;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int compareVersion(string v1, string v2) {   // Time: O(N)\\n        \\n        int d1 = count(v1.begin(),v1.end(),\\'.\\');\\n        int d2 = count(v2.begin(),v2.end(),\\'.\\');\\n        \\n        int diff = abs(d1-d2);\\n        \\n        if(d1>d2){\\n            while(diff--){\\n                v2 += \".0\";\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1798598,
                "title": "0ms-100-solution-using-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        vector<int>first;\\n        vector<int>second;\\n        \\n        for(int i=0 ; i < version1.size() ; i++){\\n            int num = 0;\\n            while(i < version1.size() and version1[i] != \\'.\\'){\\n                int val = version1[i] - \\'0\\';\\n                num = (num * 10) + val;\\n                i++;\\n            }\\n            first.push_back(num);\\n        }\\n        \\n        for(int i=0 ; i < version2.size() ; i++){\\n            int num = 0;\\n            while(i < version2.size() and version2[i] != \\'.\\'){\\n                int val = version2[i] - \\'0\\';\\n                num = (num * 10) + val;\\n                i++;\\n            }\\n            second.push_back(num);\\n        }\\n        \\n        for(int i=first.size() ; i < second.size() ; i++){\\n            first.push_back(0);\\n        }\\n        for(int i=second.size() ; i < first.size() ; i++){\\n            second.push_back(0);\\n        }\\n        \\n        for(int i=0 ; i < first.size() ; i++){\\n            if(first[i] > second[i]){\\n                return 1;\\n            }else if(second[i] > first[i]){\\n                return -1;\\n            }\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        vector<int>first;\\n        vector<int>second;\\n        \\n        for(int i=0 ; i < version1.size() ; i++){\\n            int num = 0;\\n            while(i < version1.size() and version1[i] != \\'.\\'){\\n                int val = version1[i] - \\'0\\';\\n                num = (num * 10) + val;\\n                i++;\\n            }\\n            first.push_back(num);\\n        }\\n        \\n        for(int i=0 ; i < version2.size() ; i++){\\n            int num = 0;\\n            while(i < version2.size() and version2[i] != \\'.\\'){\\n                int val = version2[i] - \\'0\\';\\n                num = (num * 10) + val;\\n                i++;\\n            }\\n            second.push_back(num);\\n        }\\n        \\n        for(int i=first.size() ; i < second.size() ; i++){\\n            first.push_back(0);\\n        }\\n        for(int i=second.size() ; i < first.size() ; i++){\\n            second.push_back(0);\\n        }\\n        \\n        for(int i=0 ; i < first.size() ; i++){\\n            if(first[i] > second[i]){\\n                return 1;\\n            }else if(second[i] > first[i]){\\n                return -1;\\n            }\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798525,
                "title": "c-easy-solution-fast-and-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {   \\n        int i = 0, j = 0, n1 = version1.size(), n2 = version2.size(), num1 = 0, num2 = 0; \\n        while(i<n1 || j<n2)\\n        {\\n            while(i<n1 && version1[i]!=\\'.\\')\\n            {\\n                num1 = num1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            while(j<n2 && version2[j]!=\\'.\\')\\n            {\\n                num2 = num2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(num1>num2)\\n            {\\n                return 1;\\n            }\\n            if(num1 < num2) \\n            {\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n            num1 = 0;\\n            num2 = 0;\\n        }\\n        return 0; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {   \\n        int i = 0, j = 0, n1 = version1.size(), n2 = version2.size(), num1 = 0, num2 = 0; \\n        while(i<n1 || j<n2)\\n        {\\n            while(i<n1 && version1[i]!=\\'.\\')\\n            {\\n                num1 = num1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n            while(j<n2 && version2[j]!=\\'.\\')\\n            {\\n                num2 = num2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(num1>num2)\\n            {\\n                return 1;\\n            }\\n            if(num1 < num2) \\n            {\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n            num1 = 0;\\n            num2 = 0;\\n        }\\n        return 0; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798371,
                "title": "python-python3-two-solutions",
                "content": "**Solution1**\\n\\n```\\nclass Solution(object):\\n    def compareVersion(self, version1, version2):\\n        \"\"\"\\n        :type version1: str\\n        :type version2: str\\n        :rtype: int\\n        \"\"\"\\n        version1 = version1.split(\".\")\\n        version2 = version2.split(\".\")\\n        c = 0\\n        while c < len(version1) and c < len(version2):\\n            if int(version1[c])>int(version2[c]):\\n                return 1\\n            elif int(version2[c])>int(version1[c]):\\n                return -1\\n            else:\\n                c += 1\\n        if c < len(version1):\\n            for i in version1[c:]:\\n                if int(i) > 0:\\n                    return 1\\n        if c < len(version2):\\n            for i in version2[c:]:\\n                if int(i) > 0:\\n                    return -1\\n        return 0\\n        \\n```\\n\\n**Solution2** Python3\\n\\n```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        import itertools\\n        version1 = version1.split(\\'.\\')\\n        version2 = version2.split(\\'.\\')\\n        for v1, v2 in itertools.zip_longest(version1, version2, fillvalue=0):\\n            if int(v1)>int(v2):\\n                return 1\\n            elif int(v2)>int(v1):\\n                return -1\\n        return 0\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def compareVersion(self, version1, version2):\\n        \"\"\"\\n        :type version1: str\\n        :type version2: str\\n        :rtype: int\\n        \"\"\"\\n        version1 = version1.split(\".\")\\n        version2 = version2.split(\".\")\\n        c = 0\\n        while c < len(version1) and c < len(version2):\\n            if int(version1[c])>int(version2[c]):\\n                return 1\\n            elif int(version2[c])>int(version1[c]):\\n                return -1\\n            else:\\n                c += 1\\n        if c < len(version1):\\n            for i in version1[c:]:\\n                if int(i) > 0:\\n                    return 1\\n        if c < len(version2):\\n            for i in version2[c:]:\\n                if int(i) > 0:\\n                    return -1\\n        return 0\\n        \\n```\n```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        import itertools\\n        version1 = version1.split(\\'.\\')\\n        version2 = version2.split(\\'.\\')\\n        for v1, v2 in itertools.zip_longest(version1, version2, fillvalue=0):\\n            if int(v1)>int(v2):\\n                return 1\\n            elif int(v2)>int(v1):\\n                return -1\\n        return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798025,
                "title": "0-ms-faster-than-100-00-of-c-simple-vector-solution",
                "content": "class Solution {\\npublic:\\n    int compareVersion(string s1, string s2) {\\n        \\n        vector<int>v1;\\n        vector<int>v2;\\n        for(int i=0;i<s1.length();i++)\\n        {\\n            string s;\\n            while(s1[i]!=\\'.\\'&&i<s1.length())\\n            {\\n                s+=s1[i];\\n                i++;\\n            }\\n            int z=stoi(s);\\n            v1.push_back(z);\\n         \\n        }\\n        for(int i=0;i<s2.length();i++)\\n        {\\n            string s;\\n            while(s2[i]!=\\'.\\'&&i<s2.length()){\\n                s+=s2[i];\\n                i++;\\n            }\\n            \\n            int z=stoi(s);\\n            v2.push_back(z);\\n        }\\n        if(v1.size()>v2.size()){\\n            int k=v1.size()-v2.size();\\n            while(k--)\\n            {\\n                v2.push_back(0);\\n            }\\n        }\\n        if(v2.size()>v1.size()){\\n            int k=v2.size()-v1.size();\\n            while(k--){\\n                v1.push_back(0);\\n            }\\n        }\\n        for(int i=0;i<v1.size();i++)\\n        {\\n            if(v1[i]>v2[i])\\n                return 1;\\n            else if(v2[i]>v1[i])\\n                return -1;\\n            \\n        }\\n        return 0;\\n    }\\n};",
                "solutionTags": [
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int compareVersion(string s1, string s2) {\\n        \\n        vector<int>v1;\\n        vector<int>v2;\\n        for(int i=0;i<s1.length();i++)\\n        {\\n            string s;\\n            while(s1[i]!=\\'.\\'&&i<s1.length())\\n            {\\n                s+=s1[i];\\n                i++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1797714,
                "title": "python-2-approaches-simple-with-comments",
                "content": "**Approach 1: Using split, clean and simple code**\\n```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        # split into 2 list\\n        v1 = version1.split(\".\")\\n        v2 = version2.split(\".\")\\n        \\n        for i in range(max(len(v1),len(v2))):\\n            #generate a and b and compare them\\n            a = 0 if i>=len(v1) or v1[i]==\\'\\' else int(v1[i])\\n            b = 0 if i>=len(v2) or v2[i]==\\'\\' else int(v2[i])\\n            if a>b:\\n                return 1\\n            if a<b:\\n                return -1\\n        #if the loop ends, the versions are same\\n        return 0\\n```\\n\\n**Approach 2:  modifying the original string**\\n```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        v1=\\'\\'\\n        v2=\\'\\'\\n        while True:\\n\\t\\t   # generate 2 strings until a \".\" occurs\\n\\t\\t   # remove the 0th index from both the strings once comparison is made\\n            while len(version1)>0 and version1[0]!=\\'.\\':\\n                v1+=version1[0]\\n                version1 = version1[1:]\\n            version1 = version1[1:]\\n            while len(version2)>0 and version2[0]!=\\'.\\':\\n                v2+=version2[0]\\n                version2 = version2[1:]\\n            version2 = version2[1:]\\n            if len(v1)==0 and len(v2)==0:\\n                return 0\\n            v1 = int(v1) if len(v1)>0 else 0\\n            v2 = int(v2) if len(v2)>0 else 0\\n\\t\\t\\t# compare and return results\\n            if v1>v2:\\n                return 1\\n            if v2>v1:\\n                return -1\\n            v1=\\'\\'\\n            v2=\\'\\'\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        # split into 2 list\\n        v1 = version1.split(\".\")\\n        v2 = version2.split(\".\")\\n        \\n        for i in range(max(len(v1),len(v2))):\\n            #generate a and b and compare them\\n            a = 0 if i>=len(v1) or v1[i]==\\'\\' else int(v1[i])\\n            b = 0 if i>=len(v2) or v2[i]==\\'\\' else int(v2[i])\\n            if a>b:\\n                return 1\\n            if a<b:\\n                return -1\\n        #if the loop ends, the versions are same\\n        return 0\\n```\n```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        v1=\\'\\'\\n        v2=\\'\\'\\n        while True:\\n\\t\\t   # generate 2 strings until a \".\" occurs\\n\\t\\t   # remove the 0th index from both the strings once comparison is made\\n            while len(version1)>0 and version1[0]!=\\'.\\':\\n                v1+=version1[0]\\n                version1 = version1[1:]\\n            version1 = version1[1:]\\n            while len(version2)>0 and version2[0]!=\\'.\\':\\n                v2+=version2[0]\\n                version2 = version2[1:]\\n            version2 = version2[1:]\\n            if len(v1)==0 and len(v2)==0:\\n                return 0\\n            v1 = int(v1) if len(v1)>0 else 0\\n            v2 = int(v2) if len(v2)>0 else 0\\n\\t\\t\\t# compare and return results\\n            if v1>v2:\\n                return 1\\n            if v2>v1:\\n                return -1\\n            v1=\\'\\'\\n            v2=\\'\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1797610,
                "title": "0-ms-100-faster-95-less-space-solution",
                "content": "Two pointer Approach - Simply check for each version in both the strings by extracting them with the help of \\'.\\'\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        \\n        version1+=\\'.\\';\\n        version2+=\\'.\\';\\n        \\n        int l1=version1.length();\\n        int l2=version2.length();\\n        \\n        int flag=0;\\n        int i=0,j=0;\\n        while(i<l1 && j<l2)\\n        {\\n            string s1=\"\",s2=\"\";\\n            while(version1[i]!=\\'.\\')\\n            {\\n                s1+=version1[i];\\n                i++;   \\n            }\\n            \\n            while(version2[j]!=\\'.\\')\\n            {\\n                s2+=version2[j];\\n                j++;\\n            }\\n            \\n            \\n            int n1=stoi(s1);\\n            int n2=stoi(s2);\\n            if(n1>n2)\\n            {\\n                return 1;\\n            }\\n            else if(n2>n1)\\n            {\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n        }\\n        \\n        while(i<l1)\\n        {\\n             string s1=\"\";\\n            while(version1[i]!=\\'.\\')\\n            {\\n                s1+=version1[i];\\n                i++;   \\n            }\\n            if(stoi(s1)>0)\\n                return 1;\\n            i++;\\n        }\\n        \\n        while(j<l2)\\n        {\\n             string s2=\"\";\\n            while(version2[j]!=\\'.\\')\\n            {\\n                s2+=version2[j];\\n                j++;   \\n            }\\n            if(stoi(s2)>0)\\n                return -1;\\n            j++;\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        \\n        version1+=\\'.\\';\\n        version2+=\\'.\\';\\n        \\n        int l1=version1.length();\\n        int l2=version2.length();\\n        \\n        int flag=0;\\n        int i=0,j=0;\\n        while(i<l1 && j<l2)\\n        {\\n            string s1=\"\",s2=\"\";\\n            while(version1[i]!=\\'.\\')\\n            {\\n                s1+=version1[i];\\n                i++;   \\n            }\\n            \\n            while(version2[j]!=\\'.\\')\\n            {\\n                s2+=version2[j];\\n                j++;\\n            }\\n            \\n            \\n            int n1=stoi(s1);\\n            int n2=stoi(s2);\\n            if(n1>n2)\\n            {\\n                return 1;\\n            }\\n            else if(n2>n1)\\n            {\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n        }\\n        \\n        while(i<l1)\\n        {\\n             string s1=\"\";\\n            while(version1[i]!=\\'.\\')\\n            {\\n                s1+=version1[i];\\n                i++;   \\n            }\\n            if(stoi(s1)>0)\\n                return 1;\\n            i++;\\n        }\\n        \\n        while(j<l2)\\n        {\\n             string s2=\"\";\\n            while(version2[j]!=\\'.\\')\\n            {\\n                s2+=version2[j];\\n                j++;   \\n            }\\n            if(stoi(s2)>0)\\n                return -1;\\n            j++;\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1797566,
                "title": "c-0ms-faster-than-100",
                "content": "\\n        \\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\t\\tclass Solution {\\n        public:\\n        int compareVersion(string version1, string version2) {\\n               vector<int> v1, v2;\\n        \\n        string num;\\n        \\n        for(char it : version1)\\n        {\\n            if(it == \\'.\\')\\n            {\\n                v1.push_back(stoi(num));\\n                num.clear();\\n            }\\n            else\\n                num.push_back(it);\\n        }\\n        \\n        v1.push_back(stoi(num));\\n        num.clear();\\n        \\n        for(char it : version2)\\n        {\\n            if(it == \\'.\\')\\n            {\\n                v2.push_back(stoi(num));\\n                num.clear();\\n            }\\n            else\\n                num.push_back(it);\\n        }\\n        \\n        v2.push_back(stoi(num));\\n        \\n        int i = 0, n = v1.size(), m = v2.size();\\n        \\n        while(i < min(n, m))\\n        {\\n            if(v1[i] < v2[i])\\n                return -1;\\n            \\n            if(v1[i] > v2[i])\\n                return 1;\\n            \\n            i++;\\n        }\\n        \\n        while(i < n)\\n            if(v1[i++] > 0)\\n                return 1;\\n        \\n        while(i < m)\\n            if(v2[i++] > 0)\\n                return -1;\\n        \\n        return 0;\\n    }\\n\\t};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n        public:\\n        int compareVersion(string version1, string version2) {\\n               vector<int> v1, v2;\\n        \\n        string num;\\n        \\n        for(char it : version1)\\n        {\\n            if(it == \\'.\\')\\n            {\\n                v1.push_back(stoi(num));\\n                num.clear();\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1797537,
                "title": "simple-short-python-solution",
                "content": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        v1 = version1.split(\\'.\\') # Divide string version1 into array seperated by \".\"\\n        v2 = version2.split(\\'.\\') # Divide string version2 into array seperated by \".\"\\n        m = len(v1)\\n        n = len(v2)\\n\\t\\t# Just take strings at index i from v1 & v2, convert them to integer and check which version is larger. \\n\\t\\t# If an array is already traversed then we may consider the version to be 0. \\n        for i in range(max(m, n)):\\n            i1 = int(v1[i]) if i < m else 0 \\n            i2 = int(v2[i]) if i < n else 0\\n            if i1 > i2:\\n                return 1\\n            if i1 < i2:\\n                return -1\\n        return 0 # Both versions must be same if their was no difference at any point.\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        v1 = version1.split(\\'.\\') # Divide string version1 into array seperated by \".\"\\n        v2 = version2.split(\\'.\\') # Divide string version2 into array seperated by \".\"\\n        m = len(v1)\\n        n = len(v2)\\n\\t\\t# Just take strings at index i from v1 & v2, convert them to integer and check which version is larger. \\n\\t\\t# If an array is already traversed then we may consider the version to be 0. \\n        for i in range(max(m, n)):\\n            i1 = int(v1[i]) if i < m else 0 \\n            i2 = int(v2[i]) if i < n else 0\\n            if i1 > i2:\\n                return 1\\n            if i1 < i2:\\n                return -1\\n        return 0 # Both versions must be same if their was no difference at any point.\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1797526,
                "title": "c-one-pass",
                "content": "Runtime: 70 ms, faster than 79.00% of C# online submissions for Compare Version Numbers.\\nMemory Usage: 35.2 MB, less than 52.97% of C# online submissions for Compare Version\\n```\\npublic class Solution {\\n    public int CompareVersion(string version1, string version2) {\\n        string[] s1 = version1.Split(\\'.\\');\\n        string[] s2 = version2.Split(\\'.\\');\\n        \\n        int n = Math.Max(s1.Length, s2.Length);\\n        for(int i=0; i<n; i++)\\n        {\\n            int v1 = int.Parse(i<s1.Length ? s1[i] : \"0\");\\n            int v2 = int.Parse(i<s2.Length ? s2[i] : \"0\");\\n            \\n            if(v1 < v2) return -1;\\n            else if(v1 > v2) return 1;\\n        }\\n        \\n        return 0;\\n        \\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int CompareVersion(string version1, string version2) {\\n        string[] s1 = version1.Split(\\'.\\');\\n        string[] s2 = version2.Split(\\'.\\');\\n        \\n        int n = Math.Max(s1.Length, s2.Length);\\n        for(int i=0; i<n; i++)\\n        {\\n            int v1 = int.Parse(i<s1.Length ? s1[i] : \"0\");\\n            int v2 = int.Parse(i<s2.Length ? s2[i] : \"0\");\\n            \\n            if(v1 < v2) return -1;\\n            else if(v1 > v2) return 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1797496,
                "title": "java-easy-understanding-code",
                "content": "```\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n\\t//CONVERTING STRING INTO ARRAY OF STRING SPLITED BY \\'.\\'\\n        String[] str1 = version1.split(\"\\\\\\\\.\");\\n        //System.out.println(str1);\\n        String[] str2 = version2.split(\"\\\\\\\\.\");\\n        int ans = 0,n = str1.length,m = str2.length,flag = 0;\\n        //System.out.println(n);\\n\\t\\t//ITERATE OVER VERSION1 AND FLAG FOR CHECKING IF N>M\\n        for(int i = 0;i<n;i++)\\n        {\\n            int n1 = Integer.parseInt(str1[i]);\\n\\t\\t\\t// TO TACKLE IF LENGTH OF VERSION 1 IS GREATER THAN VERSION2.\\n            if(flag == 1)\\n            {\\n                if(n1 >0)\\n                    return 1;\\n                continue;\\n            }\\n\\t\\t\\t//IF LENGTH IS NOT GREATER THAN M\\n            if(flag == 0)\\n            {\\n                int n2 = Integer.parseInt(str2[i]);\\n                //System.out.println(\"1\");\\n                if(n1>n2)\\n                    return 1;\\n                else if(n2>n1)\\n                    return -1;\\n            }\\n\\t\\t\\t//IF I BECOMES EQUAL TO LENGTH OF M\\n            if(i == m - 1)\\n                flag = 1;\\n            \\n        }\\n\\t\\t//IF m>n\\n        for(int i = n;i<m;i++)\\n        {\\n            int n2 = Integer.parseInt(str2[i]);\\n            if(n2>0)\\n                return -1;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n\\t//CONVERTING STRING INTO ARRAY OF STRING SPLITED BY \\'.\\'\\n        String[] str1 = version1.split(\"\\\\\\\\.\");\\n        //System.out.println(str1);\\n        String[] str2 = version2.split(\"\\\\\\\\.\");\\n        int ans = 0,n = str1.length,m = str2.length,flag = 0;\\n        //System.out.println(n);\\n\\t\\t//ITERATE OVER VERSION1 AND FLAG FOR CHECKING IF N>M\\n        for(int i = 0;i<n;i++)\\n        {\\n            int n1 = Integer.parseInt(str1[i]);\\n\\t\\t\\t// TO TACKLE IF LENGTH OF VERSION 1 IS GREATER THAN VERSION2.\\n            if(flag == 1)\\n            {\\n                if(n1 >0)\\n                    return 1;\\n                continue;\\n            }\\n\\t\\t\\t//IF LENGTH IS NOT GREATER THAN M\\n            if(flag == 0)\\n            {\\n                int n2 = Integer.parseInt(str2[i]);\\n                //System.out.println(\"1\");\\n                if(n1>n2)\\n                    return 1;\\n                else if(n2>n1)\\n                    return -1;\\n            }\\n\\t\\t\\t//IF I BECOMES EQUAL TO LENGTH OF M\\n            if(i == m - 1)\\n                flag = 1;\\n            \\n        }\\n\\t\\t//IF m>n\\n        for(int i = n;i<m;i++)\\n        {\\n            int n2 = Integer.parseInt(str2[i]);\\n            if(n2>0)\\n                return -1;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1797429,
                "title": "python-zip",
                "content": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        foo = map(int, version1.split(\\'.\\'))\\n        bar = map(int, version2.split(\\'.\\'))\\n        for a, b in zip_longest(foo, bar, fillvalue=0):\\n            if a < b:\\n                return -1\\n            elif a > b:\\n                return +1\\n        return 0\\n\\t\\t",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        foo = map(int, version1.split(\\'.\\'))\\n        bar = map(int, version2.split(\\'.\\'))\\n        for a, b in zip_longest(foo, bar, fillvalue=0):\\n            if a < b:\\n                return -1\\n            elif a > b:\\n                return +1\\n        return 0\\n\\t\\t",
                "codeTag": "Java"
            },
            {
                "id": 1791108,
                "title": "c-0-ms-solution-simple-and-clear-code",
                "content": "```\\nint compareVersion(string v1, string v2) {\\n\\tint m=v1.length(),n=v2.length(),i=0,j=0,val1,val2;\\n\\twhile(i<m or j<n){\\n\\t\\tval1=0,val2=0;\\n\\t\\twhile(i<m and v1[i]!=\\'.\\'){\\n\\t\\t\\tval1=val1*10+(v1[i]-\\'0\\');\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\twhile(j<n and v2[j]!=\\'.\\'){\\n\\t\\t\\tval2=val2*10+(v2[j]-\\'0\\');\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif(val1>val2) return 1;\\n\\t\\telse if(val1<val2) return -1;\\n\\t\\ti++;\\n\\t\\tj++;\\n\\t}\\n\\treturn 0;\\n}\\n```\\n**Please UPVOTE :)**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint compareVersion(string v1, string v2) {\\n\\tint m=v1.length(),n=v2.length(),i=0,j=0,val1,val2;\\n\\twhile(i<m or j<n){\\n\\t\\tval1=0,val2=0;\\n\\t\\twhile(i<m and v1[i]!=\\'.\\'){\\n\\t\\t\\tval1=val1*10+(v1[i]-\\'0\\');\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\twhile(j<n and v2[j]!=\\'.\\'){\\n\\t\\t\\tval2=val2*10+(v2[j]-\\'0\\');\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif(val1>val2) return 1;\\n\\t\\telse if(val1<val2) return -1;\\n\\t\\ti++;\\n\\t\\tj++;\\n\\t}\\n\\treturn 0;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1790850,
                "title": "c",
                "content": "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nclass Solution {\\npublic:\\n   \\n   \\n   \\n   \\n   \\n   \\n   \\n   \\n   \\n   \\n   \\n   \\n## 1. int compareVersion(string v1, string v2){\\n        int k = max(v1.size(),v2.size());\\n        int n = v1.size();\\n        int m = v2.size();\\n        int i = 0;\\n        int j = 0;\\n       \\n        \\n        while(i < k && j  < k){\\n             int num1 = 0;\\n             int num2 = 0;\\n            while(i < n && v1[i] != \\'.\\'){\\n                num1 = num1*10 + (v1[i]-\\'0\\');\\n                i++;\\n            }\\n            while(j < m && v2[j] != \\'.\\'){\\n                num2 = num2*10 + (v2[j]-\\'0\\');\\n                j++;\\n            }\\n         //   cout<<num1 << num2 << \" \"<<endl;\\n            if(num1 == num2){\\n                i++;\\n                j++;\\n            }\\n            \\n            else if(num1 < num2){\\n                return -1;\\n            }else if(num2 < num1){\\n                return 1;\\n            }\\n                \\n        }\\n         return 0;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n   \\n   \\n   \\n   \\n   \\n   \\n   \\n   \\n   \\n   \\n   \\n   \\n## 1. int compareVersion(string v1, string v2){\\n        int k = max(v1.size(),v2.size());\\n        int n = v1.size();\\n        int m = v2.size();\\n        int i = 0;\\n        int j = 0;\\n       \\n        \\n        while(i < k && j  < k){\\n             int num1 = 0;\\n             int num2 = 0;\\n            while(i < n && v1[i] != \\'.\\'){\\n                num1 = num1*10 + (v1[i]-\\'0\\');\\n                i++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1772866,
                "title": "compare-version-numbers-solution-java",
                "content": "class Solution {\\n  public int compareVersion(String version1, String version2) {\\n    final String[] levels1 = version1.split(\"\\\\\\\\.\");\\n    final String[] levels2 = version2.split(\"\\\\\\\\.\");\\n    final int length = Math.max(levels1.length, levels2.length);\\n\\n    for (int i = 0; i < length; ++i) {\\n      final Integer v1 = i < levels1.length ? Integer.parseInt(levels1[i]) : 0;\\n      final Integer v2 = i < levels2.length ? Integer.parseInt(levels2[i]) : 0;\\n      final int compare = v1.compareTo(v2);\\n      if (compare != 0)\\n        return compare;\\n    }\\n\\n    return 0;\\n  }\\n}\\n",
                "solutionTags": [
                    "Two Pointers",
                    "String"
                ],
                "code": "class Solution {\\n  public int compareVersion(String version1, String version2) {\\n    final String[] levels1 = version1.split(\"\\\\\\\\.\");\\n    final String[] levels2 = version2.split(\"\\\\\\\\.\");\\n    final int length = Math.max(levels1.length, levels2.length);\\n\\n    for (int i = 0; i < length; ++i) {\\n      final Integer v1 = i < levels1.length ? Integer.parseInt(levels1[i]) : 0;\\n      final Integer v2 = i < levels2.length ? Integer.parseInt(levels2[i]) : 0;\\n      final int compare = v1.compareTo(v2);\\n      if (compare != 0)\\n        return compare;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1753463,
                "title": "c-vector-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int n1=version1.size(),n2=version2.size();\\n        vector<int>v1,v2;int  val=0;\\n        for(int i=0;i<=n1;i++){\\n            \\n            if(version1[i]==\\'.\\' || i==n1){\\n                v1.push_back(val);val=0;}\\n            else{\\n                val=val*10 + version1[i]-\\'0\\';\\n            }\\n        }\\n        cout<<endl;\\n        for(int i=0;i<=n2;i++){\\n            if(version2[i]==\\'.\\' || i==n2){\\n                v2.push_back(val);val=0;}\\n            else{\\n                val=val*10 + version2[i]-\\'0\\';\\n            }\\n        }\\n        int s1=v1.size(),s2=v2.size();int i=0,j=0;int ans=0;\\n        while(i<s1 && j<s2){\\n            if(v1[i]!=v2[j]){\\n                v1[i]>v2[j]?ans=1:ans=-1;\\n                return ans;\\n            }\\n            i++;j++;\\n        }\\n        while(i<s1){\\n            if(v1[i]!=0){\\n                ans=1;return ans;}\\n            i++;\\n        }\\n        while(j<s2){\\n            if(v2[j]!=0){\\n                ans=-1;return ans;}\\n            j++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int n1=version1.size(),n2=version2.size();\\n        vector<int>v1,v2;int  val=0;\\n        for(int i=0;i<=n1;i++){\\n            \\n            if(version1[i]==\\'.\\' || i==n1){\\n                v1.push_back(val);val=0;}\\n            else{\\n                val=val*10 + version1[i]-\\'0\\';\\n            }\\n        }\\n        cout<<endl;\\n        for(int i=0;i<=n2;i++){\\n            if(version2[i]==\\'.\\' || i==n2){\\n                v2.push_back(val);val=0;}\\n            else{\\n                val=val*10 + version2[i]-\\'0\\';\\n            }\\n        }\\n        int s1=v1.size(),s2=v2.size();int i=0,j=0;int ans=0;\\n        while(i<s1 && j<s2){\\n            if(v1[i]!=v2[j]){\\n                v1[i]>v2[j]?ans=1:ans=-1;\\n                return ans;\\n            }\\n            i++;j++;\\n        }\\n        while(i<s1){\\n            if(v1[i]!=0){\\n                ans=1;return ans;}\\n            i++;\\n        }\\n        while(j<s2){\\n            if(v2[j]!=0){\\n                ans=-1;return ans;}\\n            j++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1625162,
                "title": "my-1ms-easy-solution-with-in-c-c",
                "content": "\\n\\n\\n\\n\\n\\n\\n    int compareVersion(char * version1, char * version2){\\n    int j = 0,i=0;\\n    int n1 = strlen(version1); \\n    int n2 = strlen(version2);\\n    \\n    int num1 = 0;\\n    int num2 = 0;\\n    while(i<n1 || j<n2)\\n    {\\n        while(i<n1 && version1[i]!=\\'.\\'){\\n            num1 = num1*10+(version1[i]-\\'0\\');\\n            i++;\\n        }\\n        \\n        while(j<n2 && version2[j]!=\\'.\\'){\\n            num2 = num2*10+(version2[j]-\\'0\\');;\\n            j++;\\n        }\\n        \\n        if(num1>num2) return 1;\\n        else if(num1 < num2) return -1;\\n        \\n        num1 = 0;\\n        num2 = 0;\\n        i++;\\n        j++;\\n    }\\n    \\n    return 0;\\n}\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "\\n\\n\\n\\n\\n\\n\\n    int compareVersion(char * version1, char * version2){\\n    int j = 0,i=0;\\n    int n1 = strlen(version1); \\n    int n2 = strlen(version2);\\n    \\n    int num1 = 0;\\n    int num2 = 0;\\n    while(i<n1 || j<n2)\\n    {\\n        while(i<n1 && version1[i]!=\\'.\\'){\\n            num1 = num1*10+(version1[i]-\\'0\\');\\n            i++;\\n        }\\n        \\n        while(j<n2 && version2[j]!=\\'.\\'){\\n            num2 = num2*10+(version2[j]-\\'0\\');;\\n            j++;\\n        }\\n        \\n        if(num1>num2) return 1;\\n        else if(num1 < num2) return -1;\\n        \\n        num1 = 0;\\n        num2 = 0;\\n        i++;\\n        j++;\\n    }\\n    \\n    return 0;\\n}\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1573527,
                "title": "python-basic-easy-implementation",
                "content": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        l1=list(map(int,version1.split(\\'.\\')))\\n        l2=list(map(int,version2.split(\\'.\\')))\\n        #print(l1,l2)\\n        if l1==l2:\\n            return(0)\\n        \\n        a=len(l1)\\n        b=len(l2)\\n        \\n        if a>b:\\n            for i in range(a-b):\\n                l2.append(\"0\")\\n        \\n        if b>a:\\n            for i in range(b-a):\\n                l1.append(\"0\")\\n            \\n        for i in range(len(l1)):\\n            if int(l1[i])>int(l2[i]):\\n                return(1)\\n            \\n            elif int(l1[i])<int(l2[i]):\\n                return(-1)\\n            \\n            else:\\n                pass\\n        \\n        return(0)\\n```\\nIf u understood the code then plz....UPVOTE",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        l1=list(map(int,version1.split(\\'.\\')))\\n        l2=list(map(int,version2.split(\\'.\\')))\\n        #print(l1,l2)\\n        if l1==l2:\\n            return(0)\\n        \\n        a=len(l1)\\n        b=len(l2)\\n        \\n        if a>b:\\n            for i in range(a-b):\\n                l2.append(\"0\")\\n        \\n        if b>a:\\n            for i in range(b-a):\\n                l1.append(\"0\")\\n            \\n        for i in range(len(l1)):\\n            if int(l1[i])>int(l2[i]):\\n                return(1)\\n            \\n            elif int(l1[i])<int(l2[i]):\\n                return(-1)\\n            \\n            else:\\n                pass\\n        \\n        return(0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1458102,
                "title": "java-short-solution",
                "content": "```\\npublic int compareVersion(String version1, String version2) {\\n\\tString[] v1 = version1.split(\"\\\\\\\\.\"), v2 = version2.split(\"\\\\\\\\.\");\\n\\tfor(int i=0;i<v1.length || i<v2.length;i++) {\\n\\t\\tint sv1 = i<v1.length?Integer.parseInt(v1[i]):0, sv2 = i<v2.length?Integer.parseInt(v2[i]):0;\\n\\t\\tif(sv1 < sv2) return -1; else if (sv2 < sv1) return 1;\\n\\t}\\n\\treturn 0;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int compareVersion(String version1, String version2) {\\n\\tString[] v1 = version1.split(\"\\\\\\\\.\"), v2 = version2.split(\"\\\\\\\\.\");\\n\\tfor(int i=0;i<v1.length || i<v2.length;i++) {\\n\\t\\tint sv1 = i<v1.length?Integer.parseInt(v1[i]):0, sv2 = i<v2.length?Integer.parseInt(v2[i]):0;\\n\\t\\tif(sv1 < sv2) return -1; else if (sv2 < sv1) return 1;\\n\\t}\\n\\treturn 0;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1398508,
                "title": "c-o-1-space-solution",
                "content": "Use two pointers for the two string, and four pointers for sliding window.\\n```\\n\\tint compareVersion(string v1, string v2) {\\n        int i = 0, j = 0;\\n        \\n        while(i < v1.size() || j < v2.size()){\\n            int il = i;\\n            while(il < v1.size() && v1[il] == \\'0\\') il++;\\n            \\n            int ir = il;\\n            while(ir < v1.size() && v1[ir] != \\'.\\') ir++;\\n            \\n            int jl = j;\\n            while(jl < v2.size() && v2[jl] == \\'0\\') jl++;\\n            \\n            int jr = jl;\\n            while(jr < v2.size() && v2[jr] != \\'.\\') jr++;\\n            \\n            if (ir-il > jr-jl) return 1;\\n            \\n            if (ir-il < jr-jl) return -1;\\n            \\n            for ( ; il != ir; il++, jl++) {\\n                if (v1[il] > v2[jl])\\n                    return 1;\\n                else if (v1[il] < v2[jl])\\n                    return -1;\\n            }\\n            \\n            i = ir < v1.size()?ir+1:ir;\\n            j = jr < v2.size()?jr+1:jr;\\n        }\\n            \\n        return 0;\\n    }\\n\\t",
                "solutionTags": [],
                "code": "Use two pointers for the two string, and four pointers for sliding window.\\n```\\n\\tint compareVersion(string v1, string v2) {\\n        int i = 0, j = 0;\\n        \\n        while(i < v1.size() || j < v2.size()){\\n            int il = i;\\n            while(il < v1.size() && v1[il] == \\'0\\') il++;\\n            \\n            int ir = il;\\n            while(ir < v1.size() && v1[ir] != \\'.\\') ir++;\\n            \\n            int jl = j;\\n            while(jl < v2.size() && v2[jl] == \\'0\\') jl++;\\n            \\n            int jr = jl;\\n            while(jr < v2.size() && v2[jr] != \\'.\\') jr++;\\n            \\n            if (ir-il > jr-jl) return 1;\\n            \\n            if (ir-il < jr-jl) return -1;\\n            \\n            for ( ; il != ir; il++, jl++) {\\n                if (v1[il] > v2[jl])\\n                    return 1;\\n                else if (v1[il] < v2[jl])\\n                    return -1;\\n            }\\n            \\n            i = ir < v1.size()?ir+1:ir;\\n            j = jr < v2.size()?jr+1:jr;\\n        }\\n            \\n        return 0;\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 1310492,
                "title": "c-simplest-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    void getTokenNumbers(vector<int>& num, string& version) {\\n        stringstream ss(version);\\n        string token;\\n        while(getline(ss, token, \\'.\\')) {\\n            num.push_back(stoi(token));\\n        }\\n    }\\n    int compareVersion(string version1, string version2) {\\n        vector<int> nums1;\\n        getTokenNumbers(nums1, version1);\\n        \\n        vector<int> nums2;\\n        getTokenNumbers(nums2, version2);\\n        \\n        \\n        int i = 0, j = 0;\\n        int m = nums1.size();\\n        int n = nums2.size();\\n\\n        while( i < m || j < n) {\\n            int num1 = i>=m ? 0 : nums1[i];\\n            int num2 = j>=n ? 0 : nums2[j];\\n            if(num1 > num2)\\n                return 1;\\n            else if(num1 < num2)\\n                return -1;\\n            else {\\n                i++;\\n                j++;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    void getTokenNumbers(vector<int>& num, string& version) {\\n        stringstream ss(version);\\n        string token;\\n        while(getline(ss, token, \\'.\\')) {\\n            num.push_back(stoi(token));\\n        }\\n    }\\n    int compareVersion(string version1, string version2) {\\n        vector<int> nums1;\\n        getTokenNumbers(nums1, version1);\\n        \\n        vector<int> nums2;\\n        getTokenNumbers(nums2, version2);\\n        \\n        \\n        int i = 0, j = 0;\\n        int m = nums1.size();\\n        int n = nums2.size();\\n\\n        while( i < m || j < n) {\\n            int num1 = i>=m ? 0 : nums1[i];\\n            int num2 = j>=n ? 0 : nums2[j];\\n            if(num1 > num2)\\n                return 1;\\n            else if(num1 < num2)\\n                return -1;\\n            else {\\n                i++;\\n                j++;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1205028,
                "title": "python-with-comments",
                "content": "1. split string by `.`\\n2. compare higher to lower versions\\n3. if level versions are the same - compare subversions \\n```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        ver1l ,ver2l = version1.split(\\'.\\') , version2.split(\\'.\\')\\n        \\n        for i in range(max(len(ver1l), len(ver2l))):\\n            \\n            a = int(ver1l[i]) if i<len(ver1l) else 0\\n            b = int(ver2l[i]) if i<len(ver2l) else 0\\n            if a>b: return 1\\n            elif a<b: return -1\\n        return 0\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        ver1l ,ver2l = version1.split(\\'.\\') , version2.split(\\'.\\')\\n        \\n        for i in range(max(len(ver1l), len(ver2l))):\\n            \\n            a = int(ver1l[i]) if i<len(ver1l) else 0\\n            b = int(ver2l[i]) if i<len(ver2l) else 0\\n            if a>b: return 1\\n            elif a<b: return -1\\n        return 0\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 838238,
                "title": "a-few-solutions",
                "content": "Split each input string `s` and `t` upon `\\'.\\'` to compare integers values.\\n\\n---\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun compareVersion(s: String, t: String): Int {\\n        var A = s.split(\".\").map{ it.toInt() }.toMutableList()\\n        var B = t.split(\".\").map{ it.toInt() }.toMutableList()\\n        while (A.size < B.size) A.add(0)\\n        while (B.size < A.size) B.add(0)\\n        for ((a, b) in (A zip B)) {\\n            if (a < b) return -1\\n            if (b < a) return 1\\n        }\\n        return 0\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet compareVersion = (s, t) => {\\n    let A = s.split(\\'.\\').map(x => Number(x)),\\n        B = t.split(\\'.\\').map(x => Number(x));\\n    while (A.length < B.length) A.push(0);\\n    while (B.length < A.length) B.push(0);\\n    for (let [a, b] of _.zip(A, B)) {\\n        if (a < b) return -1;\\n        if (b < a) return 1;\\n    }\\n    return 0;\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def compareVersion(self, s: str, t: str) -> int:\\n        A = [int(x) for x in s.split(\\'.\\')]\\n        B = [int(x) for x in t.split(\\'.\\')]\\n        while len(A) < len(B): A.append(0)\\n        while len(B) < len(A): B.append(0)\\n        for a, b in zip(A, B):\\n            if a < b: return -1\\n            if b < a: return 1\\n        return 0\\n```\\n\\n*Rust*\\n```\\nimpl Solution {\\n    pub fn compare_version(s: String, t: String) -> i32 {\\n        let mut A: Vec<i32> = s.split(\".\").map(|x| x.parse::<i32>().unwrap()).collect();\\n        let mut B: Vec<i32> = t.split(\".\").map(|x| x.parse::<i32>().unwrap()).collect();\\n        while A.len() < B.len() { A.push(0); }\\n        while B.len() < A.len() { B.push(0); }\\n        for (a, b) in A.iter().zip(B.iter()) {\\n            if a < b { return -1; }\\n            if b < a { return 1; }\\n        }\\n        return 0;\\n    }\\n}\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string s, string t) {\\n        auto f = [](auto s) {\\n            using VI = vector<int>;\\n            using Iter = istream_iterator<int>;\\n            transform(s.begin(), s.end(), s.begin(), [](auto c) { return c == \\'.\\' ? \\' \\' : c; });\\n            VI A; istringstream is{ s }; copy(Iter(is), Iter(), back_inserter(A));\\n            return A;\\n        };\\n        auto A = f(s),\\n             B = f(t);\\n        while (A.size() < B.size()) A.push_back(0);\\n        while (B.size() < A.size()) B.push_back(0);\\n        for (auto i{ 0 }; i < A.size(); ++i) {\\n            if (A[i] < B[i]) return -1;\\n            if (B[i] < A[i]) return 1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun compareVersion(s: String, t: String): Int {\\n        var A = s.split(\".\").map{ it.toInt() }.toMutableList()\\n        var B = t.split(\".\").map{ it.toInt() }.toMutableList()\\n        while (A.size < B.size) A.add(0)\\n        while (B.size < A.size) B.add(0)\\n        for ((a, b) in (A zip B)) {\\n            if (a < b) return -1\\n            if (b < a) return 1\\n        }\\n        return 0\\n    }\\n}\\n```\n```\\nlet compareVersion = (s, t) => {\\n    let A = s.split(\\'.\\').map(x => Number(x)),\\n        B = t.split(\\'.\\').map(x => Number(x));\\n    while (A.length < B.length) A.push(0);\\n    while (B.length < A.length) B.push(0);\\n    for (let [a, b] of _.zip(A, B)) {\\n        if (a < b) return -1;\\n        if (b < a) return 1;\\n    }\\n    return 0;\\n};\\n```\n```\\nclass Solution:\\n    def compareVersion(self, s: str, t: str) -> int:\\n        A = [int(x) for x in s.split(\\'.\\')]\\n        B = [int(x) for x in t.split(\\'.\\')]\\n        while len(A) < len(B): A.append(0)\\n        while len(B) < len(A): B.append(0)\\n        for a, b in zip(A, B):\\n            if a < b: return -1\\n            if b < a: return 1\\n        return 0\\n```\n```\\nimpl Solution {\\n    pub fn compare_version(s: String, t: String) -> i32 {\\n        let mut A: Vec<i32> = s.split(\".\").map(|x| x.parse::<i32>().unwrap()).collect();\\n        let mut B: Vec<i32> = t.split(\".\").map(|x| x.parse::<i32>().unwrap()).collect();\\n        while A.len() < B.len() { A.push(0); }\\n        while B.len() < A.len() { B.push(0); }\\n        for (a, b) in A.iter().zip(B.iter()) {\\n            if a < b { return -1; }\\n            if b < a { return 1; }\\n        }\\n        return 0;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string s, string t) {\\n        auto f = [](auto s) {\\n            using VI = vector<int>;\\n            using Iter = istream_iterator<int>;\\n            transform(s.begin(), s.end(), s.begin(), [](auto c) { return c == \\'.\\' ? \\' \\' : c; });\\n            VI A; istringstream is{ s }; copy(Iter(is), Iter(), back_inserter(A));\\n            return A;\\n        };\\n        auto A = f(s),\\n             B = f(t);\\n        while (A.size() < B.size()) A.push_back(0);\\n        while (B.size() < A.size()) B.push_back(0);\\n        for (auto i{ 0 }; i < A.size(); ++i) {\\n            if (A[i] < B[i]) return -1;\\n            if (B[i] < A[i]) return 1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 837764,
                "title": "compare-version-numbers-python3-beats-98",
                "content": "I made a list by splitting at the \\'.\\' and compared them in a for loop. I\\'ve also tried to cover a corner case in the beginning. It\\'s not a good code, but it works :P. Do lemme know what you think about this in the comments.\\nUpvote this if you like it :) Thanks\\n```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        if len(version1) <= 3 and len(version2) <= 3:\\n            if float(version1) > float(version2):\\n                return 1\\n            elif float(version1) < float(version2):\\n                return -1\\n            else:\\n                return 0\\n        \\n        u = version1.split(\\'.\\')\\n        v = version2.split(\\'.\\')\\n        \\n        if len(u) > len(v):\\n            v += [\\'0\\'] * (len(u) - len(v))\\n        elif len(v) > len(u):\\n            u += [\\'0\\'] * (len(v) - len(u))\\n        \\n        for i in range(min(len(u), len(v))):\\n            if int(u[i]) > int(v[i]):\\n                return 1\\n            elif int(u[i]) < int(v[i]):\\n                return -1\\n        return 0\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compareVersion(self, version1: str, version2: str) -> int:\\n        if len(version1) <= 3 and len(version2) <= 3:\\n            if float(version1) > float(version2):\\n                return 1\\n            elif float(version1) < float(version2):\\n                return -1\\n            else:\\n                return 0\\n        \\n        u = version1.split(\\'.\\')\\n        v = version2.split(\\'.\\')\\n        \\n        if len(u) > len(v):\\n            v += [\\'0\\'] * (len(u) - len(v))\\n        elif len(v) > len(u):\\n            u += [\\'0\\'] * (len(v) - len(u))\\n        \\n        for i in range(min(len(u), len(v))):\\n            if int(u[i]) > int(v[i]):\\n                return 1\\n            elif int(u[i]) < int(v[i]):\\n                return -1\\n        return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 837709,
                "title": "c-solution-20-lines-of-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0, j=0;\\n        while(i < version1.length() || j<version2.length()) // even if 1 of them is still not complete\\n        {\\n            long long int a=0, b=0; // no character implies 0 version\\n            while(i < version1.length() && version1[i]!=\\'.\\')\\n            {\\n                a = 10*a + (version1[i]-\\'0\\');\\n                i++;\\n            }\\n            i++;\\n            while(j < version2.length() && version2[j]!=\\'.\\')\\n            {\\n                b = 10*b + (version2[j]-\\'0\\');\\n                j++;\\n            }\\n            j++;\\n            if(a<b)\\n                return -1;\\n            else if(a>b)\\n                return 1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0, j=0;\\n        while(i < version1.length() || j<version2.length()) // even if 1 of them is still not complete\\n        {\\n            long long int a=0, b=0; // no character implies 0 version\\n            while(i < version1.length() && version1[i]!=\\'.\\')\\n            {\\n                a = 10*a + (version1[i]-\\'0\\');\\n                i++;\\n            }\\n            i++;\\n            while(j < version2.length() && version2[j]!=\\'.\\')\\n            {\\n                b = 10*b + (version2[j]-\\'0\\');\\n                j++;\\n            }\\n            j++;\\n            if(a<b)\\n                return -1;\\n            else if(a>b)\\n                return 1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 771521,
                "title": "c-solution-using-stringstream",
                "content": "The stringstream class gives us a natural way to split strings. I used this to extract the version strings as vectors of integers, which I then compared.\\n```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n\\t    // Load version strings into streams.\\n        stringstream s1(version1), s2(version2);\\n\\t\\t// Two vectors to store the version numbers.\\n        vector<int> v1, v2;\\n        string temp;\\n\\t\\t// Extract elementwise from stream using \\'.\\' as delimiter.\\n        while(getline(s1, temp, \\'.\\'))\\n            v1.push_back(stoi(temp));\\n        while(getline(s2, temp, \\'.\\'))\\n            v2.push_back(stoi(temp));\\n        int i;\\n\\t\\t// Compare the vectors until we run out of elements in either.\\n        for (i = 0; i < v1.size() && i < v2.size(); ++i){\\n            if (v1[i] < v2[i]) return -1;\\n            if (v1[i] > v2[i]) return 1;\\n        }\\n\\t\\t// If the longer version string has a non-zero element after common elements, it is greater.\\n        for(;i < v1.size();++i)\\n            if (v1[i]) return 1;\\n        for(;i < v2.size();++i)\\n            if (v2[i]) return -1;\\n\\t\\t// The versions are equal if the code has gotten this far.\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n\\t    // Load version strings into streams.\\n        stringstream s1(version1), s2(version2);\\n\\t\\t// Two vectors to store the version numbers.\\n        vector<int> v1, v2;\\n        string temp;\\n\\t\\t// Extract elementwise from stream using \\'.\\' as delimiter.\\n        while(getline(s1, temp, \\'.\\'))\\n            v1.push_back(stoi(temp));\\n        while(getline(s2, temp, \\'.\\'))\\n            v2.push_back(stoi(temp));\\n        int i;\\n\\t\\t// Compare the vectors until we run out of elements in either.\\n        for (i = 0; i < v1.size() && i < v2.size(); ++i){\\n            if (v1[i] < v2[i]) return -1;\\n            if (v1[i] > v2[i]) return 1;\\n        }\\n\\t\\t// If the longer version string has a non-zero element after common elements, it is greater.\\n        for(;i < v1.size();++i)\\n            if (v1[i]) return 1;\\n        for(;i < v2.size();++i)\\n            if (v2[i]) return -1;\\n\\t\\t// The versions are equal if the code has gotten this far.\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 765509,
                "title": "c-solution",
                "content": "```\\nint compareVersion(string version1, string version2) {        \\n        \\n        //iterate over both the string simultaneously\\n        \\n        int s1 = 0;\\n        int s2 = 0;\\n        int len = version1.length() > version2.length()?version1.length() : version2.length();\\n        int i = 0;\\n        while (i < len) {\\n             \\n            int s1Num = 0;\\n            int s2Num = 0;\\n            \\n             while (s1 < version1.length() && version1[s1] != \\'.\\') {                 \\n                 s1Num = s1Num*10 + version1[s1] - \\'0\\';\\n                 s1++;                                 \\n             }   \\n            \\n            while (s2 < version2.length() && version2[s2] != \\'.\\') {                 \\n                 s2Num = s2Num*10 + version2[s2] - \\'0\\';\\n                 s2++;                                 \\n             }   \\n             \\n             s1++;\\n             s2++;\\n            \\n            if (s1Num < s2Num) return -1;\\n            if (s1Num > s2Num) return 1;\\n            \\n            i++;\\n        }\\n        return 0;\\n    }\\n\\t",
                "solutionTags": [],
                "code": "```\\nint compareVersion(string version1, string version2) {        \\n        \\n        //iterate over both the string simultaneously\\n        \\n        int s1 = 0;\\n        int s2 = 0;\\n        int len = version1.length() > version2.length()?version1.length() : version2.length();\\n        int i = 0;\\n        while (i < len) {\\n             \\n            int s1Num = 0;\\n            int s2Num = 0;\\n            \\n             while (s1 < version1.length() && version1[s1] != \\'.\\') {                 \\n                 s1Num = s1Num*10 + version1[s1] - \\'0\\';\\n                 s1++;                                 \\n             }   \\n            \\n            while (s2 < version2.length() && version2[s2] != \\'.\\') {                 \\n                 s2Num = s2Num*10 + version2[s2] - \\'0\\';\\n                 s2++;                                 \\n             }   \\n             \\n             s1++;\\n             s2++;\\n            \\n            if (s1Num < s2Num) return -1;\\n            if (s1Num > s2Num) return 1;\\n            \\n            i++;\\n        }\\n        return 0;\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 750634,
                "title": "simple-c-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    vector<int>solve(string version1,int len){\\n        vector<int> ans(len,0);\\n        int count=0;\\n        for(int i=0;i<version1.size();i++){\\n            if(version1[i]==\\'.\\'){\\n                count++;\\n                continue;\\n            }\\n            ans[count]=(ans[count]*10)+(version1[i]-\\'0\\');\\n            \\n        }\\n        return ans;\\n    }\\n    int compareVersion(string version1, string version2) {\\n        vector<int> a,b;\\n        int len=max(version1.length(),version2.length());\\n        a=solve(version1,len);\\n        b=solve(version2,len);\\n        for(int i=0;i<a.size();i++){\\n            if(a[i]<b[i]){\\n                return -1;\\n            }else if(a[i]>b[i]){\\n                return 1;\\n            }\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    vector<int>solve(string version1,int len){\\n        vector<int> ans(len,0);\\n        int count=0;\\n        for(int i=0;i<version1.size();i++){\\n            if(version1[i]==\\'.\\'){\\n                count++;\\n                continue;\\n            }\\n            ans[count]=(ans[count]*10)+(version1[i]-\\'0\\');\\n            \\n        }\\n        return ans;\\n    }\\n    int compareVersion(string version1, string version2) {\\n        vector<int> a,b;\\n        int len=max(version1.length(),version2.length());\\n        a=solve(version1,len);\\n        b=solve(version2,len);\\n        for(int i=0;i<a.size();i++){\\n            if(a[i]<b[i]){\\n                return -1;\\n            }else if(a[i]>b[i]){\\n                return 1;\\n            }\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 723681,
                "title": "rust-solution",
                "content": "```Rust\\nimpl Solution {\\n    pub fn compare_version(version1: String, version2: String) -> i32 {\\n        let mut version1 = version1\\n            .split(\\'.\\')\\n            .map(|n| n.parse().unwrap())\\n            .collect::<Vec<_>>();\\n        let mut version2 = version2\\n            .split(\\'.\\')\\n            .map(|n| n.parse().unwrap())\\n            .collect::<Vec<_>>();\\n\\n        while let Some(&0) = version1.last() {\\n            version1.pop();\\n        }\\n        while let Some(&0) = version2.last() {\\n            version2.pop();\\n        }\\n\\n        match version1.cmp(&version2) {\\n            std::cmp::Ordering::Greater => 1,\\n            std::cmp::Ordering::Less => -1,\\n            std::cmp::Ordering::Equal => 0,\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```Rust\\nimpl Solution {\\n    pub fn compare_version(version1: String, version2: String) -> i32 {\\n        let mut version1 = version1\\n            .split(\\'.\\')\\n            .map(|n| n.parse().unwrap())\\n            .collect::<Vec<_>>();\\n        let mut version2 = version2\\n            .split(\\'.\\')\\n            .map(|n| n.parse().unwrap())\\n            .collect::<Vec<_>>();\\n\\n        while let Some(&0) = version1.last() {\\n            version1.pop();\\n        }\\n        while let Some(&0) = version2.last() {\\n            version2.pop();\\n        }\\n\\n        match version1.cmp(&version2) {\\n            std::cmp::Ordering::Greater => 1,\\n            std::cmp::Ordering::Less => -1,\\n            std::cmp::Ordering::Equal => 0,\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 526404,
                "title": "java-clean-code-with-constant-space",
                "content": "**Analysis**\\n\\nTime : O(max(m, n)) for m and n being the length of the two strings\\nSpace : O(1)\\n\\n```java \\npublic int compareVersion(String version1, String version2) {\\n\\tint num1 = 0, num2 = 0, i = 0, j = 0;\\n\\n\\twhile (i < version1.length() || j < version2.length()) {\\n\\t\\twhile (i < version1.length() && version1.charAt(i) != \\'.\\')\\n\\t\\t\\tnum1 = num1 * 10 + Integer.valueOf(version1.charAt(i++) - \\'0\\');\\n\\t\\twhile (j < version2.length() && version2.charAt(j) != \\'.\\')\\n\\t\\t\\tnum2 = num2 * 10 + Integer.valueOf(version2.charAt(j++) - \\'0\\');\\n\\n\\t\\tif (num1 < num2) return -1;\\n\\t\\tif (num1 > num2) return 1;\\n\\n\\t\\ti++; j++;\\n\\n\\t\\tnum1 = num2 = 0;\\n\\t}\\n\\treturn 0;\\n}",
                "solutionTags": [],
                "code": "**Analysis**\\n\\nTime : O(max(m, n)) for m and n being the length of the two strings\\nSpace : O(1)\\n\\n```java \\npublic int compareVersion(String version1, String version2) {\\n\\tint num1 = 0, num2 = 0, i = 0, j = 0;\\n\\n\\twhile (i < version1.length() || j < version2.length()) {\\n\\t\\twhile (i < version1.length() && version1.charAt(i) != \\'.\\')\\n\\t\\t\\tnum1 = num1 * 10 + Integer.valueOf(version1.charAt(i++) - \\'0\\');\\n\\t\\twhile (j < version2.length() && version2.charAt(j) != \\'.\\')\\n\\t\\t\\tnum2 = num2 * 10 + Integer.valueOf(version2.charAt(j++) - \\'0\\');\\n\\n\\t\\tif (num1 < num2) return -1;\\n\\t\\tif (num1 > num2) return 1;\\n\\n\\t\\ti++; j++;\\n\\n\\t\\tnum1 = num2 = 0;\\n\\t}\\n\\treturn 0;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 443756,
                "title": "a-noob-but-working-java-solution-1ms",
                "content": "```\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n        String v1[] = version1.split(\"\\\\\\\\.\");\\n        String v2[] = version2.split(\"\\\\\\\\.\");\\n        \\n        int ver1[] = new int[(v1.length > v2.length ? v1.length : v2.length)];\\n        for(int i = 0; i < v1.length; i++) {\\n            ver1[i] = Integer.parseInt(v1[i]);\\n        }\\n       \\n        int ver2[] = new int[(v1.length > v2.length ? v1.length : v2.length)];\\n        for(int i = 0; i < v2.length; i++) {\\n            ver2[i] = Integer.parseInt(v2[i]);\\n        }\\n        //ver1 is integer array of version 1 digits\\n        //ver2 is integer array of version 2 digits\\n        int res = 0;\\n        for(int i = 0; i < (ver1.length > ver2.length ? ver1.length : ver2.length); i++) {\\n            if(ver1[i] == ver2[i])\\n                continue;\\n            if(ver1[i] > ver2[i]) {\\n                res = 1;\\n                return res;\\n            }\\n            if(ver1[i] < ver2[i]) {\\n                res = -1;\\n                return res;\\n            }\\n            res = 0;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n        String v1[] = version1.split(\"\\\\\\\\.\");\\n        String v2[] = version2.split(\"\\\\\\\\.\");\\n        \\n        int ver1[] = new int[(v1.length > v2.length ? v1.length : v2.length)];\\n        for(int i = 0; i < v1.length; i++) {\\n            ver1[i] = Integer.parseInt(v1[i]);\\n        }\\n       \\n        int ver2[] = new int[(v1.length > v2.length ? v1.length : v2.length)];\\n        for(int i = 0; i < v2.length; i++) {\\n            ver2[i] = Integer.parseInt(v2[i]);\\n        }\\n        //ver1 is integer array of version 1 digits\\n        //ver2 is integer array of version 2 digits\\n        int res = 0;\\n        for(int i = 0; i < (ver1.length > ver2.length ? ver1.length : ver2.length); i++) {\\n            if(ver1[i] == ver2[i])\\n                continue;\\n            if(ver1[i] > ver2[i]) {\\n                res = 1;\\n                return res;\\n            }\\n            if(ver1[i] < ver2[i]) {\\n                res = -1;\\n                return res;\\n            }\\n            res = 0;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 439904,
                "title": "c-very-easy-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        \\n        if(version1 == version2)\\n            return 0;\\n        \\n        vector<int> v1, v2;\\n        \\n        int c = 0;\\n        for(int i = 0; i < version1.length(); i++)\\n        {\\n            if(version1[i] == \\'.\\')\\n            {\\n                v1.push_back(c);\\n                c = 0;\\n            }\\n            else\\n            {\\n                c = c * 10 + version1[i] - \\'0\\';\\n            }\\n        }\\n        v1.push_back(c);\\n        \\n        c = 0;\\n        for(int i = 0; i < version2.length(); i++)\\n        {\\n            if(version2[i] == \\'.\\')\\n            {\\n                v2.push_back(c);\\n                c = 0;\\n            }\\n            else\\n            {\\n                c = c * 10 + version2[i] - \\'0\\';\\n            }\\n        }\\n        v2.push_back(c);\\n        \\n        while(v1.size() and v1.back() == 0)\\n            v1.pop_back();\\n        while(v2.size() and v2.back() == 0)\\n            v2.pop_back();\\n        \\n        int n = min(v1.size(), v2.size());\\n        for(int i = 0; i < n; i++)\\n        {\\n            if(v1[i] > v2[i])\\n                return 1;\\n            else if(v1[i] < v2[i])\\n                return -1;\\n        }\\n        \\n        if(v1.size() > v2.size())\\n            return 1;\\n        if(v1.size() < v2.size())\\n            return -1;\\n        \\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        \\n        if(version1 == version2)\\n            return 0;\\n        \\n        vector<int> v1, v2;\\n        \\n        int c = 0;\\n        for(int i = 0; i < version1.length(); i++)\\n        {\\n            if(version1[i] == \\'.\\')\\n            {\\n                v1.push_back(c);\\n                c = 0;\\n            }\\n            else\\n            {\\n                c = c * 10 + version1[i] - \\'0\\';\\n            }\\n        }\\n        v1.push_back(c);\\n        \\n        c = 0;\\n        for(int i = 0; i < version2.length(); i++)\\n        {\\n            if(version2[i] == \\'.\\')\\n            {\\n                v2.push_back(c);\\n                c = 0;\\n            }\\n            else\\n            {\\n                c = c * 10 + version2[i] - \\'0\\';\\n            }\\n        }\\n        v2.push_back(c);\\n        \\n        while(v1.size() and v1.back() == 0)\\n            v1.pop_back();\\n        while(v2.size() and v2.back() == 0)\\n            v2.pop_back();\\n        \\n        int n = min(v1.size(), v2.size());\\n        for(int i = 0; i < n; i++)\\n        {\\n            if(v1[i] > v2[i])\\n                return 1;\\n            else if(v1[i] < v2[i])\\n                return -1;\\n        }\\n        \\n        if(v1.size() > v2.size())\\n            return 1;\\n        if(v1.size() < v2.size())\\n            return -1;\\n        \\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 375851,
                "title": "compare-version-numbers-java-solution",
                "content": "```\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n        String[] ver1 = version1.split(\"\\\\\\\\.\");\\n        String[] ver2 = version2.split(\"\\\\\\\\.\");\\n        \\n        int i=0;\\n        while(i<ver1.length || i<ver2.length) {\\n            if(i<ver1.length && i<ver2.length) {\\n                if(Integer.parseInt(ver1[i])<Integer.parseInt(ver2[i])) {\\n                    return -1;\\n                }\\n                else if(Integer.parseInt(ver1[i])>Integer.parseInt(ver2[i])) {\\n                    return 1;\\n                }\\n            }\\n            \\n            else if(i<ver1.length) {\\n                if(Integer.parseInt(ver1[i])>0) {\\n                    return 1;\\n                }\\n            }\\n            else if(i<ver2.length) {\\n                if(Integer.parseInt(ver2[i])>0) {\\n                    return -1;\\n                }\\n            }\\n            \\n            i++;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int compareVersion(String version1, String version2) {\\n        String[] ver1 = version1.split(\"\\\\\\\\.\");\\n        String[] ver2 = version2.split(\"\\\\\\\\.\");\\n        \\n        int i=0;\\n        while(i<ver1.length || i<ver2.length) {\\n            if(i<ver1.length && i<ver2.length) {\\n                if(Integer.parseInt(ver1[i])<Integer.parseInt(ver2[i])) {\\n                    return -1;\\n                }\\n                else if(Integer.parseInt(ver1[i])>Integer.parseInt(ver2[i])) {\\n                    return 1;\\n                }\\n            }\\n            \\n            else if(i<ver1.length) {\\n                if(Integer.parseInt(ver1[i])>0) {\\n                    return 1;\\n                }\\n            }\\n            else if(i<ver2.length) {\\n                if(Integer.parseInt(ver2[i])>0) {\\n                    return -1;\\n                }\\n            }\\n            \\n            i++;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 353137,
                "title": "simple-with-js-7-line-99",
                "content": "```\\nvar compareVersion = function(version1, version2) {\\n  let v1 = version1.split(\".\")\\n  let v2 = version2.split(\".\")\\n\\n  while(v1.length || v2.length){\\n    let a = +v1.shift() || 0\\n    let b = +v2.shift() || 0\\n    if(a>b) return 1\\n    else if(b>a) return -1\\n  }\\n  return 0\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar compareVersion = function(version1, version2) {\\n  let v1 = version1.split(\".\")\\n  let v2 = version2.split(\".\")\\n\\n  while(v1.length || v2.length){\\n    let a = +v1.shift() || 0\\n    let b = +v2.shift() || 0\\n    if(a>b) return 1\\n    else if(b>a) return -1\\n  }\\n  return 0\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 331380,
                "title": "simple-javascript-solution-96-42",
                "content": "1. Convert versions to arrays of numbers\\n2. Pad smaller length array with zeros at the end\\n3. convert both arrays of numbers to actual integers\\n4. apply comparison in problem description\\n\\n```\\nvar compareVersion = function(version1, version2) {\\n    let nums1 = version1.split(\\'.\\').map(Number);\\n    let nums2 = version2.split(\\'.\\').map(Number);\\n    if (nums1.length > nums2.length) {\\n        while(nums1.length !== nums2.length) {\\n            nums2.push(0);\\n        }\\n    }\\n    if (nums1.length < nums2.length) {\\n        while(nums1.length !== nums2.length) {\\n            nums1.push(0);\\n        }\\n    }\\n    let number1 = +nums1.join(\\'\\');\\n    let number2 = +nums2.join(\\'\\');\\n    return number1 > number2 ? 1 : number1 < number2 ? -1 : 0;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar compareVersion = function(version1, version2) {\\n    let nums1 = version1.split(\\'.\\').map(Number);\\n    let nums2 = version2.split(\\'.\\').map(Number);\\n    if (nums1.length > nums2.length) {\\n        while(nums1.length !== nums2.length) {\\n            nums2.push(0);\\n        }\\n    }\\n    if (nums1.length < nums2.length) {\\n        while(nums1.length !== nums2.length) {\\n            nums1.push(0);\\n        }\\n    }\\n    let number1 = +nums1.join(\\'\\');\\n    let number2 = +nums2.join(\\'\\');\\n    return number1 > number2 ? 1 : number1 < number2 ? -1 : 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 306266,
                "title": "concise-c-solution-100-time",
                "content": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        \\n        auto getVersionVec = [](string& s) {\\n            istringstream ss(s);\\n            string t;\\n            vector<int> v;\\n            while (getline(ss, t, \\'.\\')) {\\n                v.push_back(stoi(t));\\n            }\\n            return v;\\n        };\\n        \\n        auto v1 = getVersionVec(version1), v2 = getVersionVec(version2);\\n        while (v1.size() != v2.size()) {\\n            (v1.size() < v2.size()? v1 : v2).push_back(0);\\n        }\\n        if (v1 == v2)\\n            return 0;\\n        return v1 > v2? 1 : -1;        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        \\n        auto getVersionVec = [](string& s) {\\n            istringstream ss(s);\\n            string t;\\n            vector<int> v;\\n            while (getline(ss, t, \\'.\\')) {\\n                v.push_back(stoi(t));\\n            }\\n            return v;\\n        };\\n        \\n        auto v1 = getVersionVec(version1), v2 = getVersionVec(version2);\\n        while (v1.size() != v2.size()) {\\n            (v1.size() < v2.size()? v1 : v2).push_back(0);\\n        }\\n        if (v1 == v2)\\n            return 0;\\n        return v1 > v2? 1 : -1;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1564570,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1565116,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1573367,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1567218,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1565926,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1573308,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1568074,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1568992,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1571964,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1571362,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1564570,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1565116,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1573367,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1567218,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1565926,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1573308,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1568074,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1568992,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1571964,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1571362,
                "content": [
                    {
                        "username": "why2013",
                        "content": "Why would anyone have a version number of:\\n\"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000\"\\n\\nThis guy must be bored to hell."
                    },
                    {
                        "username": "unboundval",
                        "content": "The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a **major.minor** format, which is not the case. \\n\\nWithout a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests."
                    },
                    {
                        "username": "tanmayub",
                        "content": "Should be someting of a Super Easy category!"
                    },
                    {
                        "username": "rabeeh",
                        "content": "Hi, to me problem statement is super unclear and vague, can someone explain more with more testcases?"
                    },
                    {
                        "username": "imprinceyadav",
                        "content": "[@Anshul29](/Anshul29)  bhai kuch log jo abhi confuse h unki to problem door hogi"
                    },
                    {
                        "username": "Anshul29",
                        "content": "[@mayankK135](/mayankK135) bro you\\'re replying after 8 years. Is she even coding right now?"
                    },
                    {
                        "username": "mayankK135",
                        "content": "It\\'s quite simple, just seprate both the strings at \\'.\\' and parse from left to right and return a[i]>b[i].\\nif you are still looking for the solution."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/compare-version-numbers/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Split + Parse, Two Pass\n\n  \n**Approach 2:** Two Pointers, One Pass\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nick_nick_go",
                        "content": "Why is this a Medium Problem Again ? Looks like easiest easy problem."
                    },
                    {
                        "username": "JPV",
                        "content": "It seems to me that \"3.3.0\" comes after \"3.3\"; it has a whole extra level!  If the problem wants those to be treated as identical, then it should say so.  It sure doesn\\'t say so now."
                    },
                    {
                        "username": "gabrielwentw",
                        "content": "I got a very weird result, which only make sense when I misunderstand the meaning of version number...\\n\\nInput:\\t\"1.2\", \"1.10\"\\nOutput:\\t1\\nExpected:\\t-1\\n\\nSo, is v1.2 < v1.10?"
                    },
                    {
                        "username": "godshiva",
                        "content": "Yes, because 10 > 2"
                    },
                    {
                        "username": "nitin135",
                        "content": "In my opinion the problem description is not clear enough and ambigous. Version strings are normally restrictied in number of digits also because  1.1 and 01.01 may or may not be interpretted differently based upon the version string definition, there is no description on how to interpret such scenarios. I am not sure how to report it to leetcode , if anybody knows then please comment here.\\nthank you."
                    },
                    {
                        "username": "pdgetrf",
                        "content": "If \"1\" \"0\" is one test case, please do not say \"You may assume that the version strings are non-empty\" in the description"
                    }
                ]
            },
            {
                "id": 1571360,
                "content": [
                    {
                        "username": "spark656",
                        "content": "why version 1.01 and 1.1 are the same??"
                    },
                    {
                        "username": "user4956Yw",
                        "content": "because after decimal , 01 AND 1 both equifies to 1;"
                    },
                    {
                        "username": "torridtiger",
                        "content": "Test case  \"1.10\" and  \"1.1\" says result is 1, but I think it should be 0."
                    },
                    {
                        "username": "dinhcongcanh272",
                        "content": "version1 = 1.05\\nversion2 = 1.1\\n.05 leading by 0. why the expected is 1?"
                    },
                    {
                        "username": "riyalguha",
                        "content": "why is the output for 1.1 and 1.10  is -1"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>1."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "100%\\n\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0,v1len=version1.size(),v2len=version2.size(),n1,n2;\\n        while(i<v1len||j<v2len){\\n            n1=0;\\n            n2=0;\\n            while(i<v1len&&version1[i]!=\\'.\\'){\\n                n1=n1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n             while(j<v2len&&version2[j]!=\\'.\\'){\\n                n2=n2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(n1>n2){\\n                return 1;\\n            }\\n            else if(n1<n2){\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "shivaprashad2003",
                        "content": "can we do it using charAt() ?\\n"
                    },
                    {
                        "username": "arunchau986",
                        "content": "version1 = \"1.2\"\\nversion2 = \"1.10\"\\nAnswer for this is 1\\nBut complier showing -1.\\nCan anybody help me"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>2."
                    },
                    {
                        "username": "kewlpopo",
                        "content": "this should be changed to an easy. It\\'s essentially just comparing elements of the same position in two arrays "
                    },
                    {
                        "username": "Zhe_FunCoding",
                        "content": "Quite confusing description.\\nTips\\n- Basically you\\'re asked to tokenize two strings. Align those tokens from LEFT TO RIGHT. In terms of position in an array, it\\'s most likely low to high.\\n- if one string is shorter then the other, you can pad 0s to its end.\\n\\nGood luck\\n\\n"
                    },
                    {
                        "username": "charlesxiao2",
                        "content": "Arista Networks is a poor company. It sucks more than Cisco. Don\\'t go there."
                    }
                ]
            },
            {
                "id": 1571361,
                "content": [
                    {
                        "username": "spark656",
                        "content": "why version 1.01 and 1.1 are the same??"
                    },
                    {
                        "username": "user4956Yw",
                        "content": "because after decimal , 01 AND 1 both equifies to 1;"
                    },
                    {
                        "username": "torridtiger",
                        "content": "Test case  \"1.10\" and  \"1.1\" says result is 1, but I think it should be 0."
                    },
                    {
                        "username": "dinhcongcanh272",
                        "content": "version1 = 1.05\\nversion2 = 1.1\\n.05 leading by 0. why the expected is 1?"
                    },
                    {
                        "username": "riyalguha",
                        "content": "why is the output for 1.1 and 1.10  is -1"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>1."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "100%\\n\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0,v1len=version1.size(),v2len=version2.size(),n1,n2;\\n        while(i<v1len||j<v2len){\\n            n1=0;\\n            n2=0;\\n            while(i<v1len&&version1[i]!=\\'.\\'){\\n                n1=n1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n             while(j<v2len&&version2[j]!=\\'.\\'){\\n                n2=n2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(n1>n2){\\n                return 1;\\n            }\\n            else if(n1<n2){\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "shivaprashad2003",
                        "content": "can we do it using charAt() ?\\n"
                    },
                    {
                        "username": "arunchau986",
                        "content": "version1 = \"1.2\"\\nversion2 = \"1.10\"\\nAnswer for this is 1\\nBut complier showing -1.\\nCan anybody help me"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>2."
                    },
                    {
                        "username": "kewlpopo",
                        "content": "this should be changed to an easy. It\\'s essentially just comparing elements of the same position in two arrays "
                    },
                    {
                        "username": "Zhe_FunCoding",
                        "content": "Quite confusing description.\\nTips\\n- Basically you\\'re asked to tokenize two strings. Align those tokens from LEFT TO RIGHT. In terms of position in an array, it\\'s most likely low to high.\\n- if one string is shorter then the other, you can pad 0s to its end.\\n\\nGood luck\\n\\n"
                    },
                    {
                        "username": "charlesxiao2",
                        "content": "Arista Networks is a poor company. It sucks more than Cisco. Don\\'t go there."
                    }
                ]
            },
            {
                "id": 2068141,
                "content": [
                    {
                        "username": "spark656",
                        "content": "why version 1.01 and 1.1 are the same??"
                    },
                    {
                        "username": "user4956Yw",
                        "content": "because after decimal , 01 AND 1 both equifies to 1;"
                    },
                    {
                        "username": "torridtiger",
                        "content": "Test case  \"1.10\" and  \"1.1\" says result is 1, but I think it should be 0."
                    },
                    {
                        "username": "dinhcongcanh272",
                        "content": "version1 = 1.05\\nversion2 = 1.1\\n.05 leading by 0. why the expected is 1?"
                    },
                    {
                        "username": "riyalguha",
                        "content": "why is the output for 1.1 and 1.10  is -1"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>1."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "100%\\n\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0,v1len=version1.size(),v2len=version2.size(),n1,n2;\\n        while(i<v1len||j<v2len){\\n            n1=0;\\n            n2=0;\\n            while(i<v1len&&version1[i]!=\\'.\\'){\\n                n1=n1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n             while(j<v2len&&version2[j]!=\\'.\\'){\\n                n2=n2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(n1>n2){\\n                return 1;\\n            }\\n            else if(n1<n2){\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "shivaprashad2003",
                        "content": "can we do it using charAt() ?\\n"
                    },
                    {
                        "username": "arunchau986",
                        "content": "version1 = \"1.2\"\\nversion2 = \"1.10\"\\nAnswer for this is 1\\nBut complier showing -1.\\nCan anybody help me"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>2."
                    },
                    {
                        "username": "kewlpopo",
                        "content": "this should be changed to an easy. It\\'s essentially just comparing elements of the same position in two arrays "
                    },
                    {
                        "username": "Zhe_FunCoding",
                        "content": "Quite confusing description.\\nTips\\n- Basically you\\'re asked to tokenize two strings. Align those tokens from LEFT TO RIGHT. In terms of position in an array, it\\'s most likely low to high.\\n- if one string is shorter then the other, you can pad 0s to its end.\\n\\nGood luck\\n\\n"
                    },
                    {
                        "username": "charlesxiao2",
                        "content": "Arista Networks is a poor company. It sucks more than Cisco. Don\\'t go there."
                    }
                ]
            },
            {
                "id": 1866892,
                "content": [
                    {
                        "username": "spark656",
                        "content": "why version 1.01 and 1.1 are the same??"
                    },
                    {
                        "username": "user4956Yw",
                        "content": "because after decimal , 01 AND 1 both equifies to 1;"
                    },
                    {
                        "username": "torridtiger",
                        "content": "Test case  \"1.10\" and  \"1.1\" says result is 1, but I think it should be 0."
                    },
                    {
                        "username": "dinhcongcanh272",
                        "content": "version1 = 1.05\\nversion2 = 1.1\\n.05 leading by 0. why the expected is 1?"
                    },
                    {
                        "username": "riyalguha",
                        "content": "why is the output for 1.1 and 1.10  is -1"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>1."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "100%\\n\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0,v1len=version1.size(),v2len=version2.size(),n1,n2;\\n        while(i<v1len||j<v2len){\\n            n1=0;\\n            n2=0;\\n            while(i<v1len&&version1[i]!=\\'.\\'){\\n                n1=n1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n             while(j<v2len&&version2[j]!=\\'.\\'){\\n                n2=n2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(n1>n2){\\n                return 1;\\n            }\\n            else if(n1<n2){\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "shivaprashad2003",
                        "content": "can we do it using charAt() ?\\n"
                    },
                    {
                        "username": "arunchau986",
                        "content": "version1 = \"1.2\"\\nversion2 = \"1.10\"\\nAnswer for this is 1\\nBut complier showing -1.\\nCan anybody help me"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>2."
                    },
                    {
                        "username": "kewlpopo",
                        "content": "this should be changed to an easy. It\\'s essentially just comparing elements of the same position in two arrays "
                    },
                    {
                        "username": "Zhe_FunCoding",
                        "content": "Quite confusing description.\\nTips\\n- Basically you\\'re asked to tokenize two strings. Align those tokens from LEFT TO RIGHT. In terms of position in an array, it\\'s most likely low to high.\\n- if one string is shorter then the other, you can pad 0s to its end.\\n\\nGood luck\\n\\n"
                    },
                    {
                        "username": "charlesxiao2",
                        "content": "Arista Networks is a poor company. It sucks more than Cisco. Don\\'t go there."
                    }
                ]
            },
            {
                "id": 1777706,
                "content": [
                    {
                        "username": "spark656",
                        "content": "why version 1.01 and 1.1 are the same??"
                    },
                    {
                        "username": "user4956Yw",
                        "content": "because after decimal , 01 AND 1 both equifies to 1;"
                    },
                    {
                        "username": "torridtiger",
                        "content": "Test case  \"1.10\" and  \"1.1\" says result is 1, but I think it should be 0."
                    },
                    {
                        "username": "dinhcongcanh272",
                        "content": "version1 = 1.05\\nversion2 = 1.1\\n.05 leading by 0. why the expected is 1?"
                    },
                    {
                        "username": "riyalguha",
                        "content": "why is the output for 1.1 and 1.10  is -1"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>1."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "100%\\n\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0,v1len=version1.size(),v2len=version2.size(),n1,n2;\\n        while(i<v1len||j<v2len){\\n            n1=0;\\n            n2=0;\\n            while(i<v1len&&version1[i]!=\\'.\\'){\\n                n1=n1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n             while(j<v2len&&version2[j]!=\\'.\\'){\\n                n2=n2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(n1>n2){\\n                return 1;\\n            }\\n            else if(n1<n2){\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "shivaprashad2003",
                        "content": "can we do it using charAt() ?\\n"
                    },
                    {
                        "username": "arunchau986",
                        "content": "version1 = \"1.2\"\\nversion2 = \"1.10\"\\nAnswer for this is 1\\nBut complier showing -1.\\nCan anybody help me"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>2."
                    },
                    {
                        "username": "kewlpopo",
                        "content": "this should be changed to an easy. It\\'s essentially just comparing elements of the same position in two arrays "
                    },
                    {
                        "username": "Zhe_FunCoding",
                        "content": "Quite confusing description.\\nTips\\n- Basically you\\'re asked to tokenize two strings. Align those tokens from LEFT TO RIGHT. In terms of position in an array, it\\'s most likely low to high.\\n- if one string is shorter then the other, you can pad 0s to its end.\\n\\nGood luck\\n\\n"
                    },
                    {
                        "username": "charlesxiao2",
                        "content": "Arista Networks is a poor company. It sucks more than Cisco. Don\\'t go there."
                    }
                ]
            },
            {
                "id": 1765212,
                "content": [
                    {
                        "username": "spark656",
                        "content": "why version 1.01 and 1.1 are the same??"
                    },
                    {
                        "username": "user4956Yw",
                        "content": "because after decimal , 01 AND 1 both equifies to 1;"
                    },
                    {
                        "username": "torridtiger",
                        "content": "Test case  \"1.10\" and  \"1.1\" says result is 1, but I think it should be 0."
                    },
                    {
                        "username": "dinhcongcanh272",
                        "content": "version1 = 1.05\\nversion2 = 1.1\\n.05 leading by 0. why the expected is 1?"
                    },
                    {
                        "username": "riyalguha",
                        "content": "why is the output for 1.1 and 1.10  is -1"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>1."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "100%\\n\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0,v1len=version1.size(),v2len=version2.size(),n1,n2;\\n        while(i<v1len||j<v2len){\\n            n1=0;\\n            n2=0;\\n            while(i<v1len&&version1[i]!=\\'.\\'){\\n                n1=n1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n             while(j<v2len&&version2[j]!=\\'.\\'){\\n                n2=n2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(n1>n2){\\n                return 1;\\n            }\\n            else if(n1<n2){\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "shivaprashad2003",
                        "content": "can we do it using charAt() ?\\n"
                    },
                    {
                        "username": "arunchau986",
                        "content": "version1 = \"1.2\"\\nversion2 = \"1.10\"\\nAnswer for this is 1\\nBut complier showing -1.\\nCan anybody help me"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>2."
                    },
                    {
                        "username": "kewlpopo",
                        "content": "this should be changed to an easy. It\\'s essentially just comparing elements of the same position in two arrays "
                    },
                    {
                        "username": "Zhe_FunCoding",
                        "content": "Quite confusing description.\\nTips\\n- Basically you\\'re asked to tokenize two strings. Align those tokens from LEFT TO RIGHT. In terms of position in an array, it\\'s most likely low to high.\\n- if one string is shorter then the other, you can pad 0s to its end.\\n\\nGood luck\\n\\n"
                    },
                    {
                        "username": "charlesxiao2",
                        "content": "Arista Networks is a poor company. It sucks more than Cisco. Don\\'t go there."
                    }
                ]
            },
            {
                "id": 1722360,
                "content": [
                    {
                        "username": "spark656",
                        "content": "why version 1.01 and 1.1 are the same??"
                    },
                    {
                        "username": "user4956Yw",
                        "content": "because after decimal , 01 AND 1 both equifies to 1;"
                    },
                    {
                        "username": "torridtiger",
                        "content": "Test case  \"1.10\" and  \"1.1\" says result is 1, but I think it should be 0."
                    },
                    {
                        "username": "dinhcongcanh272",
                        "content": "version1 = 1.05\\nversion2 = 1.1\\n.05 leading by 0. why the expected is 1?"
                    },
                    {
                        "username": "riyalguha",
                        "content": "why is the output for 1.1 and 1.10  is -1"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>1."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "100%\\n\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0,v1len=version1.size(),v2len=version2.size(),n1,n2;\\n        while(i<v1len||j<v2len){\\n            n1=0;\\n            n2=0;\\n            while(i<v1len&&version1[i]!=\\'.\\'){\\n                n1=n1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n             while(j<v2len&&version2[j]!=\\'.\\'){\\n                n2=n2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(n1>n2){\\n                return 1;\\n            }\\n            else if(n1<n2){\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "shivaprashad2003",
                        "content": "can we do it using charAt() ?\\n"
                    },
                    {
                        "username": "arunchau986",
                        "content": "version1 = \"1.2\"\\nversion2 = \"1.10\"\\nAnswer for this is 1\\nBut complier showing -1.\\nCan anybody help me"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>2."
                    },
                    {
                        "username": "kewlpopo",
                        "content": "this should be changed to an easy. It\\'s essentially just comparing elements of the same position in two arrays "
                    },
                    {
                        "username": "Zhe_FunCoding",
                        "content": "Quite confusing description.\\nTips\\n- Basically you\\'re asked to tokenize two strings. Align those tokens from LEFT TO RIGHT. In terms of position in an array, it\\'s most likely low to high.\\n- if one string is shorter then the other, you can pad 0s to its end.\\n\\nGood luck\\n\\n"
                    },
                    {
                        "username": "charlesxiao2",
                        "content": "Arista Networks is a poor company. It sucks more than Cisco. Don\\'t go there."
                    }
                ]
            },
            {
                "id": 1711249,
                "content": [
                    {
                        "username": "spark656",
                        "content": "why version 1.01 and 1.1 are the same??"
                    },
                    {
                        "username": "user4956Yw",
                        "content": "because after decimal , 01 AND 1 both equifies to 1;"
                    },
                    {
                        "username": "torridtiger",
                        "content": "Test case  \"1.10\" and  \"1.1\" says result is 1, but I think it should be 0."
                    },
                    {
                        "username": "dinhcongcanh272",
                        "content": "version1 = 1.05\\nversion2 = 1.1\\n.05 leading by 0. why the expected is 1?"
                    },
                    {
                        "username": "riyalguha",
                        "content": "why is the output for 1.1 and 1.10  is -1"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>1."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "100%\\n\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0,v1len=version1.size(),v2len=version2.size(),n1,n2;\\n        while(i<v1len||j<v2len){\\n            n1=0;\\n            n2=0;\\n            while(i<v1len&&version1[i]!=\\'.\\'){\\n                n1=n1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n             while(j<v2len&&version2[j]!=\\'.\\'){\\n                n2=n2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(n1>n2){\\n                return 1;\\n            }\\n            else if(n1<n2){\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "shivaprashad2003",
                        "content": "can we do it using charAt() ?\\n"
                    },
                    {
                        "username": "arunchau986",
                        "content": "version1 = \"1.2\"\\nversion2 = \"1.10\"\\nAnswer for this is 1\\nBut complier showing -1.\\nCan anybody help me"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>2."
                    },
                    {
                        "username": "kewlpopo",
                        "content": "this should be changed to an easy. It\\'s essentially just comparing elements of the same position in two arrays "
                    },
                    {
                        "username": "Zhe_FunCoding",
                        "content": "Quite confusing description.\\nTips\\n- Basically you\\'re asked to tokenize two strings. Align those tokens from LEFT TO RIGHT. In terms of position in an array, it\\'s most likely low to high.\\n- if one string is shorter then the other, you can pad 0s to its end.\\n\\nGood luck\\n\\n"
                    },
                    {
                        "username": "charlesxiao2",
                        "content": "Arista Networks is a poor company. It sucks more than Cisco. Don\\'t go there."
                    }
                ]
            },
            {
                "id": 1711227,
                "content": [
                    {
                        "username": "spark656",
                        "content": "why version 1.01 and 1.1 are the same??"
                    },
                    {
                        "username": "user4956Yw",
                        "content": "because after decimal , 01 AND 1 both equifies to 1;"
                    },
                    {
                        "username": "torridtiger",
                        "content": "Test case  \"1.10\" and  \"1.1\" says result is 1, but I think it should be 0."
                    },
                    {
                        "username": "dinhcongcanh272",
                        "content": "version1 = 1.05\\nversion2 = 1.1\\n.05 leading by 0. why the expected is 1?"
                    },
                    {
                        "username": "riyalguha",
                        "content": "why is the output for 1.1 and 1.10  is -1"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>1."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "100%\\n\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0,v1len=version1.size(),v2len=version2.size(),n1,n2;\\n        while(i<v1len||j<v2len){\\n            n1=0;\\n            n2=0;\\n            while(i<v1len&&version1[i]!=\\'.\\'){\\n                n1=n1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n             while(j<v2len&&version2[j]!=\\'.\\'){\\n                n2=n2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(n1>n2){\\n                return 1;\\n            }\\n            else if(n1<n2){\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "shivaprashad2003",
                        "content": "can we do it using charAt() ?\\n"
                    },
                    {
                        "username": "arunchau986",
                        "content": "version1 = \"1.2\"\\nversion2 = \"1.10\"\\nAnswer for this is 1\\nBut complier showing -1.\\nCan anybody help me"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>2."
                    },
                    {
                        "username": "kewlpopo",
                        "content": "this should be changed to an easy. It\\'s essentially just comparing elements of the same position in two arrays "
                    },
                    {
                        "username": "Zhe_FunCoding",
                        "content": "Quite confusing description.\\nTips\\n- Basically you\\'re asked to tokenize two strings. Align those tokens from LEFT TO RIGHT. In terms of position in an array, it\\'s most likely low to high.\\n- if one string is shorter then the other, you can pad 0s to its end.\\n\\nGood luck\\n\\n"
                    },
                    {
                        "username": "charlesxiao2",
                        "content": "Arista Networks is a poor company. It sucks more than Cisco. Don\\'t go there."
                    }
                ]
            },
            {
                "id": 1573047,
                "content": [
                    {
                        "username": "spark656",
                        "content": "why version 1.01 and 1.1 are the same??"
                    },
                    {
                        "username": "user4956Yw",
                        "content": "because after decimal , 01 AND 1 both equifies to 1;"
                    },
                    {
                        "username": "torridtiger",
                        "content": "Test case  \"1.10\" and  \"1.1\" says result is 1, but I think it should be 0."
                    },
                    {
                        "username": "dinhcongcanh272",
                        "content": "version1 = 1.05\\nversion2 = 1.1\\n.05 leading by 0. why the expected is 1?"
                    },
                    {
                        "username": "riyalguha",
                        "content": "why is the output for 1.1 and 1.10  is -1"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>1."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "100%\\n\\nclass Solution {\\npublic:\\n    int compareVersion(string version1, string version2) {\\n        int i=0,j=0,v1len=version1.size(),v2len=version2.size(),n1,n2;\\n        while(i<v1len||j<v2len){\\n            n1=0;\\n            n2=0;\\n            while(i<v1len&&version1[i]!=\\'.\\'){\\n                n1=n1*10+(version1[i]-\\'0\\');\\n                i++;\\n            }\\n             while(j<v2len&&version2[j]!=\\'.\\'){\\n                n2=n2*10+(version2[j]-\\'0\\');\\n                j++;\\n            }\\n            if(n1>n2){\\n                return 1;\\n            }\\n            else if(n1<n2){\\n                return -1;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return 0;\\n    }\\n};"
                    },
                    {
                        "username": "shivaprashad2003",
                        "content": "can we do it using charAt() ?\\n"
                    },
                    {
                        "username": "arunchau986",
                        "content": "version1 = \"1.2\"\\nversion2 = \"1.10\"\\nAnswer for this is 1\\nBut complier showing -1.\\nCan anybody help me"
                    },
                    {
                        "username": "HaramritSingh",
                        "content": "Because 10>2."
                    },
                    {
                        "username": "kewlpopo",
                        "content": "this should be changed to an easy. It\\'s essentially just comparing elements of the same position in two arrays "
                    },
                    {
                        "username": "Zhe_FunCoding",
                        "content": "Quite confusing description.\\nTips\\n- Basically you\\'re asked to tokenize two strings. Align those tokens from LEFT TO RIGHT. In terms of position in an array, it\\'s most likely low to high.\\n- if one string is shorter then the other, you can pad 0s to its end.\\n\\nGood luck\\n\\n"
                    },
                    {
                        "username": "charlesxiao2",
                        "content": "Arista Networks is a poor company. It sucks more than Cisco. Don\\'t go there."
                    }
                ]
            }
        ]
    },
    {
        "title": "Paint House II",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1572459,
                "content": [
                    {
                        "username": "leperking0909",
                        "content": "One possible follow up in interview: What if all houses are in cycle?\\n\\nAnyone has any idea?"
                    },
                    {
                        "username": "AymenDaoudi",
                        "content": "You would need a 3rd stat variable that you would pass to your recursive function, this 3rd variable is each time the selected color of the house 0, once you reach the house m - 1, you don\\'t skip only the color that was taken before, but also the color that was first chosen for the house 0, which is the next house."
                    },
                    {
                        "username": "1ncu804u",
                        "content": "start from 0 and start from 1"
                    },
                    {
                        "username": "1ncu804u",
                        "content": "if paint house is like the same why this is a hard ?"
                    },
                    {
                        "username": "DuckyShine04",
                        "content": "Agreed, this is basically paint house 1, except k is arbitrary. Interesting..."
                    },
                    {
                        "username": "roygarcia",
                        "content": "lol yeah i was confused because when i saw my solution for Paint House I, i was like... \"this should work? oh shoot yeah it does\""
                    },
                    {
                        "username": "IWantToPass",
                        "content": "I feel like the O(nk) time solution is pretty hard to come up with in an interview, but the O(nk^2) solution is easier. Would we actually be expected to get the O(nk) solution in facebook interview? Did anyone pass with giving the O(nk^2) solution?"
                    },
                    {
                        "username": "AlecLC",
                        "content": "This is pretty easy for a hard. The better ways to solve it are pretty ridiculous but basic DP does the job just fine"
                    },
                    {
                        "username": "an5dy90",
                        "content": "It\\'s the same level of difficulty with paint house. "
                    },
                    {
                        "username": "Lipox",
                        "content": "Hard \\xD7\\nEasy one in Medium \\u2714"
                    },
                    {
                        "username": "daring-calf",
                        "content": "This is a decent crazy hard DP problem."
                    },
                    {
                        "username": "botan",
                        "content": "I feel like DP is an unnecessary overcomplication of this task.\\nIsn\\'t the approach of finding the locally optimal choice - **greedy**?\\nIt\\'s quite clear from the start that we\\'re only interested in the neighbours of every house, and there is no need to store values for the entire house row."
                    }
                ]
            },
            {
                "id": 1718651,
                "content": [
                    {
                        "username": "leperking0909",
                        "content": "One possible follow up in interview: What if all houses are in cycle?\\n\\nAnyone has any idea?"
                    },
                    {
                        "username": "AymenDaoudi",
                        "content": "You would need a 3rd stat variable that you would pass to your recursive function, this 3rd variable is each time the selected color of the house 0, once you reach the house m - 1, you don\\'t skip only the color that was taken before, but also the color that was first chosen for the house 0, which is the next house."
                    },
                    {
                        "username": "1ncu804u",
                        "content": "start from 0 and start from 1"
                    },
                    {
                        "username": "1ncu804u",
                        "content": "if paint house is like the same why this is a hard ?"
                    },
                    {
                        "username": "DuckyShine04",
                        "content": "Agreed, this is basically paint house 1, except k is arbitrary. Interesting..."
                    },
                    {
                        "username": "roygarcia",
                        "content": "lol yeah i was confused because when i saw my solution for Paint House I, i was like... \"this should work? oh shoot yeah it does\""
                    },
                    {
                        "username": "IWantToPass",
                        "content": "I feel like the O(nk) time solution is pretty hard to come up with in an interview, but the O(nk^2) solution is easier. Would we actually be expected to get the O(nk) solution in facebook interview? Did anyone pass with giving the O(nk^2) solution?"
                    },
                    {
                        "username": "AlecLC",
                        "content": "This is pretty easy for a hard. The better ways to solve it are pretty ridiculous but basic DP does the job just fine"
                    },
                    {
                        "username": "an5dy90",
                        "content": "It\\'s the same level of difficulty with paint house. "
                    },
                    {
                        "username": "Lipox",
                        "content": "Hard \\xD7\\nEasy one in Medium \\u2714"
                    },
                    {
                        "username": "daring-calf",
                        "content": "This is a decent crazy hard DP problem."
                    },
                    {
                        "username": "botan",
                        "content": "I feel like DP is an unnecessary overcomplication of this task.\\nIsn\\'t the approach of finding the locally optimal choice - **greedy**?\\nIt\\'s quite clear from the start that we\\'re only interested in the neighbours of every house, and there is no need to store values for the entire house row."
                    }
                ]
            },
            {
                "id": 1566772,
                "content": [
                    {
                        "username": "leperking0909",
                        "content": "One possible follow up in interview: What if all houses are in cycle?\\n\\nAnyone has any idea?"
                    },
                    {
                        "username": "AymenDaoudi",
                        "content": "You would need a 3rd stat variable that you would pass to your recursive function, this 3rd variable is each time the selected color of the house 0, once you reach the house m - 1, you don\\'t skip only the color that was taken before, but also the color that was first chosen for the house 0, which is the next house."
                    },
                    {
                        "username": "1ncu804u",
                        "content": "start from 0 and start from 1"
                    },
                    {
                        "username": "1ncu804u",
                        "content": "if paint house is like the same why this is a hard ?"
                    },
                    {
                        "username": "DuckyShine04",
                        "content": "Agreed, this is basically paint house 1, except k is arbitrary. Interesting..."
                    },
                    {
                        "username": "roygarcia",
                        "content": "lol yeah i was confused because when i saw my solution for Paint House I, i was like... \"this should work? oh shoot yeah it does\""
                    },
                    {
                        "username": "IWantToPass",
                        "content": "I feel like the O(nk) time solution is pretty hard to come up with in an interview, but the O(nk^2) solution is easier. Would we actually be expected to get the O(nk) solution in facebook interview? Did anyone pass with giving the O(nk^2) solution?"
                    },
                    {
                        "username": "AlecLC",
                        "content": "This is pretty easy for a hard. The better ways to solve it are pretty ridiculous but basic DP does the job just fine"
                    },
                    {
                        "username": "an5dy90",
                        "content": "It\\'s the same level of difficulty with paint house. "
                    },
                    {
                        "username": "Lipox",
                        "content": "Hard \\xD7\\nEasy one in Medium \\u2714"
                    },
                    {
                        "username": "daring-calf",
                        "content": "This is a decent crazy hard DP problem."
                    },
                    {
                        "username": "botan",
                        "content": "I feel like DP is an unnecessary overcomplication of this task.\\nIsn\\'t the approach of finding the locally optimal choice - **greedy**?\\nIt\\'s quite clear from the start that we\\'re only interested in the neighbours of every house, and there is no need to store values for the entire house row."
                    }
                ]
            },
            {
                "id": 1799150,
                "content": [
                    {
                        "username": "leperking0909",
                        "content": "One possible follow up in interview: What if all houses are in cycle?\\n\\nAnyone has any idea?"
                    },
                    {
                        "username": "AymenDaoudi",
                        "content": "You would need a 3rd stat variable that you would pass to your recursive function, this 3rd variable is each time the selected color of the house 0, once you reach the house m - 1, you don\\'t skip only the color that was taken before, but also the color that was first chosen for the house 0, which is the next house."
                    },
                    {
                        "username": "1ncu804u",
                        "content": "start from 0 and start from 1"
                    },
                    {
                        "username": "1ncu804u",
                        "content": "if paint house is like the same why this is a hard ?"
                    },
                    {
                        "username": "DuckyShine04",
                        "content": "Agreed, this is basically paint house 1, except k is arbitrary. Interesting..."
                    },
                    {
                        "username": "roygarcia",
                        "content": "lol yeah i was confused because when i saw my solution for Paint House I, i was like... \"this should work? oh shoot yeah it does\""
                    },
                    {
                        "username": "IWantToPass",
                        "content": "I feel like the O(nk) time solution is pretty hard to come up with in an interview, but the O(nk^2) solution is easier. Would we actually be expected to get the O(nk) solution in facebook interview? Did anyone pass with giving the O(nk^2) solution?"
                    },
                    {
                        "username": "AlecLC",
                        "content": "This is pretty easy for a hard. The better ways to solve it are pretty ridiculous but basic DP does the job just fine"
                    },
                    {
                        "username": "an5dy90",
                        "content": "It\\'s the same level of difficulty with paint house. "
                    },
                    {
                        "username": "Lipox",
                        "content": "Hard \\xD7\\nEasy one in Medium \\u2714"
                    },
                    {
                        "username": "daring-calf",
                        "content": "This is a decent crazy hard DP problem."
                    },
                    {
                        "username": "botan",
                        "content": "I feel like DP is an unnecessary overcomplication of this task.\\nIsn\\'t the approach of finding the locally optimal choice - **greedy**?\\nIt\\'s quite clear from the start that we\\'re only interested in the neighbours of every house, and there is no need to store values for the entire house row."
                    }
                ]
            },
            {
                "id": 2047148,
                "content": [
                    {
                        "username": "leperking0909",
                        "content": "One possible follow up in interview: What if all houses are in cycle?\\n\\nAnyone has any idea?"
                    },
                    {
                        "username": "AymenDaoudi",
                        "content": "You would need a 3rd stat variable that you would pass to your recursive function, this 3rd variable is each time the selected color of the house 0, once you reach the house m - 1, you don\\'t skip only the color that was taken before, but also the color that was first chosen for the house 0, which is the next house."
                    },
                    {
                        "username": "1ncu804u",
                        "content": "start from 0 and start from 1"
                    },
                    {
                        "username": "1ncu804u",
                        "content": "if paint house is like the same why this is a hard ?"
                    },
                    {
                        "username": "DuckyShine04",
                        "content": "Agreed, this is basically paint house 1, except k is arbitrary. Interesting..."
                    },
                    {
                        "username": "roygarcia",
                        "content": "lol yeah i was confused because when i saw my solution for Paint House I, i was like... \"this should work? oh shoot yeah it does\""
                    },
                    {
                        "username": "IWantToPass",
                        "content": "I feel like the O(nk) time solution is pretty hard to come up with in an interview, but the O(nk^2) solution is easier. Would we actually be expected to get the O(nk) solution in facebook interview? Did anyone pass with giving the O(nk^2) solution?"
                    },
                    {
                        "username": "AlecLC",
                        "content": "This is pretty easy for a hard. The better ways to solve it are pretty ridiculous but basic DP does the job just fine"
                    },
                    {
                        "username": "an5dy90",
                        "content": "It\\'s the same level of difficulty with paint house. "
                    },
                    {
                        "username": "Lipox",
                        "content": "Hard \\xD7\\nEasy one in Medium \\u2714"
                    },
                    {
                        "username": "daring-calf",
                        "content": "This is a decent crazy hard DP problem."
                    },
                    {
                        "username": "botan",
                        "content": "I feel like DP is an unnecessary overcomplication of this task.\\nIsn\\'t the approach of finding the locally optimal choice - **greedy**?\\nIt\\'s quite clear from the start that we\\'re only interested in the neighbours of every house, and there is no need to store values for the entire house row."
                    }
                ]
            },
            {
                "id": 1999413,
                "content": [
                    {
                        "username": "leperking0909",
                        "content": "One possible follow up in interview: What if all houses are in cycle?\\n\\nAnyone has any idea?"
                    },
                    {
                        "username": "AymenDaoudi",
                        "content": "You would need a 3rd stat variable that you would pass to your recursive function, this 3rd variable is each time the selected color of the house 0, once you reach the house m - 1, you don\\'t skip only the color that was taken before, but also the color that was first chosen for the house 0, which is the next house."
                    },
                    {
                        "username": "1ncu804u",
                        "content": "start from 0 and start from 1"
                    },
                    {
                        "username": "1ncu804u",
                        "content": "if paint house is like the same why this is a hard ?"
                    },
                    {
                        "username": "DuckyShine04",
                        "content": "Agreed, this is basically paint house 1, except k is arbitrary. Interesting..."
                    },
                    {
                        "username": "roygarcia",
                        "content": "lol yeah i was confused because when i saw my solution for Paint House I, i was like... \"this should work? oh shoot yeah it does\""
                    },
                    {
                        "username": "IWantToPass",
                        "content": "I feel like the O(nk) time solution is pretty hard to come up with in an interview, but the O(nk^2) solution is easier. Would we actually be expected to get the O(nk) solution in facebook interview? Did anyone pass with giving the O(nk^2) solution?"
                    },
                    {
                        "username": "AlecLC",
                        "content": "This is pretty easy for a hard. The better ways to solve it are pretty ridiculous but basic DP does the job just fine"
                    },
                    {
                        "username": "an5dy90",
                        "content": "It\\'s the same level of difficulty with paint house. "
                    },
                    {
                        "username": "Lipox",
                        "content": "Hard \\xD7\\nEasy one in Medium \\u2714"
                    },
                    {
                        "username": "daring-calf",
                        "content": "This is a decent crazy hard DP problem."
                    },
                    {
                        "username": "botan",
                        "content": "I feel like DP is an unnecessary overcomplication of this task.\\nIsn\\'t the approach of finding the locally optimal choice - **greedy**?\\nIt\\'s quite clear from the start that we\\'re only interested in the neighbours of every house, and there is no need to store values for the entire house row."
                    }
                ]
            },
            {
                "id": 1898653,
                "content": [
                    {
                        "username": "leperking0909",
                        "content": "One possible follow up in interview: What if all houses are in cycle?\\n\\nAnyone has any idea?"
                    },
                    {
                        "username": "AymenDaoudi",
                        "content": "You would need a 3rd stat variable that you would pass to your recursive function, this 3rd variable is each time the selected color of the house 0, once you reach the house m - 1, you don\\'t skip only the color that was taken before, but also the color that was first chosen for the house 0, which is the next house."
                    },
                    {
                        "username": "1ncu804u",
                        "content": "start from 0 and start from 1"
                    },
                    {
                        "username": "1ncu804u",
                        "content": "if paint house is like the same why this is a hard ?"
                    },
                    {
                        "username": "DuckyShine04",
                        "content": "Agreed, this is basically paint house 1, except k is arbitrary. Interesting..."
                    },
                    {
                        "username": "roygarcia",
                        "content": "lol yeah i was confused because when i saw my solution for Paint House I, i was like... \"this should work? oh shoot yeah it does\""
                    },
                    {
                        "username": "IWantToPass",
                        "content": "I feel like the O(nk) time solution is pretty hard to come up with in an interview, but the O(nk^2) solution is easier. Would we actually be expected to get the O(nk) solution in facebook interview? Did anyone pass with giving the O(nk^2) solution?"
                    },
                    {
                        "username": "AlecLC",
                        "content": "This is pretty easy for a hard. The better ways to solve it are pretty ridiculous but basic DP does the job just fine"
                    },
                    {
                        "username": "an5dy90",
                        "content": "It\\'s the same level of difficulty with paint house. "
                    },
                    {
                        "username": "Lipox",
                        "content": "Hard \\xD7\\nEasy one in Medium \\u2714"
                    },
                    {
                        "username": "daring-calf",
                        "content": "This is a decent crazy hard DP problem."
                    },
                    {
                        "username": "botan",
                        "content": "I feel like DP is an unnecessary overcomplication of this task.\\nIsn\\'t the approach of finding the locally optimal choice - **greedy**?\\nIt\\'s quite clear from the start that we\\'re only interested in the neighbours of every house, and there is no need to store values for the entire house row."
                    }
                ]
            },
            {
                "id": 1894809,
                "content": [
                    {
                        "username": "leperking0909",
                        "content": "One possible follow up in interview: What if all houses are in cycle?\\n\\nAnyone has any idea?"
                    },
                    {
                        "username": "AymenDaoudi",
                        "content": "You would need a 3rd stat variable that you would pass to your recursive function, this 3rd variable is each time the selected color of the house 0, once you reach the house m - 1, you don\\'t skip only the color that was taken before, but also the color that was first chosen for the house 0, which is the next house."
                    },
                    {
                        "username": "1ncu804u",
                        "content": "start from 0 and start from 1"
                    },
                    {
                        "username": "1ncu804u",
                        "content": "if paint house is like the same why this is a hard ?"
                    },
                    {
                        "username": "DuckyShine04",
                        "content": "Agreed, this is basically paint house 1, except k is arbitrary. Interesting..."
                    },
                    {
                        "username": "roygarcia",
                        "content": "lol yeah i was confused because when i saw my solution for Paint House I, i was like... \"this should work? oh shoot yeah it does\""
                    },
                    {
                        "username": "IWantToPass",
                        "content": "I feel like the O(nk) time solution is pretty hard to come up with in an interview, but the O(nk^2) solution is easier. Would we actually be expected to get the O(nk) solution in facebook interview? Did anyone pass with giving the O(nk^2) solution?"
                    },
                    {
                        "username": "AlecLC",
                        "content": "This is pretty easy for a hard. The better ways to solve it are pretty ridiculous but basic DP does the job just fine"
                    },
                    {
                        "username": "an5dy90",
                        "content": "It\\'s the same level of difficulty with paint house. "
                    },
                    {
                        "username": "Lipox",
                        "content": "Hard \\xD7\\nEasy one in Medium \\u2714"
                    },
                    {
                        "username": "daring-calf",
                        "content": "This is a decent crazy hard DP problem."
                    },
                    {
                        "username": "botan",
                        "content": "I feel like DP is an unnecessary overcomplication of this task.\\nIsn\\'t the approach of finding the locally optimal choice - **greedy**?\\nIt\\'s quite clear from the start that we\\'re only interested in the neighbours of every house, and there is no need to store values for the entire house row."
                    }
                ]
            }
        ]
    }
]