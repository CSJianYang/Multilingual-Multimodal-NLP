[
    {
        "title": "Plus One",
        "question_content": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\nIncrement the large integer by one and return the resulting array of digits.\n&nbsp;\nExample 1:\n\nInput: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].\n\nExample 2:\n\nInput: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].\n\nExample 3:\n\nInput: digits = [9]\nOutput: [1,0]\nExplanation: The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\n\n&nbsp;\nConstraints:\n\n\t1 <= digits.length <= 100\n\t0 <= digits[i] <= 9\n\tdigits does not contain any leading 0's.",
        "solutions": [
            {
                "id": 24082,
                "title": "my-simple-java-solution",
                "content": "    public int[] plusOne(int[] digits) {\\n            \\n        int n = digits.length;\\n        for(int i=n-1; i>=0; i--) {\\n            if(digits[i] < 9) {\\n                digits[i]++;\\n                return digits;\\n            }\\n            \\n            digits[i] = 0;\\n        }\\n        \\n        int[] newNumber = new int [n+1];\\n        newNumber[0] = 1;\\n        \\n        return newNumber;\\n    }",
                "solutionTags": [],
                "code": "    public int[] plusOne(int[] digits) {\\n            \\n        int n = digits.length;\\n        for(int i=n-1; i>=0; i--) {\\n            if(digits[i] < 9) {\\n                digits[i]++;\\n                return digits;\\n            }\\n            \\n            digits[i] = 0;\\n        }\\n        \\n        int[] newNumber = new int [n+1];\\n        newNumber[0] = 1;\\n        \\n        return newNumber;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2706861,
                "title": "java-fastest-0ms-runtime-easy-and-elegant-solution",
                "content": "```\\nfor (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t}\\n\\tdigits[i] = 0;\\n}\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;\\n```\\n\\n\\nexplanation\\n\\n```\\nfor (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t\\t// starting from extreme right--> if array[i] is less than 9 means can be added with 1\\n\\t\\t// i.e. [ 5,8 ]-->[ 5,9 ] or\\n\\t\\t//      [ 9,4 ]-->[ 9,5 ] or\\n\\t\\t//      [ 6,0 ]-->[ 6,1 ]\\n\\t\\t// and will directly return array\\n\\t}\\n\\tdigits[i] = 0;\\n\\t// if array[i] is not less than 9, means it have to be 9 only then digit is changed to 0,\\n\\t// and we again revolve around loop to check for number if less than 9 or not\\n\\t// i.e. [ 5,9 ]-->[ 5,0 ]-loop->[ 6,0 ] or\\n\\t//      [ 1,9,9 ]-->[ 1,9,0 ]-loop->[ 1,0,0 ]-loop->[ 2,0,0 ]\\n\\t// and will directly return array\\n}\\n\\n// if all number inside array are 9\\n// i.e. [ 9,9,9,9 ] than according to above loop it will become [ 0,0,0,0 ]\\n// but we have to make it like this [ 9,9,9,9 ]-->[ 1,0,0,0,0 ]\\n\\n\\n// to make like above we need to make new array of length--> n+1\\n// by default new array values are set to -->0 only\\n// thus just changed first value of array to 1 and return the array\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;\\n```\\n\\n**TC O(n)\\nSC O(n)**\\n\\n\\n\\n**If you have any question, feel free to ask. If you like the solution or the explanation, Please UPVOTE !**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nfor (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t}\\n\\tdigits[i] = 0;\\n}\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;\\n```\n```\\nfor (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t\\t// starting from extreme right--> if array[i] is less than 9 means can be added with 1\\n\\t\\t// i.e. [ 5,8 ]-->[ 5,9 ] or\\n\\t\\t//      [ 9,4 ]-->[ 9,5 ] or\\n\\t\\t//      [ 6,0 ]-->[ 6,1 ]\\n\\t\\t// and will directly return array\\n\\t}\\n\\tdigits[i] = 0;\\n\\t// if array[i] is not less than 9, means it have to be 9 only then digit is changed to 0,\\n\\t// and we again revolve around loop to check for number if less than 9 or not\\n\\t// i.e. [ 5,9 ]-->[ 5,0 ]-loop->[ 6,0 ] or\\n\\t//      [ 1,9,9 ]-->[ 1,9,0 ]-loop->[ 1,0,0 ]-loop->[ 2,0,0 ]\\n\\t// and will directly return array\\n}\\n\\n// if all number inside array are 9\\n// i.e. [ 9,9,9,9 ] than according to above loop it will become [ 0,0,0,0 ]\\n// but we have to make it like this [ 9,9,9,9 ]-->[ 1,0,0,0,0 ]\\n\\n\\n// to make like above we need to make new array of length--> n+1\\n// by default new array values are set to -->0 only\\n// thus just changed first value of array to 1 and return the array\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3054321,
                "title": "simple-c-solution-with-good-explanation",
                "content": "# Intuition\\nIf we thought that all elements of the vector is a number we need to increase it by 1. The input can be 100 digits so we must handle that through digits.\\n\\n# Approach\\nFirst we increment the first digit (last element) by 1, if it becomes 10 we make it 0 ans add 1 to the second digit.. until the last digit (first element), if it becoms 10 we make it 1 and push_back a leading zero.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& v) {\\n        int n = v.size();\\n        for(int i = n-1; i >= 0; i--){\\n            if(i == n-1)\\n                v[i]++;\\n            if(v[i] == 10){\\n                v[i] = 0;\\n                if(i != 0){\\n                    v[i-1]++;\\n                }\\n                else{\\n                    v.push_back(0);\\n                    v[i] = 1;\\n                }\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```\\n\\nDon\\'t forget please :\\')\\n\\n![UPVOTE.jpg](https://assets.leetcode.com/users/images/a6b046f8-0b13-4de1-95f9-78327b0dccba_1673782056.4431267.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& v) {\\n        int n = v.size();\\n        for(int i = n-1; i >= 0; i--){\\n            if(i == n-1)\\n                v[i]++;\\n            if(v[i] == 10){\\n                v[i] = 0;\\n                if(i != 0){\\n                    v[i-1]++;\\n                }\\n                else{\\n                    v.push_back(0);\\n                    v[i] = 1;\\n                }\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 723116,
                "title": "c-solution-with-intuitive-explanation",
                "content": "My solution is nothing special and isn\\'t clever at all.  I decided to post it since I thought the [\"official\" solution article from leetcode](https://leetcode.com/problems/plus-one/solution/) was very poorly written and confused me more, even after I solved it on my own.\\n\\nSo, I believe my comments below should explain the idea, but I want to add that it helps to test the more obscure test cases for this problem to understand the algorithm.  For example:\\n\\n- `[9]`\\n- `[9090]`\\n\\n```cpp\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n      int n = digits.size() - 1;\\n      \\n      for (int i = n; i >= 0; --i) { // traverse digits from the last element (least significant)\\n        // since we begin with the last digit, increasing that digit by one\\n        // results in overflow.  Therefore, all elements PRIOR to digits[0]\\n        // need to be considered since there may be additional nines between\\n        // digits[0], ... , digits[n].\\n        if (digits[i] == 9) {  \\n          digits[i] = 0;\\n        } else {  // current digit is not 9 so we can safely increment by one\\n          digits[i] += 1;\\n          return digits;\\n        }\\n      }\\n      // if the program runs to this point, each 9 is now a 0.\\n      // to get a correct solution, we need to add one more element with \\n      // a value of zero AND set digits[0] to 1 (in the most significant position)\\n      // to account for the carry digit.\\n      digits.push_back(0);\\n      digits[0] = 1;\\n      return digits;\\n    }\\n};\\n```\\n\\nAs always, I look forward to comments and feedback. :)",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n      int n = digits.size() - 1;\\n      \\n      for (int i = n; i >= 0; --i) { // traverse digits from the last element (least significant)\\n        // since we begin with the last digit, increasing that digit by one\\n        // results in overflow.  Therefore, all elements PRIOR to digits[0]\\n        // need to be considered since there may be additional nines between\\n        // digits[0], ... , digits[n].\\n        if (digits[i] == 9) {  \\n          digits[i] = 0;\\n        } else {  // current digit is not 9 so we can safely increment by one\\n          digits[i] += 1;\\n          return digits;\\n        }\\n      }\\n      // if the program runs to this point, each 9 is now a 0.\\n      // to get a correct solution, we need to add one more element with \\n      // a value of zero AND set digits[0] to 1 (in the most significant position)\\n      // to account for the carry digit.\\n      digits.push_back(0);\\n      digits[0] = 1;\\n      return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24139,
                "title": "simple-java-solution",
                "content": "\\n    public int[] plusOne(int[] digits) {\\n        for (int i = digits.length - 1; i >=0; i--) {\\n            if (digits[i] != 9) {\\n                digits[i]++;\\n                break;\\n            } else {\\n                digits[i] = 0;\\n            }\\n        }\\n        if (digits[0] == 0) {\\n            int[] res = new int[digits.length+1];\\n            res[0] = 1;\\n            return res;\\n        }\\n        return digits;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\n    public int[] plusOne(int[] digits) {\\n        for (int i = digits.length - 1; i >=0; i--) {\\n            if (digits[i] != 9) {\\n                digits[i]++;\\n                break;\\n            } else {\\n                digits[i] = 0;\\n            }\\n        }\\n        if (digits[0] == 0) {\\n            int[] res = new int[digits.length+1];\\n            res[0] = 1;\\n            return res;\\n        }\\n        return digits;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 24085,
                "title": "simple-python-solution-with-explanation-plus-one",
                "content": "    def plusOne(digits):\\n        num = 0\\n        for i in range(len(digits)):\\n        \\tnum += digits[i] * pow(10, (len(digits)-1-i))\\n        return [int(i) for i in str(num+1)]\\n\\nWe're given a list of digits, and the idea here is to convert that list to an integer, *num*. So each digit is multiplied by the proper place value and added to *num*. For example, if *digits* = [3, 8, 2, 5] then on the first iteration 3 is multiplied by 10 to the power of 4-1-0 = 3, so this results in 3000, which is added to *num*. Then 8 is multiplied by 10^2 and added to *num*, and so on.\\n\\nThe last step is to add 1 to *num*, convert it to a list and return that list.",
                "solutionTags": [
                    "Python"
                ],
                "code": "    def plusOne(digits):\\n        num = 0\\n        for i in range(len(digits)):\\n        \\tnum += digits[i] * pow(10, (len(digits)-1-i))\\n        return [int(i) for i in str(num+1)]\\n\\nWe're given a list of digits, and the idea here is to convert that list to an integer, *num*. So each digit is multiplied by the proper place value and added to *num*. For example, if *digits* = [3, 8, 2, 5] then on the first iteration 3 is multiplied by 10 to the power of 4-1-0 = 3, so this results in 3000, which is added to *num*. Then 8 is multiplied by 10^2 and added to *num*, and so on.\\n\\nThe last step is to add 1 to *num*, convert it to a list and return that list.",
                "codeTag": "Python3"
            },
            {
                "id": 24289,
                "title": "java-concise-solution-with-early-return",
                "content": "    \\n    public int[] plusOne(int[] digits) {\\n        int carry = 1;\\n        for (int i = digits.length-1; i>= 0; i--) {\\n            digits[i] += carry;\\n            if (digits[i] <= 9) // early return \\n                return digits;\\n            digits[i] = 0;\\n        }\\n        int[] ret = new int[digits.length+1];\\n        ret[0] = 1;\\n        return ret;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    \\n    public int[] plusOne(int[] digits) {\\n        int carry = 1;\\n        for (int i = digits.length-1; i>= 0; i--) {\\n            digits[i] += carry;\\n            if (digits[i] <= 9) // early return \\n                return digits;\\n            digits[i] = 0;\\n        }\\n        int[] ret = new int[digits.length+1];\\n        ret[0] = 1;\\n        return ret;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 438791,
                "title": "recursive-python-solution-98-87-speed-100-memory",
                "content": "While this can be solved with a one liner, I thought that it was also a good candidate for a simple little soliution that modfiies the values in the list without converting to different formats etc. Uses recursion to deal with adding 1 to 9.\\n```python\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        if digits[-1] < 9:\\n            digits[-1] += 1\\n            return digits\\n        elif len(digits) == 1 and digits[0] == 9:\\n            return [1, 0]\\n        else:\\n            digits[-1] = 0\\n            digits[0:-1] = self.plusOne(digits[0:-1])\\n            return digits\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```python\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        if digits[-1] < 9:\\n            digits[-1] += 1\\n            return digits\\n        elif len(digits) == 1 and digits[0] == 9:\\n            return [1, 0]\\n        else:\\n            digits[-1] = 0\\n            digits[0:-1] = self.plusOne(digits[0:-1])\\n            return digits\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24297,
                "title": "simple-direct-javascript-solution",
                "content": "    var plusOne = function(digits) {\\n    for(var i = digits.length - 1; i >= 0; i--){\\n         digits[i]++; \\n        if(digits[i] > 9){\\n            digits[i] = 0;\\n        }else{\\n            return digits;\\n        }\\n    }\\n    digits.unshift(1);\\n    return digits;\\n    };\\n\\n\\nFirst, I add 1 anyway. If there is a carry-over, the new digit will also add 1. If the current digit is less than 9 then return the array. \\n\\nLast, when running over for loop, I just put fill 1 in front of the array.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    var plusOne = function(digits) {\\n    for(var i = digits.length - 1; i >= 0; i--){\\n         digits[i]++; \\n        if(digits[i] > 9){\\n            digits[i] = 0;\\n        }else{\\n            return digits;\\n        }\\n    }\\n    digits.unshift(1);\\n    return digits;\\n    };\\n\\n\\nFirst, I add 1 anyway. If there is a carry-over, the new digit will also add 1. If the current digit is less than 9 then return the array. \\n\\nLast, when running over for loop, I just put fill 1 in front of the array.",
                "codeTag": "Unknown"
            },
            {
                "id": 3090372,
                "title": "accepted-easy-solution-short-simple-best-method",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n       int n = digits.size() - 1;\\n      \\n      for (int i = n; i >= 0; --i)\\n      { \\n        if (digits[i] == 9)\\n            digits[i] = 0;\\n      else\\n      {  \\n          digits[i] += 1;\\n          return digits;\\n        }\\n      }\\n      digits.push_back(0);\\n      digits[0] = 1;\\n      return digits;\\n    } \\n    \\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n       int n = digits.size() - 1;\\n      \\n      for (int i = n; i >= 0; --i)\\n      { \\n        if (digits[i] == 9)\\n            digits[i] = 0;\\n      else\\n      {  \\n          digits[i] += 1;\\n          return digits;\\n        }\\n      }\\n      digits.push_back(0);\\n      digits[0] = 1;\\n      return digits;\\n    } \\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24122,
                "title": "my-c-solution-with-few-lines",
                "content": "    class Solution {\\n    public:\\n        vector<int> plusOne(vector<int> &digits) {\\n            bool carry = true;\\n            \\n            for(int i=digits.size()-1; i >= 0 && carry; i--) {\\n                carry = (++digits[i]%=10) == 0;\\n            }\\n    \\n            if(carry) {\\n                digits.insert(digits.begin(), 1);\\n            }\\n        \\n            return digits;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        vector<int> plusOne(vector<int> &digits) {\\n            bool carry = true;\\n            \\n            for(int i=digits.size()-1; i >= 0 && carry; i--) {\\n                carry = (++digits[i]%=10) == 0;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 24353,
                "title": "simple-javascript-solution",
                "content": "    var plusOne = function(digits) {\\n      for(var i = digits.length - 1; i >= 0; i--){\\n        if(++digits[i] > 9) digits[i] = 0;\\n        else return digits;\\n      }\\n      digits.unshift(1);\\n      return digits;\\n    };",
                "solutionTags": [],
                "code": "    var plusOne = function(digits) {\\n      for(var i = digits.length - 1; i >= 0; i--){\\n        if(++digits[i] > 9) digits[i] = 0;\\n        else return digits;\\n      }\\n      digits.unshift(1);\\n      return digits;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 24091,
                "title": "easy-python-solution-o-n",
                "content": "\\n    def plusOne(digits):\\n        digits[-1] += 1\\n        for i in range(len(digits)-1, 0, -1):\\n            if digits[i] != 10:\\n                break\\n            digits[i] = 0\\n            digits[i-1] += 1\\n        \\n        if digits[0] == 10:\\n            digits[0] = 0\\n            return [1] + digits\\n        return digits",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\n    def plusOne(digits):\\n        digits[-1] += 1\\n        for i in range(len(digits)-1, 0, -1):\\n            if digits[i] != 10:\\n                break\\n            digits[i] = 0\\n            digits[i-1] += 1\\n        \\n        if digits[0] == 10:\\n            digits[0] = 0\\n            return [1] + digits\\n        return digits",
                "codeTag": "Python3"
            },
            {
                "id": 24090,
                "title": "python-simple-solution-using-recursion",
                "content": "    def plusOne(self, digits):\\n        \"\"\"\\n        :type digits: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        if len(digits) == 0:\\n            digits = [1]\\n        elif digits[-1] == 9:\\n            digits = self.plusOne(digits[:-1])\\n            digits.extend([0])\\n        else:\\n            digits[-1] += 1\\n        return digits",
                "solutionTags": [],
                "code": "    def plusOne(self, digits):\\n        \"\"\"\\n        :type digits: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        if len(digits) == 0:\\n            digits = [1]\\n        elif digits[-1] == 9:\\n            digits = self.plusOne(digits[:-1])\\n            digits.extend([0])\\n        else:\\n            digits[-1] += 1\\n        return digits",
                "codeTag": "Python3"
            },
            {
                "id": 485912,
                "title": "c-4ms",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        for(int i = digits.size() - 1;i >= 0;i--){\\n            if(digits[i] != 9){\\n                digits[i]++;\\n                return digits;\\n            }\\n            else\\n                digits[i] = 0;\\n        }\\n        digits.insert(digits.begin(),1);\\n        return digits;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        for(int i = digits.size() - 1;i >= 0;i--){\\n            if(digits[i] != 9){\\n                digits[i]++;\\n                return digits;\\n            }\\n            else\\n                digits[i] = 0;\\n        }\\n        digits.insert(digits.begin(),1);\\n        return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 147127,
                "title": "javascript-simple-solution",
                "content": "```\\nvar plusOne = function(digits) {\\n  for(let i = digits.length - 1; i >= 0; i --){\\n    if(digits[i] === 9){\\n      digits[i] = 0;\\n    }\\n    else {\\n      digits[i] ++;\\n      return digits;\\n    }\\n  }\\n  return [1, ...digits];\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar plusOne = function(digits) {\\n  for(let i = digits.length - 1; i >= 0; i --){\\n    if(digits[i] === 9){\\n      digits[i] = 0;\\n    }\\n    else {\\n      digits[i] ++;\\n      return digits;\\n    }\\n  }\\n  return [1, ...digits];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3129110,
                "title": "simplest-python-approach-beats-99-5",
                "content": "# Intuition\\nOften the obvious approach is among the best. If you just convert to an integer and add one, it beats 98% of solutions.\\n\\n# Approach\\nInstead of looping across the list and accounting for random 9s, just convert to an integer and add one.  Then convert back to a list.\\n\\n# Complexity\\nThe time complexity is O(n) because we have to traverse the list exactly once then convert back to a list.\\n\\n# Code\\n```\\nclass Solution:\\n    def plusOne(self, digits):\\n        strings = \"\"\\n        for number in digits:\\n            strings += str(number)\\n\\n        temp = str(int(strings) +1)\\n\\n        return [int(temp[i]) for i in range(len(temp))]\\n\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits):\\n        strings = \"\"\\n        for number in digits:\\n            strings += str(number)\\n\\n        temp = str(int(strings) +1)\\n\\n        return [int(temp[i]) for i in range(len(temp))]\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1383696,
                "title": "super-simple-java-solution-explained-0ms-faster-than-100",
                "content": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int len = digits.length; // length of array;\\n        \\n        // start the loop from last index;\\n        for (int i = len-1; i>=0; i--) {\\n            // if ith index is 9, that means there will be an overflow if we add 1\\n            // adding 1 will make it 10, so we set it to 0. and continue the loop; \\n            if (digits[i] == 9) {\\n                digits[i] = 0;\\n            }else {\\n                // if ith value is not 9 we just add 1 to it and return;\\n                digits[i] += 1;\\n                return digits;\\n            }     \\n        }\\n        \\n        // if we are here, that means all the value of the array were 9;\\n        // and they are 0 now;\\n        // example: [9,9,9,9], after loop becomes [0,0,0,0];\\n        // so we have to create a new array of +1 length of the previous.\\n        // and place 1 at 0th index;\\n        int[] arr = new int[len+1];\\n        arr[0] = 1;\\n        return arr;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        int len = digits.length; // length of array;\\n        \\n        // start the loop from last index;\\n        for (int i = len-1; i>=0; i--) {\\n            // if ith index is 9, that means there will be an overflow if we add 1\\n            // adding 1 will make it 10, so we set it to 0. and continue the loop; \\n            if (digits[i] == 9) {\\n                digits[i] = 0;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3073756,
                "title": "one-line-js-solution-with-full-explanation-beginner-friendly",
                "content": "\\n# Approach\\nAs we are told we are given a large integer represented as an integer array. So we should use the BigInt type. Our first work is joining the numbers using join() method and of course we wrap it in BigInt and add BigInt(1). Because we can\\'t add regular number to bigInt, this is why we are using the bigInt type for 1 too. And we convert the BigInt to a string and split() it\\n\\n# Complexity\\n- Time complexity:\\nRuntime: 65 ms\\nBeats 74.99%\\n\\n\\n- Space complexity:\\nMemor: 41.7 MB\\nBeats 81.73%\\n\\n# Code\\n```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar plusOne = function(digits) {\\n    return (BigInt(digits.join(\"\")) + BigInt(1)).toString().split(\"\");\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar plusOne = function(digits) {\\n    return (BigInt(digits.join(\"\")) + BigInt(1)).toString().split(\"\");\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2674763,
                "title": "c-simple-solution",
                "content": "```\\n for(int i = digits.size()-1; i>=0; i--){\\n                    if(digits[i]<9){\\n                    digits[i]++;\\n                    return digits;\\n                    }\\n                    else\\n                            digits[i] = 0;\\n                    \\n            }\\n            digits.push_back(0);\\n            digits[0] = 1;\\n            return digits;\\n```",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\n for(int i = digits.size()-1; i>=0; i--){\\n                    if(digits[i]<9){\\n                    digits[i]++;\\n                    return digits;\\n                    }\\n                    else\\n                            digits[i] = 0;\\n                    \\n            }\\n            digits.push_back(0);\\n            digits[0] = 1;\\n            return digits;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 468139,
                "title": "python-3-one-line-solution-explained",
                "content": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        return [x for x in str(int(\\'\\'.join(map(str, digits))) + 1)]\\n```\\n\\n1. `map(str, digits)` - applies funciton `str` to every element of the list, returning iterable object \\n2. `\\'\\'.join()` - joins all elements inside parentheses together, using empty separator, specified between `\\'\\'`\\n3. `int` converts joined string og digits to integer value\\n4. `+1` increases it\\n5. `str` converts new number into string\\n6. `[x for x in ...]` generates list of digits in string from step 5.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        return [x for x in str(int(\\'\\'.join(map(str, digits))) + 1)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2758992,
                "title": "c-solution-that-passed-all-test-cases",
                "content": "C# Solution that passed all test cases\\n\\n```\\n        public int[] PlusOne(int[] digits)\\n        {\\n            int n = digits.Length;\\n            for (int i = n - 1; i >= 0; i--)\\n            {\\n                if (digits[i] < 9)\\n                {\\n                    digits[i]++;\\n                    return digits;\\n                }\\n                digits[i] = 0;\\n            }\\n            int[] newNumber = new int[n + 1];\\n            newNumber[0] = 1;\\n\\n            return newNumber;\\n        }\\n\\t\\t\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\n        public int[] PlusOne(int[] digits)\\n        {\\n            int n = digits.Length;\\n            for (int i = n - 1; i >= 0; i--)\\n            {\\n                if (digits[i] < 9)\\n                {\\n                    digits[i]++;\\n                    return digits;\\n                }\\n                digits[i] = 0;\\n            }\\n            int[] newNumber = new int[n + 1];\\n            newNumber[0] = 1;\\n\\n            return newNumber;\\n        }\\n\\t\\t\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 409531,
                "title": "javascript-easy-to-understand-solution",
                "content": "```/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar plusOne = function(digits) {\\n    for(let i = digits.length - 1; i>= 0; i--){\\n        if(digits[i] < 9){\\n            digits[i]++\\n            return digits\\n        }\\n        \\n        digits[i] = 0\\n    }\\n    digits.unshift(1)\\n    return digits\\n};```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar plusOne = function(digits) {\\n    for(let i = digits.length - 1; i>= 0; i--){\\n        if(digits[i] < 9){\\n            digits[i]++\\n            return digits\\n        }\\n        \\n        digits[i] = 0\\n    }\\n    digits.unshift(1)\\n    return digits\\n};```",
                "codeTag": "Unknown"
            },
            {
                "id": 24294,
                "title": "golang-go-solution",
                "content": "    func plusOne(digits []int) []int {\\n        var n int = len(digits)\\n        for i:= n-1; i>=0; i--{\\n            if digits[i] < 9 {\\n                digits[i]+=1\\n                return digits\\n            } else {\\n                digits[i] = 0\\n            }\\n        }\\n        var a = make([]int,n+1)\\n        a[0] = 1\\n        return a\\n    \\n    }",
                "solutionTags": [
                    "Go"
                ],
                "code": "    func plusOne(digits []int) []int {\\n        var n int = len(digits)\\n        for i:= n-1; i>=0; i--{\\n            if digits[i] < 9 {\\n                digits[i]+=1\\n                return digits\\n            } else {\\n                digits[i] = 0\\n            }\\n        }\\n        var a = make([]int,n+1)\\n        a[0] = 1\\n        return a\\n    \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1915685,
                "title": "100-fastest-swift-solution-time-o-n-space-o-n",
                "content": "```\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the length of the digits.\\n    //   - space: O(n), where n is the length of the digits.\\n\\n    func plusOne(_ digits: [Int]) -> [Int] {\\n        var digits = digits\\n\\n        for i in (0..<digits.count).reversed() {\\n            guard digits[i] == 9 else {\\n                digits[i] += 1\\n                return digits\\n            }\\n\\n            digits[i] = 0\\n        }\\n\\n        digits.insert(1, at: 0)\\n        return digits\\n    }\\n\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the length of the digits.\\n    //   - space: O(n), where n is the length of the digits.\\n\\n    func plusOne(_ digits: [Int]) -> [Int] {\\n        var digits = digits\\n\\n        for i in (0..<digits.count).reversed() {\\n            guard digits[i] == 9 else {\\n                digits[i] += 1\\n                return digits\\n            }\\n\\n            digits[i] = 0\\n        }\\n\\n        digits.insert(1, at: 0)\\n        return digits\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24320,
                "title": "java-recursion-solution",
                "content": "    public class Solution {\\n        public int[] plusOne(int[] digits) {\\n            return helper(digits,digits.length-1);\\n        }\\n        \\n        private int[] helper(int[] digits, int index){\\n            if(digits[index] < 9){\\n                digits[index]++;\\n                return digits;\\n            }else{\\n                if(index != 0){\\n                    digits[index] = 0;\\n                    return helper(digits,index-1);\\n                }else{\\n                    int[] res = new int[digits.length+1];\\n                    res[0] = 1;\\n                    return res;\\n                }\\n            }\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int[] plusOne(int[] digits) {\\n            return helper(digits,digits.length-1);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 587672,
                "title": "javascript-simple-solution",
                "content": "Runtime: 52 ms, faster than 81.75% of JavaScript online submissions for Plus One.\\nMemory Usage: 33.8 MB, less than 55.32% of JavaScript online submissions for Plus One.\\n```\\nfunction plusOne(digits) {\\n  let co = true;\\n  for (let i = digits.length - 1; i >= 0 && co; i--) {\\n    digits[i]++;\\n    co = digits[i] >= 10;\\n    co && (digits[i] = 0);\\n  }\\n  co && digits.unshift(1);\\n  return digits;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunction plusOne(digits) {\\n  let co = true;\\n  for (let i = digits.length - 1; i >= 0 && co; i--) {\\n    digits[i]++;\\n    co = digits[i] >= 10;\\n    co && (digits[i] = 0);\\n  }\\n  co && digits.unshift(1);\\n  return digits;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3745099,
                "title": "one-for-loop-beats-93",
                "content": "# Code\\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n\\n        for i in range(len(digits)-1,-1,-1):\\n            if digits[i]==9:\\n                digits[i]=0\\n            else:\\n                digits[i]+=1\\n                return digits\\n        return [1]+digits\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n\\n        for i in range(len(digits)-1,-1,-1):\\n            if digits[i]==9:\\n                digits[i]=0\\n            else:\\n                digits[i]+=1\\n                return digits\\n        return [1]+digits\\n```",
                "codeTag": "Java"
            },
            {
                "id": 727575,
                "title": "python-100-speed-one-liner-hardworking-way",
                "content": "**Python | 100% Speed | One Liner + Hardworking Way**\\n\\n**A) Python One-Liner**\\n\\nShameless Python One-Liner, O(n) solution.\\nDe-compressed Steps:\\n\\n1. The integer-array \"digits\" is first converted into a joined string: [1,2,3] -> \"123\".  ***Code:**   a = \\'\\'.join(map(str,digits))*\\n2. The joined string is then converted into an integer, and we add one.  ***Code:**   b = int(a)+1\\n3. Our new integer is re-converted into a string, and then into a list format. Finally, the INT operator is applied to each element of the list to obtain new integer digits ***Code:**   [ int(c) for c in str(b) ]  or  list(map(int,str(b)))\\n\\n```\\n# Version A: Outer Loop\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        return [int(x) for x in  str(int(\\'\\'.join(map(str,digits)))+1) ]\\n```\\n\\n```\\n# Version B: Pure Functions\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        return list(map(int,str(int(\\'\\'.join(map(str,digits)))+1)))\\n```\\n\\n**B) Hardworking Digit Processing - O(1) space**\\n```\\n# Hard-Working Version: Manual Digit Check\\n# O(1) space, and O(1) time for most cases as well (with few chained 9\\'s in the lower digits)\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        if not digits:\\n            return digits\\n        i = len(digits)-1\\n        digits[i] += 1\\n        while digits[i]==10:\\n            digits[i] = 0\\n            if i==0:\\n                digits.insert(0,1)\\n            else:\\n                digits[i-1] += 1\\n                i -= 1\\n        return digits\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n# Version A: Outer Loop\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        return [int(x) for x in  str(int(\\'\\'.join(map(str,digits)))+1) ]\\n```\n```\\n# Version B: Pure Functions\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        return list(map(int,str(int(\\'\\'.join(map(str,digits)))+1)))\\n```\n```\\n# Hard-Working Version: Manual Digit Check\\n# O(1) space, and O(1) time for most cases as well (with few chained 9\\'s in the lower digits)\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        if not digits:\\n            return digits\\n        i = len(digits)-1\\n        digits[i] += 1\\n        while digits[i]==10:\\n            digits[i] = 0\\n            if i==0:\\n                digits.insert(0,1)\\n            else:\\n                digits[i-1] += 1\\n                i -= 1\\n        return digits\\n```",
                "codeTag": "Java"
            },
            {
                "id": 422298,
                "title": "python-solution-faster-than-97-02",
                "content": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        for idx in range(len(digits)-1, -1, -1):\\n            if digits[idx] != 9:\\n                digits[idx] += 1\\n                break\\n            else:\\n                digits[idx] = 0\\n        if digits[0] == 0:\\n            digits.insert(0, 1)\\n        return digits\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        for idx in range(len(digits)-1, -1, -1):\\n            if digits[idx] != 9:\\n                digits[idx] += 1\\n                break\\n            else:\\n                digits[idx] = 0\\n        if digits[0] == 0:\\n            digits.insert(0, 1)\\n        return digits\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1322882,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn plus_one(mut digits: Vec<i32>) -> Vec<i32> {\\n        for x in digits.iter_mut().rev() {\\n            match *x == 9 {\\n                true => *x = 0,\\n                false => {\\n                    *x += 1;\\n                    return digits;\\n                }\\n            }\\n        }\\n        digits.insert(0, 1);\\n        digits\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn plus_one(mut digits: Vec<i32>) -> Vec<i32> {\\n        for x in digits.iter_mut().rev() {\\n            match *x == 9 {\\n                true => *x = 0,\\n                false => {\\n                    *x += 1;\\n                    return digits;\\n                }\\n            }\\n        }\\n        digits.insert(0, 1);\\n        digits\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3708232,
                "title": "easy-and-simplest-c-best-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n= digits.size();\\n        for(int i=n-1; i>=0; i--){\\n            if(digits[i]<9){\\n                digits[i]+=1;\\n                return digits;\\n            }\\n            else{\\n                digits[i]=0;\\n            }\\n        }\\n        digits[0]=1;\\n        digits.push_back(0);\\n        return digits;        \\n    }\\n};\\n```\\n![4i5ri4f9.png](https://assets.leetcode.com/users/images/280cc0bf-e1b5-417b-a72d-4ba7e737f34f_1688448157.4485767.png)",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n= digits.size();\\n        for(int i=n-1; i>=0; i--){\\n            if(digits[i]<9){\\n                digits[i]+=1;\\n                return digits;\\n            }\\n            else{\\n                digits[i]=0;\\n            }\\n        }\\n        digits[0]=1;\\n        digits.push_back(0);\\n        return digits;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 722211,
                "title": "python-find-maximum-number-of-9-in-the-end-explained",
                "content": "How we can add `1` to given number? We need to find the biggest number of `9` in the end of our number, for example for number `5123521999235123999`, there will be three `9` in the end. `512352199923512`**3999**` + 1 = 512352199923512`**4000**: so we need to increase previous symbol by one and change all `9` after to `0`. Now, the steps of algorithm are to following:\\n\\n1. Let us add one `0` before our data to handle cases like `9`, `99`, `999`, ... \\n2. Find maximum number of `9`, starting from the end and moving to the left.\\n3. Change all found `9` in the end to `0` and previous digit increasy by `1`.\\n4. Handle border cases: if we have leading zero, remove it.\\n\\n**Complexity** time complexity is `O(n)`, where `n` is length of list. Additional space complexity is `O(1)`, because we edit input data directly.\\n\\n```\\nclass Solution:\\n    def plusOne(self, digits):\\n        digits = [0] + digits\\n        \\n        end = len(digits) - 1\\n        while digits[end] == 9:\\n            end -= 1\\n    \\n        digits[end] += 1\\n        digits[end+1:] = [0] * (len(digits)-1-end)\\n                   \\n        return digits if digits[0] != 0 else digits[1:]      \\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits):\\n        digits = [0] + digits\\n        \\n        end = len(digits) - 1\\n        while digits[end] == 9:\\n            end -= 1\\n    \\n        digits[end] += 1\\n        digits[end+1:] = [0] * (len(digits)-1-end)\\n                   \\n        return digits if digits[0] != 0 else digits[1:]      \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954062,
                "title": "java-runtime-0-ms-beats-100",
                "content": "# Intuition\\nMy initial approach to solving this problem involves adding one to the given integer represented by an array of digits. I\\'ll iterate through the array of digits from right to left, simulating the process of adding one to the number.\\n\\n# Approach\\nI will iterate through the array of digits from right to left. For each digit, I\\'ll check if it\\'s 9. If it\\'s 9, I\\'ll set it to 0 and continue iterating. If it\\'s not 9, I\\'ll increment it by one and immediately return the modified array. This is because there\\'s no need to carry over to the next digit in this case.\\n\\nIf the loop completes without returning, it means all digits were 9, and we need to add a new leading digit. I\\'ll create a new array with a length one more than the original array, set the first element to 1, and return the new array.\\n\\n# Complexity\\n- Time complexity: O(n)\\n  The algorithm iterates through the array of digits once, where \\'n\\' is the length of the array.\\n\\n- Space complexity: O(n) or O(n+1)\\n  In the worst case, the algorithm creates a new array with a length one more than the original array. Thus, the space complexity can be considered O(n+1).\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        for (int i = digits.length - 1; i >= 0; i--) {\\n            if (digits[i] == 9) {\\n                digits[i] = 0;\\n            } else {\\n                digits[i]++;\\n                return digits;\\n            }\\n        }\\n        \\n        int[] newDigits = new int[digits.length + 1];\\n        newDigits[0] = 1;\\n        return newDigits;\\n    }\\n        \\n\\n    }\\n\\n\\n\\n```\\n![c0504eaf-5fb8-4a1d-a769-833262d1b86e_1674433591.3836212.webp](https://assets.leetcode.com/users/images/8a3b41d1-f0ca-472f-a9f7-8346b34a824e_1693297402.2918687.webp)",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        for (int i = digits.length - 1; i >= 0; i--) {\\n            if (digits[i] == 9) {\\n                digits[i] = 0;\\n            } else {\\n                digits[i]++;\\n                return digits;\\n            }\\n        }\\n        \\n        int[] newDigits = new int[digits.length + 1];\\n        newDigits[0] = 1;\\n        return newDigits;\\n    }\\n        \\n\\n    }\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3568113,
                "title": "easy-c-solution-o-n-time-complexity-just-using-one-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe will see the last element as we have to add 1 to it.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Start traversing through end.\\n2. If last element is not 9, just add 1 to it and return the vector.\\n3. If last element is 9, make it zero, move ahead (reverse order).\\n4. Now if this element is not 9, add 1 to it and return vector, otherwise if it is also 9, make it zero and repeat the 3rd and 4th steps.\\n5. Now, if the number is 999, then we have to make it 1000 (999 + 1 = 1000). So, push 0 to the last of our vector (0,0,0) so that it becomes (0,0,0,0) and make first element \\'1\\' => 1000.\\n6. This is how we add 1 to the number!\\n7. Thank You, Don\\'t forget to upvote :)\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& v) {\\n        int n = v.size();\\n\\n        for(int i=n-1; i>=0; i--){\\n            if(v[i]<9){\\n                ++v[i];\\n                return v;\\n            }else{\\n                v[i] = 0;\\n            }\\n        }\\n\\n        v.push_back(0);      // to handle \\'999\\' => 999 + 1 = 1000\\n        v[0] = 1;\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& v) {\\n        int n = v.size();\\n\\n        for(int i=n-1; i>=0; i--){\\n            if(v[i]<9){\\n                ++v[i];\\n                return v;\\n            }else{\\n                v[i] = 0;\\n            }\\n        }\\n\\n        v.push_back(0);      // to handle \\'999\\' => 999 + 1 = 1000\\n        v[0] = 1;\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3455692,
                "title": "java-100-faster-step-by-step-explained-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(N)\\n![Screenshot_20230205_171246.png](https://assets.leetcode.com/users/images/15360baf-39c0-45e7-b2e2-b8d6d07813d5_1682477226.014943.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n        // Starting from the least significant digit (i.e., the last element of the array)\\n        for (int i = n - 1; i >= 0; i--) {\\n            // If the current digit is less than 9, we can add 1 to it and return the updated array\\n            if (digits[i] < 9) {\\n                digits[i]++; // Add 1 to the current digit\\n                return digits; // Return the updated array\\n            }\\n            // If the current digit is 9, we set it to 0 and continue with the next digit\\n            else {\\n                digits[i] = 0; // Set the current digit to 0\\n            }\\n        }\\n        // If we reach here, it means all digits were 9, so we need to create a new array with one more element\\n        int[] result = new int[n + 1]; // Create a new array with length n + 1\\n        result[0] = 1; // Set the first element to 1, since all other elements are 0 by default\\n        return result; // Return the new array\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n        // Starting from the least significant digit (i.e., the last element of the array)\\n        for (int i = n - 1; i >= 0; i--) {\\n            // If the current digit is less than 9, we can add 1 to it and return the updated array\\n            if (digits[i] < 9) {\\n                digits[i]++; // Add 1 to the current digit\\n                return digits; // Return the updated array\\n            }\\n            // If the current digit is 9, we set it to 0 and continue with the next digit\\n            else {\\n                digits[i] = 0; // Set the current digit to 0\\n            }\\n        }\\n        // If we reach here, it means all digits were 9, so we need to create a new array with one more element\\n        int[] result = new int[n + 1]; // Create a new array with length n + 1\\n        result[0] = 1; // Set the first element to 1, since all other elements are 0 by default\\n        return result; // Return the new array\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1614101,
                "title": "c-simple-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        for(int i=digits.size()-1;i>=0;i--){\\n            if(digits[i]==9){\\n                digits[i]=0;\\n            }\\n            else{\\n                digits[i]++;\\n                return digits;\\n            }\\n        }\\n        digits[0]=1;\\n        digits.push_back(0);\\n        return digits;\\n    }\\n};\\n```\\n**Please upvote if you like the solution\\ncomment if have doubts**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        for(int i=digits.size()-1;i>=0;i--){\\n            if(digits[i]==9){\\n                digits[i]=0;\\n            }\\n            else{\\n                digits[i]++;\\n                return digits;\\n            }\\n        }\\n        digits[0]=1;\\n        digits.push_back(0);\\n        return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1529365,
                "title": "java-tc-o-n-sc-o-1-optimized-math-addition-simulation",
                "content": "```java\\n/**\\n * Simulate Math Addition\\n *\\n * Time Complexity: O(N)\\n *\\n * Space Complexity: O(1) --> Excluding the result space\\n *\\n * N = Length of input digits array.\\n */\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        if (digits == null) {\\n            throw new IllegalArgumentException(\"Input array is null\");\\n        }\\n\\n        int len = digits.length;\\n        if (len == 0) {\\n            return new int[] { 1 };\\n        }\\n\\n        for (int i = len - 1; i >= 0; i--) {\\n            if (digits[i] != 9) {\\n                digits[i]++;\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n\\n        digits = new int[len + 1];\\n        digits[0] = 1;\\n        return digits;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```java\\n/**\\n * Simulate Math Addition\\n *\\n * Time Complexity: O(N)\\n *\\n * Space Complexity: O(1) --> Excluding the result space\\n *\\n * N = Length of input digits array.\\n */\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        if (digits == null) {\\n            throw new IllegalArgumentException(\"Input array is null\");\\n        }\\n\\n        int len = digits.length;\\n        if (len == 0) {\\n            return new int[] { 1 };\\n        }\\n\\n        for (int i = len - 1; i >= 0; i--) {\\n            if (digits[i] != 9) {\\n                digits[i]++;\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n\\n        digits = new int[len + 1];\\n        digits[0] = 1;\\n        return digits;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24310,
                "title": "python-solution-simple",
                "content": "\\n\\n    def plusOne(self, digits):\\n        for i in xrange(len(digits)-1, -1, -1):\\n            if digits[i] < 9:\\n                digits[i] += 1\\n                return digits\\n            digits[i] = 0\\n        return [1] + digits",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\n\\n    def plusOne(self, digits):\\n        for i in xrange(len(digits)-1, -1, -1):\\n            if digits[i] < 9:\\n                digits[i] += 1\\n                return digits\\n            digits[i] = 0\\n        return [1] + digits",
                "codeTag": "Python3"
            },
            {
                "id": 1286610,
                "title": "javascript-simple-iterative-solution-faster-than-92-65-72ms",
                "content": "```\\nvar plusOne = function(digits) {    \\n    for (let i = digits.length - 1; i >= 0; i--) {\\n        if (digits[i] !== 9) {\\n            digits[i]++;\\n            return digits;\\n        }\\n        digits[i] = 0;\\n        if (i === 0) {\\n            digits.unshift(1);\\n            return digits;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Iterator"
                ],
                "code": "```\\nvar plusOne = function(digits) {    \\n    for (let i = digits.length - 1; i >= 0; i--) {\\n        if (digits[i] !== 9) {\\n            digits[i]++;\\n            return digits;\\n        }\\n        digits[i] = 0;\\n        if (i === 0) {\\n            digits.unshift(1);\\n            return digits;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2283271,
                "title": "100-fast-solution-in-golang-detailed-video-explanation-o-n",
                "content": "I have created a detailed video to explain the logic and the code for this problem you can have a look at it incase you want better understanding on how I came up with the approch\\n[Plus One| O(n) Solution by The Exception Handler](https://www.youtube.com/watch?v=mrYywKoIq-E&list=PL8-bdB4cHmXzuGvBnFmByq-4yyAy-ceaK&index=3)\\n\\n```\\nfunc plusOne(digits []int) []int {\\n    \\n\\tn := len(digits)\\n\\tfor i := n - 1; i >= 0; i-- {\\n\\t\\tif digits[i] < 9 {\\n\\t\\t\\tdigits[i]++\\n\\t\\t\\treturn digits\\n\\t\\t}\\n\\t\\tdigits[i] = 0\\n\\n\\t}\\n\\tdigits = append([]int{1}, digits...)\\n\\treturn digits\\n}\\n```\\n\\nPlease upvote this solution in case you like the explaniation",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc plusOne(digits []int) []int {\\n    \\n\\tn := len(digits)\\n\\tfor i := n - 1; i >= 0; i-- {\\n\\t\\tif digits[i] < 9 {\\n\\t\\t\\tdigits[i]++\\n\\t\\t\\treturn digits\\n\\t\\t}\\n\\t\\tdigits[i] = 0\\n\\n\\t}\\n\\tdigits = append([]int{1}, digits...)\\n\\treturn digits\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1022733,
                "title": "kotlin",
                "content": "```\\nfun plusOne(digits: IntArray): IntArray {\\n        for (i in digits.size - 1 downTo 0) {\\n            digits[i] += 1\\n            if (digits[i] <= 9) return digits\\n            digits[i] = 0\\n        }\\n        val arr = IntArray(digits.size + 1)\\n        arr[0] = 1\\n\\n        return arr\\n    }\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nfun plusOne(digits: IntArray): IntArray {\\n        for (i in digits.size - 1 downTo 0) {\\n            digits[i] += 1\\n            if (digits[i] <= 9) return digits\\n            digits[i] = 0\\n        }\\n        val arr = IntArray(digits.size + 1)\\n        arr[0] = 1\\n\\n        return arr\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 832514,
                "title": "javascript-solution-66",
                "content": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nlet plusOne = function(digits) {\\n    for(let i=digits.length-1;i>=0;i--){\\n        digits[i]++;\\n        if(digits[i]>9){\\n            digits[i]=0;\\n        }\\n        else{\\n            return digits;\\n        }\\n    }\\n    digits.unshift(1);\\n    return digits;\\n};\\n```\\n**Runtime: 72 ms, faster than 83.48% of JavaScript online submissions for Plus One.**\\n\\n**Memory Usage: 37 MB, less than 9.82% of JavaScript online submissions for Plus One.**\\n\\n**Feedback Appreciated**",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nlet plusOne = function(digits) {\\n    for(let i=digits.length-1;i>=0;i--){\\n        digits[i]++;\\n        if(digits[i]>9){\\n            digits[i]=0;\\n        }\\n        else{\\n            return digits;\\n        }\\n    }\\n    digits.unshift(1);\\n    return digits;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24086,
                "title": "recursive-c-solution-3ms",
                "content": "```\\n    vector<int> plusOne(vector<int>& digits) \\n    {\\n        if (digits.back() == 9)\\n        {\\n            digits.pop_back();\\n            digits = plusOne(digits);\\n            digits.push_back(0);\\n        }\\n        \\n        else if (digits.empty())\\n            digits.push_back(1);\\n\\n        else\\n            digits.back()++;\\n        \\n        return digits;\\n    }\\n```\\nIf the last digit is ```9```, we remove that ```9``` from the vector and add ```1``` to the vector without ```9```; essentially carrying the ```1```. After adding the ```1``` we put``` 0``` at the end of the vector, which will take the place of the ```9 ```from this particular recursion. Since the input is described as non-empty, we can assume the vector will only be empty if it was composed solely of 9's. Thus, we simply push_back ```1``` and return the vector.\\nThis allows for ```plusOne([9,9,9])``` to return ```[1,0,0,0]```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n    vector<int> plusOne(vector<int>& digits) \\n    {\\n        if (digits.back() == 9)\\n        {\\n            digits.pop_back();\\n            digits = plusOne(digits);\\n            digits.push_back(0);\\n        }\\n        \\n        else if (digits.empty())\\n            digits.push_back(1);\\n\\n        else\\n            digits.back()++;\\n        \\n        return digits;\\n    }\\n```\n```9```\n```9```\n```1```\n```9```\n```1```\n```1```\n``` 0```\n```9 ```\n```1```\n```plusOne([9,9,9])```\n```[1,0,0,0]```",
                "codeTag": "Unknown"
            },
            {
                "id": 24125,
                "title": "0ms-java-solution",
                "content": "    public int[] plusOne(int[] digits) {\\n        int i = digits.length - 1;\\n        while(i >= 0){\\n            if(digits[i] == 9)\\n                digits[i--] = 0;\\n            else{\\n                digits[i]++;\\n                return digits;\\n            }\\n        }\\n        int[] array = new int[digits.length+1];\\n        array[0] = 1;\\n        return array;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public int[] plusOne(int[] digits) {\\n        int i = digits.length - 1;\\n        while(i >= 0){\\n            if(digits[i] == 9)\\n                digits[i--] = 0;\\n            else{\\n                digits[i]++;\\n                return digits;\\n            }\\n        }\\n        int[] array = new int[digits.length+1];\\n        array[0] = 1;\\n        return array;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 24416,
                "title": "share-my-4ms-c-solution",
                "content": "    class Solution {\\n    public:\\n        vector<int> plusOne(vector<int> &digits) {   //\\u672a\\u8003\\u8651\\u524d\\u7f000\\u7684\\u60c5\\u51b5\\n            for(int i = digits.size() - 1; i >= 0; i--)   \\n            {\\n                if(digits[i] != 9)\\n                {\\n                    digits[i] ++;\\n                    break;\\n                }\\n                digits[i] = 0;\\n            }\\n            if(digits[0] == 0)\\n                digits.insert(digits.begin(), 1);\\n            return digits;\\n            \\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        vector<int> plusOne(vector<int> &digits) {   //\\u672a\\u8003\\u8651\\u524d\\u7f000\\u7684\\u60c5\\u51b5\\n            for(int i = digits.size() - 1; i >= 0; i--)   \\n            {\\n                if(digits[i] != 9)\\n                {\\n                    digits[i] ++;\\n                    break;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 3032275,
                "title": "beats-98-7-solutions-easy-to-understand-single-for-loop-o-n-tc-in-python-by-bolt-coding",
                "content": "# Explanation\\nWe are iterating from back to the list as we need to add at the end. We are checking if the current digit is 9. That means we have to replace 9 with 0 and have a carry of 1. If thats not the case then we don\\'t have to iterate through whole loop, we can simply return the list of digit from there.\\n\\nIn case its running until the loop ends, that means all the digits are 9. So inorder to insert a 1 at 0 position we appened with an additional 0 at the end and changed digit[0] to 1. Now there are various ways to do the same, we can use insert method as well.\\n# Complexity\\n- Time complexity: O(n) as we are using a single loop and worst case if all the digits are 9 we have to iterate through whole loop \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1) as we haven\\'t used any additional variable to store the number.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def plusOne(self, digit: List[int]) -> List[int]:\\n        for i in range(len(digit)-1, -1, -1):\\n            if digit[i] == 9:\\n                digit[i] = 0\\n            else:\\n                digit[i]+=1\\n                return digit\\n    \\n        digit.append(0)            \\n        digit[0] = 1\\n        return digit\\n        \\n\\n        \\n```\\n# Learning\\nTo understand problems in simpler ways, need help with projects, want to learn coding from scratch, work on resume level projects, learn data science ...................\\n\\nSubscribe to Bolt Coding Channel - https://www.youtube.com/@boltcoding",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digit: List[int]) -> List[int]:\\n        for i in range(len(digit)-1, -1, -1):\\n            if digit[i] == 9:\\n                digit[i] = 0\\n            else:\\n                digit[i]+=1\\n                return digit\\n    \\n        digit.append(0)            \\n        digit[0] = 1\\n        return digit\\n        \\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1331911,
                "title": "javascript-easy-solution",
                "content": "Easy to understand solution I found, not the fastest around, but nice for beginners like me :) \\n\\n```\\nvar plusOne = function(digits) {\\n    const fromArray = digits.join(\\'\\'); // get Digits out of Array\\n    const toInt = BigInt(fromArray) ; //Dont use parseInt, use BigInt instead :) \\n    const addOne = toInt + 1n; // add one! \\n    const result =  Array.from(String(addOne), Number); // return digits to array\\n    return result\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar plusOne = function(digits) {\\n    const fromArray = digits.join(\\'\\'); // get Digits out of Array\\n    const toInt = BigInt(fromArray) ; //Dont use parseInt, use BigInt instead :) \\n    const addOne = toInt + 1n; // add one! \\n    const result =  Array.from(String(addOne), Number); // return digits to array\\n    return result\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24461,
                "title": "fastest-and-simplest-c-solution",
                "content": "    class Solution {\\n    public:\\n        vector<int> plusOne(vector<int> &digits) {\\n            int i,j,carry=1;\\n            // traditional long addition..\\n            for(i=digits.size()-1;i>=0&&carry;i--){\\n                int sum=carry+digits[i];\\n                carry=sum/10;\\n                digits[i]=sum%10;\\n            }\\n            if(carry){ // if carry is 1, then digits must be all 99..999\\n                digits[0]=1;\\n                digits.push_back(0);\\n            }\\n            return digits;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        vector<int> plusOne(vector<int> &digits) {\\n            int i,j,carry=1;\\n            // traditional long addition..\\n            for(i=digits.size()-1;i>=0&&carry;i--){\\n                int sum=carry+digits[i];\\n                carry=sum/10;\\n                digits[i]=sum%10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2314145,
                "title": "0ms-1liner-100-fastest-solution-explained-o-n-time-complexity-o-n-space-complexity",
                "content": "\\n(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful, ***please upvote*** this post.)\\n***Take care brother, peace, love!***\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 3.27MB*** (beats 99.04% / 90.42%).\\n\\n```\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        \\n    int n = digits.length;\\n    for(int i=n-1; i>=0; i--) {\\n        if(digits[i] < 9) {\\n            digits[i]++;\\n            return digits;\\n        }\\n        \\n        digits[i] = 0;\\n    }\\n    \\n    int[] newNumber = new int [n+1];\\n    newNumber[0] = 1;\\n    \\n    return newNumber;\\n}\\n}\\n\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\n***\"Open your eyes. Expect us.\" - \\uD835\\uDCD0\\uD835\\uDCF7\\uD835\\uDCF8\\uD835\\uDCF7\\uD835\\uDD02\\uD835\\uDCF6\\uD835\\uDCF8\\uD835\\uDCFE\\uD835\\uDCFC***\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "Swift",
                    "Kotlin",
                    "PHP"
                ],
                "code": "```\\n```\n```\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        \\n    int n = digits.length;\\n    for(int i=n-1; i>=0; i--) {\\n        if(digits[i] < 9) {\\n            digits[i]++;\\n            return digits;\\n        }\\n        \\n        digits[i] = 0;\\n    }\\n    \\n    int[] newNumber = new int [n+1];\\n    newNumber[0] = 1;\\n    \\n    return newNumber;\\n}\\n}\\n\\n```\n```\\n```\n```\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2188812,
                "title": "java-0ms-easy-100",
                "content": "If it helps, do an Upvote \\u2B06\\uFE0F\\uD83C\\uDD99 So others can also find it helpful\\n```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        \\n        for(int i = digits.length - 1; i >= 0; i--){\\n            if(++digits[i] != 10) return digits;\\n            digits[i] = 0;\\n        }\\n        int [] res = new int[digits.length + 1];\\n        \\n        res[0] = 1;\\n        return res;\\n    }\\n    }\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        \\n        for(int i = digits.length - 1; i >= 0; i--){\\n            if(++digits[i] != 10) return digits;\\n            digits[i] = 0;\\n        }\\n        int [] res = new int[digits.length + 1];\\n        \\n        res[0] = 1;\\n        return res;\\n    }\\n    }\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24174,
                "title": "simple-swift-solution",
                "content": "```\\nfunc plusOne(_ digits: [Int]) -> [Int] {\\n        var result = digits\\n        for i in (0..<result.count).reversed() {\\n            if result[i] != 9 {\\n                result[i] = result[i]+1\\n                return result\\n            } else {\\n                result[i] = 0\\n            }\\n        }\\n        if result.first == 0 {\\n            result.insert(1, at: 0)\\n        }\\n        return result\\n    }\\n```\\nExplanation: Loop from the end of the array to start. Just add 1 if the digit is not a 9, and return. If digit is a 9, replace it with a 0 and go to the previous digit - rinse an repeat. In the end, check if the first digit of the resulting array is a 0. If it is, that means that the number was of the form 9999... In this case, insert a 1 in the start.",
                "solutionTags": [],
                "code": "```\\nfunc plusOne(_ digits: [Int]) -> [Int] {\\n        var result = digits\\n        for i in (0..<result.count).reversed() {\\n            if result[i] != 9 {\\n                result[i] = result[i]+1\\n                return result\\n            } else {\\n                result[i] = 0\\n            }\\n        }\\n        if result.first == 0 {\\n            result.insert(1, at: 0)\\n        }\\n        return result\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24349,
                "title": "simple-python-o-n-solution-without-converting-to-a-number",
                "content": "The idea here is to start from the right side.  As soon as we find a number that isn't 9 we can add 1 to it and return.  If the number is 9, we change it to 0 and continue until we find a number that is not 9 to carry the 1 to.  If we reach the end of array with all 9's we then insert the 1 in front of array. \\n\\n\\n     def plusOne(self, digits):\\n        for i in range(len(digits)-1, -1, -1):\\n            digits[i] = digits[i] + 1 if digits[i] < 9 else 0\\n            if digits[i]: \\n                return digits\\n        digits.insert(0, 1)\\n        return digits",
                "solutionTags": [
                    "Python"
                ],
                "code": "The idea here is to start from the right side.  As soon as we find a number that isn't 9 we can add 1 to it and return.  If the number is 9, we change it to 0 and continue until we find a number that is not 9 to carry the 1 to.  If we reach the end of array with all 9's we then insert the 1 in front of array. \\n\\n\\n     def plusOne(self, digits):\\n        for i in range(len(digits)-1, -1, -1):\\n            digits[i] = digits[i] + 1 if digits[i] < 9 else 0\\n            if digits[i]: \\n                return digits\\n        digits.insert(0, 1)\\n        return digits",
                "codeTag": "Python3"
            },
            {
                "id": 3624231,
                "title": "easy-approach-0ms-cpp-0-n-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust iterate from back instead of from front. Then keep adding and handling carry variable.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nJust add as if adding a normal numbers\\nLike if you want to add 239 + 1 then first you do 9+1 = 10, then we take 0 and carry 1.\\nThis 0 above is 10%10 and 1 is 10/10. Thus, I have taken, digits[i] = add%10 and carry is add/10.\\n\\n\\nAt the end if the carry is not 0 --> Add an element in the vector at the frontend.\\nEx - 9 + 1 = 0 and carry 1\\nSo insert it at the beginning as 10 to make 9+1=10\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int carry = 1;\\n        for(int i=digits.size() - 1; i>=0; i--){\\n            int add = digits[i] + carry;\\n            digits[i] = add%10;\\n            carry = add/10;\\n        }\\n        if(carry > 0){\\n            digits.insert(digits.begin(), carry);\\n        }\\n\\n        return digits;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int carry = 1;\\n        for(int i=digits.size() - 1; i>=0; i--){\\n            int add = digits[i] + carry;\\n            digits[i] = add%10;\\n            carry = add/10;\\n        }\\n        if(carry > 0){\\n            digits.insert(digits.begin(), carry);\\n        }\\n\\n        return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 159471,
                "title": "python-solution",
                "content": "```\\nclass Solution:\\n    def plusOne(self, digits):\\n        \"\"\"\\n        :type digits: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        carry = 1\\n        for i in range(len(digits)-1, -1, -1):\\n            carry, digits[i] = divmod(digits[i]+carry, 10)\\n            if carry == 0:\\n                return digits\\n        return [1]+digits\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits):\\n        \"\"\"\\n        :type digits: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        carry = 1\\n        for i in range(len(digits)-1, -1, -1):\\n            carry, digits[i] = divmod(digits[i]+carry, 10)\\n            if carry == 0:\\n                return digits\\n        return [1]+digits\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2780735,
                "title": "java-solution-easy-to-undersatnd-explained-in-detail",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n * we started checking from back if last digit is less than 9 we simply add one one to the digit and return the digit.\\n *  otherwise the case will be last digit was 9 so we make the digit 0 as we know 9+1 = 10 so last digit in these cases need to be 0 so we do that.\\n *  here we create a new array of size input given to us +1 so that we can actually add 1 to beginning of our new array and we retuen the new array thats it.For ex:[9,9,9] = [1,0,0,0] in this case we need one more digit space as we need to carry 1 so in this way we do this.\\n\\n\\n**If it is helpful please do upvote,Happy coding!!\\n**\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n        for(int i=n-1;i>=0;i--){  \\n            if(digits[i]<9){\\n                digits[i]++;\\n                return digits;\\n            }\\n            else{\\n                digits[i]=0;\\n            }\\n        }\\n        int [] arr = new int[n+1];\\n        arr[0]=1;\\n        return arr;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n        for(int i=n-1;i>=0;i--){  \\n            if(digits[i]<9){\\n                digits[i]++;\\n                return digits;\\n            }\\n            else{\\n                digits[i]=0;\\n            }\\n        }\\n        int [] arr = new int[n+1];\\n        arr[0]=1;\\n        return arr;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1557528,
                "title": "c-easy-solution",
                "content": "/// C# Code\\npublic int[] PlusOne(int[] digits) {\\n        for(int i=digits.Length-1;i>=0;i--)\\n        {\\n            if(digits[i]<9)\\n            {\\n                digits[i]++;\\n                return digits;\\n            }\\n            digits[i]=0;\\n        }\\n        int[] result=new int[digits.Length+1];\\n        result[0]=1;\\n        return result;\\n    }",
                "solutionTags": [],
                "code": "/// C# Code\\npublic int[] PlusOne(int[] digits) {\\n        for(int i=digits.Length-1;i>=0;i--)\\n        {\\n            if(digits[i]<9)\\n            {\\n                digits[i]++;\\n                return digits;\\n            }\\n            digits[i]=0;\\n        }\\n        int[] result=new int[digits.Length+1];\\n        result[0]=1;\\n        return result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 500774,
                "title": "simple-solution-faster-than-98-82",
                "content": "```\\n    public class Solution\\n    {\\n        public int[] PlusOne(int[] digits)\\n        {\\n            for (int i = digits.Length - 1; i >= 0; i--)\\n            {\\n                if (digits[i] == 9)\\n                {\\n                    digits[i] = 0;\\n                }\\n                else\\n                {\\n                    digits[i]++;\\n                    return digits;\\n                }\\n            }\\n            int[] newBigOne = new int[digits.Length + 1];\\n            newBigOne[0] = 1;\\n            return newBigOne;\\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public class Solution\\n    {\\n        public int[] PlusOne(int[] digits)\\n        {\\n            for (int i = digits.Length - 1; i >= 0; i--)\\n            {\\n                if (digits[i] == 9)\\n                {\\n                    digits[i] = 0;\\n                }\\n                else\\n                {\\n                    digits[i]++;\\n                    return digits;\\n                }\\n            }\\n            int[] newBigOne = new int[digits.Length + 1];\\n            newBigOne[0] = 1;\\n            return newBigOne;\\n        }\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24333,
                "title": "accepted-easy-java-solution",
                "content": "    public static int[] plusOne(int[] digits) {\\n\\t        if(0==digits.length) return digits;\\n\\t\\t    for(int i=digits.length-1;i>=0;i--)\\n\\t\\t    {\\n\\t\\t        \\n\\t\\t       if(digits[i]!=9) {digits[i]++;return digits;}\\n\\t\\t   \\t   else\\tdigits[i]=0;\\n\\t\\t    }\\n\\t\\t  int[] result=new int[digits.length+1];\\n\\t\\t  result[0]=1; \\n\\t\\t  return result;   \\n\\t    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public static int[] plusOne(int[] digits) {\\n\\t        if(0==digits.length) return digits;\\n\\t\\t    for(int i=digits.length-1;i>=0;i--)\\n\\t\\t    {\\n\\t\\t        \\n\\t\\t       if(digits[i]!=9) {digits[i]++;return digits;}\\n\\t\\t   \\t   else\\tdigits[i]=0;\\n\\t\\t    }\\n\\t\\t  int[] result=new int[digits.length+1];\\n\\t\\t  result[0]=1; \\n\\t\\t  return result;   \\n\\t    }",
                "codeTag": "Unknown"
            },
            {
                "id": 24346,
                "title": "c-solution-with-comments",
                "content": "    \\n    int* plusOne(int* digits, int digitsSize, int* returnSize) {\\n    int carry = 1, i = digitsSize;\\n    int* ret = (int*)malloc(sizeof(int)*(digitsSize+1));\\n    while (i > 0) {\\n        ret[i] = (digits[i-1]+carry)%10;\\n        carry = (digits[i-1]+carry)/10;\\n        i--;\\n    }\\n    if (!ret[1]) { \\n        // size increased 1, set the first digit\\n        ret[0] = 1;\\n        *returnSize = digitsSize+1;\\n        return ret;\\n    } else {\\n        *returnSize = digitsSize;\\n        return ret+1;\\n    }",
                "solutionTags": [],
                "code": "    \\n    int* plusOne(int* digits, int digitsSize, int* returnSize) {\\n    int carry = 1, i = digitsSize;\\n    int* ret = (int*)malloc(sizeof(int)*(digitsSize+1));\\n    while (i > 0) {\\n        ret[i] = (digits[i-1]+carry)%10;\\n        carry = (digits[i-1]+carry)/10;\\n        i--;\\n    }\\n    if (!ret[1]) { \\n        // size increased 1, set the first digit\\n        ret[0] = 1;\\n        *returnSize = digitsSize+1;\\n        return ret;\\n    } else {\\n        *returnSize = digitsSize;\\n        return ret+1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3192789,
                "title": "easy-solution-javascript",
                "content": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar plusOne = function(arr) {\\n    for(let i=arr.length-1; i>=0; i--){\\n        if(arr[i]<9){\\n            arr[i]++;\\n            return arr;\\n        }\\n        arr[i] = 0;\\n    }\\n    arr.unshift(1);\\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar plusOne = function(arr) {\\n    for(let i=arr.length-1; i>=0; i--){\\n        if(arr[i]<9){\\n            arr[i]++;\\n            return arr;\\n        }\\n        arr[i] = 0;\\n    }\\n    arr.unshift(1);\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3069349,
                "title": "python3-29ms-beats-95",
                "content": "![image.png](https://assets.leetcode.com/users/images/85217fc8-e205-4817-89aa-1d0fb37eae44_1675841089.4490588.png)\\nPlease UPVOTE if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!\\n\\n# Code\\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        digits=digits[::-1]\\n        x=1\\n        ans=[]\\n        for i in range(len(digits)):\\n            ans+=[(digits[i]+x)%10]\\n            x=(digits[i]+x)//10\\n        if x:\\n            ans+=[x]\\n        return ans[::-1]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        digits=digits[::-1]\\n        x=1\\n        ans=[]\\n        for i in range(len(digits)):\\n            ans+=[(digits[i]+x)%10]\\n            x=(digits[i]+x)//10\\n        if x:\\n            ans+=[x]\\n        return ans[::-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2520098,
                "title": "easy-javascript-solution",
                "content": "```\\n    // first join the digits with no space and add 1  \\n    let str = digits.join(\"\");\\n    let num = BigInt(str)+ BigInt(1);\\n    // convert the num into array\\n    num = num.toString().split(\\'\\').map((num) => parseInt(num));\\n    return num;",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n    // first join the digits with no space and add 1  \\n    let str = digits.join(\"\");\\n    let num = BigInt(str)+ BigInt(1);\\n    // convert the num into array\\n    num = num.toString().split(\\'\\').map((num) => parseInt(num));\\n    return num;",
                "codeTag": "Unknown"
            },
            {
                "id": 1794804,
                "title": "python3-one-line-simple-and-fastest-using-str-int-and-line-comprehension",
                "content": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        a=[str(i) for i in digits]\\n        a=\\'\\'.join(a)\\n        a=str(int(a)+1)\\n        return [int(i) for i in a]\\n\\n```\\n\\n**compressed into one line**\\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        return [int(i) for i in str(int(\\'\\'.join([str(i) for i in digits]))+1)]\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        a=[str(i) for i in digits]\\n        a=\\'\\'.join(a)\\n        a=str(int(a)+1)\\n        return [int(i) for i in a]\\n\\n```\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        return [int(i) for i in str(int(\\'\\'.join([str(i) for i in digits]))+1)]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1232867,
                "title": "js-faster-than-93-o-n",
                "content": "First we add 1 to the last element. \\nThen, we iteratively check starting from least significant to most significant if the digit is a 10. \\nIf it is, we set it to 0 and to the digit before it we add 1.\\nOnce we are done with this, we update the first digit if it\\'s a 10, adding a digit of 1 in front of it.\\n```\\nconst plusOne = (digits) => {\\n  const last = digits.length - 1;\\n  digits[last]++;\\n  for (let i = last; i > 0 && digits[i] === 10; i--) {\\n    digits[i] = 0;\\n    digits[i - 1]++;\\n  }\\n  if (digits[0] === 10) {\\n    digits[0] = 0;\\n    digits.unshift(1);\\n  }\\n  return digits;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst plusOne = (digits) => {\\n  const last = digits.length - 1;\\n  digits[last]++;\\n  for (let i = last; i > 0 && digits[i] === 10; i--) {\\n    digits[i] = 0;\\n    digits[i - 1]++;\\n  }\\n  if (digits[0] === 10) {\\n    digits[0] = 0;\\n    digits.unshift(1);\\n  }\\n  return digits;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 167759,
                "title": "go-solution",
                "content": "```\\nfunc plusOne(digits []int) []int {\\n    for i := len(digits)-1; i >= 0; i-- {\\n        if digits[i] < 9 {\\n            digits[i] += 1\\n            return digits\\n        }\\n        digits[i] = 0\\n    }\\n    \\n    digits = append([]int{1}, digits...)\\n    \\n    return digits\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc plusOne(digits []int) []int {\\n    for i := len(digits)-1; i >= 0; i-- {\\n        if digits[i] < 9 {\\n            digits[i] += 1\\n            return digits\\n        }\\n        digits[i] = 0\\n    }\\n    \\n    digits = append([]int{1}, digits...)\\n    \\n    return digits\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24372,
                "title": "accepted-4ms-c-solution-easy-and-short",
                "content": "    class Solution {\\n    public:\\n        std::vector<int> plusOne(std::vector<int>& digits) {\\n            int pos = digits.size() - 1;\\n            while (pos >= 0 && digits[pos] == 9) {\\n                digits[pos] = 0;\\n                --pos;\\n            }\\n            if (pos == -1) {\\n                digits[0] = 1;\\n                digits.push_back(0);\\n            } else {\\n                ++digits[pos];\\n            }\\n            return digits;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        std::vector<int> plusOne(std::vector<int>& digits) {\\n            int pos = digits.size() - 1;\\n            while (pos >= 0 && digits[pos] == 9) {\\n                digits[pos] = 0;\\n                --pos;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3942526,
                "title": "java-simple-solution-runtime-0ms-beats100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n         \\n        int i = 0;\\n        while (i <= digits.length - 1 && digits[digits.length - 1 - i] == 9) {\\n            i++;\\n        }\\n\\n        int[] output = (digits.length == i) ? new int[digits.length + 1] : new int[digits.length];\\n\\n        if (digits.length == i) {\\n            output[0] = 1;\\n        } else {\\n\\n            for (int j = 0; j <= digits.length - i - 1; j++) \\n            {\\n                output[j] = digits[j];\\n            }\\n\\n            output[digits.length - 1 - i] = digits[digits.length - i - 1] + 1;\\n        }\\n        return output;\\n    }\\n}\\n```\\n\\n\\n![e78315ef-8a9d-492b-9908-e3917f23eb31_1674946036.087042.jpeg](https://assets.leetcode.com/users/images/f7abc399-3a52-4e17-850a-9fc8984ee6c9_1692645882.9655104.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n         \\n        int i = 0;\\n        while (i <= digits.length - 1 && digits[digits.length - 1 - i] == 9) {\\n            i++;\\n        }\\n\\n        int[] output = (digits.length == i) ? new int[digits.length + 1] : new int[digits.length];\\n\\n        if (digits.length == i) {\\n            output[0] = 1;\\n        } else {\\n\\n            for (int j = 0; j <= digits.length - i - 1; j++) \\n            {\\n                output[j] = digits[j];\\n            }\\n\\n            output[digits.length - 1 - i] = digits[digits.length - i - 1] + 1;\\n        }\\n        return output;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3056619,
                "title": "c-properly-explained-with-comments",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n      int n = digits.size() - 1;\\n      \\n      for (int i = n; i >= 0; --i) { // traverse digits from the last element (least significant)\\n        // since we begin with the last digit, increasing that digit by one\\n        // results in overflow.  Therefore, all elements PRIOR to digits[0]\\n        // need to be considered since there may be additional nines between\\n        // digits[0], ... , digits[n].\\n        if (digits[i] == 9) {  \\n          digits[i] = 0;\\n        } else {  // current digit is not 9 so we can safely increment by one\\n          digits[i] += 1;\\n          return digits;\\n        }\\n      }\\n      // if the program runs to this point, each 9 is now a 0.\\n      // to get a correct solution, we need to add one more element with \\n      // a value of zero AND set digits[0] to 1 (in the most significant position)\\n      // to account for the carry digit.\\n      digits.push_back(0);\\n      digits[0] = 1;\\n      return digits;\\n    }\\n};\\n\\n```\\n**Please upvote if it helped. Happy Coding**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n      int n = digits.size() - 1;\\n      \\n      for (int i = n; i >= 0; --i) { // traverse digits from the last element (least significant)\\n        // since we begin with the last digit, increasing that digit by one\\n        // results in overflow.  Therefore, all elements PRIOR to digits[0]\\n        // need to be considered since there may be additional nines between\\n        // digits[0], ... , digits[n].\\n        if (digits[i] == 9) {  \\n          digits[i] = 0;\\n        } else {  // current digit is not 9 so we can safely increment by one\\n          digits[i] += 1;\\n          return digits;\\n        }\\n      }\\n      // if the program runs to this point, each 9 is now a 0.\\n      // to get a correct solution, we need to add one more element with \\n      // a value of zero AND set digits[0] to 1 (in the most significant position)\\n      // to account for the carry digit.\\n      digits.push_back(0);\\n      digits[0] = 1;\\n      return digits;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2835091,
                "title": "c-most-optimal-solution-0ms-and-less-memory",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int s=digits.size()-1;    //Length of the vector \\n        while(s>=0){\\n            if(digits[s]<9){\\n                digits[s]+=1;\\n                return digits;\\n            }\\n            else{\\n                digits[s]=0;\\n                s--;\\n            }\\n        }\\n        vector<int> :: iterator iter=digits.begin();   //Inserting 1 if incase the number is [9],[9,9,9,9] etc\\n        digits.insert(iter,1);\\n        return digits;\\n    }\\n};\\n```\\n\\nPlease upvote if found useful!",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int s=digits.size()-1;    //Length of the vector \\n        while(s>=0){\\n            if(digits[s]<9){\\n                digits[s]+=1;\\n                return digits;\\n            }\\n            else{\\n                digits[s]=0;\\n                s--;\\n            }\\n        }\\n        vector<int> :: iterator iter=digits.begin();   //Inserting 1 if incase the number is [9],[9,9,9,9] etc\\n        digits.insert(iter,1);\\n        return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2800794,
                "title": "fast-as-fuck-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    vector<int> plusOne(vector<int>& digits) {\\n        for(int i = digits.size()-1; i>=0; i--){\\n                    if(digits[i]<9){\\n                    digits[i]++;\\n                    return digits;\\n                    }\\n                    else\\n                            digits[i] = 0;\\n                    \\n            }\\n            digits.push_back(0);\\n            digits[0] = 1;\\n            return digits;\\n    }\\n};\\n```\\nupvote if useful",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    vector<int> plusOne(vector<int>& digits) {\\n        for(int i = digits.size()-1; i>=0; i--){\\n                    if(digits[i]<9){\\n                    digits[i]++;\\n                    return digits;\\n                    }\\n                    else\\n                            digits[i] = 0;\\n                    \\n            }\\n            digits.push_back(0);\\n            digits[0] = 1;\\n            return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2257638,
                "title": "very-easy-java-solution-100-fully-explained-and-understandable",
                "content": "```\\nclass Solution {\\n\\n    public int[] plusOne(int[] digits) {\\n        \\n        //To solve this, we take digits one by one from end to start..\\n        for (int i = digits.length - 1; i >= 0; i--) {\\n            \\n            // If a digit is not equal to 9, we plus one directly and then quit the loop...\\n            if (digits[i] != 9) {\\n                digits[i]++;\\n                break;\\n                \\n            //if the digit is 9, we set it to 0, and continue the loop until\\n            //we encounter the number don\\'t equals to 9...\\n            } else {\\n                digits[i] = 0;\\n            }\\n        }\\n        if (digits[0] == 0) {      //it means, we need a bigger array to represent the number.\\n            int[] res = new int[digits.length + 1];    //so we create a new array res...\\n            res[0] = 1;                                //and set res[0] to 1...\\n            return res;\\n        }\\n        return digits;      //return the digits...\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    public int[] plusOne(int[] digits) {\\n        \\n        //To solve this, we take digits one by one from end to start..\\n        for (int i = digits.length - 1; i >= 0; i--) {\\n            \\n            // If a digit is not equal to 9, we plus one directly and then quit the loop...\\n            if (digits[i] != 9) {\\n                digits[i]++;\\n                break;\\n                \\n            //if the digit is 9, we set it to 0, and continue the loop until\\n            //we encounter the number don\\'t equals to 9...\\n            } else {\\n                digits[i] = 0;\\n            }\\n        }\\n        if (digits[0] == 0) {      //it means, we need a bigger array to represent the number.\\n            int[] res = new int[digits.length + 1];    //so we create a new array res...\\n            res[0] = 1;                                //and set res[0] to 1...\\n            return res;\\n        }\\n        return digits;      //return the digits...\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1117634,
                "title": "python-99-75-list-str-int-1-str-list",
                "content": "*Runtime: 20 ms, faster than 99.74% of Python3 online submissions for Plus One.\\nMemory Usage: 14 MB, less than 99.00% of Python3 online submissions for Plus One.*\\n\\nVariables named as writes are much faster than reads:\\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        a = \\'\\'.join(map(str, digits))\\n        b = int(a) + 1\\n        c = str(b)\\n        return list(map(int, c))\\n```\\nhttps://leetcode.com/submissions/detail/469908019/",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        a = \\'\\'.join(map(str, digits))\\n        b = int(a) + 1\\n        c = str(b)\\n        return list(map(int, c))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3627432,
                "title": "simple-java-code-easy-approach-0ms-runtime",
                "content": "# Intuition\\nAs per the question given we need to increment the array value by one and return the resultant array with ith digit at ith position of that array For example: digits=[1,2,3] after adding one to this array i.e, 123+1=124 ...gives digits=[1,2,4] \\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere we need to notice that the input maybe given any large integer value so we cannot convert our array into number and increemnt and convert it back as an array instead i followed this follwing logic by taking one place and comparing whether its less than 9 or equal to 9.\\nif its equal to 9 go and check for next ith digit else increment this digit by one and return the array\\nFor better undertanding please see these below steps:\\n1. As its already an int[] array given the last element of the array will be considered as the units place of the number we need to add 1 for last digit if its less than 9\\n2. if the last element is greater than 9 we need to check for before element and increment if its less than 9..\\n3. if all the elements are 9 we need add another element to the array\\nfor example: [9,9] --> [1,0,0]\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    StringBuilder s=new StringBuilder();\\n    public int[] plusOne(int[] digits) {\\n        for(int i=(digits.length)-1;i >= 0;i--){\\n            if(digits[i]<9){\\n                digits[i]=digits[i]+1;\\n                return digits;\\n            }else if(digits[i]==9){\\n                digits[i]=0;\\n            }   \\n        }\\n        int[] newarr=new int[digits.length+1];\\n        newarr[0]=1;\\n        return newarr;\\n    }\\n}\\n```\\n![upvote.png](https://assets.leetcode.com/users/images/239c196e-5f36-48cc-b148-20966d5a3f9f_1687449464.7053354.png)\\n\\n\\n\\n**Guys please upvote if you find my solution worthy!! Thanks!**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    StringBuilder s=new StringBuilder();\\n    public int[] plusOne(int[] digits) {\\n        for(int i=(digits.length)-1;i >= 0;i--){\\n            if(digits[i]<9){\\n                digits[i]=digits[i]+1;\\n                return digits;\\n            }else if(digits[i]==9){\\n                digits[i]=0;\\n            }   \\n        }\\n        int[] newarr=new int[digits.length+1];\\n        newarr[0]=1;\\n        return newarr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2946815,
                "title": "simple-backward-looping-with-c",
                "content": "# Intuition\\nThought about how we can minimize the amount of computation.\\n\\n# Approach\\nLoop backward. \\n\\n1. In case of 9, assign 0. That means we need to increment next digit.\\n2. The others increment and return the digits. \\n3. If the loop has been finished, that means, it requres additional digit. add it and return it.\\n\\nOnly the 3 cases requires additional Memory space and breaks before reach N.\\n\\n# Complexity\\n- Time complexity:\\nO(2N) = O(N).\\nNOTE: I don\\'t know the internal of Concat method. So that my guess.\\n\\n- Space complexity:\\nO(N): Probably, Linq might create a new List or equivalent.\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[] PlusOne(int[] digits) {\\n       for(int i = digits.Length - 1; i >= 0; i--) {\\n           if (digits[i] == 9) {\\n               digits[i] = 0;\\n           } else {\\n               digits[i]++;\\n               return digits;\\n           }\\n       } \\n       int[] firstOne = new int[] { 1 };\\n       return firstOne.Concat(digits).ToArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] PlusOne(int[] digits) {\\n       for(int i = digits.Length - 1; i >= 0; i--) {\\n           if (digits[i] == 9) {\\n               digits[i] = 0;\\n           } else {\\n               digits[i]++;\\n               return digits;\\n           }\\n       } \\n       int[] firstOne = new int[] { 1 };\\n       return firstOne.Concat(digits).ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2711629,
                "title": "fastest-and-easiest-one-liner-faster-than-92-submissions",
                "content": "![image](https://assets.leetcode.com/users/images/5c6d1d55-0730-49d9-a4d8-2d838174d939_1666035771.7792413.png)\\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        d=int(\"\".join(map(str, digits)))\\n        d+=1\\n        return list(str(d))\\n```\\nDo upvote if its helpful,Thanks.",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        d=int(\"\".join(map(str, digits)))\\n        d+=1\\n        return list(str(d))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2543183,
                "title": "easy-java-solution-faster-than-100-users",
                "content": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n        for(int i =n-1;i>=0;i--){\\n            if(digits[i]<9){\\n                digits[i]++;\\n                return digits;\\n            }\\n            digits[i]=0;\\n            \\n        }\\n        int[] arr = new int[n+1];\\n        arr[0]=1;\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n        for(int i =n-1;i>=0;i--){\\n            if(digits[i]<9){\\n                digits[i]++;\\n                return digits;\\n            }\\n            digits[i]=0;\\n            \\n        }\\n        int[] arr = new int[n+1];\\n        arr[0]=1;\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1754490,
                "title": "c-solution-fastest-with-least-time-complexity-and-constant-space",
                "content": "```\\n        //storing given array\\'s size in n\\n        int n = digits.size();\\n        \\n        //taking flag for putting a condition further in code\\n        bool flag = 0;\\n        \\n        //traversing from the last for incrementing with a condition i.e. digit should be < 9.\\n        for(int i = n-1; i>=0; i--){\\n            //checking condition whether digit < 9\\n            if(digits[i]<9){\\n                digits[i] = digits[i] + 1;\\n                flag = 1;\\n                break;\\n            }else{\\n                //if digit is not < 9, then we have to make it 0(coz 9 + 1 = 10(0 in this case, as we are taking ones place))\\n                digits[i] = 0;\\n            }\\n        }\\n        //checking if flag is still 0, if it is 0 then we have to insert 1 at the beginning\\n        if(flag==0){\\n            digits.insert(digits.begin(), 1);\\n        }\\n        return digits;\\n```",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\n        //storing given array\\'s size in n\\n        int n = digits.size();\\n        \\n        //taking flag for putting a condition further in code\\n        bool flag = 0;\\n        \\n        //traversing from the last for incrementing with a condition i.e. digit should be < 9.\\n        for(int i = n-1; i>=0; i--){\\n            //checking condition whether digit < 9\\n            if(digits[i]<9){\\n                digits[i] = digits[i] + 1;\\n                flag = 1;\\n                break;\\n            }else{\\n                //if digit is not < 9, then we have to make it 0(coz 9 + 1 = 10(0 in this case, as we are taking ones place))\\n                digits[i] = 0;\\n            }\\n        }\\n        //checking if flag is still 0, if it is 0 then we have to insert 1 at the beginning\\n        if(flag==0){\\n            digits.insert(digits.begin(), 1);\\n        }\\n        return digits;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 721895,
                "title": "c",
                "content": "```\\npublic class Solution {\\n    public int[] PlusOne(int[] digits) {\\n        int carrier = 1;\\n        \\n        for (int i = digits.Length - 1; i >= 0; i--)\\n        {\\n            int temp = digits[i] + carrier;\\n            \\n            digits[i] = temp % 10;\\n            carrier = temp / 10;\\n        }\\n        \\n        if (carrier == 1)\\n        {\\n            List<int> temp = new List<int>();\\n            \\n            temp.Add(carrier);\\n            \\n            foreach (var n in digits)\\n                temp.Add(n);\\n            \\n            return temp.ToArray();\\n        }\\n        \\n        return digits;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int[] PlusOne(int[] digits) {\\n        int carrier = 1;\\n        \\n        for (int i = digits.Length - 1; i >= 0; i--)\\n        {\\n            int temp = digits[i] + carrier;\\n            \\n            digits[i] = temp % 10;\\n            carrier = temp / 10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 24150,
                "title": "a-few-lines-of-javascript",
                "content": "```\\nvar plusOne = function(digits) {\\n    for (let i = digits.length - 1; i >= 0; i--) {\\n        digits[i] = (digits[i] + 1) % 10;\\n        if (digits[i]) return digits;\\n    }\\n    digits.unshift(1);\\n    return digits;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar plusOne = function(digits) {\\n    for (let i = digits.length - 1; i >= 0; i--) {\\n        digits[i] = (digits[i] + 1) % 10;\\n        if (digits[i]) return digits;\\n    }\\n    digits.unshift(1);\\n    return digits;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24338,
                "title": "simple-java-solution-no-copying-arrays",
                "content": "Start from the end. If the current number is less than 9, we won't have a carry: increment the digit and return the array. If we have a 9, then set the current to 0 and simply repeat with the next digit.\\n\\nHere's the kicker: if we complete the loop and don't return, this means that the whole array was set to 0! The answer must therefore be an array that's one bigger with the first number being 1. There's no need to copy to the new array since all numbers are by default initialized to 0.\\n\\n    public int[] plusOne(int[] digits) {\\n        if(digits == null || digits.length == 0){\\n            return new int[0];\\n        }\\n        \\n        for(int i = digits.length - 1; i >= 0; i--){\\n            if(digits[i] < 9){\\n                digits[i]++;\\n                return digits;\\n            }else{\\n                digits[i] = 0;\\n            }\\n        }\\n        \\n        int[] result = new int[digits.length + 1];\\n        result[0] = 1;\\n        \\n        return result;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "Start from the end. If the current number is less than 9, we won't have a carry: increment the digit and return the array. If we have a 9, then set the current to 0 and simply repeat with the next digit.\\n\\nHere's the kicker: if we complete the loop and don't return, this means that the whole array was set to 0! The answer must therefore be an array that's one bigger with the first number being 1. There's no need to copy to the new array since all numbers are by default initialized to 0.\\n\\n    public int[] plusOne(int[] digits) {\\n        if(digits == null || digits.length == 0){\\n            return new int[0];\\n        }\\n        \\n        for(int i = digits.length - 1; i >= 0; i--){\\n            if(digits[i] < 9){\\n                digits[i]++;\\n                return digits;\\n            }else{\\n                digits[i] = 0;\\n            }\\n        }\\n        \\n        int[] result = new int[digits.length + 1];\\n        result[0] = 1;\\n        \\n        return result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 24386,
                "title": "short-4ms-c-solution",
                "content": "    class Solution {\\n    public:\\n        vector<int> plusOne(vector<int>& digits) {\\n            for (int k = digits.size() - 1; k >= 0; --k) {\\n                if (digits[k] < 9) { \\n                    digits[k]++; \\n                    return digits; \\n                } else {\\n                    digits[k] = 0;\\n                }\\n            }\\n            digits[0] = 1, digits.push_back(0);\\n            return digits;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        vector<int> plusOne(vector<int>& digits) {\\n            for (int k = digits.size() - 1; k >= 0; --k) {\\n                if (digits[k] < 9) { \\n                    digits[k]++; \\n                    return digits; \\n                }",
                "codeTag": "Java"
            },
            {
                "id": 3138391,
                "title": "straightforward-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe initialize an empty string and fill it with the digits. Then we cast it to an integer and add one. we will then createa a new empty list and go through the characters of the typecasted number (so that its iterable) and append to the empty answer list. Finally, we return the list\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        string = \"\"\\n        for digit in digits:\\n            string += str(digit)\\n        number = int(string) + 1\\n        ans = []\\n        for digit in str(number):\\n            ans.append(int(digit))\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        string = \"\"\\n        for digit in digits:\\n            string += str(digit)\\n        number = int(string) + 1\\n        ans = []\\n        for digit in str(number):\\n            ans.append(int(digit))\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3120632,
                "title": "python-simple-code-beat-100-explained",
                "content": "\\n\\n\\n# Code\\n```\\nclass Solution(object):\\n    def plusOne(self, digits):\\n        # Adjusting an array of digits into an integer\\n        digits_integer = int(\\'\\'.join(map(str,digits)))\\n        digits_integer +=1\\n        # Adjusting back an integer into an array of digits after plus 1\\n        return [int(x) for x in str(digits_integer)]\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def plusOne(self, digits):\\n        # Adjusting an array of digits into an integer\\n        digits_integer = int(\\'\\'.join(map(str,digits)))\\n        digits_integer +=1\\n        # Adjusting back an integer into an array of digits after plus 1\\n        return [int(x) for x in str(digits_integer)]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3065579,
                "title": "easiest-solution-c-with-0ms-beats-100-of-solutions",
                "content": "# Intuition\\nI mean intially I just thought of it being like any other number, just increasing the right will increase the left if it carries over.\\nThat\\'s about it.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        for(int i {(int)digits.size()-1}; i >= 0; i--){\\n            if(digits.at(i)!=9){\\n                digits.at(i)++;\\n                break;\\n            }else{digits.at(i)=0;}\\n        }\\n        if(digits.at(0)==0){digits.insert(digits.begin(),1);}\\n        return digits;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        for(int i {(int)digits.size()-1}; i >= 0; i--){\\n            if(digits.at(i)!=9){\\n                digits.at(i)++;\\n                break;\\n            }else{digits.at(i)=0;}\\n        }\\n        if(digits.at(0)==0){digits.insert(digits.begin(),1);}\\n        return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2683252,
                "title": "1-line-python",
                "content": "```\\nreturn [int(x) for x in str(int(\"\".join([str(x) for x in digits]))+1)]",
                "solutionTags": [],
                "code": "```\\nreturn [int(x) for x in str(int(\"\".join([str(x) for x in digits]))+1)]",
                "codeTag": "Unknown"
            },
            {
                "id": 2490947,
                "title": "python-easy-solution",
                "content": "```\\ndef plusOne(self, digits: List[int]) -> List[int]: # digits = [4,3,2,1]\\n        st_digits_list = [str(dig) for dig in digits] # [\\'4\\', \\'3\\', \\'2\\', \\'1\\']\\n        st_digits = \"\".join(st_digits_list) # \"4321\"\\n        num = int(st_digits) + 1 # 4322\\n        output= [int(n) for n in str(num)] # [4, 3, 2, 2]\\n        return output\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef plusOne(self, digits: List[int]) -> List[int]: # digits = [4,3,2,1]\\n        st_digits_list = [str(dig) for dig in digits] # [\\'4\\', \\'3\\', \\'2\\', \\'1\\']\\n        st_digits = \"\".join(st_digits_list) # \"4321\"\\n        num = int(st_digits) + 1 # 4322\\n        output= [int(n) for n in str(num)] # [4, 3, 2, 2]\\n        return output\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2432426,
                "title": "java-script-using-only-for-loop-and-if-else-65-ms",
                "content": "//unshit is used to push 1 at front  of array//\\n//if you like it pls upvote//\\nvar plusOne = function(digits) {\\n   for(i=digits.length-1;i>=0;i--){\\n    if(digits[i]!==9){\\n        digits[i]=digits[i]+1;\\n      break;\\n  }\\n   else{\\ndigits[i]=0;\\nif(digits[0]==0){\\n    digits.unshift(1);\\n}\\n   }\\n}return digits;\\n};\\n\\n\\n\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "//unshit is used to push 1 at front  of array//\\n//if you like it pls upvote//\\nvar plusOne = function(digits) {\\n   for(i=digits.length-1;i>=0;i--){\\n    if(digits[i]!==9){\\n        digits[i]=digits[i]+1;\\n      break;\\n  }\\n   else{\\ndigits[i]=0;\\nif(digits[0]==0){\\n    digits.unshift(1);\\n}\\n   }\\n}return digits;\\n};\\n\\n\\n\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2370411,
                "title": "0-ms-java-solution",
                "content": "```\\nclass Solution {\\n   public int[] plusOne(int[] digits) {\\n        \\n    int n = digits.length;\\n    for(int i=n-1; i>=0; i--) {\\n        if(digits[i] < 9) {\\n            digits[i]++;\\n            return digits;\\n        }\\n        \\n        digits[i] = 0;\\n    }\\n    \\n    int[] newNo = new int [n+1];\\n    newNo[0] = 1;\\n    \\n    return newNo;\\n   }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n   public int[] plusOne(int[] digits) {\\n        \\n    int n = digits.length;\\n    for(int i=n-1; i>=0; i--) {\\n        if(digits[i] < 9) {\\n            digits[i]++;\\n            return digits;\\n        }\\n        \\n        digits[i] = 0;\\n    }\\n    \\n    int[] newNo = new int [n+1];\\n    newNo[0] = 1;\\n    \\n    return newNo;\\n   }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2121244,
                "title": "python-concise-solution-with-divmod",
                "content": "```\\ndef plusOne(self, digits: List[int]) -> List[int]:\\n        \\n        carry = 1\\n        \\n        for i in range(len(digits) - 1,-1,-1):\\n            carry, digits[i] = divmod(digits[i] + carry, 10)\\n        \\n        return [carry] + digits if carry else digits\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef plusOne(self, digits: List[int]) -> List[int]:\\n        \\n        carry = 1\\n        \\n        for i in range(len(digits) - 1,-1,-1):\\n            carry, digits[i] = divmod(digits[i] + carry, 10)\\n        \\n        return [carry] + digits if carry else digits\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1463033,
                "title": "python-simple",
                "content": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n\\n        pointer = len(digits) - 1\\n        \\n        while digits[pointer] == 9:\\n            digits[pointer] = 0\\n            pointer -= 1\\n        \\n        if pointer == -1:\\n            digits.insert(0, 1)\\n        \\n        else:\\n            digits[pointer] += 1\\n        \\n        return digits\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n\\n        pointer = len(digits) - 1\\n        \\n        while digits[pointer] == 9:\\n            digits[pointer] = 0\\n            pointer -= 1\\n        \\n        if pointer == -1:\\n            digits.insert(0, 1)\\n        \\n        else:\\n            digits[pointer] += 1\\n        \\n        return digits\\n```",
                "codeTag": "Java"
            },
            {
                "id": 808473,
                "title": "javascript",
                "content": "```\\nvar plusOne = function(digits) {\\n    for (let i = digits.length - 1; i != -1; i--) {\\n        if (digits[i] != 9) {\\n            digits[i] += 1\\n            return digits\\n        }\\n        digits[i] = 0\\n    }\\n    digits.unshift(1) //Getting here means everything was a 9, so it\\'s now all 0\\'s, meaning we should add a 1 in front.\\n    return digits\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar plusOne = function(digits) {\\n    for (let i = digits.length - 1; i != -1; i--) {\\n        if (digits[i] != 9) {\\n            digits[i] += 1\\n            return digits\\n        }\\n        digits[i] = 0\\n    }\\n    digits.unshift(1) //Getting here means everything was a 9, so it\\'s now all 0\\'s, meaning we should add a 1 in front.\\n    return digits\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24207,
                "title": "c-look-for-first-non-9-from-the-tail-backwards",
                "content": "    public int[] PlusOne(int[] digits) \\n    {\\n        int index = digits.Length - 1;\\n        while (index >= 0 && digits[index] == 9)\\n        {\\n            index--;\\n        }\\n        \\n        if (index < 0)\\n        {\\n            int[] res = new int[digits.Length + 1];\\n            res[0] = 1;\\n            return res;\\n        }\\n        else\\n        {\\n            digits[index++]++;\\n            while (index < digits.Length)\\n            {\\n                digits[index++] = 0;\\n            }\\n            return digits;\\n        }\\n    }",
                "solutionTags": [],
                "code": "    public int[] PlusOne(int[] digits) \\n    {\\n        int index = digits.Length - 1;\\n        while (index >= 0 && digits[index] == 9)\\n        {\\n            index--;\\n        }\\n        \\n        if (index < 0)\\n        {\\n            int[] res = new int[digits.Length + 1];\\n            res[0] = 1;\\n            return res;\\n        }\\n        else\\n        {\\n            digits[index++]++;\\n            while (index < digits.Length)\\n            {\\n                digits[index++] = 0;\\n            }\\n            return digits;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 24109,
                "title": "my-c-code-accepted-with-2-ms",
                "content": "    int* plusOne(int* digits, int digitsSize, int* returnSize) {\\n        if (digits == NULL)\\n        {\\n            return NULL;\\n        }\\n        int n = digitsSize-1;\\n        while(n >= 0)\\n        {\\n            if(digits[n] < 9)\\n            {\\n                digits[n]++;\\n                *returnSize = digitsSize;\\n                return digits;\\n            }else\\n            {\\n                digits[n] = 0;\\n                n--;\\n            }\\n        }\\n        \\n        int* newdigit = (int*)malloc((digitsSize+1) * sizeof(int));\\n        newdigit[0] = 1;\\n        for(int i = 1; i < (digitsSize+1); i++)\\n        {\\n            newdigit[i] = digits[i-1];\\n        }\\n        *returnSize = digitsSize+1;\\n        return newdigit;\\n    }",
                "solutionTags": [],
                "code": "    int* plusOne(int* digits, int digitsSize, int* returnSize) {\\n        if (digits == NULL)\\n        {\\n            return NULL;\\n        }\\n        int n = digitsSize-1;\\n        while(n >= 0)\\n        {\\n            if(digits[n] < 9)\\n            {\\n                digits[n]++;\\n                *returnSize = digitsSize;\\n                return digits;\\n            }else\\n            {\\n                digits[n] = 0;\\n                n--;\\n            }\\n        }\\n        \\n        int* newdigit = (int*)malloc((digitsSize+1) * sizeof(int));\\n        newdigit[0] = 1;\\n        for(int i = 1; i < (digitsSize+1); i++)\\n        {\\n            newdigit[i] = digits[i-1];\\n        }\\n        *returnSize = digitsSize+1;\\n        return newdigit;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 24458,
                "title": "my-accepted-java-solution",
                "content": "Hi everyone, this is my accepted Java solution. I used a while loop here so that I don't need to go through the entire array if it's not necessary. Basically, the code will start from the last index of the array and go backwards. if there is a carry-over value, then it will keep going, otherwise it will stop. After the traversing is done, it will check if the first digit is zero (9999 + 1 = 0000) and handle that case. Hope this helps :)\\n\\n    public int[] plusOne(int[] digits) {\\n        boolean carry = true;\\n        int index = digits.length - 1;\\n        while (carry && index > -1) {\\n            if (digits[index] == 9) {\\n                digits[index] = 0; // carry remains true\\n            } else {\\n                digits[index] += 1;\\n                carry = false;\\n            }\\n            index--;\\n        }\\n        if (digits[0] == 0) {\\n            int[] result = new int[digits.length + 1];\\n            result[0] = 1;\\n            for (int i = 1; i < digits.length; i++) {\\n                result[i] = digits[i - 1];\\n            }\\n            return result;\\n        }\\n        return digits;\\n    }",
                "solutionTags": [],
                "code": "Hi everyone, this is my accepted Java solution. I used a while loop here so that I don't need to go through the entire array if it's not necessary. Basically, the code will start from the last index of the array and go backwards. if there is a carry-over value, then it will keep going, otherwise it will stop. After the traversing is done, it will check if the first digit is zero (9999 + 1 = 0000) and handle that case. Hope this helps :)\\n\\n    public int[] plusOne(int[] digits) {\\n        boolean carry = true;\\n        int index = digits.length - 1;\\n        while (carry && index > -1) {\\n            if (digits[index] == 9) {\\n                digits[index] = 0; // carry remains true\\n            } else {\\n                digits[index] += 1;\\n                carry = false;\\n            }\\n            index--;\\n        }\\n        if (digits[0] == 0) {\\n            int[] result = new int[digits.length + 1];\\n            result[0] = 1;\\n            for (int i = 1; i < digits.length; i++) {\\n                result[i] = digits[i - 1];\\n            }\\n            return result;\\n        }\\n        return digits;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3795230,
                "title": "javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nInitially wanted to make a function variable to keep track of wether we needed to carry and was attempting to handle the edge case for if we needed to increase the size of the array in an over complicated way.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLooping through the array starting at the last element, if a digit is a 9 we make it a zero and repeat. When we\\'re able to add 1 without going over 9 we should break there, because there is no more work left to do. If we dont\\'t find a number that isn\\'t 9 (meaning we never reach the else condition in the loop), we should then create a new array with 1 as the first element followed by the array digits that got turned to all 0\\'s.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n) \\n\\n# Code\\n```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar plusOne = function(digits) {\\n\\n    for(let i = digits.length - 1; i >= 0; i--) {\\n        if(digits[i] === 9) {\\n            digits[i] = 0\\n        }\\n        else {\\n            digits[i] += 1\\n            return digits\\n        }\\n    }\\n\\n    return [1, ...digits]\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} digits\\n * @return {number[]}\\n */\\nvar plusOne = function(digits) {\\n\\n    for(let i = digits.length - 1; i >= 0; i--) {\\n        if(digits[i] === 9) {\\n            digits[i] = 0\\n        }\\n        else {\\n            digits[i] += 1\\n            return digits\\n        }\\n    }\\n\\n    return [1, ...digits]\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3394130,
                "title": "clear-c-solution-let-s-find-best-solution-together",
                "content": "**`If you have any thought feel free leave a comment below`**\\n\\n# Code\\n```\\n/** Note: The returned array must be malloced, assume     */\\n/** caller calls free().                                  */\\nint *plusOne(int *digits, int digitsSize, int *returnSize) {\\n    *returnSize = digitsSize;\\n    int *plusOne = malloc(digitsSize * sizeof(int));\\n    if (plusOne == NULL)\\n        return (NULL);\\n    for (int i = 0; i < digitsSize; i++)\\n        plusOne[i] = digits[i];\\n    \\n    plusOne[digitsSize - 1]++;\\n    for (int i = digitsSize - 1; i - 1 >= 0; i--)\\n        if (plusOne[i] == 10) {\\n            plusOne[i] = 0;\\n            plusOne[i - 1]++;\\n        }\\n\\n    if (plusOne[0] == 10) {\\n        (*returnSize)++;\\n        plusOne = realloc(plusOne, *returnSize * sizeof(int));\\n        if (plusOne == NULL)\\n            return (NULL);\\n        memmove(plusOne + 1, plusOne, digitsSize * sizeof(int));\\n        plusOne[0] = 1;\\n        plusOne[1] = 0;\\n    }\\n    return (plusOne);\\n}\\n\\n```\\n1) In the first part we just take memory for return array, and copy source array there\\n2) In the second part we add one to the last element. Go through elements of array from the end and on 10, we split it\\n3) In the last part we work with first element equal to 10. If it is so, we need to realloc memory and move an array by one element\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n/** Note: The returned array must be malloced, assume     */\\n/** caller calls free().                                  */\\nint *plusOne(int *digits, int digitsSize, int *returnSize) {\\n    *returnSize = digitsSize;\\n    int *plusOne = malloc(digitsSize * sizeof(int));\\n    if (plusOne == NULL)\\n        return (NULL);\\n    for (int i = 0; i < digitsSize; i++)\\n        plusOne[i] = digits[i];\\n    \\n    plusOne[digitsSize - 1]++;\\n    for (int i = digitsSize - 1; i - 1 >= 0; i--)\\n        if (plusOne[i] == 10) {\\n            plusOne[i] = 0;\\n            plusOne[i - 1]++;\\n        }\\n\\n    if (plusOne[0] == 10) {\\n        (*returnSize)++;\\n        plusOne = realloc(plusOne, *returnSize * sizeof(int));\\n        if (plusOne == NULL)\\n            return (NULL);\\n        memmove(plusOne + 1, plusOne, digitsSize * sizeof(int));\\n        plusOne[0] = 1;\\n        plusOne[1] = 0;\\n    }\\n    return (plusOne);\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2715491,
                "title": "javascript-solution",
                "content": "var plusOne = function (digits) {\\n    let arrToNumber =BigInt(digits.join(\\'\\'))\\n    let res = BigInt(arrToNumber + BigInt(1))\\n    let myFunc = res => Number(res);\\n\\n    var intArr = Array.from(String(res), myFunc);\\n    return intArr\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "var plusOne = function (digits) {\\n    let arrToNumber =BigInt(digits.join(\\'\\'))\\n    let res = BigInt(arrToNumber + BigInt(1))\\n    let myFunc = res => Number(res);\\n\\n    var intArr = Array.from(String(res), myFunc);\\n    return intArr\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 2526659,
                "title": "0-ms-java-solution-faster-than-100-simple-solution-within-20-lines",
                "content": "vote up if you like my solution or if it helps you !\\n\\n\\n```\\n    public static int[] plusOne (int[] digits) {\\n        int l = digits.length;\\n        if ( digits[l - 1] != 9 ) {\\n            digits[l - 1]++;\\n            return digits;\\n        } else {\\n            int[] temp = new int[l + 1];\\n            for ( int i = l - 1; i >= 0; i-- )\\n                if ( digits[i] == 9 ) {\\n                    digits[i] = i == 0 ? 1 : 0;\\n                    temp[i] = digits[i];\\n                } else {\\n                    digits[i]++;\\n                    return digits;\\n                }\\n            return temp;\\n        }\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public static int[] plusOne (int[] digits) {\\n        int l = digits.length;\\n        if ( digits[l - 1] != 9 ) {\\n            digits[l - 1]++;\\n            return digits;\\n        } else {\\n            int[] temp = new int[l + 1];\\n            for ( int i = l - 1; i >= 0; i-- )\\n                if ( digits[i] == 9 ) {\\n                    digits[i] = i == 0 ? 1 : 0;\\n                    temp[i] = digits[i];\\n                } else {\\n                    digits[i]++;\\n                    return digits;\\n                }\\n            return temp;\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2474823,
                "title": "0ms-hacky-c-solution-tc-o-n-sc-o-1",
                "content": "![image](https://assets.leetcode.com/users/images/a35c611d-a1fa-4ec5-b0ce-135364134343_1661608674.9935284.png)\\n\\nDon\\'t feel confused by looking at the solution complexity. Take a book and go through it once. Then you will get to know how **easy** it really is.\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size()-1;\\n        if(digits[n]!=9){                                  //If last element is not 9, simply add 1 to it and return\\n            digits[n]++;\\n        }\\n        else{\\n            digits[n]=0;                                   //If you reach here, it means the element is 9. Then make it 0 and follow ahead.\\n            for(int i=n-1; i>=0; i--){                     //Now check the previous element (if exists)\\n                if(digits[i]==9 && i-1>=0){                //If (previous) element is 9 and there is still an element previous to it, then make it 0 and follow ahead.\\n                    digits[i]=0;\\n                }\\n                else if(digits[i]!=9){                     //If (previous) element is not 9, add 1 to it and return the vector.\\n                    digits[i]+=1;\\n                    return digits;\\n                }\\n            }\\n            digits[0]=0;                                   //If you reach here, that means all elements in the vector are 9. (Think about it a little bit!). We made the rest of the elements 0. Now make the first element 0 and insert 1 at the beginning.\\n            digits.insert(digits.begin(), 1);\\n        }\\n        return digits;                                     //Return the final vector!!\\n    }\\n};\\n```\\nPS: If you made it through the process, congrats, you just added a drop to your ocean of knowledge :)\\n**Plz Upvote if you find the solution helpful :)**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size()-1;\\n        if(digits[n]!=9){                                  //If last element is not 9, simply add 1 to it and return\\n            digits[n]++;\\n        }\\n        else{\\n            digits[n]=0;                                   //If you reach here, it means the element is 9. Then make it 0 and follow ahead.\\n            for(int i=n-1; i>=0; i--){                     //Now check the previous element (if exists)\\n                if(digits[i]==9 && i-1>=0){                //If (previous) element is 9 and there is still an element previous to it, then make it 0 and follow ahead.\\n                    digits[i]=0;\\n                }\\n                else if(digits[i]!=9){                     //If (previous) element is not 9, add 1 to it and return the vector.\\n                    digits[i]+=1;\\n                    return digits;\\n                }\\n            }\\n            digits[0]=0;                                   //If you reach here, that means all elements in the vector are 9. (Think about it a little bit!). We made the rest of the elements 0. Now make the first element 0 and insert 1 at the beginning.\\n            digits.insert(digits.begin(), 1);\\n        }\\n        return digits;                                     //Return the final vector!!\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2257688,
                "title": "very-easy-c-solution-100-fully-explained",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    vector<int> plusOne(vector<int>& digits) {\\n        //To solve this, we take digits one by one from end to start..\\n        for (int i = digits.size() - 1; i >= 0; i--) {\\n            \\n            // If a digit is not equal to 9, we plus one directly and then quit the loop...\\n            if (digits[i] != 9) {\\n                digits[i]++;\\n                break;\\n                \\n            //if the digit is 9, we set it to 0, and continue the loop until\\n            //we encounter the number don\\'t equals to 9...\\n            } else {\\n                digits[i] = 0;\\n            }\\n        }\\n        if (digits[0] == 0) {      //it means, we need a bigger array to represent the number.\\n            vector<int>res(digits.size()+1,0);    //so we create a new array res...\\n            res[0] = 1;                                //and set res[0] to 1...\\n            return res;\\n        }\\n        return digits;      //return the digits...\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    vector<int> plusOne(vector<int>& digits) {\\n        //To solve this, we take digits one by one from end to start..\\n        for (int i = digits.size() - 1; i >= 0; i--) {\\n            \\n            // If a digit is not equal to 9, we plus one directly and then quit the loop...\\n            if (digits[i] != 9) {\\n                digits[i]++;\\n                break;\\n                \\n            //if the digit is 9, we set it to 0, and continue the loop until\\n            //we encounter the number don\\'t equals to 9...\\n            } else {\\n                digits[i] = 0;\\n            }\\n        }\\n        if (digits[0] == 0) {      //it means, we need a bigger array to represent the number.\\n            vector<int>res(digits.size()+1,0);    //so we create a new array res...\\n            res[0] = 1;                                //and set res[0] to 1...\\n            return res;\\n        }\\n        return digits;      //return the digits...\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2044309,
                "title": "java-simplest-soln-shortest-soln-with-explanation",
                "content": "***If you like the code, Kindly Upvote***\\n\\n```\\nclass Solution {\\npublic int[] plusOne(int[] digits) {\\n    \\n    int carry = 1;\\n    \\n    for (int i = digits.length-1; i>= 0; i--) {\\n        digits[i] += carry;\\n        if (digits[i] != 10) // early return \\n            return digits;\\n        digits[i] = 0;\\n    }\\n    \\n\\t//if upper return statement didn\\'t run, it means [9],[9,9] type of test case is present.\\n\\t\\n    int[] ans = new int[digits.length+1]; \\n    ans[0] = 1; //As other elements will be 0, therefore only updating the 0th element\\n    return ans;\\n    \\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\npublic int[] plusOne(int[] digits) {\\n    \\n    int carry = 1;\\n    \\n    for (int i = digits.length-1; i>= 0; i--) {\\n        digits[i] += carry;\\n        if (digits[i] != 10) // early return \\n            return digits;\\n        digits[i] = 0;\\n    }\\n    \\n\\t//if upper return statement didn\\'t run, it means [9],[9,9] type of test case is present.\\n\\t\\n    int[] ans = new int[digits.length+1]; \\n    ans[0] = 1; //As other elements will be 0, therefore only updating the 0th element\\n    return ans;\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1839674,
                "title": "very-easy-python-solution-faster-than-97-48",
                "content": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        for i, num in [*enumerate(digits)][::-1]:\\n            if num != 9:\\n                digits[i] += 1\\n                break\\n            digits[i] = 0\\n\\n        return [1] + digits if not digits[0] else digits\\n```\\n\\n\"Exploiting\" enumarte to iterate from end to start, and making one less check before returning a value.\\nIf the first number is ```0``` -> concatenate ```[1]``` to start of the list.\\nIf not -> just return digits.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        for i, num in [*enumerate(digits)][::-1]:\\n            if num != 9:\\n                digits[i] += 1\\n                break\\n            digits[i] = 0\\n\\n        return [1] + digits if not digits[0] else digits\\n```\n```0```\n```[1]```",
                "codeTag": "Java"
            },
            {
                "id": 1726820,
                "title": "simple-java-solution-with-explanation",
                "content": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        \\n        int n = digits.length; \\n        \\n        for(int i=n-1; i>=0; i--){\\n            if(digits[i] < 9){\\n                digits[i]++;    // if a digit is less than 9, just add 1 and return the new digit array\\n                return digits;\\n            }else{\\n                digits[i] = 0; // if digit is 9, make it zero and in the next iteration the next value will get increment\\n            }           \\n        }\\n        \\n        // if we are here means, every digit in array was 9. So create a new array with +1 size and make first digit Zero.\\n        // exp:  99 => create new array of size 3 => make its first digit 1 => return new array => 100;\\n        \\n        int[] newDigit = new int[n+1];\\n        newDigit[0] = 1;\\n        \\n        return newDigit;\\n        \\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        \\n        int n = digits.length; \\n        \\n        for(int i=n-1; i>=0; i--){\\n            if(digits[i] < 9){\\n                digits[i]++;    // if a digit is less than 9, just add 1 and return the new digit array\\n                return digits;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1667209,
                "title": "js",
                "content": "```\\nvar plusOne = function(digits) {\\n    for (let i = digits.length -1; i >= 0; i--) {\\n        const curDigit = digits[i];\\n        if (curDigit < 9) {\\n            digits[i] = digits[i] + 1;\\n            return digits;\\n        }\\n        digits[i] = 0;\\n    }\\n    return [1, ...digits];\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Iterator"
                ],
                "code": "```\\nvar plusOne = function(digits) {\\n    for (let i = digits.length -1; i >= 0; i--) {\\n        const curDigit = digits[i];\\n        if (curDigit < 9) {\\n            digits[i] = digits[i] + 1;\\n            return digits;\\n        }\\n        digits[i] = 0;\\n    }\\n    return [1, ...digits];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1428535,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size(),carry=1;\\n        for(int i=n-1;i>=0;--i){\\n            int x = digits[i]+carry;\\n            digits[i]=x%10;\\n            carry = x/10;\\n            if(carry==0) break;\\n        }\\n        if(carry>0) digits.insert(digits.begin()+0,carry);\\n        return digits;\\n    }\\n};\\n```\\nPlease **UPVOTE**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size(),carry=1;\\n        for(int i=n-1;i>=0;--i){\\n            int x = digits[i]+carry;\\n            digits[i]=x%10;\\n            carry = x/10;\\n            if(carry==0) break;\\n        }\\n        if(carry>0) digits.insert(digits.begin()+0,carry);\\n        return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1379354,
                "title": "c-0ms-100-faster-o-1-space",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        \\n        \\n        //\\n        int n  = digits.size() ;\\n\\n        while(1)\\n        {  // if the digit is not nine then simply add it\\n            if(digits[n-1]!= 9)\\n            {\\n                digits[n-1]++;\\n                return digits;\\n            }\\n\\t\\t\\t// if 9 then 9+1 is 10 we need the 0 only \\n            else \\n            {\\n                digits[n-1] = 0 ;\\n                --n;\\n            }\\n           // if all nine then first digit will be zero add one in the begining\\n            if(digits[0] == 0)\\n            {\\n                digits.insert(digits.begin(),1);\\n                return digits;\\n            }\\n        }\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        \\n        \\n        //\\n        int n  = digits.size() ;\\n\\n        while(1)\\n        {  // if the digit is not nine then simply add it\\n            if(digits[n-1]!= 9)\\n            {\\n                digits[n-1]++;\\n                return digits;\\n            }\\n\\t\\t\\t// if 9 then 9+1 is 10 we need the 0 only \\n            else \\n            {\\n                digits[n-1] = 0 ;\\n                --n;\\n            }\\n           // if all nine then first digit will be zero add one in the begining\\n            if(digits[0] == 0)\\n            {\\n                digits.insert(digits.begin(),1);\\n                return digits;\\n            }\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1123616,
                "title": "rust-iterator-solution",
                "content": "Runtime: 0 ms, faster than 100.00% of Rust online submissions for Plus One.\\nMemory Usage: 1.9 MB, less than 95.31% of Rust online submissions for Plus One.\\n```\\nimpl Solution {\\n    pub fn plus_one(digits: Vec<i32>) -> Vec<i32> {\\n        let mut digits = digits;\\n        for v in digits.iter_mut().rev() {\\n            let sum = *v + 1;\\n            *v = sum % 10;\\n            if sum < 10 {\\n                return digits;\\n            }\\n        }\\n        [&vec![1], &digits[..]].concat()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn plus_one(digits: Vec<i32>) -> Vec<i32> {\\n        let mut digits = digits;\\n        for v in digits.iter_mut().rev() {\\n            let sum = *v + 1;\\n            *v = sum % 10;\\n            if sum < 10 {\\n                return digits;\\n            }\\n        }\\n        [&vec![1], &digits[..]].concat()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 722172,
                "title": "python-solution",
                "content": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        for i in reversed(range(len(digits))):\\n            if digits[i] < 9:\\n                digits[i] += 1\\n                return digits\\n            else:\\n                digits[i] = 0\\n        return [1]+digits\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        for i in reversed(range(len(digits))):\\n            if digits[i] < 9:\\n                digits[i] += 1\\n                return digits\\n            else:\\n                digits[i] = 0\\n        return [1]+digits\\n```",
                "codeTag": "Java"
            },
            {
                "id": 142730,
                "title": "simple-javascript-solution-es6",
                "content": "```\\nconst plusOne = digits => {\\n    for (let i = digits.length - 1; i >= 0; i--) {\\n        if (digits[i] < 9) {\\n            digits[i]++\\n            return digits\\n        }\\n        digits[i] = 0\\n    }\\n    return [1, ...digits]\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nconst plusOne = digits => {\\n    for (let i = digits.length - 1; i >= 0; i--) {\\n        if (digits[i] < 9) {\\n            digits[i]++\\n            return digits\\n        }\\n        digits[i] = 0\\n    }\\n    return [1, ...digits]\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24296,
                "title": "python-one-line-answer",
                "content": "    return list(map(int, str(int(''.join(map(str, digits)))+1)))",
                "solutionTags": [
                    "Python"
                ],
                "code": "    return list(map(int, str(int(''.join(map(str, digits)))+1)))",
                "codeTag": "Unknown"
            },
            {
                "id": 24363,
                "title": "javascript-solution-sharing",
                "content": "    /**\\n     * note: [9] plus one [1, 0] // digits[0]=10\\n     */\\n    var plusOne = function(digits) {\\n        var carry = 1;\\n        for(var i=digits.length-1; i>=0; i--){\\n            digits[i] = digits[i] + carry;\\n            digits[i] = (digits[i]>=10)?(carry=1, digits[i]-10):(carry=0, digits[i]);\\n        }\\n        if(carry){ digits.unshift(1); } // note\\n        return digits;\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    /**\\n     * note: [9] plus one [1, 0] // digits[0]=10\\n     */\\n    var plusOne = function(digits) {\\n        var carry = 1;\\n        for(var i=digits.length-1; i>=0; i--){\\n            digits[i] = digits[i] + carry;\\n            digits[i] = (digits[i]>=10)?(carry=1, digits[i]-10):(carry=0, digits[i]);\\n        }\\n        if(carry){ digits.unshift(1); } // note\\n        return digits;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 24432,
                "title": "my-accepted-java-solution",
                "content": "Just plus one to the last element in the digits , and judge every element then return \\n\\n\\n    public class Solution {\\n        public int[] plusOne(int[] digits) {\\n            digits[digits.length-1]+=1;\\n            for(int i=digits.length-1;i>0;i--)\\n            {\\n                if(digits[i]==10)\\n                {\\n                    digits[i]=0;\\n                    digits[i-1]+=1;\\n                }\\n            }\\n            if(digits[0]==10)\\n            {\\n                int[] res=new int[digits.length+1];\\n                digits[0]=0;\\n                res[0]=1;\\n                for(int i=1;i<res.length;i++)\\n                {\\n                    res[i]=digits[i-1];\\n                }\\n                return res;\\n            }\\n            return digits;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int[] plusOne(int[] digits) {\\n            digits[digits.length-1]+=1;\\n            for(int i=digits.length-1;i>0;i--)\\n            {\\n                if(digits[i]==10)\\n                {\\n                    digits[i]=0;\\n                    digits[i-1]+=1;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 3792748,
                "title": "beats-100-explanation-optimized-c-clean-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- This concept is great, and we can imagine it well enough.\\n- We always add the number to another at the end, Ex: 1002 + 2 = 100***4*** \\n- If we get any carry we pass it to the next number from right to left.\\n- Similarly it\\'s an easy version of that.\\n##### Let\\'s dive deep into it:\\n- We have to just add 1 to the number whose digit are represented in array format.\\n###### - There can be only two cases:\\n1. The number = 9 (need to pass one as carry, and number will be equals to zero)\\n2. If number !=9 , number++;\\n\\n###### - The Special Case:\\n1. Let\\'s say the number is in form of 999, after adding 1, number= 1000 (**Need to increase the size of vector**: (v.push_back(0))\\n2. If not then come out of loop.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Iterate over the vector: \\n 1. if i==n-1, v[i]++\\n 2. then check if v[i]==10\\n  - v[i]=0\\n  - if(i!=0) v[i-1]++\\n  - else push_back 0, and v[i]=1; \\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& v) {\\n        int n = v.size();\\n        for(int i=n-1; i>=0; i--){\\n            if(i==n-1){\\n                v[i]++;\\n            }\\n            if(v[i]==10){\\n                v[i] = 0;\\n                if(i!=0){\\n                    v[i-1]++;\\n                }else{\\n                    v.push_back(0);\\n                    v[i] = 1;\\n                }\\n\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```\\n##### We can more optimize it but it would have no effect on time complexity \\n# More optimized:\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& v) {\\n        int n = v.size();\\n        for(int i=n-1; i>=0; i--){\\n            if(i==n-1){\\n                v[i]++;\\n            }\\n            if(v[i]==10){\\n                v[i] = 0;\\n                if(i!=0){\\n                    v[i-1]++;\\n                }else{\\n                    v.push_back(0);\\n                    v[i] = 1;\\n                }\\n            }else{\\n                break;\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& v) {\\n        int n = v.size();\\n        for(int i=n-1; i>=0; i--){\\n            if(i==n-1){\\n                v[i]++;\\n            }\\n            if(v[i]==10){\\n                v[i] = 0;\\n                if(i!=0){\\n                    v[i-1]++;\\n                }else{\\n                    v.push_back(0);\\n                    v[i] = 1;\\n                }\\n\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& v) {\\n        int n = v.size();\\n        for(int i=n-1; i>=0; i--){\\n            if(i==n-1){\\n                v[i]++;\\n            }\\n            if(v[i]==10){\\n                v[i] = 0;\\n                if(i!=0){\\n                    v[i-1]++;\\n                }else{\\n                    v.push_back(0);\\n                    v[i] = 1;\\n                }\\n            }else{\\n                break;\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3510251,
                "title": "c-quick-addition",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your timecomplexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        short int i = digits.size() - 1;\\n        if (i >= 0) {\\n            while (i != -1) {\\n                digits[i] += 1;\\n                if (i == 0 && digits[i] == 10) {\\n                    digits[i] = 0;\\n                    digits.insert(digits.begin(), 1);\\n                }\\n                else if (digits[i] == 10) digits[i] = 0;\\n                else break;\\n                i--;\\n            }\\n        }\\n        return digits;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        short int i = digits.size() - 1;\\n        if (i >= 0) {\\n            while (i != -1) {\\n                digits[i] += 1;\\n                if (i == 0 && digits[i] == 10) {\\n                    digits[i] = 0;\\n                    digits.insert(digits.begin(), 1);\\n                }\\n                else if (digits[i] == 10) digits[i] = 0;\\n                else break;\\n                i--;\\n            }\\n        }\\n        return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3473937,
                "title": "easy-to-understand-explained-part-by-part-without-reverse",
                "content": "\\n# Approach\\nwe have to add 1 at the last element ;\\nso we took a for loop which starts from the end;\\n\\nif the last digit is not 9 then we can easily add 1 with it .But for 9 we will get extra 1 carry. 9+0=10;\\nwe will handle that letter.\\n\\nfirst off all if our element is lesser then 9 .we will simply add 1 and break the loop and return .\\n \\n      if(digits[i]!=9){\\n                digits[i]=digits[i]+1;\\n                break;\\n            }\\nif the digit is 9 then the sum will 10 .we have to put 0 and 1 carry will be added with prvious number .\\nexample : [1,2,9] -> [1,3,0]\\n \\n    else { digits[i]=0;}\\nif all the array becomes 0 .for example [9,9,9]+1 the result should be [1,0,0,0]\\nso we inserted \\'1\\' at the begining of the array\\n    \\n    if(digits[0]==0){\\n            digits.insert(digits.begin(),1);\\n        }\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        \\n        for(int i=digits.size()-1;i>=0;i--){\\n            if(digits[i]!=9){\\n                digits[i]=digits[i]+1;\\n                break;\\n            }\\n            else { digits[i]=0;}\\n        }\\n        if(digits[0]==0){\\n            digits.insert(digits.begin(),1);\\n        }\\n        return digits;\\n    }\\n};\\n```\\n# please Upvote :(",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        \\n        for(int i=digits.size()-1;i>=0;i--){\\n            if(digits[i]!=9){\\n                digits[i]=digits[i]+1;\\n                break;\\n            }\\n            else { digits[i]=0;}\\n        }\\n        if(digits[0]==0){\\n            digits.insert(digits.begin(),1);\\n        }\\n        return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3176624,
                "title": "java-best-solution-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int p=digits.length;\\n        for(int i=p-1;i>=0;i--){\\n            if(digits[i]<9){\\n                digits[i]++;\\n                return digits;\\n            }\\n            else{\\n                digits[i]=0;\\n            }\\n        }\\n\\n        int arr[]=new int[p+1];\\n        arr[0]=1;\\n        \\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int p=digits.length;\\n        for(int i=p-1;i>=0;i--){\\n            if(digits[i]<9){\\n                digits[i]++;\\n                return digits;\\n            }\\n            else{\\n                digits[i]=0;\\n            }\\n        }\\n\\n        int arr[]=new int[p+1];\\n        arr[0]=1;\\n        \\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2994509,
                "title": "recursive-solution-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSaw a lot of iterative solutions, so I tried to think of a recursive one. As can be quickly deduce, the difficulty of this problem is dealing with the \"9\" digits, not just the ones in the last digit but all of them. In order to simplify the work, we recursively solve for this specific case, so that it does not matter how many \"9\"s we have.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nOur two base cases are when the **only** digit is \"9\" and when it is not \"9\". Otherwise, we recursively call this function for the rest of the digits, while accounting for our last digit.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        last = digits[-1]\\n        if last == 9:\\n            if len(digits) == 1:\\n                return [1,0]\\n            return self.plusOne(digits[:-1]) + [0]\\n        digits[-1] += 1\\n        return digits\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        last = digits[-1]\\n        if last == 9:\\n            if len(digits) == 1:\\n                return [1,0]\\n            return self.plusOne(digits[:-1]) + [0]\\n        digits[-1] += 1\\n        return digits\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2765133,
                "title": "c-recursive",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n      int n = digits.size() - 1;\\n      \\n      for (int i = n; i >= 0; --i) { \\n        if (digits[i] == 9) {  \\n          digits[i] = 0;\\n        } else {  // current digit is not 9 so we can safely increment by one\\n          digits[i] += 1;\\n          return digits;\\n        }\\n      }\\n\\n      digits.push_back(0);\\n      digits[0] = 1;\\n      return digits;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n      int n = digits.size() - 1;\\n      \\n      for (int i = n; i >= 0; --i) { \\n        if (digits[i] == 9) {  \\n          digits[i] = 0;\\n        } else {  // current digit is not 9 so we can safely increment by one\\n          digits[i] += 1;\\n          return digits;\\n        }\\n      }\\n\\n      digits.push_back(0);\\n      digits[0] = 1;\\n      return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2760321,
                "title": "golang-0ms-portugues-br-video",
                "content": "https://www.youtube.com/watch?v=Wx_dAxDFEZ4&ab_channel=Codando\\n\\n```\\nfunc plusOne(digits []int) []int {\\n    \\n    for i := len(digits) - 1; i >= 0; i--{\\n        \\n        if digits[i] < 9{\\n            digits[i]++\\n            return digits\\n        }\\n        \\n        digits[i] = 0\\n    }\\n    \\n    if digits[0] == 0{\\n        digits = append([]int{1}, digits...)\\n    }\\n    \\n    return digits\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc plusOne(digits []int) []int {\\n    \\n    for i := len(digits) - 1; i >= 0; i--{\\n        \\n        if digits[i] < 9{\\n            digits[i]++\\n            return digits\\n        }\\n        \\n        digits[i] = 0\\n    }\\n    \\n    if digits[0] == 0{\\n        digits = append([]int{1}, digits...)\\n    }\\n    \\n    return digits\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2710251,
                "title": "typescript-oneliner-solution",
                "content": "`return Array.from((BigInt(digits.join(\\'\\')) + BigInt(\\'1\\')).toString(), Number)`",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "`return Array.from((BigInt(digits.join(\\'\\')) + BigInt(\\'1\\')).toString(), Number)`",
                "codeTag": "Unknown"
            },
            {
                "id": 2687851,
                "title": "plus-one-java-100-fast-solution",
                "content": "Hi Everyone\\nHere is the easy solution for the Plus One Question with explanation as in commented code.\\n\\n```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int carry = 1;\\n        int n = digits.length;\\n\\t\\t// loop to add the digits\\n        for(int i=n-1; i>=0; i--) {\\n            digits[i] += carry;   // add carry in every digit\\n            carry = digits[i] / 10;   // update carry for next digit\\n            digits[i] = digits[i] % 10;   //  put remainder in the digit\\n        }\\n        if(carry == 1) {   // in case of carry, we need to return n+1 length array\\n            int[] res = new int[n+1];\\n            res[0] = 1;\\n\\t\\t\\t// assinging values of digit in new array\\n            for(int i=1; i<=n;i++) {\\n                res[i] = digits[i-1];\\n            }\\n            return res;\\n        }\\n        return digits;   // not a carry, we can send updated digit array\\n    }\\n}\\n```\\n\\nThanks & Happy Coding!!",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int carry = 1;\\n        int n = digits.length;\\n\\t\\t// loop to add the digits\\n        for(int i=n-1; i>=0; i--) {\\n            digits[i] += carry;   // add carry in every digit\\n            carry = digits[i] / 10;   // update carry for next digit\\n            digits[i] = digits[i] % 10;   //  put remainder in the digit\\n        }\\n        if(carry == 1) {   // in case of carry, we need to return n+1 length array\\n            int[] res = new int[n+1];\\n            res[0] = 1;\\n\\t\\t\\t// assinging values of digit in new array\\n            for(int i=1; i<=n;i++) {\\n                res[i] = digits[i-1];\\n            }\\n            return res;\\n        }\\n        return digits;   // not a carry, we can send updated digit array\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2680601,
                "title": "java-100-runtime-easy-understanding",
                "content": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n       int len=digits.length;\\n       for(int i=len-1;i>=0;i--){\\n           if(digits[i]<9){\\n               digits[i]++;\\n               return digits;\\n           }\\n           digits[i]=0;\\n       }\\n        int[] newArr=new int[len+1];\\n        newArr[0]=1;\\n        return newArr;\\n    }\\n}\\n```\\n**please upvote if u like it**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n       int len=digits.length;\\n       for(int i=len-1;i>=0;i--){\\n           if(digits[i]<9){\\n               digits[i]++;\\n               return digits;\\n           }\\n           digits[i]=0;\\n       }\\n        int[] newArr=new int[len+1];\\n        newArr[0]=1;\\n        return newArr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2666984,
                "title": "c-clean-o-1-space-solution-with-explanation",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        //same as add 1\\n        int carry = 1;\\n        \\n        // propagate carry\\n        for (int i = digits.size() - 1; i >= 0; --i) {\\n            digits[i] += carry;\\n            carry = digits[i] / 10;\\n            digits[i] = digits[i] % 10;\\n        }\\n        \\n        // handle the last carry if any\\n        if (carry) {\\n            digits.insert(digits.begin(), carry);\\n        }\\n\\n        return digits;\\n    }\\n};\\n\\n/*\\nif (you like this) {\\n\\tplease upvote;\\n}\\n*/\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        //same as add 1\\n        int carry = 1;\\n        \\n        // propagate carry\\n        for (int i = digits.size() - 1; i >= 0; --i) {\\n            digits[i] += carry;\\n            carry = digits[i] / 10;\\n            digits[i] = digits[i] % 10;\\n        }\\n        \\n        // handle the last carry if any\\n        if (carry) {\\n            digits.insert(digits.begin(), carry);\\n        }\\n\\n        return digits;\\n    }\\n};\\n\\n/*\\nif (you like this) {\\n\\tplease upvote;\\n}\\n*/\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2574962,
                "title": "javascript-two-line-solution",
                "content": "```\\nvar plusOne = function (digits) {\\n  const arr = [...(BigInt(digits.join(\"\")) + BigInt(1)).toString()];\\n  return arr.map(Number);\\n};\\n```\\nWe have to use the **bigInt()**. <br>\\nBecause JS have a limited precision (2^53=9,007,199,254,740,992 for the biggest integer). And Test case `[6, 1, 4, 5, 3, 9, 0, 1, 9, 5, 1, 8, 6, 7, 0, 5, 5, 4, 3]` has passed that limit. As we cross the limit, we have to call the `bigInt()` function to to do precise calculation. And we can not add 1 directly to a `big-integer`. The number has to be the same type. Therefore, we have to add 1 like -  `bigInt(1)`. <br>",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar plusOne = function (digits) {\\n  const arr = [...(BigInt(digits.join(\"\")) + BigInt(1)).toString()];\\n  return arr.map(Number);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2377251,
                "title": "c-solution-easy-fast-than-96",
                "content": "```\\nvector<int> plusOne(vector<int>& digits) {\\n\\tint n = digits.size(), i; \\n\\tfor (i = n-1; i>=0; i--) {\\n\\t\\tif(digits[i]!=9) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\tif(i==-1) {\\n\\t\\tvector<int> v(n+1, 0);\\n\\t\\tv[0]=1;\\n\\t\\treturn v;\\n\\t}\\n\\tdigits[i]++;\\n\\tfor(int j = i+1; j<n; j++) \\n\\t\\tdigits[j] = 0;\\n\\treturn digits;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvector<int> plusOne(vector<int>& digits) {\\n\\tint n = digits.size(), i; \\n\\tfor (i = n-1; i>=0; i--) {\\n\\t\\tif(digits[i]!=9) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\tif(i==-1) {\\n\\t\\tvector<int> v(n+1, 0);\\n\\t\\tv[0]=1;\\n\\t\\treturn v;\\n\\t}\\n\\tdigits[i]++;\\n\\tfor(int j = i+1; j<n; j++) \\n\\t\\tdigits[j] = 0;\\n\\treturn digits;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2267126,
                "title": "go-easy-and-fast",
                "content": "```\\nfunc PlusOne(digits []int) []int {\\n\\tvar res int = 1\\n\\tfor i := len(digits) - 1; i >= 0; i-- {\\n\\t\\ts := digits[i]\\n\\t\\tif s+res <= 9 {\\n\\t\\t\\tdigits[i] += res\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\tdigits[i] = 0\\n\\t\\tif i == 0 {\\n\\t\\t\\tdigits = append([]int{1}, digits...)\\n\\t\\t}\\n\\t}\\n\\treturn digits\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Math"
                ],
                "code": "```\\nfunc PlusOne(digits []int) []int {\\n\\tvar res int = 1\\n\\tfor i := len(digits) - 1; i >= 0; i-- {\\n\\t\\ts := digits[i]\\n\\t\\tif s+res <= 9 {\\n\\t\\t\\tdigits[i] += res\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\tdigits[i] = 0\\n\\t\\tif i == 0 {\\n\\t\\t\\tdigits = append([]int{1}, digits...)\\n\\t\\t}\\n\\t}\\n\\treturn digits\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2090046,
                "title": "ruby-solutions-elegant-ruby-pointer-using-modulus-and-recursion",
                "content": "## Elegant Ruby solution\\n\\n```\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef plus_one(digits)\\n    digits.join.to_i.next.digits.reverse\\nend\\n```\\n\\n## Pointer with modulus solution\\n\\nThis is what a technical interview is looking for....\\n\\n```\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef plus_one(digits)\\n    carryover, pointer = 1, -1\\n    \\n    while carryover.positive?\\n        break digits.unshift(carryover) if digits[pointer].nil?\\n        \\n        sum = digits[pointer] + carryover\\n        carryover = sum / 10\\n        digits[pointer] = sum % 10\\n        pointer -= 1\\n    end\\n        \\n    digits\\nend\\n```\\n\\n## Recursiion of pointer with modulus solution\\n\\n```\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef plus_one(digits, pointer = -1, carryover = 1)\\n    return digits if carryover.zero?\\n    return digits.unshift(carryover) if digits[pointer].nil?\\n    \\n    sum = digits[pointer] + carryover\\n    digits[pointer] = sum % 10\\n    \\n    plus_one(digits, pointer - 1, sum / 10)\\nend\\n```\\n\\n## Benchmark\\n\\n```\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef plus_one_ruby_like(digits)\\n    digits.join.to_i.next.digits.reverse\\nend\\n\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef plus_one_pointer(digits)\\n    carryover, pointer = 1, -1\\n\\n    while carryover.positive?\\n        break digits.unshift(carryover) if digits[pointer].nil?\\n\\n        sum = digits[pointer] + carryover\\n        carryover = sum / 10\\n        digits[pointer] = sum % 10\\n        pointer -= 1\\n    end\\n\\n    digits\\nend\\n\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef plus_one_recursive(digits, pointer = -1, carryover = 1)\\n    return digits if carryover.zero?\\n    return digits.unshift(carryover) if digits[pointer].nil?\\n\\n    sum = digits[pointer] + carryover\\n    digits[pointer] = sum % 10\\n\\n    plus_one_recursive(digits, pointer - 1, sum / 10)\\nend\\n\\nrequire \\'benchmark\\'\\n\\nn = 1_000_000\\ntest_cases =\\n    [\\n        [1,2,3],\\n        [4,3,2,1],\\n        [9]\\n    ]\\n\\nBenchmark.bmbm do |x|\\n    x.report(\\'plus_one_ruby_like()\\') { n.times { |nth| plus_one_ruby_like(test_cases[nth % test_cases.length]) } }\\n    x.report(\\'plus_one_pointer()\\')  { n.times { |nth| plus_one_pointer(test_cases[nth % test_cases.length]) } }\\n    x.report(\\'plus_one_recursive()\\')  { n.times { |nth| plus_one_recursive(test_cases[nth % test_cases.length]) } }\\nend\\n```\\n\\nResult:\\n\\nRuby-like solution is slower due to the new object creations and transformation.\\n\\nThe pointer is faster since its updating the existing object, `digits`, in place.\\n\\nThis can be verified by calling `object_id` on the resulting object. The Ruby-like solution creates new objects, while the pointer solution result has the same `object_id` as the input.\\n\\n```\\nRehearsal --------------------------------------------------------\\nplus_one_ruby_like()   0.872726   0.003306   0.876032 (  0.876655)\\nplus_one_pointer()     0.176923   0.000899   0.177822 (  0.178070)\\nplus_one_recursive()   0.185491   0.000453   0.185944 (  0.185986)\\n----------------------------------------------- total: 1.239798sec\\n\\n                           user     system      total        real\\nplus_one_ruby_like()   1.449080   0.008460   1.457540 (  1.458386)\\nplus_one_pointer()     0.176361   0.001490   0.177851 (  0.178214)\\nplus_one_recursive()   0.188032   0.001648   0.189680 (  0.190059)\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef plus_one(digits)\\n    digits.join.to_i.next.digits.reverse\\nend\\n```\n```\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef plus_one(digits)\\n    carryover, pointer = 1, -1\\n    \\n    while carryover.positive?\\n        break digits.unshift(carryover) if digits[pointer].nil?\\n        \\n        sum = digits[pointer] + carryover\\n        carryover = sum / 10\\n        digits[pointer] = sum % 10\\n        pointer -= 1\\n    end\\n        \\n    digits\\nend\\n```\n```\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef plus_one(digits, pointer = -1, carryover = 1)\\n    return digits if carryover.zero?\\n    return digits.unshift(carryover) if digits[pointer].nil?\\n    \\n    sum = digits[pointer] + carryover\\n    digits[pointer] = sum % 10\\n    \\n    plus_one(digits, pointer - 1, sum / 10)\\nend\\n```\n```\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef plus_one_ruby_like(digits)\\n    digits.join.to_i.next.digits.reverse\\nend\\n\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef plus_one_pointer(digits)\\n    carryover, pointer = 1, -1\\n\\n    while carryover.positive?\\n        break digits.unshift(carryover) if digits[pointer].nil?\\n\\n        sum = digits[pointer] + carryover\\n        carryover = sum / 10\\n        digits[pointer] = sum % 10\\n        pointer -= 1\\n    end\\n\\n    digits\\nend\\n\\n# @param {Integer[]} digits\\n# @return {Integer[]}\\ndef plus_one_recursive(digits, pointer = -1, carryover = 1)\\n    return digits if carryover.zero?\\n    return digits.unshift(carryover) if digits[pointer].nil?\\n\\n    sum = digits[pointer] + carryover\\n    digits[pointer] = sum % 10\\n\\n    plus_one_recursive(digits, pointer - 1, sum / 10)\\nend\\n\\nrequire \\'benchmark\\'\\n\\nn = 1_000_000\\ntest_cases =\\n    [\\n        [1,2,3],\\n        [4,3,2,1],\\n        [9]\\n    ]\\n\\nBenchmark.bmbm do |x|\\n    x.report(\\'plus_one_ruby_like()\\') { n.times { |nth| plus_one_ruby_like(test_cases[nth % test_cases.length]) } }\\n    x.report(\\'plus_one_pointer()\\')  { n.times { |nth| plus_one_pointer(test_cases[nth % test_cases.length]) } }\\n    x.report(\\'plus_one_recursive()\\')  { n.times { |nth| plus_one_recursive(test_cases[nth % test_cases.length]) } }\\nend\\n```\n```\\nRehearsal --------------------------------------------------------\\nplus_one_ruby_like()   0.872726   0.003306   0.876032 (  0.876655)\\nplus_one_pointer()     0.176923   0.000899   0.177822 (  0.178070)\\nplus_one_recursive()   0.185491   0.000453   0.185944 (  0.185986)\\n----------------------------------------------- total: 1.239798sec\\n\\n                           user     system      total        real\\nplus_one_ruby_like()   1.449080   0.008460   1.457540 (  1.458386)\\nplus_one_pointer()     0.176361   0.001490   0.177851 (  0.178214)\\nplus_one_recursive()   0.188032   0.001648   0.189680 (  0.190059)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2057867,
                "title": "php-solutions-in-one-line",
                "content": "```\\nfunction plusOne($digits) {\\n        return str_split(bcadd(1,implode($digits)));\\n    }\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nfunction plusOne($digits) {\\n        return str_split(bcadd(1,implode($digits)));\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2031771,
                "title": "c-solution-two-approaches-easy-to-understand",
                "content": "**Approach 1 :**\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int carry=1,size=digits.size();\\n        for(int i=size-1;i>=0;i--) {\\n            int sum=digits[i]+carry;\\n            digits[i]=sum%10;\\n            carry=sum/10;\\n        }\\n        if(carry>0) digits.insert(digits.begin(),carry);\\n        return digits;\\n    }\\n};\\n```\\n\\n\\n**Approach 2 :**\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        for (int i=digits.size()-1;i>=0;i--){\\n            if (digits[i]==9){\\n                digits[i]=0;\\n            }\\n            else{\\n                digits[i]++;\\n                return digits;\\n            }\\n        }\\n        digits.push_back(0);\\n        digits[0]=1;\\n        return digits;\\n    }\\n};\\n```\\n\\nIf you liked the solution then, please upvote \\uD83D\\uDE0A",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int carry=1,size=digits.size();\\n        for(int i=size-1;i>=0;i--) {\\n            int sum=digits[i]+carry;\\n            digits[i]=sum%10;\\n            carry=sum/10;\\n        }\\n        if(carry>0) digits.insert(digits.begin(),carry);\\n        return digits;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        for (int i=digits.size()-1;i>=0;i--){\\n            if (digits[i]==9){\\n                digits[i]=0;\\n            }\\n            else{\\n                digits[i]++;\\n                return digits;\\n            }\\n        }\\n        digits.push_back(0);\\n        digits[0]=1;\\n        return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1478974,
                "title": "c-the-best-teacher-is-discussion",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size()-1;\\n        for(int i=n;i>=0;i--)\\n        {\\n            if(digits[i]<9)\\n            {\\n                digits[i]++;\\n                return digits;\\n            }\\n            digits[i]=0;\\n        }\\n        digits[0]=1;\\n        digits.push_back(0);\\n        return digits;\\n    }\\n};\\n```\\nIf you find any issue in understanding the solutions then comment below, will try to help you.\\nIf you found my solution useful.\\nSo please do upvote and encourage me to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size()-1;\\n        for(int i=n;i>=0;i--)\\n        {\\n            if(digits[i]<9)\\n            {\\n                digits[i]++;\\n                return digits;\\n            }\\n            digits[i]=0;\\n        }\\n        digits[0]=1;\\n        digits.push_back(0);\\n        return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1368813,
                "title": "plus-one-easy-python-solution",
                "content": "If the last digit is any number from **0-8**, incrementing that by 1 will not cause any issue, making the case simple. In case the last digit is **9**, adding 1 will make it 10, so 9 will be replaced by 0 and addition of 1 to the previous number is to be done.\\n\\nConsider the example of 99 = [9,9] - adding 1 to last digit makes it 0 and 1 is added to previous digit and that again will become 0. Now since this is the first digit of the number (here in list format), 1 needs to be appended before it to finish the addition. This is done in the code blow. \\n\\n```\\ndef plusOne(self, digits: List[int]) -> List[int]:\\n        n = len(digits)\\n        \\n        while n>0:\\n            if digits[n-1]==9:\\n                if (n-1) == 0:\\n                    digits[n-1] = 0\\n                    temp = [1] + digits\\n                    return temp\\n                else:\\n                    digits[n-1] = 0\\n                    n = n-1\\n            else:\\n                digits[n-1] += 1\\n                return digits\\n        \\n        return digits\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef plusOne(self, digits: List[int]) -> List[int]:\\n        n = len(digits)\\n        \\n        while n>0:\\n            if digits[n-1]==9:\\n                if (n-1) == 0:\\n                    digits[n-1] = 0\\n                    temp = [1] + digits\\n                    return temp\\n                else:\\n                    digits[n-1] = 0\\n                    n = n-1\\n            else:\\n                digits[n-1] += 1\\n                return digits\\n        \\n        return digits\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1290715,
                "title": "java-simple-0ms-faster-than-100-pure-logic-clean-efficient-explained",
                "content": "# **Please Upvote if you got any help from the provided solution!!!**\\n\\nBasic Idea behind this implementation is:\\n* Increment the element by 1 if it is not equal to 9 and return it. \\neg: 35 + 1 = 16, so we will increment the element 5 by 1 to make it 6 and return it as no further manipulation is required on element 3(from 38).\\n\\n* But if element is 9, then make that element as 0(zero).\\neg: 59 + 1 = 60, here we will make the element 9 as 0(zero) and in the next iteration increment the element 5(from 59) by 1 to make it 6 and return it.\\n\\n* But for cases where all elements are 9, then we have to create a new array of 1 larger length than the original array so as to fit an extra element into it and return the newly created array.\\neg: If we have an array of length 4 and all elements consists of 9, then we need an array of length 5, so as to make the first element as 1(one) and remaining ones as 0\\'s(zeros).<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9999  <-- here the number of digits are 4\\n<u>&nbsp;+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1</u> \\n&nbsp;&nbsp;&nbsp;10000  <-- but after adding 1 to it the number of digits becomes 5 and for storing an extra element we need to create a new array of 1 length larger than the original one.\\n<hr><br>\\n\\n\\n```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        \\n        final int len = digits.length;\\n        \\n        for(int index = len - 1; index >= 0; --index){\\n            if(digits[index] != 9){\\n                digits[index] += 1;  // if element is not equal to 9, then increment it by 1 and return it\\n                return digits; \\n            }\\n            digits[index] = 0; // else if element is 9, then make that element as 0(zero)\\n        }\\n        \\n        final int[] result = new int[len + 1]; //  for cases where all elements are 9, then we have to create a new array of 1 larger length than the original array\\n        result[0] = 1; // making the 1st element as 1 and rest will be 0 as the default value of int is 0, so all elements will be 0 except for 1st element which will be 1\\n        return result;\\n    }\\n}\\n```\\n\\n# **Please Upvote if you got any help from the provided solution!!!**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        \\n        final int len = digits.length;\\n        \\n        for(int index = len - 1; index >= 0; --index){\\n            if(digits[index] != 9){\\n                digits[index] += 1;  // if element is not equal to 9, then increment it by 1 and return it\\n                return digits; \\n            }\\n            digits[index] = 0; // else if element is 9, then make that element as 0(zero)\\n        }\\n        \\n        final int[] result = new int[len + 1]; //  for cases where all elements are 9, then we have to create a new array of 1 larger length than the original array\\n        result[0] = 1; // making the 1st element as 1 and rest will be 0 as the default value of int is 0, so all elements will be 0 except for 1st element which will be 1\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1207212,
                "title": "java-faster-than-100-easy-way",
                "content": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        \\t\\t\\n\\t\\tfor (int i = digits.length - 1; i >= 0; i--) {\\n\\t\\t\\tif (digits[i] < 9) { \\n\\t\\t\\t\\tdigits[i]++;\\n\\t\\t\\t\\treturn digits;\\n\\t\\t\\t} else { digits[i] = 0; }\\n\\t\\t}\\n        \\n        int[] temp = new int[digits.length + 1];\\n\\t\\ttemp[0] = 1;\\n        return temp;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        \\t\\t\\n\\t\\tfor (int i = digits.length - 1; i >= 0; i--) {\\n\\t\\t\\tif (digits[i] < 9) { \\n\\t\\t\\t\\tdigits[i]++;\\n\\t\\t\\t\\treturn digits;\\n\\t\\t\\t} else { digits[i] = 0; }\\n\\t\\t}\\n        \\n        int[] temp = new int[digits.length + 1];\\n\\t\\ttemp[0] = 1;\\n        return temp;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 694574,
                "title": "java-with-comments-easy-to-understand-100-time",
                "content": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        for(int i=digits.length-1; i>=0; i--){\\n            if(digits[i]<9){\\n                //first non-9 will be incremented by 1 and then the result is returned\\n                digits[i] = digits[i] + 1;\\n                return digits;\\n            }\\n            //if it is 9, make it zero. we\\'re incrementing first non-9 above.\\n            digits[i] = 0;\\n        }\\n            \\n        //if we reached here that means we have a case where array consists of all nines.  \\n        //In that case, the array is all zeroes. we just need to make 0th position 1. \\n        int[] result = new int[digits.length + 1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        for(int i=digits.length-1; i>=0; i--){\\n            if(digits[i]<9){\\n                //first non-9 will be incremented by 1 and then the result is returned\\n                digits[i] = digits[i] + 1;\\n                return digits;\\n            }\\n            //if it is 9, make it zero. we\\'re incrementing first non-9 above.\\n            digits[i] = 0;\\n        }\\n            \\n        //if we reached here that means we have a case where array consists of all nines.  \\n        //In that case, the array is all zeroes. we just need to make 0th position 1. \\n        int[] result = new int[digits.length + 1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24438,
                "title": "my-c-code-check-9",
                "content": "    vector<int> plusOne(vector<int> &digits) {\\n        int i;\\n        for(i=digits.size()-1;i>=0;i--)\\n        {\\n            if(digits[i]!=9)\\n            {\\n                digits[i]++;\\n                break;\\n            }\\n            else\\n            {\\n                digits[i] = 0;\\n            }\\n        }\\n        if(!digits[0])\\n        {\\n            digits[0] = 1;\\n            digits.push_back(0);\\n        }\\n        return digits;\\n    }",
                "solutionTags": [],
                "code": "    vector<int> plusOne(vector<int> &digits) {\\n        int i;\\n        for(i=digits.size()-1;i>=0;i--)\\n        {\\n            if(digits[i]!=9)\\n            {\\n                digits[i]++;\\n                break;\\n            }\\n            else\\n            {\\n                digits[i] = 0;\\n            }\\n        }\\n        if(!digits[0])\\n        {\\n            digits[0] = 1;\\n            digits.push_back(0);\\n        }\\n        return digits;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4087841,
                "title": "python-98-30-beats-2-approachs-simple-code",
                "content": "**If you got help from this,... Plz Upvote .. it encourage me**\\n\\n# Code\\n# Approach 1 (Array) -> 98.30 % beats\\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n\\n        for i in range(len(digits)-1, -1, -1):\\n            if digits[i] == 9:\\n                digits[i] = 0\\n            else:\\n                digits[i] = digits[i] + 1\\n                return digits\\n        return [1] + digits \\n\\n        \\n```\\n\\n# Approach 2 (Convert list -> Number :: -> Addition +1 :: -> Number  -> List\\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        # List -> Number\\n        n = 0\\n        for ele in digits:\\n            n = (n*10) + ele\\n        \\n        n = n+1\\n        \\n        # Number -> List\\n        digits = []\\n        while n > 0:\\n            digits.insert(0, n % 10)  \\n            n //= 10 \\n        return digits\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n\\n        for i in range(len(digits)-1, -1, -1):\\n            if digits[i] == 9:\\n                digits[i] = 0\\n            else:\\n                digits[i] = digits[i] + 1\\n                return digits\\n        return [1] + digits \\n\\n        \\n```\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        # List -> Number\\n        n = 0\\n        for ele in digits:\\n            n = (n*10) + ele\\n        \\n        n = n+1\\n        \\n        # Number -> List\\n        digits = []\\n        while n > 0:\\n            digits.insert(0, n % 10)  \\n            n //= 10 \\n        return digits\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4075521,
                "title": "simple-and-easy-approach-in-c",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n //you have to traverse array until the element is not equal to 9\\n//from last index and add one if element is not equal to 9\\n        for(int i=digits.size()-1;i>=0;i--){\\n            if(digits[i]!=9){\\n                digits[i]++;\\n                return digits;\\n            }\\n            else{\\n                digits[i]=0;\\n            }\\n        }\\n//if whole array is nine the push_back one element and index[0]==1\\n        digits.push_back(0);\\n        digits[0]=1;\\n        return digits;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n //you have to traverse array until the element is not equal to 9\\n//from last index and add one if element is not equal to 9\\n        for(int i=digits.size()-1;i>=0;i--){\\n            if(digits[i]!=9){\\n                digits[i]++;\\n                return digits;\\n            }\\n            else{\\n                digits[i]=0;\\n            }\\n        }\\n//if whole array is nine the push_back one element and index[0]==1\\n        digits.push_back(0);\\n        digits[0]=1;\\n        return digits;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3959120,
                "title": "java-code-easy-to-under-stand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n        for (int i = n - 1; i >= 0; i--) {\\n            digits[i]++;\\n            if (digits[i] < 10) {\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n       \\n        int[] result = new int[n + 1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n        for (int i = n - 1; i >= 0; i--) {\\n            digits[i]++;\\n            if (digits[i] < 10) {\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n       \\n        int[] result = new int[n + 1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3934362,
                "title": "simple-easy-solution-in-python3",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        s= \\'\\'.join(map(str,digits))\\n        i=int(s)+1\\n        li=list(map(int,str(i)))  \\n        return li\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        s= \\'\\'.join(map(str,digits))\\n        i=int(s)+1\\n        li=list(map(int,str(i)))  \\n        return li\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3668116,
                "title": "intuitive-recursive-solution-run-time-o-n-space-o-1",
                "content": "# Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIf the last element is smaller than 9. -> ** add 1 to the last element**\\n\\nIf the last element is equal to 9. --> **change the value of the element to 0 (as we can\\'t store the value 10 in one digit, we have to carry 1 to the next digit)\\n\\nDecrease i by 1 (to iterate backward as we are using i as index) and decrease length by 1 (we need length as a reference to stop the recursion)\\n$$note:$$ we don\\'t need a \"carry\" variable as in every scenario it is going to be 1\\nCall the function again.\\n\\nWhen we call the function again, if the next digit is smaller than 9 we can just +1 the value of the element we are on.\\n\\nIf the element is 9 we can call our function again.\\nIf there is no element left (but we still have to add the $$carry$$, we add 1 as a new element to the list)\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def plusOne(self, digits):\\n        \"\"\"\\n        :type digits: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        i = -1 #index to start from the end\\n        length = len(digits) \\n\\n        def Calculate(arr, i, length):\\n            if length != 0 and arr[i] != 9:\\n                arr[i] += 1 \\n            elif length > 0:\\n                arr[i] = 0\\n                length -= 1\\n                i -= 1\\n                Calculate(arr, i, length)\\n            else:\\n                arr.insert(0, 1) \\n        \\n        Calculate(digits, i, length)\\n        return digits\\n```",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "```\\nclass Solution(object):\\n    def plusOne(self, digits):\\n        \"\"\"\\n        :type digits: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        i = -1 #index to start from the end\\n        length = len(digits) \\n\\n        def Calculate(arr, i, length):\\n            if length != 0 and arr[i] != 9:\\n                arr[i] += 1 \\n            elif length > 0:\\n                arr[i] = 0\\n                length -= 1\\n                i -= 1\\n                Calculate(arr, i, length)\\n            else:\\n                arr.insert(0, 1) \\n        \\n        Calculate(digits, i, length)\\n        return digits\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3606996,
                "title": "optimized-solution-0ms-runtime",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size(); // Get the size of the digits array\\n        for (int i = n - 1; i >= 0; i--) { // Iterate over the digits array from right to left\\n            if (digits[i] < 9) { // Check if the current digit is less than 9\\n                digits[i]++; // If it is, increment the digit by 1\\n                return digits; // Return the modified array\\n            }\\n            digits[i] = 0; // Set the current digit to 0 since it was 9\\n        }\\n        digits.insert(digits.begin(), 1); // If all digits were 9, insert 1 at the beginning\\n        return digits; // Return the modified array\\n    }\\n};\\n```\\n\\n**PLEASE UPVOTE :)**",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size(); // Get the size of the digits array\\n        for (int i = n - 1; i >= 0; i--) { // Iterate over the digits array from right to left\\n            if (digits[i] < 9) { // Check if the current digit is less than 9\\n                digits[i]++; // If it is, increment the digit by 1\\n                return digits; // Return the modified array\\n            }\\n            digits[i] = 0; // Set the current digit to 0 since it was 9\\n        }\\n        digits.insert(digits.begin(), 1); // If all digits were 9, insert 1 at the beginning\\n        return digits; // Return the modified array\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3462162,
                "title": "add-one-100-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& d) {\\n        int c=1;\\n        for(int i=d.size()-1;i>=0;i--)\\n        {\\n            int f=d[i]+c;\\n            d[i]=f%10;\\n            c=f/10;\\n        }\\n        if(c!=0)\\n        {\\n            reverse(d.begin(),d.end());\\n            d.push_back(c);\\n            reverse(d.begin(),d.end());\\n        }\\n        return d;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& d) {\\n        int c=1;\\n        for(int i=d.size()-1;i>=0;i--)\\n        {\\n            int f=d[i]+c;\\n            d[i]=f%10;\\n            c=f/10;\\n        }\\n        if(c!=0)\\n        {\\n            reverse(d.begin(),d.end());\\n            d.push_back(c);\\n            reverse(d.begin(),d.end());\\n        }\\n        return d;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3393850,
                "title": "increment-a-large-integer-represented-as-an-array-c-solution-easy-to-understand",
                "content": "# Intuition\\n![iages.jpeg](https://assets.leetcode.com/users/images/886eabe7-02a5-4004-a712-457c4c886152_1680957173.8068066.jpeg)\\n\\n\\n***We need to increment a large integer represented as an integer array by 1. One way to approach this problem is to iterate through the array from right to left and add 1 to each digit until we find a digit that is less than 10. If we reach the leftmost digit and it needs to be set to 0, we need to create a new array with one extra element and set the first element to 1.***\\n\\n# Approach\\n\\n***We will implement the approach mentioned in the intuition. We will start iterating through the array from right to left and increment each digit by 1. If the resulting digit is less than 10, we can return the modified array. Otherwise, we will set the current digit to 0 and continue with the next digit.If we reach the leftmost digit and it needs to be set to 0, we will create a new array with one extra element and set the first element to 1. We will return this new array as the result.***\\n\\n# Complexity\\n- Time complexity:\\n- \\n       O(N)\\n\\n- Space complexity:\\n- \\n       O(1)\\n       \\n\\n# Code\\n```\\nint* plusOne(int* digits, int digitsSize, int* returnSize) {\\n    for (int i = digitsSize - 1; i >= 0; i--) {\\n        digits[i]++;\\n        if (digits[i] < 10) {\\n            *returnSize = digitsSize;\\n            return digits;\\n        }\\n        digits[i] = 0;\\n    }\\n    int* result = (int*)malloc((digitsSize + 1) * sizeof(int));\\n    result[0] = 1;\\n    for (int i = 1; i <= digitsSize; i++) {\\n        result[i] = 0;\\n    }\\n    *returnSize = digitsSize + 1;\\n    return result;\\n}\\n\\n```",
                "solutionTags": [
                    "C",
                    "Array",
                    "Math"
                ],
                "code": "```\\nint* plusOne(int* digits, int digitsSize, int* returnSize) {\\n    for (int i = digitsSize - 1; i >= 0; i--) {\\n        digits[i]++;\\n        if (digits[i] < 10) {\\n            *returnSize = digitsSize;\\n            return digits;\\n        }\\n        digits[i] = 0;\\n    }\\n    int* result = (int*)malloc((digitsSize + 1) * sizeof(int));\\n    result[0] = 1;\\n    for (int i = 1; i <= digitsSize; i++) {\\n        result[i] = 0;\\n    }\\n    *returnSize = digitsSize + 1;\\n    return result;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3298844,
                "title": "python-easiest-approach-beating-90-25",
                "content": "\\n![image.png](https://assets.leetcode.com/users/images/cfd19bd3-25de-4601-b4c4-24885a9e2151_1678857572.4187334.png)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def plusOne(self, digits):\\n        \"\"\"\\n        :type digits: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        digits=[str(i) for i in digits]\\n        s=\\'\\'.join(digits)\\n        a=int(s)+1\\n        l=list(str(a))\\n        l=[int(i) for i in l]\\n        return l\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def plusOne(self, digits):\\n        \"\"\"\\n        :type digits: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n        digits=[str(i) for i in digits]\\n        s=\\'\\'.join(digits)\\n        a=int(s)+1\\n        l=list(str(a))\\n        l=[int(i) for i in l]\\n        return l\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3260726,
                "title": "python3-95-fast",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- MSB to LSB is gives so increment in reverse manner.\\n- maintan carry variable to map if we have any previous overflow.\\n- at last if we have any carry left insert it to front of list.\\n- return digits.\\n\\n\\n![Screenshot 2023-03-05 204834.png](https://assets.leetcode.com/users/images/c7e27b34-d600-40e9-b750-d26fb8a3e99c_1678029545.3783138.png)\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        carry = 0\\n        n = len(digits)\\n        for i in reversed(range(n)):\\n            val = digits[i] + carry + 1 if i == n-1 else digits[i] + carry\\n            if val <= 9:\\n                digits[i] = val\\n                carry = 0\\n            else:\\n                carry = val // 10\\n                val -= 10\\n                digits[i] = val\\n        if carry:\\n            digits.insert(0, carry)\\n        return digits\\n```\\n# Please like and Comment below \\uD83D\\uDC4B\\u2267\\u25C9\\u1D25\\u25C9\\u2266",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        carry = 0\\n        n = len(digits)\\n        for i in reversed(range(n)):\\n            val = digits[i] + carry + 1 if i == n-1 else digits[i] + carry\\n            if val <= 9:\\n                digits[i] = val\\n                carry = 0\\n            else:\\n                carry = val // 10\\n                val -= 10\\n                digits[i] = val\\n        if carry:\\n            digits.insert(0, carry)\\n        return digits\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3137627,
                "title": "plus-one-o-n-time-complexity",
                "content": "# Intuition\\nTo not use Brute Force Approach and optimize the solution.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n* for numbers less than or equal to 8 - can directly be incremented by 1.\\n* eg: 786 + 1= 787\\n* for number which is equal to 9 - will be replaced with 0 and generate a carry\\n* That carry will be further added to the beginning. \\n* eg: 9 + 1 = 0 carry generated  \\n* Now 1 will be placed in the beginning. \\n* Final array will be 10 \\n \\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        short i =0; // for smaller integers\\n        bool carry =0; // carry can be zero or one so used bool\\n        for(i=digits.size()-1;i>=0;--i){\\n            if(digits[i]<=8){ // for digits less than 8\\n                digits[i]++; // incremented by 1 directly\\n                carry =0; // no need of carry\\n                break; // increased the number by 1 and break\\n            }\\n            else{\\n                digits[i]=0; // else if the number is 9 , so replace the number by 0\\n                carry=1; // generate a carry 1\\n            }\\n        }\\n        if (carry) digits.insert(digits.begin(),1); // as number was increased by 1 there was 1 carry , carry will be placed in beginning \\n        return digits; // return the incremented digits as final output \\n    }\\nint main(){\\n    return 0;\\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        short i =0; // for smaller integers\\n        bool carry =0; // carry can be zero or one so used bool\\n        for(i=digits.size()-1;i>=0;--i){\\n            if(digits[i]<=8){ // for digits less than 8\\n                digits[i]++; // incremented by 1 directly\\n                carry =0; // no need of carry\\n                break; // increased the number by 1 and break\\n            }\\n            else{\\n                digits[i]=0; // else if the number is 9 , so replace the number by 0\\n                carry=1; // generate a carry 1\\n            }\\n        }\\n        if (carry) digits.insert(digits.begin(),1); // as number was increased by 1 there was 1 carry , carry will be placed in beginning \\n        return digits; // return the incremented digits as final output \\n    }\\nint main(){\\n    return 0;\\n}\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3122017,
                "title": "simple-way-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int idx=digits.size()-1;\\n        while(idx>=0)\\n        {\\n            if(digits[idx]==9)\\n            {\\n                digits[idx]=0;\\n            }\\n            else\\n            {\\n                digits[idx]+=1;\\n                return digits;\\n            }\\n            idx--;\\n        }\\n        digits.insert(digits.begin(),1);\\n        return digits;\\n        \\n        \\n\\n        \\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int idx=digits.size()-1;\\n        while(idx>=0)\\n        {\\n            if(digits[idx]==9)\\n            {\\n                digits[idx]=0;\\n            }\\n            else\\n            {\\n                digits[idx]+=1;\\n                return digits;\\n            }\\n            idx--;\\n        }\\n        digits.insert(digits.begin(),1);\\n        return digits;\\n        \\n        \\n\\n        \\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086740,
                "title": "beats-100-easy-beginner-friendly-c-solution",
                "content": "# Intuition\\n\\n\\n# Approach\\nHere,First we have to take two cases\\n1) if digit < 9\\n    casually increment digit[i];\\n2) if digit == 9\\n    here we find no of last occuring 9\\'s so,we increment just      before index of first 9 in given array order.\\n->apply for loop to get incrementing position\\ntwo cases\\n 1.if only one 9 i.e., {9} then we have update 9 to 1 and pushback 0;\\n 2. if no of 9\\'s > 1 (ex:499,87999)then we update the just before index of first consecutive 9 and update the remaining values 0f 9with for loop by 0\\n \\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size();\\n        #for storing last consecutive 9\\'s location appearing from reverse\\n        int a = 0;\\n\\n        if(digits[n-1] < 9){\\n            digits[n-1]++;\\n            return digits;\\n        }\\n\\n        if(digits[n-1]==9){\\n            #for finding last consective 9 from reverse\\n            for(int i = n-1; i>=0;i--){\\n               \\n                if(digits[i] == 9){\\n                    a  =  i;                 \\n                }\\n                else if(digits[i]<9){\\n                    break;\\n\\n                }\\n              \\n            }\\n            #updating 9\\'s with 1\\n            if(a == 0){\\n                digits[0] = 1;\\n                for(int i = 1;i<n;i++){\\n                    digits[i] = 0;\\n                }\\n                digits.push_back(0);\\n            }\\n            #updating 9\\'s with 0\\n            if(a>0){\\n                 digits[a-1]++;\\n                for(int i = a; i<n; i++){\\n                    digits[i] = 0;\\n                }\\n            }   \\n        }\\n        \\n      return digits;\\n    }\\n    \\n};\\n\\n```\\n\\n\\n![{C6536750-B4F1-492E-9ED4-046628FB312E}.png](https://assets.leetcode.com/users/images/6ae85fce-a91d-408f-bb91-87d599ad888f_1674403258.8890588.png)\\n\\n\\nIf u find it useful please upvote this solution.\\n",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size();\\n        #for storing last consecutive 9\\'s location appearing from reverse\\n        int a = 0;\\n\\n        if(digits[n-1] < 9){\\n            digits[n-1]++;\\n            return digits;\\n        }\\n\\n        if(digits[n-1]==9){\\n            #for finding last consective 9 from reverse\\n            for(int i = n-1; i>=0;i--){\\n               \\n                if(digits[i] == 9){\\n                    a  =  i;                 \\n                }\\n                else if(digits[i]<9){\\n                    break;\\n\\n                }\\n              \\n            }\\n            #updating 9\\'s with 1\\n            if(a == 0){\\n                digits[0] = 1;\\n                for(int i = 1;i<n;i++){\\n                    digits[i] = 0;\\n                }\\n                digits.push_back(0);\\n            }\\n            #updating 9\\'s with 0\\n            if(a>0){\\n                 digits[a-1]++;\\n                for(int i = a; i<n; i++){\\n                    digits[i] = 0;\\n                }\\n            }   \\n        }\\n        \\n      return digits;\\n    }\\n    \\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2961997,
                "title": "100-beats-c-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& d) {\\n        for(int i=d.size()-1;i>=0;i--)  {\\n          if(d[i]<9){\\n              d[i]++;\\n              return d;\\n          }\\n          else{\\n              d[i]=0;\\n          }\\n      }\\n        d.push_back(0);\\n        d[0]=1;\\n          \\n      \\n\\n        return d;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& d) {\\n        for(int i=d.size()-1;i>=0;i--)  {\\n          if(d[i]<9){\\n              d[i]++;\\n              return d;\\n          }\\n          else{\\n              d[i]=0;\\n          }\\n      }\\n        d.push_back(0);\\n        d[0]=1;\\n          \\n      \\n\\n        return d;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1572510,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1568525,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1663040,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1571826,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1779772,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1569392,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1568886,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1659327,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1568480,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1574979,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1572510,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1568525,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1663040,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1571826,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1779772,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1569392,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1568886,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1659327,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1568480,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1574979,
                "content": [
                    {
                        "username": "ShubhamDeshkar",
                        "content": "Leetcode has the worst of examples ever. They should give better explaination of the problem and it\\'s expected solution. This just wastes a lot of time to keep tweaking the code again and again by adjusting it to the test cases. This also lowers the confidence if you don\\'t get it right the first time.\\n\\nHey, Leetcode, improve yourself."
                    },
                    {
                        "username": "kelvin2602",
                        "content": "I dont think so, okay it can waste a lot of time to keep tweaking but, it trains the brain to know how to solve these problem, so the next time you have similar problem like this, you know how to do it, and you know how to solve it"
                    },
                    {
                        "username": "eduard92",
                        "content": "Its a good question, in an interview on a whiteboard or paper they might not even be that edgy, you don\\'t need to do it right first try."
                    },
                    {
                        "username": "eduard92",
                        "content": "I have seen worse than this, like way worse, just do +1 to last element and take in the consideration what will happen. Got 93/111 testcases first try without an IDE"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@signalskip](/signalskip) I would say the 4.7k dislikes would disagree with you. And it\\'s a bit needlessly insulting to assume that OP is simply making boilerplate code. Lastly, stating that you haven\\'t had issues without explaining how or giving your though process at least on this problem is very \"get good noob\" of you."
                    },
                    {
                        "username": "elysiumplain",
                        "content": "[@nitrogeno01](/nitrogeno01) One key objective of logistical programming puzzles is to teach you to learn to think about edge conditions. Test cases are there to provide further examples, or in some cases, to enable you to confirm your edge case belief.\n\nTry this process a few times and see if you improve your proposed solutions' \"coverage\"."
                    },
                    {
                        "username": "qiushile",
                        "content": "dude, just focus on the root cause, not just some test cases"
                    },
                    {
                        "username": "signalskip",
                        "content": "Going to have to disagree here. The point here is to write a code that will always work through the constraints listed on the description, not just the few test cases here. You shouldn\\'t aim to just satisfy the test cases, you should aim to answer the entire problem. I have never had an issue where I pass the test cases and not the submit cases."
                    },
                    {
                        "username": "nitrogeno01",
                        "content": "u are totally rigth after sometime coding and testing with the cases i submit and it always failed beacause the submit case is always kind of different"
                    },
                    {
                        "username": "naveen_425",
                        "content": "As per description \"You may assume the integer does not contain any leading zero, except the number 0 itself.\" but looks like this test case [0,0] is conflicting with description."
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Leetcode provides horrible examples, and they don\\'t fix them. Likely we will never get a response from them. I either find a DIFFERENT WEBSITE or i skip the problem"
                    },
                    {
                        "username": "user1628bq",
                        "content": "Guys, Help me with this test case [9,8,7,6,5,4,3,2,1,0].\\ndigits =[9,8,7,6,5,4,3,2,1,0]          60 / 111 testcases passed\\nOutput\\n[1,2,8,6,6,0,8,6,1,9]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]"
                    },
                    {
                        "username": "burmau",
                        "content": "Looks as though they were incrementing the largest digit at digit[i] instead of the largest integer itself."
                    },
                    {
                        "username": "drishtiphagwani7",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) Thank you Ajay for coming up with this logic. I could easily solve this problem and could also handle all the edgy conditions."
                    },
                    {
                        "username": "Chand51200",
                        "content": "Cast it to long from int."
                    },
                    {
                        "username": "navneet_yadav0048",
                        "content": "use simple loop except reverse"
                    },
                    {
                        "username": "konaleelakrishna974",
                        "content": "[@Rajan kumar sah](/user1628bq) why don\\'t use list indexing concept and select last index value and increment by 1 and return the list."
                    },
                    {
                        "username": "ASHISH_BHAMBURE",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990)  BUt how to implement it bro pls tell "
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9then update it zero and update previus index value by 1 if again previus inex is 9 then do same steps till i>=0 at the o th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "sumjains",
                        "content": "If you\\'re facing this error in Java, you can use BigInteger instead of int/long. That\\'ll surely help you pass all 111 testcases."
                    },
                    {
                        "username": "shivammafia0074",
                        "content": "hey i\\'m facing the same problem. Were u able to solve it?"
                    },
                    {
                        "username": "addlurumohanraj",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) do we need to use string for this? I used long and there is a test case more longer than int number"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "this is because you have exceeded max size of integer i.e,2147483647 hence the overflow error. Use long instead of int and at the time of inserting value in array cast long to int(as casting single digits won't give any problems).\nNOTE : It wont work if you exceed long limit hence optimal solution can be found in this discussion."
                    },
                    {
                        "username": "eitss813",
                        "content": "overflow issue"
                    },
                    {
                        "username": "wangyiman",
                        "content": "I can not understand the question."
                    },
                    {
                        "username": "tobilarry",
                        "content": "I want you to think about you do carry overs when performing addition operation."
                    },
                    {
                        "username": "BlakeE",
                        "content": "[@CT-7567](/CT-7567) If digits[0] = 9 i created a second array with a length of digits\\' length + 1. Otherwise i would keep it within digits and return digits"
                    },
                    {
                        "username": "TolunayM",
                        "content": "[@CT-7567](/CT-7567) No it\\'s not impossible but tricky."
                    },
                    {
                        "username": "CT-7567",
                        "content": "[@sankarshbb](/sankarshbb) I haven\\'t attempted but I wonder the test case [9]? how to add one more element to array isn\\'t it impossible? "
                    },
                    {
                        "username": "sankarshbb",
                        "content": "Now thats a problem isnt it"
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "bro why u using int ,long or any data type just check value in the array indexes and update value by zero and if end index value is 9 then update it \"zero\" and update previous index value by 1 if again previous index value  is 9 then do same steps when previus index element is not 9 then add 1 to them and return array \\n\\n if every previous element is 9 till  i>=0 at the 0 th index okay if all are 9,9,9,9, in array the make another array and  put 0th index value 1 and return if helpful then upvote me"
                    },
                    {
                        "username": "umair_fq",
                        "content": "Hi Ajay, thank you for your comment here in the description section. After reading your comment, I successfully make the program and get my all test cases passed."
                    },
                    {
                        "username": "Edward_Hu_New",
                        "content": "If not importing any JS library for long integer, what is the solution for numbers which exceed greater than 2^32-1?"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "let hugeInteger = BigInt(digits.join(\\'\\')) \\n\\nand now you have a nice big int you can work with :)"
                    },
                    {
                        "username": "battulasurendra",
                        "content": "we can use BigInt(num)"
                    },
                    {
                        "username": "1adityajoshi",
                        "content": "    def plusOne(self, digits): return [int(x) for x in str(int(''.join([str(x) for x in digits])) + 1)]"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "coolmalhar",
                        "content": "Time Complexity is O(n^2) : )\\n"
                    },
                    {
                        "username": "socraticDevBlog",
                        "content": "same thing but using more than one line ;)"
                    },
                    {
                        "username": "nandan_kumar07",
                        "content": "vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int n = digits.size();\\n        int r;\\n        long long int num = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            num += digits[i]*pow(10,n-1-i);\\n        }\\n        long long int new_num = num+1;\\n        while(new_num > 0)\\n        {\\n            r = new_num%10;\\n            ans.push_back(r);\\n            new_num = new_num/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n\\nWhy this is not working for test cases [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]"
                    },
                    {
                        "username": "_pranaymishra_",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same problem with me...can you help\\n"
                    },
                    {
                        "username": "Atif_32395",
                        "content": "you need to remove all element from vector,  write this one \"ans.clear()\" after this  statement \"long long int new_num = num+1;\""
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "because long long int has also limitations i.e, upto 20 digits at a time between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "[@Naman_Gupta_01](/Naman_Gupta_01) same it passed 77 testcases but not more than that. I think we have to use BigDecimal instead of long (Java)"
                    },
                    {
                        "username": "Naman_Gupta_01",
                        "content": "mine not working on digits =\\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]"
                    },
                    {
                        "username": "l0lbeatth",
                        "content": "A new test case [0, 0] was addes some time, although this case is not consistent with problem statement."
                    },
                    {
                        "username": "fayyoz24",
                        "content": "a = \"\"\\nfor i in digits:\\n\\ta+=str(i)\\nb = int(a)+1\\nc = []\\nfor j in str(b):\\n\\tc.append(int(j))\\nreturn c"
                    },
                    {
                        "username": "amadio",
                        "content": "Do not post solutions here"
                    }
                ]
            },
            {
                "id": 1945414,
                "content": [
                    {
                        "username": "ravih19",
                        "content": "Guys!! Try solving the problem using 3 cases.\\na) Considering all the values are 9.\\nb) Considering the last digit is not 9.\\nc) Considering the last digit is 9.\\nThis will make the coding a bit easy for you"
                    },
                    {
                        "username": "Anuj_Nandal_",
                        "content": "what will be the solution for case a and c bro? will it be 10 or (1,0)  ---> last digit?"
                    },
                    {
                        "username": "grifmang",
                        "content": "`return [int(x) for x in str(int(\\'\\'.join(map(str, digits))) + 1)]`"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "8755600408",
                        "content": "perfect\\n"
                    },
                    {
                        "username": "soumyajit_0",
                        "content": "Why is the discussion section filled with people flexing their one liners?"
                    },
                    {
                        "username": "ajaykathrotiya1819",
                        "content": "ans=\\'\\'.join(str(i) for i in digits)\\nans=int(ans)+1 \\nreturn list(str(ans))"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "the leetcode interpreter is doing a shitty job, although my code works perfectly in visual code studio, here it\\'s showing a different answer"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "        plusone = digits[-1] + 1\\n        if len(str(plusone)) > 1:\\n            digits.pop()\\n            for i in str(plusone):\\n                digits.append(int(i))\\n        else:\\n            digits[-1] = plusone\\n        return digits\\n        # this is the code"
                    },
                    {
                        "username": "cyborg_king",
                        "content": "just consider it a basic sum problem,\\nhow a child add two multiple digit no.,\\nwhenever sum of two nos. exceeds 9, we used to carry forward 1.\\nRun a loop over the elements/digits of the list/array if carry for. is required. and return the result"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "This isn\\'t an easy problem man ;) \\nnearly took 2-3 days to get to the logic in a right way  cheers ;) "
                    },
                    {
                        "username": "Omar211",
                        "content": "//why it is not working??\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n           \\n        int[] result = new int[digits.length];\\n        for (int i = 0; i < result.length; i++) {\\n            result[i] = digits[i];\\n        }\\n       if (result[result.length-1] == 9) {\\n        result[result.length-1] = 0;\\n        result[result.length-2] = result[result.length-2]+1;\\n       }\\n        else\\n        result[result.length-1]+=1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "GUSTAVOS07",
                        "content": "because it gets to a point where there is no element at result.length-2 and you should add another number to the list like 9  -> 10 to solve it you need to check if result.length-2 is >= 0 "
                    },
                    {
                        "username": "james_leetcode_2050",
                        "content": "For those who disliked, can you please share your reasons why you disliked this problem?"
                    },
                    {
                        "username": "lebaotoan89",
                        "content": "So can you share your reasons why you want to know their disliked reason men?\\n"
                    },
                    {
                        "username": "amestri890",
                        "content": "return [int(i) for i in str(int(\"\".join([str(x) for x in nums]))+1)]"
                    }
                ]
            },
            {
                "id": 1570218,
                "content": [
                    {
                        "username": "ravih19",
                        "content": "Guys!! Try solving the problem using 3 cases.\\na) Considering all the values are 9.\\nb) Considering the last digit is not 9.\\nc) Considering the last digit is 9.\\nThis will make the coding a bit easy for you"
                    },
                    {
                        "username": "Anuj_Nandal_",
                        "content": "what will be the solution for case a and c bro? will it be 10 or (1,0)  ---> last digit?"
                    },
                    {
                        "username": "grifmang",
                        "content": "`return [int(x) for x in str(int(\\'\\'.join(map(str, digits))) + 1)]`"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "8755600408",
                        "content": "perfect\\n"
                    },
                    {
                        "username": "soumyajit_0",
                        "content": "Why is the discussion section filled with people flexing their one liners?"
                    },
                    {
                        "username": "ajaykathrotiya1819",
                        "content": "ans=\\'\\'.join(str(i) for i in digits)\\nans=int(ans)+1 \\nreturn list(str(ans))"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "the leetcode interpreter is doing a shitty job, although my code works perfectly in visual code studio, here it\\'s showing a different answer"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "        plusone = digits[-1] + 1\\n        if len(str(plusone)) > 1:\\n            digits.pop()\\n            for i in str(plusone):\\n                digits.append(int(i))\\n        else:\\n            digits[-1] = plusone\\n        return digits\\n        # this is the code"
                    },
                    {
                        "username": "cyborg_king",
                        "content": "just consider it a basic sum problem,\\nhow a child add two multiple digit no.,\\nwhenever sum of two nos. exceeds 9, we used to carry forward 1.\\nRun a loop over the elements/digits of the list/array if carry for. is required. and return the result"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "This isn\\'t an easy problem man ;) \\nnearly took 2-3 days to get to the logic in a right way  cheers ;) "
                    },
                    {
                        "username": "Omar211",
                        "content": "//why it is not working??\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n           \\n        int[] result = new int[digits.length];\\n        for (int i = 0; i < result.length; i++) {\\n            result[i] = digits[i];\\n        }\\n       if (result[result.length-1] == 9) {\\n        result[result.length-1] = 0;\\n        result[result.length-2] = result[result.length-2]+1;\\n       }\\n        else\\n        result[result.length-1]+=1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "GUSTAVOS07",
                        "content": "because it gets to a point where there is no element at result.length-2 and you should add another number to the list like 9  -> 10 to solve it you need to check if result.length-2 is >= 0 "
                    },
                    {
                        "username": "james_leetcode_2050",
                        "content": "For those who disliked, can you please share your reasons why you disliked this problem?"
                    },
                    {
                        "username": "lebaotoan89",
                        "content": "So can you share your reasons why you want to know their disliked reason men?\\n"
                    },
                    {
                        "username": "amestri890",
                        "content": "return [int(i) for i in str(int(\"\".join([str(x) for x in nums]))+1)]"
                    }
                ]
            },
            {
                "id": 1953534,
                "content": [
                    {
                        "username": "ravih19",
                        "content": "Guys!! Try solving the problem using 3 cases.\\na) Considering all the values are 9.\\nb) Considering the last digit is not 9.\\nc) Considering the last digit is 9.\\nThis will make the coding a bit easy for you"
                    },
                    {
                        "username": "Anuj_Nandal_",
                        "content": "what will be the solution for case a and c bro? will it be 10 or (1,0)  ---> last digit?"
                    },
                    {
                        "username": "grifmang",
                        "content": "`return [int(x) for x in str(int(\\'\\'.join(map(str, digits))) + 1)]`"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "8755600408",
                        "content": "perfect\\n"
                    },
                    {
                        "username": "soumyajit_0",
                        "content": "Why is the discussion section filled with people flexing their one liners?"
                    },
                    {
                        "username": "ajaykathrotiya1819",
                        "content": "ans=\\'\\'.join(str(i) for i in digits)\\nans=int(ans)+1 \\nreturn list(str(ans))"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "the leetcode interpreter is doing a shitty job, although my code works perfectly in visual code studio, here it\\'s showing a different answer"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "        plusone = digits[-1] + 1\\n        if len(str(plusone)) > 1:\\n            digits.pop()\\n            for i in str(plusone):\\n                digits.append(int(i))\\n        else:\\n            digits[-1] = plusone\\n        return digits\\n        # this is the code"
                    },
                    {
                        "username": "cyborg_king",
                        "content": "just consider it a basic sum problem,\\nhow a child add two multiple digit no.,\\nwhenever sum of two nos. exceeds 9, we used to carry forward 1.\\nRun a loop over the elements/digits of the list/array if carry for. is required. and return the result"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "This isn\\'t an easy problem man ;) \\nnearly took 2-3 days to get to the logic in a right way  cheers ;) "
                    },
                    {
                        "username": "Omar211",
                        "content": "//why it is not working??\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n           \\n        int[] result = new int[digits.length];\\n        for (int i = 0; i < result.length; i++) {\\n            result[i] = digits[i];\\n        }\\n       if (result[result.length-1] == 9) {\\n        result[result.length-1] = 0;\\n        result[result.length-2] = result[result.length-2]+1;\\n       }\\n        else\\n        result[result.length-1]+=1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "GUSTAVOS07",
                        "content": "because it gets to a point where there is no element at result.length-2 and you should add another number to the list like 9  -> 10 to solve it you need to check if result.length-2 is >= 0 "
                    },
                    {
                        "username": "james_leetcode_2050",
                        "content": "For those who disliked, can you please share your reasons why you disliked this problem?"
                    },
                    {
                        "username": "lebaotoan89",
                        "content": "So can you share your reasons why you want to know their disliked reason men?\\n"
                    },
                    {
                        "username": "amestri890",
                        "content": "return [int(i) for i in str(int(\"\".join([str(x) for x in nums]))+1)]"
                    }
                ]
            },
            {
                "id": 1570820,
                "content": [
                    {
                        "username": "ravih19",
                        "content": "Guys!! Try solving the problem using 3 cases.\\na) Considering all the values are 9.\\nb) Considering the last digit is not 9.\\nc) Considering the last digit is 9.\\nThis will make the coding a bit easy for you"
                    },
                    {
                        "username": "Anuj_Nandal_",
                        "content": "what will be the solution for case a and c bro? will it be 10 or (1,0)  ---> last digit?"
                    },
                    {
                        "username": "grifmang",
                        "content": "`return [int(x) for x in str(int(\\'\\'.join(map(str, digits))) + 1)]`"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "8755600408",
                        "content": "perfect\\n"
                    },
                    {
                        "username": "soumyajit_0",
                        "content": "Why is the discussion section filled with people flexing their one liners?"
                    },
                    {
                        "username": "ajaykathrotiya1819",
                        "content": "ans=\\'\\'.join(str(i) for i in digits)\\nans=int(ans)+1 \\nreturn list(str(ans))"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "the leetcode interpreter is doing a shitty job, although my code works perfectly in visual code studio, here it\\'s showing a different answer"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "        plusone = digits[-1] + 1\\n        if len(str(plusone)) > 1:\\n            digits.pop()\\n            for i in str(plusone):\\n                digits.append(int(i))\\n        else:\\n            digits[-1] = plusone\\n        return digits\\n        # this is the code"
                    },
                    {
                        "username": "cyborg_king",
                        "content": "just consider it a basic sum problem,\\nhow a child add two multiple digit no.,\\nwhenever sum of two nos. exceeds 9, we used to carry forward 1.\\nRun a loop over the elements/digits of the list/array if carry for. is required. and return the result"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "This isn\\'t an easy problem man ;) \\nnearly took 2-3 days to get to the logic in a right way  cheers ;) "
                    },
                    {
                        "username": "Omar211",
                        "content": "//why it is not working??\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n           \\n        int[] result = new int[digits.length];\\n        for (int i = 0; i < result.length; i++) {\\n            result[i] = digits[i];\\n        }\\n       if (result[result.length-1] == 9) {\\n        result[result.length-1] = 0;\\n        result[result.length-2] = result[result.length-2]+1;\\n       }\\n        else\\n        result[result.length-1]+=1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "GUSTAVOS07",
                        "content": "because it gets to a point where there is no element at result.length-2 and you should add another number to the list like 9  -> 10 to solve it you need to check if result.length-2 is >= 0 "
                    },
                    {
                        "username": "james_leetcode_2050",
                        "content": "For those who disliked, can you please share your reasons why you disliked this problem?"
                    },
                    {
                        "username": "lebaotoan89",
                        "content": "So can you share your reasons why you want to know their disliked reason men?\\n"
                    },
                    {
                        "username": "amestri890",
                        "content": "return [int(i) for i in str(int(\"\".join([str(x) for x in nums]))+1)]"
                    }
                ]
            },
            {
                "id": 2028655,
                "content": [
                    {
                        "username": "ravih19",
                        "content": "Guys!! Try solving the problem using 3 cases.\\na) Considering all the values are 9.\\nb) Considering the last digit is not 9.\\nc) Considering the last digit is 9.\\nThis will make the coding a bit easy for you"
                    },
                    {
                        "username": "Anuj_Nandal_",
                        "content": "what will be the solution for case a and c bro? will it be 10 or (1,0)  ---> last digit?"
                    },
                    {
                        "username": "grifmang",
                        "content": "`return [int(x) for x in str(int(\\'\\'.join(map(str, digits))) + 1)]`"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "8755600408",
                        "content": "perfect\\n"
                    },
                    {
                        "username": "soumyajit_0",
                        "content": "Why is the discussion section filled with people flexing their one liners?"
                    },
                    {
                        "username": "ajaykathrotiya1819",
                        "content": "ans=\\'\\'.join(str(i) for i in digits)\\nans=int(ans)+1 \\nreturn list(str(ans))"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "the leetcode interpreter is doing a shitty job, although my code works perfectly in visual code studio, here it\\'s showing a different answer"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "        plusone = digits[-1] + 1\\n        if len(str(plusone)) > 1:\\n            digits.pop()\\n            for i in str(plusone):\\n                digits.append(int(i))\\n        else:\\n            digits[-1] = plusone\\n        return digits\\n        # this is the code"
                    },
                    {
                        "username": "cyborg_king",
                        "content": "just consider it a basic sum problem,\\nhow a child add two multiple digit no.,\\nwhenever sum of two nos. exceeds 9, we used to carry forward 1.\\nRun a loop over the elements/digits of the list/array if carry for. is required. and return the result"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "This isn\\'t an easy problem man ;) \\nnearly took 2-3 days to get to the logic in a right way  cheers ;) "
                    },
                    {
                        "username": "Omar211",
                        "content": "//why it is not working??\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n           \\n        int[] result = new int[digits.length];\\n        for (int i = 0; i < result.length; i++) {\\n            result[i] = digits[i];\\n        }\\n       if (result[result.length-1] == 9) {\\n        result[result.length-1] = 0;\\n        result[result.length-2] = result[result.length-2]+1;\\n       }\\n        else\\n        result[result.length-1]+=1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "GUSTAVOS07",
                        "content": "because it gets to a point where there is no element at result.length-2 and you should add another number to the list like 9  -> 10 to solve it you need to check if result.length-2 is >= 0 "
                    },
                    {
                        "username": "james_leetcode_2050",
                        "content": "For those who disliked, can you please share your reasons why you disliked this problem?"
                    },
                    {
                        "username": "lebaotoan89",
                        "content": "So can you share your reasons why you want to know their disliked reason men?\\n"
                    },
                    {
                        "username": "amestri890",
                        "content": "return [int(i) for i in str(int(\"\".join([str(x) for x in nums]))+1)]"
                    }
                ]
            },
            {
                "id": 1729564,
                "content": [
                    {
                        "username": "ravih19",
                        "content": "Guys!! Try solving the problem using 3 cases.\\na) Considering all the values are 9.\\nb) Considering the last digit is not 9.\\nc) Considering the last digit is 9.\\nThis will make the coding a bit easy for you"
                    },
                    {
                        "username": "Anuj_Nandal_",
                        "content": "what will be the solution for case a and c bro? will it be 10 or (1,0)  ---> last digit?"
                    },
                    {
                        "username": "grifmang",
                        "content": "`return [int(x) for x in str(int(\\'\\'.join(map(str, digits))) + 1)]`"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "8755600408",
                        "content": "perfect\\n"
                    },
                    {
                        "username": "soumyajit_0",
                        "content": "Why is the discussion section filled with people flexing their one liners?"
                    },
                    {
                        "username": "ajaykathrotiya1819",
                        "content": "ans=\\'\\'.join(str(i) for i in digits)\\nans=int(ans)+1 \\nreturn list(str(ans))"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "the leetcode interpreter is doing a shitty job, although my code works perfectly in visual code studio, here it\\'s showing a different answer"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "        plusone = digits[-1] + 1\\n        if len(str(plusone)) > 1:\\n            digits.pop()\\n            for i in str(plusone):\\n                digits.append(int(i))\\n        else:\\n            digits[-1] = plusone\\n        return digits\\n        # this is the code"
                    },
                    {
                        "username": "cyborg_king",
                        "content": "just consider it a basic sum problem,\\nhow a child add two multiple digit no.,\\nwhenever sum of two nos. exceeds 9, we used to carry forward 1.\\nRun a loop over the elements/digits of the list/array if carry for. is required. and return the result"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "This isn\\'t an easy problem man ;) \\nnearly took 2-3 days to get to the logic in a right way  cheers ;) "
                    },
                    {
                        "username": "Omar211",
                        "content": "//why it is not working??\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n           \\n        int[] result = new int[digits.length];\\n        for (int i = 0; i < result.length; i++) {\\n            result[i] = digits[i];\\n        }\\n       if (result[result.length-1] == 9) {\\n        result[result.length-1] = 0;\\n        result[result.length-2] = result[result.length-2]+1;\\n       }\\n        else\\n        result[result.length-1]+=1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "GUSTAVOS07",
                        "content": "because it gets to a point where there is no element at result.length-2 and you should add another number to the list like 9  -> 10 to solve it you need to check if result.length-2 is >= 0 "
                    },
                    {
                        "username": "james_leetcode_2050",
                        "content": "For those who disliked, can you please share your reasons why you disliked this problem?"
                    },
                    {
                        "username": "lebaotoan89",
                        "content": "So can you share your reasons why you want to know their disliked reason men?\\n"
                    },
                    {
                        "username": "amestri890",
                        "content": "return [int(i) for i in str(int(\"\".join([str(x) for x in nums]))+1)]"
                    }
                ]
            },
            {
                "id": 1718343,
                "content": [
                    {
                        "username": "ravih19",
                        "content": "Guys!! Try solving the problem using 3 cases.\\na) Considering all the values are 9.\\nb) Considering the last digit is not 9.\\nc) Considering the last digit is 9.\\nThis will make the coding a bit easy for you"
                    },
                    {
                        "username": "Anuj_Nandal_",
                        "content": "what will be the solution for case a and c bro? will it be 10 or (1,0)  ---> last digit?"
                    },
                    {
                        "username": "grifmang",
                        "content": "`return [int(x) for x in str(int(\\'\\'.join(map(str, digits))) + 1)]`"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "8755600408",
                        "content": "perfect\\n"
                    },
                    {
                        "username": "soumyajit_0",
                        "content": "Why is the discussion section filled with people flexing their one liners?"
                    },
                    {
                        "username": "ajaykathrotiya1819",
                        "content": "ans=\\'\\'.join(str(i) for i in digits)\\nans=int(ans)+1 \\nreturn list(str(ans))"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "the leetcode interpreter is doing a shitty job, although my code works perfectly in visual code studio, here it\\'s showing a different answer"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "        plusone = digits[-1] + 1\\n        if len(str(plusone)) > 1:\\n            digits.pop()\\n            for i in str(plusone):\\n                digits.append(int(i))\\n        else:\\n            digits[-1] = plusone\\n        return digits\\n        # this is the code"
                    },
                    {
                        "username": "cyborg_king",
                        "content": "just consider it a basic sum problem,\\nhow a child add two multiple digit no.,\\nwhenever sum of two nos. exceeds 9, we used to carry forward 1.\\nRun a loop over the elements/digits of the list/array if carry for. is required. and return the result"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "This isn\\'t an easy problem man ;) \\nnearly took 2-3 days to get to the logic in a right way  cheers ;) "
                    },
                    {
                        "username": "Omar211",
                        "content": "//why it is not working??\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n           \\n        int[] result = new int[digits.length];\\n        for (int i = 0; i < result.length; i++) {\\n            result[i] = digits[i];\\n        }\\n       if (result[result.length-1] == 9) {\\n        result[result.length-1] = 0;\\n        result[result.length-2] = result[result.length-2]+1;\\n       }\\n        else\\n        result[result.length-1]+=1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "GUSTAVOS07",
                        "content": "because it gets to a point where there is no element at result.length-2 and you should add another number to the list like 9  -> 10 to solve it you need to check if result.length-2 is >= 0 "
                    },
                    {
                        "username": "james_leetcode_2050",
                        "content": "For those who disliked, can you please share your reasons why you disliked this problem?"
                    },
                    {
                        "username": "lebaotoan89",
                        "content": "So can you share your reasons why you want to know their disliked reason men?\\n"
                    },
                    {
                        "username": "amestri890",
                        "content": "return [int(i) for i in str(int(\"\".join([str(x) for x in nums]))+1)]"
                    }
                ]
            },
            {
                "id": 1625339,
                "content": [
                    {
                        "username": "ravih19",
                        "content": "Guys!! Try solving the problem using 3 cases.\\na) Considering all the values are 9.\\nb) Considering the last digit is not 9.\\nc) Considering the last digit is 9.\\nThis will make the coding a bit easy for you"
                    },
                    {
                        "username": "Anuj_Nandal_",
                        "content": "what will be the solution for case a and c bro? will it be 10 or (1,0)  ---> last digit?"
                    },
                    {
                        "username": "grifmang",
                        "content": "`return [int(x) for x in str(int(\\'\\'.join(map(str, digits))) + 1)]`"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "8755600408",
                        "content": "perfect\\n"
                    },
                    {
                        "username": "soumyajit_0",
                        "content": "Why is the discussion section filled with people flexing their one liners?"
                    },
                    {
                        "username": "ajaykathrotiya1819",
                        "content": "ans=\\'\\'.join(str(i) for i in digits)\\nans=int(ans)+1 \\nreturn list(str(ans))"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "the leetcode interpreter is doing a shitty job, although my code works perfectly in visual code studio, here it\\'s showing a different answer"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "        plusone = digits[-1] + 1\\n        if len(str(plusone)) > 1:\\n            digits.pop()\\n            for i in str(plusone):\\n                digits.append(int(i))\\n        else:\\n            digits[-1] = plusone\\n        return digits\\n        # this is the code"
                    },
                    {
                        "username": "cyborg_king",
                        "content": "just consider it a basic sum problem,\\nhow a child add two multiple digit no.,\\nwhenever sum of two nos. exceeds 9, we used to carry forward 1.\\nRun a loop over the elements/digits of the list/array if carry for. is required. and return the result"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "This isn\\'t an easy problem man ;) \\nnearly took 2-3 days to get to the logic in a right way  cheers ;) "
                    },
                    {
                        "username": "Omar211",
                        "content": "//why it is not working??\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n           \\n        int[] result = new int[digits.length];\\n        for (int i = 0; i < result.length; i++) {\\n            result[i] = digits[i];\\n        }\\n       if (result[result.length-1] == 9) {\\n        result[result.length-1] = 0;\\n        result[result.length-2] = result[result.length-2]+1;\\n       }\\n        else\\n        result[result.length-1]+=1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "GUSTAVOS07",
                        "content": "because it gets to a point where there is no element at result.length-2 and you should add another number to the list like 9  -> 10 to solve it you need to check if result.length-2 is >= 0 "
                    },
                    {
                        "username": "james_leetcode_2050",
                        "content": "For those who disliked, can you please share your reasons why you disliked this problem?"
                    },
                    {
                        "username": "lebaotoan89",
                        "content": "So can you share your reasons why you want to know their disliked reason men?\\n"
                    },
                    {
                        "username": "amestri890",
                        "content": "return [int(i) for i in str(int(\"\".join([str(x) for x in nums]))+1)]"
                    }
                ]
            },
            {
                "id": 1573484,
                "content": [
                    {
                        "username": "ravih19",
                        "content": "Guys!! Try solving the problem using 3 cases.\\na) Considering all the values are 9.\\nb) Considering the last digit is not 9.\\nc) Considering the last digit is 9.\\nThis will make the coding a bit easy for you"
                    },
                    {
                        "username": "Anuj_Nandal_",
                        "content": "what will be the solution for case a and c bro? will it be 10 or (1,0)  ---> last digit?"
                    },
                    {
                        "username": "grifmang",
                        "content": "`return [int(x) for x in str(int(\\'\\'.join(map(str, digits))) + 1)]`"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "8755600408",
                        "content": "perfect\\n"
                    },
                    {
                        "username": "soumyajit_0",
                        "content": "Why is the discussion section filled with people flexing their one liners?"
                    },
                    {
                        "username": "ajaykathrotiya1819",
                        "content": "ans=\\'\\'.join(str(i) for i in digits)\\nans=int(ans)+1 \\nreturn list(str(ans))"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "the leetcode interpreter is doing a shitty job, although my code works perfectly in visual code studio, here it\\'s showing a different answer"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "        plusone = digits[-1] + 1\\n        if len(str(plusone)) > 1:\\n            digits.pop()\\n            for i in str(plusone):\\n                digits.append(int(i))\\n        else:\\n            digits[-1] = plusone\\n        return digits\\n        # this is the code"
                    },
                    {
                        "username": "cyborg_king",
                        "content": "just consider it a basic sum problem,\\nhow a child add two multiple digit no.,\\nwhenever sum of two nos. exceeds 9, we used to carry forward 1.\\nRun a loop over the elements/digits of the list/array if carry for. is required. and return the result"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "This isn\\'t an easy problem man ;) \\nnearly took 2-3 days to get to the logic in a right way  cheers ;) "
                    },
                    {
                        "username": "Omar211",
                        "content": "//why it is not working??\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n           \\n        int[] result = new int[digits.length];\\n        for (int i = 0; i < result.length; i++) {\\n            result[i] = digits[i];\\n        }\\n       if (result[result.length-1] == 9) {\\n        result[result.length-1] = 0;\\n        result[result.length-2] = result[result.length-2]+1;\\n       }\\n        else\\n        result[result.length-1]+=1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "GUSTAVOS07",
                        "content": "because it gets to a point where there is no element at result.length-2 and you should add another number to the list like 9  -> 10 to solve it you need to check if result.length-2 is >= 0 "
                    },
                    {
                        "username": "james_leetcode_2050",
                        "content": "For those who disliked, can you please share your reasons why you disliked this problem?"
                    },
                    {
                        "username": "lebaotoan89",
                        "content": "So can you share your reasons why you want to know their disliked reason men?\\n"
                    },
                    {
                        "username": "amestri890",
                        "content": "return [int(i) for i in str(int(\"\".join([str(x) for x in nums]))+1)]"
                    }
                ]
            },
            {
                "id": 1568626,
                "content": [
                    {
                        "username": "ravih19",
                        "content": "Guys!! Try solving the problem using 3 cases.\\na) Considering all the values are 9.\\nb) Considering the last digit is not 9.\\nc) Considering the last digit is 9.\\nThis will make the coding a bit easy for you"
                    },
                    {
                        "username": "Anuj_Nandal_",
                        "content": "what will be the solution for case a and c bro? will it be 10 or (1,0)  ---> last digit?"
                    },
                    {
                        "username": "grifmang",
                        "content": "`return [int(x) for x in str(int(\\'\\'.join(map(str, digits))) + 1)]`"
                    },
                    {
                        "username": "rasam1102",
                        "content": "I'll do you one better\n`list(map(int, list(str(int(\"\".join(map(str, digits))) + 1))))`"
                    },
                    {
                        "username": "8755600408",
                        "content": "perfect\\n"
                    },
                    {
                        "username": "soumyajit_0",
                        "content": "Why is the discussion section filled with people flexing their one liners?"
                    },
                    {
                        "username": "ajaykathrotiya1819",
                        "content": "ans=\\'\\'.join(str(i) for i in digits)\\nans=int(ans)+1 \\nreturn list(str(ans))"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "the leetcode interpreter is doing a shitty job, although my code works perfectly in visual code studio, here it\\'s showing a different answer"
                    },
                    {
                        "username": "ExPLICIT_27",
                        "content": "        plusone = digits[-1] + 1\\n        if len(str(plusone)) > 1:\\n            digits.pop()\\n            for i in str(plusone):\\n                digits.append(int(i))\\n        else:\\n            digits[-1] = plusone\\n        return digits\\n        # this is the code"
                    },
                    {
                        "username": "cyborg_king",
                        "content": "just consider it a basic sum problem,\\nhow a child add two multiple digit no.,\\nwhenever sum of two nos. exceeds 9, we used to carry forward 1.\\nRun a loop over the elements/digits of the list/array if carry for. is required. and return the result"
                    },
                    {
                        "username": "ShashidharAngadi",
                        "content": "This isn\\'t an easy problem man ;) \\nnearly took 2-3 days to get to the logic in a right way  cheers ;) "
                    },
                    {
                        "username": "Omar211",
                        "content": "//why it is not working??\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n           \\n        int[] result = new int[digits.length];\\n        for (int i = 0; i < result.length; i++) {\\n            result[i] = digits[i];\\n        }\\n       if (result[result.length-1] == 9) {\\n        result[result.length-1] = 0;\\n        result[result.length-2] = result[result.length-2]+1;\\n       }\\n        else\\n        result[result.length-1]+=1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "GUSTAVOS07",
                        "content": "because it gets to a point where there is no element at result.length-2 and you should add another number to the list like 9  -> 10 to solve it you need to check if result.length-2 is >= 0 "
                    },
                    {
                        "username": "james_leetcode_2050",
                        "content": "For those who disliked, can you please share your reasons why you disliked this problem?"
                    },
                    {
                        "username": "lebaotoan89",
                        "content": "So can you share your reasons why you want to know their disliked reason men?\\n"
                    },
                    {
                        "username": "amestri890",
                        "content": "return [int(i) for i in str(int(\"\".join([str(x) for x in nums]))+1)]"
                    }
                ]
            },
            {
                "id": 1998273,
                "content": [
                    {
                        "username": "elias_matar",
                        "content": "So much unnecessary computation being discussed.\\nStart from the end of the array and keep checking if the number is 9. As long as it is, replace it with 0.\\nAs soon as it isn\\'t 9, increment the current number with 1 and return the array.\\nIt is worth noting that the array should be expanded if the input is something like [9,9,9]."
                    },
                    {
                        "username": "hariharan94421",
                        "content": "you should not say the direct solution bro "
                    },
                    {
                        "username": "wadebutler",
                        "content": "I didn\\'t know BigInt() was a thing thank you comment section!"
                    },
                    {
                        "username": "BatMe",
                        "content": "      `        reverse(digits.begin(),digits.end());\\n\\n        int digit; int sum = 1; int carry = 0;\\n        vector<int>v;\\n\\n        for(int i = 0; i<digits.size();i++){\\n            sum+=digits[i]+carry;\\n\\n            if(sum == 0){\\n                v.push_back(digits[i]);\\n            }\\n            else{\\n            while(sum!=0){\\n                digit = sum%10;\\n                v.push_back(digit);\\n                carry = sum/10;\\n                sum = sum/10;\\n            }\\n            }\\n            \\n        }\\n\\n        reverse(v.begin(),v.end());\\n        return v; `\\n\\n\\nThis code is not working on the test case [9,9] help me what I need to change? One thing I notices is that in this case, sum!=0 thus 1 is pushed before which should instead be used as a carry. But i don\\'t know how to change it. "
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "undefitied",
                        "content": "Some Javascript:\\n1. Simple code:\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    let index = digits.length-1\\n    while (digits[index] === 9) {\\n        digits[index] = 0\\n        index--\\n    }\\n    \\n    if (index === -1) {\\n        digits.unshift(1)\\n    } else {\\n        digits[index]++        \\n    }\\n    \\n    return digits\\n};\\n```\\n2. Faster code, same principle\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    if (digits[digits.length-1] === 9) {\\n        for (let i = digits.length-1; i>=0; i--) {\\n            const num = digits[i]\\n            if (num === 9) {\\n                digits[i] = 0\\n                carryOver = 1\\n            } else {\\n                digits[i] = num+carryOver\\n                carryOver = 0\\n                break\\n            }\\n        }\\n    } else {\\n        digits[digits.length-1]++\\n    }\\n    \\n    if (carryOver === 0) {\\n        return digits\\n    }\\n    \\n    digits.unshift(carryOver)\\n    \\n    return digits\\n};\\n```"
                    },
                    {
                        "username": "joycesmiling_leetcode",
                        "content": "Use python map\\n\\nnum = int(\\'\\'.join(map(str, digits))) + 1\\nreturn list(map(int,str(num)))"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "[int(i) for i in str(int(''.join([str(i) for i in digits])) + 1)] "
                    },
                    {
                        "username": "MiaMiaJin",
                        "content": "s = \\'\\'.join(map(str,digits))\\ni = int(s)+1\\nreturn list(map(int, str(i)))"
                    },
                    {
                        "username": "ClarieZHANG",
                        "content": "import math\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        math.floor(math.sqrt(x))"
                    },
                    {
                        "username": "themashcode",
                        "content": "const plusOne = digits => (BigInt(digits.join(\\'\\')) + 1n).toString().split(\\'\\')\\n"
                    },
                    {
                        "username": "PK071",
                        "content": "Why not use this.\\n\\nreturn list(str(int(\\'\\'.join([str(i) for i in digits]))+1))"
                    }
                ]
            },
            {
                "id": 1996383,
                "content": [
                    {
                        "username": "elias_matar",
                        "content": "So much unnecessary computation being discussed.\\nStart from the end of the array and keep checking if the number is 9. As long as it is, replace it with 0.\\nAs soon as it isn\\'t 9, increment the current number with 1 and return the array.\\nIt is worth noting that the array should be expanded if the input is something like [9,9,9]."
                    },
                    {
                        "username": "hariharan94421",
                        "content": "you should not say the direct solution bro "
                    },
                    {
                        "username": "wadebutler",
                        "content": "I didn\\'t know BigInt() was a thing thank you comment section!"
                    },
                    {
                        "username": "BatMe",
                        "content": "      `        reverse(digits.begin(),digits.end());\\n\\n        int digit; int sum = 1; int carry = 0;\\n        vector<int>v;\\n\\n        for(int i = 0; i<digits.size();i++){\\n            sum+=digits[i]+carry;\\n\\n            if(sum == 0){\\n                v.push_back(digits[i]);\\n            }\\n            else{\\n            while(sum!=0){\\n                digit = sum%10;\\n                v.push_back(digit);\\n                carry = sum/10;\\n                sum = sum/10;\\n            }\\n            }\\n            \\n        }\\n\\n        reverse(v.begin(),v.end());\\n        return v; `\\n\\n\\nThis code is not working on the test case [9,9] help me what I need to change? One thing I notices is that in this case, sum!=0 thus 1 is pushed before which should instead be used as a carry. But i don\\'t know how to change it. "
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "undefitied",
                        "content": "Some Javascript:\\n1. Simple code:\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    let index = digits.length-1\\n    while (digits[index] === 9) {\\n        digits[index] = 0\\n        index--\\n    }\\n    \\n    if (index === -1) {\\n        digits.unshift(1)\\n    } else {\\n        digits[index]++        \\n    }\\n    \\n    return digits\\n};\\n```\\n2. Faster code, same principle\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    if (digits[digits.length-1] === 9) {\\n        for (let i = digits.length-1; i>=0; i--) {\\n            const num = digits[i]\\n            if (num === 9) {\\n                digits[i] = 0\\n                carryOver = 1\\n            } else {\\n                digits[i] = num+carryOver\\n                carryOver = 0\\n                break\\n            }\\n        }\\n    } else {\\n        digits[digits.length-1]++\\n    }\\n    \\n    if (carryOver === 0) {\\n        return digits\\n    }\\n    \\n    digits.unshift(carryOver)\\n    \\n    return digits\\n};\\n```"
                    },
                    {
                        "username": "joycesmiling_leetcode",
                        "content": "Use python map\\n\\nnum = int(\\'\\'.join(map(str, digits))) + 1\\nreturn list(map(int,str(num)))"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "[int(i) for i in str(int(''.join([str(i) for i in digits])) + 1)] "
                    },
                    {
                        "username": "MiaMiaJin",
                        "content": "s = \\'\\'.join(map(str,digits))\\ni = int(s)+1\\nreturn list(map(int, str(i)))"
                    },
                    {
                        "username": "ClarieZHANG",
                        "content": "import math\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        math.floor(math.sqrt(x))"
                    },
                    {
                        "username": "themashcode",
                        "content": "const plusOne = digits => (BigInt(digits.join(\\'\\')) + 1n).toString().split(\\'\\')\\n"
                    },
                    {
                        "username": "PK071",
                        "content": "Why not use this.\\n\\nreturn list(str(int(\\'\\'.join([str(i) for i in digits]))+1))"
                    }
                ]
            },
            {
                "id": 1948881,
                "content": [
                    {
                        "username": "elias_matar",
                        "content": "So much unnecessary computation being discussed.\\nStart from the end of the array and keep checking if the number is 9. As long as it is, replace it with 0.\\nAs soon as it isn\\'t 9, increment the current number with 1 and return the array.\\nIt is worth noting that the array should be expanded if the input is something like [9,9,9]."
                    },
                    {
                        "username": "hariharan94421",
                        "content": "you should not say the direct solution bro "
                    },
                    {
                        "username": "wadebutler",
                        "content": "I didn\\'t know BigInt() was a thing thank you comment section!"
                    },
                    {
                        "username": "BatMe",
                        "content": "      `        reverse(digits.begin(),digits.end());\\n\\n        int digit; int sum = 1; int carry = 0;\\n        vector<int>v;\\n\\n        for(int i = 0; i<digits.size();i++){\\n            sum+=digits[i]+carry;\\n\\n            if(sum == 0){\\n                v.push_back(digits[i]);\\n            }\\n            else{\\n            while(sum!=0){\\n                digit = sum%10;\\n                v.push_back(digit);\\n                carry = sum/10;\\n                sum = sum/10;\\n            }\\n            }\\n            \\n        }\\n\\n        reverse(v.begin(),v.end());\\n        return v; `\\n\\n\\nThis code is not working on the test case [9,9] help me what I need to change? One thing I notices is that in this case, sum!=0 thus 1 is pushed before which should instead be used as a carry. But i don\\'t know how to change it. "
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "undefitied",
                        "content": "Some Javascript:\\n1. Simple code:\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    let index = digits.length-1\\n    while (digits[index] === 9) {\\n        digits[index] = 0\\n        index--\\n    }\\n    \\n    if (index === -1) {\\n        digits.unshift(1)\\n    } else {\\n        digits[index]++        \\n    }\\n    \\n    return digits\\n};\\n```\\n2. Faster code, same principle\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    if (digits[digits.length-1] === 9) {\\n        for (let i = digits.length-1; i>=0; i--) {\\n            const num = digits[i]\\n            if (num === 9) {\\n                digits[i] = 0\\n                carryOver = 1\\n            } else {\\n                digits[i] = num+carryOver\\n                carryOver = 0\\n                break\\n            }\\n        }\\n    } else {\\n        digits[digits.length-1]++\\n    }\\n    \\n    if (carryOver === 0) {\\n        return digits\\n    }\\n    \\n    digits.unshift(carryOver)\\n    \\n    return digits\\n};\\n```"
                    },
                    {
                        "username": "joycesmiling_leetcode",
                        "content": "Use python map\\n\\nnum = int(\\'\\'.join(map(str, digits))) + 1\\nreturn list(map(int,str(num)))"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "[int(i) for i in str(int(''.join([str(i) for i in digits])) + 1)] "
                    },
                    {
                        "username": "MiaMiaJin",
                        "content": "s = \\'\\'.join(map(str,digits))\\ni = int(s)+1\\nreturn list(map(int, str(i)))"
                    },
                    {
                        "username": "ClarieZHANG",
                        "content": "import math\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        math.floor(math.sqrt(x))"
                    },
                    {
                        "username": "themashcode",
                        "content": "const plusOne = digits => (BigInt(digits.join(\\'\\')) + 1n).toString().split(\\'\\')\\n"
                    },
                    {
                        "username": "PK071",
                        "content": "Why not use this.\\n\\nreturn list(str(int(\\'\\'.join([str(i) for i in digits]))+1))"
                    }
                ]
            },
            {
                "id": 1772771,
                "content": [
                    {
                        "username": "elias_matar",
                        "content": "So much unnecessary computation being discussed.\\nStart from the end of the array and keep checking if the number is 9. As long as it is, replace it with 0.\\nAs soon as it isn\\'t 9, increment the current number with 1 and return the array.\\nIt is worth noting that the array should be expanded if the input is something like [9,9,9]."
                    },
                    {
                        "username": "hariharan94421",
                        "content": "you should not say the direct solution bro "
                    },
                    {
                        "username": "wadebutler",
                        "content": "I didn\\'t know BigInt() was a thing thank you comment section!"
                    },
                    {
                        "username": "BatMe",
                        "content": "      `        reverse(digits.begin(),digits.end());\\n\\n        int digit; int sum = 1; int carry = 0;\\n        vector<int>v;\\n\\n        for(int i = 0; i<digits.size();i++){\\n            sum+=digits[i]+carry;\\n\\n            if(sum == 0){\\n                v.push_back(digits[i]);\\n            }\\n            else{\\n            while(sum!=0){\\n                digit = sum%10;\\n                v.push_back(digit);\\n                carry = sum/10;\\n                sum = sum/10;\\n            }\\n            }\\n            \\n        }\\n\\n        reverse(v.begin(),v.end());\\n        return v; `\\n\\n\\nThis code is not working on the test case [9,9] help me what I need to change? One thing I notices is that in this case, sum!=0 thus 1 is pushed before which should instead be used as a carry. But i don\\'t know how to change it. "
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "undefitied",
                        "content": "Some Javascript:\\n1. Simple code:\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    let index = digits.length-1\\n    while (digits[index] === 9) {\\n        digits[index] = 0\\n        index--\\n    }\\n    \\n    if (index === -1) {\\n        digits.unshift(1)\\n    } else {\\n        digits[index]++        \\n    }\\n    \\n    return digits\\n};\\n```\\n2. Faster code, same principle\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    if (digits[digits.length-1] === 9) {\\n        for (let i = digits.length-1; i>=0; i--) {\\n            const num = digits[i]\\n            if (num === 9) {\\n                digits[i] = 0\\n                carryOver = 1\\n            } else {\\n                digits[i] = num+carryOver\\n                carryOver = 0\\n                break\\n            }\\n        }\\n    } else {\\n        digits[digits.length-1]++\\n    }\\n    \\n    if (carryOver === 0) {\\n        return digits\\n    }\\n    \\n    digits.unshift(carryOver)\\n    \\n    return digits\\n};\\n```"
                    },
                    {
                        "username": "joycesmiling_leetcode",
                        "content": "Use python map\\n\\nnum = int(\\'\\'.join(map(str, digits))) + 1\\nreturn list(map(int,str(num)))"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "[int(i) for i in str(int(''.join([str(i) for i in digits])) + 1)] "
                    },
                    {
                        "username": "MiaMiaJin",
                        "content": "s = \\'\\'.join(map(str,digits))\\ni = int(s)+1\\nreturn list(map(int, str(i)))"
                    },
                    {
                        "username": "ClarieZHANG",
                        "content": "import math\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        math.floor(math.sqrt(x))"
                    },
                    {
                        "username": "themashcode",
                        "content": "const plusOne = digits => (BigInt(digits.join(\\'\\')) + 1n).toString().split(\\'\\')\\n"
                    },
                    {
                        "username": "PK071",
                        "content": "Why not use this.\\n\\nreturn list(str(int(\\'\\'.join([str(i) for i in digits]))+1))"
                    }
                ]
            },
            {
                "id": 1572288,
                "content": [
                    {
                        "username": "elias_matar",
                        "content": "So much unnecessary computation being discussed.\\nStart from the end of the array and keep checking if the number is 9. As long as it is, replace it with 0.\\nAs soon as it isn\\'t 9, increment the current number with 1 and return the array.\\nIt is worth noting that the array should be expanded if the input is something like [9,9,9]."
                    },
                    {
                        "username": "hariharan94421",
                        "content": "you should not say the direct solution bro "
                    },
                    {
                        "username": "wadebutler",
                        "content": "I didn\\'t know BigInt() was a thing thank you comment section!"
                    },
                    {
                        "username": "BatMe",
                        "content": "      `        reverse(digits.begin(),digits.end());\\n\\n        int digit; int sum = 1; int carry = 0;\\n        vector<int>v;\\n\\n        for(int i = 0; i<digits.size();i++){\\n            sum+=digits[i]+carry;\\n\\n            if(sum == 0){\\n                v.push_back(digits[i]);\\n            }\\n            else{\\n            while(sum!=0){\\n                digit = sum%10;\\n                v.push_back(digit);\\n                carry = sum/10;\\n                sum = sum/10;\\n            }\\n            }\\n            \\n        }\\n\\n        reverse(v.begin(),v.end());\\n        return v; `\\n\\n\\nThis code is not working on the test case [9,9] help me what I need to change? One thing I notices is that in this case, sum!=0 thus 1 is pushed before which should instead be used as a carry. But i don\\'t know how to change it. "
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "undefitied",
                        "content": "Some Javascript:\\n1. Simple code:\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    let index = digits.length-1\\n    while (digits[index] === 9) {\\n        digits[index] = 0\\n        index--\\n    }\\n    \\n    if (index === -1) {\\n        digits.unshift(1)\\n    } else {\\n        digits[index]++        \\n    }\\n    \\n    return digits\\n};\\n```\\n2. Faster code, same principle\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    if (digits[digits.length-1] === 9) {\\n        for (let i = digits.length-1; i>=0; i--) {\\n            const num = digits[i]\\n            if (num === 9) {\\n                digits[i] = 0\\n                carryOver = 1\\n            } else {\\n                digits[i] = num+carryOver\\n                carryOver = 0\\n                break\\n            }\\n        }\\n    } else {\\n        digits[digits.length-1]++\\n    }\\n    \\n    if (carryOver === 0) {\\n        return digits\\n    }\\n    \\n    digits.unshift(carryOver)\\n    \\n    return digits\\n};\\n```"
                    },
                    {
                        "username": "joycesmiling_leetcode",
                        "content": "Use python map\\n\\nnum = int(\\'\\'.join(map(str, digits))) + 1\\nreturn list(map(int,str(num)))"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "[int(i) for i in str(int(''.join([str(i) for i in digits])) + 1)] "
                    },
                    {
                        "username": "MiaMiaJin",
                        "content": "s = \\'\\'.join(map(str,digits))\\ni = int(s)+1\\nreturn list(map(int, str(i)))"
                    },
                    {
                        "username": "ClarieZHANG",
                        "content": "import math\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        math.floor(math.sqrt(x))"
                    },
                    {
                        "username": "themashcode",
                        "content": "const plusOne = digits => (BigInt(digits.join(\\'\\')) + 1n).toString().split(\\'\\')\\n"
                    },
                    {
                        "username": "PK071",
                        "content": "Why not use this.\\n\\nreturn list(str(int(\\'\\'.join([str(i) for i in digits]))+1))"
                    }
                ]
            },
            {
                "id": 1572251,
                "content": [
                    {
                        "username": "elias_matar",
                        "content": "So much unnecessary computation being discussed.\\nStart from the end of the array and keep checking if the number is 9. As long as it is, replace it with 0.\\nAs soon as it isn\\'t 9, increment the current number with 1 and return the array.\\nIt is worth noting that the array should be expanded if the input is something like [9,9,9]."
                    },
                    {
                        "username": "hariharan94421",
                        "content": "you should not say the direct solution bro "
                    },
                    {
                        "username": "wadebutler",
                        "content": "I didn\\'t know BigInt() was a thing thank you comment section!"
                    },
                    {
                        "username": "BatMe",
                        "content": "      `        reverse(digits.begin(),digits.end());\\n\\n        int digit; int sum = 1; int carry = 0;\\n        vector<int>v;\\n\\n        for(int i = 0; i<digits.size();i++){\\n            sum+=digits[i]+carry;\\n\\n            if(sum == 0){\\n                v.push_back(digits[i]);\\n            }\\n            else{\\n            while(sum!=0){\\n                digit = sum%10;\\n                v.push_back(digit);\\n                carry = sum/10;\\n                sum = sum/10;\\n            }\\n            }\\n            \\n        }\\n\\n        reverse(v.begin(),v.end());\\n        return v; `\\n\\n\\nThis code is not working on the test case [9,9] help me what I need to change? One thing I notices is that in this case, sum!=0 thus 1 is pushed before which should instead be used as a carry. But i don\\'t know how to change it. "
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "undefitied",
                        "content": "Some Javascript:\\n1. Simple code:\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    let index = digits.length-1\\n    while (digits[index] === 9) {\\n        digits[index] = 0\\n        index--\\n    }\\n    \\n    if (index === -1) {\\n        digits.unshift(1)\\n    } else {\\n        digits[index]++        \\n    }\\n    \\n    return digits\\n};\\n```\\n2. Faster code, same principle\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    if (digits[digits.length-1] === 9) {\\n        for (let i = digits.length-1; i>=0; i--) {\\n            const num = digits[i]\\n            if (num === 9) {\\n                digits[i] = 0\\n                carryOver = 1\\n            } else {\\n                digits[i] = num+carryOver\\n                carryOver = 0\\n                break\\n            }\\n        }\\n    } else {\\n        digits[digits.length-1]++\\n    }\\n    \\n    if (carryOver === 0) {\\n        return digits\\n    }\\n    \\n    digits.unshift(carryOver)\\n    \\n    return digits\\n};\\n```"
                    },
                    {
                        "username": "joycesmiling_leetcode",
                        "content": "Use python map\\n\\nnum = int(\\'\\'.join(map(str, digits))) + 1\\nreturn list(map(int,str(num)))"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "[int(i) for i in str(int(''.join([str(i) for i in digits])) + 1)] "
                    },
                    {
                        "username": "MiaMiaJin",
                        "content": "s = \\'\\'.join(map(str,digits))\\ni = int(s)+1\\nreturn list(map(int, str(i)))"
                    },
                    {
                        "username": "ClarieZHANG",
                        "content": "import math\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        math.floor(math.sqrt(x))"
                    },
                    {
                        "username": "themashcode",
                        "content": "const plusOne = digits => (BigInt(digits.join(\\'\\')) + 1n).toString().split(\\'\\')\\n"
                    },
                    {
                        "username": "PK071",
                        "content": "Why not use this.\\n\\nreturn list(str(int(\\'\\'.join([str(i) for i in digits]))+1))"
                    }
                ]
            },
            {
                "id": 1572202,
                "content": [
                    {
                        "username": "elias_matar",
                        "content": "So much unnecessary computation being discussed.\\nStart from the end of the array and keep checking if the number is 9. As long as it is, replace it with 0.\\nAs soon as it isn\\'t 9, increment the current number with 1 and return the array.\\nIt is worth noting that the array should be expanded if the input is something like [9,9,9]."
                    },
                    {
                        "username": "hariharan94421",
                        "content": "you should not say the direct solution bro "
                    },
                    {
                        "username": "wadebutler",
                        "content": "I didn\\'t know BigInt() was a thing thank you comment section!"
                    },
                    {
                        "username": "BatMe",
                        "content": "      `        reverse(digits.begin(),digits.end());\\n\\n        int digit; int sum = 1; int carry = 0;\\n        vector<int>v;\\n\\n        for(int i = 0; i<digits.size();i++){\\n            sum+=digits[i]+carry;\\n\\n            if(sum == 0){\\n                v.push_back(digits[i]);\\n            }\\n            else{\\n            while(sum!=0){\\n                digit = sum%10;\\n                v.push_back(digit);\\n                carry = sum/10;\\n                sum = sum/10;\\n            }\\n            }\\n            \\n        }\\n\\n        reverse(v.begin(),v.end());\\n        return v; `\\n\\n\\nThis code is not working on the test case [9,9] help me what I need to change? One thing I notices is that in this case, sum!=0 thus 1 is pushed before which should instead be used as a carry. But i don\\'t know how to change it. "
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "undefitied",
                        "content": "Some Javascript:\\n1. Simple code:\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    let index = digits.length-1\\n    while (digits[index] === 9) {\\n        digits[index] = 0\\n        index--\\n    }\\n    \\n    if (index === -1) {\\n        digits.unshift(1)\\n    } else {\\n        digits[index]++        \\n    }\\n    \\n    return digits\\n};\\n```\\n2. Faster code, same principle\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    if (digits[digits.length-1] === 9) {\\n        for (let i = digits.length-1; i>=0; i--) {\\n            const num = digits[i]\\n            if (num === 9) {\\n                digits[i] = 0\\n                carryOver = 1\\n            } else {\\n                digits[i] = num+carryOver\\n                carryOver = 0\\n                break\\n            }\\n        }\\n    } else {\\n        digits[digits.length-1]++\\n    }\\n    \\n    if (carryOver === 0) {\\n        return digits\\n    }\\n    \\n    digits.unshift(carryOver)\\n    \\n    return digits\\n};\\n```"
                    },
                    {
                        "username": "joycesmiling_leetcode",
                        "content": "Use python map\\n\\nnum = int(\\'\\'.join(map(str, digits))) + 1\\nreturn list(map(int,str(num)))"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "[int(i) for i in str(int(''.join([str(i) for i in digits])) + 1)] "
                    },
                    {
                        "username": "MiaMiaJin",
                        "content": "s = \\'\\'.join(map(str,digits))\\ni = int(s)+1\\nreturn list(map(int, str(i)))"
                    },
                    {
                        "username": "ClarieZHANG",
                        "content": "import math\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        math.floor(math.sqrt(x))"
                    },
                    {
                        "username": "themashcode",
                        "content": "const plusOne = digits => (BigInt(digits.join(\\'\\')) + 1n).toString().split(\\'\\')\\n"
                    },
                    {
                        "username": "PK071",
                        "content": "Why not use this.\\n\\nreturn list(str(int(\\'\\'.join([str(i) for i in digits]))+1))"
                    }
                ]
            },
            {
                "id": 1575637,
                "content": [
                    {
                        "username": "elias_matar",
                        "content": "So much unnecessary computation being discussed.\\nStart from the end of the array and keep checking if the number is 9. As long as it is, replace it with 0.\\nAs soon as it isn\\'t 9, increment the current number with 1 and return the array.\\nIt is worth noting that the array should be expanded if the input is something like [9,9,9]."
                    },
                    {
                        "username": "hariharan94421",
                        "content": "you should not say the direct solution bro "
                    },
                    {
                        "username": "wadebutler",
                        "content": "I didn\\'t know BigInt() was a thing thank you comment section!"
                    },
                    {
                        "username": "BatMe",
                        "content": "      `        reverse(digits.begin(),digits.end());\\n\\n        int digit; int sum = 1; int carry = 0;\\n        vector<int>v;\\n\\n        for(int i = 0; i<digits.size();i++){\\n            sum+=digits[i]+carry;\\n\\n            if(sum == 0){\\n                v.push_back(digits[i]);\\n            }\\n            else{\\n            while(sum!=0){\\n                digit = sum%10;\\n                v.push_back(digit);\\n                carry = sum/10;\\n                sum = sum/10;\\n            }\\n            }\\n            \\n        }\\n\\n        reverse(v.begin(),v.end());\\n        return v; `\\n\\n\\nThis code is not working on the test case [9,9] help me what I need to change? One thing I notices is that in this case, sum!=0 thus 1 is pushed before which should instead be used as a carry. But i don\\'t know how to change it. "
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "undefitied",
                        "content": "Some Javascript:\\n1. Simple code:\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    let index = digits.length-1\\n    while (digits[index] === 9) {\\n        digits[index] = 0\\n        index--\\n    }\\n    \\n    if (index === -1) {\\n        digits.unshift(1)\\n    } else {\\n        digits[index]++        \\n    }\\n    \\n    return digits\\n};\\n```\\n2. Faster code, same principle\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    if (digits[digits.length-1] === 9) {\\n        for (let i = digits.length-1; i>=0; i--) {\\n            const num = digits[i]\\n            if (num === 9) {\\n                digits[i] = 0\\n                carryOver = 1\\n            } else {\\n                digits[i] = num+carryOver\\n                carryOver = 0\\n                break\\n            }\\n        }\\n    } else {\\n        digits[digits.length-1]++\\n    }\\n    \\n    if (carryOver === 0) {\\n        return digits\\n    }\\n    \\n    digits.unshift(carryOver)\\n    \\n    return digits\\n};\\n```"
                    },
                    {
                        "username": "joycesmiling_leetcode",
                        "content": "Use python map\\n\\nnum = int(\\'\\'.join(map(str, digits))) + 1\\nreturn list(map(int,str(num)))"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "[int(i) for i in str(int(''.join([str(i) for i in digits])) + 1)] "
                    },
                    {
                        "username": "MiaMiaJin",
                        "content": "s = \\'\\'.join(map(str,digits))\\ni = int(s)+1\\nreturn list(map(int, str(i)))"
                    },
                    {
                        "username": "ClarieZHANG",
                        "content": "import math\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        math.floor(math.sqrt(x))"
                    },
                    {
                        "username": "themashcode",
                        "content": "const plusOne = digits => (BigInt(digits.join(\\'\\')) + 1n).toString().split(\\'\\')\\n"
                    },
                    {
                        "username": "PK071",
                        "content": "Why not use this.\\n\\nreturn list(str(int(\\'\\'.join([str(i) for i in digits]))+1))"
                    }
                ]
            },
            {
                "id": 1575354,
                "content": [
                    {
                        "username": "elias_matar",
                        "content": "So much unnecessary computation being discussed.\\nStart from the end of the array and keep checking if the number is 9. As long as it is, replace it with 0.\\nAs soon as it isn\\'t 9, increment the current number with 1 and return the array.\\nIt is worth noting that the array should be expanded if the input is something like [9,9,9]."
                    },
                    {
                        "username": "hariharan94421",
                        "content": "you should not say the direct solution bro "
                    },
                    {
                        "username": "wadebutler",
                        "content": "I didn\\'t know BigInt() was a thing thank you comment section!"
                    },
                    {
                        "username": "BatMe",
                        "content": "      `        reverse(digits.begin(),digits.end());\\n\\n        int digit; int sum = 1; int carry = 0;\\n        vector<int>v;\\n\\n        for(int i = 0; i<digits.size();i++){\\n            sum+=digits[i]+carry;\\n\\n            if(sum == 0){\\n                v.push_back(digits[i]);\\n            }\\n            else{\\n            while(sum!=0){\\n                digit = sum%10;\\n                v.push_back(digit);\\n                carry = sum/10;\\n                sum = sum/10;\\n            }\\n            }\\n            \\n        }\\n\\n        reverse(v.begin(),v.end());\\n        return v; `\\n\\n\\nThis code is not working on the test case [9,9] help me what I need to change? One thing I notices is that in this case, sum!=0 thus 1 is pushed before which should instead be used as a carry. But i don\\'t know how to change it. "
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "undefitied",
                        "content": "Some Javascript:\\n1. Simple code:\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    let index = digits.length-1\\n    while (digits[index] === 9) {\\n        digits[index] = 0\\n        index--\\n    }\\n    \\n    if (index === -1) {\\n        digits.unshift(1)\\n    } else {\\n        digits[index]++        \\n    }\\n    \\n    return digits\\n};\\n```\\n2. Faster code, same principle\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    if (digits[digits.length-1] === 9) {\\n        for (let i = digits.length-1; i>=0; i--) {\\n            const num = digits[i]\\n            if (num === 9) {\\n                digits[i] = 0\\n                carryOver = 1\\n            } else {\\n                digits[i] = num+carryOver\\n                carryOver = 0\\n                break\\n            }\\n        }\\n    } else {\\n        digits[digits.length-1]++\\n    }\\n    \\n    if (carryOver === 0) {\\n        return digits\\n    }\\n    \\n    digits.unshift(carryOver)\\n    \\n    return digits\\n};\\n```"
                    },
                    {
                        "username": "joycesmiling_leetcode",
                        "content": "Use python map\\n\\nnum = int(\\'\\'.join(map(str, digits))) + 1\\nreturn list(map(int,str(num)))"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "[int(i) for i in str(int(''.join([str(i) for i in digits])) + 1)] "
                    },
                    {
                        "username": "MiaMiaJin",
                        "content": "s = \\'\\'.join(map(str,digits))\\ni = int(s)+1\\nreturn list(map(int, str(i)))"
                    },
                    {
                        "username": "ClarieZHANG",
                        "content": "import math\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        math.floor(math.sqrt(x))"
                    },
                    {
                        "username": "themashcode",
                        "content": "const plusOne = digits => (BigInt(digits.join(\\'\\')) + 1n).toString().split(\\'\\')\\n"
                    },
                    {
                        "username": "PK071",
                        "content": "Why not use this.\\n\\nreturn list(str(int(\\'\\'.join([str(i) for i in digits]))+1))"
                    }
                ]
            },
            {
                "id": 1575298,
                "content": [
                    {
                        "username": "elias_matar",
                        "content": "So much unnecessary computation being discussed.\\nStart from the end of the array and keep checking if the number is 9. As long as it is, replace it with 0.\\nAs soon as it isn\\'t 9, increment the current number with 1 and return the array.\\nIt is worth noting that the array should be expanded if the input is something like [9,9,9]."
                    },
                    {
                        "username": "hariharan94421",
                        "content": "you should not say the direct solution bro "
                    },
                    {
                        "username": "wadebutler",
                        "content": "I didn\\'t know BigInt() was a thing thank you comment section!"
                    },
                    {
                        "username": "BatMe",
                        "content": "      `        reverse(digits.begin(),digits.end());\\n\\n        int digit; int sum = 1; int carry = 0;\\n        vector<int>v;\\n\\n        for(int i = 0; i<digits.size();i++){\\n            sum+=digits[i]+carry;\\n\\n            if(sum == 0){\\n                v.push_back(digits[i]);\\n            }\\n            else{\\n            while(sum!=0){\\n                digit = sum%10;\\n                v.push_back(digit);\\n                carry = sum/10;\\n                sum = sum/10;\\n            }\\n            }\\n            \\n        }\\n\\n        reverse(v.begin(),v.end());\\n        return v; `\\n\\n\\nThis code is not working on the test case [9,9] help me what I need to change? One thing I notices is that in this case, sum!=0 thus 1 is pushed before which should instead be used as a carry. But i don\\'t know how to change it. "
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "undefitied",
                        "content": "Some Javascript:\\n1. Simple code:\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    let index = digits.length-1\\n    while (digits[index] === 9) {\\n        digits[index] = 0\\n        index--\\n    }\\n    \\n    if (index === -1) {\\n        digits.unshift(1)\\n    } else {\\n        digits[index]++        \\n    }\\n    \\n    return digits\\n};\\n```\\n2. Faster code, same principle\\n```\\nvar plusOne = function(digits) {\\n    let carryOver = 0\\n    \\n    if (digits[digits.length-1] === 9) {\\n        for (let i = digits.length-1; i>=0; i--) {\\n            const num = digits[i]\\n            if (num === 9) {\\n                digits[i] = 0\\n                carryOver = 1\\n            } else {\\n                digits[i] = num+carryOver\\n                carryOver = 0\\n                break\\n            }\\n        }\\n    } else {\\n        digits[digits.length-1]++\\n    }\\n    \\n    if (carryOver === 0) {\\n        return digits\\n    }\\n    \\n    digits.unshift(carryOver)\\n    \\n    return digits\\n};\\n```"
                    },
                    {
                        "username": "joycesmiling_leetcode",
                        "content": "Use python map\\n\\nnum = int(\\'\\'.join(map(str, digits))) + 1\\nreturn list(map(int,str(num)))"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "[int(i) for i in str(int(''.join([str(i) for i in digits])) + 1)] "
                    },
                    {
                        "username": "MiaMiaJin",
                        "content": "s = \\'\\'.join(map(str,digits))\\ni = int(s)+1\\nreturn list(map(int, str(i)))"
                    },
                    {
                        "username": "ClarieZHANG",
                        "content": "import math\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        math.floor(math.sqrt(x))"
                    },
                    {
                        "username": "themashcode",
                        "content": "const plusOne = digits => (BigInt(digits.join(\\'\\')) + 1n).toString().split(\\'\\')\\n"
                    },
                    {
                        "username": "PK071",
                        "content": "Why not use this.\\n\\nreturn list(str(int(\\'\\'.join([str(i) for i in digits]))+1))"
                    }
                ]
            },
            {
                "id": 1571908,
                "content": [
                    {
                        "username": "desileetcoders",
                        "content": "Same as question"
                    },
                    {
                        "username": "Architag1503",
                        "content": "//In this solution we apply concept of add two arrays.\\n\\nclass Solution {\\n\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n//So we make the another vector which have value 1.\\n        vector<int> z={1};\\n//there may be the carry after adding .\\n        int carry=0;\\n        int i=digits.size()-1;\\n        int j=z.size()-1;\\n//we have to start from end \\n        while(i>=0 && j>=0)\\n        {\\n            int sum=digits[i]+z[j]+carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n            j--;\\n        }\\n // after adding 1 some part other vector is left and some carry is also left.\\n        while(i>=0)\\n        {\\n            int sum = digits[i] + carry;\\n            carry = sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n        }\\n//there may be carry after ending also , so that carry is also added. Ex- [9,9]+[1]=[1,0,0]\\n        while(carry!=0)\\n        {\\n            int sum = carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n        }\\n        \\n //at last we have to reverse the vector. If we not reverse the vector ans will come wrong.\\n//Ex-  [9,9,9,1]+[1]=[2,9,9,9]--->wrong   \\n        reverse(ans.begin() , ans.end());\\n\\n        return ans;\\n        \\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "AbhishekHi",
                        "content": "`for i in  digits: \\n            if digits.append(i):\\n                return digits\\n        `\\n\\nCan anyone improve this from here? \\n        \\n        "
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=digits.size()-1;\\n       \\n            while(i>=0&&digits[i]==9){\\n             digits[i]=0;\\n             i--;\\n            }\\n            if(i<0){\\n                digits.insert(digits.begin(),1);\\n            }else{\\n                digits[i]=digits[i]+1;\\n            }\\n           return digits;\\n        }\\n    \\n};"
                    },
                    {
                        "username": "salomanjames",
                        "content": "Can anyone explain if digits = {1,2,3,9};\\nwhat will be the output???"
                    },
                    {
                        "username": "tobilarry",
                        "content": "1240 \\n\\nTry and write an algorithm in such a way you will solve it in real life scenrio"
                    },
                    {
                        "username": "rockinganshu97",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int sum=0;\\n        int n=digits.size();\\n        for(int i=0;i<n;i++){\\n            sum = sum*10 +digits[i];\\n        }\\n        sum=sum+1;\\n        for(int i=0;i<n;i++){\\n            int rev=sum%10;\\n            ans.insert(ans.begin(), rev);\\n            sum=sum/10;\\n        }\\n       return ans;\\n        \\n    }\\n};\\n\\nwhy it is not working?"
                    },
                    {
                        "username": "aaryakapoor10",
                        "content": "passed 61 /111 test case :[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]  can anyone explain?"
                    },
                    {
                        "username": "chickenTandoori",
                        "content": "Improve your test cases..!!"
                    },
                    {
                        "username": "Pranav2132",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int start=0;\\n        int t=digits[digits.size()-1];\\n        int n=digits.size();\\n        for(int i=0; i<n; i++){\\n        if(digits[i]!=t){\\n           cout<<digits[i];\\n        }\\n      }\\n        cout<<t+1; \\n    }\\n    \\n    \\n}; this is write way for beginner?\\n"
                    },
                    {
                        "username": "rohitpandey0151998",
                        "content": "very easy c++ solution\\n for(int i=digits.size()-1;i>=0;i--)\\n   {\\n       if(digits[i]<9)\\n       {\\n           digits[i]++;\\n           return digits;\\n       }\\n       else\\n       {\\n           digits[i]=0;\\n       }\\n                  \\n   }\\n   digits.push_back(0);\\n   digits[0]=1;\\n   return digits;"
                    }
                ]
            },
            {
                "id": 2075848,
                "content": [
                    {
                        "username": "desileetcoders",
                        "content": "Same as question"
                    },
                    {
                        "username": "Architag1503",
                        "content": "//In this solution we apply concept of add two arrays.\\n\\nclass Solution {\\n\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n//So we make the another vector which have value 1.\\n        vector<int> z={1};\\n//there may be the carry after adding .\\n        int carry=0;\\n        int i=digits.size()-1;\\n        int j=z.size()-1;\\n//we have to start from end \\n        while(i>=0 && j>=0)\\n        {\\n            int sum=digits[i]+z[j]+carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n            j--;\\n        }\\n // after adding 1 some part other vector is left and some carry is also left.\\n        while(i>=0)\\n        {\\n            int sum = digits[i] + carry;\\n            carry = sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n        }\\n//there may be carry after ending also , so that carry is also added. Ex- [9,9]+[1]=[1,0,0]\\n        while(carry!=0)\\n        {\\n            int sum = carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n        }\\n        \\n //at last we have to reverse the vector. If we not reverse the vector ans will come wrong.\\n//Ex-  [9,9,9,1]+[1]=[2,9,9,9]--->wrong   \\n        reverse(ans.begin() , ans.end());\\n\\n        return ans;\\n        \\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "AbhishekHi",
                        "content": "`for i in  digits: \\n            if digits.append(i):\\n                return digits\\n        `\\n\\nCan anyone improve this from here? \\n        \\n        "
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=digits.size()-1;\\n       \\n            while(i>=0&&digits[i]==9){\\n             digits[i]=0;\\n             i--;\\n            }\\n            if(i<0){\\n                digits.insert(digits.begin(),1);\\n            }else{\\n                digits[i]=digits[i]+1;\\n            }\\n           return digits;\\n        }\\n    \\n};"
                    },
                    {
                        "username": "salomanjames",
                        "content": "Can anyone explain if digits = {1,2,3,9};\\nwhat will be the output???"
                    },
                    {
                        "username": "tobilarry",
                        "content": "1240 \\n\\nTry and write an algorithm in such a way you will solve it in real life scenrio"
                    },
                    {
                        "username": "rockinganshu97",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int sum=0;\\n        int n=digits.size();\\n        for(int i=0;i<n;i++){\\n            sum = sum*10 +digits[i];\\n        }\\n        sum=sum+1;\\n        for(int i=0;i<n;i++){\\n            int rev=sum%10;\\n            ans.insert(ans.begin(), rev);\\n            sum=sum/10;\\n        }\\n       return ans;\\n        \\n    }\\n};\\n\\nwhy it is not working?"
                    },
                    {
                        "username": "aaryakapoor10",
                        "content": "passed 61 /111 test case :[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]  can anyone explain?"
                    },
                    {
                        "username": "chickenTandoori",
                        "content": "Improve your test cases..!!"
                    },
                    {
                        "username": "Pranav2132",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int start=0;\\n        int t=digits[digits.size()-1];\\n        int n=digits.size();\\n        for(int i=0; i<n; i++){\\n        if(digits[i]!=t){\\n           cout<<digits[i];\\n        }\\n      }\\n        cout<<t+1; \\n    }\\n    \\n    \\n}; this is write way for beginner?\\n"
                    },
                    {
                        "username": "rohitpandey0151998",
                        "content": "very easy c++ solution\\n for(int i=digits.size()-1;i>=0;i--)\\n   {\\n       if(digits[i]<9)\\n       {\\n           digits[i]++;\\n           return digits;\\n       }\\n       else\\n       {\\n           digits[i]=0;\\n       }\\n                  \\n   }\\n   digits.push_back(0);\\n   digits[0]=1;\\n   return digits;"
                    }
                ]
            },
            {
                "id": 2071032,
                "content": [
                    {
                        "username": "desileetcoders",
                        "content": "Same as question"
                    },
                    {
                        "username": "Architag1503",
                        "content": "//In this solution we apply concept of add two arrays.\\n\\nclass Solution {\\n\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n//So we make the another vector which have value 1.\\n        vector<int> z={1};\\n//there may be the carry after adding .\\n        int carry=0;\\n        int i=digits.size()-1;\\n        int j=z.size()-1;\\n//we have to start from end \\n        while(i>=0 && j>=0)\\n        {\\n            int sum=digits[i]+z[j]+carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n            j--;\\n        }\\n // after adding 1 some part other vector is left and some carry is also left.\\n        while(i>=0)\\n        {\\n            int sum = digits[i] + carry;\\n            carry = sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n        }\\n//there may be carry after ending also , so that carry is also added. Ex- [9,9]+[1]=[1,0,0]\\n        while(carry!=0)\\n        {\\n            int sum = carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n        }\\n        \\n //at last we have to reverse the vector. If we not reverse the vector ans will come wrong.\\n//Ex-  [9,9,9,1]+[1]=[2,9,9,9]--->wrong   \\n        reverse(ans.begin() , ans.end());\\n\\n        return ans;\\n        \\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "AbhishekHi",
                        "content": "`for i in  digits: \\n            if digits.append(i):\\n                return digits\\n        `\\n\\nCan anyone improve this from here? \\n        \\n        "
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=digits.size()-1;\\n       \\n            while(i>=0&&digits[i]==9){\\n             digits[i]=0;\\n             i--;\\n            }\\n            if(i<0){\\n                digits.insert(digits.begin(),1);\\n            }else{\\n                digits[i]=digits[i]+1;\\n            }\\n           return digits;\\n        }\\n    \\n};"
                    },
                    {
                        "username": "salomanjames",
                        "content": "Can anyone explain if digits = {1,2,3,9};\\nwhat will be the output???"
                    },
                    {
                        "username": "tobilarry",
                        "content": "1240 \\n\\nTry and write an algorithm in such a way you will solve it in real life scenrio"
                    },
                    {
                        "username": "rockinganshu97",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int sum=0;\\n        int n=digits.size();\\n        for(int i=0;i<n;i++){\\n            sum = sum*10 +digits[i];\\n        }\\n        sum=sum+1;\\n        for(int i=0;i<n;i++){\\n            int rev=sum%10;\\n            ans.insert(ans.begin(), rev);\\n            sum=sum/10;\\n        }\\n       return ans;\\n        \\n    }\\n};\\n\\nwhy it is not working?"
                    },
                    {
                        "username": "aaryakapoor10",
                        "content": "passed 61 /111 test case :[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]  can anyone explain?"
                    },
                    {
                        "username": "chickenTandoori",
                        "content": "Improve your test cases..!!"
                    },
                    {
                        "username": "Pranav2132",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int start=0;\\n        int t=digits[digits.size()-1];\\n        int n=digits.size();\\n        for(int i=0; i<n; i++){\\n        if(digits[i]!=t){\\n           cout<<digits[i];\\n        }\\n      }\\n        cout<<t+1; \\n    }\\n    \\n    \\n}; this is write way for beginner?\\n"
                    },
                    {
                        "username": "rohitpandey0151998",
                        "content": "very easy c++ solution\\n for(int i=digits.size()-1;i>=0;i--)\\n   {\\n       if(digits[i]<9)\\n       {\\n           digits[i]++;\\n           return digits;\\n       }\\n       else\\n       {\\n           digits[i]=0;\\n       }\\n                  \\n   }\\n   digits.push_back(0);\\n   digits[0]=1;\\n   return digits;"
                    }
                ]
            },
            {
                "id": 2069813,
                "content": [
                    {
                        "username": "desileetcoders",
                        "content": "Same as question"
                    },
                    {
                        "username": "Architag1503",
                        "content": "//In this solution we apply concept of add two arrays.\\n\\nclass Solution {\\n\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n//So we make the another vector which have value 1.\\n        vector<int> z={1};\\n//there may be the carry after adding .\\n        int carry=0;\\n        int i=digits.size()-1;\\n        int j=z.size()-1;\\n//we have to start from end \\n        while(i>=0 && j>=0)\\n        {\\n            int sum=digits[i]+z[j]+carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n            j--;\\n        }\\n // after adding 1 some part other vector is left and some carry is also left.\\n        while(i>=0)\\n        {\\n            int sum = digits[i] + carry;\\n            carry = sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n        }\\n//there may be carry after ending also , so that carry is also added. Ex- [9,9]+[1]=[1,0,0]\\n        while(carry!=0)\\n        {\\n            int sum = carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n        }\\n        \\n //at last we have to reverse the vector. If we not reverse the vector ans will come wrong.\\n//Ex-  [9,9,9,1]+[1]=[2,9,9,9]--->wrong   \\n        reverse(ans.begin() , ans.end());\\n\\n        return ans;\\n        \\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "AbhishekHi",
                        "content": "`for i in  digits: \\n            if digits.append(i):\\n                return digits\\n        `\\n\\nCan anyone improve this from here? \\n        \\n        "
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=digits.size()-1;\\n       \\n            while(i>=0&&digits[i]==9){\\n             digits[i]=0;\\n             i--;\\n            }\\n            if(i<0){\\n                digits.insert(digits.begin(),1);\\n            }else{\\n                digits[i]=digits[i]+1;\\n            }\\n           return digits;\\n        }\\n    \\n};"
                    },
                    {
                        "username": "salomanjames",
                        "content": "Can anyone explain if digits = {1,2,3,9};\\nwhat will be the output???"
                    },
                    {
                        "username": "tobilarry",
                        "content": "1240 \\n\\nTry and write an algorithm in such a way you will solve it in real life scenrio"
                    },
                    {
                        "username": "rockinganshu97",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int sum=0;\\n        int n=digits.size();\\n        for(int i=0;i<n;i++){\\n            sum = sum*10 +digits[i];\\n        }\\n        sum=sum+1;\\n        for(int i=0;i<n;i++){\\n            int rev=sum%10;\\n            ans.insert(ans.begin(), rev);\\n            sum=sum/10;\\n        }\\n       return ans;\\n        \\n    }\\n};\\n\\nwhy it is not working?"
                    },
                    {
                        "username": "aaryakapoor10",
                        "content": "passed 61 /111 test case :[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]  can anyone explain?"
                    },
                    {
                        "username": "chickenTandoori",
                        "content": "Improve your test cases..!!"
                    },
                    {
                        "username": "Pranav2132",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int start=0;\\n        int t=digits[digits.size()-1];\\n        int n=digits.size();\\n        for(int i=0; i<n; i++){\\n        if(digits[i]!=t){\\n           cout<<digits[i];\\n        }\\n      }\\n        cout<<t+1; \\n    }\\n    \\n    \\n}; this is write way for beginner?\\n"
                    },
                    {
                        "username": "rohitpandey0151998",
                        "content": "very easy c++ solution\\n for(int i=digits.size()-1;i>=0;i--)\\n   {\\n       if(digits[i]<9)\\n       {\\n           digits[i]++;\\n           return digits;\\n       }\\n       else\\n       {\\n           digits[i]=0;\\n       }\\n                  \\n   }\\n   digits.push_back(0);\\n   digits[0]=1;\\n   return digits;"
                    }
                ]
            },
            {
                "id": 2069121,
                "content": [
                    {
                        "username": "desileetcoders",
                        "content": "Same as question"
                    },
                    {
                        "username": "Architag1503",
                        "content": "//In this solution we apply concept of add two arrays.\\n\\nclass Solution {\\n\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n//So we make the another vector which have value 1.\\n        vector<int> z={1};\\n//there may be the carry after adding .\\n        int carry=0;\\n        int i=digits.size()-1;\\n        int j=z.size()-1;\\n//we have to start from end \\n        while(i>=0 && j>=0)\\n        {\\n            int sum=digits[i]+z[j]+carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n            j--;\\n        }\\n // after adding 1 some part other vector is left and some carry is also left.\\n        while(i>=0)\\n        {\\n            int sum = digits[i] + carry;\\n            carry = sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n        }\\n//there may be carry after ending also , so that carry is also added. Ex- [9,9]+[1]=[1,0,0]\\n        while(carry!=0)\\n        {\\n            int sum = carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n        }\\n        \\n //at last we have to reverse the vector. If we not reverse the vector ans will come wrong.\\n//Ex-  [9,9,9,1]+[1]=[2,9,9,9]--->wrong   \\n        reverse(ans.begin() , ans.end());\\n\\n        return ans;\\n        \\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "AbhishekHi",
                        "content": "`for i in  digits: \\n            if digits.append(i):\\n                return digits\\n        `\\n\\nCan anyone improve this from here? \\n        \\n        "
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=digits.size()-1;\\n       \\n            while(i>=0&&digits[i]==9){\\n             digits[i]=0;\\n             i--;\\n            }\\n            if(i<0){\\n                digits.insert(digits.begin(),1);\\n            }else{\\n                digits[i]=digits[i]+1;\\n            }\\n           return digits;\\n        }\\n    \\n};"
                    },
                    {
                        "username": "salomanjames",
                        "content": "Can anyone explain if digits = {1,2,3,9};\\nwhat will be the output???"
                    },
                    {
                        "username": "tobilarry",
                        "content": "1240 \\n\\nTry and write an algorithm in such a way you will solve it in real life scenrio"
                    },
                    {
                        "username": "rockinganshu97",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int sum=0;\\n        int n=digits.size();\\n        for(int i=0;i<n;i++){\\n            sum = sum*10 +digits[i];\\n        }\\n        sum=sum+1;\\n        for(int i=0;i<n;i++){\\n            int rev=sum%10;\\n            ans.insert(ans.begin(), rev);\\n            sum=sum/10;\\n        }\\n       return ans;\\n        \\n    }\\n};\\n\\nwhy it is not working?"
                    },
                    {
                        "username": "aaryakapoor10",
                        "content": "passed 61 /111 test case :[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]  can anyone explain?"
                    },
                    {
                        "username": "chickenTandoori",
                        "content": "Improve your test cases..!!"
                    },
                    {
                        "username": "Pranav2132",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int start=0;\\n        int t=digits[digits.size()-1];\\n        int n=digits.size();\\n        for(int i=0; i<n; i++){\\n        if(digits[i]!=t){\\n           cout<<digits[i];\\n        }\\n      }\\n        cout<<t+1; \\n    }\\n    \\n    \\n}; this is write way for beginner?\\n"
                    },
                    {
                        "username": "rohitpandey0151998",
                        "content": "very easy c++ solution\\n for(int i=digits.size()-1;i>=0;i--)\\n   {\\n       if(digits[i]<9)\\n       {\\n           digits[i]++;\\n           return digits;\\n       }\\n       else\\n       {\\n           digits[i]=0;\\n       }\\n                  \\n   }\\n   digits.push_back(0);\\n   digits[0]=1;\\n   return digits;"
                    }
                ]
            },
            {
                "id": 2067406,
                "content": [
                    {
                        "username": "desileetcoders",
                        "content": "Same as question"
                    },
                    {
                        "username": "Architag1503",
                        "content": "//In this solution we apply concept of add two arrays.\\n\\nclass Solution {\\n\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n//So we make the another vector which have value 1.\\n        vector<int> z={1};\\n//there may be the carry after adding .\\n        int carry=0;\\n        int i=digits.size()-1;\\n        int j=z.size()-1;\\n//we have to start from end \\n        while(i>=0 && j>=0)\\n        {\\n            int sum=digits[i]+z[j]+carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n            j--;\\n        }\\n // after adding 1 some part other vector is left and some carry is also left.\\n        while(i>=0)\\n        {\\n            int sum = digits[i] + carry;\\n            carry = sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n        }\\n//there may be carry after ending also , so that carry is also added. Ex- [9,9]+[1]=[1,0,0]\\n        while(carry!=0)\\n        {\\n            int sum = carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n        }\\n        \\n //at last we have to reverse the vector. If we not reverse the vector ans will come wrong.\\n//Ex-  [9,9,9,1]+[1]=[2,9,9,9]--->wrong   \\n        reverse(ans.begin() , ans.end());\\n\\n        return ans;\\n        \\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "AbhishekHi",
                        "content": "`for i in  digits: \\n            if digits.append(i):\\n                return digits\\n        `\\n\\nCan anyone improve this from here? \\n        \\n        "
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=digits.size()-1;\\n       \\n            while(i>=0&&digits[i]==9){\\n             digits[i]=0;\\n             i--;\\n            }\\n            if(i<0){\\n                digits.insert(digits.begin(),1);\\n            }else{\\n                digits[i]=digits[i]+1;\\n            }\\n           return digits;\\n        }\\n    \\n};"
                    },
                    {
                        "username": "salomanjames",
                        "content": "Can anyone explain if digits = {1,2,3,9};\\nwhat will be the output???"
                    },
                    {
                        "username": "tobilarry",
                        "content": "1240 \\n\\nTry and write an algorithm in such a way you will solve it in real life scenrio"
                    },
                    {
                        "username": "rockinganshu97",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int sum=0;\\n        int n=digits.size();\\n        for(int i=0;i<n;i++){\\n            sum = sum*10 +digits[i];\\n        }\\n        sum=sum+1;\\n        for(int i=0;i<n;i++){\\n            int rev=sum%10;\\n            ans.insert(ans.begin(), rev);\\n            sum=sum/10;\\n        }\\n       return ans;\\n        \\n    }\\n};\\n\\nwhy it is not working?"
                    },
                    {
                        "username": "aaryakapoor10",
                        "content": "passed 61 /111 test case :[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]  can anyone explain?"
                    },
                    {
                        "username": "chickenTandoori",
                        "content": "Improve your test cases..!!"
                    },
                    {
                        "username": "Pranav2132",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int start=0;\\n        int t=digits[digits.size()-1];\\n        int n=digits.size();\\n        for(int i=0; i<n; i++){\\n        if(digits[i]!=t){\\n           cout<<digits[i];\\n        }\\n      }\\n        cout<<t+1; \\n    }\\n    \\n    \\n}; this is write way for beginner?\\n"
                    },
                    {
                        "username": "rohitpandey0151998",
                        "content": "very easy c++ solution\\n for(int i=digits.size()-1;i>=0;i--)\\n   {\\n       if(digits[i]<9)\\n       {\\n           digits[i]++;\\n           return digits;\\n       }\\n       else\\n       {\\n           digits[i]=0;\\n       }\\n                  \\n   }\\n   digits.push_back(0);\\n   digits[0]=1;\\n   return digits;"
                    }
                ]
            },
            {
                "id": 2055166,
                "content": [
                    {
                        "username": "desileetcoders",
                        "content": "Same as question"
                    },
                    {
                        "username": "Architag1503",
                        "content": "//In this solution we apply concept of add two arrays.\\n\\nclass Solution {\\n\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n//So we make the another vector which have value 1.\\n        vector<int> z={1};\\n//there may be the carry after adding .\\n        int carry=0;\\n        int i=digits.size()-1;\\n        int j=z.size()-1;\\n//we have to start from end \\n        while(i>=0 && j>=0)\\n        {\\n            int sum=digits[i]+z[j]+carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n            j--;\\n        }\\n // after adding 1 some part other vector is left and some carry is also left.\\n        while(i>=0)\\n        {\\n            int sum = digits[i] + carry;\\n            carry = sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n        }\\n//there may be carry after ending also , so that carry is also added. Ex- [9,9]+[1]=[1,0,0]\\n        while(carry!=0)\\n        {\\n            int sum = carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n        }\\n        \\n //at last we have to reverse the vector. If we not reverse the vector ans will come wrong.\\n//Ex-  [9,9,9,1]+[1]=[2,9,9,9]--->wrong   \\n        reverse(ans.begin() , ans.end());\\n\\n        return ans;\\n        \\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "AbhishekHi",
                        "content": "`for i in  digits: \\n            if digits.append(i):\\n                return digits\\n        `\\n\\nCan anyone improve this from here? \\n        \\n        "
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=digits.size()-1;\\n       \\n            while(i>=0&&digits[i]==9){\\n             digits[i]=0;\\n             i--;\\n            }\\n            if(i<0){\\n                digits.insert(digits.begin(),1);\\n            }else{\\n                digits[i]=digits[i]+1;\\n            }\\n           return digits;\\n        }\\n    \\n};"
                    },
                    {
                        "username": "salomanjames",
                        "content": "Can anyone explain if digits = {1,2,3,9};\\nwhat will be the output???"
                    },
                    {
                        "username": "tobilarry",
                        "content": "1240 \\n\\nTry and write an algorithm in such a way you will solve it in real life scenrio"
                    },
                    {
                        "username": "rockinganshu97",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int sum=0;\\n        int n=digits.size();\\n        for(int i=0;i<n;i++){\\n            sum = sum*10 +digits[i];\\n        }\\n        sum=sum+1;\\n        for(int i=0;i<n;i++){\\n            int rev=sum%10;\\n            ans.insert(ans.begin(), rev);\\n            sum=sum/10;\\n        }\\n       return ans;\\n        \\n    }\\n};\\n\\nwhy it is not working?"
                    },
                    {
                        "username": "aaryakapoor10",
                        "content": "passed 61 /111 test case :[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]  can anyone explain?"
                    },
                    {
                        "username": "chickenTandoori",
                        "content": "Improve your test cases..!!"
                    },
                    {
                        "username": "Pranav2132",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int start=0;\\n        int t=digits[digits.size()-1];\\n        int n=digits.size();\\n        for(int i=0; i<n; i++){\\n        if(digits[i]!=t){\\n           cout<<digits[i];\\n        }\\n      }\\n        cout<<t+1; \\n    }\\n    \\n    \\n}; this is write way for beginner?\\n"
                    },
                    {
                        "username": "rohitpandey0151998",
                        "content": "very easy c++ solution\\n for(int i=digits.size()-1;i>=0;i--)\\n   {\\n       if(digits[i]<9)\\n       {\\n           digits[i]++;\\n           return digits;\\n       }\\n       else\\n       {\\n           digits[i]=0;\\n       }\\n                  \\n   }\\n   digits.push_back(0);\\n   digits[0]=1;\\n   return digits;"
                    }
                ]
            },
            {
                "id": 2054500,
                "content": [
                    {
                        "username": "desileetcoders",
                        "content": "Same as question"
                    },
                    {
                        "username": "Architag1503",
                        "content": "//In this solution we apply concept of add two arrays.\\n\\nclass Solution {\\n\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n//So we make the another vector which have value 1.\\n        vector<int> z={1};\\n//there may be the carry after adding .\\n        int carry=0;\\n        int i=digits.size()-1;\\n        int j=z.size()-1;\\n//we have to start from end \\n        while(i>=0 && j>=0)\\n        {\\n            int sum=digits[i]+z[j]+carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n            j--;\\n        }\\n // after adding 1 some part other vector is left and some carry is also left.\\n        while(i>=0)\\n        {\\n            int sum = digits[i] + carry;\\n            carry = sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n        }\\n//there may be carry after ending also , so that carry is also added. Ex- [9,9]+[1]=[1,0,0]\\n        while(carry!=0)\\n        {\\n            int sum = carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n        }\\n        \\n //at last we have to reverse the vector. If we not reverse the vector ans will come wrong.\\n//Ex-  [9,9,9,1]+[1]=[2,9,9,9]--->wrong   \\n        reverse(ans.begin() , ans.end());\\n\\n        return ans;\\n        \\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "AbhishekHi",
                        "content": "`for i in  digits: \\n            if digits.append(i):\\n                return digits\\n        `\\n\\nCan anyone improve this from here? \\n        \\n        "
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=digits.size()-1;\\n       \\n            while(i>=0&&digits[i]==9){\\n             digits[i]=0;\\n             i--;\\n            }\\n            if(i<0){\\n                digits.insert(digits.begin(),1);\\n            }else{\\n                digits[i]=digits[i]+1;\\n            }\\n           return digits;\\n        }\\n    \\n};"
                    },
                    {
                        "username": "salomanjames",
                        "content": "Can anyone explain if digits = {1,2,3,9};\\nwhat will be the output???"
                    },
                    {
                        "username": "tobilarry",
                        "content": "1240 \\n\\nTry and write an algorithm in such a way you will solve it in real life scenrio"
                    },
                    {
                        "username": "rockinganshu97",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int sum=0;\\n        int n=digits.size();\\n        for(int i=0;i<n;i++){\\n            sum = sum*10 +digits[i];\\n        }\\n        sum=sum+1;\\n        for(int i=0;i<n;i++){\\n            int rev=sum%10;\\n            ans.insert(ans.begin(), rev);\\n            sum=sum/10;\\n        }\\n       return ans;\\n        \\n    }\\n};\\n\\nwhy it is not working?"
                    },
                    {
                        "username": "aaryakapoor10",
                        "content": "passed 61 /111 test case :[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]  can anyone explain?"
                    },
                    {
                        "username": "chickenTandoori",
                        "content": "Improve your test cases..!!"
                    },
                    {
                        "username": "Pranav2132",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int start=0;\\n        int t=digits[digits.size()-1];\\n        int n=digits.size();\\n        for(int i=0; i<n; i++){\\n        if(digits[i]!=t){\\n           cout<<digits[i];\\n        }\\n      }\\n        cout<<t+1; \\n    }\\n    \\n    \\n}; this is write way for beginner?\\n"
                    },
                    {
                        "username": "rohitpandey0151998",
                        "content": "very easy c++ solution\\n for(int i=digits.size()-1;i>=0;i--)\\n   {\\n       if(digits[i]<9)\\n       {\\n           digits[i]++;\\n           return digits;\\n       }\\n       else\\n       {\\n           digits[i]=0;\\n       }\\n                  \\n   }\\n   digits.push_back(0);\\n   digits[0]=1;\\n   return digits;"
                    }
                ]
            },
            {
                "id": 2050421,
                "content": [
                    {
                        "username": "desileetcoders",
                        "content": "Same as question"
                    },
                    {
                        "username": "Architag1503",
                        "content": "//In this solution we apply concept of add two arrays.\\n\\nclass Solution {\\n\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n//So we make the another vector which have value 1.\\n        vector<int> z={1};\\n//there may be the carry after adding .\\n        int carry=0;\\n        int i=digits.size()-1;\\n        int j=z.size()-1;\\n//we have to start from end \\n        while(i>=0 && j>=0)\\n        {\\n            int sum=digits[i]+z[j]+carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n            j--;\\n        }\\n // after adding 1 some part other vector is left and some carry is also left.\\n        while(i>=0)\\n        {\\n            int sum = digits[i] + carry;\\n            carry = sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n        }\\n//there may be carry after ending also , so that carry is also added. Ex- [9,9]+[1]=[1,0,0]\\n        while(carry!=0)\\n        {\\n            int sum = carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n        }\\n        \\n //at last we have to reverse the vector. If we not reverse the vector ans will come wrong.\\n//Ex-  [9,9,9,1]+[1]=[2,9,9,9]--->wrong   \\n        reverse(ans.begin() , ans.end());\\n\\n        return ans;\\n        \\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "AbhishekHi",
                        "content": "`for i in  digits: \\n            if digits.append(i):\\n                return digits\\n        `\\n\\nCan anyone improve this from here? \\n        \\n        "
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=digits.size()-1;\\n       \\n            while(i>=0&&digits[i]==9){\\n             digits[i]=0;\\n             i--;\\n            }\\n            if(i<0){\\n                digits.insert(digits.begin(),1);\\n            }else{\\n                digits[i]=digits[i]+1;\\n            }\\n           return digits;\\n        }\\n    \\n};"
                    },
                    {
                        "username": "salomanjames",
                        "content": "Can anyone explain if digits = {1,2,3,9};\\nwhat will be the output???"
                    },
                    {
                        "username": "tobilarry",
                        "content": "1240 \\n\\nTry and write an algorithm in such a way you will solve it in real life scenrio"
                    },
                    {
                        "username": "rockinganshu97",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int sum=0;\\n        int n=digits.size();\\n        for(int i=0;i<n;i++){\\n            sum = sum*10 +digits[i];\\n        }\\n        sum=sum+1;\\n        for(int i=0;i<n;i++){\\n            int rev=sum%10;\\n            ans.insert(ans.begin(), rev);\\n            sum=sum/10;\\n        }\\n       return ans;\\n        \\n    }\\n};\\n\\nwhy it is not working?"
                    },
                    {
                        "username": "aaryakapoor10",
                        "content": "passed 61 /111 test case :[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]  can anyone explain?"
                    },
                    {
                        "username": "chickenTandoori",
                        "content": "Improve your test cases..!!"
                    },
                    {
                        "username": "Pranav2132",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int start=0;\\n        int t=digits[digits.size()-1];\\n        int n=digits.size();\\n        for(int i=0; i<n; i++){\\n        if(digits[i]!=t){\\n           cout<<digits[i];\\n        }\\n      }\\n        cout<<t+1; \\n    }\\n    \\n    \\n}; this is write way for beginner?\\n"
                    },
                    {
                        "username": "rohitpandey0151998",
                        "content": "very easy c++ solution\\n for(int i=digits.size()-1;i>=0;i--)\\n   {\\n       if(digits[i]<9)\\n       {\\n           digits[i]++;\\n           return digits;\\n       }\\n       else\\n       {\\n           digits[i]=0;\\n       }\\n                  \\n   }\\n   digits.push_back(0);\\n   digits[0]=1;\\n   return digits;"
                    }
                ]
            },
            {
                "id": 2047933,
                "content": [
                    {
                        "username": "desileetcoders",
                        "content": "Same as question"
                    },
                    {
                        "username": "Architag1503",
                        "content": "//In this solution we apply concept of add two arrays.\\n\\nclass Solution {\\n\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n//So we make the another vector which have value 1.\\n        vector<int> z={1};\\n//there may be the carry after adding .\\n        int carry=0;\\n        int i=digits.size()-1;\\n        int j=z.size()-1;\\n//we have to start from end \\n        while(i>=0 && j>=0)\\n        {\\n            int sum=digits[i]+z[j]+carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n            j--;\\n        }\\n // after adding 1 some part other vector is left and some carry is also left.\\n        while(i>=0)\\n        {\\n            int sum = digits[i] + carry;\\n            carry = sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n            i--;\\n        }\\n//there may be carry after ending also , so that carry is also added. Ex- [9,9]+[1]=[1,0,0]\\n        while(carry!=0)\\n        {\\n            int sum = carry;\\n            carry=sum/10;\\n            sum=sum%10;\\n            ans.push_back(sum);\\n        }\\n        \\n //at last we have to reverse the vector. If we not reverse the vector ans will come wrong.\\n//Ex-  [9,9,9,1]+[1]=[2,9,9,9]--->wrong   \\n        reverse(ans.begin() , ans.end());\\n\\n        return ans;\\n        \\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "AbhishekHi",
                        "content": "`for i in  digits: \\n            if digits.append(i):\\n                return digits\\n        `\\n\\nCan anyone improve this from here? \\n        \\n        "
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=digits.size()-1;\\n       \\n            while(i>=0&&digits[i]==9){\\n             digits[i]=0;\\n             i--;\\n            }\\n            if(i<0){\\n                digits.insert(digits.begin(),1);\\n            }else{\\n                digits[i]=digits[i]+1;\\n            }\\n           return digits;\\n        }\\n    \\n};"
                    },
                    {
                        "username": "salomanjames",
                        "content": "Can anyone explain if digits = {1,2,3,9};\\nwhat will be the output???"
                    },
                    {
                        "username": "tobilarry",
                        "content": "1240 \\n\\nTry and write an algorithm in such a way you will solve it in real life scenrio"
                    },
                    {
                        "username": "rockinganshu97",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> ans;\\n        int sum=0;\\n        int n=digits.size();\\n        for(int i=0;i<n;i++){\\n            sum = sum*10 +digits[i];\\n        }\\n        sum=sum+1;\\n        for(int i=0;i<n;i++){\\n            int rev=sum%10;\\n            ans.insert(ans.begin(), rev);\\n            sum=sum/10;\\n        }\\n       return ans;\\n        \\n    }\\n};\\n\\nwhy it is not working?"
                    },
                    {
                        "username": "aaryakapoor10",
                        "content": "passed 61 /111 test case :[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]  can anyone explain?"
                    },
                    {
                        "username": "chickenTandoori",
                        "content": "Improve your test cases..!!"
                    },
                    {
                        "username": "Pranav2132",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int start=0;\\n        int t=digits[digits.size()-1];\\n        int n=digits.size();\\n        for(int i=0; i<n; i++){\\n        if(digits[i]!=t){\\n           cout<<digits[i];\\n        }\\n      }\\n        cout<<t+1; \\n    }\\n    \\n    \\n}; this is write way for beginner?\\n"
                    },
                    {
                        "username": "rohitpandey0151998",
                        "content": "very easy c++ solution\\n for(int i=digits.size()-1;i>=0;i--)\\n   {\\n       if(digits[i]<9)\\n       {\\n           digits[i]++;\\n           return digits;\\n       }\\n       else\\n       {\\n           digits[i]=0;\\n       }\\n                  \\n   }\\n   digits.push_back(0);\\n   digits[0]=1;\\n   return digits;"
                    }
                ]
            },
            {
                "id": 2045323,
                "content": [
                    {
                        "username": "Anubhav_Choudhary",
                        "content": "this code beats 100% users in time complexity but is not so good in terms of space complexity.\\nAny suggestions?\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n\\n        for(int i = n-1 ; i>=0 ; i--){\\n            if(digits[i]<9){\\n               digits[i]++;\\n               return digits;\\n            }else{\\n            digits[i] = 0;\\n            }\\n        }\\n        int[] result = new int[n+1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Sameer_Vohra",
                        "content": "         class Solution {\n         public:\n         vector<int> plusOne(vector<int>& digits) {\n        unsigned long long num = 0;\n\n        int n = digits.size();\n\n        for(int i=0; i<n; i++){\n            num = num*10 + digits[i];\n        }\n\n        num = num+1;\n\n        vector<int> ans;\n\n        while(num!=0){\n            int temp = num%10;\n            num/=10;\n            ans.push_back(temp);\n        }\n\n        reverse(ans.begin(), ans.end());\n\n        return ans;\n    }\n};\n\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\n\nWhy is this code not working for the test case given above?"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The reason your code is not working for the given test case is that the number generated by concatenating all the digits in the vector is too large to fit into an `unsigned long long` variable. For example, the number formed from the given vector `[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]` is very large and is likely to cause an overflow.\\n\\nOne way to avoid this is to perform the \"plus one\" operation directly on the array/vector without converting it to a number. Here\\'s how:\\n\\n1. Start from the last digit and move toward the first digit, propagating any carry.\\n2. If the last digit is less than 9, just increment it and you are done.\\n3. If the last digit is 9, make it zero and propagate a carry to the previous digit.\\n4. If the first digit ends up being zero with a carry, you\\'ll need to insert a new \\'1\\' at the beginning.\\n\\nHere is some sample code to demonstrate:\\n\\n\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size();\\n        for (int i = n - 1; i >= 0; --i) {\\n            if (digits[i] < 9) {\\n                ++digits[i];\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n        // If all the digits were 9, then we\\'ll reach this point and we need to add a new \\'1\\' at the beginning.\\n        digits.insert(digits.begin(), 1);\\n        return digits;\\n    }\\n};\\n\\n\\nThis approach has a time complexity of \\\\( O(n) \\\\) and doesn\\'t use any additional space (except for the returned result), i.e., it has a space complexity of \\\\( O(1) \\\\)."
                    },
                    {
                        "username": "Aayush_Agarwal",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n        for(int i=n-1;i>=0;i--){\\n            if(digits[n-1]==9){\\n                digits[n-1]=0;\\n            }\\n            else{\\n                digits[i]+=1;\\n                return digits;\\n            }\\n        }\\n        digits.insert(digits.begin(),1);\\n        cout<<digits.size();\\n        return digits;\\n    }\\n};\\nwhy my code is giving wrong answer for [9,9].\\nit gives output as [10,0] instead of [1,0,0].\\nwhen i run it on vs code it provides correct output. please tell me what\\'s wrong in it. "
                    },
                    {
                        "username": "princewilly-cloud",
                        "content": "this question looked easy, but it definitely required some tough logic "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "No jst bro just addition with carry.\\ntake the size+1 of new array if and olny all values are 9. Thats it . "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "hehe done in first try. so satisfying !!!!  "
                    },
                    {
                        "username": "faizanhaidar",
                        "content": "They asked to increment the last number only but for [9,9] my solution is [9,1,0] and it expects [1,0,0]"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "When I started to solve this question. I was thinking that this is very easy question but when submitting the code. Then understand it is not easy as expected."
                    },
                    {
                        "username": "RudrSharma",
                        "content": "use long long data type except int  data type \\n"
                    },
                    {
                        "username": "aryav_luna",
                        "content": "but return type of function is int array so how would it work?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "I don\\'t know the best possible answer for this. But the most easy one would be string > int+1 > string > list(int(string)) (list_comprehension would be helpful)"
                    },
                    {
                        "username": "kraig1",
                        "content": "lass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    vector<int> v;\\n    int b = digits.size();\\n    int c = 0;\\n    for (int i = 0; i < b; i++) {\\n        if (digits[i] == 9) c++;\\n    }\\n    if (c == b) {\\n        v.push_back(1);\\n        while (c--) {\\n            v.push_back(0);\\n            }\\n    } else {\\n        for (int i = b - 1; i >= 0; i--) {\\n            if (digits[i] == 9) {\\n                v.push_back(0);\\n                digits[i - 1] += 1;\\n            } else {\\n                digits[i] += 1;\\n                break;\\n            }\\n        }\\n        reverse(v.begin(), v.end());\\n    }\\n    return v;\\n    }\\n};            where is wrong in my code"
                    }
                ]
            },
            {
                "id": 2044544,
                "content": [
                    {
                        "username": "Anubhav_Choudhary",
                        "content": "this code beats 100% users in time complexity but is not so good in terms of space complexity.\\nAny suggestions?\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n\\n        for(int i = n-1 ; i>=0 ; i--){\\n            if(digits[i]<9){\\n               digits[i]++;\\n               return digits;\\n            }else{\\n            digits[i] = 0;\\n            }\\n        }\\n        int[] result = new int[n+1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Sameer_Vohra",
                        "content": "         class Solution {\n         public:\n         vector<int> plusOne(vector<int>& digits) {\n        unsigned long long num = 0;\n\n        int n = digits.size();\n\n        for(int i=0; i<n; i++){\n            num = num*10 + digits[i];\n        }\n\n        num = num+1;\n\n        vector<int> ans;\n\n        while(num!=0){\n            int temp = num%10;\n            num/=10;\n            ans.push_back(temp);\n        }\n\n        reverse(ans.begin(), ans.end());\n\n        return ans;\n    }\n};\n\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\n\nWhy is this code not working for the test case given above?"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The reason your code is not working for the given test case is that the number generated by concatenating all the digits in the vector is too large to fit into an `unsigned long long` variable. For example, the number formed from the given vector `[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]` is very large and is likely to cause an overflow.\\n\\nOne way to avoid this is to perform the \"plus one\" operation directly on the array/vector without converting it to a number. Here\\'s how:\\n\\n1. Start from the last digit and move toward the first digit, propagating any carry.\\n2. If the last digit is less than 9, just increment it and you are done.\\n3. If the last digit is 9, make it zero and propagate a carry to the previous digit.\\n4. If the first digit ends up being zero with a carry, you\\'ll need to insert a new \\'1\\' at the beginning.\\n\\nHere is some sample code to demonstrate:\\n\\n\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size();\\n        for (int i = n - 1; i >= 0; --i) {\\n            if (digits[i] < 9) {\\n                ++digits[i];\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n        // If all the digits were 9, then we\\'ll reach this point and we need to add a new \\'1\\' at the beginning.\\n        digits.insert(digits.begin(), 1);\\n        return digits;\\n    }\\n};\\n\\n\\nThis approach has a time complexity of \\\\( O(n) \\\\) and doesn\\'t use any additional space (except for the returned result), i.e., it has a space complexity of \\\\( O(1) \\\\)."
                    },
                    {
                        "username": "Aayush_Agarwal",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n        for(int i=n-1;i>=0;i--){\\n            if(digits[n-1]==9){\\n                digits[n-1]=0;\\n            }\\n            else{\\n                digits[i]+=1;\\n                return digits;\\n            }\\n        }\\n        digits.insert(digits.begin(),1);\\n        cout<<digits.size();\\n        return digits;\\n    }\\n};\\nwhy my code is giving wrong answer for [9,9].\\nit gives output as [10,0] instead of [1,0,0].\\nwhen i run it on vs code it provides correct output. please tell me what\\'s wrong in it. "
                    },
                    {
                        "username": "princewilly-cloud",
                        "content": "this question looked easy, but it definitely required some tough logic "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "No jst bro just addition with carry.\\ntake the size+1 of new array if and olny all values are 9. Thats it . "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "hehe done in first try. so satisfying !!!!  "
                    },
                    {
                        "username": "faizanhaidar",
                        "content": "They asked to increment the last number only but for [9,9] my solution is [9,1,0] and it expects [1,0,0]"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "When I started to solve this question. I was thinking that this is very easy question but when submitting the code. Then understand it is not easy as expected."
                    },
                    {
                        "username": "RudrSharma",
                        "content": "use long long data type except int  data type \\n"
                    },
                    {
                        "username": "aryav_luna",
                        "content": "but return type of function is int array so how would it work?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "I don\\'t know the best possible answer for this. But the most easy one would be string > int+1 > string > list(int(string)) (list_comprehension would be helpful)"
                    },
                    {
                        "username": "kraig1",
                        "content": "lass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    vector<int> v;\\n    int b = digits.size();\\n    int c = 0;\\n    for (int i = 0; i < b; i++) {\\n        if (digits[i] == 9) c++;\\n    }\\n    if (c == b) {\\n        v.push_back(1);\\n        while (c--) {\\n            v.push_back(0);\\n            }\\n    } else {\\n        for (int i = b - 1; i >= 0; i--) {\\n            if (digits[i] == 9) {\\n                v.push_back(0);\\n                digits[i - 1] += 1;\\n            } else {\\n                digits[i] += 1;\\n                break;\\n            }\\n        }\\n        reverse(v.begin(), v.end());\\n    }\\n    return v;\\n    }\\n};            where is wrong in my code"
                    }
                ]
            },
            {
                "id": 2040611,
                "content": [
                    {
                        "username": "Anubhav_Choudhary",
                        "content": "this code beats 100% users in time complexity but is not so good in terms of space complexity.\\nAny suggestions?\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n\\n        for(int i = n-1 ; i>=0 ; i--){\\n            if(digits[i]<9){\\n               digits[i]++;\\n               return digits;\\n            }else{\\n            digits[i] = 0;\\n            }\\n        }\\n        int[] result = new int[n+1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Sameer_Vohra",
                        "content": "         class Solution {\n         public:\n         vector<int> plusOne(vector<int>& digits) {\n        unsigned long long num = 0;\n\n        int n = digits.size();\n\n        for(int i=0; i<n; i++){\n            num = num*10 + digits[i];\n        }\n\n        num = num+1;\n\n        vector<int> ans;\n\n        while(num!=0){\n            int temp = num%10;\n            num/=10;\n            ans.push_back(temp);\n        }\n\n        reverse(ans.begin(), ans.end());\n\n        return ans;\n    }\n};\n\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\n\nWhy is this code not working for the test case given above?"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The reason your code is not working for the given test case is that the number generated by concatenating all the digits in the vector is too large to fit into an `unsigned long long` variable. For example, the number formed from the given vector `[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]` is very large and is likely to cause an overflow.\\n\\nOne way to avoid this is to perform the \"plus one\" operation directly on the array/vector without converting it to a number. Here\\'s how:\\n\\n1. Start from the last digit and move toward the first digit, propagating any carry.\\n2. If the last digit is less than 9, just increment it and you are done.\\n3. If the last digit is 9, make it zero and propagate a carry to the previous digit.\\n4. If the first digit ends up being zero with a carry, you\\'ll need to insert a new \\'1\\' at the beginning.\\n\\nHere is some sample code to demonstrate:\\n\\n\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size();\\n        for (int i = n - 1; i >= 0; --i) {\\n            if (digits[i] < 9) {\\n                ++digits[i];\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n        // If all the digits were 9, then we\\'ll reach this point and we need to add a new \\'1\\' at the beginning.\\n        digits.insert(digits.begin(), 1);\\n        return digits;\\n    }\\n};\\n\\n\\nThis approach has a time complexity of \\\\( O(n) \\\\) and doesn\\'t use any additional space (except for the returned result), i.e., it has a space complexity of \\\\( O(1) \\\\)."
                    },
                    {
                        "username": "Aayush_Agarwal",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n        for(int i=n-1;i>=0;i--){\\n            if(digits[n-1]==9){\\n                digits[n-1]=0;\\n            }\\n            else{\\n                digits[i]+=1;\\n                return digits;\\n            }\\n        }\\n        digits.insert(digits.begin(),1);\\n        cout<<digits.size();\\n        return digits;\\n    }\\n};\\nwhy my code is giving wrong answer for [9,9].\\nit gives output as [10,0] instead of [1,0,0].\\nwhen i run it on vs code it provides correct output. please tell me what\\'s wrong in it. "
                    },
                    {
                        "username": "princewilly-cloud",
                        "content": "this question looked easy, but it definitely required some tough logic "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "No jst bro just addition with carry.\\ntake the size+1 of new array if and olny all values are 9. Thats it . "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "hehe done in first try. so satisfying !!!!  "
                    },
                    {
                        "username": "faizanhaidar",
                        "content": "They asked to increment the last number only but for [9,9] my solution is [9,1,0] and it expects [1,0,0]"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "When I started to solve this question. I was thinking that this is very easy question but when submitting the code. Then understand it is not easy as expected."
                    },
                    {
                        "username": "RudrSharma",
                        "content": "use long long data type except int  data type \\n"
                    },
                    {
                        "username": "aryav_luna",
                        "content": "but return type of function is int array so how would it work?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "I don\\'t know the best possible answer for this. But the most easy one would be string > int+1 > string > list(int(string)) (list_comprehension would be helpful)"
                    },
                    {
                        "username": "kraig1",
                        "content": "lass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    vector<int> v;\\n    int b = digits.size();\\n    int c = 0;\\n    for (int i = 0; i < b; i++) {\\n        if (digits[i] == 9) c++;\\n    }\\n    if (c == b) {\\n        v.push_back(1);\\n        while (c--) {\\n            v.push_back(0);\\n            }\\n    } else {\\n        for (int i = b - 1; i >= 0; i--) {\\n            if (digits[i] == 9) {\\n                v.push_back(0);\\n                digits[i - 1] += 1;\\n            } else {\\n                digits[i] += 1;\\n                break;\\n            }\\n        }\\n        reverse(v.begin(), v.end());\\n    }\\n    return v;\\n    }\\n};            where is wrong in my code"
                    }
                ]
            },
            {
                "id": 2036252,
                "content": [
                    {
                        "username": "Anubhav_Choudhary",
                        "content": "this code beats 100% users in time complexity but is not so good in terms of space complexity.\\nAny suggestions?\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n\\n        for(int i = n-1 ; i>=0 ; i--){\\n            if(digits[i]<9){\\n               digits[i]++;\\n               return digits;\\n            }else{\\n            digits[i] = 0;\\n            }\\n        }\\n        int[] result = new int[n+1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Sameer_Vohra",
                        "content": "         class Solution {\n         public:\n         vector<int> plusOne(vector<int>& digits) {\n        unsigned long long num = 0;\n\n        int n = digits.size();\n\n        for(int i=0; i<n; i++){\n            num = num*10 + digits[i];\n        }\n\n        num = num+1;\n\n        vector<int> ans;\n\n        while(num!=0){\n            int temp = num%10;\n            num/=10;\n            ans.push_back(temp);\n        }\n\n        reverse(ans.begin(), ans.end());\n\n        return ans;\n    }\n};\n\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\n\nWhy is this code not working for the test case given above?"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The reason your code is not working for the given test case is that the number generated by concatenating all the digits in the vector is too large to fit into an `unsigned long long` variable. For example, the number formed from the given vector `[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]` is very large and is likely to cause an overflow.\\n\\nOne way to avoid this is to perform the \"plus one\" operation directly on the array/vector without converting it to a number. Here\\'s how:\\n\\n1. Start from the last digit and move toward the first digit, propagating any carry.\\n2. If the last digit is less than 9, just increment it and you are done.\\n3. If the last digit is 9, make it zero and propagate a carry to the previous digit.\\n4. If the first digit ends up being zero with a carry, you\\'ll need to insert a new \\'1\\' at the beginning.\\n\\nHere is some sample code to demonstrate:\\n\\n\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size();\\n        for (int i = n - 1; i >= 0; --i) {\\n            if (digits[i] < 9) {\\n                ++digits[i];\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n        // If all the digits were 9, then we\\'ll reach this point and we need to add a new \\'1\\' at the beginning.\\n        digits.insert(digits.begin(), 1);\\n        return digits;\\n    }\\n};\\n\\n\\nThis approach has a time complexity of \\\\( O(n) \\\\) and doesn\\'t use any additional space (except for the returned result), i.e., it has a space complexity of \\\\( O(1) \\\\)."
                    },
                    {
                        "username": "Aayush_Agarwal",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n        for(int i=n-1;i>=0;i--){\\n            if(digits[n-1]==9){\\n                digits[n-1]=0;\\n            }\\n            else{\\n                digits[i]+=1;\\n                return digits;\\n            }\\n        }\\n        digits.insert(digits.begin(),1);\\n        cout<<digits.size();\\n        return digits;\\n    }\\n};\\nwhy my code is giving wrong answer for [9,9].\\nit gives output as [10,0] instead of [1,0,0].\\nwhen i run it on vs code it provides correct output. please tell me what\\'s wrong in it. "
                    },
                    {
                        "username": "princewilly-cloud",
                        "content": "this question looked easy, but it definitely required some tough logic "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "No jst bro just addition with carry.\\ntake the size+1 of new array if and olny all values are 9. Thats it . "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "hehe done in first try. so satisfying !!!!  "
                    },
                    {
                        "username": "faizanhaidar",
                        "content": "They asked to increment the last number only but for [9,9] my solution is [9,1,0] and it expects [1,0,0]"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "When I started to solve this question. I was thinking that this is very easy question but when submitting the code. Then understand it is not easy as expected."
                    },
                    {
                        "username": "RudrSharma",
                        "content": "use long long data type except int  data type \\n"
                    },
                    {
                        "username": "aryav_luna",
                        "content": "but return type of function is int array so how would it work?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "I don\\'t know the best possible answer for this. But the most easy one would be string > int+1 > string > list(int(string)) (list_comprehension would be helpful)"
                    },
                    {
                        "username": "kraig1",
                        "content": "lass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    vector<int> v;\\n    int b = digits.size();\\n    int c = 0;\\n    for (int i = 0; i < b; i++) {\\n        if (digits[i] == 9) c++;\\n    }\\n    if (c == b) {\\n        v.push_back(1);\\n        while (c--) {\\n            v.push_back(0);\\n            }\\n    } else {\\n        for (int i = b - 1; i >= 0; i--) {\\n            if (digits[i] == 9) {\\n                v.push_back(0);\\n                digits[i - 1] += 1;\\n            } else {\\n                digits[i] += 1;\\n                break;\\n            }\\n        }\\n        reverse(v.begin(), v.end());\\n    }\\n    return v;\\n    }\\n};            where is wrong in my code"
                    }
                ]
            },
            {
                "id": 2035844,
                "content": [
                    {
                        "username": "Anubhav_Choudhary",
                        "content": "this code beats 100% users in time complexity but is not so good in terms of space complexity.\\nAny suggestions?\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n\\n        for(int i = n-1 ; i>=0 ; i--){\\n            if(digits[i]<9){\\n               digits[i]++;\\n               return digits;\\n            }else{\\n            digits[i] = 0;\\n            }\\n        }\\n        int[] result = new int[n+1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Sameer_Vohra",
                        "content": "         class Solution {\n         public:\n         vector<int> plusOne(vector<int>& digits) {\n        unsigned long long num = 0;\n\n        int n = digits.size();\n\n        for(int i=0; i<n; i++){\n            num = num*10 + digits[i];\n        }\n\n        num = num+1;\n\n        vector<int> ans;\n\n        while(num!=0){\n            int temp = num%10;\n            num/=10;\n            ans.push_back(temp);\n        }\n\n        reverse(ans.begin(), ans.end());\n\n        return ans;\n    }\n};\n\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\n\nWhy is this code not working for the test case given above?"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The reason your code is not working for the given test case is that the number generated by concatenating all the digits in the vector is too large to fit into an `unsigned long long` variable. For example, the number formed from the given vector `[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]` is very large and is likely to cause an overflow.\\n\\nOne way to avoid this is to perform the \"plus one\" operation directly on the array/vector without converting it to a number. Here\\'s how:\\n\\n1. Start from the last digit and move toward the first digit, propagating any carry.\\n2. If the last digit is less than 9, just increment it and you are done.\\n3. If the last digit is 9, make it zero and propagate a carry to the previous digit.\\n4. If the first digit ends up being zero with a carry, you\\'ll need to insert a new \\'1\\' at the beginning.\\n\\nHere is some sample code to demonstrate:\\n\\n\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size();\\n        for (int i = n - 1; i >= 0; --i) {\\n            if (digits[i] < 9) {\\n                ++digits[i];\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n        // If all the digits were 9, then we\\'ll reach this point and we need to add a new \\'1\\' at the beginning.\\n        digits.insert(digits.begin(), 1);\\n        return digits;\\n    }\\n};\\n\\n\\nThis approach has a time complexity of \\\\( O(n) \\\\) and doesn\\'t use any additional space (except for the returned result), i.e., it has a space complexity of \\\\( O(1) \\\\)."
                    },
                    {
                        "username": "Aayush_Agarwal",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n        for(int i=n-1;i>=0;i--){\\n            if(digits[n-1]==9){\\n                digits[n-1]=0;\\n            }\\n            else{\\n                digits[i]+=1;\\n                return digits;\\n            }\\n        }\\n        digits.insert(digits.begin(),1);\\n        cout<<digits.size();\\n        return digits;\\n    }\\n};\\nwhy my code is giving wrong answer for [9,9].\\nit gives output as [10,0] instead of [1,0,0].\\nwhen i run it on vs code it provides correct output. please tell me what\\'s wrong in it. "
                    },
                    {
                        "username": "princewilly-cloud",
                        "content": "this question looked easy, but it definitely required some tough logic "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "No jst bro just addition with carry.\\ntake the size+1 of new array if and olny all values are 9. Thats it . "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "hehe done in first try. so satisfying !!!!  "
                    },
                    {
                        "username": "faizanhaidar",
                        "content": "They asked to increment the last number only but for [9,9] my solution is [9,1,0] and it expects [1,0,0]"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "When I started to solve this question. I was thinking that this is very easy question but when submitting the code. Then understand it is not easy as expected."
                    },
                    {
                        "username": "RudrSharma",
                        "content": "use long long data type except int  data type \\n"
                    },
                    {
                        "username": "aryav_luna",
                        "content": "but return type of function is int array so how would it work?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "I don\\'t know the best possible answer for this. But the most easy one would be string > int+1 > string > list(int(string)) (list_comprehension would be helpful)"
                    },
                    {
                        "username": "kraig1",
                        "content": "lass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    vector<int> v;\\n    int b = digits.size();\\n    int c = 0;\\n    for (int i = 0; i < b; i++) {\\n        if (digits[i] == 9) c++;\\n    }\\n    if (c == b) {\\n        v.push_back(1);\\n        while (c--) {\\n            v.push_back(0);\\n            }\\n    } else {\\n        for (int i = b - 1; i >= 0; i--) {\\n            if (digits[i] == 9) {\\n                v.push_back(0);\\n                digits[i - 1] += 1;\\n            } else {\\n                digits[i] += 1;\\n                break;\\n            }\\n        }\\n        reverse(v.begin(), v.end());\\n    }\\n    return v;\\n    }\\n};            where is wrong in my code"
                    }
                ]
            },
            {
                "id": 2022155,
                "content": [
                    {
                        "username": "Anubhav_Choudhary",
                        "content": "this code beats 100% users in time complexity but is not so good in terms of space complexity.\\nAny suggestions?\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n\\n        for(int i = n-1 ; i>=0 ; i--){\\n            if(digits[i]<9){\\n               digits[i]++;\\n               return digits;\\n            }else{\\n            digits[i] = 0;\\n            }\\n        }\\n        int[] result = new int[n+1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Sameer_Vohra",
                        "content": "         class Solution {\n         public:\n         vector<int> plusOne(vector<int>& digits) {\n        unsigned long long num = 0;\n\n        int n = digits.size();\n\n        for(int i=0; i<n; i++){\n            num = num*10 + digits[i];\n        }\n\n        num = num+1;\n\n        vector<int> ans;\n\n        while(num!=0){\n            int temp = num%10;\n            num/=10;\n            ans.push_back(temp);\n        }\n\n        reverse(ans.begin(), ans.end());\n\n        return ans;\n    }\n};\n\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\n\nWhy is this code not working for the test case given above?"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The reason your code is not working for the given test case is that the number generated by concatenating all the digits in the vector is too large to fit into an `unsigned long long` variable. For example, the number formed from the given vector `[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]` is very large and is likely to cause an overflow.\\n\\nOne way to avoid this is to perform the \"plus one\" operation directly on the array/vector without converting it to a number. Here\\'s how:\\n\\n1. Start from the last digit and move toward the first digit, propagating any carry.\\n2. If the last digit is less than 9, just increment it and you are done.\\n3. If the last digit is 9, make it zero and propagate a carry to the previous digit.\\n4. If the first digit ends up being zero with a carry, you\\'ll need to insert a new \\'1\\' at the beginning.\\n\\nHere is some sample code to demonstrate:\\n\\n\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size();\\n        for (int i = n - 1; i >= 0; --i) {\\n            if (digits[i] < 9) {\\n                ++digits[i];\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n        // If all the digits were 9, then we\\'ll reach this point and we need to add a new \\'1\\' at the beginning.\\n        digits.insert(digits.begin(), 1);\\n        return digits;\\n    }\\n};\\n\\n\\nThis approach has a time complexity of \\\\( O(n) \\\\) and doesn\\'t use any additional space (except for the returned result), i.e., it has a space complexity of \\\\( O(1) \\\\)."
                    },
                    {
                        "username": "Aayush_Agarwal",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n        for(int i=n-1;i>=0;i--){\\n            if(digits[n-1]==9){\\n                digits[n-1]=0;\\n            }\\n            else{\\n                digits[i]+=1;\\n                return digits;\\n            }\\n        }\\n        digits.insert(digits.begin(),1);\\n        cout<<digits.size();\\n        return digits;\\n    }\\n};\\nwhy my code is giving wrong answer for [9,9].\\nit gives output as [10,0] instead of [1,0,0].\\nwhen i run it on vs code it provides correct output. please tell me what\\'s wrong in it. "
                    },
                    {
                        "username": "princewilly-cloud",
                        "content": "this question looked easy, but it definitely required some tough logic "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "No jst bro just addition with carry.\\ntake the size+1 of new array if and olny all values are 9. Thats it . "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "hehe done in first try. so satisfying !!!!  "
                    },
                    {
                        "username": "faizanhaidar",
                        "content": "They asked to increment the last number only but for [9,9] my solution is [9,1,0] and it expects [1,0,0]"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "When I started to solve this question. I was thinking that this is very easy question but when submitting the code. Then understand it is not easy as expected."
                    },
                    {
                        "username": "RudrSharma",
                        "content": "use long long data type except int  data type \\n"
                    },
                    {
                        "username": "aryav_luna",
                        "content": "but return type of function is int array so how would it work?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "I don\\'t know the best possible answer for this. But the most easy one would be string > int+1 > string > list(int(string)) (list_comprehension would be helpful)"
                    },
                    {
                        "username": "kraig1",
                        "content": "lass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    vector<int> v;\\n    int b = digits.size();\\n    int c = 0;\\n    for (int i = 0; i < b; i++) {\\n        if (digits[i] == 9) c++;\\n    }\\n    if (c == b) {\\n        v.push_back(1);\\n        while (c--) {\\n            v.push_back(0);\\n            }\\n    } else {\\n        for (int i = b - 1; i >= 0; i--) {\\n            if (digits[i] == 9) {\\n                v.push_back(0);\\n                digits[i - 1] += 1;\\n            } else {\\n                digits[i] += 1;\\n                break;\\n            }\\n        }\\n        reverse(v.begin(), v.end());\\n    }\\n    return v;\\n    }\\n};            where is wrong in my code"
                    }
                ]
            },
            {
                "id": 2009432,
                "content": [
                    {
                        "username": "Anubhav_Choudhary",
                        "content": "this code beats 100% users in time complexity but is not so good in terms of space complexity.\\nAny suggestions?\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n\\n        for(int i = n-1 ; i>=0 ; i--){\\n            if(digits[i]<9){\\n               digits[i]++;\\n               return digits;\\n            }else{\\n            digits[i] = 0;\\n            }\\n        }\\n        int[] result = new int[n+1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Sameer_Vohra",
                        "content": "         class Solution {\n         public:\n         vector<int> plusOne(vector<int>& digits) {\n        unsigned long long num = 0;\n\n        int n = digits.size();\n\n        for(int i=0; i<n; i++){\n            num = num*10 + digits[i];\n        }\n\n        num = num+1;\n\n        vector<int> ans;\n\n        while(num!=0){\n            int temp = num%10;\n            num/=10;\n            ans.push_back(temp);\n        }\n\n        reverse(ans.begin(), ans.end());\n\n        return ans;\n    }\n};\n\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\n\nWhy is this code not working for the test case given above?"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The reason your code is not working for the given test case is that the number generated by concatenating all the digits in the vector is too large to fit into an `unsigned long long` variable. For example, the number formed from the given vector `[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]` is very large and is likely to cause an overflow.\\n\\nOne way to avoid this is to perform the \"plus one\" operation directly on the array/vector without converting it to a number. Here\\'s how:\\n\\n1. Start from the last digit and move toward the first digit, propagating any carry.\\n2. If the last digit is less than 9, just increment it and you are done.\\n3. If the last digit is 9, make it zero and propagate a carry to the previous digit.\\n4. If the first digit ends up being zero with a carry, you\\'ll need to insert a new \\'1\\' at the beginning.\\n\\nHere is some sample code to demonstrate:\\n\\n\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size();\\n        for (int i = n - 1; i >= 0; --i) {\\n            if (digits[i] < 9) {\\n                ++digits[i];\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n        // If all the digits were 9, then we\\'ll reach this point and we need to add a new \\'1\\' at the beginning.\\n        digits.insert(digits.begin(), 1);\\n        return digits;\\n    }\\n};\\n\\n\\nThis approach has a time complexity of \\\\( O(n) \\\\) and doesn\\'t use any additional space (except for the returned result), i.e., it has a space complexity of \\\\( O(1) \\\\)."
                    },
                    {
                        "username": "Aayush_Agarwal",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n        for(int i=n-1;i>=0;i--){\\n            if(digits[n-1]==9){\\n                digits[n-1]=0;\\n            }\\n            else{\\n                digits[i]+=1;\\n                return digits;\\n            }\\n        }\\n        digits.insert(digits.begin(),1);\\n        cout<<digits.size();\\n        return digits;\\n    }\\n};\\nwhy my code is giving wrong answer for [9,9].\\nit gives output as [10,0] instead of [1,0,0].\\nwhen i run it on vs code it provides correct output. please tell me what\\'s wrong in it. "
                    },
                    {
                        "username": "princewilly-cloud",
                        "content": "this question looked easy, but it definitely required some tough logic "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "No jst bro just addition with carry.\\ntake the size+1 of new array if and olny all values are 9. Thats it . "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "hehe done in first try. so satisfying !!!!  "
                    },
                    {
                        "username": "faizanhaidar",
                        "content": "They asked to increment the last number only but for [9,9] my solution is [9,1,0] and it expects [1,0,0]"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "When I started to solve this question. I was thinking that this is very easy question but when submitting the code. Then understand it is not easy as expected."
                    },
                    {
                        "username": "RudrSharma",
                        "content": "use long long data type except int  data type \\n"
                    },
                    {
                        "username": "aryav_luna",
                        "content": "but return type of function is int array so how would it work?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "I don\\'t know the best possible answer for this. But the most easy one would be string > int+1 > string > list(int(string)) (list_comprehension would be helpful)"
                    },
                    {
                        "username": "kraig1",
                        "content": "lass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    vector<int> v;\\n    int b = digits.size();\\n    int c = 0;\\n    for (int i = 0; i < b; i++) {\\n        if (digits[i] == 9) c++;\\n    }\\n    if (c == b) {\\n        v.push_back(1);\\n        while (c--) {\\n            v.push_back(0);\\n            }\\n    } else {\\n        for (int i = b - 1; i >= 0; i--) {\\n            if (digits[i] == 9) {\\n                v.push_back(0);\\n                digits[i - 1] += 1;\\n            } else {\\n                digits[i] += 1;\\n                break;\\n            }\\n        }\\n        reverse(v.begin(), v.end());\\n    }\\n    return v;\\n    }\\n};            where is wrong in my code"
                    }
                ]
            },
            {
                "id": 2005275,
                "content": [
                    {
                        "username": "Anubhav_Choudhary",
                        "content": "this code beats 100% users in time complexity but is not so good in terms of space complexity.\\nAny suggestions?\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n\\n        for(int i = n-1 ; i>=0 ; i--){\\n            if(digits[i]<9){\\n               digits[i]++;\\n               return digits;\\n            }else{\\n            digits[i] = 0;\\n            }\\n        }\\n        int[] result = new int[n+1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Sameer_Vohra",
                        "content": "         class Solution {\n         public:\n         vector<int> plusOne(vector<int>& digits) {\n        unsigned long long num = 0;\n\n        int n = digits.size();\n\n        for(int i=0; i<n; i++){\n            num = num*10 + digits[i];\n        }\n\n        num = num+1;\n\n        vector<int> ans;\n\n        while(num!=0){\n            int temp = num%10;\n            num/=10;\n            ans.push_back(temp);\n        }\n\n        reverse(ans.begin(), ans.end());\n\n        return ans;\n    }\n};\n\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\n\nWhy is this code not working for the test case given above?"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The reason your code is not working for the given test case is that the number generated by concatenating all the digits in the vector is too large to fit into an `unsigned long long` variable. For example, the number formed from the given vector `[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]` is very large and is likely to cause an overflow.\\n\\nOne way to avoid this is to perform the \"plus one\" operation directly on the array/vector without converting it to a number. Here\\'s how:\\n\\n1. Start from the last digit and move toward the first digit, propagating any carry.\\n2. If the last digit is less than 9, just increment it and you are done.\\n3. If the last digit is 9, make it zero and propagate a carry to the previous digit.\\n4. If the first digit ends up being zero with a carry, you\\'ll need to insert a new \\'1\\' at the beginning.\\n\\nHere is some sample code to demonstrate:\\n\\n\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size();\\n        for (int i = n - 1; i >= 0; --i) {\\n            if (digits[i] < 9) {\\n                ++digits[i];\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n        // If all the digits were 9, then we\\'ll reach this point and we need to add a new \\'1\\' at the beginning.\\n        digits.insert(digits.begin(), 1);\\n        return digits;\\n    }\\n};\\n\\n\\nThis approach has a time complexity of \\\\( O(n) \\\\) and doesn\\'t use any additional space (except for the returned result), i.e., it has a space complexity of \\\\( O(1) \\\\)."
                    },
                    {
                        "username": "Aayush_Agarwal",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n        for(int i=n-1;i>=0;i--){\\n            if(digits[n-1]==9){\\n                digits[n-1]=0;\\n            }\\n            else{\\n                digits[i]+=1;\\n                return digits;\\n            }\\n        }\\n        digits.insert(digits.begin(),1);\\n        cout<<digits.size();\\n        return digits;\\n    }\\n};\\nwhy my code is giving wrong answer for [9,9].\\nit gives output as [10,0] instead of [1,0,0].\\nwhen i run it on vs code it provides correct output. please tell me what\\'s wrong in it. "
                    },
                    {
                        "username": "princewilly-cloud",
                        "content": "this question looked easy, but it definitely required some tough logic "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "No jst bro just addition with carry.\\ntake the size+1 of new array if and olny all values are 9. Thats it . "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "hehe done in first try. so satisfying !!!!  "
                    },
                    {
                        "username": "faizanhaidar",
                        "content": "They asked to increment the last number only but for [9,9] my solution is [9,1,0] and it expects [1,0,0]"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "When I started to solve this question. I was thinking that this is very easy question but when submitting the code. Then understand it is not easy as expected."
                    },
                    {
                        "username": "RudrSharma",
                        "content": "use long long data type except int  data type \\n"
                    },
                    {
                        "username": "aryav_luna",
                        "content": "but return type of function is int array so how would it work?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "I don\\'t know the best possible answer for this. But the most easy one would be string > int+1 > string > list(int(string)) (list_comprehension would be helpful)"
                    },
                    {
                        "username": "kraig1",
                        "content": "lass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    vector<int> v;\\n    int b = digits.size();\\n    int c = 0;\\n    for (int i = 0; i < b; i++) {\\n        if (digits[i] == 9) c++;\\n    }\\n    if (c == b) {\\n        v.push_back(1);\\n        while (c--) {\\n            v.push_back(0);\\n            }\\n    } else {\\n        for (int i = b - 1; i >= 0; i--) {\\n            if (digits[i] == 9) {\\n                v.push_back(0);\\n                digits[i - 1] += 1;\\n            } else {\\n                digits[i] += 1;\\n                break;\\n            }\\n        }\\n        reverse(v.begin(), v.end());\\n    }\\n    return v;\\n    }\\n};            where is wrong in my code"
                    }
                ]
            },
            {
                "id": 2003887,
                "content": [
                    {
                        "username": "Anubhav_Choudhary",
                        "content": "this code beats 100% users in time complexity but is not so good in terms of space complexity.\\nAny suggestions?\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n\\n        for(int i = n-1 ; i>=0 ; i--){\\n            if(digits[i]<9){\\n               digits[i]++;\\n               return digits;\\n            }else{\\n            digits[i] = 0;\\n            }\\n        }\\n        int[] result = new int[n+1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Sameer_Vohra",
                        "content": "         class Solution {\n         public:\n         vector<int> plusOne(vector<int>& digits) {\n        unsigned long long num = 0;\n\n        int n = digits.size();\n\n        for(int i=0; i<n; i++){\n            num = num*10 + digits[i];\n        }\n\n        num = num+1;\n\n        vector<int> ans;\n\n        while(num!=0){\n            int temp = num%10;\n            num/=10;\n            ans.push_back(temp);\n        }\n\n        reverse(ans.begin(), ans.end());\n\n        return ans;\n    }\n};\n\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\n\nWhy is this code not working for the test case given above?"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The reason your code is not working for the given test case is that the number generated by concatenating all the digits in the vector is too large to fit into an `unsigned long long` variable. For example, the number formed from the given vector `[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]` is very large and is likely to cause an overflow.\\n\\nOne way to avoid this is to perform the \"plus one\" operation directly on the array/vector without converting it to a number. Here\\'s how:\\n\\n1. Start from the last digit and move toward the first digit, propagating any carry.\\n2. If the last digit is less than 9, just increment it and you are done.\\n3. If the last digit is 9, make it zero and propagate a carry to the previous digit.\\n4. If the first digit ends up being zero with a carry, you\\'ll need to insert a new \\'1\\' at the beginning.\\n\\nHere is some sample code to demonstrate:\\n\\n\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size();\\n        for (int i = n - 1; i >= 0; --i) {\\n            if (digits[i] < 9) {\\n                ++digits[i];\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n        // If all the digits were 9, then we\\'ll reach this point and we need to add a new \\'1\\' at the beginning.\\n        digits.insert(digits.begin(), 1);\\n        return digits;\\n    }\\n};\\n\\n\\nThis approach has a time complexity of \\\\( O(n) \\\\) and doesn\\'t use any additional space (except for the returned result), i.e., it has a space complexity of \\\\( O(1) \\\\)."
                    },
                    {
                        "username": "Aayush_Agarwal",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n        for(int i=n-1;i>=0;i--){\\n            if(digits[n-1]==9){\\n                digits[n-1]=0;\\n            }\\n            else{\\n                digits[i]+=1;\\n                return digits;\\n            }\\n        }\\n        digits.insert(digits.begin(),1);\\n        cout<<digits.size();\\n        return digits;\\n    }\\n};\\nwhy my code is giving wrong answer for [9,9].\\nit gives output as [10,0] instead of [1,0,0].\\nwhen i run it on vs code it provides correct output. please tell me what\\'s wrong in it. "
                    },
                    {
                        "username": "princewilly-cloud",
                        "content": "this question looked easy, but it definitely required some tough logic "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "No jst bro just addition with carry.\\ntake the size+1 of new array if and olny all values are 9. Thats it . "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "hehe done in first try. so satisfying !!!!  "
                    },
                    {
                        "username": "faizanhaidar",
                        "content": "They asked to increment the last number only but for [9,9] my solution is [9,1,0] and it expects [1,0,0]"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "When I started to solve this question. I was thinking that this is very easy question but when submitting the code. Then understand it is not easy as expected."
                    },
                    {
                        "username": "RudrSharma",
                        "content": "use long long data type except int  data type \\n"
                    },
                    {
                        "username": "aryav_luna",
                        "content": "but return type of function is int array so how would it work?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "I don\\'t know the best possible answer for this. But the most easy one would be string > int+1 > string > list(int(string)) (list_comprehension would be helpful)"
                    },
                    {
                        "username": "kraig1",
                        "content": "lass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    vector<int> v;\\n    int b = digits.size();\\n    int c = 0;\\n    for (int i = 0; i < b; i++) {\\n        if (digits[i] == 9) c++;\\n    }\\n    if (c == b) {\\n        v.push_back(1);\\n        while (c--) {\\n            v.push_back(0);\\n            }\\n    } else {\\n        for (int i = b - 1; i >= 0; i--) {\\n            if (digits[i] == 9) {\\n                v.push_back(0);\\n                digits[i - 1] += 1;\\n            } else {\\n                digits[i] += 1;\\n                break;\\n            }\\n        }\\n        reverse(v.begin(), v.end());\\n    }\\n    return v;\\n    }\\n};            where is wrong in my code"
                    }
                ]
            },
            {
                "id": 1998898,
                "content": [
                    {
                        "username": "Anubhav_Choudhary",
                        "content": "this code beats 100% users in time complexity but is not so good in terms of space complexity.\\nAny suggestions?\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int n = digits.length;\\n\\n        for(int i = n-1 ; i>=0 ; i--){\\n            if(digits[i]<9){\\n               digits[i]++;\\n               return digits;\\n            }else{\\n            digits[i] = 0;\\n            }\\n        }\\n        int[] result = new int[n+1];\\n        result[0] = 1;\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Sameer_Vohra",
                        "content": "         class Solution {\n         public:\n         vector<int> plusOne(vector<int>& digits) {\n        unsigned long long num = 0;\n\n        int n = digits.size();\n\n        for(int i=0; i<n; i++){\n            num = num*10 + digits[i];\n        }\n\n        num = num+1;\n\n        vector<int> ans;\n\n        while(num!=0){\n            int temp = num%10;\n            num/=10;\n            ans.push_back(temp);\n        }\n\n        reverse(ans.begin(), ans.end());\n\n        return ans;\n    }\n};\n\n[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\n\nWhy is this code not working for the test case given above?"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The reason your code is not working for the given test case is that the number generated by concatenating all the digits in the vector is too large to fit into an `unsigned long long` variable. For example, the number formed from the given vector `[7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]` is very large and is likely to cause an overflow.\\n\\nOne way to avoid this is to perform the \"plus one\" operation directly on the array/vector without converting it to a number. Here\\'s how:\\n\\n1. Start from the last digit and move toward the first digit, propagating any carry.\\n2. If the last digit is less than 9, just increment it and you are done.\\n3. If the last digit is 9, make it zero and propagate a carry to the previous digit.\\n4. If the first digit ends up being zero with a carry, you\\'ll need to insert a new \\'1\\' at the beginning.\\n\\nHere is some sample code to demonstrate:\\n\\n\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size();\\n        for (int i = n - 1; i >= 0; --i) {\\n            if (digits[i] < 9) {\\n                ++digits[i];\\n                return digits;\\n            }\\n            digits[i] = 0;\\n        }\\n        // If all the digits were 9, then we\\'ll reach this point and we need to add a new \\'1\\' at the beginning.\\n        digits.insert(digits.begin(), 1);\\n        return digits;\\n    }\\n};\\n\\n\\nThis approach has a time complexity of \\\\( O(n) \\\\) and doesn\\'t use any additional space (except for the returned result), i.e., it has a space complexity of \\\\( O(1) \\\\)."
                    },
                    {
                        "username": "Aayush_Agarwal",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n        for(int i=n-1;i>=0;i--){\\n            if(digits[n-1]==9){\\n                digits[n-1]=0;\\n            }\\n            else{\\n                digits[i]+=1;\\n                return digits;\\n            }\\n        }\\n        digits.insert(digits.begin(),1);\\n        cout<<digits.size();\\n        return digits;\\n    }\\n};\\nwhy my code is giving wrong answer for [9,9].\\nit gives output as [10,0] instead of [1,0,0].\\nwhen i run it on vs code it provides correct output. please tell me what\\'s wrong in it. "
                    },
                    {
                        "username": "princewilly-cloud",
                        "content": "this question looked easy, but it definitely required some tough logic "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "No jst bro just addition with carry.\\ntake the size+1 of new array if and olny all values are 9. Thats it . "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "hehe done in first try. so satisfying !!!!  "
                    },
                    {
                        "username": "faizanhaidar",
                        "content": "They asked to increment the last number only but for [9,9] my solution is [9,1,0] and it expects [1,0,0]"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    for(int i=digits.size()-1;i>=0;i--)\\n    {\\n        if(digits.at(i)==9)\\n            digits.at(i)=0;\\n        else\\n        {\\n            digits.at(i)=digits.at(i)+1;\\n            return digits;\\n        }\\n    }\\n    digits.at(0)=1;\\n    digits.push_back(0);\\n    return digits;\\n    }\\n};"
                    },
                    {
                        "username": "amitsingh9790",
                        "content": "When I started to solve this question. I was thinking that this is very easy question but when submitting the code. Then understand it is not easy as expected."
                    },
                    {
                        "username": "RudrSharma",
                        "content": "use long long data type except int  data type \\n"
                    },
                    {
                        "username": "aryav_luna",
                        "content": "but return type of function is int array so how would it work?"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "I don\\'t know the best possible answer for this. But the most easy one would be string > int+1 > string > list(int(string)) (list_comprehension would be helpful)"
                    },
                    {
                        "username": "kraig1",
                        "content": "lass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n    vector<int> v;\\n    int b = digits.size();\\n    int c = 0;\\n    for (int i = 0; i < b; i++) {\\n        if (digits[i] == 9) c++;\\n    }\\n    if (c == b) {\\n        v.push_back(1);\\n        while (c--) {\\n            v.push_back(0);\\n            }\\n    } else {\\n        for (int i = b - 1; i >= 0; i--) {\\n            if (digits[i] == 9) {\\n                v.push_back(0);\\n                digits[i - 1] += 1;\\n            } else {\\n                digits[i] += 1;\\n                break;\\n            }\\n        }\\n        reverse(v.begin(), v.end());\\n    }\\n    return v;\\n    }\\n};            where is wrong in my code"
                    }
                ]
            },
            {
                "id": 1994941,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "Although the problem constraints don\\'t require it, for a more real-world scenario, I would want to consider the fact that numbers can be incredibly large, possibly exceeding the maximum limit of a long in Java. In such cases, a conversion to BigInteger and then performing the increment operation would work."
                    },
                    {
                        "username": "Jiraiya1",
                        "content": "public static int[] plusOne(int[] digits) {\\n\\n        if(digits.length == 1 && digits[0] == 9) {\\n            return new int[]{1,0};\\n        }\\n\\n      for(int i = digits.length-1; i>=0; i--) {\\n          \\n          if(digits[i] != 9) {\\n              digits[i] = digits[i] +1;\\n             return digits;\\n          }\\n      }\\n      return new int[]{};\\n    }\\n\\nI have a issue with this test case \\n\\n\\ndigits =\\n[9,9]\\nUse Testcase\\nOutput\\n[]\\nExpected\\n[1,0,0]"
                    },
                    {
                        "username": "devsoni5880",
                        "content": "Hello,\\nI am able to crack all the test cases but one tese case I am not able to achive is if digits = 9 the they want [1,0] in output so how do i do that?\\nthe length is 1 and if we add 1 , 0 then the length will incress and this will throw an error of index out of bound\\n\\nkindly help me."
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "Yous should use memory allocation"
                    },
                    {
                        "username": "Yeab13",
                        "content": "Incase you are using javascript , don\\'t forget to use BigInt as some of the tests cases hold big number"
                    },
                    {
                        "username": "Seethaphal",
                        "content": "This question is difficult to understand. what does this mean  \"where each digits[i] is the ith digit of the integer.\"  \\n\\nint[] x ={1,2,3} ith digit   x[0] is the zeroth digit of the integer? \\n\\nThe digits are ordered from most significant to least significant in left-to-right order.  right side digits are not required?\\n\\nThe large integer does not contain any leading 0\\'s. ?\\n"
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "what returnSize pointer stands for?\\n"
                    },
                    {
                        "username": "mng48301",
                        "content": "Make sure to fully understand a problem before you start trying to solve it. I misunderstood what they were asking for and wasted an hour wondering what went wrong. "
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Can we get some basic English comprehension checks on these tests? \\nSince when does \\'significant\\' mean \\'largest\\' or \\'biggest\\'? - significant is just the entirely incorrect word to use here, very confusing. "
                    },
                    {
                        "username": "HeatOn123",
                        "content": "I only got this cuz of the test cases, that array its just a number and u should return that number increased by +1 but in an array form. Use int(), str() this stuff and should be easy.... downvote tho for the complicated description "
                    },
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[9,9] and digits=[1,9,9]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "100 \\u0438 200\\n"
                    }
                ]
            },
            {
                "id": 1986849,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "Although the problem constraints don\\'t require it, for a more real-world scenario, I would want to consider the fact that numbers can be incredibly large, possibly exceeding the maximum limit of a long in Java. In such cases, a conversion to BigInteger and then performing the increment operation would work."
                    },
                    {
                        "username": "Jiraiya1",
                        "content": "public static int[] plusOne(int[] digits) {\\n\\n        if(digits.length == 1 && digits[0] == 9) {\\n            return new int[]{1,0};\\n        }\\n\\n      for(int i = digits.length-1; i>=0; i--) {\\n          \\n          if(digits[i] != 9) {\\n              digits[i] = digits[i] +1;\\n             return digits;\\n          }\\n      }\\n      return new int[]{};\\n    }\\n\\nI have a issue with this test case \\n\\n\\ndigits =\\n[9,9]\\nUse Testcase\\nOutput\\n[]\\nExpected\\n[1,0,0]"
                    },
                    {
                        "username": "devsoni5880",
                        "content": "Hello,\\nI am able to crack all the test cases but one tese case I am not able to achive is if digits = 9 the they want [1,0] in output so how do i do that?\\nthe length is 1 and if we add 1 , 0 then the length will incress and this will throw an error of index out of bound\\n\\nkindly help me."
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "Yous should use memory allocation"
                    },
                    {
                        "username": "Yeab13",
                        "content": "Incase you are using javascript , don\\'t forget to use BigInt as some of the tests cases hold big number"
                    },
                    {
                        "username": "Seethaphal",
                        "content": "This question is difficult to understand. what does this mean  \"where each digits[i] is the ith digit of the integer.\"  \\n\\nint[] x ={1,2,3} ith digit   x[0] is the zeroth digit of the integer? \\n\\nThe digits are ordered from most significant to least significant in left-to-right order.  right side digits are not required?\\n\\nThe large integer does not contain any leading 0\\'s. ?\\n"
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "what returnSize pointer stands for?\\n"
                    },
                    {
                        "username": "mng48301",
                        "content": "Make sure to fully understand a problem before you start trying to solve it. I misunderstood what they were asking for and wasted an hour wondering what went wrong. "
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Can we get some basic English comprehension checks on these tests? \\nSince when does \\'significant\\' mean \\'largest\\' or \\'biggest\\'? - significant is just the entirely incorrect word to use here, very confusing. "
                    },
                    {
                        "username": "HeatOn123",
                        "content": "I only got this cuz of the test cases, that array its just a number and u should return that number increased by +1 but in an array form. Use int(), str() this stuff and should be easy.... downvote tho for the complicated description "
                    },
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[9,9] and digits=[1,9,9]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "100 \\u0438 200\\n"
                    }
                ]
            },
            {
                "id": 1978507,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "Although the problem constraints don\\'t require it, for a more real-world scenario, I would want to consider the fact that numbers can be incredibly large, possibly exceeding the maximum limit of a long in Java. In such cases, a conversion to BigInteger and then performing the increment operation would work."
                    },
                    {
                        "username": "Jiraiya1",
                        "content": "public static int[] plusOne(int[] digits) {\\n\\n        if(digits.length == 1 && digits[0] == 9) {\\n            return new int[]{1,0};\\n        }\\n\\n      for(int i = digits.length-1; i>=0; i--) {\\n          \\n          if(digits[i] != 9) {\\n              digits[i] = digits[i] +1;\\n             return digits;\\n          }\\n      }\\n      return new int[]{};\\n    }\\n\\nI have a issue with this test case \\n\\n\\ndigits =\\n[9,9]\\nUse Testcase\\nOutput\\n[]\\nExpected\\n[1,0,0]"
                    },
                    {
                        "username": "devsoni5880",
                        "content": "Hello,\\nI am able to crack all the test cases but one tese case I am not able to achive is if digits = 9 the they want [1,0] in output so how do i do that?\\nthe length is 1 and if we add 1 , 0 then the length will incress and this will throw an error of index out of bound\\n\\nkindly help me."
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "Yous should use memory allocation"
                    },
                    {
                        "username": "Yeab13",
                        "content": "Incase you are using javascript , don\\'t forget to use BigInt as some of the tests cases hold big number"
                    },
                    {
                        "username": "Seethaphal",
                        "content": "This question is difficult to understand. what does this mean  \"where each digits[i] is the ith digit of the integer.\"  \\n\\nint[] x ={1,2,3} ith digit   x[0] is the zeroth digit of the integer? \\n\\nThe digits are ordered from most significant to least significant in left-to-right order.  right side digits are not required?\\n\\nThe large integer does not contain any leading 0\\'s. ?\\n"
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "what returnSize pointer stands for?\\n"
                    },
                    {
                        "username": "mng48301",
                        "content": "Make sure to fully understand a problem before you start trying to solve it. I misunderstood what they were asking for and wasted an hour wondering what went wrong. "
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Can we get some basic English comprehension checks on these tests? \\nSince when does \\'significant\\' mean \\'largest\\' or \\'biggest\\'? - significant is just the entirely incorrect word to use here, very confusing. "
                    },
                    {
                        "username": "HeatOn123",
                        "content": "I only got this cuz of the test cases, that array its just a number and u should return that number increased by +1 but in an array form. Use int(), str() this stuff and should be easy.... downvote tho for the complicated description "
                    },
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[9,9] and digits=[1,9,9]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "100 \\u0438 200\\n"
                    }
                ]
            },
            {
                "id": 1972982,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "Although the problem constraints don\\'t require it, for a more real-world scenario, I would want to consider the fact that numbers can be incredibly large, possibly exceeding the maximum limit of a long in Java. In such cases, a conversion to BigInteger and then performing the increment operation would work."
                    },
                    {
                        "username": "Jiraiya1",
                        "content": "public static int[] plusOne(int[] digits) {\\n\\n        if(digits.length == 1 && digits[0] == 9) {\\n            return new int[]{1,0};\\n        }\\n\\n      for(int i = digits.length-1; i>=0; i--) {\\n          \\n          if(digits[i] != 9) {\\n              digits[i] = digits[i] +1;\\n             return digits;\\n          }\\n      }\\n      return new int[]{};\\n    }\\n\\nI have a issue with this test case \\n\\n\\ndigits =\\n[9,9]\\nUse Testcase\\nOutput\\n[]\\nExpected\\n[1,0,0]"
                    },
                    {
                        "username": "devsoni5880",
                        "content": "Hello,\\nI am able to crack all the test cases but one tese case I am not able to achive is if digits = 9 the they want [1,0] in output so how do i do that?\\nthe length is 1 and if we add 1 , 0 then the length will incress and this will throw an error of index out of bound\\n\\nkindly help me."
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "Yous should use memory allocation"
                    },
                    {
                        "username": "Yeab13",
                        "content": "Incase you are using javascript , don\\'t forget to use BigInt as some of the tests cases hold big number"
                    },
                    {
                        "username": "Seethaphal",
                        "content": "This question is difficult to understand. what does this mean  \"where each digits[i] is the ith digit of the integer.\"  \\n\\nint[] x ={1,2,3} ith digit   x[0] is the zeroth digit of the integer? \\n\\nThe digits are ordered from most significant to least significant in left-to-right order.  right side digits are not required?\\n\\nThe large integer does not contain any leading 0\\'s. ?\\n"
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "what returnSize pointer stands for?\\n"
                    },
                    {
                        "username": "mng48301",
                        "content": "Make sure to fully understand a problem before you start trying to solve it. I misunderstood what they were asking for and wasted an hour wondering what went wrong. "
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Can we get some basic English comprehension checks on these tests? \\nSince when does \\'significant\\' mean \\'largest\\' or \\'biggest\\'? - significant is just the entirely incorrect word to use here, very confusing. "
                    },
                    {
                        "username": "HeatOn123",
                        "content": "I only got this cuz of the test cases, that array its just a number and u should return that number increased by +1 but in an array form. Use int(), str() this stuff and should be easy.... downvote tho for the complicated description "
                    },
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[9,9] and digits=[1,9,9]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "100 \\u0438 200\\n"
                    }
                ]
            },
            {
                "id": 1971507,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "Although the problem constraints don\\'t require it, for a more real-world scenario, I would want to consider the fact that numbers can be incredibly large, possibly exceeding the maximum limit of a long in Java. In such cases, a conversion to BigInteger and then performing the increment operation would work."
                    },
                    {
                        "username": "Jiraiya1",
                        "content": "public static int[] plusOne(int[] digits) {\\n\\n        if(digits.length == 1 && digits[0] == 9) {\\n            return new int[]{1,0};\\n        }\\n\\n      for(int i = digits.length-1; i>=0; i--) {\\n          \\n          if(digits[i] != 9) {\\n              digits[i] = digits[i] +1;\\n             return digits;\\n          }\\n      }\\n      return new int[]{};\\n    }\\n\\nI have a issue with this test case \\n\\n\\ndigits =\\n[9,9]\\nUse Testcase\\nOutput\\n[]\\nExpected\\n[1,0,0]"
                    },
                    {
                        "username": "devsoni5880",
                        "content": "Hello,\\nI am able to crack all the test cases but one tese case I am not able to achive is if digits = 9 the they want [1,0] in output so how do i do that?\\nthe length is 1 and if we add 1 , 0 then the length will incress and this will throw an error of index out of bound\\n\\nkindly help me."
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "Yous should use memory allocation"
                    },
                    {
                        "username": "Yeab13",
                        "content": "Incase you are using javascript , don\\'t forget to use BigInt as some of the tests cases hold big number"
                    },
                    {
                        "username": "Seethaphal",
                        "content": "This question is difficult to understand. what does this mean  \"where each digits[i] is the ith digit of the integer.\"  \\n\\nint[] x ={1,2,3} ith digit   x[0] is the zeroth digit of the integer? \\n\\nThe digits are ordered from most significant to least significant in left-to-right order.  right side digits are not required?\\n\\nThe large integer does not contain any leading 0\\'s. ?\\n"
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "what returnSize pointer stands for?\\n"
                    },
                    {
                        "username": "mng48301",
                        "content": "Make sure to fully understand a problem before you start trying to solve it. I misunderstood what they were asking for and wasted an hour wondering what went wrong. "
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Can we get some basic English comprehension checks on these tests? \\nSince when does \\'significant\\' mean \\'largest\\' or \\'biggest\\'? - significant is just the entirely incorrect word to use here, very confusing. "
                    },
                    {
                        "username": "HeatOn123",
                        "content": "I only got this cuz of the test cases, that array its just a number and u should return that number increased by +1 but in an array form. Use int(), str() this stuff and should be easy.... downvote tho for the complicated description "
                    },
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[9,9] and digits=[1,9,9]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "100 \\u0438 200\\n"
                    }
                ]
            },
            {
                "id": 1966992,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "Although the problem constraints don\\'t require it, for a more real-world scenario, I would want to consider the fact that numbers can be incredibly large, possibly exceeding the maximum limit of a long in Java. In such cases, a conversion to BigInteger and then performing the increment operation would work."
                    },
                    {
                        "username": "Jiraiya1",
                        "content": "public static int[] plusOne(int[] digits) {\\n\\n        if(digits.length == 1 && digits[0] == 9) {\\n            return new int[]{1,0};\\n        }\\n\\n      for(int i = digits.length-1; i>=0; i--) {\\n          \\n          if(digits[i] != 9) {\\n              digits[i] = digits[i] +1;\\n             return digits;\\n          }\\n      }\\n      return new int[]{};\\n    }\\n\\nI have a issue with this test case \\n\\n\\ndigits =\\n[9,9]\\nUse Testcase\\nOutput\\n[]\\nExpected\\n[1,0,0]"
                    },
                    {
                        "username": "devsoni5880",
                        "content": "Hello,\\nI am able to crack all the test cases but one tese case I am not able to achive is if digits = 9 the they want [1,0] in output so how do i do that?\\nthe length is 1 and if we add 1 , 0 then the length will incress and this will throw an error of index out of bound\\n\\nkindly help me."
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "Yous should use memory allocation"
                    },
                    {
                        "username": "Yeab13",
                        "content": "Incase you are using javascript , don\\'t forget to use BigInt as some of the tests cases hold big number"
                    },
                    {
                        "username": "Seethaphal",
                        "content": "This question is difficult to understand. what does this mean  \"where each digits[i] is the ith digit of the integer.\"  \\n\\nint[] x ={1,2,3} ith digit   x[0] is the zeroth digit of the integer? \\n\\nThe digits are ordered from most significant to least significant in left-to-right order.  right side digits are not required?\\n\\nThe large integer does not contain any leading 0\\'s. ?\\n"
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "what returnSize pointer stands for?\\n"
                    },
                    {
                        "username": "mng48301",
                        "content": "Make sure to fully understand a problem before you start trying to solve it. I misunderstood what they were asking for and wasted an hour wondering what went wrong. "
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Can we get some basic English comprehension checks on these tests? \\nSince when does \\'significant\\' mean \\'largest\\' or \\'biggest\\'? - significant is just the entirely incorrect word to use here, very confusing. "
                    },
                    {
                        "username": "HeatOn123",
                        "content": "I only got this cuz of the test cases, that array its just a number and u should return that number increased by +1 but in an array form. Use int(), str() this stuff and should be easy.... downvote tho for the complicated description "
                    },
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[9,9] and digits=[1,9,9]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "100 \\u0438 200\\n"
                    }
                ]
            },
            {
                "id": 1959180,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "Although the problem constraints don\\'t require it, for a more real-world scenario, I would want to consider the fact that numbers can be incredibly large, possibly exceeding the maximum limit of a long in Java. In such cases, a conversion to BigInteger and then performing the increment operation would work."
                    },
                    {
                        "username": "Jiraiya1",
                        "content": "public static int[] plusOne(int[] digits) {\\n\\n        if(digits.length == 1 && digits[0] == 9) {\\n            return new int[]{1,0};\\n        }\\n\\n      for(int i = digits.length-1; i>=0; i--) {\\n          \\n          if(digits[i] != 9) {\\n              digits[i] = digits[i] +1;\\n             return digits;\\n          }\\n      }\\n      return new int[]{};\\n    }\\n\\nI have a issue with this test case \\n\\n\\ndigits =\\n[9,9]\\nUse Testcase\\nOutput\\n[]\\nExpected\\n[1,0,0]"
                    },
                    {
                        "username": "devsoni5880",
                        "content": "Hello,\\nI am able to crack all the test cases but one tese case I am not able to achive is if digits = 9 the they want [1,0] in output so how do i do that?\\nthe length is 1 and if we add 1 , 0 then the length will incress and this will throw an error of index out of bound\\n\\nkindly help me."
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "Yous should use memory allocation"
                    },
                    {
                        "username": "Yeab13",
                        "content": "Incase you are using javascript , don\\'t forget to use BigInt as some of the tests cases hold big number"
                    },
                    {
                        "username": "Seethaphal",
                        "content": "This question is difficult to understand. what does this mean  \"where each digits[i] is the ith digit of the integer.\"  \\n\\nint[] x ={1,2,3} ith digit   x[0] is the zeroth digit of the integer? \\n\\nThe digits are ordered from most significant to least significant in left-to-right order.  right side digits are not required?\\n\\nThe large integer does not contain any leading 0\\'s. ?\\n"
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "what returnSize pointer stands for?\\n"
                    },
                    {
                        "username": "mng48301",
                        "content": "Make sure to fully understand a problem before you start trying to solve it. I misunderstood what they were asking for and wasted an hour wondering what went wrong. "
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Can we get some basic English comprehension checks on these tests? \\nSince when does \\'significant\\' mean \\'largest\\' or \\'biggest\\'? - significant is just the entirely incorrect word to use here, very confusing. "
                    },
                    {
                        "username": "HeatOn123",
                        "content": "I only got this cuz of the test cases, that array its just a number and u should return that number increased by +1 but in an array form. Use int(), str() this stuff and should be easy.... downvote tho for the complicated description "
                    },
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[9,9] and digits=[1,9,9]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "100 \\u0438 200\\n"
                    }
                ]
            },
            {
                "id": 1956445,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "Although the problem constraints don\\'t require it, for a more real-world scenario, I would want to consider the fact that numbers can be incredibly large, possibly exceeding the maximum limit of a long in Java. In such cases, a conversion to BigInteger and then performing the increment operation would work."
                    },
                    {
                        "username": "Jiraiya1",
                        "content": "public static int[] plusOne(int[] digits) {\\n\\n        if(digits.length == 1 && digits[0] == 9) {\\n            return new int[]{1,0};\\n        }\\n\\n      for(int i = digits.length-1; i>=0; i--) {\\n          \\n          if(digits[i] != 9) {\\n              digits[i] = digits[i] +1;\\n             return digits;\\n          }\\n      }\\n      return new int[]{};\\n    }\\n\\nI have a issue with this test case \\n\\n\\ndigits =\\n[9,9]\\nUse Testcase\\nOutput\\n[]\\nExpected\\n[1,0,0]"
                    },
                    {
                        "username": "devsoni5880",
                        "content": "Hello,\\nI am able to crack all the test cases but one tese case I am not able to achive is if digits = 9 the they want [1,0] in output so how do i do that?\\nthe length is 1 and if we add 1 , 0 then the length will incress and this will throw an error of index out of bound\\n\\nkindly help me."
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "Yous should use memory allocation"
                    },
                    {
                        "username": "Yeab13",
                        "content": "Incase you are using javascript , don\\'t forget to use BigInt as some of the tests cases hold big number"
                    },
                    {
                        "username": "Seethaphal",
                        "content": "This question is difficult to understand. what does this mean  \"where each digits[i] is the ith digit of the integer.\"  \\n\\nint[] x ={1,2,3} ith digit   x[0] is the zeroth digit of the integer? \\n\\nThe digits are ordered from most significant to least significant in left-to-right order.  right side digits are not required?\\n\\nThe large integer does not contain any leading 0\\'s. ?\\n"
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "what returnSize pointer stands for?\\n"
                    },
                    {
                        "username": "mng48301",
                        "content": "Make sure to fully understand a problem before you start trying to solve it. I misunderstood what they were asking for and wasted an hour wondering what went wrong. "
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Can we get some basic English comprehension checks on these tests? \\nSince when does \\'significant\\' mean \\'largest\\' or \\'biggest\\'? - significant is just the entirely incorrect word to use here, very confusing. "
                    },
                    {
                        "username": "HeatOn123",
                        "content": "I only got this cuz of the test cases, that array its just a number and u should return that number increased by +1 but in an array form. Use int(), str() this stuff and should be easy.... downvote tho for the complicated description "
                    },
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[9,9] and digits=[1,9,9]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "100 \\u0438 200\\n"
                    }
                ]
            },
            {
                "id": 1942942,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "Although the problem constraints don\\'t require it, for a more real-world scenario, I would want to consider the fact that numbers can be incredibly large, possibly exceeding the maximum limit of a long in Java. In such cases, a conversion to BigInteger and then performing the increment operation would work."
                    },
                    {
                        "username": "Jiraiya1",
                        "content": "public static int[] plusOne(int[] digits) {\\n\\n        if(digits.length == 1 && digits[0] == 9) {\\n            return new int[]{1,0};\\n        }\\n\\n      for(int i = digits.length-1; i>=0; i--) {\\n          \\n          if(digits[i] != 9) {\\n              digits[i] = digits[i] +1;\\n             return digits;\\n          }\\n      }\\n      return new int[]{};\\n    }\\n\\nI have a issue with this test case \\n\\n\\ndigits =\\n[9,9]\\nUse Testcase\\nOutput\\n[]\\nExpected\\n[1,0,0]"
                    },
                    {
                        "username": "devsoni5880",
                        "content": "Hello,\\nI am able to crack all the test cases but one tese case I am not able to achive is if digits = 9 the they want [1,0] in output so how do i do that?\\nthe length is 1 and if we add 1 , 0 then the length will incress and this will throw an error of index out of bound\\n\\nkindly help me."
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "Yous should use memory allocation"
                    },
                    {
                        "username": "Yeab13",
                        "content": "Incase you are using javascript , don\\'t forget to use BigInt as some of the tests cases hold big number"
                    },
                    {
                        "username": "Seethaphal",
                        "content": "This question is difficult to understand. what does this mean  \"where each digits[i] is the ith digit of the integer.\"  \\n\\nint[] x ={1,2,3} ith digit   x[0] is the zeroth digit of the integer? \\n\\nThe digits are ordered from most significant to least significant in left-to-right order.  right side digits are not required?\\n\\nThe large integer does not contain any leading 0\\'s. ?\\n"
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "what returnSize pointer stands for?\\n"
                    },
                    {
                        "username": "mng48301",
                        "content": "Make sure to fully understand a problem before you start trying to solve it. I misunderstood what they were asking for and wasted an hour wondering what went wrong. "
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Can we get some basic English comprehension checks on these tests? \\nSince when does \\'significant\\' mean \\'largest\\' or \\'biggest\\'? - significant is just the entirely incorrect word to use here, very confusing. "
                    },
                    {
                        "username": "HeatOn123",
                        "content": "I only got this cuz of the test cases, that array its just a number and u should return that number increased by +1 but in an array form. Use int(), str() this stuff and should be easy.... downvote tho for the complicated description "
                    },
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[9,9] and digits=[1,9,9]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "100 \\u0438 200\\n"
                    }
                ]
            },
            {
                "id": 1941708,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "Although the problem constraints don\\'t require it, for a more real-world scenario, I would want to consider the fact that numbers can be incredibly large, possibly exceeding the maximum limit of a long in Java. In such cases, a conversion to BigInteger and then performing the increment operation would work."
                    },
                    {
                        "username": "Jiraiya1",
                        "content": "public static int[] plusOne(int[] digits) {\\n\\n        if(digits.length == 1 && digits[0] == 9) {\\n            return new int[]{1,0};\\n        }\\n\\n      for(int i = digits.length-1; i>=0; i--) {\\n          \\n          if(digits[i] != 9) {\\n              digits[i] = digits[i] +1;\\n             return digits;\\n          }\\n      }\\n      return new int[]{};\\n    }\\n\\nI have a issue with this test case \\n\\n\\ndigits =\\n[9,9]\\nUse Testcase\\nOutput\\n[]\\nExpected\\n[1,0,0]"
                    },
                    {
                        "username": "devsoni5880",
                        "content": "Hello,\\nI am able to crack all the test cases but one tese case I am not able to achive is if digits = 9 the they want [1,0] in output so how do i do that?\\nthe length is 1 and if we add 1 , 0 then the length will incress and this will throw an error of index out of bound\\n\\nkindly help me."
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "Yous should use memory allocation"
                    },
                    {
                        "username": "Yeab13",
                        "content": "Incase you are using javascript , don\\'t forget to use BigInt as some of the tests cases hold big number"
                    },
                    {
                        "username": "Seethaphal",
                        "content": "This question is difficult to understand. what does this mean  \"where each digits[i] is the ith digit of the integer.\"  \\n\\nint[] x ={1,2,3} ith digit   x[0] is the zeroth digit of the integer? \\n\\nThe digits are ordered from most significant to least significant in left-to-right order.  right side digits are not required?\\n\\nThe large integer does not contain any leading 0\\'s. ?\\n"
                    },
                    {
                        "username": "Boobs_Inspector",
                        "content": "what returnSize pointer stands for?\\n"
                    },
                    {
                        "username": "mng48301",
                        "content": "Make sure to fully understand a problem before you start trying to solve it. I misunderstood what they were asking for and wasted an hour wondering what went wrong. "
                    },
                    {
                        "username": "charlescolfer",
                        "content": "Can we get some basic English comprehension checks on these tests? \\nSince when does \\'significant\\' mean \\'largest\\' or \\'biggest\\'? - significant is just the entirely incorrect word to use here, very confusing. "
                    },
                    {
                        "username": "HeatOn123",
                        "content": "I only got this cuz of the test cases, that array its just a number and u should return that number increased by +1 but in an array form. Use int(), str() this stuff and should be easy.... downvote tho for the complicated description "
                    },
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[9,9] and digits=[1,9,9]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "100 \\u0438 200\\n"
                    }
                ]
            },
            {
                "id": 1941687,
                "content": [
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[1,5,9,]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "160"
                    },
                    {
                        "username": "Msey",
                        "content": "Get asked that question at Google equals win the lottery"
                    },
                    {
                        "username": "tanishq29",
                        "content": " can anyone help me to modify this code for 3rd test case where value is 9,\\nint [] arr = new int[digits.length];\\n        for(int i = 0 ; i<digits.length-1 ; i++){\\n            arr[i] = digits[i];\\n            int s = digits.length-1;\\n            arr[s] = digits[s] + 1;\\n        }\\n        \\n        return arr;"
                    },
                    {
                        "username": "b20ec013",
                        "content": "for (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t}\\n\\tdigits[i] = 0;\\n}\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;                   like this\\n"
                    },
                    {
                        "username": "b20ec013",
                        "content": "create if condition in loop and check if last digit is 9 increment the size of array and add zero at last"
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "Using while loop got output as [9] -> [1] expected is [1,0] why so,"
                    },
                    {
                        "username": "omarkh999",
                        "content": "why the hell can not I use more than one function and mingle them in PlusOne. He keeps telling me that the name of the function is not Identified  as though I did not write it."
                    },
                    {
                        "username": "eagle_s_",
                        "content": "can somebody help me why i'm getting run time error---------\n\n\n\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int n = digits.size()-1;\n        int num = digits[n] + 1;\n        int rem = -1;\n        bool rem1 = false;\n        if(num >= 10)\n        {\n            rem = 1;\n            rem1 = true;\n        }\n        else\n        {\n            digits[n] = num;\n        }\n        if(rem1 != false)\n        {\n            digits[n] = 0;\n            for(int i = digits.size()-2; i >= 0; i--)\n            {\n                digits[i] = digits[i] + rem;\n                if(digits[i] >= 10)\n                {\n                    digits[i] = 0;\n                    rem = 1;\n                }\n                else\n                {\n                    rem = -1;\n                    rem1 = false;\n                    break;\n                }\n            }\n        }\n        if(rem1 != false)\n        {\n            vector<int> ans;\n            ans[0] = 1;\n            for(int i = 0; i < digits.size(); i++)\n            {\n                ans[i+1] = digits[i];\n            }\n            return ans;\n        }\n        return digits;\n    }\n};"
                    },
                    {
                        "username": "shahareyar601",
                        "content": "can someone tell me why it is not working for {9}\\n\\nvector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n       for(int i=n-1;i>0;i--){\\n         if(digits[i]!=9){\\n         digits[i]=digits[i]+1;\\n         break;\\n         }\\n         else\\n         digits[i]=0;\\n         \\n       } \\n       if(digits[0]==0){\\n       digits.insert(digits.begin(),1);\\n       }\\n        return digits;\\n    }"
                    },
                    {
                        "username": "vighnesh_rasal",
                        "content": "I am trying to use BigInteger in java but compiler says \\'cannot find symbol BigInteger.\\' what seems to be the problem? "
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "you need to import Biginteger."
                    },
                    {
                        "username": "Hagar_",
                        "content": "Hello,\\n\\nI\\'m trying to join digits in a string using `s = digits.join(\"\");`. Yet, for case [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3] it neglects the last three digits and ouput 6145390195186705000\\n\\nI even used loops to check, but still returns the same answer\\n\\n```\\nfor (let i = 0; i < digits.length; i++) {\\n      text += digits[i];\\n      console.log(digits[i]);\\n    }\\n```\\n\\nAny idea why this happens?"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        list = []\\n        digit = \\'\\'\\n        for i in digits:\\n            digit += str(i)\\n        num = 1\\n        num += int(digit)\\n        num1 = str(num)\\n        for i in num1:\\n            list.append(int(i))\\n        return list"
                    }
                ]
            },
            {
                "id": 1934735,
                "content": [
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[1,5,9,]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "160"
                    },
                    {
                        "username": "Msey",
                        "content": "Get asked that question at Google equals win the lottery"
                    },
                    {
                        "username": "tanishq29",
                        "content": " can anyone help me to modify this code for 3rd test case where value is 9,\\nint [] arr = new int[digits.length];\\n        for(int i = 0 ; i<digits.length-1 ; i++){\\n            arr[i] = digits[i];\\n            int s = digits.length-1;\\n            arr[s] = digits[s] + 1;\\n        }\\n        \\n        return arr;"
                    },
                    {
                        "username": "b20ec013",
                        "content": "for (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t}\\n\\tdigits[i] = 0;\\n}\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;                   like this\\n"
                    },
                    {
                        "username": "b20ec013",
                        "content": "create if condition in loop and check if last digit is 9 increment the size of array and add zero at last"
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "Using while loop got output as [9] -> [1] expected is [1,0] why so,"
                    },
                    {
                        "username": "omarkh999",
                        "content": "why the hell can not I use more than one function and mingle them in PlusOne. He keeps telling me that the name of the function is not Identified  as though I did not write it."
                    },
                    {
                        "username": "eagle_s_",
                        "content": "can somebody help me why i'm getting run time error---------\n\n\n\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int n = digits.size()-1;\n        int num = digits[n] + 1;\n        int rem = -1;\n        bool rem1 = false;\n        if(num >= 10)\n        {\n            rem = 1;\n            rem1 = true;\n        }\n        else\n        {\n            digits[n] = num;\n        }\n        if(rem1 != false)\n        {\n            digits[n] = 0;\n            for(int i = digits.size()-2; i >= 0; i--)\n            {\n                digits[i] = digits[i] + rem;\n                if(digits[i] >= 10)\n                {\n                    digits[i] = 0;\n                    rem = 1;\n                }\n                else\n                {\n                    rem = -1;\n                    rem1 = false;\n                    break;\n                }\n            }\n        }\n        if(rem1 != false)\n        {\n            vector<int> ans;\n            ans[0] = 1;\n            for(int i = 0; i < digits.size(); i++)\n            {\n                ans[i+1] = digits[i];\n            }\n            return ans;\n        }\n        return digits;\n    }\n};"
                    },
                    {
                        "username": "shahareyar601",
                        "content": "can someone tell me why it is not working for {9}\\n\\nvector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n       for(int i=n-1;i>0;i--){\\n         if(digits[i]!=9){\\n         digits[i]=digits[i]+1;\\n         break;\\n         }\\n         else\\n         digits[i]=0;\\n         \\n       } \\n       if(digits[0]==0){\\n       digits.insert(digits.begin(),1);\\n       }\\n        return digits;\\n    }"
                    },
                    {
                        "username": "vighnesh_rasal",
                        "content": "I am trying to use BigInteger in java but compiler says \\'cannot find symbol BigInteger.\\' what seems to be the problem? "
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "you need to import Biginteger."
                    },
                    {
                        "username": "Hagar_",
                        "content": "Hello,\\n\\nI\\'m trying to join digits in a string using `s = digits.join(\"\");`. Yet, for case [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3] it neglects the last three digits and ouput 6145390195186705000\\n\\nI even used loops to check, but still returns the same answer\\n\\n```\\nfor (let i = 0; i < digits.length; i++) {\\n      text += digits[i];\\n      console.log(digits[i]);\\n    }\\n```\\n\\nAny idea why this happens?"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        list = []\\n        digit = \\'\\'\\n        for i in digits:\\n            digit += str(i)\\n        num = 1\\n        num += int(digit)\\n        num1 = str(num)\\n        for i in num1:\\n            list.append(int(i))\\n        return list"
                    }
                ]
            },
            {
                "id": 1922431,
                "content": [
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[1,5,9,]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "160"
                    },
                    {
                        "username": "Msey",
                        "content": "Get asked that question at Google equals win the lottery"
                    },
                    {
                        "username": "tanishq29",
                        "content": " can anyone help me to modify this code for 3rd test case where value is 9,\\nint [] arr = new int[digits.length];\\n        for(int i = 0 ; i<digits.length-1 ; i++){\\n            arr[i] = digits[i];\\n            int s = digits.length-1;\\n            arr[s] = digits[s] + 1;\\n        }\\n        \\n        return arr;"
                    },
                    {
                        "username": "b20ec013",
                        "content": "for (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t}\\n\\tdigits[i] = 0;\\n}\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;                   like this\\n"
                    },
                    {
                        "username": "b20ec013",
                        "content": "create if condition in loop and check if last digit is 9 increment the size of array and add zero at last"
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "Using while loop got output as [9] -> [1] expected is [1,0] why so,"
                    },
                    {
                        "username": "omarkh999",
                        "content": "why the hell can not I use more than one function and mingle them in PlusOne. He keeps telling me that the name of the function is not Identified  as though I did not write it."
                    },
                    {
                        "username": "eagle_s_",
                        "content": "can somebody help me why i'm getting run time error---------\n\n\n\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int n = digits.size()-1;\n        int num = digits[n] + 1;\n        int rem = -1;\n        bool rem1 = false;\n        if(num >= 10)\n        {\n            rem = 1;\n            rem1 = true;\n        }\n        else\n        {\n            digits[n] = num;\n        }\n        if(rem1 != false)\n        {\n            digits[n] = 0;\n            for(int i = digits.size()-2; i >= 0; i--)\n            {\n                digits[i] = digits[i] + rem;\n                if(digits[i] >= 10)\n                {\n                    digits[i] = 0;\n                    rem = 1;\n                }\n                else\n                {\n                    rem = -1;\n                    rem1 = false;\n                    break;\n                }\n            }\n        }\n        if(rem1 != false)\n        {\n            vector<int> ans;\n            ans[0] = 1;\n            for(int i = 0; i < digits.size(); i++)\n            {\n                ans[i+1] = digits[i];\n            }\n            return ans;\n        }\n        return digits;\n    }\n};"
                    },
                    {
                        "username": "shahareyar601",
                        "content": "can someone tell me why it is not working for {9}\\n\\nvector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n       for(int i=n-1;i>0;i--){\\n         if(digits[i]!=9){\\n         digits[i]=digits[i]+1;\\n         break;\\n         }\\n         else\\n         digits[i]=0;\\n         \\n       } \\n       if(digits[0]==0){\\n       digits.insert(digits.begin(),1);\\n       }\\n        return digits;\\n    }"
                    },
                    {
                        "username": "vighnesh_rasal",
                        "content": "I am trying to use BigInteger in java but compiler says \\'cannot find symbol BigInteger.\\' what seems to be the problem? "
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "you need to import Biginteger."
                    },
                    {
                        "username": "Hagar_",
                        "content": "Hello,\\n\\nI\\'m trying to join digits in a string using `s = digits.join(\"\");`. Yet, for case [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3] it neglects the last three digits and ouput 6145390195186705000\\n\\nI even used loops to check, but still returns the same answer\\n\\n```\\nfor (let i = 0; i < digits.length; i++) {\\n      text += digits[i];\\n      console.log(digits[i]);\\n    }\\n```\\n\\nAny idea why this happens?"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        list = []\\n        digit = \\'\\'\\n        for i in digits:\\n            digit += str(i)\\n        num = 1\\n        num += int(digit)\\n        num1 = str(num)\\n        for i in num1:\\n            list.append(int(i))\\n        return list"
                    }
                ]
            },
            {
                "id": 1918670,
                "content": [
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[1,5,9,]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "160"
                    },
                    {
                        "username": "Msey",
                        "content": "Get asked that question at Google equals win the lottery"
                    },
                    {
                        "username": "tanishq29",
                        "content": " can anyone help me to modify this code for 3rd test case where value is 9,\\nint [] arr = new int[digits.length];\\n        for(int i = 0 ; i<digits.length-1 ; i++){\\n            arr[i] = digits[i];\\n            int s = digits.length-1;\\n            arr[s] = digits[s] + 1;\\n        }\\n        \\n        return arr;"
                    },
                    {
                        "username": "b20ec013",
                        "content": "for (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t}\\n\\tdigits[i] = 0;\\n}\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;                   like this\\n"
                    },
                    {
                        "username": "b20ec013",
                        "content": "create if condition in loop and check if last digit is 9 increment the size of array and add zero at last"
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "Using while loop got output as [9] -> [1] expected is [1,0] why so,"
                    },
                    {
                        "username": "omarkh999",
                        "content": "why the hell can not I use more than one function and mingle them in PlusOne. He keeps telling me that the name of the function is not Identified  as though I did not write it."
                    },
                    {
                        "username": "eagle_s_",
                        "content": "can somebody help me why i'm getting run time error---------\n\n\n\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int n = digits.size()-1;\n        int num = digits[n] + 1;\n        int rem = -1;\n        bool rem1 = false;\n        if(num >= 10)\n        {\n            rem = 1;\n            rem1 = true;\n        }\n        else\n        {\n            digits[n] = num;\n        }\n        if(rem1 != false)\n        {\n            digits[n] = 0;\n            for(int i = digits.size()-2; i >= 0; i--)\n            {\n                digits[i] = digits[i] + rem;\n                if(digits[i] >= 10)\n                {\n                    digits[i] = 0;\n                    rem = 1;\n                }\n                else\n                {\n                    rem = -1;\n                    rem1 = false;\n                    break;\n                }\n            }\n        }\n        if(rem1 != false)\n        {\n            vector<int> ans;\n            ans[0] = 1;\n            for(int i = 0; i < digits.size(); i++)\n            {\n                ans[i+1] = digits[i];\n            }\n            return ans;\n        }\n        return digits;\n    }\n};"
                    },
                    {
                        "username": "shahareyar601",
                        "content": "can someone tell me why it is not working for {9}\\n\\nvector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n       for(int i=n-1;i>0;i--){\\n         if(digits[i]!=9){\\n         digits[i]=digits[i]+1;\\n         break;\\n         }\\n         else\\n         digits[i]=0;\\n         \\n       } \\n       if(digits[0]==0){\\n       digits.insert(digits.begin(),1);\\n       }\\n        return digits;\\n    }"
                    },
                    {
                        "username": "vighnesh_rasal",
                        "content": "I am trying to use BigInteger in java but compiler says \\'cannot find symbol BigInteger.\\' what seems to be the problem? "
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "you need to import Biginteger."
                    },
                    {
                        "username": "Hagar_",
                        "content": "Hello,\\n\\nI\\'m trying to join digits in a string using `s = digits.join(\"\");`. Yet, for case [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3] it neglects the last three digits and ouput 6145390195186705000\\n\\nI even used loops to check, but still returns the same answer\\n\\n```\\nfor (let i = 0; i < digits.length; i++) {\\n      text += digits[i];\\n      console.log(digits[i]);\\n    }\\n```\\n\\nAny idea why this happens?"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        list = []\\n        digit = \\'\\'\\n        for i in digits:\\n            digit += str(i)\\n        num = 1\\n        num += int(digit)\\n        num1 = str(num)\\n        for i in num1:\\n            list.append(int(i))\\n        return list"
                    }
                ]
            },
            {
                "id": 1908466,
                "content": [
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[1,5,9,]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "160"
                    },
                    {
                        "username": "Msey",
                        "content": "Get asked that question at Google equals win the lottery"
                    },
                    {
                        "username": "tanishq29",
                        "content": " can anyone help me to modify this code for 3rd test case where value is 9,\\nint [] arr = new int[digits.length];\\n        for(int i = 0 ; i<digits.length-1 ; i++){\\n            arr[i] = digits[i];\\n            int s = digits.length-1;\\n            arr[s] = digits[s] + 1;\\n        }\\n        \\n        return arr;"
                    },
                    {
                        "username": "b20ec013",
                        "content": "for (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t}\\n\\tdigits[i] = 0;\\n}\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;                   like this\\n"
                    },
                    {
                        "username": "b20ec013",
                        "content": "create if condition in loop and check if last digit is 9 increment the size of array and add zero at last"
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "Using while loop got output as [9] -> [1] expected is [1,0] why so,"
                    },
                    {
                        "username": "omarkh999",
                        "content": "why the hell can not I use more than one function and mingle them in PlusOne. He keeps telling me that the name of the function is not Identified  as though I did not write it."
                    },
                    {
                        "username": "eagle_s_",
                        "content": "can somebody help me why i'm getting run time error---------\n\n\n\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int n = digits.size()-1;\n        int num = digits[n] + 1;\n        int rem = -1;\n        bool rem1 = false;\n        if(num >= 10)\n        {\n            rem = 1;\n            rem1 = true;\n        }\n        else\n        {\n            digits[n] = num;\n        }\n        if(rem1 != false)\n        {\n            digits[n] = 0;\n            for(int i = digits.size()-2; i >= 0; i--)\n            {\n                digits[i] = digits[i] + rem;\n                if(digits[i] >= 10)\n                {\n                    digits[i] = 0;\n                    rem = 1;\n                }\n                else\n                {\n                    rem = -1;\n                    rem1 = false;\n                    break;\n                }\n            }\n        }\n        if(rem1 != false)\n        {\n            vector<int> ans;\n            ans[0] = 1;\n            for(int i = 0; i < digits.size(); i++)\n            {\n                ans[i+1] = digits[i];\n            }\n            return ans;\n        }\n        return digits;\n    }\n};"
                    },
                    {
                        "username": "shahareyar601",
                        "content": "can someone tell me why it is not working for {9}\\n\\nvector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n       for(int i=n-1;i>0;i--){\\n         if(digits[i]!=9){\\n         digits[i]=digits[i]+1;\\n         break;\\n         }\\n         else\\n         digits[i]=0;\\n         \\n       } \\n       if(digits[0]==0){\\n       digits.insert(digits.begin(),1);\\n       }\\n        return digits;\\n    }"
                    },
                    {
                        "username": "vighnesh_rasal",
                        "content": "I am trying to use BigInteger in java but compiler says \\'cannot find symbol BigInteger.\\' what seems to be the problem? "
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "you need to import Biginteger."
                    },
                    {
                        "username": "Hagar_",
                        "content": "Hello,\\n\\nI\\'m trying to join digits in a string using `s = digits.join(\"\");`. Yet, for case [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3] it neglects the last three digits and ouput 6145390195186705000\\n\\nI even used loops to check, but still returns the same answer\\n\\n```\\nfor (let i = 0; i < digits.length; i++) {\\n      text += digits[i];\\n      console.log(digits[i]);\\n    }\\n```\\n\\nAny idea why this happens?"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        list = []\\n        digit = \\'\\'\\n        for i in digits:\\n            digit += str(i)\\n        num = 1\\n        num += int(digit)\\n        num1 = str(num)\\n        for i in num1:\\n            list.append(int(i))\\n        return list"
                    }
                ]
            },
            {
                "id": 1907090,
                "content": [
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[1,5,9,]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "160"
                    },
                    {
                        "username": "Msey",
                        "content": "Get asked that question at Google equals win the lottery"
                    },
                    {
                        "username": "tanishq29",
                        "content": " can anyone help me to modify this code for 3rd test case where value is 9,\\nint [] arr = new int[digits.length];\\n        for(int i = 0 ; i<digits.length-1 ; i++){\\n            arr[i] = digits[i];\\n            int s = digits.length-1;\\n            arr[s] = digits[s] + 1;\\n        }\\n        \\n        return arr;"
                    },
                    {
                        "username": "b20ec013",
                        "content": "for (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t}\\n\\tdigits[i] = 0;\\n}\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;                   like this\\n"
                    },
                    {
                        "username": "b20ec013",
                        "content": "create if condition in loop and check if last digit is 9 increment the size of array and add zero at last"
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "Using while loop got output as [9] -> [1] expected is [1,0] why so,"
                    },
                    {
                        "username": "omarkh999",
                        "content": "why the hell can not I use more than one function and mingle them in PlusOne. He keeps telling me that the name of the function is not Identified  as though I did not write it."
                    },
                    {
                        "username": "eagle_s_",
                        "content": "can somebody help me why i'm getting run time error---------\n\n\n\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int n = digits.size()-1;\n        int num = digits[n] + 1;\n        int rem = -1;\n        bool rem1 = false;\n        if(num >= 10)\n        {\n            rem = 1;\n            rem1 = true;\n        }\n        else\n        {\n            digits[n] = num;\n        }\n        if(rem1 != false)\n        {\n            digits[n] = 0;\n            for(int i = digits.size()-2; i >= 0; i--)\n            {\n                digits[i] = digits[i] + rem;\n                if(digits[i] >= 10)\n                {\n                    digits[i] = 0;\n                    rem = 1;\n                }\n                else\n                {\n                    rem = -1;\n                    rem1 = false;\n                    break;\n                }\n            }\n        }\n        if(rem1 != false)\n        {\n            vector<int> ans;\n            ans[0] = 1;\n            for(int i = 0; i < digits.size(); i++)\n            {\n                ans[i+1] = digits[i];\n            }\n            return ans;\n        }\n        return digits;\n    }\n};"
                    },
                    {
                        "username": "shahareyar601",
                        "content": "can someone tell me why it is not working for {9}\\n\\nvector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n       for(int i=n-1;i>0;i--){\\n         if(digits[i]!=9){\\n         digits[i]=digits[i]+1;\\n         break;\\n         }\\n         else\\n         digits[i]=0;\\n         \\n       } \\n       if(digits[0]==0){\\n       digits.insert(digits.begin(),1);\\n       }\\n        return digits;\\n    }"
                    },
                    {
                        "username": "vighnesh_rasal",
                        "content": "I am trying to use BigInteger in java but compiler says \\'cannot find symbol BigInteger.\\' what seems to be the problem? "
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "you need to import Biginteger."
                    },
                    {
                        "username": "Hagar_",
                        "content": "Hello,\\n\\nI\\'m trying to join digits in a string using `s = digits.join(\"\");`. Yet, for case [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3] it neglects the last three digits and ouput 6145390195186705000\\n\\nI even used loops to check, but still returns the same answer\\n\\n```\\nfor (let i = 0; i < digits.length; i++) {\\n      text += digits[i];\\n      console.log(digits[i]);\\n    }\\n```\\n\\nAny idea why this happens?"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        list = []\\n        digit = \\'\\'\\n        for i in digits:\\n            digit += str(i)\\n        num = 1\\n        num += int(digit)\\n        num1 = str(num)\\n        for i in num1:\\n            list.append(int(i))\\n        return list"
                    }
                ]
            },
            {
                "id": 1891365,
                "content": [
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[1,5,9,]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "160"
                    },
                    {
                        "username": "Msey",
                        "content": "Get asked that question at Google equals win the lottery"
                    },
                    {
                        "username": "tanishq29",
                        "content": " can anyone help me to modify this code for 3rd test case where value is 9,\\nint [] arr = new int[digits.length];\\n        for(int i = 0 ; i<digits.length-1 ; i++){\\n            arr[i] = digits[i];\\n            int s = digits.length-1;\\n            arr[s] = digits[s] + 1;\\n        }\\n        \\n        return arr;"
                    },
                    {
                        "username": "b20ec013",
                        "content": "for (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t}\\n\\tdigits[i] = 0;\\n}\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;                   like this\\n"
                    },
                    {
                        "username": "b20ec013",
                        "content": "create if condition in loop and check if last digit is 9 increment the size of array and add zero at last"
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "Using while loop got output as [9] -> [1] expected is [1,0] why so,"
                    },
                    {
                        "username": "omarkh999",
                        "content": "why the hell can not I use more than one function and mingle them in PlusOne. He keeps telling me that the name of the function is not Identified  as though I did not write it."
                    },
                    {
                        "username": "eagle_s_",
                        "content": "can somebody help me why i'm getting run time error---------\n\n\n\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int n = digits.size()-1;\n        int num = digits[n] + 1;\n        int rem = -1;\n        bool rem1 = false;\n        if(num >= 10)\n        {\n            rem = 1;\n            rem1 = true;\n        }\n        else\n        {\n            digits[n] = num;\n        }\n        if(rem1 != false)\n        {\n            digits[n] = 0;\n            for(int i = digits.size()-2; i >= 0; i--)\n            {\n                digits[i] = digits[i] + rem;\n                if(digits[i] >= 10)\n                {\n                    digits[i] = 0;\n                    rem = 1;\n                }\n                else\n                {\n                    rem = -1;\n                    rem1 = false;\n                    break;\n                }\n            }\n        }\n        if(rem1 != false)\n        {\n            vector<int> ans;\n            ans[0] = 1;\n            for(int i = 0; i < digits.size(); i++)\n            {\n                ans[i+1] = digits[i];\n            }\n            return ans;\n        }\n        return digits;\n    }\n};"
                    },
                    {
                        "username": "shahareyar601",
                        "content": "can someone tell me why it is not working for {9}\\n\\nvector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n       for(int i=n-1;i>0;i--){\\n         if(digits[i]!=9){\\n         digits[i]=digits[i]+1;\\n         break;\\n         }\\n         else\\n         digits[i]=0;\\n         \\n       } \\n       if(digits[0]==0){\\n       digits.insert(digits.begin(),1);\\n       }\\n        return digits;\\n    }"
                    },
                    {
                        "username": "vighnesh_rasal",
                        "content": "I am trying to use BigInteger in java but compiler says \\'cannot find symbol BigInteger.\\' what seems to be the problem? "
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "you need to import Biginteger."
                    },
                    {
                        "username": "Hagar_",
                        "content": "Hello,\\n\\nI\\'m trying to join digits in a string using `s = digits.join(\"\");`. Yet, for case [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3] it neglects the last three digits and ouput 6145390195186705000\\n\\nI even used loops to check, but still returns the same answer\\n\\n```\\nfor (let i = 0; i < digits.length; i++) {\\n      text += digits[i];\\n      console.log(digits[i]);\\n    }\\n```\\n\\nAny idea why this happens?"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        list = []\\n        digit = \\'\\'\\n        for i in digits:\\n            digit += str(i)\\n        num = 1\\n        num += int(digit)\\n        num1 = str(num)\\n        for i in num1:\\n            list.append(int(i))\\n        return list"
                    }
                ]
            },
            {
                "id": 1884705,
                "content": [
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[1,5,9,]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "160"
                    },
                    {
                        "username": "Msey",
                        "content": "Get asked that question at Google equals win the lottery"
                    },
                    {
                        "username": "tanishq29",
                        "content": " can anyone help me to modify this code for 3rd test case where value is 9,\\nint [] arr = new int[digits.length];\\n        for(int i = 0 ; i<digits.length-1 ; i++){\\n            arr[i] = digits[i];\\n            int s = digits.length-1;\\n            arr[s] = digits[s] + 1;\\n        }\\n        \\n        return arr;"
                    },
                    {
                        "username": "b20ec013",
                        "content": "for (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t}\\n\\tdigits[i] = 0;\\n}\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;                   like this\\n"
                    },
                    {
                        "username": "b20ec013",
                        "content": "create if condition in loop and check if last digit is 9 increment the size of array and add zero at last"
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "Using while loop got output as [9] -> [1] expected is [1,0] why so,"
                    },
                    {
                        "username": "omarkh999",
                        "content": "why the hell can not I use more than one function and mingle them in PlusOne. He keeps telling me that the name of the function is not Identified  as though I did not write it."
                    },
                    {
                        "username": "eagle_s_",
                        "content": "can somebody help me why i'm getting run time error---------\n\n\n\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int n = digits.size()-1;\n        int num = digits[n] + 1;\n        int rem = -1;\n        bool rem1 = false;\n        if(num >= 10)\n        {\n            rem = 1;\n            rem1 = true;\n        }\n        else\n        {\n            digits[n] = num;\n        }\n        if(rem1 != false)\n        {\n            digits[n] = 0;\n            for(int i = digits.size()-2; i >= 0; i--)\n            {\n                digits[i] = digits[i] + rem;\n                if(digits[i] >= 10)\n                {\n                    digits[i] = 0;\n                    rem = 1;\n                }\n                else\n                {\n                    rem = -1;\n                    rem1 = false;\n                    break;\n                }\n            }\n        }\n        if(rem1 != false)\n        {\n            vector<int> ans;\n            ans[0] = 1;\n            for(int i = 0; i < digits.size(); i++)\n            {\n                ans[i+1] = digits[i];\n            }\n            return ans;\n        }\n        return digits;\n    }\n};"
                    },
                    {
                        "username": "shahareyar601",
                        "content": "can someone tell me why it is not working for {9}\\n\\nvector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n       for(int i=n-1;i>0;i--){\\n         if(digits[i]!=9){\\n         digits[i]=digits[i]+1;\\n         break;\\n         }\\n         else\\n         digits[i]=0;\\n         \\n       } \\n       if(digits[0]==0){\\n       digits.insert(digits.begin(),1);\\n       }\\n        return digits;\\n    }"
                    },
                    {
                        "username": "vighnesh_rasal",
                        "content": "I am trying to use BigInteger in java but compiler says \\'cannot find symbol BigInteger.\\' what seems to be the problem? "
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "you need to import Biginteger."
                    },
                    {
                        "username": "Hagar_",
                        "content": "Hello,\\n\\nI\\'m trying to join digits in a string using `s = digits.join(\"\");`. Yet, for case [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3] it neglects the last three digits and ouput 6145390195186705000\\n\\nI even used loops to check, but still returns the same answer\\n\\n```\\nfor (let i = 0; i < digits.length; i++) {\\n      text += digits[i];\\n      console.log(digits[i]);\\n    }\\n```\\n\\nAny idea why this happens?"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        list = []\\n        digit = \\'\\'\\n        for i in digits:\\n            digit += str(i)\\n        num = 1\\n        num += int(digit)\\n        num1 = str(num)\\n        for i in num1:\\n            list.append(int(i))\\n        return list"
                    }
                ]
            },
            {
                "id": 1883693,
                "content": [
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[1,5,9,]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "160"
                    },
                    {
                        "username": "Msey",
                        "content": "Get asked that question at Google equals win the lottery"
                    },
                    {
                        "username": "tanishq29",
                        "content": " can anyone help me to modify this code for 3rd test case where value is 9,\\nint [] arr = new int[digits.length];\\n        for(int i = 0 ; i<digits.length-1 ; i++){\\n            arr[i] = digits[i];\\n            int s = digits.length-1;\\n            arr[s] = digits[s] + 1;\\n        }\\n        \\n        return arr;"
                    },
                    {
                        "username": "b20ec013",
                        "content": "for (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t}\\n\\tdigits[i] = 0;\\n}\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;                   like this\\n"
                    },
                    {
                        "username": "b20ec013",
                        "content": "create if condition in loop and check if last digit is 9 increment the size of array and add zero at last"
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "Using while loop got output as [9] -> [1] expected is [1,0] why so,"
                    },
                    {
                        "username": "omarkh999",
                        "content": "why the hell can not I use more than one function and mingle them in PlusOne. He keeps telling me that the name of the function is not Identified  as though I did not write it."
                    },
                    {
                        "username": "eagle_s_",
                        "content": "can somebody help me why i'm getting run time error---------\n\n\n\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int n = digits.size()-1;\n        int num = digits[n] + 1;\n        int rem = -1;\n        bool rem1 = false;\n        if(num >= 10)\n        {\n            rem = 1;\n            rem1 = true;\n        }\n        else\n        {\n            digits[n] = num;\n        }\n        if(rem1 != false)\n        {\n            digits[n] = 0;\n            for(int i = digits.size()-2; i >= 0; i--)\n            {\n                digits[i] = digits[i] + rem;\n                if(digits[i] >= 10)\n                {\n                    digits[i] = 0;\n                    rem = 1;\n                }\n                else\n                {\n                    rem = -1;\n                    rem1 = false;\n                    break;\n                }\n            }\n        }\n        if(rem1 != false)\n        {\n            vector<int> ans;\n            ans[0] = 1;\n            for(int i = 0; i < digits.size(); i++)\n            {\n                ans[i+1] = digits[i];\n            }\n            return ans;\n        }\n        return digits;\n    }\n};"
                    },
                    {
                        "username": "shahareyar601",
                        "content": "can someone tell me why it is not working for {9}\\n\\nvector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n       for(int i=n-1;i>0;i--){\\n         if(digits[i]!=9){\\n         digits[i]=digits[i]+1;\\n         break;\\n         }\\n         else\\n         digits[i]=0;\\n         \\n       } \\n       if(digits[0]==0){\\n       digits.insert(digits.begin(),1);\\n       }\\n        return digits;\\n    }"
                    },
                    {
                        "username": "vighnesh_rasal",
                        "content": "I am trying to use BigInteger in java but compiler says \\'cannot find symbol BigInteger.\\' what seems to be the problem? "
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "you need to import Biginteger."
                    },
                    {
                        "username": "Hagar_",
                        "content": "Hello,\\n\\nI\\'m trying to join digits in a string using `s = digits.join(\"\");`. Yet, for case [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3] it neglects the last three digits and ouput 6145390195186705000\\n\\nI even used loops to check, but still returns the same answer\\n\\n```\\nfor (let i = 0; i < digits.length; i++) {\\n      text += digits[i];\\n      console.log(digits[i]);\\n    }\\n```\\n\\nAny idea why this happens?"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        list = []\\n        digit = \\'\\'\\n        for i in digits:\\n            digit += str(i)\\n        num = 1\\n        num += int(digit)\\n        num1 = str(num)\\n        for i in num1:\\n            list.append(int(i))\\n        return list"
                    }
                ]
            },
            {
                "id": 1858251,
                "content": [
                    {
                        "username": "Andersonwjeh",
                        "content": "What will be the out put of digits=[1,5,9,]"
                    },
                    {
                        "username": "Bespalow",
                        "content": "160"
                    },
                    {
                        "username": "Msey",
                        "content": "Get asked that question at Google equals win the lottery"
                    },
                    {
                        "username": "tanishq29",
                        "content": " can anyone help me to modify this code for 3rd test case where value is 9,\\nint [] arr = new int[digits.length];\\n        for(int i = 0 ; i<digits.length-1 ; i++){\\n            arr[i] = digits[i];\\n            int s = digits.length-1;\\n            arr[s] = digits[s] + 1;\\n        }\\n        \\n        return arr;"
                    },
                    {
                        "username": "b20ec013",
                        "content": "for (int i = digits.length - 1; i >= 0; i--) {\\n\\tif (digits[i] < 9) {\\n\\t\\tdigits[i]++;\\n\\t\\treturn digits;\\n\\t}\\n\\tdigits[i] = 0;\\n}\\n\\ndigits = new int[digits.length + 1];\\ndigits[0] = 1;\\nreturn digits;                   like this\\n"
                    },
                    {
                        "username": "b20ec013",
                        "content": "create if condition in loop and check if last digit is 9 increment the size of array and add zero at last"
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "Using while loop got output as [9] -> [1] expected is [1,0] why so,"
                    },
                    {
                        "username": "omarkh999",
                        "content": "why the hell can not I use more than one function and mingle them in PlusOne. He keeps telling me that the name of the function is not Identified  as though I did not write it."
                    },
                    {
                        "username": "eagle_s_",
                        "content": "can somebody help me why i'm getting run time error---------\n\n\n\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int n = digits.size()-1;\n        int num = digits[n] + 1;\n        int rem = -1;\n        bool rem1 = false;\n        if(num >= 10)\n        {\n            rem = 1;\n            rem1 = true;\n        }\n        else\n        {\n            digits[n] = num;\n        }\n        if(rem1 != false)\n        {\n            digits[n] = 0;\n            for(int i = digits.size()-2; i >= 0; i--)\n            {\n                digits[i] = digits[i] + rem;\n                if(digits[i] >= 10)\n                {\n                    digits[i] = 0;\n                    rem = 1;\n                }\n                else\n                {\n                    rem = -1;\n                    rem1 = false;\n                    break;\n                }\n            }\n        }\n        if(rem1 != false)\n        {\n            vector<int> ans;\n            ans[0] = 1;\n            for(int i = 0; i < digits.size(); i++)\n            {\n                ans[i+1] = digits[i];\n            }\n            return ans;\n        }\n        return digits;\n    }\n};"
                    },
                    {
                        "username": "shahareyar601",
                        "content": "can someone tell me why it is not working for {9}\\n\\nvector<int> plusOne(vector<int>& digits) {\\n        int n=digits.size();\\n       for(int i=n-1;i>0;i--){\\n         if(digits[i]!=9){\\n         digits[i]=digits[i]+1;\\n         break;\\n         }\\n         else\\n         digits[i]=0;\\n         \\n       } \\n       if(digits[0]==0){\\n       digits.insert(digits.begin(),1);\\n       }\\n        return digits;\\n    }"
                    },
                    {
                        "username": "vighnesh_rasal",
                        "content": "I am trying to use BigInteger in java but compiler says \\'cannot find symbol BigInteger.\\' what seems to be the problem? "
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "you need to import Biginteger."
                    },
                    {
                        "username": "Hagar_",
                        "content": "Hello,\\n\\nI\\'m trying to join digits in a string using `s = digits.join(\"\");`. Yet, for case [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3] it neglects the last three digits and ouput 6145390195186705000\\n\\nI even used loops to check, but still returns the same answer\\n\\n```\\nfor (let i = 0; i < digits.length; i++) {\\n      text += digits[i];\\n      console.log(digits[i]);\\n    }\\n```\\n\\nAny idea why this happens?"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        list = []\\n        digit = \\'\\'\\n        for i in digits:\\n            digit += str(i)\\n        num = 1\\n        num += int(digit)\\n        num1 = str(num)\\n        for i in num1:\\n            list.append(int(i))\\n        return list"
                    }
                ]
            },
            {
                "id": 1846145,
                "content": [
                    {
                        "username": "mahajanagouda",
                        "content": "can anybody tell me why this code is not working it is returning same array even after adding 1 to the integer\\n\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int temp1=0,into=1;\\n        int temp;\\n        int length = digits.length;\\n        for(int i =length-1;i>-1;i--){\\n            temp=digits[i]*into;\\n            temp1=temp1+temp;\\n            into=into*10;\\n            if((digits[i]==9)&&(length!=length+1))\\n            {\\n                length++;\\n            }\\n\\n        } \\n        System.out.println(temp1);\\n        int temp2=temp1+1;\\n        System.out.println(temp2);\\n        int div=10;\\n        for(int i=length-1;i<-1;i--){\\n    \\n            digits[i]=temp2%div;\\n            temp2=temp2-digits[i];\\n            div=div*10;\\n        }\\n        System.out.println(temp2%10);\\n        return digits;\\n    }"
                    },
                    {
                        "username": "Mirza-Fardeen",
                        "content": "java.lang.NumberFormatException: For input string: \"728509129536673284379577474947011174006\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 1163, java.base/java.lang.Long.valueOf\\n  at line 7, Solution.plusOne\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main \\n\\nwhat is this -__- , seriously"
                    },
                    {
                        "username": "ezratweaver",
                        "content": "took 3 lines of code too easy"
                    },
                    {
                        "username": "rohit_442",
                        "content": "case 3 failed\\n"
                    },
                    {
                        "username": "Ashu07",
                        "content": "class Solution\\n{\\n    public int[] plusOne(int[] arr) \\n    {\\n            \\tlong int ans= 0;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n        \\tans=ans*10+arr[i];\\n        }\\n        ans+=1;\\n        int size=0,rev=0;\\n        int n =ans;\\n        while(ans>0)\\n        {\\n        \\tint rem = ans%10;\\n        \\trev=rev*10+rem;\\n        \\tsize++;\\n        \\tans/=10;\\n        }\\n       int [] nums= new int[size];\\n       for(int i=0;i<size;i++)\\n       {\\n    \\t   nums[i]=rev%10;\\n    \\t   rev/=10;\\n       }\\n     return nums;\\n    }\\n}\\n\\nThis fails on \\n[9,8,7,6,5,4,3,2,1,0]\\nUse Testcase\\nOutput\\n[9,2,2,2,3,1,8,7,5,0]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]\\n\\nAnyone correct me?\\n"
                    },
                    {
                        "username": "MastaGlazy",
                        "content": "Can anybody explain to me why this outputs just a \"]\"? I really don\\'t get it and its frustrating me.\\n```c\\nint* plusOne(int* digits, int digitsSize, int* returnSize){\\n    int *newDigits = malloc(digitsSize*sizeof(int));\\n\\n    for(size_t i = 0; i < digitsSize; i++){\\n        newDigits[i] = digits[i];\\n        printf(\"%d\", newDigits[i]);\\n    }\\n    return newDigits;\\n}\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "You didn\\'t set returnSize. It should either be ``*returnSize = digitsSize`` or\\n``*returnSize = digitsSize + 1`` depending on whether the number overflowed after incrementing."
                    },
                    {
                        "username": "Cl0us",
                        "content": "guys help. Why do I have runtime error in this code?\\n ` vector <int> d=digits;\\n        int size=digits.size();\\n        if (size==1)\\n        {\\n            if (d[size-1]==9)\\n            {\\n                d[size-1]=1;\\n                d[size]=0;\\n            }\\n        }\\n        else if (size>1)\\n        {\\n            size--;\\n            d[size]++;\\n            while (size>=0 && d[size]==10)\\n            {\\n                d[size]=0;\\n                size--;\\n                d[size]++;\\n            }\\n        }\\n        return d;`"
                    },
                    {
                        "username": "ericocarina1987",
                        "content": "var plusOne = function(digits) {\\n    let num = parseInt(digits.join(\\'\\'))+1\\n    return num.toString().split(\\'\\')\\n};\\n\\ni am so frastrated\\ncan someone tell me why i am wrong?????"
                    },
                    {
                        "username": "ubidy947",
                        "content": "how do I get past the test 61 which has 39 elements in the list. I am getting a number format exception as the number is to large to convert into Long as well."
                    },
                    {
                        "username": "TimZgeybi",
                        "content": "maybe try \"long long\" instead"
                    },
                    {
                        "username": "bhoomishah20",
                        "content": "Hi Is this proper way to write this code? \nFirst I am checking with for loop that is all digits are 9, if yes then create new array with 1+ length and make first as 1 and others as 0. else another loop to add plus one.\n\n\nboolean isAllnine=false;\n            for(int i=0;i<=length-1;i++) {\n                if(digits[i]!=9) {\n                    break;\n                } else {\n                    if(i==length-1) isAllnine =true;\n                }\n            }\n            if(isAllnine) {\n            int [] ndigits =new int[length+1];\n            ndigits[0]=1;\n            return ndigits;\n            } else {\n                int j=length-1;\n                while(j>=0) {\n                    int sum = digits[j]+1;\n                    \n                    if(sum>9) {\n                        digits[j] =0;  \n                         j--;\n                    } else {\n                        digits[j] =sum; \n                    \n                        return digits;\n                    }\n                   \n                    \n                }\n            }"
                    }
                ]
            },
            {
                "id": 1841757,
                "content": [
                    {
                        "username": "mahajanagouda",
                        "content": "can anybody tell me why this code is not working it is returning same array even after adding 1 to the integer\\n\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int temp1=0,into=1;\\n        int temp;\\n        int length = digits.length;\\n        for(int i =length-1;i>-1;i--){\\n            temp=digits[i]*into;\\n            temp1=temp1+temp;\\n            into=into*10;\\n            if((digits[i]==9)&&(length!=length+1))\\n            {\\n                length++;\\n            }\\n\\n        } \\n        System.out.println(temp1);\\n        int temp2=temp1+1;\\n        System.out.println(temp2);\\n        int div=10;\\n        for(int i=length-1;i<-1;i--){\\n    \\n            digits[i]=temp2%div;\\n            temp2=temp2-digits[i];\\n            div=div*10;\\n        }\\n        System.out.println(temp2%10);\\n        return digits;\\n    }"
                    },
                    {
                        "username": "Mirza-Fardeen",
                        "content": "java.lang.NumberFormatException: For input string: \"728509129536673284379577474947011174006\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 1163, java.base/java.lang.Long.valueOf\\n  at line 7, Solution.plusOne\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main \\n\\nwhat is this -__- , seriously"
                    },
                    {
                        "username": "ezratweaver",
                        "content": "took 3 lines of code too easy"
                    },
                    {
                        "username": "rohit_442",
                        "content": "case 3 failed\\n"
                    },
                    {
                        "username": "Ashu07",
                        "content": "class Solution\\n{\\n    public int[] plusOne(int[] arr) \\n    {\\n            \\tlong int ans= 0;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n        \\tans=ans*10+arr[i];\\n        }\\n        ans+=1;\\n        int size=0,rev=0;\\n        int n =ans;\\n        while(ans>0)\\n        {\\n        \\tint rem = ans%10;\\n        \\trev=rev*10+rem;\\n        \\tsize++;\\n        \\tans/=10;\\n        }\\n       int [] nums= new int[size];\\n       for(int i=0;i<size;i++)\\n       {\\n    \\t   nums[i]=rev%10;\\n    \\t   rev/=10;\\n       }\\n     return nums;\\n    }\\n}\\n\\nThis fails on \\n[9,8,7,6,5,4,3,2,1,0]\\nUse Testcase\\nOutput\\n[9,2,2,2,3,1,8,7,5,0]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]\\n\\nAnyone correct me?\\n"
                    },
                    {
                        "username": "MastaGlazy",
                        "content": "Can anybody explain to me why this outputs just a \"]\"? I really don\\'t get it and its frustrating me.\\n```c\\nint* plusOne(int* digits, int digitsSize, int* returnSize){\\n    int *newDigits = malloc(digitsSize*sizeof(int));\\n\\n    for(size_t i = 0; i < digitsSize; i++){\\n        newDigits[i] = digits[i];\\n        printf(\"%d\", newDigits[i]);\\n    }\\n    return newDigits;\\n}\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "You didn\\'t set returnSize. It should either be ``*returnSize = digitsSize`` or\\n``*returnSize = digitsSize + 1`` depending on whether the number overflowed after incrementing."
                    },
                    {
                        "username": "Cl0us",
                        "content": "guys help. Why do I have runtime error in this code?\\n ` vector <int> d=digits;\\n        int size=digits.size();\\n        if (size==1)\\n        {\\n            if (d[size-1]==9)\\n            {\\n                d[size-1]=1;\\n                d[size]=0;\\n            }\\n        }\\n        else if (size>1)\\n        {\\n            size--;\\n            d[size]++;\\n            while (size>=0 && d[size]==10)\\n            {\\n                d[size]=0;\\n                size--;\\n                d[size]++;\\n            }\\n        }\\n        return d;`"
                    },
                    {
                        "username": "ericocarina1987",
                        "content": "var plusOne = function(digits) {\\n    let num = parseInt(digits.join(\\'\\'))+1\\n    return num.toString().split(\\'\\')\\n};\\n\\ni am so frastrated\\ncan someone tell me why i am wrong?????"
                    },
                    {
                        "username": "ubidy947",
                        "content": "how do I get past the test 61 which has 39 elements in the list. I am getting a number format exception as the number is to large to convert into Long as well."
                    },
                    {
                        "username": "TimZgeybi",
                        "content": "maybe try \"long long\" instead"
                    },
                    {
                        "username": "bhoomishah20",
                        "content": "Hi Is this proper way to write this code? \nFirst I am checking with for loop that is all digits are 9, if yes then create new array with 1+ length and make first as 1 and others as 0. else another loop to add plus one.\n\n\nboolean isAllnine=false;\n            for(int i=0;i<=length-1;i++) {\n                if(digits[i]!=9) {\n                    break;\n                } else {\n                    if(i==length-1) isAllnine =true;\n                }\n            }\n            if(isAllnine) {\n            int [] ndigits =new int[length+1];\n            ndigits[0]=1;\n            return ndigits;\n            } else {\n                int j=length-1;\n                while(j>=0) {\n                    int sum = digits[j]+1;\n                    \n                    if(sum>9) {\n                        digits[j] =0;  \n                         j--;\n                    } else {\n                        digits[j] =sum; \n                    \n                        return digits;\n                    }\n                   \n                    \n                }\n            }"
                    }
                ]
            },
            {
                "id": 1840067,
                "content": [
                    {
                        "username": "mahajanagouda",
                        "content": "can anybody tell me why this code is not working it is returning same array even after adding 1 to the integer\\n\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int temp1=0,into=1;\\n        int temp;\\n        int length = digits.length;\\n        for(int i =length-1;i>-1;i--){\\n            temp=digits[i]*into;\\n            temp1=temp1+temp;\\n            into=into*10;\\n            if((digits[i]==9)&&(length!=length+1))\\n            {\\n                length++;\\n            }\\n\\n        } \\n        System.out.println(temp1);\\n        int temp2=temp1+1;\\n        System.out.println(temp2);\\n        int div=10;\\n        for(int i=length-1;i<-1;i--){\\n    \\n            digits[i]=temp2%div;\\n            temp2=temp2-digits[i];\\n            div=div*10;\\n        }\\n        System.out.println(temp2%10);\\n        return digits;\\n    }"
                    },
                    {
                        "username": "Mirza-Fardeen",
                        "content": "java.lang.NumberFormatException: For input string: \"728509129536673284379577474947011174006\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 1163, java.base/java.lang.Long.valueOf\\n  at line 7, Solution.plusOne\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main \\n\\nwhat is this -__- , seriously"
                    },
                    {
                        "username": "ezratweaver",
                        "content": "took 3 lines of code too easy"
                    },
                    {
                        "username": "rohit_442",
                        "content": "case 3 failed\\n"
                    },
                    {
                        "username": "Ashu07",
                        "content": "class Solution\\n{\\n    public int[] plusOne(int[] arr) \\n    {\\n            \\tlong int ans= 0;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n        \\tans=ans*10+arr[i];\\n        }\\n        ans+=1;\\n        int size=0,rev=0;\\n        int n =ans;\\n        while(ans>0)\\n        {\\n        \\tint rem = ans%10;\\n        \\trev=rev*10+rem;\\n        \\tsize++;\\n        \\tans/=10;\\n        }\\n       int [] nums= new int[size];\\n       for(int i=0;i<size;i++)\\n       {\\n    \\t   nums[i]=rev%10;\\n    \\t   rev/=10;\\n       }\\n     return nums;\\n    }\\n}\\n\\nThis fails on \\n[9,8,7,6,5,4,3,2,1,0]\\nUse Testcase\\nOutput\\n[9,2,2,2,3,1,8,7,5,0]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]\\n\\nAnyone correct me?\\n"
                    },
                    {
                        "username": "MastaGlazy",
                        "content": "Can anybody explain to me why this outputs just a \"]\"? I really don\\'t get it and its frustrating me.\\n```c\\nint* plusOne(int* digits, int digitsSize, int* returnSize){\\n    int *newDigits = malloc(digitsSize*sizeof(int));\\n\\n    for(size_t i = 0; i < digitsSize; i++){\\n        newDigits[i] = digits[i];\\n        printf(\"%d\", newDigits[i]);\\n    }\\n    return newDigits;\\n}\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "You didn\\'t set returnSize. It should either be ``*returnSize = digitsSize`` or\\n``*returnSize = digitsSize + 1`` depending on whether the number overflowed after incrementing."
                    },
                    {
                        "username": "Cl0us",
                        "content": "guys help. Why do I have runtime error in this code?\\n ` vector <int> d=digits;\\n        int size=digits.size();\\n        if (size==1)\\n        {\\n            if (d[size-1]==9)\\n            {\\n                d[size-1]=1;\\n                d[size]=0;\\n            }\\n        }\\n        else if (size>1)\\n        {\\n            size--;\\n            d[size]++;\\n            while (size>=0 && d[size]==10)\\n            {\\n                d[size]=0;\\n                size--;\\n                d[size]++;\\n            }\\n        }\\n        return d;`"
                    },
                    {
                        "username": "ericocarina1987",
                        "content": "var plusOne = function(digits) {\\n    let num = parseInt(digits.join(\\'\\'))+1\\n    return num.toString().split(\\'\\')\\n};\\n\\ni am so frastrated\\ncan someone tell me why i am wrong?????"
                    },
                    {
                        "username": "ubidy947",
                        "content": "how do I get past the test 61 which has 39 elements in the list. I am getting a number format exception as the number is to large to convert into Long as well."
                    },
                    {
                        "username": "TimZgeybi",
                        "content": "maybe try \"long long\" instead"
                    },
                    {
                        "username": "bhoomishah20",
                        "content": "Hi Is this proper way to write this code? \nFirst I am checking with for loop that is all digits are 9, if yes then create new array with 1+ length and make first as 1 and others as 0. else another loop to add plus one.\n\n\nboolean isAllnine=false;\n            for(int i=0;i<=length-1;i++) {\n                if(digits[i]!=9) {\n                    break;\n                } else {\n                    if(i==length-1) isAllnine =true;\n                }\n            }\n            if(isAllnine) {\n            int [] ndigits =new int[length+1];\n            ndigits[0]=1;\n            return ndigits;\n            } else {\n                int j=length-1;\n                while(j>=0) {\n                    int sum = digits[j]+1;\n                    \n                    if(sum>9) {\n                        digits[j] =0;  \n                         j--;\n                    } else {\n                        digits[j] =sum; \n                    \n                        return digits;\n                    }\n                   \n                    \n                }\n            }"
                    }
                ]
            },
            {
                "id": 1839821,
                "content": [
                    {
                        "username": "mahajanagouda",
                        "content": "can anybody tell me why this code is not working it is returning same array even after adding 1 to the integer\\n\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int temp1=0,into=1;\\n        int temp;\\n        int length = digits.length;\\n        for(int i =length-1;i>-1;i--){\\n            temp=digits[i]*into;\\n            temp1=temp1+temp;\\n            into=into*10;\\n            if((digits[i]==9)&&(length!=length+1))\\n            {\\n                length++;\\n            }\\n\\n        } \\n        System.out.println(temp1);\\n        int temp2=temp1+1;\\n        System.out.println(temp2);\\n        int div=10;\\n        for(int i=length-1;i<-1;i--){\\n    \\n            digits[i]=temp2%div;\\n            temp2=temp2-digits[i];\\n            div=div*10;\\n        }\\n        System.out.println(temp2%10);\\n        return digits;\\n    }"
                    },
                    {
                        "username": "Mirza-Fardeen",
                        "content": "java.lang.NumberFormatException: For input string: \"728509129536673284379577474947011174006\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 1163, java.base/java.lang.Long.valueOf\\n  at line 7, Solution.plusOne\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main \\n\\nwhat is this -__- , seriously"
                    },
                    {
                        "username": "ezratweaver",
                        "content": "took 3 lines of code too easy"
                    },
                    {
                        "username": "rohit_442",
                        "content": "case 3 failed\\n"
                    },
                    {
                        "username": "Ashu07",
                        "content": "class Solution\\n{\\n    public int[] plusOne(int[] arr) \\n    {\\n            \\tlong int ans= 0;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n        \\tans=ans*10+arr[i];\\n        }\\n        ans+=1;\\n        int size=0,rev=0;\\n        int n =ans;\\n        while(ans>0)\\n        {\\n        \\tint rem = ans%10;\\n        \\trev=rev*10+rem;\\n        \\tsize++;\\n        \\tans/=10;\\n        }\\n       int [] nums= new int[size];\\n       for(int i=0;i<size;i++)\\n       {\\n    \\t   nums[i]=rev%10;\\n    \\t   rev/=10;\\n       }\\n     return nums;\\n    }\\n}\\n\\nThis fails on \\n[9,8,7,6,5,4,3,2,1,0]\\nUse Testcase\\nOutput\\n[9,2,2,2,3,1,8,7,5,0]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]\\n\\nAnyone correct me?\\n"
                    },
                    {
                        "username": "MastaGlazy",
                        "content": "Can anybody explain to me why this outputs just a \"]\"? I really don\\'t get it and its frustrating me.\\n```c\\nint* plusOne(int* digits, int digitsSize, int* returnSize){\\n    int *newDigits = malloc(digitsSize*sizeof(int));\\n\\n    for(size_t i = 0; i < digitsSize; i++){\\n        newDigits[i] = digits[i];\\n        printf(\"%d\", newDigits[i]);\\n    }\\n    return newDigits;\\n}\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "You didn\\'t set returnSize. It should either be ``*returnSize = digitsSize`` or\\n``*returnSize = digitsSize + 1`` depending on whether the number overflowed after incrementing."
                    },
                    {
                        "username": "Cl0us",
                        "content": "guys help. Why do I have runtime error in this code?\\n ` vector <int> d=digits;\\n        int size=digits.size();\\n        if (size==1)\\n        {\\n            if (d[size-1]==9)\\n            {\\n                d[size-1]=1;\\n                d[size]=0;\\n            }\\n        }\\n        else if (size>1)\\n        {\\n            size--;\\n            d[size]++;\\n            while (size>=0 && d[size]==10)\\n            {\\n                d[size]=0;\\n                size--;\\n                d[size]++;\\n            }\\n        }\\n        return d;`"
                    },
                    {
                        "username": "ericocarina1987",
                        "content": "var plusOne = function(digits) {\\n    let num = parseInt(digits.join(\\'\\'))+1\\n    return num.toString().split(\\'\\')\\n};\\n\\ni am so frastrated\\ncan someone tell me why i am wrong?????"
                    },
                    {
                        "username": "ubidy947",
                        "content": "how do I get past the test 61 which has 39 elements in the list. I am getting a number format exception as the number is to large to convert into Long as well."
                    },
                    {
                        "username": "TimZgeybi",
                        "content": "maybe try \"long long\" instead"
                    },
                    {
                        "username": "bhoomishah20",
                        "content": "Hi Is this proper way to write this code? \nFirst I am checking with for loop that is all digits are 9, if yes then create new array with 1+ length and make first as 1 and others as 0. else another loop to add plus one.\n\n\nboolean isAllnine=false;\n            for(int i=0;i<=length-1;i++) {\n                if(digits[i]!=9) {\n                    break;\n                } else {\n                    if(i==length-1) isAllnine =true;\n                }\n            }\n            if(isAllnine) {\n            int [] ndigits =new int[length+1];\n            ndigits[0]=1;\n            return ndigits;\n            } else {\n                int j=length-1;\n                while(j>=0) {\n                    int sum = digits[j]+1;\n                    \n                    if(sum>9) {\n                        digits[j] =0;  \n                         j--;\n                    } else {\n                        digits[j] =sum; \n                    \n                        return digits;\n                    }\n                   \n                    \n                }\n            }"
                    }
                ]
            },
            {
                "id": 1838736,
                "content": [
                    {
                        "username": "mahajanagouda",
                        "content": "can anybody tell me why this code is not working it is returning same array even after adding 1 to the integer\\n\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int temp1=0,into=1;\\n        int temp;\\n        int length = digits.length;\\n        for(int i =length-1;i>-1;i--){\\n            temp=digits[i]*into;\\n            temp1=temp1+temp;\\n            into=into*10;\\n            if((digits[i]==9)&&(length!=length+1))\\n            {\\n                length++;\\n            }\\n\\n        } \\n        System.out.println(temp1);\\n        int temp2=temp1+1;\\n        System.out.println(temp2);\\n        int div=10;\\n        for(int i=length-1;i<-1;i--){\\n    \\n            digits[i]=temp2%div;\\n            temp2=temp2-digits[i];\\n            div=div*10;\\n        }\\n        System.out.println(temp2%10);\\n        return digits;\\n    }"
                    },
                    {
                        "username": "Mirza-Fardeen",
                        "content": "java.lang.NumberFormatException: For input string: \"728509129536673284379577474947011174006\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 1163, java.base/java.lang.Long.valueOf\\n  at line 7, Solution.plusOne\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main \\n\\nwhat is this -__- , seriously"
                    },
                    {
                        "username": "ezratweaver",
                        "content": "took 3 lines of code too easy"
                    },
                    {
                        "username": "rohit_442",
                        "content": "case 3 failed\\n"
                    },
                    {
                        "username": "Ashu07",
                        "content": "class Solution\\n{\\n    public int[] plusOne(int[] arr) \\n    {\\n            \\tlong int ans= 0;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n        \\tans=ans*10+arr[i];\\n        }\\n        ans+=1;\\n        int size=0,rev=0;\\n        int n =ans;\\n        while(ans>0)\\n        {\\n        \\tint rem = ans%10;\\n        \\trev=rev*10+rem;\\n        \\tsize++;\\n        \\tans/=10;\\n        }\\n       int [] nums= new int[size];\\n       for(int i=0;i<size;i++)\\n       {\\n    \\t   nums[i]=rev%10;\\n    \\t   rev/=10;\\n       }\\n     return nums;\\n    }\\n}\\n\\nThis fails on \\n[9,8,7,6,5,4,3,2,1,0]\\nUse Testcase\\nOutput\\n[9,2,2,2,3,1,8,7,5,0]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]\\n\\nAnyone correct me?\\n"
                    },
                    {
                        "username": "MastaGlazy",
                        "content": "Can anybody explain to me why this outputs just a \"]\"? I really don\\'t get it and its frustrating me.\\n```c\\nint* plusOne(int* digits, int digitsSize, int* returnSize){\\n    int *newDigits = malloc(digitsSize*sizeof(int));\\n\\n    for(size_t i = 0; i < digitsSize; i++){\\n        newDigits[i] = digits[i];\\n        printf(\"%d\", newDigits[i]);\\n    }\\n    return newDigits;\\n}\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "You didn\\'t set returnSize. It should either be ``*returnSize = digitsSize`` or\\n``*returnSize = digitsSize + 1`` depending on whether the number overflowed after incrementing."
                    },
                    {
                        "username": "Cl0us",
                        "content": "guys help. Why do I have runtime error in this code?\\n ` vector <int> d=digits;\\n        int size=digits.size();\\n        if (size==1)\\n        {\\n            if (d[size-1]==9)\\n            {\\n                d[size-1]=1;\\n                d[size]=0;\\n            }\\n        }\\n        else if (size>1)\\n        {\\n            size--;\\n            d[size]++;\\n            while (size>=0 && d[size]==10)\\n            {\\n                d[size]=0;\\n                size--;\\n                d[size]++;\\n            }\\n        }\\n        return d;`"
                    },
                    {
                        "username": "ericocarina1987",
                        "content": "var plusOne = function(digits) {\\n    let num = parseInt(digits.join(\\'\\'))+1\\n    return num.toString().split(\\'\\')\\n};\\n\\ni am so frastrated\\ncan someone tell me why i am wrong?????"
                    },
                    {
                        "username": "ubidy947",
                        "content": "how do I get past the test 61 which has 39 elements in the list. I am getting a number format exception as the number is to large to convert into Long as well."
                    },
                    {
                        "username": "TimZgeybi",
                        "content": "maybe try \"long long\" instead"
                    },
                    {
                        "username": "bhoomishah20",
                        "content": "Hi Is this proper way to write this code? \nFirst I am checking with for loop that is all digits are 9, if yes then create new array with 1+ length and make first as 1 and others as 0. else another loop to add plus one.\n\n\nboolean isAllnine=false;\n            for(int i=0;i<=length-1;i++) {\n                if(digits[i]!=9) {\n                    break;\n                } else {\n                    if(i==length-1) isAllnine =true;\n                }\n            }\n            if(isAllnine) {\n            int [] ndigits =new int[length+1];\n            ndigits[0]=1;\n            return ndigits;\n            } else {\n                int j=length-1;\n                while(j>=0) {\n                    int sum = digits[j]+1;\n                    \n                    if(sum>9) {\n                        digits[j] =0;  \n                         j--;\n                    } else {\n                        digits[j] =sum; \n                    \n                        return digits;\n                    }\n                   \n                    \n                }\n            }"
                    }
                ]
            },
            {
                "id": 1835121,
                "content": [
                    {
                        "username": "mahajanagouda",
                        "content": "can anybody tell me why this code is not working it is returning same array even after adding 1 to the integer\\n\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int temp1=0,into=1;\\n        int temp;\\n        int length = digits.length;\\n        for(int i =length-1;i>-1;i--){\\n            temp=digits[i]*into;\\n            temp1=temp1+temp;\\n            into=into*10;\\n            if((digits[i]==9)&&(length!=length+1))\\n            {\\n                length++;\\n            }\\n\\n        } \\n        System.out.println(temp1);\\n        int temp2=temp1+1;\\n        System.out.println(temp2);\\n        int div=10;\\n        for(int i=length-1;i<-1;i--){\\n    \\n            digits[i]=temp2%div;\\n            temp2=temp2-digits[i];\\n            div=div*10;\\n        }\\n        System.out.println(temp2%10);\\n        return digits;\\n    }"
                    },
                    {
                        "username": "Mirza-Fardeen",
                        "content": "java.lang.NumberFormatException: For input string: \"728509129536673284379577474947011174006\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 1163, java.base/java.lang.Long.valueOf\\n  at line 7, Solution.plusOne\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main \\n\\nwhat is this -__- , seriously"
                    },
                    {
                        "username": "ezratweaver",
                        "content": "took 3 lines of code too easy"
                    },
                    {
                        "username": "rohit_442",
                        "content": "case 3 failed\\n"
                    },
                    {
                        "username": "Ashu07",
                        "content": "class Solution\\n{\\n    public int[] plusOne(int[] arr) \\n    {\\n            \\tlong int ans= 0;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n        \\tans=ans*10+arr[i];\\n        }\\n        ans+=1;\\n        int size=0,rev=0;\\n        int n =ans;\\n        while(ans>0)\\n        {\\n        \\tint rem = ans%10;\\n        \\trev=rev*10+rem;\\n        \\tsize++;\\n        \\tans/=10;\\n        }\\n       int [] nums= new int[size];\\n       for(int i=0;i<size;i++)\\n       {\\n    \\t   nums[i]=rev%10;\\n    \\t   rev/=10;\\n       }\\n     return nums;\\n    }\\n}\\n\\nThis fails on \\n[9,8,7,6,5,4,3,2,1,0]\\nUse Testcase\\nOutput\\n[9,2,2,2,3,1,8,7,5,0]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]\\n\\nAnyone correct me?\\n"
                    },
                    {
                        "username": "MastaGlazy",
                        "content": "Can anybody explain to me why this outputs just a \"]\"? I really don\\'t get it and its frustrating me.\\n```c\\nint* plusOne(int* digits, int digitsSize, int* returnSize){\\n    int *newDigits = malloc(digitsSize*sizeof(int));\\n\\n    for(size_t i = 0; i < digitsSize; i++){\\n        newDigits[i] = digits[i];\\n        printf(\"%d\", newDigits[i]);\\n    }\\n    return newDigits;\\n}\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "You didn\\'t set returnSize. It should either be ``*returnSize = digitsSize`` or\\n``*returnSize = digitsSize + 1`` depending on whether the number overflowed after incrementing."
                    },
                    {
                        "username": "Cl0us",
                        "content": "guys help. Why do I have runtime error in this code?\\n ` vector <int> d=digits;\\n        int size=digits.size();\\n        if (size==1)\\n        {\\n            if (d[size-1]==9)\\n            {\\n                d[size-1]=1;\\n                d[size]=0;\\n            }\\n        }\\n        else if (size>1)\\n        {\\n            size--;\\n            d[size]++;\\n            while (size>=0 && d[size]==10)\\n            {\\n                d[size]=0;\\n                size--;\\n                d[size]++;\\n            }\\n        }\\n        return d;`"
                    },
                    {
                        "username": "ericocarina1987",
                        "content": "var plusOne = function(digits) {\\n    let num = parseInt(digits.join(\\'\\'))+1\\n    return num.toString().split(\\'\\')\\n};\\n\\ni am so frastrated\\ncan someone tell me why i am wrong?????"
                    },
                    {
                        "username": "ubidy947",
                        "content": "how do I get past the test 61 which has 39 elements in the list. I am getting a number format exception as the number is to large to convert into Long as well."
                    },
                    {
                        "username": "TimZgeybi",
                        "content": "maybe try \"long long\" instead"
                    },
                    {
                        "username": "bhoomishah20",
                        "content": "Hi Is this proper way to write this code? \nFirst I am checking with for loop that is all digits are 9, if yes then create new array with 1+ length and make first as 1 and others as 0. else another loop to add plus one.\n\n\nboolean isAllnine=false;\n            for(int i=0;i<=length-1;i++) {\n                if(digits[i]!=9) {\n                    break;\n                } else {\n                    if(i==length-1) isAllnine =true;\n                }\n            }\n            if(isAllnine) {\n            int [] ndigits =new int[length+1];\n            ndigits[0]=1;\n            return ndigits;\n            } else {\n                int j=length-1;\n                while(j>=0) {\n                    int sum = digits[j]+1;\n                    \n                    if(sum>9) {\n                        digits[j] =0;  \n                         j--;\n                    } else {\n                        digits[j] =sum; \n                    \n                        return digits;\n                    }\n                   \n                    \n                }\n            }"
                    }
                ]
            },
            {
                "id": 1830114,
                "content": [
                    {
                        "username": "mahajanagouda",
                        "content": "can anybody tell me why this code is not working it is returning same array even after adding 1 to the integer\\n\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int temp1=0,into=1;\\n        int temp;\\n        int length = digits.length;\\n        for(int i =length-1;i>-1;i--){\\n            temp=digits[i]*into;\\n            temp1=temp1+temp;\\n            into=into*10;\\n            if((digits[i]==9)&&(length!=length+1))\\n            {\\n                length++;\\n            }\\n\\n        } \\n        System.out.println(temp1);\\n        int temp2=temp1+1;\\n        System.out.println(temp2);\\n        int div=10;\\n        for(int i=length-1;i<-1;i--){\\n    \\n            digits[i]=temp2%div;\\n            temp2=temp2-digits[i];\\n            div=div*10;\\n        }\\n        System.out.println(temp2%10);\\n        return digits;\\n    }"
                    },
                    {
                        "username": "Mirza-Fardeen",
                        "content": "java.lang.NumberFormatException: For input string: \"728509129536673284379577474947011174006\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 1163, java.base/java.lang.Long.valueOf\\n  at line 7, Solution.plusOne\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main \\n\\nwhat is this -__- , seriously"
                    },
                    {
                        "username": "ezratweaver",
                        "content": "took 3 lines of code too easy"
                    },
                    {
                        "username": "rohit_442",
                        "content": "case 3 failed\\n"
                    },
                    {
                        "username": "Ashu07",
                        "content": "class Solution\\n{\\n    public int[] plusOne(int[] arr) \\n    {\\n            \\tlong int ans= 0;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n        \\tans=ans*10+arr[i];\\n        }\\n        ans+=1;\\n        int size=0,rev=0;\\n        int n =ans;\\n        while(ans>0)\\n        {\\n        \\tint rem = ans%10;\\n        \\trev=rev*10+rem;\\n        \\tsize++;\\n        \\tans/=10;\\n        }\\n       int [] nums= new int[size];\\n       for(int i=0;i<size;i++)\\n       {\\n    \\t   nums[i]=rev%10;\\n    \\t   rev/=10;\\n       }\\n     return nums;\\n    }\\n}\\n\\nThis fails on \\n[9,8,7,6,5,4,3,2,1,0]\\nUse Testcase\\nOutput\\n[9,2,2,2,3,1,8,7,5,0]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]\\n\\nAnyone correct me?\\n"
                    },
                    {
                        "username": "MastaGlazy",
                        "content": "Can anybody explain to me why this outputs just a \"]\"? I really don\\'t get it and its frustrating me.\\n```c\\nint* plusOne(int* digits, int digitsSize, int* returnSize){\\n    int *newDigits = malloc(digitsSize*sizeof(int));\\n\\n    for(size_t i = 0; i < digitsSize; i++){\\n        newDigits[i] = digits[i];\\n        printf(\"%d\", newDigits[i]);\\n    }\\n    return newDigits;\\n}\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "You didn\\'t set returnSize. It should either be ``*returnSize = digitsSize`` or\\n``*returnSize = digitsSize + 1`` depending on whether the number overflowed after incrementing."
                    },
                    {
                        "username": "Cl0us",
                        "content": "guys help. Why do I have runtime error in this code?\\n ` vector <int> d=digits;\\n        int size=digits.size();\\n        if (size==1)\\n        {\\n            if (d[size-1]==9)\\n            {\\n                d[size-1]=1;\\n                d[size]=0;\\n            }\\n        }\\n        else if (size>1)\\n        {\\n            size--;\\n            d[size]++;\\n            while (size>=0 && d[size]==10)\\n            {\\n                d[size]=0;\\n                size--;\\n                d[size]++;\\n            }\\n        }\\n        return d;`"
                    },
                    {
                        "username": "ericocarina1987",
                        "content": "var plusOne = function(digits) {\\n    let num = parseInt(digits.join(\\'\\'))+1\\n    return num.toString().split(\\'\\')\\n};\\n\\ni am so frastrated\\ncan someone tell me why i am wrong?????"
                    },
                    {
                        "username": "ubidy947",
                        "content": "how do I get past the test 61 which has 39 elements in the list. I am getting a number format exception as the number is to large to convert into Long as well."
                    },
                    {
                        "username": "TimZgeybi",
                        "content": "maybe try \"long long\" instead"
                    },
                    {
                        "username": "bhoomishah20",
                        "content": "Hi Is this proper way to write this code? \nFirst I am checking with for loop that is all digits are 9, if yes then create new array with 1+ length and make first as 1 and others as 0. else another loop to add plus one.\n\n\nboolean isAllnine=false;\n            for(int i=0;i<=length-1;i++) {\n                if(digits[i]!=9) {\n                    break;\n                } else {\n                    if(i==length-1) isAllnine =true;\n                }\n            }\n            if(isAllnine) {\n            int [] ndigits =new int[length+1];\n            ndigits[0]=1;\n            return ndigits;\n            } else {\n                int j=length-1;\n                while(j>=0) {\n                    int sum = digits[j]+1;\n                    \n                    if(sum>9) {\n                        digits[j] =0;  \n                         j--;\n                    } else {\n                        digits[j] =sum; \n                    \n                        return digits;\n                    }\n                   \n                    \n                }\n            }"
                    }
                ]
            },
            {
                "id": 1827168,
                "content": [
                    {
                        "username": "mahajanagouda",
                        "content": "can anybody tell me why this code is not working it is returning same array even after adding 1 to the integer\\n\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int temp1=0,into=1;\\n        int temp;\\n        int length = digits.length;\\n        for(int i =length-1;i>-1;i--){\\n            temp=digits[i]*into;\\n            temp1=temp1+temp;\\n            into=into*10;\\n            if((digits[i]==9)&&(length!=length+1))\\n            {\\n                length++;\\n            }\\n\\n        } \\n        System.out.println(temp1);\\n        int temp2=temp1+1;\\n        System.out.println(temp2);\\n        int div=10;\\n        for(int i=length-1;i<-1;i--){\\n    \\n            digits[i]=temp2%div;\\n            temp2=temp2-digits[i];\\n            div=div*10;\\n        }\\n        System.out.println(temp2%10);\\n        return digits;\\n    }"
                    },
                    {
                        "username": "Mirza-Fardeen",
                        "content": "java.lang.NumberFormatException: For input string: \"728509129536673284379577474947011174006\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 1163, java.base/java.lang.Long.valueOf\\n  at line 7, Solution.plusOne\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main \\n\\nwhat is this -__- , seriously"
                    },
                    {
                        "username": "ezratweaver",
                        "content": "took 3 lines of code too easy"
                    },
                    {
                        "username": "rohit_442",
                        "content": "case 3 failed\\n"
                    },
                    {
                        "username": "Ashu07",
                        "content": "class Solution\\n{\\n    public int[] plusOne(int[] arr) \\n    {\\n            \\tlong int ans= 0;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n        \\tans=ans*10+arr[i];\\n        }\\n        ans+=1;\\n        int size=0,rev=0;\\n        int n =ans;\\n        while(ans>0)\\n        {\\n        \\tint rem = ans%10;\\n        \\trev=rev*10+rem;\\n        \\tsize++;\\n        \\tans/=10;\\n        }\\n       int [] nums= new int[size];\\n       for(int i=0;i<size;i++)\\n       {\\n    \\t   nums[i]=rev%10;\\n    \\t   rev/=10;\\n       }\\n     return nums;\\n    }\\n}\\n\\nThis fails on \\n[9,8,7,6,5,4,3,2,1,0]\\nUse Testcase\\nOutput\\n[9,2,2,2,3,1,8,7,5,0]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]\\n\\nAnyone correct me?\\n"
                    },
                    {
                        "username": "MastaGlazy",
                        "content": "Can anybody explain to me why this outputs just a \"]\"? I really don\\'t get it and its frustrating me.\\n```c\\nint* plusOne(int* digits, int digitsSize, int* returnSize){\\n    int *newDigits = malloc(digitsSize*sizeof(int));\\n\\n    for(size_t i = 0; i < digitsSize; i++){\\n        newDigits[i] = digits[i];\\n        printf(\"%d\", newDigits[i]);\\n    }\\n    return newDigits;\\n}\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "You didn\\'t set returnSize. It should either be ``*returnSize = digitsSize`` or\\n``*returnSize = digitsSize + 1`` depending on whether the number overflowed after incrementing."
                    },
                    {
                        "username": "Cl0us",
                        "content": "guys help. Why do I have runtime error in this code?\\n ` vector <int> d=digits;\\n        int size=digits.size();\\n        if (size==1)\\n        {\\n            if (d[size-1]==9)\\n            {\\n                d[size-1]=1;\\n                d[size]=0;\\n            }\\n        }\\n        else if (size>1)\\n        {\\n            size--;\\n            d[size]++;\\n            while (size>=0 && d[size]==10)\\n            {\\n                d[size]=0;\\n                size--;\\n                d[size]++;\\n            }\\n        }\\n        return d;`"
                    },
                    {
                        "username": "ericocarina1987",
                        "content": "var plusOne = function(digits) {\\n    let num = parseInt(digits.join(\\'\\'))+1\\n    return num.toString().split(\\'\\')\\n};\\n\\ni am so frastrated\\ncan someone tell me why i am wrong?????"
                    },
                    {
                        "username": "ubidy947",
                        "content": "how do I get past the test 61 which has 39 elements in the list. I am getting a number format exception as the number is to large to convert into Long as well."
                    },
                    {
                        "username": "TimZgeybi",
                        "content": "maybe try \"long long\" instead"
                    },
                    {
                        "username": "bhoomishah20",
                        "content": "Hi Is this proper way to write this code? \nFirst I am checking with for loop that is all digits are 9, if yes then create new array with 1+ length and make first as 1 and others as 0. else another loop to add plus one.\n\n\nboolean isAllnine=false;\n            for(int i=0;i<=length-1;i++) {\n                if(digits[i]!=9) {\n                    break;\n                } else {\n                    if(i==length-1) isAllnine =true;\n                }\n            }\n            if(isAllnine) {\n            int [] ndigits =new int[length+1];\n            ndigits[0]=1;\n            return ndigits;\n            } else {\n                int j=length-1;\n                while(j>=0) {\n                    int sum = digits[j]+1;\n                    \n                    if(sum>9) {\n                        digits[j] =0;  \n                         j--;\n                    } else {\n                        digits[j] =sum; \n                    \n                        return digits;\n                    }\n                   \n                    \n                }\n            }"
                    }
                ]
            },
            {
                "id": 1813842,
                "content": [
                    {
                        "username": "mahajanagouda",
                        "content": "can anybody tell me why this code is not working it is returning same array even after adding 1 to the integer\\n\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int temp1=0,into=1;\\n        int temp;\\n        int length = digits.length;\\n        for(int i =length-1;i>-1;i--){\\n            temp=digits[i]*into;\\n            temp1=temp1+temp;\\n            into=into*10;\\n            if((digits[i]==9)&&(length!=length+1))\\n            {\\n                length++;\\n            }\\n\\n        } \\n        System.out.println(temp1);\\n        int temp2=temp1+1;\\n        System.out.println(temp2);\\n        int div=10;\\n        for(int i=length-1;i<-1;i--){\\n    \\n            digits[i]=temp2%div;\\n            temp2=temp2-digits[i];\\n            div=div*10;\\n        }\\n        System.out.println(temp2%10);\\n        return digits;\\n    }"
                    },
                    {
                        "username": "Mirza-Fardeen",
                        "content": "java.lang.NumberFormatException: For input string: \"728509129536673284379577474947011174006\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 1163, java.base/java.lang.Long.valueOf\\n  at line 7, Solution.plusOne\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main \\n\\nwhat is this -__- , seriously"
                    },
                    {
                        "username": "ezratweaver",
                        "content": "took 3 lines of code too easy"
                    },
                    {
                        "username": "rohit_442",
                        "content": "case 3 failed\\n"
                    },
                    {
                        "username": "Ashu07",
                        "content": "class Solution\\n{\\n    public int[] plusOne(int[] arr) \\n    {\\n            \\tlong int ans= 0;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n        \\tans=ans*10+arr[i];\\n        }\\n        ans+=1;\\n        int size=0,rev=0;\\n        int n =ans;\\n        while(ans>0)\\n        {\\n        \\tint rem = ans%10;\\n        \\trev=rev*10+rem;\\n        \\tsize++;\\n        \\tans/=10;\\n        }\\n       int [] nums= new int[size];\\n       for(int i=0;i<size;i++)\\n       {\\n    \\t   nums[i]=rev%10;\\n    \\t   rev/=10;\\n       }\\n     return nums;\\n    }\\n}\\n\\nThis fails on \\n[9,8,7,6,5,4,3,2,1,0]\\nUse Testcase\\nOutput\\n[9,2,2,2,3,1,8,7,5,0]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]\\n\\nAnyone correct me?\\n"
                    },
                    {
                        "username": "MastaGlazy",
                        "content": "Can anybody explain to me why this outputs just a \"]\"? I really don\\'t get it and its frustrating me.\\n```c\\nint* plusOne(int* digits, int digitsSize, int* returnSize){\\n    int *newDigits = malloc(digitsSize*sizeof(int));\\n\\n    for(size_t i = 0; i < digitsSize; i++){\\n        newDigits[i] = digits[i];\\n        printf(\"%d\", newDigits[i]);\\n    }\\n    return newDigits;\\n}\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "You didn\\'t set returnSize. It should either be ``*returnSize = digitsSize`` or\\n``*returnSize = digitsSize + 1`` depending on whether the number overflowed after incrementing."
                    },
                    {
                        "username": "Cl0us",
                        "content": "guys help. Why do I have runtime error in this code?\\n ` vector <int> d=digits;\\n        int size=digits.size();\\n        if (size==1)\\n        {\\n            if (d[size-1]==9)\\n            {\\n                d[size-1]=1;\\n                d[size]=0;\\n            }\\n        }\\n        else if (size>1)\\n        {\\n            size--;\\n            d[size]++;\\n            while (size>=0 && d[size]==10)\\n            {\\n                d[size]=0;\\n                size--;\\n                d[size]++;\\n            }\\n        }\\n        return d;`"
                    },
                    {
                        "username": "ericocarina1987",
                        "content": "var plusOne = function(digits) {\\n    let num = parseInt(digits.join(\\'\\'))+1\\n    return num.toString().split(\\'\\')\\n};\\n\\ni am so frastrated\\ncan someone tell me why i am wrong?????"
                    },
                    {
                        "username": "ubidy947",
                        "content": "how do I get past the test 61 which has 39 elements in the list. I am getting a number format exception as the number is to large to convert into Long as well."
                    },
                    {
                        "username": "TimZgeybi",
                        "content": "maybe try \"long long\" instead"
                    },
                    {
                        "username": "bhoomishah20",
                        "content": "Hi Is this proper way to write this code? \nFirst I am checking with for loop that is all digits are 9, if yes then create new array with 1+ length and make first as 1 and others as 0. else another loop to add plus one.\n\n\nboolean isAllnine=false;\n            for(int i=0;i<=length-1;i++) {\n                if(digits[i]!=9) {\n                    break;\n                } else {\n                    if(i==length-1) isAllnine =true;\n                }\n            }\n            if(isAllnine) {\n            int [] ndigits =new int[length+1];\n            ndigits[0]=1;\n            return ndigits;\n            } else {\n                int j=length-1;\n                while(j>=0) {\n                    int sum = digits[j]+1;\n                    \n                    if(sum>9) {\n                        digits[j] =0;  \n                         j--;\n                    } else {\n                        digits[j] =sum; \n                    \n                        return digits;\n                    }\n                   \n                    \n                }\n            }"
                    }
                ]
            },
            {
                "id": 1808828,
                "content": [
                    {
                        "username": "mahajanagouda",
                        "content": "can anybody tell me why this code is not working it is returning same array even after adding 1 to the integer\\n\\n\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int temp1=0,into=1;\\n        int temp;\\n        int length = digits.length;\\n        for(int i =length-1;i>-1;i--){\\n            temp=digits[i]*into;\\n            temp1=temp1+temp;\\n            into=into*10;\\n            if((digits[i]==9)&&(length!=length+1))\\n            {\\n                length++;\\n            }\\n\\n        } \\n        System.out.println(temp1);\\n        int temp2=temp1+1;\\n        System.out.println(temp2);\\n        int div=10;\\n        for(int i=length-1;i<-1;i--){\\n    \\n            digits[i]=temp2%div;\\n            temp2=temp2-digits[i];\\n            div=div*10;\\n        }\\n        System.out.println(temp2%10);\\n        return digits;\\n    }"
                    },
                    {
                        "username": "Mirza-Fardeen",
                        "content": "java.lang.NumberFormatException: For input string: \"728509129536673284379577474947011174006\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 1163, java.base/java.lang.Long.valueOf\\n  at line 7, Solution.plusOne\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main \\n\\nwhat is this -__- , seriously"
                    },
                    {
                        "username": "ezratweaver",
                        "content": "took 3 lines of code too easy"
                    },
                    {
                        "username": "rohit_442",
                        "content": "case 3 failed\\n"
                    },
                    {
                        "username": "Ashu07",
                        "content": "class Solution\\n{\\n    public int[] plusOne(int[] arr) \\n    {\\n            \\tlong int ans= 0;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n        \\tans=ans*10+arr[i];\\n        }\\n        ans+=1;\\n        int size=0,rev=0;\\n        int n =ans;\\n        while(ans>0)\\n        {\\n        \\tint rem = ans%10;\\n        \\trev=rev*10+rem;\\n        \\tsize++;\\n        \\tans/=10;\\n        }\\n       int [] nums= new int[size];\\n       for(int i=0;i<size;i++)\\n       {\\n    \\t   nums[i]=rev%10;\\n    \\t   rev/=10;\\n       }\\n     return nums;\\n    }\\n}\\n\\nThis fails on \\n[9,8,7,6,5,4,3,2,1,0]\\nUse Testcase\\nOutput\\n[9,2,2,2,3,1,8,7,5,0]\\nExpected\\n[9,8,7,6,5,4,3,2,1,1]\\n\\nAnyone correct me?\\n"
                    },
                    {
                        "username": "MastaGlazy",
                        "content": "Can anybody explain to me why this outputs just a \"]\"? I really don\\'t get it and its frustrating me.\\n```c\\nint* plusOne(int* digits, int digitsSize, int* returnSize){\\n    int *newDigits = malloc(digitsSize*sizeof(int));\\n\\n    for(size_t i = 0; i < digitsSize; i++){\\n        newDigits[i] = digits[i];\\n        printf(\"%d\", newDigits[i]);\\n    }\\n    return newDigits;\\n}\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "You didn\\'t set returnSize. It should either be ``*returnSize = digitsSize`` or\\n``*returnSize = digitsSize + 1`` depending on whether the number overflowed after incrementing."
                    },
                    {
                        "username": "Cl0us",
                        "content": "guys help. Why do I have runtime error in this code?\\n ` vector <int> d=digits;\\n        int size=digits.size();\\n        if (size==1)\\n        {\\n            if (d[size-1]==9)\\n            {\\n                d[size-1]=1;\\n                d[size]=0;\\n            }\\n        }\\n        else if (size>1)\\n        {\\n            size--;\\n            d[size]++;\\n            while (size>=0 && d[size]==10)\\n            {\\n                d[size]=0;\\n                size--;\\n                d[size]++;\\n            }\\n        }\\n        return d;`"
                    },
                    {
                        "username": "ericocarina1987",
                        "content": "var plusOne = function(digits) {\\n    let num = parseInt(digits.join(\\'\\'))+1\\n    return num.toString().split(\\'\\')\\n};\\n\\ni am so frastrated\\ncan someone tell me why i am wrong?????"
                    },
                    {
                        "username": "ubidy947",
                        "content": "how do I get past the test 61 which has 39 elements in the list. I am getting a number format exception as the number is to large to convert into Long as well."
                    },
                    {
                        "username": "TimZgeybi",
                        "content": "maybe try \"long long\" instead"
                    },
                    {
                        "username": "bhoomishah20",
                        "content": "Hi Is this proper way to write this code? \nFirst I am checking with for loop that is all digits are 9, if yes then create new array with 1+ length and make first as 1 and others as 0. else another loop to add plus one.\n\n\nboolean isAllnine=false;\n            for(int i=0;i<=length-1;i++) {\n                if(digits[i]!=9) {\n                    break;\n                } else {\n                    if(i==length-1) isAllnine =true;\n                }\n            }\n            if(isAllnine) {\n            int [] ndigits =new int[length+1];\n            ndigits[0]=1;\n            return ndigits;\n            } else {\n                int j=length-1;\n                while(j>=0) {\n                    int sum = digits[j]+1;\n                    \n                    if(sum>9) {\n                        digits[j] =0;  \n                         j--;\n                    } else {\n                        digits[j] =sum; \n                    \n                        return digits;\n                    }\n                   \n                    \n                }\n            }"
                    }
                ]
            },
            {
                "id": 1805046,
                "content": [
                    {
                        "username": "Raj5504",
                        "content": "int n = digits.length;\\n        for(int i = n-1;i >= 0;i--){\\n            if(digits[i] < 9){\\n                digits[i]++;\\n                return digits;\\n            }else{      \\n                digits[i] = 0;\\n            } \\n        }\\n        int[] arr = new int[n+1];\\n        arr[0]=1;\\n        \\n        return arr;"
                    },
                    {
                        "username": "tkulkarni",
                        "content": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        int[] arr = new int[digits.length];\\n        for(int i=0; i<digits.length; i++){\\n            arr[i] = digits[i];\\n        }\\n        arr[digits.length-1] += 1;\\n\\n        return arr;\\n    }\\n}\\n\\nfirst two cases are successfull but the last case: \\ninput: [9]\\noutput[10]\\nexpected: [1,0]\\n????"
                    },
                    {
                        "username": "avneesh_2001",
                        "content": "to see theback of the digit less than 9 to increse \\nex 123\\n   124\\nso last digit increase, to take the for loop last to end.\\n for(int i=l-1; i>=0; i--)\\n\\n\\nbecause the last less than 9\\nto increse last digit just return\\n\\n\\n if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;         //to not the next digit just return\\n\\n     }\\n\\nelse the number is nine\\n  else\\n     {\\n         digits[i]=0;        //all nine is 0\\n     }\\nthe after nine any digit less than nine so back to this condition\\n  if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n\\nbut the 99 is two digit plus one 100 this is increse one index of digit\\nall nine is 0\\n00\\npush back one 0\\n000\\nand first number is one\\n\\n\\n digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n\\n\\nsolution\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n int l= digits.size();\\n for(int i=l-1; i>=0; i--)\\n {\\n     if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n     else\\n     {\\n         digits[i]=0;\\n     }\\n    \\n }\\n  digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n    }\\n};"
                    },
                    {
                        "username": "Akshay0621",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        number = 0\\n        n = len(digits)\\n        ans = []\\n        if len(digits) >= 1 and len(digits) <= 100:\\n            for i in range(len(digits)):\\n                number += digits[i] * (10 ** (n - 1))\\n                n -= 1\\n            number += 1\\n            while number > 0:\\n                digit = number % 10\\n                number = number // 10\\n                ans.append(digit)\\n            ans.reverse()\\n            return ans"
                    },
                    {
                        "username": "_r0ng5_",
                        "content": "Can anyone explain to me what is the value of returnSize here? I use C language"
                    },
                    {
                        "username": "NasimHelal",
                        "content": "I feel very good after solving this problem .. thanks to leetcode "
                    },
                    {
                        "username": "sdi2100098",
                        "content": "C++ and hints\nFor anyone currently working on this problem, split the problem into two smaller ones. First what happens if at the end of the vector the digit<9. Easy : just increase the last digit by one and push back into a new array the elements of the  already existing one.(Hint for C++ : you can use digits.back() function for more elegant use instead of doing : digits[digits.size-1]) `if(digits.back()<9)`\nAnd now for the 'tricky part', the second part of the problem. So we know that the last element is equal to 9.But how can we check what happens to the second to the last element, the third to the last element and so on. Meaning what happens if they are also equal to 9. (Hint for C++ :  you can use .rbegin() and .rend() to traverse the vector from end to start) `for(auto i = digits.rbegin(); i!=digits.rend(); ++i)`.If they are equal to 9 we must make them equal to 0 and using a bool variable continue the process until we find an element which is not equal to 9 or the loop ends. At the end if for example we have a testcase like so :  digits=[9,9,9] the output should be [1,0,0,0] but we have changed the digits into -> digits=[0,0,0]. The solution is simple just push_back to the array that you will return first 1 and continue by pushing back each element of the modified digits(0,0,0).   `return_array.push_back(1);\n            for(auto &j:digits){\n                return_array.push_back(j);`"
                    },
                    {
                        "username": "jonathanwu907890",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        if digits[-1] == 9:\\n            digits[-1] = 1\\n            digits.append(0)\\n            return digits\\n        digits[-1] = digits[-1] + 1\\n        return digits\\n\\nit doesn\\'t work for nums = 9,9??\\nwhy does it expect 1,0,0\\nif i increment last digit of nums then it would be 9,1,0\\ni dont see how this could be 1,0,0"
                    },
                    {
                        "username": "I3imran3",
                        "content": "const plusOne =(digits)=>(BigInt(digits.join(\"\")) +BigInt (1)).toString().split(\"\")"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "     public int[] plusOne(int[] digits) {\n        int remainder = 0;\n        int digitCount = digits.length - 1;\n        digits[digitCount] = digits[digitCount] + 1;\n\n        do {\n            if (digits[digitCount] + remainder > 9) {\n                digits[digitCount] = (digits[digitCount] + remainder) % 10;\n                remainder = 1;\n            } else {\n                digits[digitCount] = (digits[digitCount] + remainder);\n                remainder = 0;\n            }\n\n            digitCount--;\n        } while (remainder != 0 && digitCount >= 0);\n\n        if (remainder == 1) {\n            int[] newDigits = new int[digits.length + 1];\n            newDigits[0] = 1;\n\n            System.arraycopy(digits, 0, newDigits, 1, digits.length);\n\n            return newDigits;\n        }\n\n        return digits; \n    }"
                    }
                ]
            },
            {
                "id": 1800492,
                "content": [
                    {
                        "username": "Raj5504",
                        "content": "int n = digits.length;\\n        for(int i = n-1;i >= 0;i--){\\n            if(digits[i] < 9){\\n                digits[i]++;\\n                return digits;\\n            }else{      \\n                digits[i] = 0;\\n            } \\n        }\\n        int[] arr = new int[n+1];\\n        arr[0]=1;\\n        \\n        return arr;"
                    },
                    {
                        "username": "tkulkarni",
                        "content": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        int[] arr = new int[digits.length];\\n        for(int i=0; i<digits.length; i++){\\n            arr[i] = digits[i];\\n        }\\n        arr[digits.length-1] += 1;\\n\\n        return arr;\\n    }\\n}\\n\\nfirst two cases are successfull but the last case: \\ninput: [9]\\noutput[10]\\nexpected: [1,0]\\n????"
                    },
                    {
                        "username": "avneesh_2001",
                        "content": "to see theback of the digit less than 9 to increse \\nex 123\\n   124\\nso last digit increase, to take the for loop last to end.\\n for(int i=l-1; i>=0; i--)\\n\\n\\nbecause the last less than 9\\nto increse last digit just return\\n\\n\\n if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;         //to not the next digit just return\\n\\n     }\\n\\nelse the number is nine\\n  else\\n     {\\n         digits[i]=0;        //all nine is 0\\n     }\\nthe after nine any digit less than nine so back to this condition\\n  if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n\\nbut the 99 is two digit plus one 100 this is increse one index of digit\\nall nine is 0\\n00\\npush back one 0\\n000\\nand first number is one\\n\\n\\n digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n\\n\\nsolution\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n int l= digits.size();\\n for(int i=l-1; i>=0; i--)\\n {\\n     if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n     else\\n     {\\n         digits[i]=0;\\n     }\\n    \\n }\\n  digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n    }\\n};"
                    },
                    {
                        "username": "Akshay0621",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        number = 0\\n        n = len(digits)\\n        ans = []\\n        if len(digits) >= 1 and len(digits) <= 100:\\n            for i in range(len(digits)):\\n                number += digits[i] * (10 ** (n - 1))\\n                n -= 1\\n            number += 1\\n            while number > 0:\\n                digit = number % 10\\n                number = number // 10\\n                ans.append(digit)\\n            ans.reverse()\\n            return ans"
                    },
                    {
                        "username": "_r0ng5_",
                        "content": "Can anyone explain to me what is the value of returnSize here? I use C language"
                    },
                    {
                        "username": "NasimHelal",
                        "content": "I feel very good after solving this problem .. thanks to leetcode "
                    },
                    {
                        "username": "sdi2100098",
                        "content": "C++ and hints\nFor anyone currently working on this problem, split the problem into two smaller ones. First what happens if at the end of the vector the digit<9. Easy : just increase the last digit by one and push back into a new array the elements of the  already existing one.(Hint for C++ : you can use digits.back() function for more elegant use instead of doing : digits[digits.size-1]) `if(digits.back()<9)`\nAnd now for the 'tricky part', the second part of the problem. So we know that the last element is equal to 9.But how can we check what happens to the second to the last element, the third to the last element and so on. Meaning what happens if they are also equal to 9. (Hint for C++ :  you can use .rbegin() and .rend() to traverse the vector from end to start) `for(auto i = digits.rbegin(); i!=digits.rend(); ++i)`.If they are equal to 9 we must make them equal to 0 and using a bool variable continue the process until we find an element which is not equal to 9 or the loop ends. At the end if for example we have a testcase like so :  digits=[9,9,9] the output should be [1,0,0,0] but we have changed the digits into -> digits=[0,0,0]. The solution is simple just push_back to the array that you will return first 1 and continue by pushing back each element of the modified digits(0,0,0).   `return_array.push_back(1);\n            for(auto &j:digits){\n                return_array.push_back(j);`"
                    },
                    {
                        "username": "jonathanwu907890",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        if digits[-1] == 9:\\n            digits[-1] = 1\\n            digits.append(0)\\n            return digits\\n        digits[-1] = digits[-1] + 1\\n        return digits\\n\\nit doesn\\'t work for nums = 9,9??\\nwhy does it expect 1,0,0\\nif i increment last digit of nums then it would be 9,1,0\\ni dont see how this could be 1,0,0"
                    },
                    {
                        "username": "I3imran3",
                        "content": "const plusOne =(digits)=>(BigInt(digits.join(\"\")) +BigInt (1)).toString().split(\"\")"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "     public int[] plusOne(int[] digits) {\n        int remainder = 0;\n        int digitCount = digits.length - 1;\n        digits[digitCount] = digits[digitCount] + 1;\n\n        do {\n            if (digits[digitCount] + remainder > 9) {\n                digits[digitCount] = (digits[digitCount] + remainder) % 10;\n                remainder = 1;\n            } else {\n                digits[digitCount] = (digits[digitCount] + remainder);\n                remainder = 0;\n            }\n\n            digitCount--;\n        } while (remainder != 0 && digitCount >= 0);\n\n        if (remainder == 1) {\n            int[] newDigits = new int[digits.length + 1];\n            newDigits[0] = 1;\n\n            System.arraycopy(digits, 0, newDigits, 1, digits.length);\n\n            return newDigits;\n        }\n\n        return digits; \n    }"
                    }
                ]
            },
            {
                "id": 1798573,
                "content": [
                    {
                        "username": "Raj5504",
                        "content": "int n = digits.length;\\n        for(int i = n-1;i >= 0;i--){\\n            if(digits[i] < 9){\\n                digits[i]++;\\n                return digits;\\n            }else{      \\n                digits[i] = 0;\\n            } \\n        }\\n        int[] arr = new int[n+1];\\n        arr[0]=1;\\n        \\n        return arr;"
                    },
                    {
                        "username": "tkulkarni",
                        "content": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        int[] arr = new int[digits.length];\\n        for(int i=0; i<digits.length; i++){\\n            arr[i] = digits[i];\\n        }\\n        arr[digits.length-1] += 1;\\n\\n        return arr;\\n    }\\n}\\n\\nfirst two cases are successfull but the last case: \\ninput: [9]\\noutput[10]\\nexpected: [1,0]\\n????"
                    },
                    {
                        "username": "avneesh_2001",
                        "content": "to see theback of the digit less than 9 to increse \\nex 123\\n   124\\nso last digit increase, to take the for loop last to end.\\n for(int i=l-1; i>=0; i--)\\n\\n\\nbecause the last less than 9\\nto increse last digit just return\\n\\n\\n if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;         //to not the next digit just return\\n\\n     }\\n\\nelse the number is nine\\n  else\\n     {\\n         digits[i]=0;        //all nine is 0\\n     }\\nthe after nine any digit less than nine so back to this condition\\n  if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n\\nbut the 99 is two digit plus one 100 this is increse one index of digit\\nall nine is 0\\n00\\npush back one 0\\n000\\nand first number is one\\n\\n\\n digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n\\n\\nsolution\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n int l= digits.size();\\n for(int i=l-1; i>=0; i--)\\n {\\n     if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n     else\\n     {\\n         digits[i]=0;\\n     }\\n    \\n }\\n  digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n    }\\n};"
                    },
                    {
                        "username": "Akshay0621",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        number = 0\\n        n = len(digits)\\n        ans = []\\n        if len(digits) >= 1 and len(digits) <= 100:\\n            for i in range(len(digits)):\\n                number += digits[i] * (10 ** (n - 1))\\n                n -= 1\\n            number += 1\\n            while number > 0:\\n                digit = number % 10\\n                number = number // 10\\n                ans.append(digit)\\n            ans.reverse()\\n            return ans"
                    },
                    {
                        "username": "_r0ng5_",
                        "content": "Can anyone explain to me what is the value of returnSize here? I use C language"
                    },
                    {
                        "username": "NasimHelal",
                        "content": "I feel very good after solving this problem .. thanks to leetcode "
                    },
                    {
                        "username": "sdi2100098",
                        "content": "C++ and hints\nFor anyone currently working on this problem, split the problem into two smaller ones. First what happens if at the end of the vector the digit<9. Easy : just increase the last digit by one and push back into a new array the elements of the  already existing one.(Hint for C++ : you can use digits.back() function for more elegant use instead of doing : digits[digits.size-1]) `if(digits.back()<9)`\nAnd now for the 'tricky part', the second part of the problem. So we know that the last element is equal to 9.But how can we check what happens to the second to the last element, the third to the last element and so on. Meaning what happens if they are also equal to 9. (Hint for C++ :  you can use .rbegin() and .rend() to traverse the vector from end to start) `for(auto i = digits.rbegin(); i!=digits.rend(); ++i)`.If they are equal to 9 we must make them equal to 0 and using a bool variable continue the process until we find an element which is not equal to 9 or the loop ends. At the end if for example we have a testcase like so :  digits=[9,9,9] the output should be [1,0,0,0] but we have changed the digits into -> digits=[0,0,0]. The solution is simple just push_back to the array that you will return first 1 and continue by pushing back each element of the modified digits(0,0,0).   `return_array.push_back(1);\n            for(auto &j:digits){\n                return_array.push_back(j);`"
                    },
                    {
                        "username": "jonathanwu907890",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        if digits[-1] == 9:\\n            digits[-1] = 1\\n            digits.append(0)\\n            return digits\\n        digits[-1] = digits[-1] + 1\\n        return digits\\n\\nit doesn\\'t work for nums = 9,9??\\nwhy does it expect 1,0,0\\nif i increment last digit of nums then it would be 9,1,0\\ni dont see how this could be 1,0,0"
                    },
                    {
                        "username": "I3imran3",
                        "content": "const plusOne =(digits)=>(BigInt(digits.join(\"\")) +BigInt (1)).toString().split(\"\")"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "     public int[] plusOne(int[] digits) {\n        int remainder = 0;\n        int digitCount = digits.length - 1;\n        digits[digitCount] = digits[digitCount] + 1;\n\n        do {\n            if (digits[digitCount] + remainder > 9) {\n                digits[digitCount] = (digits[digitCount] + remainder) % 10;\n                remainder = 1;\n            } else {\n                digits[digitCount] = (digits[digitCount] + remainder);\n                remainder = 0;\n            }\n\n            digitCount--;\n        } while (remainder != 0 && digitCount >= 0);\n\n        if (remainder == 1) {\n            int[] newDigits = new int[digits.length + 1];\n            newDigits[0] = 1;\n\n            System.arraycopy(digits, 0, newDigits, 1, digits.length);\n\n            return newDigits;\n        }\n\n        return digits; \n    }"
                    }
                ]
            },
            {
                "id": 1796819,
                "content": [
                    {
                        "username": "Raj5504",
                        "content": "int n = digits.length;\\n        for(int i = n-1;i >= 0;i--){\\n            if(digits[i] < 9){\\n                digits[i]++;\\n                return digits;\\n            }else{      \\n                digits[i] = 0;\\n            } \\n        }\\n        int[] arr = new int[n+1];\\n        arr[0]=1;\\n        \\n        return arr;"
                    },
                    {
                        "username": "tkulkarni",
                        "content": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        int[] arr = new int[digits.length];\\n        for(int i=0; i<digits.length; i++){\\n            arr[i] = digits[i];\\n        }\\n        arr[digits.length-1] += 1;\\n\\n        return arr;\\n    }\\n}\\n\\nfirst two cases are successfull but the last case: \\ninput: [9]\\noutput[10]\\nexpected: [1,0]\\n????"
                    },
                    {
                        "username": "avneesh_2001",
                        "content": "to see theback of the digit less than 9 to increse \\nex 123\\n   124\\nso last digit increase, to take the for loop last to end.\\n for(int i=l-1; i>=0; i--)\\n\\n\\nbecause the last less than 9\\nto increse last digit just return\\n\\n\\n if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;         //to not the next digit just return\\n\\n     }\\n\\nelse the number is nine\\n  else\\n     {\\n         digits[i]=0;        //all nine is 0\\n     }\\nthe after nine any digit less than nine so back to this condition\\n  if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n\\nbut the 99 is two digit plus one 100 this is increse one index of digit\\nall nine is 0\\n00\\npush back one 0\\n000\\nand first number is one\\n\\n\\n digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n\\n\\nsolution\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n int l= digits.size();\\n for(int i=l-1; i>=0; i--)\\n {\\n     if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n     else\\n     {\\n         digits[i]=0;\\n     }\\n    \\n }\\n  digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n    }\\n};"
                    },
                    {
                        "username": "Akshay0621",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        number = 0\\n        n = len(digits)\\n        ans = []\\n        if len(digits) >= 1 and len(digits) <= 100:\\n            for i in range(len(digits)):\\n                number += digits[i] * (10 ** (n - 1))\\n                n -= 1\\n            number += 1\\n            while number > 0:\\n                digit = number % 10\\n                number = number // 10\\n                ans.append(digit)\\n            ans.reverse()\\n            return ans"
                    },
                    {
                        "username": "_r0ng5_",
                        "content": "Can anyone explain to me what is the value of returnSize here? I use C language"
                    },
                    {
                        "username": "NasimHelal",
                        "content": "I feel very good after solving this problem .. thanks to leetcode "
                    },
                    {
                        "username": "sdi2100098",
                        "content": "C++ and hints\nFor anyone currently working on this problem, split the problem into two smaller ones. First what happens if at the end of the vector the digit<9. Easy : just increase the last digit by one and push back into a new array the elements of the  already existing one.(Hint for C++ : you can use digits.back() function for more elegant use instead of doing : digits[digits.size-1]) `if(digits.back()<9)`\nAnd now for the 'tricky part', the second part of the problem. So we know that the last element is equal to 9.But how can we check what happens to the second to the last element, the third to the last element and so on. Meaning what happens if they are also equal to 9. (Hint for C++ :  you can use .rbegin() and .rend() to traverse the vector from end to start) `for(auto i = digits.rbegin(); i!=digits.rend(); ++i)`.If they are equal to 9 we must make them equal to 0 and using a bool variable continue the process until we find an element which is not equal to 9 or the loop ends. At the end if for example we have a testcase like so :  digits=[9,9,9] the output should be [1,0,0,0] but we have changed the digits into -> digits=[0,0,0]. The solution is simple just push_back to the array that you will return first 1 and continue by pushing back each element of the modified digits(0,0,0).   `return_array.push_back(1);\n            for(auto &j:digits){\n                return_array.push_back(j);`"
                    },
                    {
                        "username": "jonathanwu907890",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        if digits[-1] == 9:\\n            digits[-1] = 1\\n            digits.append(0)\\n            return digits\\n        digits[-1] = digits[-1] + 1\\n        return digits\\n\\nit doesn\\'t work for nums = 9,9??\\nwhy does it expect 1,0,0\\nif i increment last digit of nums then it would be 9,1,0\\ni dont see how this could be 1,0,0"
                    },
                    {
                        "username": "I3imran3",
                        "content": "const plusOne =(digits)=>(BigInt(digits.join(\"\")) +BigInt (1)).toString().split(\"\")"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "     public int[] plusOne(int[] digits) {\n        int remainder = 0;\n        int digitCount = digits.length - 1;\n        digits[digitCount] = digits[digitCount] + 1;\n\n        do {\n            if (digits[digitCount] + remainder > 9) {\n                digits[digitCount] = (digits[digitCount] + remainder) % 10;\n                remainder = 1;\n            } else {\n                digits[digitCount] = (digits[digitCount] + remainder);\n                remainder = 0;\n            }\n\n            digitCount--;\n        } while (remainder != 0 && digitCount >= 0);\n\n        if (remainder == 1) {\n            int[] newDigits = new int[digits.length + 1];\n            newDigits[0] = 1;\n\n            System.arraycopy(digits, 0, newDigits, 1, digits.length);\n\n            return newDigits;\n        }\n\n        return digits; \n    }"
                    }
                ]
            },
            {
                "id": 1794579,
                "content": [
                    {
                        "username": "Raj5504",
                        "content": "int n = digits.length;\\n        for(int i = n-1;i >= 0;i--){\\n            if(digits[i] < 9){\\n                digits[i]++;\\n                return digits;\\n            }else{      \\n                digits[i] = 0;\\n            } \\n        }\\n        int[] arr = new int[n+1];\\n        arr[0]=1;\\n        \\n        return arr;"
                    },
                    {
                        "username": "tkulkarni",
                        "content": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        int[] arr = new int[digits.length];\\n        for(int i=0; i<digits.length; i++){\\n            arr[i] = digits[i];\\n        }\\n        arr[digits.length-1] += 1;\\n\\n        return arr;\\n    }\\n}\\n\\nfirst two cases are successfull but the last case: \\ninput: [9]\\noutput[10]\\nexpected: [1,0]\\n????"
                    },
                    {
                        "username": "avneesh_2001",
                        "content": "to see theback of the digit less than 9 to increse \\nex 123\\n   124\\nso last digit increase, to take the for loop last to end.\\n for(int i=l-1; i>=0; i--)\\n\\n\\nbecause the last less than 9\\nto increse last digit just return\\n\\n\\n if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;         //to not the next digit just return\\n\\n     }\\n\\nelse the number is nine\\n  else\\n     {\\n         digits[i]=0;        //all nine is 0\\n     }\\nthe after nine any digit less than nine so back to this condition\\n  if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n\\nbut the 99 is two digit plus one 100 this is increse one index of digit\\nall nine is 0\\n00\\npush back one 0\\n000\\nand first number is one\\n\\n\\n digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n\\n\\nsolution\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n int l= digits.size();\\n for(int i=l-1; i>=0; i--)\\n {\\n     if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n     else\\n     {\\n         digits[i]=0;\\n     }\\n    \\n }\\n  digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n    }\\n};"
                    },
                    {
                        "username": "Akshay0621",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        number = 0\\n        n = len(digits)\\n        ans = []\\n        if len(digits) >= 1 and len(digits) <= 100:\\n            for i in range(len(digits)):\\n                number += digits[i] * (10 ** (n - 1))\\n                n -= 1\\n            number += 1\\n            while number > 0:\\n                digit = number % 10\\n                number = number // 10\\n                ans.append(digit)\\n            ans.reverse()\\n            return ans"
                    },
                    {
                        "username": "_r0ng5_",
                        "content": "Can anyone explain to me what is the value of returnSize here? I use C language"
                    },
                    {
                        "username": "NasimHelal",
                        "content": "I feel very good after solving this problem .. thanks to leetcode "
                    },
                    {
                        "username": "sdi2100098",
                        "content": "C++ and hints\nFor anyone currently working on this problem, split the problem into two smaller ones. First what happens if at the end of the vector the digit<9. Easy : just increase the last digit by one and push back into a new array the elements of the  already existing one.(Hint for C++ : you can use digits.back() function for more elegant use instead of doing : digits[digits.size-1]) `if(digits.back()<9)`\nAnd now for the 'tricky part', the second part of the problem. So we know that the last element is equal to 9.But how can we check what happens to the second to the last element, the third to the last element and so on. Meaning what happens if they are also equal to 9. (Hint for C++ :  you can use .rbegin() and .rend() to traverse the vector from end to start) `for(auto i = digits.rbegin(); i!=digits.rend(); ++i)`.If they are equal to 9 we must make them equal to 0 and using a bool variable continue the process until we find an element which is not equal to 9 or the loop ends. At the end if for example we have a testcase like so :  digits=[9,9,9] the output should be [1,0,0,0] but we have changed the digits into -> digits=[0,0,0]. The solution is simple just push_back to the array that you will return first 1 and continue by pushing back each element of the modified digits(0,0,0).   `return_array.push_back(1);\n            for(auto &j:digits){\n                return_array.push_back(j);`"
                    },
                    {
                        "username": "jonathanwu907890",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        if digits[-1] == 9:\\n            digits[-1] = 1\\n            digits.append(0)\\n            return digits\\n        digits[-1] = digits[-1] + 1\\n        return digits\\n\\nit doesn\\'t work for nums = 9,9??\\nwhy does it expect 1,0,0\\nif i increment last digit of nums then it would be 9,1,0\\ni dont see how this could be 1,0,0"
                    },
                    {
                        "username": "I3imran3",
                        "content": "const plusOne =(digits)=>(BigInt(digits.join(\"\")) +BigInt (1)).toString().split(\"\")"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "     public int[] plusOne(int[] digits) {\n        int remainder = 0;\n        int digitCount = digits.length - 1;\n        digits[digitCount] = digits[digitCount] + 1;\n\n        do {\n            if (digits[digitCount] + remainder > 9) {\n                digits[digitCount] = (digits[digitCount] + remainder) % 10;\n                remainder = 1;\n            } else {\n                digits[digitCount] = (digits[digitCount] + remainder);\n                remainder = 0;\n            }\n\n            digitCount--;\n        } while (remainder != 0 && digitCount >= 0);\n\n        if (remainder == 1) {\n            int[] newDigits = new int[digits.length + 1];\n            newDigits[0] = 1;\n\n            System.arraycopy(digits, 0, newDigits, 1, digits.length);\n\n            return newDigits;\n        }\n\n        return digits; \n    }"
                    }
                ]
            },
            {
                "id": 1789588,
                "content": [
                    {
                        "username": "Raj5504",
                        "content": "int n = digits.length;\\n        for(int i = n-1;i >= 0;i--){\\n            if(digits[i] < 9){\\n                digits[i]++;\\n                return digits;\\n            }else{      \\n                digits[i] = 0;\\n            } \\n        }\\n        int[] arr = new int[n+1];\\n        arr[0]=1;\\n        \\n        return arr;"
                    },
                    {
                        "username": "tkulkarni",
                        "content": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        int[] arr = new int[digits.length];\\n        for(int i=0; i<digits.length; i++){\\n            arr[i] = digits[i];\\n        }\\n        arr[digits.length-1] += 1;\\n\\n        return arr;\\n    }\\n}\\n\\nfirst two cases are successfull but the last case: \\ninput: [9]\\noutput[10]\\nexpected: [1,0]\\n????"
                    },
                    {
                        "username": "avneesh_2001",
                        "content": "to see theback of the digit less than 9 to increse \\nex 123\\n   124\\nso last digit increase, to take the for loop last to end.\\n for(int i=l-1; i>=0; i--)\\n\\n\\nbecause the last less than 9\\nto increse last digit just return\\n\\n\\n if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;         //to not the next digit just return\\n\\n     }\\n\\nelse the number is nine\\n  else\\n     {\\n         digits[i]=0;        //all nine is 0\\n     }\\nthe after nine any digit less than nine so back to this condition\\n  if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n\\nbut the 99 is two digit plus one 100 this is increse one index of digit\\nall nine is 0\\n00\\npush back one 0\\n000\\nand first number is one\\n\\n\\n digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n\\n\\nsolution\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n int l= digits.size();\\n for(int i=l-1; i>=0; i--)\\n {\\n     if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n     else\\n     {\\n         digits[i]=0;\\n     }\\n    \\n }\\n  digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n    }\\n};"
                    },
                    {
                        "username": "Akshay0621",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        number = 0\\n        n = len(digits)\\n        ans = []\\n        if len(digits) >= 1 and len(digits) <= 100:\\n            for i in range(len(digits)):\\n                number += digits[i] * (10 ** (n - 1))\\n                n -= 1\\n            number += 1\\n            while number > 0:\\n                digit = number % 10\\n                number = number // 10\\n                ans.append(digit)\\n            ans.reverse()\\n            return ans"
                    },
                    {
                        "username": "_r0ng5_",
                        "content": "Can anyone explain to me what is the value of returnSize here? I use C language"
                    },
                    {
                        "username": "NasimHelal",
                        "content": "I feel very good after solving this problem .. thanks to leetcode "
                    },
                    {
                        "username": "sdi2100098",
                        "content": "C++ and hints\nFor anyone currently working on this problem, split the problem into two smaller ones. First what happens if at the end of the vector the digit<9. Easy : just increase the last digit by one and push back into a new array the elements of the  already existing one.(Hint for C++ : you can use digits.back() function for more elegant use instead of doing : digits[digits.size-1]) `if(digits.back()<9)`\nAnd now for the 'tricky part', the second part of the problem. So we know that the last element is equal to 9.But how can we check what happens to the second to the last element, the third to the last element and so on. Meaning what happens if they are also equal to 9. (Hint for C++ :  you can use .rbegin() and .rend() to traverse the vector from end to start) `for(auto i = digits.rbegin(); i!=digits.rend(); ++i)`.If they are equal to 9 we must make them equal to 0 and using a bool variable continue the process until we find an element which is not equal to 9 or the loop ends. At the end if for example we have a testcase like so :  digits=[9,9,9] the output should be [1,0,0,0] but we have changed the digits into -> digits=[0,0,0]. The solution is simple just push_back to the array that you will return first 1 and continue by pushing back each element of the modified digits(0,0,0).   `return_array.push_back(1);\n            for(auto &j:digits){\n                return_array.push_back(j);`"
                    },
                    {
                        "username": "jonathanwu907890",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        if digits[-1] == 9:\\n            digits[-1] = 1\\n            digits.append(0)\\n            return digits\\n        digits[-1] = digits[-1] + 1\\n        return digits\\n\\nit doesn\\'t work for nums = 9,9??\\nwhy does it expect 1,0,0\\nif i increment last digit of nums then it would be 9,1,0\\ni dont see how this could be 1,0,0"
                    },
                    {
                        "username": "I3imran3",
                        "content": "const plusOne =(digits)=>(BigInt(digits.join(\"\")) +BigInt (1)).toString().split(\"\")"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "     public int[] plusOne(int[] digits) {\n        int remainder = 0;\n        int digitCount = digits.length - 1;\n        digits[digitCount] = digits[digitCount] + 1;\n\n        do {\n            if (digits[digitCount] + remainder > 9) {\n                digits[digitCount] = (digits[digitCount] + remainder) % 10;\n                remainder = 1;\n            } else {\n                digits[digitCount] = (digits[digitCount] + remainder);\n                remainder = 0;\n            }\n\n            digitCount--;\n        } while (remainder != 0 && digitCount >= 0);\n\n        if (remainder == 1) {\n            int[] newDigits = new int[digits.length + 1];\n            newDigits[0] = 1;\n\n            System.arraycopy(digits, 0, newDigits, 1, digits.length);\n\n            return newDigits;\n        }\n\n        return digits; \n    }"
                    }
                ]
            },
            {
                "id": 1789139,
                "content": [
                    {
                        "username": "Raj5504",
                        "content": "int n = digits.length;\\n        for(int i = n-1;i >= 0;i--){\\n            if(digits[i] < 9){\\n                digits[i]++;\\n                return digits;\\n            }else{      \\n                digits[i] = 0;\\n            } \\n        }\\n        int[] arr = new int[n+1];\\n        arr[0]=1;\\n        \\n        return arr;"
                    },
                    {
                        "username": "tkulkarni",
                        "content": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        int[] arr = new int[digits.length];\\n        for(int i=0; i<digits.length; i++){\\n            arr[i] = digits[i];\\n        }\\n        arr[digits.length-1] += 1;\\n\\n        return arr;\\n    }\\n}\\n\\nfirst two cases are successfull but the last case: \\ninput: [9]\\noutput[10]\\nexpected: [1,0]\\n????"
                    },
                    {
                        "username": "avneesh_2001",
                        "content": "to see theback of the digit less than 9 to increse \\nex 123\\n   124\\nso last digit increase, to take the for loop last to end.\\n for(int i=l-1; i>=0; i--)\\n\\n\\nbecause the last less than 9\\nto increse last digit just return\\n\\n\\n if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;         //to not the next digit just return\\n\\n     }\\n\\nelse the number is nine\\n  else\\n     {\\n         digits[i]=0;        //all nine is 0\\n     }\\nthe after nine any digit less than nine so back to this condition\\n  if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n\\nbut the 99 is two digit plus one 100 this is increse one index of digit\\nall nine is 0\\n00\\npush back one 0\\n000\\nand first number is one\\n\\n\\n digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n\\n\\nsolution\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n int l= digits.size();\\n for(int i=l-1; i>=0; i--)\\n {\\n     if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n     else\\n     {\\n         digits[i]=0;\\n     }\\n    \\n }\\n  digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n    }\\n};"
                    },
                    {
                        "username": "Akshay0621",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        number = 0\\n        n = len(digits)\\n        ans = []\\n        if len(digits) >= 1 and len(digits) <= 100:\\n            for i in range(len(digits)):\\n                number += digits[i] * (10 ** (n - 1))\\n                n -= 1\\n            number += 1\\n            while number > 0:\\n                digit = number % 10\\n                number = number // 10\\n                ans.append(digit)\\n            ans.reverse()\\n            return ans"
                    },
                    {
                        "username": "_r0ng5_",
                        "content": "Can anyone explain to me what is the value of returnSize here? I use C language"
                    },
                    {
                        "username": "NasimHelal",
                        "content": "I feel very good after solving this problem .. thanks to leetcode "
                    },
                    {
                        "username": "sdi2100098",
                        "content": "C++ and hints\nFor anyone currently working on this problem, split the problem into two smaller ones. First what happens if at the end of the vector the digit<9. Easy : just increase the last digit by one and push back into a new array the elements of the  already existing one.(Hint for C++ : you can use digits.back() function for more elegant use instead of doing : digits[digits.size-1]) `if(digits.back()<9)`\nAnd now for the 'tricky part', the second part of the problem. So we know that the last element is equal to 9.But how can we check what happens to the second to the last element, the third to the last element and so on. Meaning what happens if they are also equal to 9. (Hint for C++ :  you can use .rbegin() and .rend() to traverse the vector from end to start) `for(auto i = digits.rbegin(); i!=digits.rend(); ++i)`.If they are equal to 9 we must make them equal to 0 and using a bool variable continue the process until we find an element which is not equal to 9 or the loop ends. At the end if for example we have a testcase like so :  digits=[9,9,9] the output should be [1,0,0,0] but we have changed the digits into -> digits=[0,0,0]. The solution is simple just push_back to the array that you will return first 1 and continue by pushing back each element of the modified digits(0,0,0).   `return_array.push_back(1);\n            for(auto &j:digits){\n                return_array.push_back(j);`"
                    },
                    {
                        "username": "jonathanwu907890",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        if digits[-1] == 9:\\n            digits[-1] = 1\\n            digits.append(0)\\n            return digits\\n        digits[-1] = digits[-1] + 1\\n        return digits\\n\\nit doesn\\'t work for nums = 9,9??\\nwhy does it expect 1,0,0\\nif i increment last digit of nums then it would be 9,1,0\\ni dont see how this could be 1,0,0"
                    },
                    {
                        "username": "I3imran3",
                        "content": "const plusOne =(digits)=>(BigInt(digits.join(\"\")) +BigInt (1)).toString().split(\"\")"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "     public int[] plusOne(int[] digits) {\n        int remainder = 0;\n        int digitCount = digits.length - 1;\n        digits[digitCount] = digits[digitCount] + 1;\n\n        do {\n            if (digits[digitCount] + remainder > 9) {\n                digits[digitCount] = (digits[digitCount] + remainder) % 10;\n                remainder = 1;\n            } else {\n                digits[digitCount] = (digits[digitCount] + remainder);\n                remainder = 0;\n            }\n\n            digitCount--;\n        } while (remainder != 0 && digitCount >= 0);\n\n        if (remainder == 1) {\n            int[] newDigits = new int[digits.length + 1];\n            newDigits[0] = 1;\n\n            System.arraycopy(digits, 0, newDigits, 1, digits.length);\n\n            return newDigits;\n        }\n\n        return digits; \n    }"
                    }
                ]
            },
            {
                "id": 1785143,
                "content": [
                    {
                        "username": "Raj5504",
                        "content": "int n = digits.length;\\n        for(int i = n-1;i >= 0;i--){\\n            if(digits[i] < 9){\\n                digits[i]++;\\n                return digits;\\n            }else{      \\n                digits[i] = 0;\\n            } \\n        }\\n        int[] arr = new int[n+1];\\n        arr[0]=1;\\n        \\n        return arr;"
                    },
                    {
                        "username": "tkulkarni",
                        "content": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        int[] arr = new int[digits.length];\\n        for(int i=0; i<digits.length; i++){\\n            arr[i] = digits[i];\\n        }\\n        arr[digits.length-1] += 1;\\n\\n        return arr;\\n    }\\n}\\n\\nfirst two cases are successfull but the last case: \\ninput: [9]\\noutput[10]\\nexpected: [1,0]\\n????"
                    },
                    {
                        "username": "avneesh_2001",
                        "content": "to see theback of the digit less than 9 to increse \\nex 123\\n   124\\nso last digit increase, to take the for loop last to end.\\n for(int i=l-1; i>=0; i--)\\n\\n\\nbecause the last less than 9\\nto increse last digit just return\\n\\n\\n if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;         //to not the next digit just return\\n\\n     }\\n\\nelse the number is nine\\n  else\\n     {\\n         digits[i]=0;        //all nine is 0\\n     }\\nthe after nine any digit less than nine so back to this condition\\n  if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n\\nbut the 99 is two digit plus one 100 this is increse one index of digit\\nall nine is 0\\n00\\npush back one 0\\n000\\nand first number is one\\n\\n\\n digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n\\n\\nsolution\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n int l= digits.size();\\n for(int i=l-1; i>=0; i--)\\n {\\n     if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n     else\\n     {\\n         digits[i]=0;\\n     }\\n    \\n }\\n  digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n    }\\n};"
                    },
                    {
                        "username": "Akshay0621",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        number = 0\\n        n = len(digits)\\n        ans = []\\n        if len(digits) >= 1 and len(digits) <= 100:\\n            for i in range(len(digits)):\\n                number += digits[i] * (10 ** (n - 1))\\n                n -= 1\\n            number += 1\\n            while number > 0:\\n                digit = number % 10\\n                number = number // 10\\n                ans.append(digit)\\n            ans.reverse()\\n            return ans"
                    },
                    {
                        "username": "_r0ng5_",
                        "content": "Can anyone explain to me what is the value of returnSize here? I use C language"
                    },
                    {
                        "username": "NasimHelal",
                        "content": "I feel very good after solving this problem .. thanks to leetcode "
                    },
                    {
                        "username": "sdi2100098",
                        "content": "C++ and hints\nFor anyone currently working on this problem, split the problem into two smaller ones. First what happens if at the end of the vector the digit<9. Easy : just increase the last digit by one and push back into a new array the elements of the  already existing one.(Hint for C++ : you can use digits.back() function for more elegant use instead of doing : digits[digits.size-1]) `if(digits.back()<9)`\nAnd now for the 'tricky part', the second part of the problem. So we know that the last element is equal to 9.But how can we check what happens to the second to the last element, the third to the last element and so on. Meaning what happens if they are also equal to 9. (Hint for C++ :  you can use .rbegin() and .rend() to traverse the vector from end to start) `for(auto i = digits.rbegin(); i!=digits.rend(); ++i)`.If they are equal to 9 we must make them equal to 0 and using a bool variable continue the process until we find an element which is not equal to 9 or the loop ends. At the end if for example we have a testcase like so :  digits=[9,9,9] the output should be [1,0,0,0] but we have changed the digits into -> digits=[0,0,0]. The solution is simple just push_back to the array that you will return first 1 and continue by pushing back each element of the modified digits(0,0,0).   `return_array.push_back(1);\n            for(auto &j:digits){\n                return_array.push_back(j);`"
                    },
                    {
                        "username": "jonathanwu907890",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        if digits[-1] == 9:\\n            digits[-1] = 1\\n            digits.append(0)\\n            return digits\\n        digits[-1] = digits[-1] + 1\\n        return digits\\n\\nit doesn\\'t work for nums = 9,9??\\nwhy does it expect 1,0,0\\nif i increment last digit of nums then it would be 9,1,0\\ni dont see how this could be 1,0,0"
                    },
                    {
                        "username": "I3imran3",
                        "content": "const plusOne =(digits)=>(BigInt(digits.join(\"\")) +BigInt (1)).toString().split(\"\")"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "     public int[] plusOne(int[] digits) {\n        int remainder = 0;\n        int digitCount = digits.length - 1;\n        digits[digitCount] = digits[digitCount] + 1;\n\n        do {\n            if (digits[digitCount] + remainder > 9) {\n                digits[digitCount] = (digits[digitCount] + remainder) % 10;\n                remainder = 1;\n            } else {\n                digits[digitCount] = (digits[digitCount] + remainder);\n                remainder = 0;\n            }\n\n            digitCount--;\n        } while (remainder != 0 && digitCount >= 0);\n\n        if (remainder == 1) {\n            int[] newDigits = new int[digits.length + 1];\n            newDigits[0] = 1;\n\n            System.arraycopy(digits, 0, newDigits, 1, digits.length);\n\n            return newDigits;\n        }\n\n        return digits; \n    }"
                    }
                ]
            },
            {
                "id": 1779515,
                "content": [
                    {
                        "username": "Raj5504",
                        "content": "int n = digits.length;\\n        for(int i = n-1;i >= 0;i--){\\n            if(digits[i] < 9){\\n                digits[i]++;\\n                return digits;\\n            }else{      \\n                digits[i] = 0;\\n            } \\n        }\\n        int[] arr = new int[n+1];\\n        arr[0]=1;\\n        \\n        return arr;"
                    },
                    {
                        "username": "tkulkarni",
                        "content": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        int[] arr = new int[digits.length];\\n        for(int i=0; i<digits.length; i++){\\n            arr[i] = digits[i];\\n        }\\n        arr[digits.length-1] += 1;\\n\\n        return arr;\\n    }\\n}\\n\\nfirst two cases are successfull but the last case: \\ninput: [9]\\noutput[10]\\nexpected: [1,0]\\n????"
                    },
                    {
                        "username": "avneesh_2001",
                        "content": "to see theback of the digit less than 9 to increse \\nex 123\\n   124\\nso last digit increase, to take the for loop last to end.\\n for(int i=l-1; i>=0; i--)\\n\\n\\nbecause the last less than 9\\nto increse last digit just return\\n\\n\\n if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;         //to not the next digit just return\\n\\n     }\\n\\nelse the number is nine\\n  else\\n     {\\n         digits[i]=0;        //all nine is 0\\n     }\\nthe after nine any digit less than nine so back to this condition\\n  if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n\\nbut the 99 is two digit plus one 100 this is increse one index of digit\\nall nine is 0\\n00\\npush back one 0\\n000\\nand first number is one\\n\\n\\n digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n\\n\\nsolution\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n int l= digits.size();\\n for(int i=l-1; i>=0; i--)\\n {\\n     if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n     else\\n     {\\n         digits[i]=0;\\n     }\\n    \\n }\\n  digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n    }\\n};"
                    },
                    {
                        "username": "Akshay0621",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        number = 0\\n        n = len(digits)\\n        ans = []\\n        if len(digits) >= 1 and len(digits) <= 100:\\n            for i in range(len(digits)):\\n                number += digits[i] * (10 ** (n - 1))\\n                n -= 1\\n            number += 1\\n            while number > 0:\\n                digit = number % 10\\n                number = number // 10\\n                ans.append(digit)\\n            ans.reverse()\\n            return ans"
                    },
                    {
                        "username": "_r0ng5_",
                        "content": "Can anyone explain to me what is the value of returnSize here? I use C language"
                    },
                    {
                        "username": "NasimHelal",
                        "content": "I feel very good after solving this problem .. thanks to leetcode "
                    },
                    {
                        "username": "sdi2100098",
                        "content": "C++ and hints\nFor anyone currently working on this problem, split the problem into two smaller ones. First what happens if at the end of the vector the digit<9. Easy : just increase the last digit by one and push back into a new array the elements of the  already existing one.(Hint for C++ : you can use digits.back() function for more elegant use instead of doing : digits[digits.size-1]) `if(digits.back()<9)`\nAnd now for the 'tricky part', the second part of the problem. So we know that the last element is equal to 9.But how can we check what happens to the second to the last element, the third to the last element and so on. Meaning what happens if they are also equal to 9. (Hint for C++ :  you can use .rbegin() and .rend() to traverse the vector from end to start) `for(auto i = digits.rbegin(); i!=digits.rend(); ++i)`.If they are equal to 9 we must make them equal to 0 and using a bool variable continue the process until we find an element which is not equal to 9 or the loop ends. At the end if for example we have a testcase like so :  digits=[9,9,9] the output should be [1,0,0,0] but we have changed the digits into -> digits=[0,0,0]. The solution is simple just push_back to the array that you will return first 1 and continue by pushing back each element of the modified digits(0,0,0).   `return_array.push_back(1);\n            for(auto &j:digits){\n                return_array.push_back(j);`"
                    },
                    {
                        "username": "jonathanwu907890",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        if digits[-1] == 9:\\n            digits[-1] = 1\\n            digits.append(0)\\n            return digits\\n        digits[-1] = digits[-1] + 1\\n        return digits\\n\\nit doesn\\'t work for nums = 9,9??\\nwhy does it expect 1,0,0\\nif i increment last digit of nums then it would be 9,1,0\\ni dont see how this could be 1,0,0"
                    },
                    {
                        "username": "I3imran3",
                        "content": "const plusOne =(digits)=>(BigInt(digits.join(\"\")) +BigInt (1)).toString().split(\"\")"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "     public int[] plusOne(int[] digits) {\n        int remainder = 0;\n        int digitCount = digits.length - 1;\n        digits[digitCount] = digits[digitCount] + 1;\n\n        do {\n            if (digits[digitCount] + remainder > 9) {\n                digits[digitCount] = (digits[digitCount] + remainder) % 10;\n                remainder = 1;\n            } else {\n                digits[digitCount] = (digits[digitCount] + remainder);\n                remainder = 0;\n            }\n\n            digitCount--;\n        } while (remainder != 0 && digitCount >= 0);\n\n        if (remainder == 1) {\n            int[] newDigits = new int[digits.length + 1];\n            newDigits[0] = 1;\n\n            System.arraycopy(digits, 0, newDigits, 1, digits.length);\n\n            return newDigits;\n        }\n\n        return digits; \n    }"
                    }
                ]
            },
            {
                "id": 1774899,
                "content": [
                    {
                        "username": "Raj5504",
                        "content": "int n = digits.length;\\n        for(int i = n-1;i >= 0;i--){\\n            if(digits[i] < 9){\\n                digits[i]++;\\n                return digits;\\n            }else{      \\n                digits[i] = 0;\\n            } \\n        }\\n        int[] arr = new int[n+1];\\n        arr[0]=1;\\n        \\n        return arr;"
                    },
                    {
                        "username": "tkulkarni",
                        "content": "class Solution {\\n    public int[] plusOne(int[] digits) {\\n        int[] arr = new int[digits.length];\\n        for(int i=0; i<digits.length; i++){\\n            arr[i] = digits[i];\\n        }\\n        arr[digits.length-1] += 1;\\n\\n        return arr;\\n    }\\n}\\n\\nfirst two cases are successfull but the last case: \\ninput: [9]\\noutput[10]\\nexpected: [1,0]\\n????"
                    },
                    {
                        "username": "avneesh_2001",
                        "content": "to see theback of the digit less than 9 to increse \\nex 123\\n   124\\nso last digit increase, to take the for loop last to end.\\n for(int i=l-1; i>=0; i--)\\n\\n\\nbecause the last less than 9\\nto increse last digit just return\\n\\n\\n if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;         //to not the next digit just return\\n\\n     }\\n\\nelse the number is nine\\n  else\\n     {\\n         digits[i]=0;        //all nine is 0\\n     }\\nthe after nine any digit less than nine so back to this condition\\n  if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n\\nbut the 99 is two digit plus one 100 this is increse one index of digit\\nall nine is 0\\n00\\npush back one 0\\n000\\nand first number is one\\n\\n\\n digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n\\n\\nsolution\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n int l= digits.size();\\n for(int i=l-1; i>=0; i--)\\n {\\n     if(digits[i]<9)\\n     {\\n        digits[i]++;\\n        return digits;\\n\\n     }\\n     else\\n     {\\n         digits[i]=0;\\n     }\\n    \\n }\\n  digits.push_back(0);\\n     digits[0]=1;\\n     return digits;\\n    }\\n};"
                    },
                    {
                        "username": "Akshay0621",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        number = 0\\n        n = len(digits)\\n        ans = []\\n        if len(digits) >= 1 and len(digits) <= 100:\\n            for i in range(len(digits)):\\n                number += digits[i] * (10 ** (n - 1))\\n                n -= 1\\n            number += 1\\n            while number > 0:\\n                digit = number % 10\\n                number = number // 10\\n                ans.append(digit)\\n            ans.reverse()\\n            return ans"
                    },
                    {
                        "username": "_r0ng5_",
                        "content": "Can anyone explain to me what is the value of returnSize here? I use C language"
                    },
                    {
                        "username": "NasimHelal",
                        "content": "I feel very good after solving this problem .. thanks to leetcode "
                    },
                    {
                        "username": "sdi2100098",
                        "content": "C++ and hints\nFor anyone currently working on this problem, split the problem into two smaller ones. First what happens if at the end of the vector the digit<9. Easy : just increase the last digit by one and push back into a new array the elements of the  already existing one.(Hint for C++ : you can use digits.back() function for more elegant use instead of doing : digits[digits.size-1]) `if(digits.back()<9)`\nAnd now for the 'tricky part', the second part of the problem. So we know that the last element is equal to 9.But how can we check what happens to the second to the last element, the third to the last element and so on. Meaning what happens if they are also equal to 9. (Hint for C++ :  you can use .rbegin() and .rend() to traverse the vector from end to start) `for(auto i = digits.rbegin(); i!=digits.rend(); ++i)`.If they are equal to 9 we must make them equal to 0 and using a bool variable continue the process until we find an element which is not equal to 9 or the loop ends. At the end if for example we have a testcase like so :  digits=[9,9,9] the output should be [1,0,0,0] but we have changed the digits into -> digits=[0,0,0]. The solution is simple just push_back to the array that you will return first 1 and continue by pushing back each element of the modified digits(0,0,0).   `return_array.push_back(1);\n            for(auto &j:digits){\n                return_array.push_back(j);`"
                    },
                    {
                        "username": "jonathanwu907890",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        if digits[-1] == 9:\\n            digits[-1] = 1\\n            digits.append(0)\\n            return digits\\n        digits[-1] = digits[-1] + 1\\n        return digits\\n\\nit doesn\\'t work for nums = 9,9??\\nwhy does it expect 1,0,0\\nif i increment last digit of nums then it would be 9,1,0\\ni dont see how this could be 1,0,0"
                    },
                    {
                        "username": "I3imran3",
                        "content": "const plusOne =(digits)=>(BigInt(digits.join(\"\")) +BigInt (1)).toString().split(\"\")"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "     public int[] plusOne(int[] digits) {\n        int remainder = 0;\n        int digitCount = digits.length - 1;\n        digits[digitCount] = digits[digitCount] + 1;\n\n        do {\n            if (digits[digitCount] + remainder > 9) {\n                digits[digitCount] = (digits[digitCount] + remainder) % 10;\n                remainder = 1;\n            } else {\n                digits[digitCount] = (digits[digitCount] + remainder);\n                remainder = 0;\n            }\n\n            digitCount--;\n        } while (remainder != 0 && digitCount >= 0);\n\n        if (remainder == 1) {\n            int[] newDigits = new int[digits.length + 1];\n            newDigits[0] = 1;\n\n            System.arraycopy(digits, 0, newDigits, 1, digits.length);\n\n            return newDigits;\n        }\n\n        return digits; \n    }"
                    }
                ]
            },
            {
                "id": 1772541,
                "content": [
                    {
                        "username": "chirag123490",
                        "content": "why the hell is this showing after taking long long datatype\\nLine 7: Char 34: runtime error: signed integer overflow: 7285091295366732843 * 10 cannot be represented in type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:16:34"
                    },
                    {
                        "username": "neeluuu",
                        "content": " String res=\"\";\\n     \\n        for(int i=0;i<digits.length;i++)\\n        {\\n             String s1 = Integer.toString(digits[i]);\\n            res=res+s1;\\n        }\\n           \\n          \\n              BigInteger num=new BigInteger(res);\\n           BigInteger one=new BigInteger(\"1\");\\n              num=num.add(one);\\n           \\n             \\n                String str=num.toString();\\n               int[] arr=new int[str.length()];\\n               \\n        System.out.println(res);\\n\\n     \\n       \\n      for(int i=0;i<str.length();i++)\\n      {\\n            char ch=str.charAt(i);\\n         arr[i]=ch-\\'0\\'; \\n      }\\n\\n        return arr;\\n        \\n\\n"
                    },
                    {
                        "username": "palakjain_123",
                        "content": "Solution is correct till 60 test cases how should approach next\\nvector<int> plusOne(vector<int>& digits) {\\n        vector <int> temp;\\n       long long int n=1,g=0,r=0;\\n       long long int len=digits.size();\\n        while(len-1>0)\\n        {\\n          n=n*10;\\n          len--;\\n        }\\n        long long int sum=0;\\n        for(int i=0;i<digits.size();i++)\\n        {\\n           sum=sum+digits[i]*n;\\n           n=n/10;\\n        }\\n        sum=sum+1;\\n        int temp1=sum,leng=0;\\n        while(temp1!=0) {\\n          leng++;\\n          temp1=temp1/10;\\n        } \\n        int count=0;\\n        for(int i=0;i<leng;i++)\\n        {\\n          r=sum%10;\\n          temp.push_back(r);\\n          sum=sum/10;\\n          count++;\\n        }\\n        reverse(temp.begin(),temp.end());\\n        return temp;\\n    }\\n"
                    },
                    {
                        "username": "RANJITH_G",
                        "content": "this is my code ,I couldn\\'t able to solve the error(index 1 out of bounds for length 1)@ 27th line..can anyone help me according this>!!\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int j=0;\\n        int sum=0,num=0;\\n        int k=digits.length-1;\\n        int len=digits.length;\\n        while(len!=0)\\n        {\\n            sum=(int)(sum+(digits[j]*Math.pow(10,k)));\\n            k--;\\n            j++;\\n            len--;\\n        }\\n        sum=sum+1;\\n        int rem;\\n        int temp=sum;\\n        while(sum!=0)\\n        {\\n            num++;\\n            sum=sum/10;\\n        }\\n        sum=temp;\\n        int ku=num;\\n       \\n       for(j=num-1;j>=0;j--)\\n       {   rem=sum%10;\\n           digits[j]=rem;\\n           sum=sum/10;\\n       }\\n       /* for(int i=ku-1;i>=0;i--)\\n        {\\n            digits[n]=digits[i];\\n            n++;\\n        }*/\\n        return digits;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "Subh001",
                        "content": "WHY THIS SOLN IS NOT WORKING: OUTPUT {49,50,50}etc. like this.\\n        int n=digits.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum=sum*10+ digits[i];\\n        }\\n        sum++;\\n        \\n        String ans=Integer.toString(sum);\\n        int arr[]=new int[ans.length()];\\n        for(int i=0;i<arr.length;i++){\\n arr[i]=ans.charAt(i);           \\n            \\n        }\\n        return arr;\\n   \\n\\n"
                    },
                    {
                        "username": "tarunhawdia",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=0;\\n        int x=0;\\n        while(i<digits.size()){\\n            x=x*10+digits[i];\\n            i++;\\n        }\\n        x=x+1;\\n        while(x>=0){\\n            int rev=0;\\n            rev=x%10;\\n            x=x/10;\\n            digits.insert(digits.begin(),rev);\\n        }\\n        return digits;\\n    }\\n};\\n//why TLE showing is this?"
                    },
                    {
                        "username": "alexarmstrongvi",
                        "content": "Why do C++ solutions have higher memory usage (8.7 - 8.8MB) when they update the digits vector in-place compared to solutions that store the answer in a new vector (8.4 - 8.6MB)?"
                    },
                    {
                        "username": "abdullahfazili3614",
                        "content": "digits = [8,9,9,9]\\nhow is the output 1,0,0,0,0\\nmy answer is 9,0,0,0"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "jpwallace22",
                        "content": "I created a recursive function that works on everything I can throw at it.. however leetcode fails with a `process exited with signal SIGSEGV` whenever it tries to run it. Anyone else see this? "
                    }
                ]
            },
            {
                "id": 1772367,
                "content": [
                    {
                        "username": "chirag123490",
                        "content": "why the hell is this showing after taking long long datatype\\nLine 7: Char 34: runtime error: signed integer overflow: 7285091295366732843 * 10 cannot be represented in type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:16:34"
                    },
                    {
                        "username": "neeluuu",
                        "content": " String res=\"\";\\n     \\n        for(int i=0;i<digits.length;i++)\\n        {\\n             String s1 = Integer.toString(digits[i]);\\n            res=res+s1;\\n        }\\n           \\n          \\n              BigInteger num=new BigInteger(res);\\n           BigInteger one=new BigInteger(\"1\");\\n              num=num.add(one);\\n           \\n             \\n                String str=num.toString();\\n               int[] arr=new int[str.length()];\\n               \\n        System.out.println(res);\\n\\n     \\n       \\n      for(int i=0;i<str.length();i++)\\n      {\\n            char ch=str.charAt(i);\\n         arr[i]=ch-\\'0\\'; \\n      }\\n\\n        return arr;\\n        \\n\\n"
                    },
                    {
                        "username": "palakjain_123",
                        "content": "Solution is correct till 60 test cases how should approach next\\nvector<int> plusOne(vector<int>& digits) {\\n        vector <int> temp;\\n       long long int n=1,g=0,r=0;\\n       long long int len=digits.size();\\n        while(len-1>0)\\n        {\\n          n=n*10;\\n          len--;\\n        }\\n        long long int sum=0;\\n        for(int i=0;i<digits.size();i++)\\n        {\\n           sum=sum+digits[i]*n;\\n           n=n/10;\\n        }\\n        sum=sum+1;\\n        int temp1=sum,leng=0;\\n        while(temp1!=0) {\\n          leng++;\\n          temp1=temp1/10;\\n        } \\n        int count=0;\\n        for(int i=0;i<leng;i++)\\n        {\\n          r=sum%10;\\n          temp.push_back(r);\\n          sum=sum/10;\\n          count++;\\n        }\\n        reverse(temp.begin(),temp.end());\\n        return temp;\\n    }\\n"
                    },
                    {
                        "username": "RANJITH_G",
                        "content": "this is my code ,I couldn\\'t able to solve the error(index 1 out of bounds for length 1)@ 27th line..can anyone help me according this>!!\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int j=0;\\n        int sum=0,num=0;\\n        int k=digits.length-1;\\n        int len=digits.length;\\n        while(len!=0)\\n        {\\n            sum=(int)(sum+(digits[j]*Math.pow(10,k)));\\n            k--;\\n            j++;\\n            len--;\\n        }\\n        sum=sum+1;\\n        int rem;\\n        int temp=sum;\\n        while(sum!=0)\\n        {\\n            num++;\\n            sum=sum/10;\\n        }\\n        sum=temp;\\n        int ku=num;\\n       \\n       for(j=num-1;j>=0;j--)\\n       {   rem=sum%10;\\n           digits[j]=rem;\\n           sum=sum/10;\\n       }\\n       /* for(int i=ku-1;i>=0;i--)\\n        {\\n            digits[n]=digits[i];\\n            n++;\\n        }*/\\n        return digits;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "Subh001",
                        "content": "WHY THIS SOLN IS NOT WORKING: OUTPUT {49,50,50}etc. like this.\\n        int n=digits.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum=sum*10+ digits[i];\\n        }\\n        sum++;\\n        \\n        String ans=Integer.toString(sum);\\n        int arr[]=new int[ans.length()];\\n        for(int i=0;i<arr.length;i++){\\n arr[i]=ans.charAt(i);           \\n            \\n        }\\n        return arr;\\n   \\n\\n"
                    },
                    {
                        "username": "tarunhawdia",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=0;\\n        int x=0;\\n        while(i<digits.size()){\\n            x=x*10+digits[i];\\n            i++;\\n        }\\n        x=x+1;\\n        while(x>=0){\\n            int rev=0;\\n            rev=x%10;\\n            x=x/10;\\n            digits.insert(digits.begin(),rev);\\n        }\\n        return digits;\\n    }\\n};\\n//why TLE showing is this?"
                    },
                    {
                        "username": "alexarmstrongvi",
                        "content": "Why do C++ solutions have higher memory usage (8.7 - 8.8MB) when they update the digits vector in-place compared to solutions that store the answer in a new vector (8.4 - 8.6MB)?"
                    },
                    {
                        "username": "abdullahfazili3614",
                        "content": "digits = [8,9,9,9]\\nhow is the output 1,0,0,0,0\\nmy answer is 9,0,0,0"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "jpwallace22",
                        "content": "I created a recursive function that works on everything I can throw at it.. however leetcode fails with a `process exited with signal SIGSEGV` whenever it tries to run it. Anyone else see this? "
                    }
                ]
            },
            {
                "id": 1767978,
                "content": [
                    {
                        "username": "chirag123490",
                        "content": "why the hell is this showing after taking long long datatype\\nLine 7: Char 34: runtime error: signed integer overflow: 7285091295366732843 * 10 cannot be represented in type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:16:34"
                    },
                    {
                        "username": "neeluuu",
                        "content": " String res=\"\";\\n     \\n        for(int i=0;i<digits.length;i++)\\n        {\\n             String s1 = Integer.toString(digits[i]);\\n            res=res+s1;\\n        }\\n           \\n          \\n              BigInteger num=new BigInteger(res);\\n           BigInteger one=new BigInteger(\"1\");\\n              num=num.add(one);\\n           \\n             \\n                String str=num.toString();\\n               int[] arr=new int[str.length()];\\n               \\n        System.out.println(res);\\n\\n     \\n       \\n      for(int i=0;i<str.length();i++)\\n      {\\n            char ch=str.charAt(i);\\n         arr[i]=ch-\\'0\\'; \\n      }\\n\\n        return arr;\\n        \\n\\n"
                    },
                    {
                        "username": "palakjain_123",
                        "content": "Solution is correct till 60 test cases how should approach next\\nvector<int> plusOne(vector<int>& digits) {\\n        vector <int> temp;\\n       long long int n=1,g=0,r=0;\\n       long long int len=digits.size();\\n        while(len-1>0)\\n        {\\n          n=n*10;\\n          len--;\\n        }\\n        long long int sum=0;\\n        for(int i=0;i<digits.size();i++)\\n        {\\n           sum=sum+digits[i]*n;\\n           n=n/10;\\n        }\\n        sum=sum+1;\\n        int temp1=sum,leng=0;\\n        while(temp1!=0) {\\n          leng++;\\n          temp1=temp1/10;\\n        } \\n        int count=0;\\n        for(int i=0;i<leng;i++)\\n        {\\n          r=sum%10;\\n          temp.push_back(r);\\n          sum=sum/10;\\n          count++;\\n        }\\n        reverse(temp.begin(),temp.end());\\n        return temp;\\n    }\\n"
                    },
                    {
                        "username": "RANJITH_G",
                        "content": "this is my code ,I couldn\\'t able to solve the error(index 1 out of bounds for length 1)@ 27th line..can anyone help me according this>!!\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int j=0;\\n        int sum=0,num=0;\\n        int k=digits.length-1;\\n        int len=digits.length;\\n        while(len!=0)\\n        {\\n            sum=(int)(sum+(digits[j]*Math.pow(10,k)));\\n            k--;\\n            j++;\\n            len--;\\n        }\\n        sum=sum+1;\\n        int rem;\\n        int temp=sum;\\n        while(sum!=0)\\n        {\\n            num++;\\n            sum=sum/10;\\n        }\\n        sum=temp;\\n        int ku=num;\\n       \\n       for(j=num-1;j>=0;j--)\\n       {   rem=sum%10;\\n           digits[j]=rem;\\n           sum=sum/10;\\n       }\\n       /* for(int i=ku-1;i>=0;i--)\\n        {\\n            digits[n]=digits[i];\\n            n++;\\n        }*/\\n        return digits;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "Subh001",
                        "content": "WHY THIS SOLN IS NOT WORKING: OUTPUT {49,50,50}etc. like this.\\n        int n=digits.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum=sum*10+ digits[i];\\n        }\\n        sum++;\\n        \\n        String ans=Integer.toString(sum);\\n        int arr[]=new int[ans.length()];\\n        for(int i=0;i<arr.length;i++){\\n arr[i]=ans.charAt(i);           \\n            \\n        }\\n        return arr;\\n   \\n\\n"
                    },
                    {
                        "username": "tarunhawdia",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=0;\\n        int x=0;\\n        while(i<digits.size()){\\n            x=x*10+digits[i];\\n            i++;\\n        }\\n        x=x+1;\\n        while(x>=0){\\n            int rev=0;\\n            rev=x%10;\\n            x=x/10;\\n            digits.insert(digits.begin(),rev);\\n        }\\n        return digits;\\n    }\\n};\\n//why TLE showing is this?"
                    },
                    {
                        "username": "alexarmstrongvi",
                        "content": "Why do C++ solutions have higher memory usage (8.7 - 8.8MB) when they update the digits vector in-place compared to solutions that store the answer in a new vector (8.4 - 8.6MB)?"
                    },
                    {
                        "username": "abdullahfazili3614",
                        "content": "digits = [8,9,9,9]\\nhow is the output 1,0,0,0,0\\nmy answer is 9,0,0,0"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "jpwallace22",
                        "content": "I created a recursive function that works on everything I can throw at it.. however leetcode fails with a `process exited with signal SIGSEGV` whenever it tries to run it. Anyone else see this? "
                    }
                ]
            },
            {
                "id": 1767655,
                "content": [
                    {
                        "username": "chirag123490",
                        "content": "why the hell is this showing after taking long long datatype\\nLine 7: Char 34: runtime error: signed integer overflow: 7285091295366732843 * 10 cannot be represented in type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:16:34"
                    },
                    {
                        "username": "neeluuu",
                        "content": " String res=\"\";\\n     \\n        for(int i=0;i<digits.length;i++)\\n        {\\n             String s1 = Integer.toString(digits[i]);\\n            res=res+s1;\\n        }\\n           \\n          \\n              BigInteger num=new BigInteger(res);\\n           BigInteger one=new BigInteger(\"1\");\\n              num=num.add(one);\\n           \\n             \\n                String str=num.toString();\\n               int[] arr=new int[str.length()];\\n               \\n        System.out.println(res);\\n\\n     \\n       \\n      for(int i=0;i<str.length();i++)\\n      {\\n            char ch=str.charAt(i);\\n         arr[i]=ch-\\'0\\'; \\n      }\\n\\n        return arr;\\n        \\n\\n"
                    },
                    {
                        "username": "palakjain_123",
                        "content": "Solution is correct till 60 test cases how should approach next\\nvector<int> plusOne(vector<int>& digits) {\\n        vector <int> temp;\\n       long long int n=1,g=0,r=0;\\n       long long int len=digits.size();\\n        while(len-1>0)\\n        {\\n          n=n*10;\\n          len--;\\n        }\\n        long long int sum=0;\\n        for(int i=0;i<digits.size();i++)\\n        {\\n           sum=sum+digits[i]*n;\\n           n=n/10;\\n        }\\n        sum=sum+1;\\n        int temp1=sum,leng=0;\\n        while(temp1!=0) {\\n          leng++;\\n          temp1=temp1/10;\\n        } \\n        int count=0;\\n        for(int i=0;i<leng;i++)\\n        {\\n          r=sum%10;\\n          temp.push_back(r);\\n          sum=sum/10;\\n          count++;\\n        }\\n        reverse(temp.begin(),temp.end());\\n        return temp;\\n    }\\n"
                    },
                    {
                        "username": "RANJITH_G",
                        "content": "this is my code ,I couldn\\'t able to solve the error(index 1 out of bounds for length 1)@ 27th line..can anyone help me according this>!!\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int j=0;\\n        int sum=0,num=0;\\n        int k=digits.length-1;\\n        int len=digits.length;\\n        while(len!=0)\\n        {\\n            sum=(int)(sum+(digits[j]*Math.pow(10,k)));\\n            k--;\\n            j++;\\n            len--;\\n        }\\n        sum=sum+1;\\n        int rem;\\n        int temp=sum;\\n        while(sum!=0)\\n        {\\n            num++;\\n            sum=sum/10;\\n        }\\n        sum=temp;\\n        int ku=num;\\n       \\n       for(j=num-1;j>=0;j--)\\n       {   rem=sum%10;\\n           digits[j]=rem;\\n           sum=sum/10;\\n       }\\n       /* for(int i=ku-1;i>=0;i--)\\n        {\\n            digits[n]=digits[i];\\n            n++;\\n        }*/\\n        return digits;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "Subh001",
                        "content": "WHY THIS SOLN IS NOT WORKING: OUTPUT {49,50,50}etc. like this.\\n        int n=digits.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum=sum*10+ digits[i];\\n        }\\n        sum++;\\n        \\n        String ans=Integer.toString(sum);\\n        int arr[]=new int[ans.length()];\\n        for(int i=0;i<arr.length;i++){\\n arr[i]=ans.charAt(i);           \\n            \\n        }\\n        return arr;\\n   \\n\\n"
                    },
                    {
                        "username": "tarunhawdia",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=0;\\n        int x=0;\\n        while(i<digits.size()){\\n            x=x*10+digits[i];\\n            i++;\\n        }\\n        x=x+1;\\n        while(x>=0){\\n            int rev=0;\\n            rev=x%10;\\n            x=x/10;\\n            digits.insert(digits.begin(),rev);\\n        }\\n        return digits;\\n    }\\n};\\n//why TLE showing is this?"
                    },
                    {
                        "username": "alexarmstrongvi",
                        "content": "Why do C++ solutions have higher memory usage (8.7 - 8.8MB) when they update the digits vector in-place compared to solutions that store the answer in a new vector (8.4 - 8.6MB)?"
                    },
                    {
                        "username": "abdullahfazili3614",
                        "content": "digits = [8,9,9,9]\\nhow is the output 1,0,0,0,0\\nmy answer is 9,0,0,0"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "jpwallace22",
                        "content": "I created a recursive function that works on everything I can throw at it.. however leetcode fails with a `process exited with signal SIGSEGV` whenever it tries to run it. Anyone else see this? "
                    }
                ]
            },
            {
                "id": 1762112,
                "content": [
                    {
                        "username": "chirag123490",
                        "content": "why the hell is this showing after taking long long datatype\\nLine 7: Char 34: runtime error: signed integer overflow: 7285091295366732843 * 10 cannot be represented in type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:16:34"
                    },
                    {
                        "username": "neeluuu",
                        "content": " String res=\"\";\\n     \\n        for(int i=0;i<digits.length;i++)\\n        {\\n             String s1 = Integer.toString(digits[i]);\\n            res=res+s1;\\n        }\\n           \\n          \\n              BigInteger num=new BigInteger(res);\\n           BigInteger one=new BigInteger(\"1\");\\n              num=num.add(one);\\n           \\n             \\n                String str=num.toString();\\n               int[] arr=new int[str.length()];\\n               \\n        System.out.println(res);\\n\\n     \\n       \\n      for(int i=0;i<str.length();i++)\\n      {\\n            char ch=str.charAt(i);\\n         arr[i]=ch-\\'0\\'; \\n      }\\n\\n        return arr;\\n        \\n\\n"
                    },
                    {
                        "username": "palakjain_123",
                        "content": "Solution is correct till 60 test cases how should approach next\\nvector<int> plusOne(vector<int>& digits) {\\n        vector <int> temp;\\n       long long int n=1,g=0,r=0;\\n       long long int len=digits.size();\\n        while(len-1>0)\\n        {\\n          n=n*10;\\n          len--;\\n        }\\n        long long int sum=0;\\n        for(int i=0;i<digits.size();i++)\\n        {\\n           sum=sum+digits[i]*n;\\n           n=n/10;\\n        }\\n        sum=sum+1;\\n        int temp1=sum,leng=0;\\n        while(temp1!=0) {\\n          leng++;\\n          temp1=temp1/10;\\n        } \\n        int count=0;\\n        for(int i=0;i<leng;i++)\\n        {\\n          r=sum%10;\\n          temp.push_back(r);\\n          sum=sum/10;\\n          count++;\\n        }\\n        reverse(temp.begin(),temp.end());\\n        return temp;\\n    }\\n"
                    },
                    {
                        "username": "RANJITH_G",
                        "content": "this is my code ,I couldn\\'t able to solve the error(index 1 out of bounds for length 1)@ 27th line..can anyone help me according this>!!\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int j=0;\\n        int sum=0,num=0;\\n        int k=digits.length-1;\\n        int len=digits.length;\\n        while(len!=0)\\n        {\\n            sum=(int)(sum+(digits[j]*Math.pow(10,k)));\\n            k--;\\n            j++;\\n            len--;\\n        }\\n        sum=sum+1;\\n        int rem;\\n        int temp=sum;\\n        while(sum!=0)\\n        {\\n            num++;\\n            sum=sum/10;\\n        }\\n        sum=temp;\\n        int ku=num;\\n       \\n       for(j=num-1;j>=0;j--)\\n       {   rem=sum%10;\\n           digits[j]=rem;\\n           sum=sum/10;\\n       }\\n       /* for(int i=ku-1;i>=0;i--)\\n        {\\n            digits[n]=digits[i];\\n            n++;\\n        }*/\\n        return digits;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "Subh001",
                        "content": "WHY THIS SOLN IS NOT WORKING: OUTPUT {49,50,50}etc. like this.\\n        int n=digits.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum=sum*10+ digits[i];\\n        }\\n        sum++;\\n        \\n        String ans=Integer.toString(sum);\\n        int arr[]=new int[ans.length()];\\n        for(int i=0;i<arr.length;i++){\\n arr[i]=ans.charAt(i);           \\n            \\n        }\\n        return arr;\\n   \\n\\n"
                    },
                    {
                        "username": "tarunhawdia",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=0;\\n        int x=0;\\n        while(i<digits.size()){\\n            x=x*10+digits[i];\\n            i++;\\n        }\\n        x=x+1;\\n        while(x>=0){\\n            int rev=0;\\n            rev=x%10;\\n            x=x/10;\\n            digits.insert(digits.begin(),rev);\\n        }\\n        return digits;\\n    }\\n};\\n//why TLE showing is this?"
                    },
                    {
                        "username": "alexarmstrongvi",
                        "content": "Why do C++ solutions have higher memory usage (8.7 - 8.8MB) when they update the digits vector in-place compared to solutions that store the answer in a new vector (8.4 - 8.6MB)?"
                    },
                    {
                        "username": "abdullahfazili3614",
                        "content": "digits = [8,9,9,9]\\nhow is the output 1,0,0,0,0\\nmy answer is 9,0,0,0"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "jpwallace22",
                        "content": "I created a recursive function that works on everything I can throw at it.. however leetcode fails with a `process exited with signal SIGSEGV` whenever it tries to run it. Anyone else see this? "
                    }
                ]
            },
            {
                "id": 1760265,
                "content": [
                    {
                        "username": "chirag123490",
                        "content": "why the hell is this showing after taking long long datatype\\nLine 7: Char 34: runtime error: signed integer overflow: 7285091295366732843 * 10 cannot be represented in type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:16:34"
                    },
                    {
                        "username": "neeluuu",
                        "content": " String res=\"\";\\n     \\n        for(int i=0;i<digits.length;i++)\\n        {\\n             String s1 = Integer.toString(digits[i]);\\n            res=res+s1;\\n        }\\n           \\n          \\n              BigInteger num=new BigInteger(res);\\n           BigInteger one=new BigInteger(\"1\");\\n              num=num.add(one);\\n           \\n             \\n                String str=num.toString();\\n               int[] arr=new int[str.length()];\\n               \\n        System.out.println(res);\\n\\n     \\n       \\n      for(int i=0;i<str.length();i++)\\n      {\\n            char ch=str.charAt(i);\\n         arr[i]=ch-\\'0\\'; \\n      }\\n\\n        return arr;\\n        \\n\\n"
                    },
                    {
                        "username": "palakjain_123",
                        "content": "Solution is correct till 60 test cases how should approach next\\nvector<int> plusOne(vector<int>& digits) {\\n        vector <int> temp;\\n       long long int n=1,g=0,r=0;\\n       long long int len=digits.size();\\n        while(len-1>0)\\n        {\\n          n=n*10;\\n          len--;\\n        }\\n        long long int sum=0;\\n        for(int i=0;i<digits.size();i++)\\n        {\\n           sum=sum+digits[i]*n;\\n           n=n/10;\\n        }\\n        sum=sum+1;\\n        int temp1=sum,leng=0;\\n        while(temp1!=0) {\\n          leng++;\\n          temp1=temp1/10;\\n        } \\n        int count=0;\\n        for(int i=0;i<leng;i++)\\n        {\\n          r=sum%10;\\n          temp.push_back(r);\\n          sum=sum/10;\\n          count++;\\n        }\\n        reverse(temp.begin(),temp.end());\\n        return temp;\\n    }\\n"
                    },
                    {
                        "username": "RANJITH_G",
                        "content": "this is my code ,I couldn\\'t able to solve the error(index 1 out of bounds for length 1)@ 27th line..can anyone help me according this>!!\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int j=0;\\n        int sum=0,num=0;\\n        int k=digits.length-1;\\n        int len=digits.length;\\n        while(len!=0)\\n        {\\n            sum=(int)(sum+(digits[j]*Math.pow(10,k)));\\n            k--;\\n            j++;\\n            len--;\\n        }\\n        sum=sum+1;\\n        int rem;\\n        int temp=sum;\\n        while(sum!=0)\\n        {\\n            num++;\\n            sum=sum/10;\\n        }\\n        sum=temp;\\n        int ku=num;\\n       \\n       for(j=num-1;j>=0;j--)\\n       {   rem=sum%10;\\n           digits[j]=rem;\\n           sum=sum/10;\\n       }\\n       /* for(int i=ku-1;i>=0;i--)\\n        {\\n            digits[n]=digits[i];\\n            n++;\\n        }*/\\n        return digits;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "Subh001",
                        "content": "WHY THIS SOLN IS NOT WORKING: OUTPUT {49,50,50}etc. like this.\\n        int n=digits.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum=sum*10+ digits[i];\\n        }\\n        sum++;\\n        \\n        String ans=Integer.toString(sum);\\n        int arr[]=new int[ans.length()];\\n        for(int i=0;i<arr.length;i++){\\n arr[i]=ans.charAt(i);           \\n            \\n        }\\n        return arr;\\n   \\n\\n"
                    },
                    {
                        "username": "tarunhawdia",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=0;\\n        int x=0;\\n        while(i<digits.size()){\\n            x=x*10+digits[i];\\n            i++;\\n        }\\n        x=x+1;\\n        while(x>=0){\\n            int rev=0;\\n            rev=x%10;\\n            x=x/10;\\n            digits.insert(digits.begin(),rev);\\n        }\\n        return digits;\\n    }\\n};\\n//why TLE showing is this?"
                    },
                    {
                        "username": "alexarmstrongvi",
                        "content": "Why do C++ solutions have higher memory usage (8.7 - 8.8MB) when they update the digits vector in-place compared to solutions that store the answer in a new vector (8.4 - 8.6MB)?"
                    },
                    {
                        "username": "abdullahfazili3614",
                        "content": "digits = [8,9,9,9]\\nhow is the output 1,0,0,0,0\\nmy answer is 9,0,0,0"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "jpwallace22",
                        "content": "I created a recursive function that works on everything I can throw at it.. however leetcode fails with a `process exited with signal SIGSEGV` whenever it tries to run it. Anyone else see this? "
                    }
                ]
            },
            {
                "id": 1759374,
                "content": [
                    {
                        "username": "chirag123490",
                        "content": "why the hell is this showing after taking long long datatype\\nLine 7: Char 34: runtime error: signed integer overflow: 7285091295366732843 * 10 cannot be represented in type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:16:34"
                    },
                    {
                        "username": "neeluuu",
                        "content": " String res=\"\";\\n     \\n        for(int i=0;i<digits.length;i++)\\n        {\\n             String s1 = Integer.toString(digits[i]);\\n            res=res+s1;\\n        }\\n           \\n          \\n              BigInteger num=new BigInteger(res);\\n           BigInteger one=new BigInteger(\"1\");\\n              num=num.add(one);\\n           \\n             \\n                String str=num.toString();\\n               int[] arr=new int[str.length()];\\n               \\n        System.out.println(res);\\n\\n     \\n       \\n      for(int i=0;i<str.length();i++)\\n      {\\n            char ch=str.charAt(i);\\n         arr[i]=ch-\\'0\\'; \\n      }\\n\\n        return arr;\\n        \\n\\n"
                    },
                    {
                        "username": "palakjain_123",
                        "content": "Solution is correct till 60 test cases how should approach next\\nvector<int> plusOne(vector<int>& digits) {\\n        vector <int> temp;\\n       long long int n=1,g=0,r=0;\\n       long long int len=digits.size();\\n        while(len-1>0)\\n        {\\n          n=n*10;\\n          len--;\\n        }\\n        long long int sum=0;\\n        for(int i=0;i<digits.size();i++)\\n        {\\n           sum=sum+digits[i]*n;\\n           n=n/10;\\n        }\\n        sum=sum+1;\\n        int temp1=sum,leng=0;\\n        while(temp1!=0) {\\n          leng++;\\n          temp1=temp1/10;\\n        } \\n        int count=0;\\n        for(int i=0;i<leng;i++)\\n        {\\n          r=sum%10;\\n          temp.push_back(r);\\n          sum=sum/10;\\n          count++;\\n        }\\n        reverse(temp.begin(),temp.end());\\n        return temp;\\n    }\\n"
                    },
                    {
                        "username": "RANJITH_G",
                        "content": "this is my code ,I couldn\\'t able to solve the error(index 1 out of bounds for length 1)@ 27th line..can anyone help me according this>!!\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int j=0;\\n        int sum=0,num=0;\\n        int k=digits.length-1;\\n        int len=digits.length;\\n        while(len!=0)\\n        {\\n            sum=(int)(sum+(digits[j]*Math.pow(10,k)));\\n            k--;\\n            j++;\\n            len--;\\n        }\\n        sum=sum+1;\\n        int rem;\\n        int temp=sum;\\n        while(sum!=0)\\n        {\\n            num++;\\n            sum=sum/10;\\n        }\\n        sum=temp;\\n        int ku=num;\\n       \\n       for(j=num-1;j>=0;j--)\\n       {   rem=sum%10;\\n           digits[j]=rem;\\n           sum=sum/10;\\n       }\\n       /* for(int i=ku-1;i>=0;i--)\\n        {\\n            digits[n]=digits[i];\\n            n++;\\n        }*/\\n        return digits;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "Subh001",
                        "content": "WHY THIS SOLN IS NOT WORKING: OUTPUT {49,50,50}etc. like this.\\n        int n=digits.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum=sum*10+ digits[i];\\n        }\\n        sum++;\\n        \\n        String ans=Integer.toString(sum);\\n        int arr[]=new int[ans.length()];\\n        for(int i=0;i<arr.length;i++){\\n arr[i]=ans.charAt(i);           \\n            \\n        }\\n        return arr;\\n   \\n\\n"
                    },
                    {
                        "username": "tarunhawdia",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=0;\\n        int x=0;\\n        while(i<digits.size()){\\n            x=x*10+digits[i];\\n            i++;\\n        }\\n        x=x+1;\\n        while(x>=0){\\n            int rev=0;\\n            rev=x%10;\\n            x=x/10;\\n            digits.insert(digits.begin(),rev);\\n        }\\n        return digits;\\n    }\\n};\\n//why TLE showing is this?"
                    },
                    {
                        "username": "alexarmstrongvi",
                        "content": "Why do C++ solutions have higher memory usage (8.7 - 8.8MB) when they update the digits vector in-place compared to solutions that store the answer in a new vector (8.4 - 8.6MB)?"
                    },
                    {
                        "username": "abdullahfazili3614",
                        "content": "digits = [8,9,9,9]\\nhow is the output 1,0,0,0,0\\nmy answer is 9,0,0,0"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "jpwallace22",
                        "content": "I created a recursive function that works on everything I can throw at it.. however leetcode fails with a `process exited with signal SIGSEGV` whenever it tries to run it. Anyone else see this? "
                    }
                ]
            },
            {
                "id": 1758655,
                "content": [
                    {
                        "username": "chirag123490",
                        "content": "why the hell is this showing after taking long long datatype\\nLine 7: Char 34: runtime error: signed integer overflow: 7285091295366732843 * 10 cannot be represented in type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:16:34"
                    },
                    {
                        "username": "neeluuu",
                        "content": " String res=\"\";\\n     \\n        for(int i=0;i<digits.length;i++)\\n        {\\n             String s1 = Integer.toString(digits[i]);\\n            res=res+s1;\\n        }\\n           \\n          \\n              BigInteger num=new BigInteger(res);\\n           BigInteger one=new BigInteger(\"1\");\\n              num=num.add(one);\\n           \\n             \\n                String str=num.toString();\\n               int[] arr=new int[str.length()];\\n               \\n        System.out.println(res);\\n\\n     \\n       \\n      for(int i=0;i<str.length();i++)\\n      {\\n            char ch=str.charAt(i);\\n         arr[i]=ch-\\'0\\'; \\n      }\\n\\n        return arr;\\n        \\n\\n"
                    },
                    {
                        "username": "palakjain_123",
                        "content": "Solution is correct till 60 test cases how should approach next\\nvector<int> plusOne(vector<int>& digits) {\\n        vector <int> temp;\\n       long long int n=1,g=0,r=0;\\n       long long int len=digits.size();\\n        while(len-1>0)\\n        {\\n          n=n*10;\\n          len--;\\n        }\\n        long long int sum=0;\\n        for(int i=0;i<digits.size();i++)\\n        {\\n           sum=sum+digits[i]*n;\\n           n=n/10;\\n        }\\n        sum=sum+1;\\n        int temp1=sum,leng=0;\\n        while(temp1!=0) {\\n          leng++;\\n          temp1=temp1/10;\\n        } \\n        int count=0;\\n        for(int i=0;i<leng;i++)\\n        {\\n          r=sum%10;\\n          temp.push_back(r);\\n          sum=sum/10;\\n          count++;\\n        }\\n        reverse(temp.begin(),temp.end());\\n        return temp;\\n    }\\n"
                    },
                    {
                        "username": "RANJITH_G",
                        "content": "this is my code ,I couldn\\'t able to solve the error(index 1 out of bounds for length 1)@ 27th line..can anyone help me according this>!!\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int j=0;\\n        int sum=0,num=0;\\n        int k=digits.length-1;\\n        int len=digits.length;\\n        while(len!=0)\\n        {\\n            sum=(int)(sum+(digits[j]*Math.pow(10,k)));\\n            k--;\\n            j++;\\n            len--;\\n        }\\n        sum=sum+1;\\n        int rem;\\n        int temp=sum;\\n        while(sum!=0)\\n        {\\n            num++;\\n            sum=sum/10;\\n        }\\n        sum=temp;\\n        int ku=num;\\n       \\n       for(j=num-1;j>=0;j--)\\n       {   rem=sum%10;\\n           digits[j]=rem;\\n           sum=sum/10;\\n       }\\n       /* for(int i=ku-1;i>=0;i--)\\n        {\\n            digits[n]=digits[i];\\n            n++;\\n        }*/\\n        return digits;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "Subh001",
                        "content": "WHY THIS SOLN IS NOT WORKING: OUTPUT {49,50,50}etc. like this.\\n        int n=digits.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum=sum*10+ digits[i];\\n        }\\n        sum++;\\n        \\n        String ans=Integer.toString(sum);\\n        int arr[]=new int[ans.length()];\\n        for(int i=0;i<arr.length;i++){\\n arr[i]=ans.charAt(i);           \\n            \\n        }\\n        return arr;\\n   \\n\\n"
                    },
                    {
                        "username": "tarunhawdia",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=0;\\n        int x=0;\\n        while(i<digits.size()){\\n            x=x*10+digits[i];\\n            i++;\\n        }\\n        x=x+1;\\n        while(x>=0){\\n            int rev=0;\\n            rev=x%10;\\n            x=x/10;\\n            digits.insert(digits.begin(),rev);\\n        }\\n        return digits;\\n    }\\n};\\n//why TLE showing is this?"
                    },
                    {
                        "username": "alexarmstrongvi",
                        "content": "Why do C++ solutions have higher memory usage (8.7 - 8.8MB) when they update the digits vector in-place compared to solutions that store the answer in a new vector (8.4 - 8.6MB)?"
                    },
                    {
                        "username": "abdullahfazili3614",
                        "content": "digits = [8,9,9,9]\\nhow is the output 1,0,0,0,0\\nmy answer is 9,0,0,0"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "jpwallace22",
                        "content": "I created a recursive function that works on everything I can throw at it.. however leetcode fails with a `process exited with signal SIGSEGV` whenever it tries to run it. Anyone else see this? "
                    }
                ]
            },
            {
                "id": 1754118,
                "content": [
                    {
                        "username": "chirag123490",
                        "content": "why the hell is this showing after taking long long datatype\\nLine 7: Char 34: runtime error: signed integer overflow: 7285091295366732843 * 10 cannot be represented in type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:16:34"
                    },
                    {
                        "username": "neeluuu",
                        "content": " String res=\"\";\\n     \\n        for(int i=0;i<digits.length;i++)\\n        {\\n             String s1 = Integer.toString(digits[i]);\\n            res=res+s1;\\n        }\\n           \\n          \\n              BigInteger num=new BigInteger(res);\\n           BigInteger one=new BigInteger(\"1\");\\n              num=num.add(one);\\n           \\n             \\n                String str=num.toString();\\n               int[] arr=new int[str.length()];\\n               \\n        System.out.println(res);\\n\\n     \\n       \\n      for(int i=0;i<str.length();i++)\\n      {\\n            char ch=str.charAt(i);\\n         arr[i]=ch-\\'0\\'; \\n      }\\n\\n        return arr;\\n        \\n\\n"
                    },
                    {
                        "username": "palakjain_123",
                        "content": "Solution is correct till 60 test cases how should approach next\\nvector<int> plusOne(vector<int>& digits) {\\n        vector <int> temp;\\n       long long int n=1,g=0,r=0;\\n       long long int len=digits.size();\\n        while(len-1>0)\\n        {\\n          n=n*10;\\n          len--;\\n        }\\n        long long int sum=0;\\n        for(int i=0;i<digits.size();i++)\\n        {\\n           sum=sum+digits[i]*n;\\n           n=n/10;\\n        }\\n        sum=sum+1;\\n        int temp1=sum,leng=0;\\n        while(temp1!=0) {\\n          leng++;\\n          temp1=temp1/10;\\n        } \\n        int count=0;\\n        for(int i=0;i<leng;i++)\\n        {\\n          r=sum%10;\\n          temp.push_back(r);\\n          sum=sum/10;\\n          count++;\\n        }\\n        reverse(temp.begin(),temp.end());\\n        return temp;\\n    }\\n"
                    },
                    {
                        "username": "RANJITH_G",
                        "content": "this is my code ,I couldn\\'t able to solve the error(index 1 out of bounds for length 1)@ 27th line..can anyone help me according this>!!\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int j=0;\\n        int sum=0,num=0;\\n        int k=digits.length-1;\\n        int len=digits.length;\\n        while(len!=0)\\n        {\\n            sum=(int)(sum+(digits[j]*Math.pow(10,k)));\\n            k--;\\n            j++;\\n            len--;\\n        }\\n        sum=sum+1;\\n        int rem;\\n        int temp=sum;\\n        while(sum!=0)\\n        {\\n            num++;\\n            sum=sum/10;\\n        }\\n        sum=temp;\\n        int ku=num;\\n       \\n       for(j=num-1;j>=0;j--)\\n       {   rem=sum%10;\\n           digits[j]=rem;\\n           sum=sum/10;\\n       }\\n       /* for(int i=ku-1;i>=0;i--)\\n        {\\n            digits[n]=digits[i];\\n            n++;\\n        }*/\\n        return digits;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "Subh001",
                        "content": "WHY THIS SOLN IS NOT WORKING: OUTPUT {49,50,50}etc. like this.\\n        int n=digits.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum=sum*10+ digits[i];\\n        }\\n        sum++;\\n        \\n        String ans=Integer.toString(sum);\\n        int arr[]=new int[ans.length()];\\n        for(int i=0;i<arr.length;i++){\\n arr[i]=ans.charAt(i);           \\n            \\n        }\\n        return arr;\\n   \\n\\n"
                    },
                    {
                        "username": "tarunhawdia",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=0;\\n        int x=0;\\n        while(i<digits.size()){\\n            x=x*10+digits[i];\\n            i++;\\n        }\\n        x=x+1;\\n        while(x>=0){\\n            int rev=0;\\n            rev=x%10;\\n            x=x/10;\\n            digits.insert(digits.begin(),rev);\\n        }\\n        return digits;\\n    }\\n};\\n//why TLE showing is this?"
                    },
                    {
                        "username": "alexarmstrongvi",
                        "content": "Why do C++ solutions have higher memory usage (8.7 - 8.8MB) when they update the digits vector in-place compared to solutions that store the answer in a new vector (8.4 - 8.6MB)?"
                    },
                    {
                        "username": "abdullahfazili3614",
                        "content": "digits = [8,9,9,9]\\nhow is the output 1,0,0,0,0\\nmy answer is 9,0,0,0"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "jpwallace22",
                        "content": "I created a recursive function that works on everything I can throw at it.. however leetcode fails with a `process exited with signal SIGSEGV` whenever it tries to run it. Anyone else see this? "
                    }
                ]
            },
            {
                "id": 1751716,
                "content": [
                    {
                        "username": "chirag123490",
                        "content": "why the hell is this showing after taking long long datatype\\nLine 7: Char 34: runtime error: signed integer overflow: 7285091295366732843 * 10 cannot be represented in type \\'long long\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:16:34"
                    },
                    {
                        "username": "neeluuu",
                        "content": " String res=\"\";\\n     \\n        for(int i=0;i<digits.length;i++)\\n        {\\n             String s1 = Integer.toString(digits[i]);\\n            res=res+s1;\\n        }\\n           \\n          \\n              BigInteger num=new BigInteger(res);\\n           BigInteger one=new BigInteger(\"1\");\\n              num=num.add(one);\\n           \\n             \\n                String str=num.toString();\\n               int[] arr=new int[str.length()];\\n               \\n        System.out.println(res);\\n\\n     \\n       \\n      for(int i=0;i<str.length();i++)\\n      {\\n            char ch=str.charAt(i);\\n         arr[i]=ch-\\'0\\'; \\n      }\\n\\n        return arr;\\n        \\n\\n"
                    },
                    {
                        "username": "palakjain_123",
                        "content": "Solution is correct till 60 test cases how should approach next\\nvector<int> plusOne(vector<int>& digits) {\\n        vector <int> temp;\\n       long long int n=1,g=0,r=0;\\n       long long int len=digits.size();\\n        while(len-1>0)\\n        {\\n          n=n*10;\\n          len--;\\n        }\\n        long long int sum=0;\\n        for(int i=0;i<digits.size();i++)\\n        {\\n           sum=sum+digits[i]*n;\\n           n=n/10;\\n        }\\n        sum=sum+1;\\n        int temp1=sum,leng=0;\\n        while(temp1!=0) {\\n          leng++;\\n          temp1=temp1/10;\\n        } \\n        int count=0;\\n        for(int i=0;i<leng;i++)\\n        {\\n          r=sum%10;\\n          temp.push_back(r);\\n          sum=sum/10;\\n          count++;\\n        }\\n        reverse(temp.begin(),temp.end());\\n        return temp;\\n    }\\n"
                    },
                    {
                        "username": "RANJITH_G",
                        "content": "this is my code ,I couldn\\'t able to solve the error(index 1 out of bounds for length 1)@ 27th line..can anyone help me according this>!!\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int j=0;\\n        int sum=0,num=0;\\n        int k=digits.length-1;\\n        int len=digits.length;\\n        while(len!=0)\\n        {\\n            sum=(int)(sum+(digits[j]*Math.pow(10,k)));\\n            k--;\\n            j++;\\n            len--;\\n        }\\n        sum=sum+1;\\n        int rem;\\n        int temp=sum;\\n        while(sum!=0)\\n        {\\n            num++;\\n            sum=sum/10;\\n        }\\n        sum=temp;\\n        int ku=num;\\n       \\n       for(j=num-1;j>=0;j--)\\n       {   rem=sum%10;\\n           digits[j]=rem;\\n           sum=sum/10;\\n       }\\n       /* for(int i=ku-1;i>=0;i--)\\n        {\\n            digits[n]=digits[i];\\n            n++;\\n        }*/\\n        return digits;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "Subh001",
                        "content": "WHY THIS SOLN IS NOT WORKING: OUTPUT {49,50,50}etc. like this.\\n        int n=digits.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum=sum*10+ digits[i];\\n        }\\n        sum++;\\n        \\n        String ans=Integer.toString(sum);\\n        int arr[]=new int[ans.length()];\\n        for(int i=0;i<arr.length;i++){\\n arr[i]=ans.charAt(i);           \\n            \\n        }\\n        return arr;\\n   \\n\\n"
                    },
                    {
                        "username": "tarunhawdia",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int i=0;\\n        int x=0;\\n        while(i<digits.size()){\\n            x=x*10+digits[i];\\n            i++;\\n        }\\n        x=x+1;\\n        while(x>=0){\\n            int rev=0;\\n            rev=x%10;\\n            x=x/10;\\n            digits.insert(digits.begin(),rev);\\n        }\\n        return digits;\\n    }\\n};\\n//why TLE showing is this?"
                    },
                    {
                        "username": "alexarmstrongvi",
                        "content": "Why do C++ solutions have higher memory usage (8.7 - 8.8MB) when they update the digits vector in-place compared to solutions that store the answer in a new vector (8.4 - 8.6MB)?"
                    },
                    {
                        "username": "abdullahfazili3614",
                        "content": "digits = [8,9,9,9]\\nhow is the output 1,0,0,0,0\\nmy answer is 9,0,0,0"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "jpwallace22",
                        "content": "I created a recursive function that works on everything I can throw at it.. however leetcode fails with a `process exited with signal SIGSEGV` whenever it tries to run it. Anyone else see this? "
                    }
                ]
            },
            {
                "id": 1750926,
                "content": [
                    {
                        "username": "AyushV1",
                        "content": "[leetcode](https://leetcode.com) my code is not working for [9];\\n"
                    },
                    {
                        "username": "tomarvaibhav",
                        "content": "int count=0,l=1;\\n         \\n        for(int i=digits.length-1;i>=0;i--){\\n            count+=digits[i]*l;\\n            l*=10;\\n        }\\n        count+=1;\\nMy code is not working for input [9,8,7,6,5,4,3,2,1,0] , till digit 8 count value is right but for 9 it\\'s not correct.\\nPlz tell me what is the error\\n"
                    },
                    {
                        "username": "adityasailella",
                        "content": "Is this any good??\\n    let num = digits.join(\"\");\\n    num = BigInt(num);\\n    ans = num + BigInt(1);\\n    return(Array.from(String(ans),BigInt));\\n"
                    },
                    {
                        "username": "somalkarprajwal0",
                        "content": "Can Anyone tell me what\\'s wrong with my code \\nI am getting runtime error in this test case [9,8,7,6,5,4,3,2,1,0]\\n\\n`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int sum{};\\n        int k = 1;\\n        vector<int>ans{};\\n        int l = digits.size()-1;\\n        for(int i = l;i>=0;i--){\\n            sum = sum + digits[i]*k;\\n            k *=10;\\n        }\\n        sum ++;\\n        while(sum != 0){\\n            int ele = sum %10;\\n            ans.push_back(ele);\\n            sum /=10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "premkumarsingh410",
                        "content": "when you do k*=10 the signed integer overflows. However if u use long long data type it should pass the given test case but will fail after 60th testcase."
                    },
                    {
                        "username": "_Mohamed_Atef",
                        "content": "amazing problem I love it thanks\\' LeetCode"
                    },
                    {
                        "username": "vik24k",
                        "content": "one-line answer:\n\n` def plusOne(self, digits: List[int]) -> List[int]: \n        return [int(num) for num in str(int(\"\".join([str(num) for num in digits]))+1)]`"
                    },
                    {
                        "username": "gandhikhushal333",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int i = digits.length;\\n        int n=0;\\n        int arr1[];\\n        int s=0;\\n        for(int j=0;j<i;j++){\\n            s=s*10 + digits[j];\\n        }\\n        int k=s+1;\\n        int t=k;\\n        while(k!=0){\\n             n++;\\n             k=k/10;\\n         }\\n        //  int arr1[];\\n        for(int h=0;h<n;h++){\\n            int q=t%10;\\n            arr1[h]=q;\\n            t=t/10;\\n        }\\n        return arr1;\\n    }\\n}\\n`your inline code...your inline code...`\\n\\nCan somebody explain the error in this solution"
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "int has some limitations"
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Why does an O(n^2) solution where I use insert method for inserting at zeroth index beats 100% of cpp solutions? This question may have weak testcases."
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Here\\'s the code for those interested, please let me know if I\\'m missing something.\\n```\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> res;\\n        int c = 1;\\n\\n        for(int i = digits.size()-1 ; i >= 0 ; i--){\\n            int s = digits[i]+c;\\n\\n            c = s/10;\\n\\n            res.insert(res.begin(),s%10);\\n        }\\n\\n        if(c!=0) res.insert(res.begin(),c);\\n\\n        return res;\\n    }\\n```"
                    },
                    {
                        "username": "dblum49",
                        "content": "This question is the perfect problem for introducing how to perform simple operations on numbers that are too large to store. I just learned about this and am surprised to see it so soon. "
                    },
                    {
                        "username": "aggarwalmukul96",
                        "content": "signed integer overflow how to solve this error:(\\ntest case [7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\\nused long,long long data type\\n"
                    }
                ]
            },
            {
                "id": 1750884,
                "content": [
                    {
                        "username": "AyushV1",
                        "content": "[leetcode](https://leetcode.com) my code is not working for [9];\\n"
                    },
                    {
                        "username": "tomarvaibhav",
                        "content": "int count=0,l=1;\\n         \\n        for(int i=digits.length-1;i>=0;i--){\\n            count+=digits[i]*l;\\n            l*=10;\\n        }\\n        count+=1;\\nMy code is not working for input [9,8,7,6,5,4,3,2,1,0] , till digit 8 count value is right but for 9 it\\'s not correct.\\nPlz tell me what is the error\\n"
                    },
                    {
                        "username": "adityasailella",
                        "content": "Is this any good??\\n    let num = digits.join(\"\");\\n    num = BigInt(num);\\n    ans = num + BigInt(1);\\n    return(Array.from(String(ans),BigInt));\\n"
                    },
                    {
                        "username": "somalkarprajwal0",
                        "content": "Can Anyone tell me what\\'s wrong with my code \\nI am getting runtime error in this test case [9,8,7,6,5,4,3,2,1,0]\\n\\n`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int sum{};\\n        int k = 1;\\n        vector<int>ans{};\\n        int l = digits.size()-1;\\n        for(int i = l;i>=0;i--){\\n            sum = sum + digits[i]*k;\\n            k *=10;\\n        }\\n        sum ++;\\n        while(sum != 0){\\n            int ele = sum %10;\\n            ans.push_back(ele);\\n            sum /=10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "premkumarsingh410",
                        "content": "when you do k*=10 the signed integer overflows. However if u use long long data type it should pass the given test case but will fail after 60th testcase."
                    },
                    {
                        "username": "_Mohamed_Atef",
                        "content": "amazing problem I love it thanks\\' LeetCode"
                    },
                    {
                        "username": "vik24k",
                        "content": "one-line answer:\n\n` def plusOne(self, digits: List[int]) -> List[int]: \n        return [int(num) for num in str(int(\"\".join([str(num) for num in digits]))+1)]`"
                    },
                    {
                        "username": "gandhikhushal333",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int i = digits.length;\\n        int n=0;\\n        int arr1[];\\n        int s=0;\\n        for(int j=0;j<i;j++){\\n            s=s*10 + digits[j];\\n        }\\n        int k=s+1;\\n        int t=k;\\n        while(k!=0){\\n             n++;\\n             k=k/10;\\n         }\\n        //  int arr1[];\\n        for(int h=0;h<n;h++){\\n            int q=t%10;\\n            arr1[h]=q;\\n            t=t/10;\\n        }\\n        return arr1;\\n    }\\n}\\n`your inline code...your inline code...`\\n\\nCan somebody explain the error in this solution"
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "int has some limitations"
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Why does an O(n^2) solution where I use insert method for inserting at zeroth index beats 100% of cpp solutions? This question may have weak testcases."
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Here\\'s the code for those interested, please let me know if I\\'m missing something.\\n```\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> res;\\n        int c = 1;\\n\\n        for(int i = digits.size()-1 ; i >= 0 ; i--){\\n            int s = digits[i]+c;\\n\\n            c = s/10;\\n\\n            res.insert(res.begin(),s%10);\\n        }\\n\\n        if(c!=0) res.insert(res.begin(),c);\\n\\n        return res;\\n    }\\n```"
                    },
                    {
                        "username": "dblum49",
                        "content": "This question is the perfect problem for introducing how to perform simple operations on numbers that are too large to store. I just learned about this and am surprised to see it so soon. "
                    },
                    {
                        "username": "aggarwalmukul96",
                        "content": "signed integer overflow how to solve this error:(\\ntest case [7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\\nused long,long long data type\\n"
                    }
                ]
            },
            {
                "id": 1749795,
                "content": [
                    {
                        "username": "AyushV1",
                        "content": "[leetcode](https://leetcode.com) my code is not working for [9];\\n"
                    },
                    {
                        "username": "tomarvaibhav",
                        "content": "int count=0,l=1;\\n         \\n        for(int i=digits.length-1;i>=0;i--){\\n            count+=digits[i]*l;\\n            l*=10;\\n        }\\n        count+=1;\\nMy code is not working for input [9,8,7,6,5,4,3,2,1,0] , till digit 8 count value is right but for 9 it\\'s not correct.\\nPlz tell me what is the error\\n"
                    },
                    {
                        "username": "adityasailella",
                        "content": "Is this any good??\\n    let num = digits.join(\"\");\\n    num = BigInt(num);\\n    ans = num + BigInt(1);\\n    return(Array.from(String(ans),BigInt));\\n"
                    },
                    {
                        "username": "somalkarprajwal0",
                        "content": "Can Anyone tell me what\\'s wrong with my code \\nI am getting runtime error in this test case [9,8,7,6,5,4,3,2,1,0]\\n\\n`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int sum{};\\n        int k = 1;\\n        vector<int>ans{};\\n        int l = digits.size()-1;\\n        for(int i = l;i>=0;i--){\\n            sum = sum + digits[i]*k;\\n            k *=10;\\n        }\\n        sum ++;\\n        while(sum != 0){\\n            int ele = sum %10;\\n            ans.push_back(ele);\\n            sum /=10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "premkumarsingh410",
                        "content": "when you do k*=10 the signed integer overflows. However if u use long long data type it should pass the given test case but will fail after 60th testcase."
                    },
                    {
                        "username": "_Mohamed_Atef",
                        "content": "amazing problem I love it thanks\\' LeetCode"
                    },
                    {
                        "username": "vik24k",
                        "content": "one-line answer:\n\n` def plusOne(self, digits: List[int]) -> List[int]: \n        return [int(num) for num in str(int(\"\".join([str(num) for num in digits]))+1)]`"
                    },
                    {
                        "username": "gandhikhushal333",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int i = digits.length;\\n        int n=0;\\n        int arr1[];\\n        int s=0;\\n        for(int j=0;j<i;j++){\\n            s=s*10 + digits[j];\\n        }\\n        int k=s+1;\\n        int t=k;\\n        while(k!=0){\\n             n++;\\n             k=k/10;\\n         }\\n        //  int arr1[];\\n        for(int h=0;h<n;h++){\\n            int q=t%10;\\n            arr1[h]=q;\\n            t=t/10;\\n        }\\n        return arr1;\\n    }\\n}\\n`your inline code...your inline code...`\\n\\nCan somebody explain the error in this solution"
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "int has some limitations"
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Why does an O(n^2) solution where I use insert method for inserting at zeroth index beats 100% of cpp solutions? This question may have weak testcases."
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Here\\'s the code for those interested, please let me know if I\\'m missing something.\\n```\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> res;\\n        int c = 1;\\n\\n        for(int i = digits.size()-1 ; i >= 0 ; i--){\\n            int s = digits[i]+c;\\n\\n            c = s/10;\\n\\n            res.insert(res.begin(),s%10);\\n        }\\n\\n        if(c!=0) res.insert(res.begin(),c);\\n\\n        return res;\\n    }\\n```"
                    },
                    {
                        "username": "dblum49",
                        "content": "This question is the perfect problem for introducing how to perform simple operations on numbers that are too large to store. I just learned about this and am surprised to see it so soon. "
                    },
                    {
                        "username": "aggarwalmukul96",
                        "content": "signed integer overflow how to solve this error:(\\ntest case [7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\\nused long,long long data type\\n"
                    }
                ]
            },
            {
                "id": 1749204,
                "content": [
                    {
                        "username": "AyushV1",
                        "content": "[leetcode](https://leetcode.com) my code is not working for [9];\\n"
                    },
                    {
                        "username": "tomarvaibhav",
                        "content": "int count=0,l=1;\\n         \\n        for(int i=digits.length-1;i>=0;i--){\\n            count+=digits[i]*l;\\n            l*=10;\\n        }\\n        count+=1;\\nMy code is not working for input [9,8,7,6,5,4,3,2,1,0] , till digit 8 count value is right but for 9 it\\'s not correct.\\nPlz tell me what is the error\\n"
                    },
                    {
                        "username": "adityasailella",
                        "content": "Is this any good??\\n    let num = digits.join(\"\");\\n    num = BigInt(num);\\n    ans = num + BigInt(1);\\n    return(Array.from(String(ans),BigInt));\\n"
                    },
                    {
                        "username": "somalkarprajwal0",
                        "content": "Can Anyone tell me what\\'s wrong with my code \\nI am getting runtime error in this test case [9,8,7,6,5,4,3,2,1,0]\\n\\n`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int sum{};\\n        int k = 1;\\n        vector<int>ans{};\\n        int l = digits.size()-1;\\n        for(int i = l;i>=0;i--){\\n            sum = sum + digits[i]*k;\\n            k *=10;\\n        }\\n        sum ++;\\n        while(sum != 0){\\n            int ele = sum %10;\\n            ans.push_back(ele);\\n            sum /=10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "premkumarsingh410",
                        "content": "when you do k*=10 the signed integer overflows. However if u use long long data type it should pass the given test case but will fail after 60th testcase."
                    },
                    {
                        "username": "_Mohamed_Atef",
                        "content": "amazing problem I love it thanks\\' LeetCode"
                    },
                    {
                        "username": "vik24k",
                        "content": "one-line answer:\n\n` def plusOne(self, digits: List[int]) -> List[int]: \n        return [int(num) for num in str(int(\"\".join([str(num) for num in digits]))+1)]`"
                    },
                    {
                        "username": "gandhikhushal333",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int i = digits.length;\\n        int n=0;\\n        int arr1[];\\n        int s=0;\\n        for(int j=0;j<i;j++){\\n            s=s*10 + digits[j];\\n        }\\n        int k=s+1;\\n        int t=k;\\n        while(k!=0){\\n             n++;\\n             k=k/10;\\n         }\\n        //  int arr1[];\\n        for(int h=0;h<n;h++){\\n            int q=t%10;\\n            arr1[h]=q;\\n            t=t/10;\\n        }\\n        return arr1;\\n    }\\n}\\n`your inline code...your inline code...`\\n\\nCan somebody explain the error in this solution"
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "int has some limitations"
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Why does an O(n^2) solution where I use insert method for inserting at zeroth index beats 100% of cpp solutions? This question may have weak testcases."
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Here\\'s the code for those interested, please let me know if I\\'m missing something.\\n```\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> res;\\n        int c = 1;\\n\\n        for(int i = digits.size()-1 ; i >= 0 ; i--){\\n            int s = digits[i]+c;\\n\\n            c = s/10;\\n\\n            res.insert(res.begin(),s%10);\\n        }\\n\\n        if(c!=0) res.insert(res.begin(),c);\\n\\n        return res;\\n    }\\n```"
                    },
                    {
                        "username": "dblum49",
                        "content": "This question is the perfect problem for introducing how to perform simple operations on numbers that are too large to store. I just learned about this and am surprised to see it so soon. "
                    },
                    {
                        "username": "aggarwalmukul96",
                        "content": "signed integer overflow how to solve this error:(\\ntest case [7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\\nused long,long long data type\\n"
                    }
                ]
            },
            {
                "id": 1741891,
                "content": [
                    {
                        "username": "AyushV1",
                        "content": "[leetcode](https://leetcode.com) my code is not working for [9];\\n"
                    },
                    {
                        "username": "tomarvaibhav",
                        "content": "int count=0,l=1;\\n         \\n        for(int i=digits.length-1;i>=0;i--){\\n            count+=digits[i]*l;\\n            l*=10;\\n        }\\n        count+=1;\\nMy code is not working for input [9,8,7,6,5,4,3,2,1,0] , till digit 8 count value is right but for 9 it\\'s not correct.\\nPlz tell me what is the error\\n"
                    },
                    {
                        "username": "adityasailella",
                        "content": "Is this any good??\\n    let num = digits.join(\"\");\\n    num = BigInt(num);\\n    ans = num + BigInt(1);\\n    return(Array.from(String(ans),BigInt));\\n"
                    },
                    {
                        "username": "somalkarprajwal0",
                        "content": "Can Anyone tell me what\\'s wrong with my code \\nI am getting runtime error in this test case [9,8,7,6,5,4,3,2,1,0]\\n\\n`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int sum{};\\n        int k = 1;\\n        vector<int>ans{};\\n        int l = digits.size()-1;\\n        for(int i = l;i>=0;i--){\\n            sum = sum + digits[i]*k;\\n            k *=10;\\n        }\\n        sum ++;\\n        while(sum != 0){\\n            int ele = sum %10;\\n            ans.push_back(ele);\\n            sum /=10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "premkumarsingh410",
                        "content": "when you do k*=10 the signed integer overflows. However if u use long long data type it should pass the given test case but will fail after 60th testcase."
                    },
                    {
                        "username": "_Mohamed_Atef",
                        "content": "amazing problem I love it thanks\\' LeetCode"
                    },
                    {
                        "username": "vik24k",
                        "content": "one-line answer:\n\n` def plusOne(self, digits: List[int]) -> List[int]: \n        return [int(num) for num in str(int(\"\".join([str(num) for num in digits]))+1)]`"
                    },
                    {
                        "username": "gandhikhushal333",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int i = digits.length;\\n        int n=0;\\n        int arr1[];\\n        int s=0;\\n        for(int j=0;j<i;j++){\\n            s=s*10 + digits[j];\\n        }\\n        int k=s+1;\\n        int t=k;\\n        while(k!=0){\\n             n++;\\n             k=k/10;\\n         }\\n        //  int arr1[];\\n        for(int h=0;h<n;h++){\\n            int q=t%10;\\n            arr1[h]=q;\\n            t=t/10;\\n        }\\n        return arr1;\\n    }\\n}\\n`your inline code...your inline code...`\\n\\nCan somebody explain the error in this solution"
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "int has some limitations"
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Why does an O(n^2) solution where I use insert method for inserting at zeroth index beats 100% of cpp solutions? This question may have weak testcases."
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Here\\'s the code for those interested, please let me know if I\\'m missing something.\\n```\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> res;\\n        int c = 1;\\n\\n        for(int i = digits.size()-1 ; i >= 0 ; i--){\\n            int s = digits[i]+c;\\n\\n            c = s/10;\\n\\n            res.insert(res.begin(),s%10);\\n        }\\n\\n        if(c!=0) res.insert(res.begin(),c);\\n\\n        return res;\\n    }\\n```"
                    },
                    {
                        "username": "dblum49",
                        "content": "This question is the perfect problem for introducing how to perform simple operations on numbers that are too large to store. I just learned about this and am surprised to see it so soon. "
                    },
                    {
                        "username": "aggarwalmukul96",
                        "content": "signed integer overflow how to solve this error:(\\ntest case [7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\\nused long,long long data type\\n"
                    }
                ]
            },
            {
                "id": 1738350,
                "content": [
                    {
                        "username": "AyushV1",
                        "content": "[leetcode](https://leetcode.com) my code is not working for [9];\\n"
                    },
                    {
                        "username": "tomarvaibhav",
                        "content": "int count=0,l=1;\\n         \\n        for(int i=digits.length-1;i>=0;i--){\\n            count+=digits[i]*l;\\n            l*=10;\\n        }\\n        count+=1;\\nMy code is not working for input [9,8,7,6,5,4,3,2,1,0] , till digit 8 count value is right but for 9 it\\'s not correct.\\nPlz tell me what is the error\\n"
                    },
                    {
                        "username": "adityasailella",
                        "content": "Is this any good??\\n    let num = digits.join(\"\");\\n    num = BigInt(num);\\n    ans = num + BigInt(1);\\n    return(Array.from(String(ans),BigInt));\\n"
                    },
                    {
                        "username": "somalkarprajwal0",
                        "content": "Can Anyone tell me what\\'s wrong with my code \\nI am getting runtime error in this test case [9,8,7,6,5,4,3,2,1,0]\\n\\n`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int sum{};\\n        int k = 1;\\n        vector<int>ans{};\\n        int l = digits.size()-1;\\n        for(int i = l;i>=0;i--){\\n            sum = sum + digits[i]*k;\\n            k *=10;\\n        }\\n        sum ++;\\n        while(sum != 0){\\n            int ele = sum %10;\\n            ans.push_back(ele);\\n            sum /=10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "premkumarsingh410",
                        "content": "when you do k*=10 the signed integer overflows. However if u use long long data type it should pass the given test case but will fail after 60th testcase."
                    },
                    {
                        "username": "_Mohamed_Atef",
                        "content": "amazing problem I love it thanks\\' LeetCode"
                    },
                    {
                        "username": "vik24k",
                        "content": "one-line answer:\n\n` def plusOne(self, digits: List[int]) -> List[int]: \n        return [int(num) for num in str(int(\"\".join([str(num) for num in digits]))+1)]`"
                    },
                    {
                        "username": "gandhikhushal333",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int i = digits.length;\\n        int n=0;\\n        int arr1[];\\n        int s=0;\\n        for(int j=0;j<i;j++){\\n            s=s*10 + digits[j];\\n        }\\n        int k=s+1;\\n        int t=k;\\n        while(k!=0){\\n             n++;\\n             k=k/10;\\n         }\\n        //  int arr1[];\\n        for(int h=0;h<n;h++){\\n            int q=t%10;\\n            arr1[h]=q;\\n            t=t/10;\\n        }\\n        return arr1;\\n    }\\n}\\n`your inline code...your inline code...`\\n\\nCan somebody explain the error in this solution"
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "int has some limitations"
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Why does an O(n^2) solution where I use insert method for inserting at zeroth index beats 100% of cpp solutions? This question may have weak testcases."
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Here\\'s the code for those interested, please let me know if I\\'m missing something.\\n```\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> res;\\n        int c = 1;\\n\\n        for(int i = digits.size()-1 ; i >= 0 ; i--){\\n            int s = digits[i]+c;\\n\\n            c = s/10;\\n\\n            res.insert(res.begin(),s%10);\\n        }\\n\\n        if(c!=0) res.insert(res.begin(),c);\\n\\n        return res;\\n    }\\n```"
                    },
                    {
                        "username": "dblum49",
                        "content": "This question is the perfect problem for introducing how to perform simple operations on numbers that are too large to store. I just learned about this and am surprised to see it so soon. "
                    },
                    {
                        "username": "aggarwalmukul96",
                        "content": "signed integer overflow how to solve this error:(\\ntest case [7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\\nused long,long long data type\\n"
                    }
                ]
            },
            {
                "id": 1733046,
                "content": [
                    {
                        "username": "AyushV1",
                        "content": "[leetcode](https://leetcode.com) my code is not working for [9];\\n"
                    },
                    {
                        "username": "tomarvaibhav",
                        "content": "int count=0,l=1;\\n         \\n        for(int i=digits.length-1;i>=0;i--){\\n            count+=digits[i]*l;\\n            l*=10;\\n        }\\n        count+=1;\\nMy code is not working for input [9,8,7,6,5,4,3,2,1,0] , till digit 8 count value is right but for 9 it\\'s not correct.\\nPlz tell me what is the error\\n"
                    },
                    {
                        "username": "adityasailella",
                        "content": "Is this any good??\\n    let num = digits.join(\"\");\\n    num = BigInt(num);\\n    ans = num + BigInt(1);\\n    return(Array.from(String(ans),BigInt));\\n"
                    },
                    {
                        "username": "somalkarprajwal0",
                        "content": "Can Anyone tell me what\\'s wrong with my code \\nI am getting runtime error in this test case [9,8,7,6,5,4,3,2,1,0]\\n\\n`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int sum{};\\n        int k = 1;\\n        vector<int>ans{};\\n        int l = digits.size()-1;\\n        for(int i = l;i>=0;i--){\\n            sum = sum + digits[i]*k;\\n            k *=10;\\n        }\\n        sum ++;\\n        while(sum != 0){\\n            int ele = sum %10;\\n            ans.push_back(ele);\\n            sum /=10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "premkumarsingh410",
                        "content": "when you do k*=10 the signed integer overflows. However if u use long long data type it should pass the given test case but will fail after 60th testcase."
                    },
                    {
                        "username": "_Mohamed_Atef",
                        "content": "amazing problem I love it thanks\\' LeetCode"
                    },
                    {
                        "username": "vik24k",
                        "content": "one-line answer:\n\n` def plusOne(self, digits: List[int]) -> List[int]: \n        return [int(num) for num in str(int(\"\".join([str(num) for num in digits]))+1)]`"
                    },
                    {
                        "username": "gandhikhushal333",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int i = digits.length;\\n        int n=0;\\n        int arr1[];\\n        int s=0;\\n        for(int j=0;j<i;j++){\\n            s=s*10 + digits[j];\\n        }\\n        int k=s+1;\\n        int t=k;\\n        while(k!=0){\\n             n++;\\n             k=k/10;\\n         }\\n        //  int arr1[];\\n        for(int h=0;h<n;h++){\\n            int q=t%10;\\n            arr1[h]=q;\\n            t=t/10;\\n        }\\n        return arr1;\\n    }\\n}\\n`your inline code...your inline code...`\\n\\nCan somebody explain the error in this solution"
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "int has some limitations"
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Why does an O(n^2) solution where I use insert method for inserting at zeroth index beats 100% of cpp solutions? This question may have weak testcases."
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Here\\'s the code for those interested, please let me know if I\\'m missing something.\\n```\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> res;\\n        int c = 1;\\n\\n        for(int i = digits.size()-1 ; i >= 0 ; i--){\\n            int s = digits[i]+c;\\n\\n            c = s/10;\\n\\n            res.insert(res.begin(),s%10);\\n        }\\n\\n        if(c!=0) res.insert(res.begin(),c);\\n\\n        return res;\\n    }\\n```"
                    },
                    {
                        "username": "dblum49",
                        "content": "This question is the perfect problem for introducing how to perform simple operations on numbers that are too large to store. I just learned about this and am surprised to see it so soon. "
                    },
                    {
                        "username": "aggarwalmukul96",
                        "content": "signed integer overflow how to solve this error:(\\ntest case [7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\\nused long,long long data type\\n"
                    }
                ]
            },
            {
                "id": 1729248,
                "content": [
                    {
                        "username": "AyushV1",
                        "content": "[leetcode](https://leetcode.com) my code is not working for [9];\\n"
                    },
                    {
                        "username": "tomarvaibhav",
                        "content": "int count=0,l=1;\\n         \\n        for(int i=digits.length-1;i>=0;i--){\\n            count+=digits[i]*l;\\n            l*=10;\\n        }\\n        count+=1;\\nMy code is not working for input [9,8,7,6,5,4,3,2,1,0] , till digit 8 count value is right but for 9 it\\'s not correct.\\nPlz tell me what is the error\\n"
                    },
                    {
                        "username": "adityasailella",
                        "content": "Is this any good??\\n    let num = digits.join(\"\");\\n    num = BigInt(num);\\n    ans = num + BigInt(1);\\n    return(Array.from(String(ans),BigInt));\\n"
                    },
                    {
                        "username": "somalkarprajwal0",
                        "content": "Can Anyone tell me what\\'s wrong with my code \\nI am getting runtime error in this test case [9,8,7,6,5,4,3,2,1,0]\\n\\n`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int sum{};\\n        int k = 1;\\n        vector<int>ans{};\\n        int l = digits.size()-1;\\n        for(int i = l;i>=0;i--){\\n            sum = sum + digits[i]*k;\\n            k *=10;\\n        }\\n        sum ++;\\n        while(sum != 0){\\n            int ele = sum %10;\\n            ans.push_back(ele);\\n            sum /=10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "premkumarsingh410",
                        "content": "when you do k*=10 the signed integer overflows. However if u use long long data type it should pass the given test case but will fail after 60th testcase."
                    },
                    {
                        "username": "_Mohamed_Atef",
                        "content": "amazing problem I love it thanks\\' LeetCode"
                    },
                    {
                        "username": "vik24k",
                        "content": "one-line answer:\n\n` def plusOne(self, digits: List[int]) -> List[int]: \n        return [int(num) for num in str(int(\"\".join([str(num) for num in digits]))+1)]`"
                    },
                    {
                        "username": "gandhikhushal333",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int i = digits.length;\\n        int n=0;\\n        int arr1[];\\n        int s=0;\\n        for(int j=0;j<i;j++){\\n            s=s*10 + digits[j];\\n        }\\n        int k=s+1;\\n        int t=k;\\n        while(k!=0){\\n             n++;\\n             k=k/10;\\n         }\\n        //  int arr1[];\\n        for(int h=0;h<n;h++){\\n            int q=t%10;\\n            arr1[h]=q;\\n            t=t/10;\\n        }\\n        return arr1;\\n    }\\n}\\n`your inline code...your inline code...`\\n\\nCan somebody explain the error in this solution"
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "int has some limitations"
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Why does an O(n^2) solution where I use insert method for inserting at zeroth index beats 100% of cpp solutions? This question may have weak testcases."
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Here\\'s the code for those interested, please let me know if I\\'m missing something.\\n```\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> res;\\n        int c = 1;\\n\\n        for(int i = digits.size()-1 ; i >= 0 ; i--){\\n            int s = digits[i]+c;\\n\\n            c = s/10;\\n\\n            res.insert(res.begin(),s%10);\\n        }\\n\\n        if(c!=0) res.insert(res.begin(),c);\\n\\n        return res;\\n    }\\n```"
                    },
                    {
                        "username": "dblum49",
                        "content": "This question is the perfect problem for introducing how to perform simple operations on numbers that are too large to store. I just learned about this and am surprised to see it so soon. "
                    },
                    {
                        "username": "aggarwalmukul96",
                        "content": "signed integer overflow how to solve this error:(\\ntest case [7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\\nused long,long long data type\\n"
                    }
                ]
            },
            {
                "id": 1724878,
                "content": [
                    {
                        "username": "AyushV1",
                        "content": "[leetcode](https://leetcode.com) my code is not working for [9];\\n"
                    },
                    {
                        "username": "tomarvaibhav",
                        "content": "int count=0,l=1;\\n         \\n        for(int i=digits.length-1;i>=0;i--){\\n            count+=digits[i]*l;\\n            l*=10;\\n        }\\n        count+=1;\\nMy code is not working for input [9,8,7,6,5,4,3,2,1,0] , till digit 8 count value is right but for 9 it\\'s not correct.\\nPlz tell me what is the error\\n"
                    },
                    {
                        "username": "adityasailella",
                        "content": "Is this any good??\\n    let num = digits.join(\"\");\\n    num = BigInt(num);\\n    ans = num + BigInt(1);\\n    return(Array.from(String(ans),BigInt));\\n"
                    },
                    {
                        "username": "somalkarprajwal0",
                        "content": "Can Anyone tell me what\\'s wrong with my code \\nI am getting runtime error in this test case [9,8,7,6,5,4,3,2,1,0]\\n\\n`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int sum{};\\n        int k = 1;\\n        vector<int>ans{};\\n        int l = digits.size()-1;\\n        for(int i = l;i>=0;i--){\\n            sum = sum + digits[i]*k;\\n            k *=10;\\n        }\\n        sum ++;\\n        while(sum != 0){\\n            int ele = sum %10;\\n            ans.push_back(ele);\\n            sum /=10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "premkumarsingh410",
                        "content": "when you do k*=10 the signed integer overflows. However if u use long long data type it should pass the given test case but will fail after 60th testcase."
                    },
                    {
                        "username": "_Mohamed_Atef",
                        "content": "amazing problem I love it thanks\\' LeetCode"
                    },
                    {
                        "username": "vik24k",
                        "content": "one-line answer:\n\n` def plusOne(self, digits: List[int]) -> List[int]: \n        return [int(num) for num in str(int(\"\".join([str(num) for num in digits]))+1)]`"
                    },
                    {
                        "username": "gandhikhushal333",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int i = digits.length;\\n        int n=0;\\n        int arr1[];\\n        int s=0;\\n        for(int j=0;j<i;j++){\\n            s=s*10 + digits[j];\\n        }\\n        int k=s+1;\\n        int t=k;\\n        while(k!=0){\\n             n++;\\n             k=k/10;\\n         }\\n        //  int arr1[];\\n        for(int h=0;h<n;h++){\\n            int q=t%10;\\n            arr1[h]=q;\\n            t=t/10;\\n        }\\n        return arr1;\\n    }\\n}\\n`your inline code...your inline code...`\\n\\nCan somebody explain the error in this solution"
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "int has some limitations"
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Why does an O(n^2) solution where I use insert method for inserting at zeroth index beats 100% of cpp solutions? This question may have weak testcases."
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Here\\'s the code for those interested, please let me know if I\\'m missing something.\\n```\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> res;\\n        int c = 1;\\n\\n        for(int i = digits.size()-1 ; i >= 0 ; i--){\\n            int s = digits[i]+c;\\n\\n            c = s/10;\\n\\n            res.insert(res.begin(),s%10);\\n        }\\n\\n        if(c!=0) res.insert(res.begin(),c);\\n\\n        return res;\\n    }\\n```"
                    },
                    {
                        "username": "dblum49",
                        "content": "This question is the perfect problem for introducing how to perform simple operations on numbers that are too large to store. I just learned about this and am surprised to see it so soon. "
                    },
                    {
                        "username": "aggarwalmukul96",
                        "content": "signed integer overflow how to solve this error:(\\ntest case [7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\\nused long,long long data type\\n"
                    }
                ]
            },
            {
                "id": 1723443,
                "content": [
                    {
                        "username": "AyushV1",
                        "content": "[leetcode](https://leetcode.com) my code is not working for [9];\\n"
                    },
                    {
                        "username": "tomarvaibhav",
                        "content": "int count=0,l=1;\\n         \\n        for(int i=digits.length-1;i>=0;i--){\\n            count+=digits[i]*l;\\n            l*=10;\\n        }\\n        count+=1;\\nMy code is not working for input [9,8,7,6,5,4,3,2,1,0] , till digit 8 count value is right but for 9 it\\'s not correct.\\nPlz tell me what is the error\\n"
                    },
                    {
                        "username": "adityasailella",
                        "content": "Is this any good??\\n    let num = digits.join(\"\");\\n    num = BigInt(num);\\n    ans = num + BigInt(1);\\n    return(Array.from(String(ans),BigInt));\\n"
                    },
                    {
                        "username": "somalkarprajwal0",
                        "content": "Can Anyone tell me what\\'s wrong with my code \\nI am getting runtime error in this test case [9,8,7,6,5,4,3,2,1,0]\\n\\n`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int sum{};\\n        int k = 1;\\n        vector<int>ans{};\\n        int l = digits.size()-1;\\n        for(int i = l;i>=0;i--){\\n            sum = sum + digits[i]*k;\\n            k *=10;\\n        }\\n        sum ++;\\n        while(sum != 0){\\n            int ele = sum %10;\\n            ans.push_back(ele);\\n            sum /=10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "premkumarsingh410",
                        "content": "when you do k*=10 the signed integer overflows. However if u use long long data type it should pass the given test case but will fail after 60th testcase."
                    },
                    {
                        "username": "_Mohamed_Atef",
                        "content": "amazing problem I love it thanks\\' LeetCode"
                    },
                    {
                        "username": "vik24k",
                        "content": "one-line answer:\n\n` def plusOne(self, digits: List[int]) -> List[int]: \n        return [int(num) for num in str(int(\"\".join([str(num) for num in digits]))+1)]`"
                    },
                    {
                        "username": "gandhikhushal333",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public int[] plusOne(int[] digits) {\\n        int i = digits.length;\\n        int n=0;\\n        int arr1[];\\n        int s=0;\\n        for(int j=0;j<i;j++){\\n            s=s*10 + digits[j];\\n        }\\n        int k=s+1;\\n        int t=k;\\n        while(k!=0){\\n             n++;\\n             k=k/10;\\n         }\\n        //  int arr1[];\\n        for(int h=0;h<n;h++){\\n            int q=t%10;\\n            arr1[h]=q;\\n            t=t/10;\\n        }\\n        return arr1;\\n    }\\n}\\n`your inline code...your inline code...`\\n\\nCan somebody explain the error in this solution"
                    },
                    {
                        "username": "abhisheksingh789",
                        "content": "int has some limitations"
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Why does an O(n^2) solution where I use insert method for inserting at zeroth index beats 100% of cpp solutions? This question may have weak testcases."
                    },
                    {
                        "username": "mrunfunny",
                        "content": "Here\\'s the code for those interested, please let me know if I\\'m missing something.\\n```\\n    vector<int> plusOne(vector<int>& digits) {\\n        vector<int> res;\\n        int c = 1;\\n\\n        for(int i = digits.size()-1 ; i >= 0 ; i--){\\n            int s = digits[i]+c;\\n\\n            c = s/10;\\n\\n            res.insert(res.begin(),s%10);\\n        }\\n\\n        if(c!=0) res.insert(res.begin(),c);\\n\\n        return res;\\n    }\\n```"
                    },
                    {
                        "username": "dblum49",
                        "content": "This question is the perfect problem for introducing how to perform simple operations on numbers that are too large to store. I just learned about this and am surprised to see it so soon. "
                    },
                    {
                        "username": "aggarwalmukul96",
                        "content": "signed integer overflow how to solve this error:(\\ntest case [7,2,8,5,0,9,1,2,9,5,3,6,6,7,3,2,8,4,3,7,9,5,7,7,4,7,4,9,4,7,0,1,1,1,7,4,0,0,6]\\nused long,long long data type\\n"
                    }
                ]
            },
            {
                "id": 1722518,
                "content": [
                    {
                        "username": "karandinakaran01",
                        "content": " `class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        if(digits[-1]!=9){\n            digits[-1]++;\n            \n        }\n        else{\n            for(int i=digits.size()-1; i>=0; i--){\n                if(digits[i]==9){digits[i]=0;}\n                else{digits[i]++;\n                break;}\n\n            }\n        \n        }\n        return digits;\n    }\n};`\n\n\nHow is this throwing a runtime error?"
                    },
                    {
                        "username": "GSS2025",
                        "content": " ```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int s = digits.size();\\n        for (int i = s-1; i >= 0; i--){\\n            if (digits[i] < 9){\\n                digits[i] += 1;\\n                return digits;\\n            }\\n            if (digits[i] == 9){\\n                digits[i] = 0;\\n                digits[i-1] += 1;\\n                if (digits[0] == 9){\\n                    digits.insert(digits.begin(), 1);\\n                    digits[1] = 0;\\n                }\\n                return digits;\\n            }\\n        }\\n            \\n        return digits;\\n    }\\n};\\n```\\nwhen my first for is:  for (int i = s-1; i > 0; i--)\\nthe code runs, but any digits coming in where it starts with 9 and it needs to be incremented does not work. ex [9] stays at 9.  i was thinking its not accessing that element since its index is 0, so i changed the for loop to  for (int i = s-1; i > 0; i--)\\nbut that gives me an offset error. whats the reason for this? and what can i do to fix it? thank you for the help!"
                    },
                    {
                        "username": "ameysati",
                        "content": "What is the problem with my code?\\n\\n#include <string>\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) \\n    {\\n        int l = digits.size()-1;\\n        if(digits[l-1]==9)\\n        {\\n            digits[l-1]=digits[l-1]/10;\\n            digits.push_back(0);\\n        }\\n        else\\n            digits[l-1]++;\\n\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "ameysati",
                        "content": "Or i may be understanding the question wrong?\\n"
                    },
                    {
                        "username": "Sandeep4769",
                        "content": "`   vector<int> plusOne(vector<int>& digits) {\n        int m = digits.size()-1;\n        int n=digits[m]+1;\n        vector<int> num;\n        int carry=0;\n        while(m!=0){\n          num.push_back(n%10);\n          carry=n/10;\n          n=digits[m-1]+carry;\n          m--;\n        }\n        num.push_back(n%10);\n        if(n>=10) num.push_back(n/10);\n        reverse(num.begin(), num.end());\n         return num;\n        }  `\n  "
                    },
                    {
                        "username": "poweracoon",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n     x = List\\n     new_list = []\\n     number = \"\"\\n    for item in x:\\n        number = str(item) +number\\n    real_number = int(number)\\n    new_number = real_number +1\\n    for digits in new_number:\\n        new_list.append(digits)\\n    return new_list\\n\\nTHIS IS MY CODE AND it IS NOT WORKING. I THINK THERE IS NO FAULT IN IT. WHY IS IT NOT WORKING?\\n"
                    },
                    {
                        "username": "omerkayaliel",
                        "content": "why am I getting a runtime error. Without \"digits[n-1]++;\" it doesn\\'t give any errors.\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits)\\n    {\\n        int n = digits.size();\\n\\n        digits[n-1]++;\\n        for(int i=n-1; i>=0; i--)\\n        {\\n            if(digits[i]==10)\\n            {\\n                digits[i-1]++;\\n                digits[i]=0;\\n            }\\n            else\\n                break;\\n        }\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "krpto-affan",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        new = []\\n        a = \"\"\\n        for i in digits:\\n            a += str(i)\\n        a = int(a)+1\\n        for i in str(a):\\n            new.append(i)\\n        print(new)\\n        return new\\n"
                    },
                    {
                        "username": "tongalexhe",
                        "content": "`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size()-1;\\n\\n        while(n>=0)\\n        {\\n            \\n            digits[n] = (digits[n] +1)%10;\\n            //cout<<digits[i]<<endl;\\n            if(digits[n] != 0)\\n                return digits;\\n            else\\n                n--;\\n\\n        }\\n        cout<<n<<endl;\\n        vector<int> v(digits.size()+1,0);\\n        v[0] = 1;\\n        return v;\\n    }\\n};`"
                    },
                    {
                        "username": "Anjoshannon",
                        "content": "Why is does this not work?\\n\\n `function plusOne(digits: number[]): number[] {\\n    let a = Array.from(String(Math.round(Number(digits.join().replace(/,/g, \\'\\')) + 1)), num => Number(num))\\n\\n    return a\\n};`\\n\\nat a point the numbers on the end just return as zeros and I dont know why.\\n"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/66_plus_one.cpp\\n\\n"
                    }
                ]
            },
            {
                "id": 1721161,
                "content": [
                    {
                        "username": "karandinakaran01",
                        "content": " `class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        if(digits[-1]!=9){\n            digits[-1]++;\n            \n        }\n        else{\n            for(int i=digits.size()-1; i>=0; i--){\n                if(digits[i]==9){digits[i]=0;}\n                else{digits[i]++;\n                break;}\n\n            }\n        \n        }\n        return digits;\n    }\n};`\n\n\nHow is this throwing a runtime error?"
                    },
                    {
                        "username": "GSS2025",
                        "content": " ```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int s = digits.size();\\n        for (int i = s-1; i >= 0; i--){\\n            if (digits[i] < 9){\\n                digits[i] += 1;\\n                return digits;\\n            }\\n            if (digits[i] == 9){\\n                digits[i] = 0;\\n                digits[i-1] += 1;\\n                if (digits[0] == 9){\\n                    digits.insert(digits.begin(), 1);\\n                    digits[1] = 0;\\n                }\\n                return digits;\\n            }\\n        }\\n            \\n        return digits;\\n    }\\n};\\n```\\nwhen my first for is:  for (int i = s-1; i > 0; i--)\\nthe code runs, but any digits coming in where it starts with 9 and it needs to be incremented does not work. ex [9] stays at 9.  i was thinking its not accessing that element since its index is 0, so i changed the for loop to  for (int i = s-1; i > 0; i--)\\nbut that gives me an offset error. whats the reason for this? and what can i do to fix it? thank you for the help!"
                    },
                    {
                        "username": "ameysati",
                        "content": "What is the problem with my code?\\n\\n#include <string>\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) \\n    {\\n        int l = digits.size()-1;\\n        if(digits[l-1]==9)\\n        {\\n            digits[l-1]=digits[l-1]/10;\\n            digits.push_back(0);\\n        }\\n        else\\n            digits[l-1]++;\\n\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "ameysati",
                        "content": "Or i may be understanding the question wrong?\\n"
                    },
                    {
                        "username": "Sandeep4769",
                        "content": "`   vector<int> plusOne(vector<int>& digits) {\n        int m = digits.size()-1;\n        int n=digits[m]+1;\n        vector<int> num;\n        int carry=0;\n        while(m!=0){\n          num.push_back(n%10);\n          carry=n/10;\n          n=digits[m-1]+carry;\n          m--;\n        }\n        num.push_back(n%10);\n        if(n>=10) num.push_back(n/10);\n        reverse(num.begin(), num.end());\n         return num;\n        }  `\n  "
                    },
                    {
                        "username": "poweracoon",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n     x = List\\n     new_list = []\\n     number = \"\"\\n    for item in x:\\n        number = str(item) +number\\n    real_number = int(number)\\n    new_number = real_number +1\\n    for digits in new_number:\\n        new_list.append(digits)\\n    return new_list\\n\\nTHIS IS MY CODE AND it IS NOT WORKING. I THINK THERE IS NO FAULT IN IT. WHY IS IT NOT WORKING?\\n"
                    },
                    {
                        "username": "omerkayaliel",
                        "content": "why am I getting a runtime error. Without \"digits[n-1]++;\" it doesn\\'t give any errors.\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits)\\n    {\\n        int n = digits.size();\\n\\n        digits[n-1]++;\\n        for(int i=n-1; i>=0; i--)\\n        {\\n            if(digits[i]==10)\\n            {\\n                digits[i-1]++;\\n                digits[i]=0;\\n            }\\n            else\\n                break;\\n        }\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "krpto-affan",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        new = []\\n        a = \"\"\\n        for i in digits:\\n            a += str(i)\\n        a = int(a)+1\\n        for i in str(a):\\n            new.append(i)\\n        print(new)\\n        return new\\n"
                    },
                    {
                        "username": "tongalexhe",
                        "content": "`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size()-1;\\n\\n        while(n>=0)\\n        {\\n            \\n            digits[n] = (digits[n] +1)%10;\\n            //cout<<digits[i]<<endl;\\n            if(digits[n] != 0)\\n                return digits;\\n            else\\n                n--;\\n\\n        }\\n        cout<<n<<endl;\\n        vector<int> v(digits.size()+1,0);\\n        v[0] = 1;\\n        return v;\\n    }\\n};`"
                    },
                    {
                        "username": "Anjoshannon",
                        "content": "Why is does this not work?\\n\\n `function plusOne(digits: number[]): number[] {\\n    let a = Array.from(String(Math.round(Number(digits.join().replace(/,/g, \\'\\')) + 1)), num => Number(num))\\n\\n    return a\\n};`\\n\\nat a point the numbers on the end just return as zeros and I dont know why.\\n"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/66_plus_one.cpp\\n\\n"
                    }
                ]
            },
            {
                "id": 1720584,
                "content": [
                    {
                        "username": "karandinakaran01",
                        "content": " `class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        if(digits[-1]!=9){\n            digits[-1]++;\n            \n        }\n        else{\n            for(int i=digits.size()-1; i>=0; i--){\n                if(digits[i]==9){digits[i]=0;}\n                else{digits[i]++;\n                break;}\n\n            }\n        \n        }\n        return digits;\n    }\n};`\n\n\nHow is this throwing a runtime error?"
                    },
                    {
                        "username": "GSS2025",
                        "content": " ```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int s = digits.size();\\n        for (int i = s-1; i >= 0; i--){\\n            if (digits[i] < 9){\\n                digits[i] += 1;\\n                return digits;\\n            }\\n            if (digits[i] == 9){\\n                digits[i] = 0;\\n                digits[i-1] += 1;\\n                if (digits[0] == 9){\\n                    digits.insert(digits.begin(), 1);\\n                    digits[1] = 0;\\n                }\\n                return digits;\\n            }\\n        }\\n            \\n        return digits;\\n    }\\n};\\n```\\nwhen my first for is:  for (int i = s-1; i > 0; i--)\\nthe code runs, but any digits coming in where it starts with 9 and it needs to be incremented does not work. ex [9] stays at 9.  i was thinking its not accessing that element since its index is 0, so i changed the for loop to  for (int i = s-1; i > 0; i--)\\nbut that gives me an offset error. whats the reason for this? and what can i do to fix it? thank you for the help!"
                    },
                    {
                        "username": "ameysati",
                        "content": "What is the problem with my code?\\n\\n#include <string>\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) \\n    {\\n        int l = digits.size()-1;\\n        if(digits[l-1]==9)\\n        {\\n            digits[l-1]=digits[l-1]/10;\\n            digits.push_back(0);\\n        }\\n        else\\n            digits[l-1]++;\\n\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "ameysati",
                        "content": "Or i may be understanding the question wrong?\\n"
                    },
                    {
                        "username": "Sandeep4769",
                        "content": "`   vector<int> plusOne(vector<int>& digits) {\n        int m = digits.size()-1;\n        int n=digits[m]+1;\n        vector<int> num;\n        int carry=0;\n        while(m!=0){\n          num.push_back(n%10);\n          carry=n/10;\n          n=digits[m-1]+carry;\n          m--;\n        }\n        num.push_back(n%10);\n        if(n>=10) num.push_back(n/10);\n        reverse(num.begin(), num.end());\n         return num;\n        }  `\n  "
                    },
                    {
                        "username": "poweracoon",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n     x = List\\n     new_list = []\\n     number = \"\"\\n    for item in x:\\n        number = str(item) +number\\n    real_number = int(number)\\n    new_number = real_number +1\\n    for digits in new_number:\\n        new_list.append(digits)\\n    return new_list\\n\\nTHIS IS MY CODE AND it IS NOT WORKING. I THINK THERE IS NO FAULT IN IT. WHY IS IT NOT WORKING?\\n"
                    },
                    {
                        "username": "omerkayaliel",
                        "content": "why am I getting a runtime error. Without \"digits[n-1]++;\" it doesn\\'t give any errors.\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits)\\n    {\\n        int n = digits.size();\\n\\n        digits[n-1]++;\\n        for(int i=n-1; i>=0; i--)\\n        {\\n            if(digits[i]==10)\\n            {\\n                digits[i-1]++;\\n                digits[i]=0;\\n            }\\n            else\\n                break;\\n        }\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "krpto-affan",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        new = []\\n        a = \"\"\\n        for i in digits:\\n            a += str(i)\\n        a = int(a)+1\\n        for i in str(a):\\n            new.append(i)\\n        print(new)\\n        return new\\n"
                    },
                    {
                        "username": "tongalexhe",
                        "content": "`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size()-1;\\n\\n        while(n>=0)\\n        {\\n            \\n            digits[n] = (digits[n] +1)%10;\\n            //cout<<digits[i]<<endl;\\n            if(digits[n] != 0)\\n                return digits;\\n            else\\n                n--;\\n\\n        }\\n        cout<<n<<endl;\\n        vector<int> v(digits.size()+1,0);\\n        v[0] = 1;\\n        return v;\\n    }\\n};`"
                    },
                    {
                        "username": "Anjoshannon",
                        "content": "Why is does this not work?\\n\\n `function plusOne(digits: number[]): number[] {\\n    let a = Array.from(String(Math.round(Number(digits.join().replace(/,/g, \\'\\')) + 1)), num => Number(num))\\n\\n    return a\\n};`\\n\\nat a point the numbers on the end just return as zeros and I dont know why.\\n"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/66_plus_one.cpp\\n\\n"
                    }
                ]
            },
            {
                "id": 1718041,
                "content": [
                    {
                        "username": "karandinakaran01",
                        "content": " `class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        if(digits[-1]!=9){\n            digits[-1]++;\n            \n        }\n        else{\n            for(int i=digits.size()-1; i>=0; i--){\n                if(digits[i]==9){digits[i]=0;}\n                else{digits[i]++;\n                break;}\n\n            }\n        \n        }\n        return digits;\n    }\n};`\n\n\nHow is this throwing a runtime error?"
                    },
                    {
                        "username": "GSS2025",
                        "content": " ```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int s = digits.size();\\n        for (int i = s-1; i >= 0; i--){\\n            if (digits[i] < 9){\\n                digits[i] += 1;\\n                return digits;\\n            }\\n            if (digits[i] == 9){\\n                digits[i] = 0;\\n                digits[i-1] += 1;\\n                if (digits[0] == 9){\\n                    digits.insert(digits.begin(), 1);\\n                    digits[1] = 0;\\n                }\\n                return digits;\\n            }\\n        }\\n            \\n        return digits;\\n    }\\n};\\n```\\nwhen my first for is:  for (int i = s-1; i > 0; i--)\\nthe code runs, but any digits coming in where it starts with 9 and it needs to be incremented does not work. ex [9] stays at 9.  i was thinking its not accessing that element since its index is 0, so i changed the for loop to  for (int i = s-1; i > 0; i--)\\nbut that gives me an offset error. whats the reason for this? and what can i do to fix it? thank you for the help!"
                    },
                    {
                        "username": "ameysati",
                        "content": "What is the problem with my code?\\n\\n#include <string>\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) \\n    {\\n        int l = digits.size()-1;\\n        if(digits[l-1]==9)\\n        {\\n            digits[l-1]=digits[l-1]/10;\\n            digits.push_back(0);\\n        }\\n        else\\n            digits[l-1]++;\\n\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "ameysati",
                        "content": "Or i may be understanding the question wrong?\\n"
                    },
                    {
                        "username": "Sandeep4769",
                        "content": "`   vector<int> plusOne(vector<int>& digits) {\n        int m = digits.size()-1;\n        int n=digits[m]+1;\n        vector<int> num;\n        int carry=0;\n        while(m!=0){\n          num.push_back(n%10);\n          carry=n/10;\n          n=digits[m-1]+carry;\n          m--;\n        }\n        num.push_back(n%10);\n        if(n>=10) num.push_back(n/10);\n        reverse(num.begin(), num.end());\n         return num;\n        }  `\n  "
                    },
                    {
                        "username": "poweracoon",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n     x = List\\n     new_list = []\\n     number = \"\"\\n    for item in x:\\n        number = str(item) +number\\n    real_number = int(number)\\n    new_number = real_number +1\\n    for digits in new_number:\\n        new_list.append(digits)\\n    return new_list\\n\\nTHIS IS MY CODE AND it IS NOT WORKING. I THINK THERE IS NO FAULT IN IT. WHY IS IT NOT WORKING?\\n"
                    },
                    {
                        "username": "omerkayaliel",
                        "content": "why am I getting a runtime error. Without \"digits[n-1]++;\" it doesn\\'t give any errors.\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits)\\n    {\\n        int n = digits.size();\\n\\n        digits[n-1]++;\\n        for(int i=n-1; i>=0; i--)\\n        {\\n            if(digits[i]==10)\\n            {\\n                digits[i-1]++;\\n                digits[i]=0;\\n            }\\n            else\\n                break;\\n        }\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "krpto-affan",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        new = []\\n        a = \"\"\\n        for i in digits:\\n            a += str(i)\\n        a = int(a)+1\\n        for i in str(a):\\n            new.append(i)\\n        print(new)\\n        return new\\n"
                    },
                    {
                        "username": "tongalexhe",
                        "content": "`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size()-1;\\n\\n        while(n>=0)\\n        {\\n            \\n            digits[n] = (digits[n] +1)%10;\\n            //cout<<digits[i]<<endl;\\n            if(digits[n] != 0)\\n                return digits;\\n            else\\n                n--;\\n\\n        }\\n        cout<<n<<endl;\\n        vector<int> v(digits.size()+1,0);\\n        v[0] = 1;\\n        return v;\\n    }\\n};`"
                    },
                    {
                        "username": "Anjoshannon",
                        "content": "Why is does this not work?\\n\\n `function plusOne(digits: number[]): number[] {\\n    let a = Array.from(String(Math.round(Number(digits.join().replace(/,/g, \\'\\')) + 1)), num => Number(num))\\n\\n    return a\\n};`\\n\\nat a point the numbers on the end just return as zeros and I dont know why.\\n"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/66_plus_one.cpp\\n\\n"
                    }
                ]
            },
            {
                "id": 1716171,
                "content": [
                    {
                        "username": "karandinakaran01",
                        "content": " `class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        if(digits[-1]!=9){\n            digits[-1]++;\n            \n        }\n        else{\n            for(int i=digits.size()-1; i>=0; i--){\n                if(digits[i]==9){digits[i]=0;}\n                else{digits[i]++;\n                break;}\n\n            }\n        \n        }\n        return digits;\n    }\n};`\n\n\nHow is this throwing a runtime error?"
                    },
                    {
                        "username": "GSS2025",
                        "content": " ```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int s = digits.size();\\n        for (int i = s-1; i >= 0; i--){\\n            if (digits[i] < 9){\\n                digits[i] += 1;\\n                return digits;\\n            }\\n            if (digits[i] == 9){\\n                digits[i] = 0;\\n                digits[i-1] += 1;\\n                if (digits[0] == 9){\\n                    digits.insert(digits.begin(), 1);\\n                    digits[1] = 0;\\n                }\\n                return digits;\\n            }\\n        }\\n            \\n        return digits;\\n    }\\n};\\n```\\nwhen my first for is:  for (int i = s-1; i > 0; i--)\\nthe code runs, but any digits coming in where it starts with 9 and it needs to be incremented does not work. ex [9] stays at 9.  i was thinking its not accessing that element since its index is 0, so i changed the for loop to  for (int i = s-1; i > 0; i--)\\nbut that gives me an offset error. whats the reason for this? and what can i do to fix it? thank you for the help!"
                    },
                    {
                        "username": "ameysati",
                        "content": "What is the problem with my code?\\n\\n#include <string>\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) \\n    {\\n        int l = digits.size()-1;\\n        if(digits[l-1]==9)\\n        {\\n            digits[l-1]=digits[l-1]/10;\\n            digits.push_back(0);\\n        }\\n        else\\n            digits[l-1]++;\\n\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "ameysati",
                        "content": "Or i may be understanding the question wrong?\\n"
                    },
                    {
                        "username": "Sandeep4769",
                        "content": "`   vector<int> plusOne(vector<int>& digits) {\n        int m = digits.size()-1;\n        int n=digits[m]+1;\n        vector<int> num;\n        int carry=0;\n        while(m!=0){\n          num.push_back(n%10);\n          carry=n/10;\n          n=digits[m-1]+carry;\n          m--;\n        }\n        num.push_back(n%10);\n        if(n>=10) num.push_back(n/10);\n        reverse(num.begin(), num.end());\n         return num;\n        }  `\n  "
                    },
                    {
                        "username": "poweracoon",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n     x = List\\n     new_list = []\\n     number = \"\"\\n    for item in x:\\n        number = str(item) +number\\n    real_number = int(number)\\n    new_number = real_number +1\\n    for digits in new_number:\\n        new_list.append(digits)\\n    return new_list\\n\\nTHIS IS MY CODE AND it IS NOT WORKING. I THINK THERE IS NO FAULT IN IT. WHY IS IT NOT WORKING?\\n"
                    },
                    {
                        "username": "omerkayaliel",
                        "content": "why am I getting a runtime error. Without \"digits[n-1]++;\" it doesn\\'t give any errors.\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits)\\n    {\\n        int n = digits.size();\\n\\n        digits[n-1]++;\\n        for(int i=n-1; i>=0; i--)\\n        {\\n            if(digits[i]==10)\\n            {\\n                digits[i-1]++;\\n                digits[i]=0;\\n            }\\n            else\\n                break;\\n        }\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "krpto-affan",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        new = []\\n        a = \"\"\\n        for i in digits:\\n            a += str(i)\\n        a = int(a)+1\\n        for i in str(a):\\n            new.append(i)\\n        print(new)\\n        return new\\n"
                    },
                    {
                        "username": "tongalexhe",
                        "content": "`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size()-1;\\n\\n        while(n>=0)\\n        {\\n            \\n            digits[n] = (digits[n] +1)%10;\\n            //cout<<digits[i]<<endl;\\n            if(digits[n] != 0)\\n                return digits;\\n            else\\n                n--;\\n\\n        }\\n        cout<<n<<endl;\\n        vector<int> v(digits.size()+1,0);\\n        v[0] = 1;\\n        return v;\\n    }\\n};`"
                    },
                    {
                        "username": "Anjoshannon",
                        "content": "Why is does this not work?\\n\\n `function plusOne(digits: number[]): number[] {\\n    let a = Array.from(String(Math.round(Number(digits.join().replace(/,/g, \\'\\')) + 1)), num => Number(num))\\n\\n    return a\\n};`\\n\\nat a point the numbers on the end just return as zeros and I dont know why.\\n"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/66_plus_one.cpp\\n\\n"
                    }
                ]
            },
            {
                "id": 1715296,
                "content": [
                    {
                        "username": "karandinakaran01",
                        "content": " `class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        if(digits[-1]!=9){\n            digits[-1]++;\n            \n        }\n        else{\n            for(int i=digits.size()-1; i>=0; i--){\n                if(digits[i]==9){digits[i]=0;}\n                else{digits[i]++;\n                break;}\n\n            }\n        \n        }\n        return digits;\n    }\n};`\n\n\nHow is this throwing a runtime error?"
                    },
                    {
                        "username": "GSS2025",
                        "content": " ```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int s = digits.size();\\n        for (int i = s-1; i >= 0; i--){\\n            if (digits[i] < 9){\\n                digits[i] += 1;\\n                return digits;\\n            }\\n            if (digits[i] == 9){\\n                digits[i] = 0;\\n                digits[i-1] += 1;\\n                if (digits[0] == 9){\\n                    digits.insert(digits.begin(), 1);\\n                    digits[1] = 0;\\n                }\\n                return digits;\\n            }\\n        }\\n            \\n        return digits;\\n    }\\n};\\n```\\nwhen my first for is:  for (int i = s-1; i > 0; i--)\\nthe code runs, but any digits coming in where it starts with 9 and it needs to be incremented does not work. ex [9] stays at 9.  i was thinking its not accessing that element since its index is 0, so i changed the for loop to  for (int i = s-1; i > 0; i--)\\nbut that gives me an offset error. whats the reason for this? and what can i do to fix it? thank you for the help!"
                    },
                    {
                        "username": "ameysati",
                        "content": "What is the problem with my code?\\n\\n#include <string>\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) \\n    {\\n        int l = digits.size()-1;\\n        if(digits[l-1]==9)\\n        {\\n            digits[l-1]=digits[l-1]/10;\\n            digits.push_back(0);\\n        }\\n        else\\n            digits[l-1]++;\\n\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "ameysati",
                        "content": "Or i may be understanding the question wrong?\\n"
                    },
                    {
                        "username": "Sandeep4769",
                        "content": "`   vector<int> plusOne(vector<int>& digits) {\n        int m = digits.size()-1;\n        int n=digits[m]+1;\n        vector<int> num;\n        int carry=0;\n        while(m!=0){\n          num.push_back(n%10);\n          carry=n/10;\n          n=digits[m-1]+carry;\n          m--;\n        }\n        num.push_back(n%10);\n        if(n>=10) num.push_back(n/10);\n        reverse(num.begin(), num.end());\n         return num;\n        }  `\n  "
                    },
                    {
                        "username": "poweracoon",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n     x = List\\n     new_list = []\\n     number = \"\"\\n    for item in x:\\n        number = str(item) +number\\n    real_number = int(number)\\n    new_number = real_number +1\\n    for digits in new_number:\\n        new_list.append(digits)\\n    return new_list\\n\\nTHIS IS MY CODE AND it IS NOT WORKING. I THINK THERE IS NO FAULT IN IT. WHY IS IT NOT WORKING?\\n"
                    },
                    {
                        "username": "omerkayaliel",
                        "content": "why am I getting a runtime error. Without \"digits[n-1]++;\" it doesn\\'t give any errors.\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits)\\n    {\\n        int n = digits.size();\\n\\n        digits[n-1]++;\\n        for(int i=n-1; i>=0; i--)\\n        {\\n            if(digits[i]==10)\\n            {\\n                digits[i-1]++;\\n                digits[i]=0;\\n            }\\n            else\\n                break;\\n        }\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "krpto-affan",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        new = []\\n        a = \"\"\\n        for i in digits:\\n            a += str(i)\\n        a = int(a)+1\\n        for i in str(a):\\n            new.append(i)\\n        print(new)\\n        return new\\n"
                    },
                    {
                        "username": "tongalexhe",
                        "content": "`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size()-1;\\n\\n        while(n>=0)\\n        {\\n            \\n            digits[n] = (digits[n] +1)%10;\\n            //cout<<digits[i]<<endl;\\n            if(digits[n] != 0)\\n                return digits;\\n            else\\n                n--;\\n\\n        }\\n        cout<<n<<endl;\\n        vector<int> v(digits.size()+1,0);\\n        v[0] = 1;\\n        return v;\\n    }\\n};`"
                    },
                    {
                        "username": "Anjoshannon",
                        "content": "Why is does this not work?\\n\\n `function plusOne(digits: number[]): number[] {\\n    let a = Array.from(String(Math.round(Number(digits.join().replace(/,/g, \\'\\')) + 1)), num => Number(num))\\n\\n    return a\\n};`\\n\\nat a point the numbers on the end just return as zeros and I dont know why.\\n"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/66_plus_one.cpp\\n\\n"
                    }
                ]
            },
            {
                "id": 1707595,
                "content": [
                    {
                        "username": "karandinakaran01",
                        "content": " `class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        if(digits[-1]!=9){\n            digits[-1]++;\n            \n        }\n        else{\n            for(int i=digits.size()-1; i>=0; i--){\n                if(digits[i]==9){digits[i]=0;}\n                else{digits[i]++;\n                break;}\n\n            }\n        \n        }\n        return digits;\n    }\n};`\n\n\nHow is this throwing a runtime error?"
                    },
                    {
                        "username": "GSS2025",
                        "content": " ```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int s = digits.size();\\n        for (int i = s-1; i >= 0; i--){\\n            if (digits[i] < 9){\\n                digits[i] += 1;\\n                return digits;\\n            }\\n            if (digits[i] == 9){\\n                digits[i] = 0;\\n                digits[i-1] += 1;\\n                if (digits[0] == 9){\\n                    digits.insert(digits.begin(), 1);\\n                    digits[1] = 0;\\n                }\\n                return digits;\\n            }\\n        }\\n            \\n        return digits;\\n    }\\n};\\n```\\nwhen my first for is:  for (int i = s-1; i > 0; i--)\\nthe code runs, but any digits coming in where it starts with 9 and it needs to be incremented does not work. ex [9] stays at 9.  i was thinking its not accessing that element since its index is 0, so i changed the for loop to  for (int i = s-1; i > 0; i--)\\nbut that gives me an offset error. whats the reason for this? and what can i do to fix it? thank you for the help!"
                    },
                    {
                        "username": "ameysati",
                        "content": "What is the problem with my code?\\n\\n#include <string>\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) \\n    {\\n        int l = digits.size()-1;\\n        if(digits[l-1]==9)\\n        {\\n            digits[l-1]=digits[l-1]/10;\\n            digits.push_back(0);\\n        }\\n        else\\n            digits[l-1]++;\\n\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "ameysati",
                        "content": "Or i may be understanding the question wrong?\\n"
                    },
                    {
                        "username": "Sandeep4769",
                        "content": "`   vector<int> plusOne(vector<int>& digits) {\n        int m = digits.size()-1;\n        int n=digits[m]+1;\n        vector<int> num;\n        int carry=0;\n        while(m!=0){\n          num.push_back(n%10);\n          carry=n/10;\n          n=digits[m-1]+carry;\n          m--;\n        }\n        num.push_back(n%10);\n        if(n>=10) num.push_back(n/10);\n        reverse(num.begin(), num.end());\n         return num;\n        }  `\n  "
                    },
                    {
                        "username": "poweracoon",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n     x = List\\n     new_list = []\\n     number = \"\"\\n    for item in x:\\n        number = str(item) +number\\n    real_number = int(number)\\n    new_number = real_number +1\\n    for digits in new_number:\\n        new_list.append(digits)\\n    return new_list\\n\\nTHIS IS MY CODE AND it IS NOT WORKING. I THINK THERE IS NO FAULT IN IT. WHY IS IT NOT WORKING?\\n"
                    },
                    {
                        "username": "omerkayaliel",
                        "content": "why am I getting a runtime error. Without \"digits[n-1]++;\" it doesn\\'t give any errors.\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits)\\n    {\\n        int n = digits.size();\\n\\n        digits[n-1]++;\\n        for(int i=n-1; i>=0; i--)\\n        {\\n            if(digits[i]==10)\\n            {\\n                digits[i-1]++;\\n                digits[i]=0;\\n            }\\n            else\\n                break;\\n        }\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "krpto-affan",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        new = []\\n        a = \"\"\\n        for i in digits:\\n            a += str(i)\\n        a = int(a)+1\\n        for i in str(a):\\n            new.append(i)\\n        print(new)\\n        return new\\n"
                    },
                    {
                        "username": "tongalexhe",
                        "content": "`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size()-1;\\n\\n        while(n>=0)\\n        {\\n            \\n            digits[n] = (digits[n] +1)%10;\\n            //cout<<digits[i]<<endl;\\n            if(digits[n] != 0)\\n                return digits;\\n            else\\n                n--;\\n\\n        }\\n        cout<<n<<endl;\\n        vector<int> v(digits.size()+1,0);\\n        v[0] = 1;\\n        return v;\\n    }\\n};`"
                    },
                    {
                        "username": "Anjoshannon",
                        "content": "Why is does this not work?\\n\\n `function plusOne(digits: number[]): number[] {\\n    let a = Array.from(String(Math.round(Number(digits.join().replace(/,/g, \\'\\')) + 1)), num => Number(num))\\n\\n    return a\\n};`\\n\\nat a point the numbers on the end just return as zeros and I dont know why.\\n"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/66_plus_one.cpp\\n\\n"
                    }
                ]
            },
            {
                "id": 1706793,
                "content": [
                    {
                        "username": "karandinakaran01",
                        "content": " `class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        if(digits[-1]!=9){\n            digits[-1]++;\n            \n        }\n        else{\n            for(int i=digits.size()-1; i>=0; i--){\n                if(digits[i]==9){digits[i]=0;}\n                else{digits[i]++;\n                break;}\n\n            }\n        \n        }\n        return digits;\n    }\n};`\n\n\nHow is this throwing a runtime error?"
                    },
                    {
                        "username": "GSS2025",
                        "content": " ```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int s = digits.size();\\n        for (int i = s-1; i >= 0; i--){\\n            if (digits[i] < 9){\\n                digits[i] += 1;\\n                return digits;\\n            }\\n            if (digits[i] == 9){\\n                digits[i] = 0;\\n                digits[i-1] += 1;\\n                if (digits[0] == 9){\\n                    digits.insert(digits.begin(), 1);\\n                    digits[1] = 0;\\n                }\\n                return digits;\\n            }\\n        }\\n            \\n        return digits;\\n    }\\n};\\n```\\nwhen my first for is:  for (int i = s-1; i > 0; i--)\\nthe code runs, but any digits coming in where it starts with 9 and it needs to be incremented does not work. ex [9] stays at 9.  i was thinking its not accessing that element since its index is 0, so i changed the for loop to  for (int i = s-1; i > 0; i--)\\nbut that gives me an offset error. whats the reason for this? and what can i do to fix it? thank you for the help!"
                    },
                    {
                        "username": "ameysati",
                        "content": "What is the problem with my code?\\n\\n#include <string>\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) \\n    {\\n        int l = digits.size()-1;\\n        if(digits[l-1]==9)\\n        {\\n            digits[l-1]=digits[l-1]/10;\\n            digits.push_back(0);\\n        }\\n        else\\n            digits[l-1]++;\\n\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "ameysati",
                        "content": "Or i may be understanding the question wrong?\\n"
                    },
                    {
                        "username": "Sandeep4769",
                        "content": "`   vector<int> plusOne(vector<int>& digits) {\n        int m = digits.size()-1;\n        int n=digits[m]+1;\n        vector<int> num;\n        int carry=0;\n        while(m!=0){\n          num.push_back(n%10);\n          carry=n/10;\n          n=digits[m-1]+carry;\n          m--;\n        }\n        num.push_back(n%10);\n        if(n>=10) num.push_back(n/10);\n        reverse(num.begin(), num.end());\n         return num;\n        }  `\n  "
                    },
                    {
                        "username": "poweracoon",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n     x = List\\n     new_list = []\\n     number = \"\"\\n    for item in x:\\n        number = str(item) +number\\n    real_number = int(number)\\n    new_number = real_number +1\\n    for digits in new_number:\\n        new_list.append(digits)\\n    return new_list\\n\\nTHIS IS MY CODE AND it IS NOT WORKING. I THINK THERE IS NO FAULT IN IT. WHY IS IT NOT WORKING?\\n"
                    },
                    {
                        "username": "omerkayaliel",
                        "content": "why am I getting a runtime error. Without \"digits[n-1]++;\" it doesn\\'t give any errors.\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits)\\n    {\\n        int n = digits.size();\\n\\n        digits[n-1]++;\\n        for(int i=n-1; i>=0; i--)\\n        {\\n            if(digits[i]==10)\\n            {\\n                digits[i-1]++;\\n                digits[i]=0;\\n            }\\n            else\\n                break;\\n        }\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "krpto-affan",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        new = []\\n        a = \"\"\\n        for i in digits:\\n            a += str(i)\\n        a = int(a)+1\\n        for i in str(a):\\n            new.append(i)\\n        print(new)\\n        return new\\n"
                    },
                    {
                        "username": "tongalexhe",
                        "content": "`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size()-1;\\n\\n        while(n>=0)\\n        {\\n            \\n            digits[n] = (digits[n] +1)%10;\\n            //cout<<digits[i]<<endl;\\n            if(digits[n] != 0)\\n                return digits;\\n            else\\n                n--;\\n\\n        }\\n        cout<<n<<endl;\\n        vector<int> v(digits.size()+1,0);\\n        v[0] = 1;\\n        return v;\\n    }\\n};`"
                    },
                    {
                        "username": "Anjoshannon",
                        "content": "Why is does this not work?\\n\\n `function plusOne(digits: number[]): number[] {\\n    let a = Array.from(String(Math.round(Number(digits.join().replace(/,/g, \\'\\')) + 1)), num => Number(num))\\n\\n    return a\\n};`\\n\\nat a point the numbers on the end just return as zeros and I dont know why.\\n"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/66_plus_one.cpp\\n\\n"
                    }
                ]
            },
            {
                "id": 1704307,
                "content": [
                    {
                        "username": "karandinakaran01",
                        "content": " `class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        if(digits[-1]!=9){\n            digits[-1]++;\n            \n        }\n        else{\n            for(int i=digits.size()-1; i>=0; i--){\n                if(digits[i]==9){digits[i]=0;}\n                else{digits[i]++;\n                break;}\n\n            }\n        \n        }\n        return digits;\n    }\n};`\n\n\nHow is this throwing a runtime error?"
                    },
                    {
                        "username": "GSS2025",
                        "content": " ```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int s = digits.size();\\n        for (int i = s-1; i >= 0; i--){\\n            if (digits[i] < 9){\\n                digits[i] += 1;\\n                return digits;\\n            }\\n            if (digits[i] == 9){\\n                digits[i] = 0;\\n                digits[i-1] += 1;\\n                if (digits[0] == 9){\\n                    digits.insert(digits.begin(), 1);\\n                    digits[1] = 0;\\n                }\\n                return digits;\\n            }\\n        }\\n            \\n        return digits;\\n    }\\n};\\n```\\nwhen my first for is:  for (int i = s-1; i > 0; i--)\\nthe code runs, but any digits coming in where it starts with 9 and it needs to be incremented does not work. ex [9] stays at 9.  i was thinking its not accessing that element since its index is 0, so i changed the for loop to  for (int i = s-1; i > 0; i--)\\nbut that gives me an offset error. whats the reason for this? and what can i do to fix it? thank you for the help!"
                    },
                    {
                        "username": "ameysati",
                        "content": "What is the problem with my code?\\n\\n#include <string>\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) \\n    {\\n        int l = digits.size()-1;\\n        if(digits[l-1]==9)\\n        {\\n            digits[l-1]=digits[l-1]/10;\\n            digits.push_back(0);\\n        }\\n        else\\n            digits[l-1]++;\\n\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "ameysati",
                        "content": "Or i may be understanding the question wrong?\\n"
                    },
                    {
                        "username": "Sandeep4769",
                        "content": "`   vector<int> plusOne(vector<int>& digits) {\n        int m = digits.size()-1;\n        int n=digits[m]+1;\n        vector<int> num;\n        int carry=0;\n        while(m!=0){\n          num.push_back(n%10);\n          carry=n/10;\n          n=digits[m-1]+carry;\n          m--;\n        }\n        num.push_back(n%10);\n        if(n>=10) num.push_back(n/10);\n        reverse(num.begin(), num.end());\n         return num;\n        }  `\n  "
                    },
                    {
                        "username": "poweracoon",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n     x = List\\n     new_list = []\\n     number = \"\"\\n    for item in x:\\n        number = str(item) +number\\n    real_number = int(number)\\n    new_number = real_number +1\\n    for digits in new_number:\\n        new_list.append(digits)\\n    return new_list\\n\\nTHIS IS MY CODE AND it IS NOT WORKING. I THINK THERE IS NO FAULT IN IT. WHY IS IT NOT WORKING?\\n"
                    },
                    {
                        "username": "omerkayaliel",
                        "content": "why am I getting a runtime error. Without \"digits[n-1]++;\" it doesn\\'t give any errors.\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits)\\n    {\\n        int n = digits.size();\\n\\n        digits[n-1]++;\\n        for(int i=n-1; i>=0; i--)\\n        {\\n            if(digits[i]==10)\\n            {\\n                digits[i-1]++;\\n                digits[i]=0;\\n            }\\n            else\\n                break;\\n        }\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "krpto-affan",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        new = []\\n        a = \"\"\\n        for i in digits:\\n            a += str(i)\\n        a = int(a)+1\\n        for i in str(a):\\n            new.append(i)\\n        print(new)\\n        return new\\n"
                    },
                    {
                        "username": "tongalexhe",
                        "content": "`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size()-1;\\n\\n        while(n>=0)\\n        {\\n            \\n            digits[n] = (digits[n] +1)%10;\\n            //cout<<digits[i]<<endl;\\n            if(digits[n] != 0)\\n                return digits;\\n            else\\n                n--;\\n\\n        }\\n        cout<<n<<endl;\\n        vector<int> v(digits.size()+1,0);\\n        v[0] = 1;\\n        return v;\\n    }\\n};`"
                    },
                    {
                        "username": "Anjoshannon",
                        "content": "Why is does this not work?\\n\\n `function plusOne(digits: number[]): number[] {\\n    let a = Array.from(String(Math.round(Number(digits.join().replace(/,/g, \\'\\')) + 1)), num => Number(num))\\n\\n    return a\\n};`\\n\\nat a point the numbers on the end just return as zeros and I dont know why.\\n"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/66_plus_one.cpp\\n\\n"
                    }
                ]
            },
            {
                "id": 1701915,
                "content": [
                    {
                        "username": "karandinakaran01",
                        "content": " `class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        if(digits[-1]!=9){\n            digits[-1]++;\n            \n        }\n        else{\n            for(int i=digits.size()-1; i>=0; i--){\n                if(digits[i]==9){digits[i]=0;}\n                else{digits[i]++;\n                break;}\n\n            }\n        \n        }\n        return digits;\n    }\n};`\n\n\nHow is this throwing a runtime error?"
                    },
                    {
                        "username": "GSS2025",
                        "content": " ```\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int s = digits.size();\\n        for (int i = s-1; i >= 0; i--){\\n            if (digits[i] < 9){\\n                digits[i] += 1;\\n                return digits;\\n            }\\n            if (digits[i] == 9){\\n                digits[i] = 0;\\n                digits[i-1] += 1;\\n                if (digits[0] == 9){\\n                    digits.insert(digits.begin(), 1);\\n                    digits[1] = 0;\\n                }\\n                return digits;\\n            }\\n        }\\n            \\n        return digits;\\n    }\\n};\\n```\\nwhen my first for is:  for (int i = s-1; i > 0; i--)\\nthe code runs, but any digits coming in where it starts with 9 and it needs to be incremented does not work. ex [9] stays at 9.  i was thinking its not accessing that element since its index is 0, so i changed the for loop to  for (int i = s-1; i > 0; i--)\\nbut that gives me an offset error. whats the reason for this? and what can i do to fix it? thank you for the help!"
                    },
                    {
                        "username": "ameysati",
                        "content": "What is the problem with my code?\\n\\n#include <string>\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) \\n    {\\n        int l = digits.size()-1;\\n        if(digits[l-1]==9)\\n        {\\n            digits[l-1]=digits[l-1]/10;\\n            digits.push_back(0);\\n        }\\n        else\\n            digits[l-1]++;\\n\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "ameysati",
                        "content": "Or i may be understanding the question wrong?\\n"
                    },
                    {
                        "username": "Sandeep4769",
                        "content": "`   vector<int> plusOne(vector<int>& digits) {\n        int m = digits.size()-1;\n        int n=digits[m]+1;\n        vector<int> num;\n        int carry=0;\n        while(m!=0){\n          num.push_back(n%10);\n          carry=n/10;\n          n=digits[m-1]+carry;\n          m--;\n        }\n        num.push_back(n%10);\n        if(n>=10) num.push_back(n/10);\n        reverse(num.begin(), num.end());\n         return num;\n        }  `\n  "
                    },
                    {
                        "username": "poweracoon",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n     x = List\\n     new_list = []\\n     number = \"\"\\n    for item in x:\\n        number = str(item) +number\\n    real_number = int(number)\\n    new_number = real_number +1\\n    for digits in new_number:\\n        new_list.append(digits)\\n    return new_list\\n\\nTHIS IS MY CODE AND it IS NOT WORKING. I THINK THERE IS NO FAULT IN IT. WHY IS IT NOT WORKING?\\n"
                    },
                    {
                        "username": "omerkayaliel",
                        "content": "why am I getting a runtime error. Without \"digits[n-1]++;\" it doesn\\'t give any errors.\\n\\nclass Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits)\\n    {\\n        int n = digits.size();\\n\\n        digits[n-1]++;\\n        for(int i=n-1; i>=0; i--)\\n        {\\n            if(digits[i]==10)\\n            {\\n                digits[i-1]++;\\n                digits[i]=0;\\n            }\\n            else\\n                break;\\n        }\\n        return digits;\\n    }\\n};"
                    },
                    {
                        "username": "krpto-affan",
                        "content": "class Solution(object):\\n    def plusOne(self, digits):\\n        new = []\\n        a = \"\"\\n        for i in digits:\\n            a += str(i)\\n        a = int(a)+1\\n        for i in str(a):\\n            new.append(i)\\n        print(new)\\n        return new\\n"
                    },
                    {
                        "username": "tongalexhe",
                        "content": "`class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        int n = digits.size()-1;\\n\\n        while(n>=0)\\n        {\\n            \\n            digits[n] = (digits[n] +1)%10;\\n            //cout<<digits[i]<<endl;\\n            if(digits[n] != 0)\\n                return digits;\\n            else\\n                n--;\\n\\n        }\\n        cout<<n<<endl;\\n        vector<int> v(digits.size()+1,0);\\n        v[0] = 1;\\n        return v;\\n    }\\n};`"
                    },
                    {
                        "username": "Anjoshannon",
                        "content": "Why is does this not work?\\n\\n `function plusOne(digits: number[]): number[] {\\n    let a = Array.from(String(Math.round(Number(digits.join().replace(/,/g, \\'\\')) + 1)), num => Number(num))\\n\\n    return a\\n};`\\n\\nat a point the numbers on the end just return as zeros and I dont know why.\\n"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/66_plus_one.cpp\\n\\n"
                    }
                ]
            },
            {
                "id": 1701808,
                "content": [
                    {
                        "username": "Naved2019khan",
                        "content": " `  \\n\\nwhile(i>=0 && digits[i]==9)\\n       {\\n           digits[i]=0;\\n           i--;\\n       }\\n       int m=n;\\n       if(digits[i+1]==0 && i<0)\\n       {\\n           ans.push_back(1);\\n           m+=1;\\n       }\\n       else{\\n           digits[i]+=1;\\n       }\\n       for(int i=0;i<n;i++)\\n           {\\n               ans.push_back(digits[i]);\\n           }\\nreturn ans;\\n\\n ` \\n\\nwhy this is\\'nt working but it work on other ide like interview bit, show error address Sanitizer \\n "
                    },
                    {
                        "username": "saifie1",
                        "content": " `var plusOne = function(arr) {\n       let i=arr.length-1\n    while(arr[i]===9){\n        arr[i]=0\n        i--\n    }\n    if(i>=0){\n       arr[i]+=1\n    }\n    else{\n        arr.unshift(1)\n    }\n    return arr\n};`"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "\\nclass Solution:\\n\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum = int(\"\".join(map(str,digits))) + int(1)\\n        return [int(i) for i in str(sum)]"
                    },
                    {
                        "username": "20951a0578",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum=\"\"\\n        for i in range(len(digits)):\\n            sum+=str(digits[i])\\n        a=int(sum)+1\\n        b=[]\\n        for i in str(a):\\n            b.append(int(i))\\n        return b"
                    },
                    {
                        "username": "timblake17",
                        "content": "Was this just a test for me to google that parseInt doesn\\'t work on numbers with more that16 digits?"
                    },
                    {
                        "username": "anubhavnegi54",
                        "content": "you can work with BigInteger "
                    },
                    {
                        "username": "GreidO",
                        "content": " `class Solution:\\n\\tdef plusOne(self, digits: List[int]) -> list[int]:\\n\\t\\treturn [int(number) for number in str(int(\\'\\'.join([str(number) for number in digits])) + 1)]`"
                    },
                    {
                        "username": "rickx_x",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        if(digits[digits.size()-1]==9){\\n            int count =0;\\n            int  i = digits.size()-1;\\n            while(digits[i]==9){\\n                digits.pop_back();\\n                count++;\\n                i--;\\n            }\\n            digits.emplace_back(1);\\n            while(count--){\\n                digits.emplace_back(0);\\n            }\\n        }\\n        else{\\n            digits[digits.size()-1]+=1;\\n        }\\n        return digits;\\n    }\\n};\\n\\nwhy isn\\'t this working ?"
                    },
                    {
                        "username": "aizardar",
                        "content": "Three steps to solve this problem:\\n1. get the number from the digits list\\n2. increment the number, and\\n3. Again get the digits of the number into a list. "
                    },
                    {
                        "username": "kasamravi03",
                        "content": "if(len(digits)!=1):\\n            if(digits[len(digits)-1]!=9):\\n                digits[len(digits)-1]+=1\\n            else:\\n                digits[len(digits)-1]=0\\n                digits[len(digits)-2]+=1\\n        else:\\n            if(digits[len(digits)-1]==9):\\n                digits.append(0)\\n                digits[len(digits)-2]=1\\n            else:\\n                digits[len(digits)-1]+=1\\n        return(digits)\\ncan anybody help me out"
                    },
                    {
                        "username": "omkar1029",
                        "content": "`public int[] PlusOne(int[] digits) {\\n        \\n        int[] array = new int[NewArrayLength(digits)];\\n        \\n        int i = digits.Length - 1;\\n        int j = array.Length - 1;\\n        \\n        while(digits[i] == 9){\\n            array[j] = 0;\\n            i--;\\n            j--;\\n        }\\n\\n        if(i >= 0){\\n            array[j] = digits[i] + 1;\\n            i--;\\n            j--;\\n        }\\n        \\n        while(i >= 0){\\n            array[j] = digits[i];\\n            i--;\\n            j--;\\n        }\\n\\n        return array;\\n    }\\n\\n    int NewArrayLength(int[] digits){\\n        for(int i = 0; i < digits.Length; i++){\\n            if(digits[i] != 9) return digits.Length;\\n        }\\n        return digits.Length + 1;\\n    }`\\n\\nwhy is this giving `System.IndexOutOfRangeException`"
                    }
                ]
            },
            {
                "id": 1699010,
                "content": [
                    {
                        "username": "Naved2019khan",
                        "content": " `  \\n\\nwhile(i>=0 && digits[i]==9)\\n       {\\n           digits[i]=0;\\n           i--;\\n       }\\n       int m=n;\\n       if(digits[i+1]==0 && i<0)\\n       {\\n           ans.push_back(1);\\n           m+=1;\\n       }\\n       else{\\n           digits[i]+=1;\\n       }\\n       for(int i=0;i<n;i++)\\n           {\\n               ans.push_back(digits[i]);\\n           }\\nreturn ans;\\n\\n ` \\n\\nwhy this is\\'nt working but it work on other ide like interview bit, show error address Sanitizer \\n "
                    },
                    {
                        "username": "saifie1",
                        "content": " `var plusOne = function(arr) {\n       let i=arr.length-1\n    while(arr[i]===9){\n        arr[i]=0\n        i--\n    }\n    if(i>=0){\n       arr[i]+=1\n    }\n    else{\n        arr.unshift(1)\n    }\n    return arr\n};`"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "\\nclass Solution:\\n\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum = int(\"\".join(map(str,digits))) + int(1)\\n        return [int(i) for i in str(sum)]"
                    },
                    {
                        "username": "20951a0578",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum=\"\"\\n        for i in range(len(digits)):\\n            sum+=str(digits[i])\\n        a=int(sum)+1\\n        b=[]\\n        for i in str(a):\\n            b.append(int(i))\\n        return b"
                    },
                    {
                        "username": "timblake17",
                        "content": "Was this just a test for me to google that parseInt doesn\\'t work on numbers with more that16 digits?"
                    },
                    {
                        "username": "anubhavnegi54",
                        "content": "you can work with BigInteger "
                    },
                    {
                        "username": "GreidO",
                        "content": " `class Solution:\\n\\tdef plusOne(self, digits: List[int]) -> list[int]:\\n\\t\\treturn [int(number) for number in str(int(\\'\\'.join([str(number) for number in digits])) + 1)]`"
                    },
                    {
                        "username": "rickx_x",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        if(digits[digits.size()-1]==9){\\n            int count =0;\\n            int  i = digits.size()-1;\\n            while(digits[i]==9){\\n                digits.pop_back();\\n                count++;\\n                i--;\\n            }\\n            digits.emplace_back(1);\\n            while(count--){\\n                digits.emplace_back(0);\\n            }\\n        }\\n        else{\\n            digits[digits.size()-1]+=1;\\n        }\\n        return digits;\\n    }\\n};\\n\\nwhy isn\\'t this working ?"
                    },
                    {
                        "username": "aizardar",
                        "content": "Three steps to solve this problem:\\n1. get the number from the digits list\\n2. increment the number, and\\n3. Again get the digits of the number into a list. "
                    },
                    {
                        "username": "kasamravi03",
                        "content": "if(len(digits)!=1):\\n            if(digits[len(digits)-1]!=9):\\n                digits[len(digits)-1]+=1\\n            else:\\n                digits[len(digits)-1]=0\\n                digits[len(digits)-2]+=1\\n        else:\\n            if(digits[len(digits)-1]==9):\\n                digits.append(0)\\n                digits[len(digits)-2]=1\\n            else:\\n                digits[len(digits)-1]+=1\\n        return(digits)\\ncan anybody help me out"
                    },
                    {
                        "username": "omkar1029",
                        "content": "`public int[] PlusOne(int[] digits) {\\n        \\n        int[] array = new int[NewArrayLength(digits)];\\n        \\n        int i = digits.Length - 1;\\n        int j = array.Length - 1;\\n        \\n        while(digits[i] == 9){\\n            array[j] = 0;\\n            i--;\\n            j--;\\n        }\\n\\n        if(i >= 0){\\n            array[j] = digits[i] + 1;\\n            i--;\\n            j--;\\n        }\\n        \\n        while(i >= 0){\\n            array[j] = digits[i];\\n            i--;\\n            j--;\\n        }\\n\\n        return array;\\n    }\\n\\n    int NewArrayLength(int[] digits){\\n        for(int i = 0; i < digits.Length; i++){\\n            if(digits[i] != 9) return digits.Length;\\n        }\\n        return digits.Length + 1;\\n    }`\\n\\nwhy is this giving `System.IndexOutOfRangeException`"
                    }
                ]
            },
            {
                "id": 1697006,
                "content": [
                    {
                        "username": "Naved2019khan",
                        "content": " `  \\n\\nwhile(i>=0 && digits[i]==9)\\n       {\\n           digits[i]=0;\\n           i--;\\n       }\\n       int m=n;\\n       if(digits[i+1]==0 && i<0)\\n       {\\n           ans.push_back(1);\\n           m+=1;\\n       }\\n       else{\\n           digits[i]+=1;\\n       }\\n       for(int i=0;i<n;i++)\\n           {\\n               ans.push_back(digits[i]);\\n           }\\nreturn ans;\\n\\n ` \\n\\nwhy this is\\'nt working but it work on other ide like interview bit, show error address Sanitizer \\n "
                    },
                    {
                        "username": "saifie1",
                        "content": " `var plusOne = function(arr) {\n       let i=arr.length-1\n    while(arr[i]===9){\n        arr[i]=0\n        i--\n    }\n    if(i>=0){\n       arr[i]+=1\n    }\n    else{\n        arr.unshift(1)\n    }\n    return arr\n};`"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "\\nclass Solution:\\n\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum = int(\"\".join(map(str,digits))) + int(1)\\n        return [int(i) for i in str(sum)]"
                    },
                    {
                        "username": "20951a0578",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum=\"\"\\n        for i in range(len(digits)):\\n            sum+=str(digits[i])\\n        a=int(sum)+1\\n        b=[]\\n        for i in str(a):\\n            b.append(int(i))\\n        return b"
                    },
                    {
                        "username": "timblake17",
                        "content": "Was this just a test for me to google that parseInt doesn\\'t work on numbers with more that16 digits?"
                    },
                    {
                        "username": "anubhavnegi54",
                        "content": "you can work with BigInteger "
                    },
                    {
                        "username": "GreidO",
                        "content": " `class Solution:\\n\\tdef plusOne(self, digits: List[int]) -> list[int]:\\n\\t\\treturn [int(number) for number in str(int(\\'\\'.join([str(number) for number in digits])) + 1)]`"
                    },
                    {
                        "username": "rickx_x",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        if(digits[digits.size()-1]==9){\\n            int count =0;\\n            int  i = digits.size()-1;\\n            while(digits[i]==9){\\n                digits.pop_back();\\n                count++;\\n                i--;\\n            }\\n            digits.emplace_back(1);\\n            while(count--){\\n                digits.emplace_back(0);\\n            }\\n        }\\n        else{\\n            digits[digits.size()-1]+=1;\\n        }\\n        return digits;\\n    }\\n};\\n\\nwhy isn\\'t this working ?"
                    },
                    {
                        "username": "aizardar",
                        "content": "Three steps to solve this problem:\\n1. get the number from the digits list\\n2. increment the number, and\\n3. Again get the digits of the number into a list. "
                    },
                    {
                        "username": "kasamravi03",
                        "content": "if(len(digits)!=1):\\n            if(digits[len(digits)-1]!=9):\\n                digits[len(digits)-1]+=1\\n            else:\\n                digits[len(digits)-1]=0\\n                digits[len(digits)-2]+=1\\n        else:\\n            if(digits[len(digits)-1]==9):\\n                digits.append(0)\\n                digits[len(digits)-2]=1\\n            else:\\n                digits[len(digits)-1]+=1\\n        return(digits)\\ncan anybody help me out"
                    },
                    {
                        "username": "omkar1029",
                        "content": "`public int[] PlusOne(int[] digits) {\\n        \\n        int[] array = new int[NewArrayLength(digits)];\\n        \\n        int i = digits.Length - 1;\\n        int j = array.Length - 1;\\n        \\n        while(digits[i] == 9){\\n            array[j] = 0;\\n            i--;\\n            j--;\\n        }\\n\\n        if(i >= 0){\\n            array[j] = digits[i] + 1;\\n            i--;\\n            j--;\\n        }\\n        \\n        while(i >= 0){\\n            array[j] = digits[i];\\n            i--;\\n            j--;\\n        }\\n\\n        return array;\\n    }\\n\\n    int NewArrayLength(int[] digits){\\n        for(int i = 0; i < digits.Length; i++){\\n            if(digits[i] != 9) return digits.Length;\\n        }\\n        return digits.Length + 1;\\n    }`\\n\\nwhy is this giving `System.IndexOutOfRangeException`"
                    }
                ]
            },
            {
                "id": 1690646,
                "content": [
                    {
                        "username": "Naved2019khan",
                        "content": " `  \\n\\nwhile(i>=0 && digits[i]==9)\\n       {\\n           digits[i]=0;\\n           i--;\\n       }\\n       int m=n;\\n       if(digits[i+1]==0 && i<0)\\n       {\\n           ans.push_back(1);\\n           m+=1;\\n       }\\n       else{\\n           digits[i]+=1;\\n       }\\n       for(int i=0;i<n;i++)\\n           {\\n               ans.push_back(digits[i]);\\n           }\\nreturn ans;\\n\\n ` \\n\\nwhy this is\\'nt working but it work on other ide like interview bit, show error address Sanitizer \\n "
                    },
                    {
                        "username": "saifie1",
                        "content": " `var plusOne = function(arr) {\n       let i=arr.length-1\n    while(arr[i]===9){\n        arr[i]=0\n        i--\n    }\n    if(i>=0){\n       arr[i]+=1\n    }\n    else{\n        arr.unshift(1)\n    }\n    return arr\n};`"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "\\nclass Solution:\\n\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum = int(\"\".join(map(str,digits))) + int(1)\\n        return [int(i) for i in str(sum)]"
                    },
                    {
                        "username": "20951a0578",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum=\"\"\\n        for i in range(len(digits)):\\n            sum+=str(digits[i])\\n        a=int(sum)+1\\n        b=[]\\n        for i in str(a):\\n            b.append(int(i))\\n        return b"
                    },
                    {
                        "username": "timblake17",
                        "content": "Was this just a test for me to google that parseInt doesn\\'t work on numbers with more that16 digits?"
                    },
                    {
                        "username": "anubhavnegi54",
                        "content": "you can work with BigInteger "
                    },
                    {
                        "username": "GreidO",
                        "content": " `class Solution:\\n\\tdef plusOne(self, digits: List[int]) -> list[int]:\\n\\t\\treturn [int(number) for number in str(int(\\'\\'.join([str(number) for number in digits])) + 1)]`"
                    },
                    {
                        "username": "rickx_x",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        if(digits[digits.size()-1]==9){\\n            int count =0;\\n            int  i = digits.size()-1;\\n            while(digits[i]==9){\\n                digits.pop_back();\\n                count++;\\n                i--;\\n            }\\n            digits.emplace_back(1);\\n            while(count--){\\n                digits.emplace_back(0);\\n            }\\n        }\\n        else{\\n            digits[digits.size()-1]+=1;\\n        }\\n        return digits;\\n    }\\n};\\n\\nwhy isn\\'t this working ?"
                    },
                    {
                        "username": "aizardar",
                        "content": "Three steps to solve this problem:\\n1. get the number from the digits list\\n2. increment the number, and\\n3. Again get the digits of the number into a list. "
                    },
                    {
                        "username": "kasamravi03",
                        "content": "if(len(digits)!=1):\\n            if(digits[len(digits)-1]!=9):\\n                digits[len(digits)-1]+=1\\n            else:\\n                digits[len(digits)-1]=0\\n                digits[len(digits)-2]+=1\\n        else:\\n            if(digits[len(digits)-1]==9):\\n                digits.append(0)\\n                digits[len(digits)-2]=1\\n            else:\\n                digits[len(digits)-1]+=1\\n        return(digits)\\ncan anybody help me out"
                    },
                    {
                        "username": "omkar1029",
                        "content": "`public int[] PlusOne(int[] digits) {\\n        \\n        int[] array = new int[NewArrayLength(digits)];\\n        \\n        int i = digits.Length - 1;\\n        int j = array.Length - 1;\\n        \\n        while(digits[i] == 9){\\n            array[j] = 0;\\n            i--;\\n            j--;\\n        }\\n\\n        if(i >= 0){\\n            array[j] = digits[i] + 1;\\n            i--;\\n            j--;\\n        }\\n        \\n        while(i >= 0){\\n            array[j] = digits[i];\\n            i--;\\n            j--;\\n        }\\n\\n        return array;\\n    }\\n\\n    int NewArrayLength(int[] digits){\\n        for(int i = 0; i < digits.Length; i++){\\n            if(digits[i] != 9) return digits.Length;\\n        }\\n        return digits.Length + 1;\\n    }`\\n\\nwhy is this giving `System.IndexOutOfRangeException`"
                    }
                ]
            },
            {
                "id": 1685423,
                "content": [
                    {
                        "username": "Naved2019khan",
                        "content": " `  \\n\\nwhile(i>=0 && digits[i]==9)\\n       {\\n           digits[i]=0;\\n           i--;\\n       }\\n       int m=n;\\n       if(digits[i+1]==0 && i<0)\\n       {\\n           ans.push_back(1);\\n           m+=1;\\n       }\\n       else{\\n           digits[i]+=1;\\n       }\\n       for(int i=0;i<n;i++)\\n           {\\n               ans.push_back(digits[i]);\\n           }\\nreturn ans;\\n\\n ` \\n\\nwhy this is\\'nt working but it work on other ide like interview bit, show error address Sanitizer \\n "
                    },
                    {
                        "username": "saifie1",
                        "content": " `var plusOne = function(arr) {\n       let i=arr.length-1\n    while(arr[i]===9){\n        arr[i]=0\n        i--\n    }\n    if(i>=0){\n       arr[i]+=1\n    }\n    else{\n        arr.unshift(1)\n    }\n    return arr\n};`"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "\\nclass Solution:\\n\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum = int(\"\".join(map(str,digits))) + int(1)\\n        return [int(i) for i in str(sum)]"
                    },
                    {
                        "username": "20951a0578",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum=\"\"\\n        for i in range(len(digits)):\\n            sum+=str(digits[i])\\n        a=int(sum)+1\\n        b=[]\\n        for i in str(a):\\n            b.append(int(i))\\n        return b"
                    },
                    {
                        "username": "timblake17",
                        "content": "Was this just a test for me to google that parseInt doesn\\'t work on numbers with more that16 digits?"
                    },
                    {
                        "username": "anubhavnegi54",
                        "content": "you can work with BigInteger "
                    },
                    {
                        "username": "GreidO",
                        "content": " `class Solution:\\n\\tdef plusOne(self, digits: List[int]) -> list[int]:\\n\\t\\treturn [int(number) for number in str(int(\\'\\'.join([str(number) for number in digits])) + 1)]`"
                    },
                    {
                        "username": "rickx_x",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        if(digits[digits.size()-1]==9){\\n            int count =0;\\n            int  i = digits.size()-1;\\n            while(digits[i]==9){\\n                digits.pop_back();\\n                count++;\\n                i--;\\n            }\\n            digits.emplace_back(1);\\n            while(count--){\\n                digits.emplace_back(0);\\n            }\\n        }\\n        else{\\n            digits[digits.size()-1]+=1;\\n        }\\n        return digits;\\n    }\\n};\\n\\nwhy isn\\'t this working ?"
                    },
                    {
                        "username": "aizardar",
                        "content": "Three steps to solve this problem:\\n1. get the number from the digits list\\n2. increment the number, and\\n3. Again get the digits of the number into a list. "
                    },
                    {
                        "username": "kasamravi03",
                        "content": "if(len(digits)!=1):\\n            if(digits[len(digits)-1]!=9):\\n                digits[len(digits)-1]+=1\\n            else:\\n                digits[len(digits)-1]=0\\n                digits[len(digits)-2]+=1\\n        else:\\n            if(digits[len(digits)-1]==9):\\n                digits.append(0)\\n                digits[len(digits)-2]=1\\n            else:\\n                digits[len(digits)-1]+=1\\n        return(digits)\\ncan anybody help me out"
                    },
                    {
                        "username": "omkar1029",
                        "content": "`public int[] PlusOne(int[] digits) {\\n        \\n        int[] array = new int[NewArrayLength(digits)];\\n        \\n        int i = digits.Length - 1;\\n        int j = array.Length - 1;\\n        \\n        while(digits[i] == 9){\\n            array[j] = 0;\\n            i--;\\n            j--;\\n        }\\n\\n        if(i >= 0){\\n            array[j] = digits[i] + 1;\\n            i--;\\n            j--;\\n        }\\n        \\n        while(i >= 0){\\n            array[j] = digits[i];\\n            i--;\\n            j--;\\n        }\\n\\n        return array;\\n    }\\n\\n    int NewArrayLength(int[] digits){\\n        for(int i = 0; i < digits.Length; i++){\\n            if(digits[i] != 9) return digits.Length;\\n        }\\n        return digits.Length + 1;\\n    }`\\n\\nwhy is this giving `System.IndexOutOfRangeException`"
                    }
                ]
            },
            {
                "id": 1685414,
                "content": [
                    {
                        "username": "Naved2019khan",
                        "content": " `  \\n\\nwhile(i>=0 && digits[i]==9)\\n       {\\n           digits[i]=0;\\n           i--;\\n       }\\n       int m=n;\\n       if(digits[i+1]==0 && i<0)\\n       {\\n           ans.push_back(1);\\n           m+=1;\\n       }\\n       else{\\n           digits[i]+=1;\\n       }\\n       for(int i=0;i<n;i++)\\n           {\\n               ans.push_back(digits[i]);\\n           }\\nreturn ans;\\n\\n ` \\n\\nwhy this is\\'nt working but it work on other ide like interview bit, show error address Sanitizer \\n "
                    },
                    {
                        "username": "saifie1",
                        "content": " `var plusOne = function(arr) {\n       let i=arr.length-1\n    while(arr[i]===9){\n        arr[i]=0\n        i--\n    }\n    if(i>=0){\n       arr[i]+=1\n    }\n    else{\n        arr.unshift(1)\n    }\n    return arr\n};`"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "\\nclass Solution:\\n\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum = int(\"\".join(map(str,digits))) + int(1)\\n        return [int(i) for i in str(sum)]"
                    },
                    {
                        "username": "20951a0578",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum=\"\"\\n        for i in range(len(digits)):\\n            sum+=str(digits[i])\\n        a=int(sum)+1\\n        b=[]\\n        for i in str(a):\\n            b.append(int(i))\\n        return b"
                    },
                    {
                        "username": "timblake17",
                        "content": "Was this just a test for me to google that parseInt doesn\\'t work on numbers with more that16 digits?"
                    },
                    {
                        "username": "anubhavnegi54",
                        "content": "you can work with BigInteger "
                    },
                    {
                        "username": "GreidO",
                        "content": " `class Solution:\\n\\tdef plusOne(self, digits: List[int]) -> list[int]:\\n\\t\\treturn [int(number) for number in str(int(\\'\\'.join([str(number) for number in digits])) + 1)]`"
                    },
                    {
                        "username": "rickx_x",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        if(digits[digits.size()-1]==9){\\n            int count =0;\\n            int  i = digits.size()-1;\\n            while(digits[i]==9){\\n                digits.pop_back();\\n                count++;\\n                i--;\\n            }\\n            digits.emplace_back(1);\\n            while(count--){\\n                digits.emplace_back(0);\\n            }\\n        }\\n        else{\\n            digits[digits.size()-1]+=1;\\n        }\\n        return digits;\\n    }\\n};\\n\\nwhy isn\\'t this working ?"
                    },
                    {
                        "username": "aizardar",
                        "content": "Three steps to solve this problem:\\n1. get the number from the digits list\\n2. increment the number, and\\n3. Again get the digits of the number into a list. "
                    },
                    {
                        "username": "kasamravi03",
                        "content": "if(len(digits)!=1):\\n            if(digits[len(digits)-1]!=9):\\n                digits[len(digits)-1]+=1\\n            else:\\n                digits[len(digits)-1]=0\\n                digits[len(digits)-2]+=1\\n        else:\\n            if(digits[len(digits)-1]==9):\\n                digits.append(0)\\n                digits[len(digits)-2]=1\\n            else:\\n                digits[len(digits)-1]+=1\\n        return(digits)\\ncan anybody help me out"
                    },
                    {
                        "username": "omkar1029",
                        "content": "`public int[] PlusOne(int[] digits) {\\n        \\n        int[] array = new int[NewArrayLength(digits)];\\n        \\n        int i = digits.Length - 1;\\n        int j = array.Length - 1;\\n        \\n        while(digits[i] == 9){\\n            array[j] = 0;\\n            i--;\\n            j--;\\n        }\\n\\n        if(i >= 0){\\n            array[j] = digits[i] + 1;\\n            i--;\\n            j--;\\n        }\\n        \\n        while(i >= 0){\\n            array[j] = digits[i];\\n            i--;\\n            j--;\\n        }\\n\\n        return array;\\n    }\\n\\n    int NewArrayLength(int[] digits){\\n        for(int i = 0; i < digits.Length; i++){\\n            if(digits[i] != 9) return digits.Length;\\n        }\\n        return digits.Length + 1;\\n    }`\\n\\nwhy is this giving `System.IndexOutOfRangeException`"
                    }
                ]
            },
            {
                "id": 1684055,
                "content": [
                    {
                        "username": "Naved2019khan",
                        "content": " `  \\n\\nwhile(i>=0 && digits[i]==9)\\n       {\\n           digits[i]=0;\\n           i--;\\n       }\\n       int m=n;\\n       if(digits[i+1]==0 && i<0)\\n       {\\n           ans.push_back(1);\\n           m+=1;\\n       }\\n       else{\\n           digits[i]+=1;\\n       }\\n       for(int i=0;i<n;i++)\\n           {\\n               ans.push_back(digits[i]);\\n           }\\nreturn ans;\\n\\n ` \\n\\nwhy this is\\'nt working but it work on other ide like interview bit, show error address Sanitizer \\n "
                    },
                    {
                        "username": "saifie1",
                        "content": " `var plusOne = function(arr) {\n       let i=arr.length-1\n    while(arr[i]===9){\n        arr[i]=0\n        i--\n    }\n    if(i>=0){\n       arr[i]+=1\n    }\n    else{\n        arr.unshift(1)\n    }\n    return arr\n};`"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "\\nclass Solution:\\n\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum = int(\"\".join(map(str,digits))) + int(1)\\n        return [int(i) for i in str(sum)]"
                    },
                    {
                        "username": "20951a0578",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum=\"\"\\n        for i in range(len(digits)):\\n            sum+=str(digits[i])\\n        a=int(sum)+1\\n        b=[]\\n        for i in str(a):\\n            b.append(int(i))\\n        return b"
                    },
                    {
                        "username": "timblake17",
                        "content": "Was this just a test for me to google that parseInt doesn\\'t work on numbers with more that16 digits?"
                    },
                    {
                        "username": "anubhavnegi54",
                        "content": "you can work with BigInteger "
                    },
                    {
                        "username": "GreidO",
                        "content": " `class Solution:\\n\\tdef plusOne(self, digits: List[int]) -> list[int]:\\n\\t\\treturn [int(number) for number in str(int(\\'\\'.join([str(number) for number in digits])) + 1)]`"
                    },
                    {
                        "username": "rickx_x",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        if(digits[digits.size()-1]==9){\\n            int count =0;\\n            int  i = digits.size()-1;\\n            while(digits[i]==9){\\n                digits.pop_back();\\n                count++;\\n                i--;\\n            }\\n            digits.emplace_back(1);\\n            while(count--){\\n                digits.emplace_back(0);\\n            }\\n        }\\n        else{\\n            digits[digits.size()-1]+=1;\\n        }\\n        return digits;\\n    }\\n};\\n\\nwhy isn\\'t this working ?"
                    },
                    {
                        "username": "aizardar",
                        "content": "Three steps to solve this problem:\\n1. get the number from the digits list\\n2. increment the number, and\\n3. Again get the digits of the number into a list. "
                    },
                    {
                        "username": "kasamravi03",
                        "content": "if(len(digits)!=1):\\n            if(digits[len(digits)-1]!=9):\\n                digits[len(digits)-1]+=1\\n            else:\\n                digits[len(digits)-1]=0\\n                digits[len(digits)-2]+=1\\n        else:\\n            if(digits[len(digits)-1]==9):\\n                digits.append(0)\\n                digits[len(digits)-2]=1\\n            else:\\n                digits[len(digits)-1]+=1\\n        return(digits)\\ncan anybody help me out"
                    },
                    {
                        "username": "omkar1029",
                        "content": "`public int[] PlusOne(int[] digits) {\\n        \\n        int[] array = new int[NewArrayLength(digits)];\\n        \\n        int i = digits.Length - 1;\\n        int j = array.Length - 1;\\n        \\n        while(digits[i] == 9){\\n            array[j] = 0;\\n            i--;\\n            j--;\\n        }\\n\\n        if(i >= 0){\\n            array[j] = digits[i] + 1;\\n            i--;\\n            j--;\\n        }\\n        \\n        while(i >= 0){\\n            array[j] = digits[i];\\n            i--;\\n            j--;\\n        }\\n\\n        return array;\\n    }\\n\\n    int NewArrayLength(int[] digits){\\n        for(int i = 0; i < digits.Length; i++){\\n            if(digits[i] != 9) return digits.Length;\\n        }\\n        return digits.Length + 1;\\n    }`\\n\\nwhy is this giving `System.IndexOutOfRangeException`"
                    }
                ]
            },
            {
                "id": 1682619,
                "content": [
                    {
                        "username": "Naved2019khan",
                        "content": " `  \\n\\nwhile(i>=0 && digits[i]==9)\\n       {\\n           digits[i]=0;\\n           i--;\\n       }\\n       int m=n;\\n       if(digits[i+1]==0 && i<0)\\n       {\\n           ans.push_back(1);\\n           m+=1;\\n       }\\n       else{\\n           digits[i]+=1;\\n       }\\n       for(int i=0;i<n;i++)\\n           {\\n               ans.push_back(digits[i]);\\n           }\\nreturn ans;\\n\\n ` \\n\\nwhy this is\\'nt working but it work on other ide like interview bit, show error address Sanitizer \\n "
                    },
                    {
                        "username": "saifie1",
                        "content": " `var plusOne = function(arr) {\n       let i=arr.length-1\n    while(arr[i]===9){\n        arr[i]=0\n        i--\n    }\n    if(i>=0){\n       arr[i]+=1\n    }\n    else{\n        arr.unshift(1)\n    }\n    return arr\n};`"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "\\nclass Solution:\\n\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum = int(\"\".join(map(str,digits))) + int(1)\\n        return [int(i) for i in str(sum)]"
                    },
                    {
                        "username": "20951a0578",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum=\"\"\\n        for i in range(len(digits)):\\n            sum+=str(digits[i])\\n        a=int(sum)+1\\n        b=[]\\n        for i in str(a):\\n            b.append(int(i))\\n        return b"
                    },
                    {
                        "username": "timblake17",
                        "content": "Was this just a test for me to google that parseInt doesn\\'t work on numbers with more that16 digits?"
                    },
                    {
                        "username": "anubhavnegi54",
                        "content": "you can work with BigInteger "
                    },
                    {
                        "username": "GreidO",
                        "content": " `class Solution:\\n\\tdef plusOne(self, digits: List[int]) -> list[int]:\\n\\t\\treturn [int(number) for number in str(int(\\'\\'.join([str(number) for number in digits])) + 1)]`"
                    },
                    {
                        "username": "rickx_x",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        if(digits[digits.size()-1]==9){\\n            int count =0;\\n            int  i = digits.size()-1;\\n            while(digits[i]==9){\\n                digits.pop_back();\\n                count++;\\n                i--;\\n            }\\n            digits.emplace_back(1);\\n            while(count--){\\n                digits.emplace_back(0);\\n            }\\n        }\\n        else{\\n            digits[digits.size()-1]+=1;\\n        }\\n        return digits;\\n    }\\n};\\n\\nwhy isn\\'t this working ?"
                    },
                    {
                        "username": "aizardar",
                        "content": "Three steps to solve this problem:\\n1. get the number from the digits list\\n2. increment the number, and\\n3. Again get the digits of the number into a list. "
                    },
                    {
                        "username": "kasamravi03",
                        "content": "if(len(digits)!=1):\\n            if(digits[len(digits)-1]!=9):\\n                digits[len(digits)-1]+=1\\n            else:\\n                digits[len(digits)-1]=0\\n                digits[len(digits)-2]+=1\\n        else:\\n            if(digits[len(digits)-1]==9):\\n                digits.append(0)\\n                digits[len(digits)-2]=1\\n            else:\\n                digits[len(digits)-1]+=1\\n        return(digits)\\ncan anybody help me out"
                    },
                    {
                        "username": "omkar1029",
                        "content": "`public int[] PlusOne(int[] digits) {\\n        \\n        int[] array = new int[NewArrayLength(digits)];\\n        \\n        int i = digits.Length - 1;\\n        int j = array.Length - 1;\\n        \\n        while(digits[i] == 9){\\n            array[j] = 0;\\n            i--;\\n            j--;\\n        }\\n\\n        if(i >= 0){\\n            array[j] = digits[i] + 1;\\n            i--;\\n            j--;\\n        }\\n        \\n        while(i >= 0){\\n            array[j] = digits[i];\\n            i--;\\n            j--;\\n        }\\n\\n        return array;\\n    }\\n\\n    int NewArrayLength(int[] digits){\\n        for(int i = 0; i < digits.Length; i++){\\n            if(digits[i] != 9) return digits.Length;\\n        }\\n        return digits.Length + 1;\\n    }`\\n\\nwhy is this giving `System.IndexOutOfRangeException`"
                    }
                ]
            },
            {
                "id": 1681229,
                "content": [
                    {
                        "username": "Naved2019khan",
                        "content": " `  \\n\\nwhile(i>=0 && digits[i]==9)\\n       {\\n           digits[i]=0;\\n           i--;\\n       }\\n       int m=n;\\n       if(digits[i+1]==0 && i<0)\\n       {\\n           ans.push_back(1);\\n           m+=1;\\n       }\\n       else{\\n           digits[i]+=1;\\n       }\\n       for(int i=0;i<n;i++)\\n           {\\n               ans.push_back(digits[i]);\\n           }\\nreturn ans;\\n\\n ` \\n\\nwhy this is\\'nt working but it work on other ide like interview bit, show error address Sanitizer \\n "
                    },
                    {
                        "username": "saifie1",
                        "content": " `var plusOne = function(arr) {\n       let i=arr.length-1\n    while(arr[i]===9){\n        arr[i]=0\n        i--\n    }\n    if(i>=0){\n       arr[i]+=1\n    }\n    else{\n        arr.unshift(1)\n    }\n    return arr\n};`"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "\\nclass Solution:\\n\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum = int(\"\".join(map(str,digits))) + int(1)\\n        return [int(i) for i in str(sum)]"
                    },
                    {
                        "username": "20951a0578",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum=\"\"\\n        for i in range(len(digits)):\\n            sum+=str(digits[i])\\n        a=int(sum)+1\\n        b=[]\\n        for i in str(a):\\n            b.append(int(i))\\n        return b"
                    },
                    {
                        "username": "timblake17",
                        "content": "Was this just a test for me to google that parseInt doesn\\'t work on numbers with more that16 digits?"
                    },
                    {
                        "username": "anubhavnegi54",
                        "content": "you can work with BigInteger "
                    },
                    {
                        "username": "GreidO",
                        "content": " `class Solution:\\n\\tdef plusOne(self, digits: List[int]) -> list[int]:\\n\\t\\treturn [int(number) for number in str(int(\\'\\'.join([str(number) for number in digits])) + 1)]`"
                    },
                    {
                        "username": "rickx_x",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        if(digits[digits.size()-1]==9){\\n            int count =0;\\n            int  i = digits.size()-1;\\n            while(digits[i]==9){\\n                digits.pop_back();\\n                count++;\\n                i--;\\n            }\\n            digits.emplace_back(1);\\n            while(count--){\\n                digits.emplace_back(0);\\n            }\\n        }\\n        else{\\n            digits[digits.size()-1]+=1;\\n        }\\n        return digits;\\n    }\\n};\\n\\nwhy isn\\'t this working ?"
                    },
                    {
                        "username": "aizardar",
                        "content": "Three steps to solve this problem:\\n1. get the number from the digits list\\n2. increment the number, and\\n3. Again get the digits of the number into a list. "
                    },
                    {
                        "username": "kasamravi03",
                        "content": "if(len(digits)!=1):\\n            if(digits[len(digits)-1]!=9):\\n                digits[len(digits)-1]+=1\\n            else:\\n                digits[len(digits)-1]=0\\n                digits[len(digits)-2]+=1\\n        else:\\n            if(digits[len(digits)-1]==9):\\n                digits.append(0)\\n                digits[len(digits)-2]=1\\n            else:\\n                digits[len(digits)-1]+=1\\n        return(digits)\\ncan anybody help me out"
                    },
                    {
                        "username": "omkar1029",
                        "content": "`public int[] PlusOne(int[] digits) {\\n        \\n        int[] array = new int[NewArrayLength(digits)];\\n        \\n        int i = digits.Length - 1;\\n        int j = array.Length - 1;\\n        \\n        while(digits[i] == 9){\\n            array[j] = 0;\\n            i--;\\n            j--;\\n        }\\n\\n        if(i >= 0){\\n            array[j] = digits[i] + 1;\\n            i--;\\n            j--;\\n        }\\n        \\n        while(i >= 0){\\n            array[j] = digits[i];\\n            i--;\\n            j--;\\n        }\\n\\n        return array;\\n    }\\n\\n    int NewArrayLength(int[] digits){\\n        for(int i = 0; i < digits.Length; i++){\\n            if(digits[i] != 9) return digits.Length;\\n        }\\n        return digits.Length + 1;\\n    }`\\n\\nwhy is this giving `System.IndexOutOfRangeException`"
                    }
                ]
            },
            {
                "id": 1676120,
                "content": [
                    {
                        "username": "Naved2019khan",
                        "content": " `  \\n\\nwhile(i>=0 && digits[i]==9)\\n       {\\n           digits[i]=0;\\n           i--;\\n       }\\n       int m=n;\\n       if(digits[i+1]==0 && i<0)\\n       {\\n           ans.push_back(1);\\n           m+=1;\\n       }\\n       else{\\n           digits[i]+=1;\\n       }\\n       for(int i=0;i<n;i++)\\n           {\\n               ans.push_back(digits[i]);\\n           }\\nreturn ans;\\n\\n ` \\n\\nwhy this is\\'nt working but it work on other ide like interview bit, show error address Sanitizer \\n "
                    },
                    {
                        "username": "saifie1",
                        "content": " `var plusOne = function(arr) {\n       let i=arr.length-1\n    while(arr[i]===9){\n        arr[i]=0\n        i--\n    }\n    if(i>=0){\n       arr[i]+=1\n    }\n    else{\n        arr.unshift(1)\n    }\n    return arr\n};`"
                    },
                    {
                        "username": "shabareesharyan",
                        "content": "\\nclass Solution:\\n\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum = int(\"\".join(map(str,digits))) + int(1)\\n        return [int(i) for i in str(sum)]"
                    },
                    {
                        "username": "20951a0578",
                        "content": "class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        sum=\"\"\\n        for i in range(len(digits)):\\n            sum+=str(digits[i])\\n        a=int(sum)+1\\n        b=[]\\n        for i in str(a):\\n            b.append(int(i))\\n        return b"
                    },
                    {
                        "username": "timblake17",
                        "content": "Was this just a test for me to google that parseInt doesn\\'t work on numbers with more that16 digits?"
                    },
                    {
                        "username": "anubhavnegi54",
                        "content": "you can work with BigInteger "
                    },
                    {
                        "username": "GreidO",
                        "content": " `class Solution:\\n\\tdef plusOne(self, digits: List[int]) -> list[int]:\\n\\t\\treturn [int(number) for number in str(int(\\'\\'.join([str(number) for number in digits])) + 1)]`"
                    },
                    {
                        "username": "rickx_x",
                        "content": "class Solution {\\npublic:\\n    vector<int> plusOne(vector<int>& digits) {\\n        if(digits[digits.size()-1]==9){\\n            int count =0;\\n            int  i = digits.size()-1;\\n            while(digits[i]==9){\\n                digits.pop_back();\\n                count++;\\n                i--;\\n            }\\n            digits.emplace_back(1);\\n            while(count--){\\n                digits.emplace_back(0);\\n            }\\n        }\\n        else{\\n            digits[digits.size()-1]+=1;\\n        }\\n        return digits;\\n    }\\n};\\n\\nwhy isn\\'t this working ?"
                    },
                    {
                        "username": "aizardar",
                        "content": "Three steps to solve this problem:\\n1. get the number from the digits list\\n2. increment the number, and\\n3. Again get the digits of the number into a list. "
                    },
                    {
                        "username": "kasamravi03",
                        "content": "if(len(digits)!=1):\\n            if(digits[len(digits)-1]!=9):\\n                digits[len(digits)-1]+=1\\n            else:\\n                digits[len(digits)-1]=0\\n                digits[len(digits)-2]+=1\\n        else:\\n            if(digits[len(digits)-1]==9):\\n                digits.append(0)\\n                digits[len(digits)-2]=1\\n            else:\\n                digits[len(digits)-1]+=1\\n        return(digits)\\ncan anybody help me out"
                    },
                    {
                        "username": "omkar1029",
                        "content": "`public int[] PlusOne(int[] digits) {\\n        \\n        int[] array = new int[NewArrayLength(digits)];\\n        \\n        int i = digits.Length - 1;\\n        int j = array.Length - 1;\\n        \\n        while(digits[i] == 9){\\n            array[j] = 0;\\n            i--;\\n            j--;\\n        }\\n\\n        if(i >= 0){\\n            array[j] = digits[i] + 1;\\n            i--;\\n            j--;\\n        }\\n        \\n        while(i >= 0){\\n            array[j] = digits[i];\\n            i--;\\n            j--;\\n        }\\n\\n        return array;\\n    }\\n\\n    int NewArrayLength(int[] digits){\\n        for(int i = 0; i < digits.Length; i++){\\n            if(digits[i] != 9) return digits.Length;\\n        }\\n        return digits.Length + 1;\\n    }`\\n\\nwhy is this giving `System.IndexOutOfRangeException`"
                    }
                ]
            }
        ]
    }
]