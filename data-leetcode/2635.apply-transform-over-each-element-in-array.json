[
    {
        "title": "Apply Transform Over Each Element in Array",
        "question_content": "Given an integer array&nbsp;arr&nbsp;and a mapping function&nbsp;fn, return&nbsp;a new array with a transformation applied to each element.\nThe returned array should be created such that&nbsp;returnedArray[i] = fn(arr[i], i).\nPlease solve it without the built-in Array.map method.\n&nbsp;\nExample 1:\n\nInput: arr = [1,2,3], fn = function plusone(n) { return n + 1; }\nOutput: [2,3,4]\nExplanation:\nconst newArray = map(arr, plusone); // [2,3,4]\nThe function increases each value in the array by one. \n\nExample 2:\n\nInput: arr = [1,2,3], fn = function plusI(n, i) { return n + i; }\nOutput: [1,3,5]\nExplanation: The function increases each value by the index it resides in.\n\nExample 3:\n\nInput: arr = [10,20,30], fn = function constant() { return 42; }\nOutput: [42,42,42]\nExplanation: The function always returns 42.\n\n&nbsp;\nConstraints:\n\n\t0 <= arr.length <= 1000\n\t-109&nbsp;<= arr[i] <= 109\n\tfn returns a number",
        "solutions": [
            {
                "id": 3498378,
                "title": "day4-o-n-o-1-practicality-and-efficiency-are-two-sides-of-the-same-coin",
                "content": "**Why as a problem setter do you think the `Array.map()` was restricted to use??**\\nI can think of three reasons why the problem setter must have restricted us to use `Array.map()`..\\n1. To apply alternatives to built-in `Array.map()` method to encourage developers to think creatively and come up with alternative solutions using `loops`, `functions`, or `recursion`. \\n2. Using `Array.map()` may not always be the most efficient solution, especially for large arrays, and other techniques like loops or recursion may be more performant. So, it\\'s good to know and be comfortable with different approaches to solve array manipulation problems.\\n3. Finally, it could have gotten too easy with `Array.map()`.. ;)\\n\\n***\\n### 1. Using a for loop with operational container:\\n* We can loop through each element of the input array and apply the `map function` to each element. We then store the transformed values in a new array.\\n```\\nvar map = function(arr, fn) {\\n  const transformedArr = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    transformedArr[i] = fn(arr[i], i);\\n  }\\n  return transformedArr;\\n};\\n```\\n**TC and SC: O(n)**\\n***\\n### Using a for loop without any container a.k.a Inmemory transformations\\n```\\nvar map = function(arr, fn) {\\n    for (let i = 0; i < arr.length; ++i) {\\n        arr[i] = fn(arr[i], i);\\n    }\\n    return arr;\\n};\\n```\\n**TC and SC : O(n) and O(1)**\\n* This is a **bad practice** as it alters the given data and also It can result in unexpected problems where the programmer was not expecting that as a side-effect.\\n* Now think that you have got a data of array knwon as personsAge now they need to check if a person is 18+ or not and if yes they want to mark it as 1 if not then 0.\\n* So if we implement this method to that real world question we are gonna loose the most important data i.e. the persons age and instead of persons age now that column will have 1 and 0.\\n* Now say the app is scaled to many countries and one of the countires has +21 as adlut benchmark.\\n* Should the firm again ask for their age?\\n* Should the developers have used a different method then it would have been a smooth process.\\n\\n*\"THATS WHY NEVER MESS WITH PASSED DATA.\"*\\n**#Note: The built-in `Array.map()` does not modify the original array.**\\n***\\n### 2. Using the forEach method:\\n* We can use the `forEach` method to iterate through each element of the `input array` and apply the `map function` to each element. We then store the transformed values in a new array.\\n```\\nvar map = function(arr, fn) {\\n  const transformedArr = [];\\n  arr.forEach((element, index) => {\\n    transformedArr[index] = fn(element, index);\\n  });\\n  return transformedArr;\\n};\\n```\\n**TC and SC: O(n)**\\n***\\n### 3. Using the reduce method:\\n* We can use the `reduce` method to iterate through each element of the `input array` and apply the `map function` to each element. We then accumulate the transformed values in a new array.\\n```\\nvar map = function(arr, fn) {\\n  return arr.reduce((transformedArr, element, index) => {\\n    transformedArr[index] = fn(element, index);\\n    return transformedArr;\\n  }, []);\\n};\\n```\\n**TC and SC: O(n)**\\n***\\n### 4. Using the for...of loop:\\n* We can use the `for...of loop` to iterate through each element of the` input array` and apply the `map function` to each element. We then store the transformed values in a new array.\\n```\\nvar map = function(arr, fn) {\\n  const transformedArr = [];\\n  let index = 0;\\n  for (const element of arr) {\\n    transformedArr[index] = fn(element, index);\\n    index++;\\n  }\\n  return transformedArr;\\n};\\n```\\n**TC and SC: O(n)**\\n***\\nYou can support this article by upvoitng \\u2B06\\u2B06!!\\n***",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar map = function(arr, fn) {\\n  const transformedArr = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    transformedArr[i] = fn(arr[i], i);\\n  }\\n  return transformedArr;\\n};\\n```\n```\\nvar map = function(arr, fn) {\\n    for (let i = 0; i < arr.length; ++i) {\\n        arr[i] = fn(arr[i], i);\\n    }\\n    return arr;\\n};\\n```\n```\\nvar map = function(arr, fn) {\\n  const transformedArr = [];\\n  arr.forEach((element, index) => {\\n    transformedArr[index] = fn(element, index);\\n  });\\n  return transformedArr;\\n};\\n```\n```\\nvar map = function(arr, fn) {\\n  return arr.reduce((transformedArr, element, index) => {\\n    transformedArr[index] = fn(element, index);\\n    return transformedArr;\\n  }, []);\\n};\\n```\n```\\nvar map = function(arr, fn) {\\n  const transformedArr = [];\\n  let index = 0;\\n  for (const element of arr) {\\n    transformedArr[index] = fn(element, index);\\n    index++;\\n  }\\n  return transformedArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498213,
                "title": "solution-in-js-and-typescript-day-4",
                "content": "# Intuition\\nThe problem requires transforming each element of an input array using a mapping function and returning a new array with the transformed elements. The solution involves iterating through the input array, applying the mapping function to each element, and adding the transformed element to a new array.\\n\\n# Approach\\n- Initialize an empty array to store the transformed elements.\\n- Iterate through each element of the input array using a loop.\\n- Apply the mapping function to each element, passing in the current element and its index.\\n- Add the transformed element to the empty array.\\n- Return the transformed array.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the above solution is O(n), where n is the length of the input array `arr`.\\n\\n- Space complexity:\\nThe space complexity of the solution is O(n) as well. This is because we are creating a new array `mappedArray` with the same length as the input array to store the transformed elements. \\n\\n# Learning \\nIn this solution, we learned how to use a loop to iterate through an array and apply a function to each element. We also learned how to create a new array and add transformed elements to it. Additionally, we learned that the push() method can be used to add elements to an array, and the return statement is used to return a value from a function. Finally, we learned how to define a function in JavaScript and pass arguments to it.\\n\\n# Code in JS\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  var mappedArray = [];\\n  for (var i = 0; i < arr.length; i++) {\\n    mappedArray.push(fn(arr[i], i));\\n  }\\n  return mappedArray;\\n};\\n```\\n\\n# Code in TypeScript\\n```\\nfunction map<T, U>(arr: T[], fn: (value: T, index: number) => U): U[] {\\n  const mappedArray: U[] = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    mappedArray.push(fn(arr[i], i));\\n  }\\n  return mappedArray;\\n}\\n\\n```\\n\\n \\n![upvote-2.png](https://assets.leetcode.com/users/images/cbe87825-7ac4-4da2-a264-8cc2c58d467b_1683532778.3146844.png)\\n\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  var mappedArray = [];\\n  for (var i = 0; i < arr.length; i++) {\\n    mappedArray.push(fn(arr[i], i));\\n  }\\n  return mappedArray;\\n};\\n```\n```\\nfunction map<T, U>(arr: T[], fn: (value: T, index: number) => U): U[] {\\n  const mappedArray: U[] = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    mappedArray.push(fn(arr[i], i));\\n  }\\n  return mappedArray;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3499562,
                "title": "2635-apply-transform-level-up-your-javascript-skills-with-these-intuitive-implementations",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n>The problem requires us to apply a mapping function to each element of an array and return a new array with the transformed values. We can do this by iterating through the array, applying the mapping function to each element, and storing the transformed values in a new array. We can then return the new array with the transformed values.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n>We can implement the above intuition by creating a function that takes an array and a mapping function as input. The function will loop through the array and apply the mapping function to each element using the current index as a parameter. It will then store the result of the mapping function in a new array and return the new array with the transformed values.\\n\\nHere is a detailed approach:\\n>1. Create a function `map` that takes an array `arr` and a mapping function `fn` as input.\\n>2. Initialize an empty array `result` to store the transformed values.\\n>3. Loop through each element of the array `arr` using a `for` loop.\\n>4. For each element, apply the mapping function `fn` to the element value and the index.\\n>5. Store the result of the mapping function in the `result` array.\\n>6. Return the `result` array with the transformed values.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n>The time complexity of this approach is O(n), where n is the number of elements in the input array. This is because we need to loop through the array once to apply the mapping function to each element.\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n>The space complexity of this approach is O(n), where n is the number of elements in the input array. This is because we need to store the transformed values in a new array, which will have the same size as the input array.\\n\\nOverall, this approach is efficient and scalable for transforming an array using a mapping function.\\n\\n\\n# Code\\n```JS []\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result;\\n};\\n```\\n```TS []\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n  const result: number[] = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    result.push(fn(arr[i], i));\\n  }\\n  return result;\\n}\\n\\n```\\n![image.png](https://assets.leetcode.com/users/images/b427e686-2e5d-469a-8e7a-db5140022a6b_1677715904.0948765.png)\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\\n\\n> ##### There are other ways to solve the problem of transforming an array using a mapping function\\n1. Using the `Array.forEach()` method:\\n```\\nfunction map(arr, fn) {\\n  const result = [];\\n  arr.forEach((value, index) => {\\n    result.push(fn(value, index));\\n  });\\n  return result;\\n}\\n```\\n2. Using the `Array.reduce()` method:\\n```\\nfunction map(arr, fn) {\\n  return arr.reduce((result, currentValue, index) => {\\n    result.push(fn(currentValue, index));\\n    return result;\\n  }, []);\\n}\\n```\\n3. Using the `Array.from()` method:\\n```\\nfunction map(arr, fn) {\\n  return Array.from(arr, (value, index) => fn(value, index));\\n}\\n```\\n4. Using the `for...of` loop:\\n```\\nfunction map(arr, fn) {\\n  const result = [];\\n  for (const [index, value] of arr.entries()) {\\n    result.push(fn(value, index));\\n  }\\n  return result;\\n}\\n```\\n5. Using the `Array.filter()` method:\\n```\\nfunction map(arr, fn) {\\n  return arr.filter(() => true).map(fn);\\n}\\n\\n```\\n6. Using recursion\\n```\\nfunction map(arr, fn, index = 0) {\\n  if (index === arr.length) {\\n    return [];\\n  }\\n  return [fn(arr[index], index), ...map(arr, fn, index + 1)];\\n}\\n```\\n7. Using the Array.flatMap() method:\\n```\\nfunction map(arr, fn) {\\n  return arr.flatMap((value, index) => fn(value, index));\\n}\\n\\n```\\n\\n# Important topic to Learn\\n```\\n[ All array method ]\\n\\nArray.push()       Array.pop()       Array.unshift() \\nArray.shift()      Array.concat()    Array.slice()\\nArray.splice()     Array.join()      Array.reverse()\\nArray.sort()       Array.map()       Array.filter()\\nArray.reduce()     Array.forEach()   Array.every()\\nArray.some()       Array.indexOf()   Array.lastIndexOf()\\nArray.includes()   Array.find()      Array.findIndex()\\nArray.fill()       Array.flat()      Array.flatMap()\\n\\n[Some topic]\\n\\n1. Higher-order functions\\n2. Immutability\\n3. Recursion\\n4. Pure functions\\n```\\n\\n# Please Comment\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```JS []\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result;\\n};\\n```\n```TS []\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n  const result: number[] = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    result.push(fn(arr[i], i));\\n  }\\n  return result;\\n}\\n\\n```\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\n```\\nfunction map(arr, fn) {\\n  const result = [];\\n  arr.forEach((value, index) => {\\n    result.push(fn(value, index));\\n  });\\n  return result;\\n}\\n```\n```\\nfunction map(arr, fn) {\\n  return arr.reduce((result, currentValue, index) => {\\n    result.push(fn(currentValue, index));\\n    return result;\\n  }, []);\\n}\\n```\n```\\nfunction map(arr, fn) {\\n  return Array.from(arr, (value, index) => fn(value, index));\\n}\\n```\n```\\nfunction map(arr, fn) {\\n  const result = [];\\n  for (const [index, value] of arr.entries()) {\\n    result.push(fn(value, index));\\n  }\\n  return result;\\n}\\n```\n```\\nfunction map(arr, fn) {\\n  return arr.filter(() => true).map(fn);\\n}\\n\\n```\n```\\nfunction map(arr, fn, index = 0) {\\n  if (index === arr.length) {\\n    return [];\\n  }\\n  return [fn(arr[index], index), ...map(arr, fn, index + 1)];\\n}\\n```\n```\\nfunction map(arr, fn) {\\n  return arr.flatMap((value, index) => fn(value, index));\\n}\\n\\n```\n```\\n[ All array method ]\\n\\nArray.push()       Array.pop()       Array.unshift() \\nArray.shift()      Array.concat()    Array.slice()\\nArray.splice()     Array.join()      Array.reverse()\\nArray.sort()       Array.map()       Array.filter()\\nArray.reduce()     Array.forEach()   Array.every()\\nArray.some()       Array.indexOf()   Array.lastIndexOf()\\nArray.includes()   Array.find()      Array.findIndex()\\nArray.fill()       Array.flat()      Array.flatMap()\\n\\n[Some topic]\\n\\n1. Higher-order functions\\n2. Immutability\\n3. Recursion\\n4. Pure functions\\n```\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3407366,
                "title": "easy-solution-by-create-new-array-and-push-element",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  const res = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    res.push(fn(arr[i], i));\\n  }\\n  return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  const res = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    res.push(fn(arr[i], i));\\n  }\\n  return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3482171,
                "title": "beginner-s-solution-using-simple-for-loop",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Iterate through array using for loop as we do in every programming languages and assign current array value(arr[idx]) to function with parameters fn(arr[idx], idx) and finally return the arr as answer.\\n\\n# Complexity\\n- Time complexity: O(N) where N is (arr.length)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1) (auxiliary space)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# JavaScript Code:\\n```\\nvar map = function(arr, fn) {\\n    let arrLen = arr.length;\\n    for(let idx = 0; idx<arrLen; idx++){\\n        arr[idx] = fn(arr[idx], idx);\\n    }\\n    return arr;\\n};\\n```\\n\\n# TypeScript Code:\\n```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let arrLen = arr.length;\\n    for(let idx = 0; idx < arrLen; idx++){\\n        arr[idx] = fn(arr[idx], idx);\\n    }\\n\\n    return arr;\\n};\\n```\\n\\n### Upvote if you like the solution :)\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nvar map = function(arr, fn) {\\n    let arrLen = arr.length;\\n    for(let idx = 0; idx<arrLen; idx++){\\n        arr[idx] = fn(arr[idx], idx);\\n    }\\n    return arr;\\n};\\n```\n```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let arrLen = arr.length;\\n    for(let idx = 0; idx < arrLen; idx++){\\n        arr[idx] = fn(arr[idx], idx);\\n    }\\n\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3419658,
                "title": "mymap",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function (arr, fn) {\\n  const res = [];\\n\\n  arr.forEach((elem, index) => {\\n    res.push(fn(elem, index));\\n  });\\n\\n  return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function (arr, fn) {\\n  const res = [];\\n\\n  arr.forEach((elem, index) => {\\n    res.push(fn(elem, index));\\n  });\\n\\n  return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498888,
                "title": "easy-js-solution-please-upvote",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for(let i=0;i<arr.length;i++){\\n        arr[i]=fn(arr[i],i);\\n    }\\n    return arr;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for(let i=0;i<arr.length;i++){\\n        arr[i]=fn(arr[i],i);\\n    }\\n    return arr;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498518,
                "title": "o-n-commented-easy",
                "content": "The above code defines a function called map that takes in two arguments: an array arr and a function fn. The map function applies the fn function to each element in the arr array and returns a new array with the transformed values.\\n\\nHere\\'s an example of how this function can be used:\\n```\\n// Define the array to be transformed\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define the function to transform each element\\nconst square = function(num) {\\n  return num * num;\\n}\\n```\\n\\n// Call the map function and pass in the array and function\\nconst squaredNumbers = map(numbers, square);\\n\\n// The result will be a new array with the squared values\\nconsole.log(squaredNumbers); // [1, 4, 9, 16, 25]\\n\\nIn the example above, the map function is called with the numbers array and the square function. The map function applies \\nthe square function to each element in the numbers array and returns a new array with\\n the squared values. The resulting squaredNumbers array is then logged to the console.\\n\\n```\\n\\nvar map = function(arr, fn) {\\n  const transformedArr = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    transformedArr[i] = fn(arr[i], i);\\n  }\\n\\n  return transformedArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Iterator"
                ],
                "code": "```\\n// Define the array to be transformed\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define the function to transform each element\\nconst square = function(num) {\\n  return num * num;\\n}\\n```\n```\\n\\nvar map = function(arr, fn) {\\n  const transformedArr = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    transformedArr[i] = fn(arr[i], i);\\n  }\\n\\n  return transformedArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498895,
                "title": "easy-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const ans=[];\\n    for(let i=0;i<arr.length;i++)\\n    ans[i]=fn(arr[i],i);\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const ans=[];\\n    for(let i=0;i<arr.length;i++)\\n    ans[i]=fn(arr[i],i);\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498316,
                "title": "easy-solution-using-implementation-of-built-in-map-method-of-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n If go through the question in better way then we will found that we have to basically implement the predefined map method of javascript.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe Implement the map method of javascript.\\n# map method of javascript\\n- It is an array method which is widely used for list rendering in React.\\n- It take fn as arguments and calls fn(arr[i]) for each element of arr \\n- It return new array of element returned by fn.\\n- newArr=arr.map(fn);\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n          let newArr=[];\\n          for(let i=0;i<arr.length;i++)\\n          {\\n              newArr.push(fn(arr[i],i));\\n          }\\n          return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n          let newArr=[];\\n          for(let i=0;i<arr.length;i++)\\n          {\\n              newArr.push(fn(arr[i],i));\\n          }\\n          return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3406444,
                "title": "efficient-and-beginner-friendly-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThis code initializes an empty array newArr, iterates over the elements of arr, and applies the fn function to each element while accumulating the transformed values in newArr. Finally, it returns the newArr array.\\n# Complexity\\n- Time complexity:\\n\\n**O(n)** where n is the length of the input array arr, because the function iterates over each element of arr.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n**O(n)** because the function creates a new array with n elements to store the transformed values.\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    newArr = []\\n    for(let i = 0; i < arr.length; i++) {\\n        newArr.push(fn(arr[i], i))\\n    }\\n    return newArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    newArr = []\\n    for(let i = 0; i < arr.length; i++) {\\n        newArr.push(fn(arr[i], i))\\n    }\\n    return newArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498757,
                "title": "java-script-solution-for-apply-transform-over-each-element-in-array-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- The map function is a higher-order function commonly used in functional programming.\\n- It takes an array and a transformation function as input and applies the function to each element of the array, returning a new array with the transformed values\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- The map function takes two parameters: arr (the input array) and fn (the transformation function).\\n- It initializes a loop variable i to 0 and iterates over the elements of the arr array.\\n- In each iteration, it calls the transformation function fn with two arguments: the current element of arr and the index i.\\n- It assigns the result of fn to the corresponding element in arr to update the value in-place.\\n- After iterating through all the elements, the modified arr array is returned.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this solution is O(n), where n is the length of the input array arr.\\nThe map function iterates through the entire array, visiting each element once.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(1) because the map function performs the transformation in-place, modifying the original arr array without using any additional memory.\\nThe returned array is the same as the input array.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for (let i = 0; i < arr.length; ++i) {\\n        arr[i] = fn(arr[i], i);\\n    }\\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for (let i = 0; i < arr.length; ++i) {\\n        arr[i] = fn(arr[i], i);\\n    }\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498484,
                "title": "explained-easy-javascript-daily-challenge",
                "content": "# Intuition\\nChange values of arr array according to given function. \\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1) I just need to pass a number and `i` in `fn` function.\\n2) Whatever it will return I will store in arr, (Modification in main array is not a good habit).\\n3) finally return `arr`.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n``` JavaScript []\\nvar map = function(arr, fn) {\\n    var n = arr.length;\\n    for(var i = 0; i < n; i++){\\n        arr[i] = fn(arr[i], i);\\n    }\\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "``` JavaScript []\\nvar map = function(arr, fn) {\\n    var n = arr.length;\\n    for(var i = 0; i < n; i++){\\n        arr[i] = fn(arr[i], i);\\n    }\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498416,
                "title": "day-4-js-challange",
                "content": "\\n# Complexity\\n- Time complexity:O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const toReturnArr = new Array(arr.length);\\n    for( let i=0;i<arr.length; ++i){\\n        toReturnArr[i] = fn(arr[i],i)\\n    }\\n    return toReturnArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const toReturnArr = new Array(arr.length);\\n    for( let i=0;i<arr.length; ++i){\\n        toReturnArr[i] = fn(arr[i],i)\\n    }\\n    return toReturnArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3416341,
                "title": "two-solutions",
                "content": "With built-in function:\\n```\\nvar map = function(arr, fn) {\\n   return arr.map(fn);\\n};\\n```\\nWithout built-in function:\\n```\\nvar map = function(arr, fn) {\\n    let ans = [];\\n    arr.forEach((x,i) => {\\n        ans.push(fn(x,i));\\n    });\\n    return ans;\\n    }\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nvar map = function(arr, fn) {\\n   return arr.map(fn);\\n};\\n```\n```\\nvar map = function(arr, fn) {\\n    let ans = [];\\n    arr.forEach((x,i) => {\\n        ans.push(fn(x,i));\\n    });\\n    return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025401,
                "title": "accepted-fast-javascript-code-beats-80",
                "content": "# Complexity\\n- Time complexity : $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity : $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# JavaScript : \\n -- | Details | --\\n--- | --- | ---:\\n**Runtime** | **44** *ms* | *Beats* **92%**\\n**Memory** | **40** *MB* | *Beats* **98%**\\n```\\nvar map = function(arr, fn) {\\n    let newArr = [];\\n    for(let i=0; i<arr.length; i++)\\n        newArr[i] = fn(arr[i], i);\\n    return newArr;\\n};\\n```\\n## UPVOTE : |\\n![waiting-tom-and-jerry.gif](https://assets.leetcode.com/users/images/4f0cc754-71e1-4cfc-816b-36a94c20b17f_1678366238.9546802.gif)",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\nvar map = function(arr, fn) {\\n    let newArr = [];\\n    for(let i=0; i<arr.length; i++)\\n        newArr[i] = fn(arr[i], i);\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3841600,
                "title": "easy-javascript-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const res = [];\\n    for(const i in arr) {\\n        res.push(fn(arr[i], Number(i)));\\n    }\\n    return res;\\n    // return arr.map(fn);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const res = [];\\n    for(const i in arr) {\\n        res.push(fn(arr[i], Number(i)));\\n    }\\n    return res;\\n    // return arr.map(fn);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3829248,
                "title": "javascript",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const ans=[];\\n    for(let i=0;i<arr.length;i++)\\n    ans[i]=fn(arr[i],i);\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const ans=[];\\n    for(let i=0;i<arr.length;i++)\\n    ans[i]=fn(arr[i],i);\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3829179,
                "title": "javascript",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const ans=[];\\n    for(let i=0;i<arr.length;i++)\\n    ans[i]=fn(arr[i],i);\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const ans=[];\\n    for(let i=0;i<arr.length;i++)\\n    ans[i]=fn(arr[i],i);\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3502295,
                "title": "day-4-30-days-js-challenge-best-editorial-everything-explained-easy-to-understand",
                "content": "# Intuition\\nThe map function allows us to transform each element of an array by applying a specific operation or function to it. It provides a convenient way to iterate over an array and generate a new array with the modified values.\\n\\n# Approach\\nThe function initializes an empty array called $$result$$ to store the transformed elements.\\nIt iterates through each element of the input array $$arr$$ using a for loop.\\nFor each element, it calls the provided callback function $$fn$$ and passes the current element $$(arr[i])$$ and its index $$(i)$$ as arguments.\\nThe return value of the callback function is then appended to the $$result$$ array using the $$push$$ method.\\nAfter iterating through all the elements, the $$result$$ array is returned.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the $$map$$ function depends on the length of the input array, $$arr$$. Since the function iterates through each element of the array once, the time complexity is $$O(n)$$, where $$n$$ is the number of elements in $$arr$$.\\n\\n- Space complexity:\\nThe space complexity of the $$map$$ function is determined by the additional space used to store the transformed elements in the result array. The size of the result array is equal to the size of the input array arr. Therefore, the space complexity is $$O(n)$$, where $$n$$ is the number of elements in $$arr$$.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n \\nvar map = function(arr, fn) {\\n    //creating result array\\n    const result = [];\\n    //iterating over array and modifying values by callback function\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result;\\n};\\n```\\nPlease Upvote if u liked the solution...\\n![abc.png](https://assets.leetcode.com/users/images/43bbea09-6bff-4075-aee8-98e04141ceac_1683576787.6413393.png)\\n\\nThank You So Much...",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n \\nvar map = function(arr, fn) {\\n    //creating result array\\n    const result = [];\\n    //iterating over array and modifying values by callback function\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3501569,
                "title": "day-04-op-solution-with-easy-approach",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  const result = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    result.push(fn(arr[i], i));\\n  }\\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  const result = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    result.push(fn(arr[i], i));\\n  }\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3501389,
                "title": "the-easy-way",
                "content": "\\n```\\nvar map = function(arr, fn) {\\n    const n = arr.length;\\n    for (let i=0; i<n; i++) arr[i] = fn(arr[i], i);\\n    return arr;\\n};\\n```\\n\\n```\\nvar map = function(arr, fn) {\\n    const n = arr.length;\\n    var returnedArray = [];\\n    for (let i=0; i<n; i++) returnedArray.push(fn(arr[i], i));\\n    return returnedArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar map = function(arr, fn) {\\n    const n = arr.length;\\n    for (let i=0; i<n; i++) arr[i] = fn(arr[i], i);\\n    return arr;\\n};\\n```\n```\\nvar map = function(arr, fn) {\\n    const n = arr.length;\\n    var returnedArray = [];\\n    for (let i=0; i<n; i++) returnedArray.push(fn(arr[i], i));\\n    return returnedArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3500840,
                "title": "one-line-solution-using-map-function",
                "content": "It\\'s the **One line Solution** but it\\'s not the fastest one.\\n# Approach\\n\\nThe ```fn``` funtion given that takes the any number and increment it by 1.\\n\\n``` Higher order Function ``` Those function, in which we can pass the function as a prameter, called Higher order function.\\n\\nAnd we know that by **Higher order function**  Map, we can apply function for each value and modify them accordingly, so I did exactly like that.\\n\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn);\\n};\\n```\\n\\nThis is the fastest solution using **Higher Order Function** Filter\\n\\n```\\nvar map = function(arr, fn) {\\n    return arr.reduce((acc, it, idx) => {\\n        return [...acc, fn(it, idx)]\\n    }, [])\\n};\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```fn```\n``` Higher order Function ```\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn);\\n};\\n```\n```\\nvar map = function(arr, fn) {\\n    return arr.reduce((acc, it, idx) => {\\n        return [...acc, fn(it, idx)]\\n    }, [])\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3499075,
                "title": "very-easy-and-simple-solution-with-for-loop-0-o",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for(let i = 0; i < arr.length; i++) {\\n        arr[i] = fn(arr[i],i)\\n    }\\n    return arr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for(let i = 0; i < arr.length; i++) {\\n        arr[i] = fn(arr[i],i)\\n    }\\n    return arr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498225,
                "title": "day-4-easy-solution-with-complete-explanation",
                "content": "Do upvote if you liked this solution. \\uD83D\\uDC4D\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe\\'ve been given a mapping function fn and an array arr over which we have to apply the transformation to each element and return.\\n\\nSo some things have been made clear.\\n\\n-> We need to apply transformation to each element. i.e a **for** loop will be needed to traverse the elements.\\n\\n-> We need to return an array. So, that is why I\\'ve created the result array, for storing the result.\\n\\nAnd if you\\'re wondering what a **mapping function** is, simply think of it as it being an ordinary function. Like take the case of square() where you pass a value and get the square of that value. Now, the mapping function could be anything, but I hope you\\'ve got the gist of it.\\n\\nJust give the question a read word by word and you\\'ll see that the solution lies there itself. \\uD83D\\uDE09\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3443653,
                "title": "simple-solution-runtime-97-31-memory-94-46",
                "content": "# Intuition\\n\\n# Approach\\nTo be more efficient we cache the array length so that we don\\'t calculate it every time for every element.\\nFor efficiency reasons we also don\\'t use forEach (is the slowest method for looping an array)\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArray = [];\\n    const length = arr.length;\\n    for( let i = 0; i < length; i++ ) {\\n        newArray.push(fn(arr[i],i))\\n    }\\n    return newArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArray = [];\\n    const length = arr.length;\\n    for( let i = 0; i < length; i++ ) {\\n        newArray.push(fn(arr[i],i))\\n    }\\n    return newArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3414199,
                "title": "using-map-as-map-return-s-an-array-then-why-to-use-for-loop-and-create-an-extra-array",
                "content": "var map = function(arr, fn) {\\n    const ans = arr.map((data,index) => fn(data,index));\\nreturn ans;\\n\\t// use can aslo do it like\\n\\t//return  arr.map((data,index) => fn(data,index));\\n\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "var map = function(arr, fn) {\\n    const ans = arr.map((data,index) => fn(data,index));\\nreturn ans;\\n\\t// use can aslo do it like\\n\\t//return  arr.map((data,index) => fn(data,index));\\n\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 3903739,
                "title": "easy-solution-beats-85",
                "content": "\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result=[];\\n    for(let i =0;i<arr.length;i++){\\n        result.push(fn(arr[i],i));\\n    }\\n    return result;\\n\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result=[];\\n    for(let i =0;i<arr.length;i++){\\n        result.push(fn(arr[i],i));\\n    }\\n    return result;\\n\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3640691,
                "title": "javascrript-easy-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result=[]\\n    for(i=0;i<arr.length;i++){\\n        let a= fn(arr[i],i)\\n        result.push(a)\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result=[]\\n    for(i=0;i<arr.length;i++){\\n        let a= fn(arr[i],i)\\n        result.push(a)\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3549912,
                "title": "ts-in-place-parsing-59ms-42-6mb",
                "content": "Pretty plain problem that we might be tempted to solve in linear space, but there is not really anything forbidding us for working in place.\\n\\nWe will then replace each value `arr[i]` with the result of calling the provided callback function `fn` with it, right before `return`ing the newly repopulated `arr`.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```ts\\nconst map = (arr, fn) => {\\n    for (let i = 0, len = arr.length; i < len; i++) arr[i] = fn(arr[i], i);\\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```ts\\nconst map = (arr, fn) => {\\n    for (let i = 0, len = arr.length; i < len; i++) arr[i] = fn(arr[i], i);\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3503030,
                "title": "javascript-day-3-of-30-days-challange",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n    let newArr = [];\\n\\n    for(let i=0; i<arr.length; i++){\\n        let val = fn(arr[i],i);\\n        newArr.push(val);\\n    }\\n\\n    return newArr; \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n    let newArr = [];\\n\\n    for(let i=0; i<arr.length; i++){\\n        let val = fn(arr[i],i);\\n        newArr.push(val);\\n    }\\n\\n    return newArr; \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3501615,
                "title": "beginner-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  const result = [];\\n  for (let i = 0; i < arr.length; i++) result.push(fn(arr[i], i));\\n  return result; \\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  const result = [];\\n  for (let i = 0; i < arr.length; i++) result.push(fn(arr[i], i));\\n  return result; \\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3501450,
                "title": "javascript-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n var arra=[];\\n    for(i=0;i<arr.length;i++)\\n    {\\n        arra[i]=fn(arr[i],i);\\n    }\\n    return arra;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n var arra=[];\\n    for(i=0;i<arr.length;i++)\\n    {\\n        arra[i]=fn(arr[i],i);\\n    }\\n    return arra;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3500658,
                "title": "day-4-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for (let i = 0; i < arr.length; ++i) {\\n        arr[i] = fn(arr[i], i);\\n    }\\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for (let i = 0; i < arr.length; ++i) {\\n        arr[i] = fn(arr[i], i);\\n    }\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3500640,
                "title": "const-map-arr-fn-arr-map-fn",
                "content": "We can use the `map()` method to create a new array with the results of calling the `fn` function on each element of the arr array. The `map()` method returns the new array, so we can simply return the result of calling `arr.map(fn)` without needing to modify the original `arr` array.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst map = (arr, fn) => arr.map(fn);\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst map = (arr, fn) => arr.map(fn);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3500148,
                "title": "easy-approach",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    var a=[];\\n    for(var i=0; i<arr.length; i++){\\n        a.push(fn(arr[i], i));\\n    }\\n    return a;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    var a=[];\\n    for(var i=0; i<arr.length; i++){\\n        a.push(fn(arr[i], i));\\n    }\\n    return a;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3499303,
                "title": "day-4-javascript-challenge",
                "content": "# Intuition\\n1. We need to traverse the array.\\n2. We have to return the new value for each element after transforming it through the function fn.\\n\\n# Approach\\n1. In the description it is mentioned that we should not use the in built map function. So we now need to initialize a new array to store the mapped value. \\n2. Using for loop we traverse the array and pass the element and index to the function fn.\\n3. We store the new value in the new array and then after end of the loop we return it.\\n\\n# Complexity\\n- Time complexity:\\nO(n) as we are traversing the array.\\n\\n- Space complexity:\\nO(n) for the new mapped array.\\n\\n# Javascript Code\\n```\\nvar map = function(arr, fn) {\\n     const ans=[]\\n     for(var i=0;i<arr.length; i++){\\n         ans.push(fn(arr[i],i))\\n     }\\n     return ans;\\n};\\n\\n```\\n# Typescript Code\\n\\n```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n     const ans :number[]=[];\\n     for(var i=0;i<arr.length;i++){\\n         ans.push(fn(arr[i],i))\\n     }\\n\\n     return ans\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Array"
                ],
                "code": "```\\nvar map = function(arr, fn) {\\n     const ans=[]\\n     for(var i=0;i<arr.length; i++){\\n         ans.push(fn(arr[i],i))\\n     }\\n     return ans;\\n};\\n\\n```\n```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n     const ans :number[]=[];\\n     for(var i=0;i<arr.length;i++){\\n         ans.push(fn(arr[i],i))\\n     }\\n\\n     return ans\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3499168,
                "title": "day-4-javascript-challange",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo solve the problem at hand, it is necessary to apply a mapping function to every element in the input array and create a new array with the transformed elements. This can be accomplished by iterating through the input array and using the mapping function on each element, subsequently adding the resulting transformed element to a fresh array.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo obtain an array with transformed elements, you can begin by creating an empty array to store the results. Then, you can use a loop to iterate through each element of the input array. For each element, apply the mapping function, providing the current element and its index as arguments. Once you have the transformed element, add it to the empty array. Finally, return the resulting transformed array.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTC=O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSC=O(1)\\n\\n# Code in javaScript\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newarr=[];\\n    for(let i=0; i<arr.length; i++){\\n        let num=fn(arr[i], i);\\n        newarr.push(num);\\n    }\\n    return newarr\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Ordered Map"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newarr=[];\\n    for(let i=0; i<arr.length; i++){\\n        let num=fn(arr[i], i);\\n        newarr.push(num);\\n    }\\n    return newarr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3499071,
                "title": "easy-to-understand-js-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for(let i=0;i<arr.length;i++){\\n        arr[i]=fn(arr[i],i);\\n    }\\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for(let i=0;i<arr.length;i++){\\n        arr[i]=fn(arr[i],i);\\n    }\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498886,
                "title": "easy-2-line-solution-javascript-typescript-callback-function-o-n-tc",
                "content": "# Intuition\\nWe have to transform every element of the array according the function which is passed as a second argument in map function. (Function which is passed as argument for another function known as callback function).\\n\\n# Approach\\nWe will give every element of the array to the callback function, callback function, which give us the tranform element.\\n\\n# Complexity\\n- Time complexity:\\nWe have to give every element of the array to the callback function, that\\'s why TC $$O(n)$$\\n- Space complexity:\\nWe are not creating any extra thing , then Auxiliary Space Complexity will be $$O(1)$$\\n\\n# Code\\nJavascript\\n```javascript\\nvar map = function(arr, fn) {\\n    for(let i=0;i<arr.length;i++) arr[i] = fn(arr[i],i);\\n    return arr;\\n};\\n```\\n\\nTypescript\\n```typescript\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    for(let i=0;i<arr.length;i++) arr[i] = fn(arr[i],i);\\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```javascript\\nvar map = function(arr, fn) {\\n    for(let i=0;i<arr.length;i++) arr[i] = fn(arr[i],i);\\n    return arr;\\n};\\n```\n```typescript\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    for(let i=0;i<arr.length;i++) arr[i] = fn(arr[i],i);\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498819,
                "title": "js-challenge-day4-use-reduce-solution-with-explain",
                "content": "# Intuition\\nUse the reduce method to apply the function fn to each element of the array arr, creating a new array with the results in the process.\\n\\n# Approach\\n1. Use the reduce method, which takes an accumulator (in this case, an empty array result) and the current element of the array (item), as well as its index (index).\\n2. Inside the reduce function, apply the function fn to the current element and add the result to the accumulator result.\\n3. Return the accumulator result after iterating through all elements of the array.\\n\\n# Complexity\\n- Time complexity:\\nO(n) - iterate through array only once\\n\\n- Space complexity:\\nO(n) - bcs we create new array same size as initial arr.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n   return arr.reduce((result, item, index) => {\\n        result.push(fn(item, index));\\n        return result;\\n    }, []);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n   return arr.reduce((result, item, index) => {\\n        result.push(fn(item, index));\\n        return result;\\n    }, []);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498220,
                "title": "easy-solution-in-javascript",
                "content": "# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const res = new Array(arr.length);\\n    for(let i=0; i<arr.length; i++) {\\n        res[i] = fn(arr[i], i);\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const res = new Array(arr.length);\\n    for(let i=0; i<arr.length; i++) {\\n        res[i] = fn(arr[i], i);\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3489959,
                "title": "solution-with-simple-for-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n    let resultArray = [];\\n    for(let i = 0 ; i < arr.length ; i ++)\\n    {\\n        let tmpcon = fn(arr[i],i);\\n        resultArray.push(tmpcon);\\n    }\\n    return resultArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n    let resultArray = [];\\n    for(let i = 0 ; i < arr.length ; i ++)\\n    {\\n        let tmpcon = fn(arr[i],i);\\n        resultArray.push(tmpcon);\\n    }\\n    return resultArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3465191,
                "title": "efficient-and-beginner-friendly-solution",
                "content": "# Intuition\\nThis code initializes an empty array newArr, iterates over the elements of arr, and applies the fn function to each element while accumulating the transformed values in newArr. Finally, it returns the newArr array.\\n\\n# Complexity\\n- Time complexity: O(N)\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    newArr = []\\n    for(let i = 0; i < arr.length; i++) {\\n        newArr.push(fn(arr[i], i))\\n    }\\n    return newArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    newArr = []\\n    for(let i = 0; i < arr.length; i++) {\\n        newArr.push(fn(arr[i], i))\\n    }\\n    return newArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3453753,
                "title": "2635-apply-transform-over-each-element-in-array-javascript-accepted",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let output=[];\\n    for(let i=0;i<arr.length;i++){\\n        output.push(fn(arr[i], i))\\n    }\\n    return output\\n};\\n```\\nif u want any explanation ,please comment below , **HAPPY to HELP YOU!!**\\nif u Like\\uD83E\\uDD70 Please **UPVOTE** !!\\nThank You \\nHappy Coding!\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let output=[];\\n    for(let i=0;i<arr.length;i++){\\n        output.push(fn(arr[i], i))\\n    }\\n    return output\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3418067,
                "title": "easy-simple-javascript-solution",
                "content": "\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3417272,
                "title": "2-methods-simple-beginner-approach-plus-1-liner",
                "content": "# Method 1\\nFor Loop\\n\\n# Intuition\\nWe run a for loop on the array. Pass the ith element of the array to the function and replaces its new value inplace.\\n\\n# Complexity\\n- Time complexity:\\nSince we are traversing the entire array.\\nO(N)\\n\\n- Space complexity:\\nSince no extra space is used. We just update the new value with the old value of the array\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {    \\n    for(let i=0;i<arr.length;i++){\\n        arr[i]= fn(arr[i],i);\\n    }\\n    return arr;\\n};\\n```\\n\\n\\n\\n# Method 2 (1 Liner)\\nUsing Map\\n\\n# Intuition\\nmap() creates a new array from calling a function for every array element.\\n\\n# Complexity\\n- Time complexity:\\nSince we are traversing the entire array.\\nO(N)\\n\\n- Space complexity:\\nBecause the array size doesn\\'t increase.\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {    \\n    var map = function(arr, fn) {\\n        return arr.map(fn);\\n};\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Iterator",
                    "Hash Function"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {    \\n    for(let i=0;i<arr.length;i++){\\n        arr[i]= fn(arr[i],i);\\n    }\\n    return arr;\\n};\\n```\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {    \\n    var map = function(arr, fn) {\\n        return arr.map(fn);\\n};\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3414523,
                "title": "js-code",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArr = []\\n    for (let i = 0; i <= arr.length; i++) {\\n        newArr.push(fn(arr[i], i))\\n    }\\n    return newArr.splice(0, newArr.length - 1)\\n};\\n```\\n![image.png](https://assets.leetcode.com/users/images/f1e3ad79-dad9-40b4-ba84-8deec633e0e7_1681430694.145542.png)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArr = []\\n    for (let i = 0; i <= arr.length; i++) {\\n        newArr.push(fn(arr[i], i))\\n    }\\n    return newArr.splice(0, newArr.length - 1)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3408442,
                "title": "simplest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let b=[];\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        const x=fn(arr[i],i);\\n        \\n            b.push(x);\\n        \\n    }\\n\\n    return b;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let b=[];\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        const x=fn(arr[i],i);\\n        \\n            b.push(x);\\n        \\n    }\\n\\n    return b;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4101159,
                "title": "easy-solution-using-for-of-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    var transformArr = [];\\n    var i =0;\\n    for(const element of arr){\\n        transformArr [i]=fn(arr[i],i)\\n        i++;\\n    }\\n    return transformArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    var transformArr = [];\\n    var i =0;\\n    for(const element of arr){\\n        transformArr [i]=fn(arr[i],i)\\n        i++;\\n    }\\n    return transformArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4100376,
                "title": "apply-transform-over-each-element-in-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n    Iterate correctly through the code, correctly capture the index of the elements. apply the funtion fn push the element in an array\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n Iterate correctly through the code, correctly capture the index of the elements. apply the funtion fn push the element in an array\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArray = []\\n    let index = 0;\\n    for (let element of arr){\\n         newArray.push(fn(element, arr.indexOf(element, index)));\\n         index++;\\n         };\\n    return (newArray);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArray = []\\n    let index = 0;\\n    for (let element of arr){\\n         newArray.push(fn(element, arr.indexOf(element, index)));\\n         index++;\\n         };\\n    return (newArray);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4097850,
                "title": "apply-transform-over-each-element-in-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  const result =[];\\n    for(let i = 0; i < arr.length; i++){\\n    result.push(fn(arr[i], i));\\n     }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  const result =[];\\n    for(let i = 0; i < arr.length; i++){\\n    result.push(fn(arr[i], i));\\n     }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4096452,
                "title": "apply-transform-over-each-element-in-array-javascript-solution-by-bharadwaj",
                "content": "# Approach\\nIterative approach\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nvar map = function(arr, fn) {\\n    let array = [];\\n    for(let i = 0; i < arr.length; i++){\\n        array[i] = fn(arr[i], i);\\n    }\\n    return array;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar map = function(arr, fn) {\\n    let array = [];\\n    for(let i = 0; i < arr.length; i++){\\n        array[i] = fn(arr[i], i);\\n    }\\n    return array;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092350,
                "title": "apply-transform-over-each-element-in-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n\\tconst newArray = [];\\n    for(let i= 0; i < arr.length ; i++){\\n        newArray.push(fn(arr[i], i))\\n    }\\n    return newArray\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n\\tconst newArray = [];\\n    for(let i= 0; i < arr.length ; i++){\\n        newArray.push(fn(arr[i], i))\\n    }\\n    return newArray\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090063,
                "title": "one-line-solution-using-arr-map-function",
                "content": "```\\nvar map = function(arr, fn) {\\n    return arr.map(fn);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar map = function(arr, fn) {\\n    return arr.map(fn);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089055,
                "title": "apply-transform-over-each-element-in-array-using-push",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const x=[];\\n    for (let i=0;i<arr.length;i++){\\n      x.push(fn(arr[i],i));\\n    }\\n    return x;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const x=[];\\n    for (let i=0;i<arr.length;i++){\\n      x.push(fn(arr[i],i));\\n    }\\n    return x;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089045,
                "title": "apply-transform-over-each-element-in-array-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const x=[];\\n    for (let i=0;i<arr.length;i++){\\n      x[i]=fn(arr[i],i);\\n    }\\n    return x;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const x=[];\\n    for (let i=0;i<arr.length;i++){\\n      x[i]=fn(arr[i],i);\\n    }\\n    return x;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087541,
                "title": "neercode",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const ans = [];\\n    for(let i=0; i<arr.length; i++){\\n        ans.push(fn(arr[i], i));\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const ans = [];\\n    for(let i=0; i<arr.length; i++){\\n        ans.push(fn(arr[i], i));\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085789,
                "title": "using-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst map = function(arr, fn) {\\n    let returnedArray=[];\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        if(returnedArray[i]=fn(arr[i],i))\\n        returnedArray.push[i]\\n    }\\n    return returnedArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst map = function(arr, fn) {\\n    let returnedArray=[];\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        if(returnedArray[i]=fn(arr[i],i))\\n        returnedArray.push[i]\\n    }\\n    return returnedArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084981,
                "title": "kindly-check-out-my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  let newArr = [];\\n    for(let i=0; i<arr.length; i++)\\n        newArr[i] = fn(arr[i], i);\\n    return newArr;   \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  let newArr = [];\\n    for(let i=0; i<arr.length; i++)\\n        newArr[i] = fn(arr[i], i);\\n    return newArr;   \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084576,
                "title": "easy-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4081435,
                "title": "beat-93-explain",
                "content": "\\n# Code\\uD83D\\uDD75\\uD83C\\uDFFB\\u200D\\u2642\\uFE0F\\uD83D\\uDD75\\uD83C\\uDFFB\\u200D\\u2642\\uFE0F\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function (arr, fn)\\n{\\n\\n      const ln = arr.length;\\n      for (let i = 0; i < ln; i++)\\n      {\\n            arr[i] = fn(arr[i], i)\\n\\n      }\\n      return arr;\\n};\\n\\n```\\n\\n\\n# can you explain mapping function in js ?\\n\\nIn JavaScript, a mapping function is commonly associated with the `map()` method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\n```javascript\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\n```\\n\\nIn this example:\\n\\n1. We have an array called `numbers` containing five elements.\\n2. We use the `map()` method on the `numbers` array and pass in a function as an argument.\\n3. The function takes each element `x` from the `numbers` array and returns `x * x`, which squares each element.\\n4. The `map()` method applies this function to each element of the array and creates a new array called `squaredNumbers` with the squared values.\\n\\nYou can also use arrow functions for more concise code:\\n\\n```javascript\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\n```\\n\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript.\\n\\n \\uD83E\\uDD0D \\uD83E\\uDD0D pls upvote \\uD83E\\uDD0D \\uD83E\\uDD0D",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function (arr, fn)\\n{\\n\\n      const ln = arr.length;\\n      for (let i = 0; i < ln; i++)\\n      {\\n            arr[i] = fn(arr[i], i)\\n\\n      }\\n      return arr;\\n};\\n\\n```\n```javascript\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\n```\n```javascript\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4078935,
                "title": "very-simple-and-clean-javascript-typescript-solution",
                "content": "\\n```\\nconst map = (arr, fn) => {\\n    const result = [];\\n\\n    arr.forEach((el, idx) => result.push(fn(el, idx)));\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Array"
                ],
                "code": "```\\nconst map = (arr, fn) => {\\n    const result = [];\\n\\n    arr.forEach((el, idx) => result.push(fn(el, idx)));\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077477,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArray = [];\\n    arr.forEach((item, i) => {\\n        newArray.push(fn(item, i))\\n    });\\n    return newArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArray = [];\\n    arr.forEach((item, i) => {\\n        newArray.push(fn(item, i))\\n    });\\n    return newArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076834,
                "title": "one-line-js-solution",
                "content": "# Code\\n```\\nconst map = (arr, fn) => arr.map((val , index) => fn(val , index))\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst map = (arr, fn) => arr.map((val , index) => fn(val , index))\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4075504,
                "title": "return-an-array-with-new-item-without-map-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function (arr, fn) {\\n    const result = []\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i))\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function (arr, fn) {\\n    const result = []\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i))\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072487,
                "title": "2635-apply-transform-over-each-element-in-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst arr = [1,2,3];\\nconst plusone = (n) => ++n;\\nvar map = (arr, fn) => arr.map(fn);\\n\\nconst newArray = map(arr, plusone);\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst arr = [1,2,3];\\nconst plusone = (n) => ++n;\\nvar map = (arr, fn) => arr.map(fn);\\n\\nconst newArray = map(arr, plusone);\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069925,
                "title": "easy-javascript-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    arr.forEach((item,i)=>{\\n        arr[i] = fn(item, i)\\n    })\\n    return arr\\n};\\n```\\n# VOTE UP! PLS\\uD83E\\uDD7A\\n![Vote up.jpg](https://assets.leetcode.com/users/images/707dc1d7-32e4-465e-8b6c-0176a7f1bc91_1695237710.4489882.jpeg)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    arr.forEach((item,i)=>{\\n        arr[i] = fn(item, i)\\n    })\\n    return arr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067853,
                "title": "beats-85-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066815,
                "title": "custom-map-function",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066792,
                "title": "apply-transform-over-each-element-in-array-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArr = [];\\n        for(let i = 0; i < arr.length; i++){\\n            newArr.push(fn(arr[i],i));\\n        \\n    }\\n        return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArr = [];\\n        for(let i = 0; i < arr.length; i++){\\n            newArr.push(fn(arr[i],i));\\n        \\n    }\\n        return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066005,
                "title": "test-01",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n \\nconst arr1 = [1, 2, 3];\\nconst fn1 = function plusone(n) {\\n  return n + 1;\\n};\\nvar map = function(arr, fn) {\\n  const result = [];\\n  const length = arr.length;\\n  for (let i = 0; i < length; i++) {\\n    // result[i] = fn(arr[i]);\\n    result.push(fn(arr[i], i));\\n  }\\n  return result;  \\n};\\n\\nconst result1 = map(arr1, fn1);\\nconsole.log(result1); \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n \\nconst arr1 = [1, 2, 3];\\nconst fn1 = function plusone(n) {\\n  return n + 1;\\n};\\nvar map = function(arr, fn) {\\n  const result = [];\\n  const length = arr.length;\\n  for (let i = 0; i < length; i++) {\\n    // result[i] = fn(arr[i]);\\n    result.push(fn(arr[i], i));\\n  }\\n  return result;  \\n};\\n\\nconst result1 = map(arr1, fn1);\\nconsole.log(result1); \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065828,
                "title": "simple-javascript-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result = [];\\n    for(let i = 0; i < arr.length; i++)\\n    {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result = [];\\n    for(let i = 0; i < arr.length; i++)\\n    {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065551,
                "title": "simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nRead Question , know use of \".push()\" , and done.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  var mappedArray = [];\\n  for (var i = 0; i < arr.length; i++) {\\n    mappedArray.push(fn(arr[i], i));\\n  }\\n  return mappedArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  var mappedArray = [];\\n  for (var i = 0; i < arr.length; i++) {\\n    mappedArray.push(fn(arr[i], i));\\n  }\\n  return mappedArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4063510,
                "title": "functional-array-mapping",
                "content": "# Intuition\\nMy initial thought was to iterate through the array and transform each element using the callback function. This would allow me to map the array from the original values to new values.\\n\\n# Approach\\nI decided to create a new array to hold the mapped values without mutating the original. I loop through the original array using a standard for loop by index. For each element, I call the callback function, passing in the value, index, and original array as arguments. Whatever the callback returns gets pushed into the new array. After looping through all elements, I return the new mapped array.\\n\\n\\n# Complexity\\n- Time complexity: O(N)\\n\\nThe loop iterates through the array once fully, so grows linearly with N elements.\\n\\n- Space complexity: O(N)\\n\\nA new array is created to hold the mapped values. In the worst case the mapped array could be the same size as the input array.\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} callback\\n * @return {number[]}\\n */\\n\\n\\nfunction map(arr, callback) {\\n\\n  // Create a new array to hold result\\n  const result = [];\\n\\n  // Loop through each element\\n  for (let i = 0; i < arr.length; i++) {\\n    \\n    // Call callback and store result\\n    const mappedValue = callback(arr[i], i, arr);\\n\\n    // Add mapped value to new array\\n    result.push(mappedValue);\\n  }\\n\\n  return result;\\n}\\n\\n```\\n# Usage\\n```\\nconst numbers = [1, 2, 3];\\nconst doubled = map(numbers, (n) => n * 2); \\n\\nconsole.log(doubled); // [2, 4, 6] \\nconsole.log(numbers); // [1, 2, 3] (not mutated)\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} callback\\n * @return {number[]}\\n */\\n\\n\\nfunction map(arr, callback) {\\n\\n  // Create a new array to hold result\\n  const result = [];\\n\\n  // Loop through each element\\n  for (let i = 0; i < arr.length; i++) {\\n    \\n    // Call callback and store result\\n    const mappedValue = callback(arr[i], i, arr);\\n\\n    // Add mapped value to new array\\n    result.push(mappedValue);\\n  }\\n\\n  return result;\\n}\\n\\n```\n```\\nconst numbers = [1, 2, 3];\\nconst doubled = map(numbers, (n) => n * 2); \\n\\nconsole.log(doubled); // [2, 4, 6] \\nconsole.log(numbers); // [1, 2, 3] (not mutated)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061719,
                "title": "javascript-1-line-map",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map((el,i)=> fn(el,i));\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map((el,i)=> fn(el,i));\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4060479,
                "title": "one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n    return arr.map(fn);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n    return arr.map(fn);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4056729,
                "title": "first-post",
                "content": "# Approach\\nTo beat more users i used arrow functions intead of function declaration and im not sure did it affect but i deleted consts for results\\n\\n# Complexity\\n- Time complexity:\\n44ms\\nBeats 91.37% of users with JavaScript\\n\\n- Space complexity:\\n41.31MB\\nBeats 93.50% of users with JavaScript\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst map = (arr, fn) => {\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++){\\n        result.push(fn(arr[i], i))\\n    }\\n    return result\\n};\\n\\nconst Ex1 = [1,2,3]\\nconst plusOne = (n) => n+1\\n\\n\\nconst Ex2 = [1,2,3]\\nconst plusI = (n, i) => n+i\\n\\n\\nconst Ex3 = [1,2,3]\\nconst constant = (n, constant) => constant\\n\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst map = (arr, fn) => {\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++){\\n        result.push(fn(arr[i], i))\\n    }\\n    return result\\n};\\n\\nconst Ex1 = [1,2,3]\\nconst plusOne = (n) => n+1\\n\\n\\nconst Ex2 = [1,2,3]\\nconst plusI = (n, i) => n+i\\n\\n\\nconst Ex3 = [1,2,3]\\nconst constant = (n, constant) => constant\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4051540,
                "title": "easy-approach",
                "content": "# Intuition\\nThe problem requires mapping each element of the input array to a new value using a provided mapping function while also considering the index of each element.\\n\\n# Approach\\n1. Initialize an empty array mappedArray to store the transformed elements.\\n2. Iterate through the input array arr using a for loop.\\n3. For each element at index i, apply the mapping function fn(arr[i], i), passing both the element and its index as arguments.\\n4. Store the result of the mapping function in the corresponding position of the mappedArray.\\n5. Return the mappedArray containing the transformed elements.\\n# Complexity\\n- Time complexity:\\nThe time complexity of this solution is O(n), where n is the length of the input array arr. This is because we iterate through the array once, and for each element, we perform a constant amount of work by calling the mapping function and storing the result.\\n- Space Complexity:\\nThe space complexity is also O(n) because we create a new array mappedArray of the same length as the input array arr to store the transformed elements. The space required for mappedArray grows linearly with the size of the input array.\\n\\n# Code\\n```\\nfunction map(arr, fn) {\\n    const mappedArray = [];\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        mappedArray[i] = fn(arr[i], i);\\n    }\\n\\n    return mappedArray;\\n}\\n\\nconst arr = [1, 2, 3];\\n\\nfunction plusOne(x) {\\n    return x  + 1;\\n}\\n\\nconst result = map(arr, plusOne);\\nconsole.log(result); \\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction map(arr, fn) {\\n    const mappedArray = [];\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        mappedArray[i] = fn(arr[i], i);\\n    }\\n\\n    return mappedArray;\\n}\\n\\nconst arr = [1, 2, 3];\\n\\nfunction plusOne(x) {\\n    return x  + 1;\\n}\\n\\nconst result = map(arr, plusOne);\\nconsole.log(result); \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048648,
                "title": "2635-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n   let newArray = [];\\n    for (let i = 0; i < arr.length; i++) {\\n       newArray.push(fn(arr[i], i));\\n    }\\n        return newArray;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n   let newArray = [];\\n    for (let i = 0; i < arr.length; i++) {\\n       newArray.push(fn(arr[i], i));\\n    }\\n        return newArray;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4045058,
                "title": "apply-transform-without-inbuilt-map-function",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Declare a new array for storing tranformed array values\\n2. Run a for loop for iterating over first arr\\n3. Lastly append the new values from function to new array\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n\\nvar map = function(arr, fn) {\\n    let newArr = []\\n\\n    for(let i = 0; i < arr.length; i++) {\\n        newArr.push(fn(arr[i], i))\\n    }\\n    return newArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n\\nvar map = function(arr, fn) {\\n    let newArr = []\\n\\n    for(let i = 0; i < arr.length; i++) {\\n        newArr.push(fn(arr[i], i))\\n    }\\n    return newArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043455,
                "title": "apply-transform-over-each-element-in-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n\\nvar map = function(arr, fn) {\\n    const result = new Array(arr.length);\\n\\n    for (const i in arr){\\n        result[i] = fn(arr[i], Number(i));\\n    }\\n\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n\\nvar map = function(arr, fn) {\\n    const result = new Array(arr.length);\\n\\n    for (const i in arr){\\n        result[i] = fn(arr[i], Number(i));\\n    }\\n\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4042776,
                "title": "just-take-it-easy-it-was-so-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n    for(let i=0;i<arr.length;i++){\\n        arr[i]=fn(arr[i],i)\\n    }\\n    return arr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n    for(let i=0;i<arr.length;i++){\\n        arr[i]=fn(arr[i],i)\\n    }\\n    return arr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4039783,
                "title": "2635",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n     let result = [];\\n    arr.forEach((x, i) => {\\n        result.push(fn(x, i));\\n    });\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n     let result = [];\\n    arr.forEach((x, i) => {\\n        result.push(fn(x, i));\\n    });\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4039621,
                "title": "solved",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    var mappedArray = []\\n    var index = 0\\n    for(let i=0;i<arr.length;i++) {\\n        mappedArray[index] = fn(arr[i], i)\\n        index++\\n    }\\n    return mappedArray\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    var mappedArray = []\\n    var index = 0\\n    for(let i=0;i<arr.length;i++) {\\n        mappedArray[index] = fn(arr[i], i)\\n        index++\\n    }\\n    return mappedArray\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4037459,
                "title": "javascript-simple-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for(let idx = 0; idx < arr.length; idx++){\\n        arr[idx] = fn(arr[idx], idx)\\n    }\\n    return arr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for(let idx = 0; idx < arr.length; idx++){\\n        arr[idx] = fn(arr[idx], idx)\\n    }\\n    return arr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4036920,
                "title": "best-and-speed-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4035987,
                "title": "using-simple-brute-force-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let ar=[];\\n    for(let i=0;i<arr.length;i++){\\n        ar[i]=fn(arr[i],i);\\n    }return ar;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let ar=[];\\n    for(let i=0;i<arr.length;i++){\\n        ar[i]=fn(arr[i],i);\\n    }return ar;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034426,
                "title": "apply-the-given-function-on-each-element-of-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    var a=[];\\n    for(var i=0 ;i<arr.length ;i++){\\n        var x = fn(arr[i],i);\\n        a.push(x);\\n    }\\n    return a;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    var a=[];\\n    for(var i=0 ;i<arr.length ;i++){\\n        var x = fn(arr[i],i);\\n        a.push(x);\\n    }\\n    return a;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4033900,
                "title": "apply-transform-over-each-element-in-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n  let length=arr.length\\n  for(let i=0;i<length;i++){\\n      arr[i]=fn(arr[i],i)\\n  }\\n  return arr\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n  let length=arr.length\\n  for(let i=0;i<length;i++){\\n      arr[i]=fn(arr[i],i)\\n  }\\n  return arr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4031227,
                "title": "runtime-details-51ms-beats-80-73-of-users-with-typescript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    for(let j=0;j<arr.length;j++)arr[j]=fn(arr[j],j);\\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    for(let j=0;j<arr.length;j++)arr[j]=fn(arr[j],j);\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4031113,
                "title": "code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for(let i = 0; i < arr.length; ++i){\\n        arr[i] = fn(arr[i], i);\\n    }\\n    return arr;\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for(let i = 0; i < arr.length; ++i){\\n        arr[i] = fn(arr[i], i);\\n    }\\n    return arr;\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4030074,
                "title": "apply-transform-over-each-element-in-array",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$Big-O = O(n) - Linear$$\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArr = [];\\n    for(let i=0; i<arr.length; i++){\\n        newArr[i] = fn(arr[i], i);\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArr = [];\\n    for(let i=0; i<arr.length; i++){\\n        newArr[i] = fn(arr[i], i);\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4027672,
                "title": "apply-transform-over-each-element-in-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe provided code appears to implement a custom version of the map function in JavaScript. The map function is typically used to transform the elements of an array using a provided function and return a new array with the transformed values.\\n\\nHere are some key points of intuition based on the code:\\n\\nInput Parameters: The map function takes two parameters: an array (arr) and a function (fn). The array is the source of data, and the function represents the transformation logic to be applied to each element of the array.\\n\\nIteration: The function uses a for loop to iterate over each element of the input array arr. The loop maintains an index variable i to keep track of the current position in the array.\\n\\nTransformation: Inside the loop, the function fn is called with two arguments: the current element of the array (arr[i]) and its index (i). This allows the provided fn function to perform some operation on the array element and return the result of the transformation.\\n\\nUpdating the Array: The result of the fn function is then assigned back to arr[i], effectively replacing the original value in the array with the transformed value.\\n\\nReturn Value: After iterating through all elements of the array and applying the transformation, the modified arr is returned. This returned array contains the results of applying the fn function to each element of the original array.\\n\\nIn summary, the code provides a way to apply a custom transformation function to each element of an array and obtain a new array with the transformed values. It\\'s a basic implementation of the map operation commonly used in JavaScript for data transformation tasks.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for (let i=0; i<arr.length; ++i){\\n        arr[i] = fn(arr[i], i);\\n    }\\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for (let i=0; i<arr.length; ++i){\\n        arr[i] = fn(arr[i], i);\\n    }\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025783,
                "title": "js-ts-simple-solution-98-beat",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst map = (arr: number[], fn: (n: number, i: number) => number): number[] => {\\n    let transformedArr: number[] = [];\\n    for(let i=0; i <arr.length; i++){\\n        transformedArr.push(fn(arr[i], i));\\n    }\\n    return transformedArr;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nconst map = (arr: number[], fn: (n: number, i: number) => number): number[] => {\\n    let transformedArr: number[] = [];\\n    for(let i=0; i <arr.length; i++){\\n        transformedArr.push(fn(arr[i], i));\\n    }\\n    return transformedArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020456,
                "title": "fast-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let tempArr = []\\n    for(let i = 0; i<arr.length;i++){\\n        tempArr.push(fn(arr[i], i))\\n    }\\n    return tempArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let tempArr = []\\n    for(let i = 0; i<arr.length;i++){\\n        tempArr.push(fn(arr[i], i))\\n    }\\n    return tempArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4014525,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst map = (arr, fn) => {\\n    const result = [];\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst map = (arr, fn) => {\\n    const result = [];\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4012478,
                "title": "apply-transform-in-js",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let i = 0;\\n    let results = [];\\n    arr.forEach(function(x) {\\n        i = arr.indexOf(x);\\n        results.push(fn(x, i));\\n    });\\n    return results;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let i = 0;\\n    let results = [];\\n    arr.forEach(function(x) {\\n        i = arr.indexOf(x);\\n        results.push(fn(x, i));\\n    });\\n    return results;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4008548,
                "title": "one-liner",
                "content": "Easy One Line solution,\\n- As we have seen all other proper solution to this problem using for loops, i thought of adding this unique solution, using [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) method.\\n\\n```\\nreturn Array.from(arr, (a, i) => fn(a, i));\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nreturn Array.from(arr, (a, i) => fn(a, i));\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4008095,
                "title": "easy-typescript-solution",
                "content": "\\n# Code\\n```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let result:number[] = [];\\n    for(let i = 0;i<arr.length;i++){\\n        result.push(fn(arr[i],i));\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let result:number[] = [];\\n    for(let i = 0;i<arr.length;i++){\\n        result.push(fn(arr[i],i));\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4003974,
                "title": "ok",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result=[];\\n    for(var i=0; i<arr.length;i++){\\n        result.push(fn(arr[i],i))\\n    }\\n    return result;\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result=[];\\n    for(var i=0; i<arr.length;i++){\\n        result.push(fn(arr[i],i))\\n    }\\n    return result;\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4003888,
                "title": "use-array-push-to-add-transformed-elements-one-by-one",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArr =[];\\n    for(let i=0;i<arr.length;i++){\\n        newArr.push(fn(arr[i],i));\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArr =[];\\n    for(let i=0;i<arr.length;i++){\\n        newArr.push(fn(arr[i],i));\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4001845,
                "title": "javascript-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let new_arr = [];\\n    for(let i=0; i<arr.length; i++) {\\n        new_arr.push(fn(arr[i], i))\\n    }\\n    return new_arr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let new_arr = [];\\n    for(let i=0; i<arr.length; i++) {\\n        new_arr.push(fn(arr[i], i))\\n    }\\n    return new_arr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3997557,
                "title": "apply-transform-over-each-element-in-array-solution",
                "content": "# Intuition\\nEasy To Solve .\\n\\n# Approach\\nchar by char.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nlet map = function(arr, fn) {\\n    returnedArr=[];\\n    for(let i=0; i< arr.length; i++){\\n        returnedArr[i]= fn(arr[i], i);\\n    }\\n    return returnedArr;\\n};  \\nlet plusOne =function (el){\\n    return el +1;\\n};\\nlet plusI =function (el, ind){\\n    return el + ind;\\n};\\nlet constant =function (){\\n    return 42;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nlet map = function(arr, fn) {\\n    returnedArr=[];\\n    for(let i=0; i< arr.length; i++){\\n        returnedArr[i]= fn(arr[i], i);\\n    }\\n    return returnedArr;\\n};  \\nlet plusOne =function (el){\\n    return el +1;\\n};\\nlet plusI =function (el, ind){\\n    return el + ind;\\n};\\nlet constant =function (){\\n    return 42;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3993471,
                "title": "simple-code-description",
                "content": "# Intuition\\nIn this question the process we need to do with array is also input. Here we have to go through the values in array seperatly and pass thoes values to the function input. Then push the returned value from the function to an array and at the end return the it.\\n\\nAccording to the examples given, the number of parameters that we need to pass for the input function is different. In first two examples it 1 parameter and in the 2nd example need to pass 2 parameters.\\n\\n# Approach\\n- First I create an empty array `arra`.\\n- Used a *for* loop to get all the values in the input array `arr`. \\n  Inside the `for` loop, called the input function `fn` with two parameter. \\n    1. array value - `arr[n]`\\n    2. index of the value - `n`\\n        *When we input `n` as a parameter need to conver it to int before pass it.*\\n- Pushed the returnd value to the array created earlier `arra`.\\n- After `for` loop breaks, returned `arra`.\\n\\n# Complexity\\n- Time complexity:\\n    $$O(n)$$ - n is number of vaules in input array\\n\\n- Space complexity:\\n    $$O(n)$$ - n is number of vaules in input array\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  let arra = [];\\n    for (let n in arr){\\n     arra.push(fn(arr[n],parseInt(n)));\\n    }\\n    return arra;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  let arra = [];\\n    for (let n in arr){\\n     arra.push(fn(arr[n],parseInt(n)));\\n    }\\n    return arra;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3992212,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn){\\nconst arr2 = []\\nfor(let i = 0; i<arr.length; i++){\\narr2.push(fn(arr[i],i));\\n};    \\n return arr2;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn){\\nconst arr2 = []\\nfor(let i = 0; i<arr.length; i++){\\narr2.push(fn(arr[i],i));\\n};    \\n return arr2;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3989522,
                "title": "easy-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result = [];\\n    for (let i = 0; i< arr.length; i++){\\n        result[i] = fn(arr[i],i)\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result = [];\\n    for (let i = 0; i< arr.length; i++){\\n        result[i] = fn(arr[i],i)\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3986624,
                "title": "javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThere are three kind of for statement in javascript. It is `for`, `for...in`, `for...of`.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI tried to implement it with `for...in`. But `i` is not `number` type. So I have to convert the type. And then I think there is no benefit compared to `for`.\\n```\\nvar map = function(arr, fn) {\\n    \\n    for(i in arr) {\\n        arr[i] = fn(arr[i], Number(i));\\n    }\\n\\n    return arr;\\n};\\n```\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n    for(var i = 0; i < arr.length; i++){\\n        arr[i] = fn(arr[i], i);\\n    }\\n    \\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar map = function(arr, fn) {\\n    \\n    for(i in arr) {\\n        arr[i] = fn(arr[i], Number(i));\\n    }\\n\\n    return arr;\\n};\\n```\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n    for(var i = 0; i < arr.length; i++){\\n        arr[i] = fn(arr[i], i);\\n    }\\n    \\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3985405,
                "title": "typescript-solution",
                "content": "```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    const length: number = arr.length;\\n    const newArr: number[] = [];\\n    for(let i = 0; i < length; i++){\\n        const num: number = fn(arr[i], i);\\n        newArr.push(num);\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    const length: number = arr.length;\\n    const newArr: number[] = [];\\n    for(let i = 0; i < length; i++){\\n        const num: number = fn(arr[i], i);\\n        newArr.push(num);\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3985087,
                "title": "apply-transform-over-each-element-in-array-beats-100",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function (arr, fn) {\\n    return arr.map((e, i) => fn(e, i))\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Math"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function (arr, fn) {\\n    return arr.map((e, i) => fn(e, i))\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3981570,
                "title": "beats-97-runtime-41ms-memory-41-mb",
                "content": "# Intuition\\nRather than using for loop we can use high order array methods which are not that much complex and they are beginner friendly\\n\\n# Approach\\nJust use forEach method with required function as second argument \\n\\n# Complexity\\n- Time complexity:\\n\\n- Space complexity:\\n\\n# Code\\n```\\n// const plusOne=function(n){\\n//   return n+1;\\n// }\\n\\nconst plusI=function(n,i){\\n  return n+i;\\n}\\n\\n\\nconst map = function (arr, plusI) {\\n  arr.forEach((val, index) => {\\n    arr[index] =plusI(arr[index],index);\\n  });\\n  return arr;\\n};\\n\\nconst arr = [1, 2, 3];\\n\\nconst newArr = map(arr,plusI);\\n\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// const plusOne=function(n){\\n//   return n+1;\\n// }\\n\\nconst plusI=function(n,i){\\n  return n+i;\\n}\\n\\n\\nconst map = function (arr, plusI) {\\n  arr.forEach((val, index) => {\\n    arr[index] =plusI(arr[index],index);\\n  });\\n  return arr;\\n};\\n\\nconst arr = [1, 2, 3];\\n\\nconst newArr = map(arr,plusI);\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3980199,
                "title": "one-line-with-map",
                "content": "# Intuition\\n\\nMaps every element of array to new array with mapping function fn.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3979434,
                "title": "johnny",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let returnedArray = [];\\n    if(0 <= arr.length || arr.length <= 1000){\\n        arr.forEach((element, index) => {\\n            if(-(10 ** 9) <= element <= 10 ** 9){\\n                let n = fn(element, index);\\n                if(typeof(n) === \\'number\\'){\\n                    returnedArray[index] = n;\\n                }\\n            }\\n        });\\n    }\\n    return returnedArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let returnedArray = [];\\n    if(0 <= arr.length || arr.length <= 1000){\\n        arr.forEach((element, index) => {\\n            if(-(10 ** 9) <= element <= 10 ** 9){\\n                let n = fn(element, index);\\n                if(typeof(n) === \\'number\\'){\\n                    returnedArray[index] = n;\\n                }\\n            }\\n        });\\n    }\\n    return returnedArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3975713,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    \\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3970776,
                "title": "one-line-solution-beats-97",
                "content": "# Code\\n```\\nvar map = (arr, fn) => (\\n   arr.map((n, i)=> fn(n , i))    \\n);\\n\\n```\\n\\n# Approach\\n\\n* The `map` function takes two arguments: an array and a function.\\n* The `map` function iterates over the array and applies the function to each element, returning a new array with the results.\\n* The anonymous function that is passed to the `arr.map()` method takes two arguments: the current element and the index of the current element.\\n* The current element is assigned to the variable `n` and the index of the current element is assigned to the variable `i`.\\n* The anonymous function then calls the `fn` function, passing the current element and the index of the current element as arguments. The result of the `fn` function is then returned.\\n* The `map` function then returns the new array with the results of applying the function to each element of the original array.\\n\\nHere is a more detailed explanation of each step:\\n\\n1. The `var map = (arr, fn) => {` statement defines a function called `map`. The `var` keyword declares a variable, the `map` keyword defines a function, and the `(` and `)` symbols delimit the parameters of the function. The `arr` parameter is the array to iterate over, and the `fn` parameter is the function to apply to each element of the array.\\n2. The `arr.map((n, i) => fn(n, i))` statement calls the `arr.map()` method on the array `arr`. The `arr.map()` method iterates over the array and calls the function for each element. The anonymous function that is passed to the `arr.map()` method takes two arguments: the current element and the index of the current element. The current element is assigned to the variable `n` and the index of the current element is assigned to the variable `i`.\\n3. The anonymous function then calls the `fn` function, passing the current element and the index of the current element as arguments. The result of the `fn` function is then returned.\\n4. The `map` function then returns the new array with the results of applying the function to each element of the original array.\\n\\nI hope this explanation is helpful. Let me know if you have any other questions.\\n\\n\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Breif About Map Function\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n* The `map()` function does not modify the original array. It creates a new array with the results of the function.\\n* The `map()` function can be used with any type of array, including strings, numbers, and objects.\\n* The `map()` function can be used with anonymous functions or named functions.\\n\\n\\n\\n```javascript []\\n// Using arrow function\\n\\n// Syntax\\narr.map((currentvalue, index, array) => yourfunction)\\n\\n// Example\\n\\nconst numbers = [1, 2, 3, 4, 5];\\nconst squares = numbers.map((number) => number * number);\\nconsole.log(squares); // [1, 4, 9, 16, 25]\\n\\n// Using Normal function\\n\\n// Syntax\\narray.map(function(element, index, array), [optional thisArg]);\\n\\n// Example\\n\\nconst numbers = [1, 2, 3, 4, 5];\\nconst squares = numbers.map(function(number) {\\n  return number * number;\\n});\\nconsole.log(squares); // [1, 4, 9, 16, 25]\\n\\n```\\n\\n\\n\\n",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\nvar map = (arr, fn) => (\\n   arr.map((n, i)=> fn(n , i))    \\n);\\n\\n```\n```javascript []\\n// Using arrow function\\n\\n// Syntax\\narr.map((currentvalue, index, array) => yourfunction)\\n\\n// Example\\n\\nconst numbers = [1, 2, 3, 4, 5];\\nconst squares = numbers.map((number) => number * number);\\nconsole.log(squares); // [1, 4, 9, 16, 25]\\n\\n// Using Normal function\\n\\n// Syntax\\narray.map(function(element, index, array), [optional thisArg]);\\n\\n// Example\\n\\nconst numbers = [1, 2, 3, 4, 5];\\nconst squares = numbers.map(function(number) {\\n  return number * number;\\n});\\nconsole.log(squares); // [1, 4, 9, 16, 25]\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3967748,
                "title": "apply-transform-over-each-element-in-array-solution",
                "content": "# Intuition\\nWhen I first approached this problem, I followed the provided hints which suggested creating an empty array to hold the transformed values. Then, by iterating over each element in the input array, applying the given mapping function to each element along with its index, I could construct the new array with the desired transformations.\\n\\n# Approach\\nTo solve this problem, I began by implementing the `map` function which accepts the array `arr` and the mapping function `fn`. I initialized an empty array called `emptyArray` to store the transformed values. I then iterated through each element of `arr` using a standard `for` loop.\\n\\nWithin the loop, for each element, I invoked the mapping function `fn` with the current element and its index as arguments. This allowed me to calculate the transformed value based on the provided function. I stored this calculated value in a variable named `val`.\\n\\nAfter obtaining `val`, I utilized the `push` method to add it to `emptyArray`, effectively building the new array with the transformed values.\\n\\nFinally, after iterating through all elements, I returned the `emptyArray` containing the transformed values.\\n\\n# Complexity\\n- Time complexity: The time complexity of this approach is O(n), where n is the length of the input array. This is because we iterate through each element of the array once to apply the mapping function.\\n- Space complexity: The space complexity is also O(n) because we store the transformed values in the `emptyArray`, which can have a size proportional to the input array.\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let emptyArray = [];\\n    for(let i=0;i<arr.length;i++){\\n      let val = (fn(arr[i],i));\\n      emptyArray.push(val);\\n    }\\n    return emptyArray;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let emptyArray = [];\\n    for(let i=0;i<arr.length;i++){\\n      let val = (fn(arr[i],i));\\n      emptyArray.push(val);\\n    }\\n    return emptyArray;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3964870,
                "title": "easy-solution-but-it-takes-a-lot-of-space-i-don-t-know-why",
                "content": "# Intuition\\nWe need to apply the function to all items of the array, that implies a loop but without using built-in map function, so a for or while loop must be used.\\n\\n# Approach\\nI used the \\'let i of array\\' loop syntax but to use the item\\'s index we need to do it by desctructuring index and value from array.entries() method.\\n\\n# Complexity\\n- Time complexity:\\nTime complexity is O(n) since we iterate through the array lenght\\'s (n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let tempArr = [];\\n\\n    for(let [index,item] of arr.entries()) {\\n        tempArr.push(fn(item, index));\\n    }\\n    return tempArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let tempArr = [];\\n\\n    for(let [index,item] of arr.entries()) {\\n        tempArr.push(fn(item, index));\\n    }\\n    return tempArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3963974,
                "title": "one-line-solution-c",
                "content": "# Code\\n```\\nconst map = (arr: number[], fn: (n: number, i: number) => number) => arr.map(fn)\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nconst map = (arr: number[], fn: (n: number, i: number) => number) => arr.map(fn)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3962350,
                "title": "map-implementation-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n   let returnedArray = [];\\n   arr.forEach((a,index)=>{\\n       returnedArray[index] = fn(a,index);\\n   })\\n    return returnedArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n   let returnedArray = [];\\n   arr.forEach((a,index)=>{\\n       returnedArray[index] = fn(a,index);\\n   })\\n    return returnedArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3957808,
                "title": "js-clear-solution-using-array-foreach",
                "content": "\\n\\n# Code\\n```\\nvar map = function(arr, fn) {\\n    let result = [];\\n    arr.forEach((el, i) => result.push(fn(el, i)))\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar map = function(arr, fn) {\\n    let result = [];\\n    arr.forEach((el, i) => result.push(fn(el, i)))\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3956460,
                "title": "easiest-solution",
                "content": "# Intuition\\nUse map function\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const newx = arr.map(fn)\\n    return newx\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const newx = arr.map(fn)\\n    return newx\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3954356,
                "title": "easy-solution-beat-98-48-on-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map((e, i) => fn(e, i));\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map((e, i) => fn(e, i));\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3951423,
                "title": "javascript",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for (i = 0; i < arr.length; i++) {\\n        arr[i] = fn(arr[i], i)\\n    }\\n    return arr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for (i = 0; i < arr.length; i++) {\\n        arr[i] = fn(arr[i], i)\\n    }\\n    return arr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3950739,
                "title": "one-line-solution",
                "content": "\\n# Code\\n```\\nfunction map(arr, fn) {\\n    return arr.map( (element, index) => fn(element, index) );\\n}\\n\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction map(arr, fn) {\\n    return arr.map( (element, index) => fn(element, index) );\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3949623,
                "title": "a-solution-which-beats-80-of-the-submissions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n) because we traverse the entire array\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n) because we are returning a new transformed array\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let arrLength = arr.length;\\n\\n    const result = new Array(arrLength);\\n    for(let i=0;i<arrLength;i++){\\n        result[i]= fn(arr[i], i);\\n    }\\n    return result;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let arrLength = arr.length;\\n\\n    const result = new Array(arrLength);\\n    for(let i=0;i<arrLength;i++){\\n        result[i]= fn(arr[i], i);\\n    }\\n    return result;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3943412,
                "title": "easy-solution-using-for-loop",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    n = arr.length;\\n    const res = new Array(n);\\n    for(let i=0; i<n; i++){\\n        res[i] = fn(arr[i],i);\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    n = arr.length;\\n    const res = new Array(n);\\n    for(let i=0; i<n; i++){\\n        res[i] = fn(arr[i],i);\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3942708,
                "title": "is-this-the-best-way-to-solve-the-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, plusone){\\n    let i=0;\\n    arr.forEach((e)=>{\\n        // arr.splice(i,1);\\n        arr.splice(i,1,plusone(e,i));\\n        i++;\\n    })\\n    return arr;\\n};\\n\\n// var map = function(arr, fn) {\\n//     let result=[];\\n//     for(let i =0;i<arr.length;i++){\\n//         result.push(fn(arr[i],i));\\n//     }\\n//     return result;\\n\\n    \\n// };\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, plusone){\\n    let i=0;\\n    arr.forEach((e)=>{\\n        // arr.splice(i,1);\\n        arr.splice(i,1,plusone(e,i));\\n        i++;\\n    })\\n    return arr;\\n};\\n\\n// var map = function(arr, fn) {\\n//     let result=[];\\n//     for(let i =0;i<arr.length;i++){\\n//         result.push(fn(arr[i],i));\\n//     }\\n//     return result;\\n\\n    \\n// };\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3941783,
                "title": "my-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const newArr = [];\\n\\n    for(let i = 0; i < arr.length; i++)\\n        newArr.push(fn(arr[i], i));\\n    \\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const newArr = [];\\n\\n    for(let i = 0; i < arr.length; i++)\\n        newArr.push(fn(arr[i], i));\\n    \\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3937930,
                "title": "forloop-and-function-call",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Define new Array whill will contain new values\\n- Iterate over each item\\n- Call function to get new value\\n- Push the new value to new Array.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const newArr = [], l = arr.length\\n    for(let i = 0; i<l; i++) {\\n        newArr.push(fn(arr[i], i))\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const newArr = [], l = arr.length\\n    for(let i = 0; i<l; i++) {\\n        newArr.push(fn(arr[i], i))\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3934691,
                "title": "1-line-of-return-statement",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3931442,
                "title": "javascript-simple-solution",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function (arr, fn) {\\n    const transformedArr = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        transformedArr[i] = fn(arr[i], i);\\n    }\\n    return transformedArr;\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function (arr, fn) {\\n    const transformedArr = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        transformedArr[i] = fn(arr[i], i);\\n    }\\n    return transformedArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3923110,
                "title": "typescript-fast-and-clean-code-o-n-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    const result = [];\\n    for ( let i = 0; i < arr.length; i++ )\\n        result.push( fn( arr[i], i ) );\\n    return result;\\n\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    const result = [];\\n    for ( let i = 0; i < arr.length; i++ )\\n        result.push( fn( arr[i], i ) );\\n    return result;\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3921327,
                "title": "the-easiest-and-fastest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3917105,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArr = [];\\n   for(let i =0 ; i<arr.length; i++){\\n      newArr.push(fn(arr[i],i))\\n   }\\n    return newArr;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArr = [];\\n   for(let i =0 ; i<arr.length; i++){\\n      newArr.push(fn(arr[i],i))\\n   }\\n    return newArr;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3916001,
                "title": "easy-javascript-solution-beginner-friendly-solution",
                "content": "`Vote up if you like it \\uD83D\\uDD90`\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n     for(let i=0;i<arr.length;i++){\\n          arr[i]=fn(arr[i],i)\\n     }\\n     return arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n     for(let i=0;i<arr.length;i++){\\n          arr[i]=fn(arr[i],i)\\n     }\\n     return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3915321,
                "title": "transform-easy-solution",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n**Approach:1**\\nvar map = function(arr, fn) {\\n   const transformedArr = [];\\n   for (let i = 0; i < arr.length; i++) {\\n     transformedArr[i] = fn(arr[i], i);\\n   }\\n  return transformedArr;  \\n};\\n\\n**Approach:2**\\nvar map = function(arr, fn) {\\n     for(i in arr)  \\n     arr[i]=fn(arr[i],Number(i));\\n     return arr;\\n   \\n};\\n\\n\\n# Complexity\\n**Complexity of Approach:2**\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  // const transformedArr = [];\\n  // for (let i = 0; i < arr.length; i++) {\\n  //   transformedArr[i] = fn(arr[i], i);\\n  // }\\n  // return transformedArr;\\n\\n   for(i in arr)  \\n     arr[i]=fn(arr[i],Number(i));\\n     return arr;\\n   \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n  // const transformedArr = [];\\n  // for (let i = 0; i < arr.length; i++) {\\n  //   transformedArr[i] = fn(arr[i], i);\\n  // }\\n  // return transformedArr;\\n\\n   for(i in arr)  \\n     arr[i]=fn(arr[i],Number(i));\\n     return arr;\\n   \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3912388,
                "title": "daily-challenge",
                "content": "# Intuition\\nThis is the simple method of solving the Question , is to iterate the Array and transform each element.\\n\\n# Approach\\nlet the Transformed array to `returnedArray` and then put all the transformed element in the `returnedArray`.\\n\\n# Complexity\\n- Time complexity:O(N) \\uD83E\\uDD1E\\nBeats 64.98%of users with JavaScript\\n\\n- Space complexity: O(1) \\uD83D\\uDC4D\\nBeats 77.89%of users with JavaScript     \\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let returnedArray = [];\\n\\n    for(let i = 0 ; i < arr.length ; i++){\\n      returnedArray[i] = fn(arr[i], i)  \\n    }\\n\\n\\n\\n    return returnedArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let returnedArray = [];\\n\\n    for(let i = 0 ; i < arr.length ; i++){\\n      returnedArray[i] = fn(arr[i], i)  \\n    }\\n\\n\\n\\n    return returnedArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3909244,
                "title": "simple-straight-forward-beginner-friendly-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArr = [];\\n    for(let i=0;i<arr.length;i++) {\\n        newArr.push(fn(arr[i], i))\\n    }\\n\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let newArr = [];\\n    for(let i=0;i<arr.length;i++) {\\n        newArr.push(fn(arr[i], i))\\n    }\\n\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3909098,
                "title": "this-code-beats-97-1-of-all-submissions-using-foreach-loop",
                "content": "# INTUITION\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given problem requires us the use of concept of the loops in the JavaScript, as well we will require to use .push() method of Array object to fill output values into our returned array.\\n\\n# APPROACH\\n<!-- Describe your approach to solving the problem. -->\\nThe code writtened below beats 97% of submissions, as we have used forEach loop to easily iterate through a given array.\\nAnd to fill our returned array, we have used .push() method of Array object. At the end we returned our new array.\\n\\n# CODE\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n     let newArr = [];\\n    arr.forEach((value, i)=>{\\n       newArr[i] = fn(value, i);\\n    });\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n     let newArr = [];\\n    arr.forEach((value, i)=>{\\n       newArr[i] = fn(value, i);\\n    });\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3907220,
                "title": "javascript-solution",
                "content": "# Code\\n```\\nvar map = function(arr, fn) {\\n    let res = []\\n    for (let i = 0; i < arr.length; i++) {\\n        res.push(fn(arr[i], i))\\n    }\\n    return res\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar map = function(arr, fn) {\\n    let res = []\\n    for (let i = 0; i < arr.length; i++) {\\n        res.push(fn(arr[i], i))\\n    }\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3907197,
                "title": "use-map-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    return arr.map(fn)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3904062,
                "title": "beats-85",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result=[];\\n    for(let i=0;i<arr.length;i++){\\n        result[i]=(fn(arr[i],i));\\n    }\\n    return result\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result=[];\\n    for(let i=0;i<arr.length;i++){\\n        result[i]=(fn(arr[i],i));\\n    }\\n    return result\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3903131,
                "title": "push-method-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result=[];\\n    for (let id = 0; id < arr.length; id++) {\\n        result.push(fn(arr[id],id))\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    let result=[];\\n    for (let id = 0; id < arr.length; id++) {\\n        result.push(fn(arr[id],id))\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3901101,
                "title": "solution-over-here",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const result = [];\\n    \\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    \\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const result = [];\\n    \\n    for (let i = 0; i < arr.length; i++) {\\n        result.push(fn(arr[i], i));\\n    }\\n    \\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3900958,
                "title": "tisha",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n\\n    let output:number[] = [];\\n    for(let val of arr){\\n        output.push(fn(val,arr.indexOf(val)));\\n    }\\n    return output;\\n\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n\\n    let output:number[] = [];\\n    for(let val of arr){\\n        output.push(fn(val,arr.indexOf(val)));\\n    }\\n    return output;\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3899566,
                "title": "my-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n     let a = []\\n    arr.forEach((element,index) => {\\n       a.push(fn(element, index)) \\n    });\\n    return a\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n     let a = []\\n    arr.forEach((element,index) => {\\n       a.push(fn(element, index)) \\n    });\\n    return a\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3897120,
                "title": "beginner-solution",
                "content": "# Intuition & Approach\\nFor each item in the initial array replace the item with its result with the function.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for(let i=0; i<arr.length; i++){\\n        arr[i] = fn(arr[i],i)\\n    }\\n    return arr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    for(let i=0; i<arr.length; i++){\\n        arr[i] = fn(arr[i],i)\\n    }\\n    return arr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3893693,
                "title": "using-reduce",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n     const ans=arr.map(fn);\\n     return ans;\\n```\\nCode block\\n```\\n\\n\\n\\n    const returnArray=[];\\n    for(let i=0;i<arr.length;i++){\\n        returnArray[i]=fn(arr[i],i);\\n    }\\n    return returnArray;\\n\\n    \\nCode block\\n```\\n\\n    const ans=arr.reduce((newArray,element,index)=>{\\n        newArray.push(fn(element,index));\\n        return newArray;\\n    },[]);\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n     const ans=arr.map(fn);\\n     return ans;\\n```\n```\\n\\n\\n\\n    const returnArray=[];\\n    for(let i=0;i<arr.length;i++){\\n        returnArray[i]=fn(arr[i],i);\\n    }\\n    return returnArray;\\n\\n    \\nCode block\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3892762,
                "title": "simple-solution-of-problem-apply-transform-over-each-element-in-array-using-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    I solve this problem using simple approach - here we take one array and then traverse given array and pass it\\'s elements into given function so it perform different different operation and return elements store it into our array and at the end we return array. \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    (O(n))\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const Arr = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    Arr[i] = fn(arr[i], i);\\n  }\\n  return Arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar map = function(arr, fn) {\\n    const Arr = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    Arr[i] = fn(arr[i], i);\\n  }\\n  return Arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3892080,
                "title": "js-solution-runtime-47-ms-beats-92-37-memory-41-6-mb-beats-78-57",
                "content": "# Complexity\\n- Time complexity:  $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:  $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar map = function(arr, fn) {\\n    arr.forEach((e,i)=>{\\n        arr[i] = fn(arr[i] , i);\\n    })\\n\\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar map = function(arr, fn) {\\n    arr.forEach((e,i)=>{\\n        arr[i] = fn(arr[i] , i);\\n    })\\n\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1886798,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1975646,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1886587,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 2016508,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1887163,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1886651,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1944822,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1886829,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 2062362,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 2050790,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1886798,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1975646,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1886587,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 2016508,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1887163,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1886651,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1944822,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 1886829,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 2062362,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 2050790,
                "content": [
                    {
                        "username": "adityadixit7054",
                        "content": "Create an empty array\\nThen after loop over arr , after that get val=fn(arr,i) and push that val to the created array\\nIn last return the array."
                    },
                    {
                        "username": "mandar1jn",
                        "content": "You don\\'t actually need a second array. You can assign it back to arr[i]."
                    },
                    {
                        "username": "knrn-ai",
                        "content": "this has helped me, forgot to use the second argument "
                    },
                    {
                        "username": "sauravhathi",
                        "content": "Utilizing the 'map' function to apply the given 'fn' to each element in 'arr'.\n\n```\nvar nautankiMap = function(safar, kaam) {\n    // missing box\n\n    for (let mehfil = 0; mehfil < safar.length; mehfil++) \n                   tamasha.push(kaam(safar[mehfil], mehfil))\n\n    // kya bheju\n};\n```"
                    },
                    {
                        "username": "eduard92",
                        "content": "You don\\'t fool me leetcode, can\\'t wait for the DP problems."
                    },
                    {
                        "username": "Soumya_The_Legend",
                        "content": "[@SanskarTyagi](/SanskarTyagi) Same here bro. Make sure you completed these topic tag combinations: Array+HashTable+Sorting, Array+HashTable(sounds easy but there are some problems like Degree of an Array and Sorting in incresing Frequency and also some concepts like Lambda Functions which you will never learn if you blindly follow Striver\\'s SDE Sheet or his A2Z Sheet or even Babbar\\'s Playlist), Array+Prefix Sum, Array+Two Pointers+ Union Find."
                    },
                    {
                        "username": "SanskarTyagi",
                        "content": "[@aman1320](/aman1320) wait you guys are getting on DS?? im still on arrays :\")"
                    },
                    {
                        "username": "aman1320",
                        "content": "people used to wait for DP problems??..I\\'m still stucking on stack and queue "
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```ts\\nfunction map(arr: number[], fn: (n: number, i: number) => number): number[] {\\n    let _array = []\\n    arr.forEach((item,i) => {\\n        _array.push(fn(item, i));\\n    });\\n    return _array;\\n};\\n```"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Simple and easy solution and You can use for/for each loop to .  \\n`var map = function(arr, fn) {\\n    return arr.map(fn)\\n};`"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL"
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa)  Please read my statement I already mention if not then I can slap myself "
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@Wingscloa](/Wingscloa) \\n`\\nvar map = function(arr, fn) {\\n    let x=[]\\n    for(let i=0;i<arr.length;i++){x.push(fn(arr[i],i))}\\n    return x\\n};`"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self."
                    },
                    {
                        "username": "aman1320",
                        "content": "ufff !! that\\'s tough"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone help me, how to know what parameter are passed in function fn"
                    },
                    {
                        "username": "dooHUA9596",
                        "content": "[Question]\\n\\nSo here is a question I have as a beginner.\\nI checked  `fn`.length and got two different results.\\n(fn.length === 1) & (fn.length === 2)\\nI know `plusI(n, i)` and `plusone(n)` maps two different length.\\nbut why `function constant()`\\'length is also 2?\\nany idea?"
                    },
                    {
                        "username": "sowjanyabalumuri",
                        "content": "[@Mister_CK](/Mister_CK)  we can use fn.name to know call back function name"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "Good question. Looking at the difference between fn in the different testCases, it reflects the number of arguments, when it is just n, it returns 1 and when it is (n, i) it returns 2. If you make a testCase where fn accepts more arguments (`function plusI(n, i, k) { return n + i; }`) fn.length is 3"
                    },
                    {
                        "username": "mayerm",
                        "content": "_*Hint 1*: Start by creating an array that will eventually be returned._\\n\\nCreate an empty array  `newArray` (or don\\'t). If you do, you must `return newArray;` at the end of the function. Otherwise, `return` the original array.\\n\\n_*Hint 2*: Loop over each element in the passed array. Push `fn(arr[i])` to the returned array._\\n\\nIterate over the array using `for` or `forEach`, and to each element execute the `fn` function passing the `element` and the `index` as parameters. If you created a new array, use the array `push()` function to whatever `fn` returns. Otherwise, overwrite the element in that index. Bonus points for using forEach (?)\\n\\nIf you don\\'t understand some parts of this, look it up on Mozilla\\'s docs.\\n\\n"
                    },
                    {
                        "username": "Raj88",
                        "content": "can somebody explain it better?"
                    },
                    {
                        "username": "hossien014",
                        "content": "In JavaScript, a mapping function is commonly associated with the map() method, which is available for arrays. This method allows you to apply a function to each element of an array and create a new array with the results of applying that function to each element. It\\'s a way of transforming an array into another array by applying a given function to each element. Here\\'s how it works:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Define a mapping function using the `map()` method\\nconst squaredNumbers = numbers.map(function (x) {\\n  return x * x;\\n});\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nIn this example:\\n\\nWe have an array called numbers containing five elements.\\nWe use the map() method on the numbers array and pass in a function as an argument.\\nThe function takes each element x from the numbers array and returns x * x, which squares each element.\\nThe map() method applies this function to each element of the array and creates a new array called squaredNumbers with the squared values.\\nYou can also use arrow functions for more concise code:\\n\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst squaredNumbers = numbers.map(x => x * x);\\n\\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\\nThis is a common use of mapping functions in JavaScript when you want to transform data in an array without modifying the original array. Mapping functions are very useful for data manipulation and processing tasks in JavaScript."
                    }
                ]
            },
            {
                "id": 2025820,
                "content": [
                    {
                        "username": "rahulchouhan2408",
                        "content": "can someone explain to me why this code of mine is not working? \\nvar integer = function(arr, fn){\\n    var newArray =[];\\n    for(var i=0; i< arr.length; i++){\\n        newArray.push(fn(arr[i], i));\\n    }\\n    return newArray;\\n};\\n\\n\\n"
                    },
                    {
                        "username": "lexa042987",
                        "content": "for(let i=0; i< arr.length; i++)"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "just don\\'t care about writing the code for the fn(arr[i],i)"
                    },
                    {
                        "username": "Munira2004",
                        "content": "why majority is using x.push() ? what is push here? how and where to use it?"
                    },
                    {
                        "username": "sauravhathi",
                        "content": "\\n`push()` appends elements to arrays in JavaScript for data manipulation."
                    },
                    {
                        "username": "jcjet88",
                        "content": "Why \"solve it without the built-in Array.map method.\"?\\nWow, now I\\'ll never use built-in array methods in productions projects ever again, because it\\'s just too easy."
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 5 \\uD83D\\uDE05"
                    },
                    {
                        "username": "ProJoy",
                        "content": "Where is i?"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 4 : \\nTip : Simple Array Traversal and Function Calling "
                    },
                    {
                        "username": "_adarshagrawal_",
                        "content": "Can someone tell me why the for-in loop of js not working whereas the traditional for loop is giving the correct ans?\\nThis code is giving correct output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i = 0; i < arr.length; i++){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};\\nThis code is not giving the required output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i in arr){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};"
                    },
                    {
                        "username": "tunalad",
                        "content": "in for-in, the `i` key is a string"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Check the value of `i` in both cases you can find solution yourself \\n"
                    },
                    {
                        "username": "jgonka",
                        "content": "The i in your second version is going to iterate through the values of arr, and not the indexes. This works if each value is equal to its index ([0, 1, 2, ...]) but does not work in any other case."
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "lol i did this : var map = function(arr, fn) {\\n    return arr.map(fn)\\n};"
                    },
                    {
                        "username": "sumitmukharjeeeeee",
                        "content": "LOL mappings are not allowed"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL * 10"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self. 2nd Bozo"
                    },
                    {
                        "username": "yashwardhan24_sharma",
                        "content": "thanku leetcode for today problem"
                    }
                ]
            },
            {
                "id": 1976262,
                "content": [
                    {
                        "username": "rahulchouhan2408",
                        "content": "can someone explain to me why this code of mine is not working? \\nvar integer = function(arr, fn){\\n    var newArray =[];\\n    for(var i=0; i< arr.length; i++){\\n        newArray.push(fn(arr[i], i));\\n    }\\n    return newArray;\\n};\\n\\n\\n"
                    },
                    {
                        "username": "lexa042987",
                        "content": "for(let i=0; i< arr.length; i++)"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "just don\\'t care about writing the code for the fn(arr[i],i)"
                    },
                    {
                        "username": "Munira2004",
                        "content": "why majority is using x.push() ? what is push here? how and where to use it?"
                    },
                    {
                        "username": "sauravhathi",
                        "content": "\\n`push()` appends elements to arrays in JavaScript for data manipulation."
                    },
                    {
                        "username": "jcjet88",
                        "content": "Why \"solve it without the built-in Array.map method.\"?\\nWow, now I\\'ll never use built-in array methods in productions projects ever again, because it\\'s just too easy."
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 5 \\uD83D\\uDE05"
                    },
                    {
                        "username": "ProJoy",
                        "content": "Where is i?"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 4 : \\nTip : Simple Array Traversal and Function Calling "
                    },
                    {
                        "username": "_adarshagrawal_",
                        "content": "Can someone tell me why the for-in loop of js not working whereas the traditional for loop is giving the correct ans?\\nThis code is giving correct output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i = 0; i < arr.length; i++){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};\\nThis code is not giving the required output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i in arr){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};"
                    },
                    {
                        "username": "tunalad",
                        "content": "in for-in, the `i` key is a string"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Check the value of `i` in both cases you can find solution yourself \\n"
                    },
                    {
                        "username": "jgonka",
                        "content": "The i in your second version is going to iterate through the values of arr, and not the indexes. This works if each value is equal to its index ([0, 1, 2, ...]) but does not work in any other case."
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "lol i did this : var map = function(arr, fn) {\\n    return arr.map(fn)\\n};"
                    },
                    {
                        "username": "sumitmukharjeeeeee",
                        "content": "LOL mappings are not allowed"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL * 10"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self. 2nd Bozo"
                    },
                    {
                        "username": "yashwardhan24_sharma",
                        "content": "thanku leetcode for today problem"
                    }
                ]
            },
            {
                "id": 1955813,
                "content": [
                    {
                        "username": "rahulchouhan2408",
                        "content": "can someone explain to me why this code of mine is not working? \\nvar integer = function(arr, fn){\\n    var newArray =[];\\n    for(var i=0; i< arr.length; i++){\\n        newArray.push(fn(arr[i], i));\\n    }\\n    return newArray;\\n};\\n\\n\\n"
                    },
                    {
                        "username": "lexa042987",
                        "content": "for(let i=0; i< arr.length; i++)"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "just don\\'t care about writing the code for the fn(arr[i],i)"
                    },
                    {
                        "username": "Munira2004",
                        "content": "why majority is using x.push() ? what is push here? how and where to use it?"
                    },
                    {
                        "username": "sauravhathi",
                        "content": "\\n`push()` appends elements to arrays in JavaScript for data manipulation."
                    },
                    {
                        "username": "jcjet88",
                        "content": "Why \"solve it without the built-in Array.map method.\"?\\nWow, now I\\'ll never use built-in array methods in productions projects ever again, because it\\'s just too easy."
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 5 \\uD83D\\uDE05"
                    },
                    {
                        "username": "ProJoy",
                        "content": "Where is i?"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 4 : \\nTip : Simple Array Traversal and Function Calling "
                    },
                    {
                        "username": "_adarshagrawal_",
                        "content": "Can someone tell me why the for-in loop of js not working whereas the traditional for loop is giving the correct ans?\\nThis code is giving correct output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i = 0; i < arr.length; i++){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};\\nThis code is not giving the required output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i in arr){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};"
                    },
                    {
                        "username": "tunalad",
                        "content": "in for-in, the `i` key is a string"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Check the value of `i` in both cases you can find solution yourself \\n"
                    },
                    {
                        "username": "jgonka",
                        "content": "The i in your second version is going to iterate through the values of arr, and not the indexes. This works if each value is equal to its index ([0, 1, 2, ...]) but does not work in any other case."
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "lol i did this : var map = function(arr, fn) {\\n    return arr.map(fn)\\n};"
                    },
                    {
                        "username": "sumitmukharjeeeeee",
                        "content": "LOL mappings are not allowed"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL * 10"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self. 2nd Bozo"
                    },
                    {
                        "username": "yashwardhan24_sharma",
                        "content": "thanku leetcode for today problem"
                    }
                ]
            },
            {
                "id": 1954498,
                "content": [
                    {
                        "username": "rahulchouhan2408",
                        "content": "can someone explain to me why this code of mine is not working? \\nvar integer = function(arr, fn){\\n    var newArray =[];\\n    for(var i=0; i< arr.length; i++){\\n        newArray.push(fn(arr[i], i));\\n    }\\n    return newArray;\\n};\\n\\n\\n"
                    },
                    {
                        "username": "lexa042987",
                        "content": "for(let i=0; i< arr.length; i++)"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "just don\\'t care about writing the code for the fn(arr[i],i)"
                    },
                    {
                        "username": "Munira2004",
                        "content": "why majority is using x.push() ? what is push here? how and where to use it?"
                    },
                    {
                        "username": "sauravhathi",
                        "content": "\\n`push()` appends elements to arrays in JavaScript for data manipulation."
                    },
                    {
                        "username": "jcjet88",
                        "content": "Why \"solve it without the built-in Array.map method.\"?\\nWow, now I\\'ll never use built-in array methods in productions projects ever again, because it\\'s just too easy."
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 5 \\uD83D\\uDE05"
                    },
                    {
                        "username": "ProJoy",
                        "content": "Where is i?"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 4 : \\nTip : Simple Array Traversal and Function Calling "
                    },
                    {
                        "username": "_adarshagrawal_",
                        "content": "Can someone tell me why the for-in loop of js not working whereas the traditional for loop is giving the correct ans?\\nThis code is giving correct output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i = 0; i < arr.length; i++){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};\\nThis code is not giving the required output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i in arr){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};"
                    },
                    {
                        "username": "tunalad",
                        "content": "in for-in, the `i` key is a string"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Check the value of `i` in both cases you can find solution yourself \\n"
                    },
                    {
                        "username": "jgonka",
                        "content": "The i in your second version is going to iterate through the values of arr, and not the indexes. This works if each value is equal to its index ([0, 1, 2, ...]) but does not work in any other case."
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "lol i did this : var map = function(arr, fn) {\\n    return arr.map(fn)\\n};"
                    },
                    {
                        "username": "sumitmukharjeeeeee",
                        "content": "LOL mappings are not allowed"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL * 10"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self. 2nd Bozo"
                    },
                    {
                        "username": "yashwardhan24_sharma",
                        "content": "thanku leetcode for today problem"
                    }
                ]
            },
            {
                "id": 1938500,
                "content": [
                    {
                        "username": "rahulchouhan2408",
                        "content": "can someone explain to me why this code of mine is not working? \\nvar integer = function(arr, fn){\\n    var newArray =[];\\n    for(var i=0; i< arr.length; i++){\\n        newArray.push(fn(arr[i], i));\\n    }\\n    return newArray;\\n};\\n\\n\\n"
                    },
                    {
                        "username": "lexa042987",
                        "content": "for(let i=0; i< arr.length; i++)"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "just don\\'t care about writing the code for the fn(arr[i],i)"
                    },
                    {
                        "username": "Munira2004",
                        "content": "why majority is using x.push() ? what is push here? how and where to use it?"
                    },
                    {
                        "username": "sauravhathi",
                        "content": "\\n`push()` appends elements to arrays in JavaScript for data manipulation."
                    },
                    {
                        "username": "jcjet88",
                        "content": "Why \"solve it without the built-in Array.map method.\"?\\nWow, now I\\'ll never use built-in array methods in productions projects ever again, because it\\'s just too easy."
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 5 \\uD83D\\uDE05"
                    },
                    {
                        "username": "ProJoy",
                        "content": "Where is i?"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 4 : \\nTip : Simple Array Traversal and Function Calling "
                    },
                    {
                        "username": "_adarshagrawal_",
                        "content": "Can someone tell me why the for-in loop of js not working whereas the traditional for loop is giving the correct ans?\\nThis code is giving correct output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i = 0; i < arr.length; i++){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};\\nThis code is not giving the required output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i in arr){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};"
                    },
                    {
                        "username": "tunalad",
                        "content": "in for-in, the `i` key is a string"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Check the value of `i` in both cases you can find solution yourself \\n"
                    },
                    {
                        "username": "jgonka",
                        "content": "The i in your second version is going to iterate through the values of arr, and not the indexes. This works if each value is equal to its index ([0, 1, 2, ...]) but does not work in any other case."
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "lol i did this : var map = function(arr, fn) {\\n    return arr.map(fn)\\n};"
                    },
                    {
                        "username": "sumitmukharjeeeeee",
                        "content": "LOL mappings are not allowed"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL * 10"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self. 2nd Bozo"
                    },
                    {
                        "username": "yashwardhan24_sharma",
                        "content": "thanku leetcode for today problem"
                    }
                ]
            },
            {
                "id": 1912792,
                "content": [
                    {
                        "username": "rahulchouhan2408",
                        "content": "can someone explain to me why this code of mine is not working? \\nvar integer = function(arr, fn){\\n    var newArray =[];\\n    for(var i=0; i< arr.length; i++){\\n        newArray.push(fn(arr[i], i));\\n    }\\n    return newArray;\\n};\\n\\n\\n"
                    },
                    {
                        "username": "lexa042987",
                        "content": "for(let i=0; i< arr.length; i++)"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "just don\\'t care about writing the code for the fn(arr[i],i)"
                    },
                    {
                        "username": "Munira2004",
                        "content": "why majority is using x.push() ? what is push here? how and where to use it?"
                    },
                    {
                        "username": "sauravhathi",
                        "content": "\\n`push()` appends elements to arrays in JavaScript for data manipulation."
                    },
                    {
                        "username": "jcjet88",
                        "content": "Why \"solve it without the built-in Array.map method.\"?\\nWow, now I\\'ll never use built-in array methods in productions projects ever again, because it\\'s just too easy."
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 5 \\uD83D\\uDE05"
                    },
                    {
                        "username": "ProJoy",
                        "content": "Where is i?"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 4 : \\nTip : Simple Array Traversal and Function Calling "
                    },
                    {
                        "username": "_adarshagrawal_",
                        "content": "Can someone tell me why the for-in loop of js not working whereas the traditional for loop is giving the correct ans?\\nThis code is giving correct output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i = 0; i < arr.length; i++){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};\\nThis code is not giving the required output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i in arr){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};"
                    },
                    {
                        "username": "tunalad",
                        "content": "in for-in, the `i` key is a string"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Check the value of `i` in both cases you can find solution yourself \\n"
                    },
                    {
                        "username": "jgonka",
                        "content": "The i in your second version is going to iterate through the values of arr, and not the indexes. This works if each value is equal to its index ([0, 1, 2, ...]) but does not work in any other case."
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "lol i did this : var map = function(arr, fn) {\\n    return arr.map(fn)\\n};"
                    },
                    {
                        "username": "sumitmukharjeeeeee",
                        "content": "LOL mappings are not allowed"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL * 10"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self. 2nd Bozo"
                    },
                    {
                        "username": "yashwardhan24_sharma",
                        "content": "thanku leetcode for today problem"
                    }
                ]
            },
            {
                "id": 1887197,
                "content": [
                    {
                        "username": "rahulchouhan2408",
                        "content": "can someone explain to me why this code of mine is not working? \\nvar integer = function(arr, fn){\\n    var newArray =[];\\n    for(var i=0; i< arr.length; i++){\\n        newArray.push(fn(arr[i], i));\\n    }\\n    return newArray;\\n};\\n\\n\\n"
                    },
                    {
                        "username": "lexa042987",
                        "content": "for(let i=0; i< arr.length; i++)"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "just don\\'t care about writing the code for the fn(arr[i],i)"
                    },
                    {
                        "username": "Munira2004",
                        "content": "why majority is using x.push() ? what is push here? how and where to use it?"
                    },
                    {
                        "username": "sauravhathi",
                        "content": "\\n`push()` appends elements to arrays in JavaScript for data manipulation."
                    },
                    {
                        "username": "jcjet88",
                        "content": "Why \"solve it without the built-in Array.map method.\"?\\nWow, now I\\'ll never use built-in array methods in productions projects ever again, because it\\'s just too easy."
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 5 \\uD83D\\uDE05"
                    },
                    {
                        "username": "ProJoy",
                        "content": "Where is i?"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 4 : \\nTip : Simple Array Traversal and Function Calling "
                    },
                    {
                        "username": "_adarshagrawal_",
                        "content": "Can someone tell me why the for-in loop of js not working whereas the traditional for loop is giving the correct ans?\\nThis code is giving correct output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i = 0; i < arr.length; i++){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};\\nThis code is not giving the required output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i in arr){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};"
                    },
                    {
                        "username": "tunalad",
                        "content": "in for-in, the `i` key is a string"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Check the value of `i` in both cases you can find solution yourself \\n"
                    },
                    {
                        "username": "jgonka",
                        "content": "The i in your second version is going to iterate through the values of arr, and not the indexes. This works if each value is equal to its index ([0, 1, 2, ...]) but does not work in any other case."
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "lol i did this : var map = function(arr, fn) {\\n    return arr.map(fn)\\n};"
                    },
                    {
                        "username": "sumitmukharjeeeeee",
                        "content": "LOL mappings are not allowed"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL * 10"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self. 2nd Bozo"
                    },
                    {
                        "username": "yashwardhan24_sharma",
                        "content": "thanku leetcode for today problem"
                    }
                ]
            },
            {
                "id": 1887186,
                "content": [
                    {
                        "username": "rahulchouhan2408",
                        "content": "can someone explain to me why this code of mine is not working? \\nvar integer = function(arr, fn){\\n    var newArray =[];\\n    for(var i=0; i< arr.length; i++){\\n        newArray.push(fn(arr[i], i));\\n    }\\n    return newArray;\\n};\\n\\n\\n"
                    },
                    {
                        "username": "lexa042987",
                        "content": "for(let i=0; i< arr.length; i++)"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "just don\\'t care about writing the code for the fn(arr[i],i)"
                    },
                    {
                        "username": "Munira2004",
                        "content": "why majority is using x.push() ? what is push here? how and where to use it?"
                    },
                    {
                        "username": "sauravhathi",
                        "content": "\\n`push()` appends elements to arrays in JavaScript for data manipulation."
                    },
                    {
                        "username": "jcjet88",
                        "content": "Why \"solve it without the built-in Array.map method.\"?\\nWow, now I\\'ll never use built-in array methods in productions projects ever again, because it\\'s just too easy."
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 5 \\uD83D\\uDE05"
                    },
                    {
                        "username": "ProJoy",
                        "content": "Where is i?"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 4 : \\nTip : Simple Array Traversal and Function Calling "
                    },
                    {
                        "username": "_adarshagrawal_",
                        "content": "Can someone tell me why the for-in loop of js not working whereas the traditional for loop is giving the correct ans?\\nThis code is giving correct output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i = 0; i < arr.length; i++){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};\\nThis code is not giving the required output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i in arr){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};"
                    },
                    {
                        "username": "tunalad",
                        "content": "in for-in, the `i` key is a string"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Check the value of `i` in both cases you can find solution yourself \\n"
                    },
                    {
                        "username": "jgonka",
                        "content": "The i in your second version is going to iterate through the values of arr, and not the indexes. This works if each value is equal to its index ([0, 1, 2, ...]) but does not work in any other case."
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "lol i did this : var map = function(arr, fn) {\\n    return arr.map(fn)\\n};"
                    },
                    {
                        "username": "sumitmukharjeeeeee",
                        "content": "LOL mappings are not allowed"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL * 10"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self. 2nd Bozo"
                    },
                    {
                        "username": "yashwardhan24_sharma",
                        "content": "thanku leetcode for today problem"
                    }
                ]
            },
            {
                "id": 1886984,
                "content": [
                    {
                        "username": "rahulchouhan2408",
                        "content": "can someone explain to me why this code of mine is not working? \\nvar integer = function(arr, fn){\\n    var newArray =[];\\n    for(var i=0; i< arr.length; i++){\\n        newArray.push(fn(arr[i], i));\\n    }\\n    return newArray;\\n};\\n\\n\\n"
                    },
                    {
                        "username": "lexa042987",
                        "content": "for(let i=0; i< arr.length; i++)"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "just don\\'t care about writing the code for the fn(arr[i],i)"
                    },
                    {
                        "username": "Munira2004",
                        "content": "why majority is using x.push() ? what is push here? how and where to use it?"
                    },
                    {
                        "username": "sauravhathi",
                        "content": "\\n`push()` appends elements to arrays in JavaScript for data manipulation."
                    },
                    {
                        "username": "jcjet88",
                        "content": "Why \"solve it without the built-in Array.map method.\"?\\nWow, now I\\'ll never use built-in array methods in productions projects ever again, because it\\'s just too easy."
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 5 \\uD83D\\uDE05"
                    },
                    {
                        "username": "ProJoy",
                        "content": "Where is i?"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 4 : \\nTip : Simple Array Traversal and Function Calling "
                    },
                    {
                        "username": "_adarshagrawal_",
                        "content": "Can someone tell me why the for-in loop of js not working whereas the traditional for loop is giving the correct ans?\\nThis code is giving correct output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i = 0; i < arr.length; i++){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};\\nThis code is not giving the required output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i in arr){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};"
                    },
                    {
                        "username": "tunalad",
                        "content": "in for-in, the `i` key is a string"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Check the value of `i` in both cases you can find solution yourself \\n"
                    },
                    {
                        "username": "jgonka",
                        "content": "The i in your second version is going to iterate through the values of arr, and not the indexes. This works if each value is equal to its index ([0, 1, 2, ...]) but does not work in any other case."
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "lol i did this : var map = function(arr, fn) {\\n    return arr.map(fn)\\n};"
                    },
                    {
                        "username": "sumitmukharjeeeeee",
                        "content": "LOL mappings are not allowed"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL * 10"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self. 2nd Bozo"
                    },
                    {
                        "username": "yashwardhan24_sharma",
                        "content": "thanku leetcode for today problem"
                    }
                ]
            },
            {
                "id": 1886802,
                "content": [
                    {
                        "username": "rahulchouhan2408",
                        "content": "can someone explain to me why this code of mine is not working? \\nvar integer = function(arr, fn){\\n    var newArray =[];\\n    for(var i=0; i< arr.length; i++){\\n        newArray.push(fn(arr[i], i));\\n    }\\n    return newArray;\\n};\\n\\n\\n"
                    },
                    {
                        "username": "lexa042987",
                        "content": "for(let i=0; i< arr.length; i++)"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "just don\\'t care about writing the code for the fn(arr[i],i)"
                    },
                    {
                        "username": "Munira2004",
                        "content": "why majority is using x.push() ? what is push here? how and where to use it?"
                    },
                    {
                        "username": "sauravhathi",
                        "content": "\\n`push()` appends elements to arrays in JavaScript for data manipulation."
                    },
                    {
                        "username": "jcjet88",
                        "content": "Why \"solve it without the built-in Array.map method.\"?\\nWow, now I\\'ll never use built-in array methods in productions projects ever again, because it\\'s just too easy."
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 5 \\uD83D\\uDE05"
                    },
                    {
                        "username": "ProJoy",
                        "content": "Where is i?"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 4 : \\nTip : Simple Array Traversal and Function Calling "
                    },
                    {
                        "username": "_adarshagrawal_",
                        "content": "Can someone tell me why the for-in loop of js not working whereas the traditional for loop is giving the correct ans?\\nThis code is giving correct output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i = 0; i < arr.length; i++){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};\\nThis code is not giving the required output\\nvar map = function(arr, fn) {\\n    let a=[];\\n    for(let i in arr){\\n        a.push(fn(arr[i],i));\\n    }\\n    return a;\\n};"
                    },
                    {
                        "username": "tunalad",
                        "content": "in for-in, the `i` key is a string"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Check the value of `i` in both cases you can find solution yourself \\n"
                    },
                    {
                        "username": "jgonka",
                        "content": "The i in your second version is going to iterate through the values of arr, and not the indexes. This works if each value is equal to its index ([0, 1, 2, ...]) but does not work in any other case."
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "lol i did this : var map = function(arr, fn) {\\n    return arr.map(fn)\\n};"
                    },
                    {
                        "username": "sumitmukharjeeeeee",
                        "content": "LOL mappings are not allowed"
                    },
                    {
                        "username": "rayrogar",
                        "content": "[@Wingscloa](/Wingscloa) LOL * 10"
                    },
                    {
                        "username": "Wingscloa",
                        "content": "Desc : **Please solve it without the built-in Array.map method.**\\n\\nBruh, slap your self. 2nd Bozo"
                    },
                    {
                        "username": "yashwardhan24_sharma",
                        "content": "thanku leetcode for today problem"
                    }
                ]
            }
        ]
    }
]