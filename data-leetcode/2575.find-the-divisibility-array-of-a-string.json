[
    {
        "title": "Find the Divisibility Array of a String",
        "question_content": "You are given a 0-indexed string word of length n&nbsp;consisting of digits, and a positive integer&nbsp;m.\nThe divisibility array div of word is an integer array of length n such that:\n\n\tdiv[i] = 1 if the&nbsp;numeric value&nbsp;of&nbsp;word[0,...,i] is divisible by m, or\n\tdiv[i] = 0 otherwise.\n\nReturn the divisibility array of word.\n&nbsp;\nExample 1:\n\nInput: word = \"998244353\", m = 3\nOutput: [1,1,0,0,0,1,1,0,0]\nExplanation: There are only 4 prefixes that are divisible by 3: \"9\", \"99\", \"998244\", and \"9982443\".\n\nExample 2:\n\nInput: word = \"1010\", m = 10\nOutput: [0,1,0,1]\nExplanation: There are only 2 prefixes that are divisible by 10: \"10\", and \"1010\".\n\n&nbsp;\nConstraints:\n\n\t1 <= n <= 105\n\tword.length == n\n\tword consists of digits from 0&nbsp;to 9\n\t1 <= m <= 109",
        "solutions": [
            {
                "id": 3230950,
                "title": "stepwise-explanation-with-images-easy-to-understand-simple-division-rule",
                "content": "![image](https://assets.leetcode.com/users/images/2242522c-680f-43a3-a506-e42b766ada53_1677384485.4976823.jpeg)\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) \\n    {\\n        vector<int>ans;\\n        long long prevRem = 0;\\n        for (int i = 0; i < word.size(); i++)\\n        {\\n            int currDig = word[i] - \\'0\\';\\n            long long newDividend = (prevRem * 10) + currDig;  \\n\\t\\t\\t//newDividend = currDig appended to previous remainder\\n            \\n            int rem = (newDividend % m);\\n            if (rem == 0) ans.push_back(1);\\n            else ans.push_back(0);\\n            \\n            prevRem = rem; \\n        }\\n        return ans;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) \\n    {\\n        vector<int>ans;\\n        long long prevRem = 0;\\n        for (int i = 0; i < word.size(); i++)\\n        {\\n            int currDig = word[i] - \\'0\\';\\n            long long newDividend = (prevRem * 10) + currDig;  \\n\\t\\t\\t//newDividend = currDig appended to previous remainder\\n            \\n            int rem = (newDividend % m);\\n            if (rem == 0) ans.push_back(1);\\n            else ans.push_back(0);\\n            \\n            prevRem = rem; \\n        }\\n        return ans;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231219,
                "title": "explained-reminder-checking-very-simple-easy-to-understand-solution",
                "content": "\\n# Intuition\\nTrick to see how the addition of a new digit to the end impact the divisibility result of the new number.\\n\\n# Approach\\nLet say a number n when we devide it by m we get q as quotient & r as reminder.\\nSo we can write => n = qm + r\\n\\nNow add a new digit ( say d)  to the the end.\\nThis is equivalent to multiplying 10 with previous number and then add d to it.\\nSo the new number can be written as n*10 + d;\\nNow replace value of n from prvious equation, we get \\n= n*10 + d\\n= (qm + r) * 10 + d\\n= 10qm + 10r + d\\n\\nso in the above result there are three term aout of which the first is always divisible by m. So the remaining part is 10r + d\\nNow we just need to check if 10 * r + d is divisible by m or not. \\n\\nKeep continuing above for all digits in word.\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n### Up Vote if you like the solution.\\n\\n# Code\\n```\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans(word.size(), 0);\\n        long long t = 0;\\n        for(int i = 0; i < word.size(); ++i){\\n            t = (t * 10 + (word[i] - \\'0\\') ) % m;\\n            if(t == 0) ans[i] = 1; \\n        }\\n        return ans;\\n    }\\n```\\n\\nHere is an article of my recent interview experience - A Journey to FAANG Company, I recomand you to go through this to know which all resources I have used & how I cracked interview at Amazon:\\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans(word.size(), 0);\\n        long long t = 0;\\n        for(int i = 0; i < word.size(); ++i){\\n            t = (t * 10 + (word[i] - \\'0\\') ) % m;\\n            if(t == 0) ans[i] = 1; \\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3230830,
                "title": "python3-c-java-easy-solution",
                "content": "# Please UPVOTE\\uD83D\\uDE0A\\n\\n# Python3\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        x=0\\n        a=[]\\n        for i in word:\\n            x=x*10+int(i)\\n            if(x%m==0):\\n                a+=[1]\\n            else:\\n                a+=[0]\\n            x%=m\\n        return a\\n        \\n```\\n# C++\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        long long int x=0;\\n        vector<int>ans;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            x=x*10+(word[i]-\\'0\\');\\n            if(x%m==0) ans.push_back(1);else ans.push_back(0);\\n            x%=m;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n# Java\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        long x=0;\\n        int n=word.length();\\n        int[] ans = new int[n];\\n        for(int i=0;i<word.length();i++)\\n        {\\n            x=x*10+(word.charAt(i)-\\'0\\');\\n            if(x%m==0) ans[i]=1;else ans[i]=0;\\n            x%=m;\\n        }\\n        return ans;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        x=0\\n        a=[]\\n        for i in word:\\n            x=x*10+int(i)\\n            if(x%m==0):\\n                a+=[1]\\n            else:\\n                a+=[0]\\n            x%=m\\n        return a\\n        \\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        long long int x=0;\\n        vector<int>ans;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            x=x*10+(word[i]-\\'0\\');\\n            if(x%m==0) ans.push_back(1);else ans.push_back(0);\\n            x%=m;\\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        long x=0;\\n        int n=word.length();\\n        int[] ans = new int[n];\\n        for(int i=0;i<word.length();i++)\\n        {\\n            x=x*10+(word.charAt(i)-\\'0\\');\\n            if(x%m==0) ans[i]=1;else ans[i]=0;\\n            x%=m;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231135,
                "title": "detailed-explained-easy-java-solution",
                "content": "# Intuition &    Approach\\nIterate over the given word. Get the numeric value of each digit and form number. Check if the numeber is divisible by m or not.\\n**One important catch** is that if we try forming word from each digit then long will overflow and it cuases forming wrong number. So instead of forming new number from each digit we will keep track of the remainder from the last number.\\n  **For example**, we have number 342 and m =3 now if we find number and divide we will get remainder as zero. But we can also do something like:-\\n  1st step: - 3%3=0 \\n now remainder =0;\\n2nd step :- 0 X 10+4=4\\n 4%3=1;\\nnow we have remainder 1\\n3rd step :- 1 X 10+2=12 \\n 12%3=0;\\nSo we can observe from the above example that we are getting same result. So we will be using this technique instead of passing whole number for the next check **we will only pass the remainder of it**.\\n\\n\\n \\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g.  -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n      int n = word.length();\\n        int[] ans = new int[n];\\n       \\n        long num=0;\\n\\n        for(int i=0;i<n;i++){\\n\\n          int d = word.charAt(i)-\\'0\\'; //get the numeric value for the character.\\n            num=num*10; //multiply it by 10;\\n            num+=d;  // add the current digit\\n              num=num%m; //find the remainder and pass same remainder for the next check\\n            if(num ==0){ // if remainder is 0 put ans[i]=1;\\n                ans[i]=1;\\n            }\\n        }\\n      return ans;  \\n    }\\n}\\n```\\n`Please Upvote`\\n![cc404213-285c-48ca-bce1-256072316360_1675559254.9353127.png](https://assets.leetcode.com/users/images/19978650-43a0-4d32-b4ad-2507d9961012_1677385594.9368598.png)\\n",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n      int n = word.length();\\n        int[] ans = new int[n];\\n       \\n        long num=0;\\n\\n        for(int i=0;i<n;i++){\\n\\n          int d = word.charAt(i)-\\'0\\'; //get the numeric value for the character.\\n            num=num*10; //multiply it by 10;\\n            num+=d;  // add the current digit\\n              num=num%m; //find the remainder and pass same remainder for the next check\\n            if(num ==0){ // if remainder is 0 put ans[i]=1;\\n                ans[i]=1;\\n            }\\n        }\\n      return ans;  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231159,
                "title": "track-mod",
                "content": "**C++**\\n```cpp\\nvector<int> divisibilityArray(string word, int m) {\\n    vector<int> res;\\n    for (long long i = 0, mod = 0; i < word.size(); ++i) {\\n        mod = (mod * 10 + word[i] - \\'0\\') % m;\\n        res.push_back(mod == 0);\\n    }\\n    return res;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nvector<int> divisibilityArray(string word, int m) {\\n    vector<int> res;\\n    for (long long i = 0, mod = 0; i < word.size(); ++i) {\\n        mod = (mod * 10 + word[i] - \\'0\\') % m;\\n        res.push_back(mod == 0);\\n    }\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3230850,
                "title": "2575-find-the-divisibility-array-of-a-string-java-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n    int n = word.length();\\n    int[] div = new int[n];\\n    long remainder = 0;\\n    for (int i = 0; i < n; i++) {\\n            int digit = word.charAt(i) - \\'0\\';\\n            remainder = (remainder * 10 + digit) % m;\\n            if (remainder == 0) {\\n                div[i] = 1;\\n            }\\n        }\\n        return div;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n    int n = word.length();\\n    int[] div = new int[n];\\n    long remainder = 0;\\n    for (int i = 0; i < n; i++) {\\n            int digit = word.charAt(i) - \\'0\\';\\n            remainder = (remainder * 10 + digit) % m;\\n            if (remainder == 0) {\\n                div[i] = 1;\\n            }\\n        }\\n        return div;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231127,
                "title": "100-fastest-easy-division-approach",
                "content": "\\n# Approach\\n\\nI have applied simple division approach that we generally use in theories.\\n- traversing the word one by one\\n- Append word[i] to the right of remainder(ensure data type);\\n- change the remainder accordingly\\n\\nlet word=\"1010\" and m = 10\\n```\\n/*\\n\\n10)1010(\\n   1|||     i=0 && r=1\\n  __V||     \\n   10||     \\n   10||     i=1 && r=0;\\n_____V|\\n   001|     i=2 && r=1;\\n   ___V\\n     10     \\n     10     i=3 && r=0\\n    ____\\n     00\\n\\nif(r==0) -> div[i]=1\\notherwise -> div[i]=0;\\n\\n*/\\n```\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        \\n        long long r=0;\\n        int n = word.length();\\n        vector<int> div(n);\\n        \\n        for(int i=0;i<n;i++){\\n            \\n            long long val = r*10 + (word[i]-\\'0\\');\\n            \\n            if((val%m) == 0){\\n                div[i] = 1;\\n                r=0;\\n            }else{\\n                div[i] = 0;\\n                r=val%m;\\n            }\\n            \\n        }\\n        return div;\\n        \\n    }\\n};\\n```\\n\\n### Please upvote, If you find this helpful \\uD83D\\uDE4F\\n##### Thank you in advance :)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/*\\n\\n10)1010(\\n   1|||     i=0 && r=1\\n  __V||     \\n   10||     \\n   10||     i=1 && r=0;\\n_____V|\\n   001|     i=2 && r=1;\\n   ___V\\n     10     \\n     10     i=3 && r=0\\n    ____\\n     00\\n\\nif(r==0) -> div[i]=1\\notherwise -> div[i]=0;\\n\\n*/\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        \\n        long long r=0;\\n        int n = word.length();\\n        vector<int> div(n);\\n        \\n        for(int i=0;i<n;i++){\\n            \\n            long long val = r*10 + (word[i]-\\'0\\');\\n            \\n            if((val%m) == 0){\\n                div[i] = 1;\\n                r=0;\\n            }else{\\n                div[i] = 0;\\n                r=val%m;\\n            }\\n            \\n        }\\n        return div;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231052,
                "title": "easy-c-code-beats-100-solutions-o-n-time-stepwise-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLet\\'s understand the solution i provided by taking the given example : \\ns = \"998244353\", m = 3\\n\\nConsider a variable x=0;\\n\\nNow, For\\n```\\ni=0 => {  n = 9\\n          => x = 0*10 + (s[0]-\\'0\\') \\n          => x = 9\\n          => x = 9%3 = 0\\n          => x=0 implies given number is divisble by m=3;\\n          => v[0]=1;\\n       }\\n\\ni=1 => {  n = 99 , x=0 (from i=0 iteration)\\n          => x = 0*10 + (s[1]-\\'0\\') \\n          => x = 9 \\n```\\n(just checking for 9 here out of 99 because from the previous iteration we got that 9 is divisible by 3, so if we multiply it with 10, still it will be divisble by 3, so why to make it more complex? leave 90 and just check for 9)\\n```\\n          => x = 9%3 = 0   (x = 99%3 = 90%3 + 9%3 = 0+0 =0)\\n          => x=0 implies given number is divisble by m=3;\\n          => v[1]=1;\\n       }\\n\\ni=2 => {  n = 998 , x=0 (from i=1 iteration)\\n          => x = 0*10 + (s[2]-\\'0\\') \\n          => x = 8 (just checking for 8 here out of 998 because 990 is divisible by 3)\\n          => x = 8%3 = 2 (x = 998%3 = 990%3 + 8%3 = 0+2 =2)\\n          => x!=0 implies given number is not divisble by m=3;\\n          => v[2]=0;\\n       }\\ni=3 => {  n = 9982 , x=2 (from i=2 iteration)\\n          => x = 2*10 + (s[3]-\\'0\\') \\n          => x = 22 \\n```\\n(just checking for 22 here out of 9982 because from the previous iteration we got that 998 leaves remainder = 2 on dividing by 3 ==> 996 is divisible by 3, so if we multiply it with 10, still it will be divisble by 3, so why to make it more complex? leave 9960 and just check for 22)\\n```\\n          => x = 22%3 = 1 (x = 9982%3 = 9960%3 + 22%3 = 0+1 =1)\\n          => x!=0 implies given number is not divisble by m=3;\\n          => v[3]=0;\\n       }\\ni=4 => {  n = 99824 , x=1 (from i=3 iteration)\\n          => x = 1*10 + (s[4]-\\'0\\') \\n          => x = 14 (just checking for 14 here out of 99824 because 99810 is divisible by 3)\\n          => x = 14%3 = 2 (x = 99824%3 = 99810%3 + 14%3 = 0+2 =2)\\n          => x!=0 implies given number is not divisble by m=3;\\n          => v[4]=0;\\n       }\\n\\nRepeat the steps for remaining iterations.\\n```\\nStill having doubts?\\nDrop a comment, will try my best to make u understand this. Thankyou!!\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n        \\n    vector<int> divisibilityArray(string s, int m) {\\n        int i,n=s.length();\\n        vector<int>v(n,0);\\n        long long x=0;\\n        for(i=0;i<n;i++){\\n            x=x*10+(s[i]-\\'0\\');\\n            x=x%m;\\n            if(x==0)v[i]=1;\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\ni=0 => {  n = 9\\n          => x = 0*10 + (s[0]-\\'0\\') \\n          => x = 9\\n          => x = 9%3 = 0\\n          => x=0 implies given number is divisble by m=3;\\n          => v[0]=1;\\n       }\\n\\ni=1 => {  n = 99 , x=0 (from i=0 iteration)\\n          => x = 0*10 + (s[1]-\\'0\\') \\n          => x = 9 \\n```\n```\\n          => x = 9%3 = 0   (x = 99%3 = 90%3 + 9%3 = 0+0 =0)\\n          => x=0 implies given number is divisble by m=3;\\n          => v[1]=1;\\n       }\\n\\ni=2 => {  n = 998 , x=0 (from i=1 iteration)\\n          => x = 0*10 + (s[2]-\\'0\\') \\n          => x = 8 (just checking for 8 here out of 998 because 990 is divisible by 3)\\n          => x = 8%3 = 2 (x = 998%3 = 990%3 + 8%3 = 0+2 =2)\\n          => x!=0 implies given number is not divisble by m=3;\\n          => v[2]=0;\\n       }\\ni=3 => {  n = 9982 , x=2 (from i=2 iteration)\\n          => x = 2*10 + (s[3]-\\'0\\') \\n          => x = 22 \\n```\n```\\n          => x = 22%3 = 1 (x = 9982%3 = 9960%3 + 22%3 = 0+1 =1)\\n          => x!=0 implies given number is not divisble by m=3;\\n          => v[3]=0;\\n       }\\ni=4 => {  n = 99824 , x=1 (from i=3 iteration)\\n          => x = 1*10 + (s[4]-\\'0\\') \\n          => x = 14 (just checking for 14 here out of 99824 because 99810 is divisible by 3)\\n          => x = 14%3 = 2 (x = 99824%3 = 99810%3 + 14%3 = 0+2 =2)\\n          => x!=0 implies given number is not divisble by m=3;\\n          => v[4]=0;\\n       }\\n\\nRepeat the steps for remaining iterations.\\n```\n```\\nclass Solution {\\npublic:\\n        \\n    vector<int> divisibilityArray(string s, int m) {\\n        int i,n=s.length();\\n        vector<int>v(n,0);\\n        long long x=0;\\n        for(i=0;i<n;i++){\\n            x=x*10+(s[i]-\\'0\\');\\n            x=x%m;\\n            if(x==0)v[i]=1;\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230964,
                "title": "c-modular-arithmetic",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n vector<int> divisibilityArray(string s ,int m)\\n{\\n    int n = s.size();\\n    int i = 0;\\n    // ll num = 0;\\n    vector<int> res(n, 0);\\n    string temp = \"\";\\n    long long int sum=0;\\n    for (int i = 0; i < s.size(); i++)\\n    {\\n        sum*=10;\\n        sum+=s[i]-\\'0\\';\\n        sum%=m;\\n        if (sum==0)\\n        {\\n           res[i]=1;\\n        }\\n        else\\n        {\\n            res[i]=0;\\n        }\\n        \\n        \\n            \\n    }\\n\\n    return res;\\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n vector<int> divisibilityArray(string s ,int m)\\n{\\n    int n = s.size();\\n    int i = 0;\\n    // ll num = 0;\\n    vector<int> res(n, 0);\\n    string temp = \"\";\\n    long long int sum=0;\\n    for (int i = 0; i < s.size(); i++)\\n    {\\n        sum*=10;\\n        sum+=s[i]-\\'0\\';\\n        sum%=m;\\n        if (sum==0)\\n        {\\n           res[i]=1;\\n        }\\n        else\\n        {\\n            res[i]=0;\\n        }\\n        \\n        \\n            \\n    }\\n\\n    return res;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230909,
                "title": "python3-prefix-modulo-sum",
                "content": "\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        ans = []\\n        prefix = 0 \\n        for i, x in enumerate(word): \\n            prefix = 10*prefix + ord(x) - 48\\n            prefix %= m \\n            if prefix == 0: ans.append(1)\\n            else: ans.append(0)\\n        return ans \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        ans = []\\n        prefix = 0 \\n        for i, x in enumerate(word): \\n            prefix = 10*prefix + ord(x) - 48\\n            prefix %= m \\n            if prefix == 0: ans.append(1)\\n            else: ans.append(0)\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231078,
                "title": "python-naive-and-fast-approach-mod-of-a-big-number",
                "content": "## Naive solution. TLE\\nDerive the number from string and check if divisble, just as described in the question. TLE due to large modulo operations.\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        num = int(word[0])\\n        div = [1 if num % m == 0 else 0]\\n\\n        for i in range(1, len(word)):\\n            num = int(word[0: i + 1])\\n            div.append(1 if num % m == 0 else 0)\\n        return div\\n```\\n\\n## Faster solution. No TLE\\nUsing the mathematical property that\\n`ab (mod m) \\u2261 ((a (mod m) * 10) + (b (mod m))) mod m`\\nWe can compute and store the mod of current digit and use it for the next digit. No TLE due to small modulo operations.\\n\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        mod = 0\\n        div = []\\n\\n        for i in range(0, len(word)):\\n            mod = (mod * 10 + int(word[i])) % m\\n            div.append(1 if mod % m == 0 else 0)\\n        return div\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        num = int(word[0])\\n        div = [1 if num % m == 0 else 0]\\n\\n        for i in range(1, len(word)):\\n            num = int(word[0: i + 1])\\n            div.append(1 if num % m == 0 else 0)\\n        return div\\n```\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        mod = 0\\n        div = []\\n\\n        for i in range(0, len(word)):\\n            mod = (mod * 10 + int(word[i])) % m\\n            div.append(1 if mod % m == 0 else 0)\\n        return div\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232409,
                "title": "simple-solution",
                "content": "# Intuition\\nDevidability could be calculated iteratively\\n# Approach\\nLet\\'s iterate the word char by char. Let\\'s consider new character addition. If at ith step we had `k(i)` and we need to add `c` at current step `k(i+1) = 10*k(i) + c`. We can split `k(i)` as `n*m + r` where `r` is `k(i) mod m`. So `k(i+1) = 10*(n*m + r) + c= 10*n*m + 10r + c`. So to check if `k(i+1)` could be devided by `m` we need to check of `10r + c` could be devided by `m`.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```javascript []\\nvar divisibilityArray = function(word, m) {\\n    const result = (new Array(word.length)).fill(0)\\n    let rest = 0\\n    for(let i = 0; i < word.length; i++) {\\n        rest = (rest * 10 + (word[i] - \\'0\\')) % m\\n        if(rest == 0){\\n            result[i] = 1\\n        }\\n    }\\n    \\n    return result\\n};\\n```\\n```python []\\nclass Solution(object):\\n    def divisibilityArray(self, word, m):\\n        \"\"\"\\n        :type word: str\\n        :type m: int\\n        :rtype: List[int]\\n        \"\"\"\\n        temp = 0\\n        res = [0] * len(word)\\n        for i in range(len(word)):\\n            temp = (temp * 10 + int(word[i])) % m\\n            if temp == 0:\\n                res[i] = 1\\n                \\n        return res\\n```\\n",
                "solutionTags": [
                    "Python",
                    "JavaScript"
                ],
                "code": "```javascript []\\nvar divisibilityArray = function(word, m) {\\n    const result = (new Array(word.length)).fill(0)\\n    let rest = 0\\n    for(let i = 0; i < word.length; i++) {\\n        rest = (rest * 10 + (word[i] - \\'0\\')) % m\\n        if(rest == 0){\\n            result[i] = 1\\n        }\\n    }\\n    \\n    return result\\n};\\n```\n```python []\\nclass Solution(object):\\n    def divisibilityArray(self, word, m):\\n        \"\"\"\\n        :type word: str\\n        :type m: int\\n        :rtype: List[int]\\n        \"\"\"\\n        temp = 0\\n        res = [0] * len(word)\\n        for i in range(len(word)):\\n            temp = (temp * 10 + int(word[i])) % m\\n            if temp == 0:\\n                res[i] = 1\\n                \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232372,
                "title": "c-easy-math",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string v, int m) {\\n       long long k=0;\\n        int n=v.size();\\n        vector<int>ans(n);\\n        for(int i=0;i<v.size();i++){\\n            k = k*10 + (v[i]-\\'0\\');\\n            k%=m;\\n            if(k)ans[i]=0;\\n            else ans[i]=1;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n![upvote (2).jpg](https://assets.leetcode.com/users/images/fc1c0170-5008-4ba2-8a8c-409ed4e1641d_1677407615.173322.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string v, int m) {\\n       long long k=0;\\n        int n=v.size();\\n        vector<int>ans(n);\\n        for(int i=0;i<v.size();i++){\\n            k = k*10 + (v[i]-\\'0\\');\\n            k%=m;\\n            if(k)ans[i]=0;\\n            else ans[i]=1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231112,
                "title": "c-with-explanation",
                "content": "# Problem Statement Explanation\\n-   The problem asks to find the divisibility array of a given string. The divisibility array is an array of 0\\'s and 1\\'s with length equal to the length of the string. The i-th element of the array is 1 if the numeric value of the substring from the beginning of the string up to the i-th character is divisible by a given number m, otherwise, it is 0.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n-   The approach to solving the problem is to keep track of the numeric value of the substring from the beginning of the string up to the current character using a variable \\'a\\'. The variable \\'a\\' is initialized to 0 and updated by multiplying it by 10 and adding the value of the current character in the string, and then taking the modulo with m. If the value of \\'a\\' is divisible by m, then the current character is part of a substring that is divisible by m, and the corresponding element in the divisibility array is set to 1. Otherwise, the corresponding element is set to 0.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n    - The time complexity of the solution is $$O(n)$$, where n is the length of the string, since we process each character in the string exactly once.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n    - The space complexity is also $$O(n)$$, since we need to store the divisibility array of length n.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        string s=\"\";\\n        long long int a=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            \\n            a=(a*10+word[i]-\\'0\\')%m;\\n            if(a%m==0)\\n                ans.push_back(1);\\n            else\\n                ans.push_back(0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        string s=\"\";\\n        long long int a=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            \\n            a=(a*10+word[i]-\\'0\\')%m;\\n            if(a%m==0)\\n                ans.push_back(1);\\n            else\\n                ans.push_back(0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230940,
                "title": "simple-4-liner-solution-module-always",
                "content": "# Complexity\\n- Time `O(N)`\\n- Space `O(1) #if res list is ignore.`\\n# Code\\n```\\nclass Solution(object):\\n    def divisibilityArray(self, word, m):\\n        res, num = [], 0\\n        for digit in word:\\n            num = ((num * 10) + int(digit)) % m\\n            res.append(1) if num == 0 else res.append(0)\\n        return res\\n```\\n**UpVote**, if you like it :)",
                "solutionTags": [
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution(object):\\n    def divisibilityArray(self, word, m):\\n        res, num = [], 0\\n        for digit in word:\\n            num = ((num * 10) + int(digit)) % m\\n            res.append(1) if num == 0 else res.append(0)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230847,
                "title": "c-simple-modulation",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.size();\\n        vector<int> ans(n,0);\\n        long long val=0;\\n        for(int i=0;i<n;i++){\\n            val = (val*10 + word[i]-\\'0\\')%m;\\n            if(val%m == 0){\\n                ans[i] = 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.size();\\n        vector<int> ans(n,0);\\n        long long val=0;\\n        for(int i=0;i<n;i++){\\n            val = (val*10 + word[i]-\\'0\\')%m;\\n            if(val%m == 0){\\n                ans[i] = 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3233342,
                "title": "c-solutions-brute-force-two-methods",
                "content": "\\n# Approach\\nBRUTE FORCE APPROACH & EASY TO UNDERSTAND\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n         vector<int> dips;\\n        long long  sum=0;\\n        for(auto it:word)\\n        {\\n          \\n          sum= sum*10+(it-\\'0\\');\\n           sum=sum%m;\\n            if(sum==0)\\n            \\n                dips.push_back(1);\\n            else\\n                 dips.push_back(0);\\n            \\n            \\n        }\\n        return dips;\\n    }\\n};\\n\\n\\n\\n\\n************************ANOTHER METHOD :) **************************\\n\\n\\n\\nclass Solution {\\npublic:\\nvector<int> divisibilityArray(string word, int m) {\\n         vector<int> dips(word.size(),0);\\n        long long  sum=0;\\n        for(int i=0; i<word.length();i++)\\n        {\\n          \\n          sum= sum*10+(word[i]-\\'0\\');\\n           sum=sum%m;\\n            if(sum==0)\\n            {\\n                dips[i]=1;\\n            }\\n            \\n        }\\n        return dips;\\n    }\\n};\\n\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n         vector<int> dips;\\n        long long  sum=0;\\n        for(auto it:word)\\n        {\\n          \\n          sum= sum*10+(it-\\'0\\');\\n           sum=sum%m;\\n            if(sum==0)\\n            \\n                dips.push_back(1);\\n            else\\n                 dips.push_back(0);\\n            \\n            \\n        }\\n        return dips;\\n    }\\n};\\n\\n\\n\\n\\n************************ANOTHER METHOD :) **************************\\n\\n\\n\\nclass Solution {\\npublic:\\nvector<int> divisibilityArray(string word, int m) {\\n         vector<int> dips(word.size(),0);\\n        long long  sum=0;\\n        for(int i=0; i<word.length();i++)\\n        {\\n          \\n          sum= sum*10+(word[i]-\\'0\\');\\n           sum=sum%m;\\n            if(sum==0)\\n            {\\n                dips[i]=1;\\n            }\\n            \\n        }\\n        return dips;\\n    }\\n};\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3236407,
                "title": "java-using-modular-operation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n    int n = word.length();\\n    int[] div = new int[n];\\n    long num = 0;\\n    for (int i = 0; i < n; i++) {\\n        long digit = word.charAt(i) - \\'0\\';\\n        num = (num * 10 + digit) % m;\\n        div[i] = (num == 0) ? 1 : 0;\\n    }\\n    return div;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n    int n = word.length();\\n    int[] div = new int[n];\\n    long num = 0;\\n    for (int i = 0; i < n; i++) {\\n        long digit = word.charAt(i) - \\'0\\';\\n        num = (num * 10 + digit) % m;\\n        div[i] = (num == 0) ? 1 : 0;\\n    }\\n    return div;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3233901,
                "title": "python-3-5-lines-w-example-t-m-556-ms-23-mb",
                "content": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n\\n                                                # Example: word = \"982443\"\\n        rem, ans, word = 0, [], map(int,word)   # <--      word = [9,8,2,4,4,3]\\n\\n                                                #  ch  rem                 ans\\n        for ch in word:                         # \\u2013\\u2013\\u2013  \\u2013\\u2013\\u2013                 \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\n            rem = (10*rem + ch)%m               #       0                  []\\n                                                #  9    (10*0+9)%3 = 0     [1]\\n            ans.append(bool(rem)^1)             #  8    (10*0+8)%3 = 2     [1,0]\\n                                                #  2    (10*2+2)%3 = 1     [1,0,0]\\n        return ans                              #  4    (10*1+4)%3 = 2     [1,0,0,0]\\n                                                #  4    (10*2+4)%3 = 0     [1,0,0,0,1]\\n                                                #  3    (10*0+3)%3 = 0     [1,0,0,0,1,1]\\n```\\n[https://leetcode.com/problems/find-the-divisibility-array-of-a-string/submissions/905480636/](http://)\\n\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(*N*).",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n\\n                                                # Example: word = \"982443\"\\n        rem, ans, word = 0, [], map(int,word)   # <--      word = [9,8,2,4,4,3]\\n\\n                                                #  ch  rem                 ans\\n        for ch in word:                         # \\u2013\\u2013\\u2013  \\u2013\\u2013\\u2013                 \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\n            rem = (10*rem + ch)%m               #       0                  []\\n                                                #  9    (10*0+9)%3 = 0     [1]\\n            ans.append(bool(rem)^1)             #  8    (10*0+8)%3 = 2     [1,0]\\n                                                #  2    (10*2+2)%3 = 1     [1,0,0]\\n        return ans                              #  4    (10*1+4)%3 = 2     [1,0,0,0]\\n                                                #  4    (10*2+4)%3 = 0     [1,0,0,0,1]\\n                                                #  3    (10*0+3)%3 = 0     [1,0,0,0,1,1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231011,
                "title": "clean-short-java",
                "content": "# Complexity\\n- Time complexity:\\n O(n)\\n\\n# Code\\n```java []\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] res = new int[word.length()];\\n        long rem = 0;\\n        for (int i = 0; i < word.length(); i++) {\\n            rem = (rem * 10 + word.charAt(i)-\\'0\\') % m;\\n            res[i] =rem == 0 ? 1 : 0;\\n        }\\n        return res;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] res = new int[word.length()];\\n        long rem = 0;\\n        for (int i = 0; i < word.length(); i++) {\\n            rem = (rem * 10 + word.charAt(i)-\\'0\\') % m;\\n            res[i] =rem == 0 ? 1 : 0;\\n        }\\n        return res;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230913,
                "title": "java-9-lines-o-n-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public int[] divisibilityArray(String word, int m) {\\n    var n = word.length();\\n    var ans = new int[n];\\n    var carry = 0L;\\n    \\n    for (var i=0; i<n; i++) {\\n      var a = word.charAt(i) - \\'0\\';\\n      var mod = (carry * 10 + a) % m;\\n      \\n      ans[i] = mod == 0 ? 1 : 0;\\n      carry = mod;\\n    }\\n    return ans;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public int[] divisibilityArray(String word, int m) {\\n    var n = word.length();\\n    var ans = new int[n];\\n    var carry = 0L;\\n    \\n    for (var i=0; i<n; i++) {\\n      var a = word.charAt(i) - \\'0\\';\\n      var mod = (carry * 10 + a) % m;\\n      \\n      ans[i] = mod == 0 ? 1 : 0;\\n      carry = mod;\\n    }\\n    return ans;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230814,
                "title": "c-o-n-time-o-1-space-modulo",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int len = word.length();\\n        vector<int> ans;\\n        \\n        long long rem = 0;\\n \\n        for (int i = 0; i <len;i++){\\n            rem = (rem * 10 + (word[i] - \\'0\\') )%m;\\n            ans.push_back(rem==0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int len = word.length();\\n        vector<int> ans;\\n        \\n        long long rem = 0;\\n \\n        for (int i = 0; i <len;i++){\\n            rem = (rem * 10 + (word[i] - \\'0\\') )%m;\\n            ans.push_back(rem==0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3257085,
                "title": "easy-python-solution",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def divisibilityArray(self, word, m):\\n        \"\"\"\\n        :type word: str\\n        :type m: int\\n        :rtype: List[int]\\n        \"\"\"\\n        lst=[]\\n        s=0\\n        for i in word:\\n            s+=int(i)\\n            if s%m==0:\\n                lst.append(1)\\n            else:\\n                lst.append(0)\\n            s=(s%m)*10\\n        return lst\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def divisibilityArray(self, word, m):\\n        \"\"\"\\n        :type word: str\\n        :type m: int\\n        :rtype: List[int]\\n        \"\"\"\\n        lst=[]\\n        s=0\\n        for i in word:\\n            s+=int(i)\\n            if s%m==0:\\n                lst.append(1)\\n            else:\\n                lst.append(0)\\n            s=(s%m)*10\\n        return lst\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3243560,
                "title": "python-easy-intuitive-solution-beats-96-57-time",
                "content": "# Intuition\\nWe have to check only remainder of division by m.\\n\\n# Approach\\nWe iterate over all digits and update remainder of division by `m`.\\nSo, at digit `word[i]`, `new remainder` equals `(previous remainder * 10 + word[i]) % m`.  \\n\\n\\n# Code\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        ans = []\\n        remainder = 0\\n        \\n        for n in word:\\n            remainder = (remainder * 10 + int(n)) % m\\n            if remainder == 0:\\n                ans.append(1)\\n            else:\\n                ans.append(0)\\n        \\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        ans = []\\n        remainder = 0\\n        \\n        for n in word:\\n            remainder = (remainder * 10 + int(n)) % m\\n            if remainder == 0:\\n                ans.append(1)\\n            else:\\n                ans.append(0)\\n        \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231074,
                "title": "short-concise-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        long long s = 0;\\n        for(char c : word) {\\n            s = (s * 10 + (int)c - \\'0\\') % m;    \\n            ans.push_back(!s ? 1 : 0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        long long s = 0;\\n        for(char c : word) {\\n            s = (s * 10 + (int)c - \\'0\\') % m;    \\n            ans.push_back(!s ? 1 : 0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231033,
                "title": "js-keep-the-module-of-previous-digit",
                "content": "\\n```\\nvar divisibilityArray = function(word, m) {\\n    const n = word.length;\\n    const ans = new Array(n).fill(0);\\n    let num = 0;\\n    for(let i = 0; i<n; i++) {\\n        num += parseInt(word[i]);\\n        if( num % m === 0) {\\n            ans[i] = 1;\\n        }\\n        num = (num * 10)  % m; // important step\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar divisibilityArray = function(word, m) {\\n    const n = word.length;\\n    const ans = new Array(n).fill(0);\\n    let num = 0;\\n    for(let i = 0; i<n; i++) {\\n        num += parseInt(word[i]);\\n        if( num % m === 0) {\\n            ans[i] = 1;\\n        }\\n        num = (num * 10)  % m; // important step\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3231004,
                "title": "c-time-o-n-space-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.length(),i;\\n        long long int x=0;\\n        vector<int> ans(n,0);\\n        for(i = 0; i < n; i++){\\n            x = x*10+(word[i]-\\'0\\');\\n            x = x%m;\\n            if(x==0){\\n                ans[i] = 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.length(),i;\\n        long long int x=0;\\n        vector<int> ans(n,0);\\n        for(i = 0; i < n; i++){\\n            x = x*10+(word[i]-\\'0\\');\\n            x = x%m;\\n            if(x==0){\\n                ans[i] = 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230874,
                "title": "c-with-approach-stringstream-modulo-trick",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- use stringstream to convert string to int\\n- when string can not be divide keep the modulo, try it on 1st testcase you will understand.\\n- when it is divisible then make the string empty as we dont want tle.\\n\\n\\n# Code\\n```\\n#include<bits/stdc++.h>\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> res;\\n        \\n        string str= \"\", rem = \"\";\\n        for(int i=0; i<word.size(); i++){\\n            str += word[i];\\n            \\n            stringstream ss;\\n            long long num;\\n            \\n            ss << str;\\n            ss >> num;\\n            \\n            // int num = stoi(str);\\n            if(num%m==0) str = \"\";\\n            else str = to_string(num%m);\\n            \\n            res.push_back(!(num%m));\\n        }\\n        \\n        return res;\\n    }\\n};\\n\\n//<!-- If you find it helpful, do upvote:) -->\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> res;\\n        \\n        string str= \"\", rem = \"\";\\n        for(int i=0; i<word.size(); i++){\\n            str += word[i];\\n            \\n            stringstream ss;\\n            long long num;\\n            \\n            ss << str;\\n            ss >> num;\\n            \\n            // int num = stoi(str);\\n            if(num%m==0) str = \"\";\\n            else str = to_string(num%m);\\n            \\n            res.push_back(!(num%m));\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3230868,
                "title": "python-o-n",
                "content": "# Approach\\n- We will keep track of remainder till `ith` index.\\n- If `rem % m == 0` the add 1, otherwise 0.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        ans = []\\n        n = 0\\n        for i in word:\\n            n = (n*10+int(i))%m\\n            if n==0:\\n                ans.append(1)\\n            else:\\n                ans.append(0)\\n        return ans\\n        \\n```\\n---------------\\n**Upvote the post if you find it helpful.\\nHappy coding.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        ans = []\\n        n = 0\\n        for i in word:\\n            n = (n*10+int(i))%m\\n            if n==0:\\n                ans.append(1)\\n            else:\\n                ans.append(0)\\n        return ans\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230815,
                "title": "best-solution-in-c",
                "content": "\\n\\n\\n# Code\\n### PLease Upvote if u liked my Solution\\uD83E\\uDD17\\n```\\nclass Solution {\\npublic:\\n    long num=0;\\n    bool divisible(char s,int m){\\n        int x=s-\\'0\\';\\n        num=(num*10)%m + x;\\n        if(num%m==0)\\n            return true;\\n        return false;\\n    }\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n=word.size();\\n        vector<int> ans;\\n        for(int i=0;i<n;i++){\\n            if(divisible(word[i],m))\\n                ans.push_back(1);\\n            else\\n                ans.push_back(0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long num=0;\\n    bool divisible(char s,int m){\\n        int x=s-\\'0\\';\\n        num=(num*10)%m + x;\\n        if(num%m==0)\\n            return true;\\n        return false;\\n    }\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n=word.size();\\n        vector<int> ans;\\n        for(int i=0;i<n;i++){\\n            if(divisible(word[i],m))\\n                ans.push_back(1);\\n            else\\n                ans.push_back(0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230808,
                "title": "java",
                "content": "```\\n\\nimport java.math.BigInteger;\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int ans[]=new int[word.length()];\\n        long num=0;\\n        int k=0;\\n        for(int i=0;i<word.length();i++){\\n            int curr=word.charAt(i)-\\'0\\';\\n            num=(num*10+(curr))%m;\\n            if(num==0){\\n                ans[k++]=1;\\n            }\\n            else\\n                ans[k++]=0;\\n        }\\n        return ans;\\n    }\\n}\\n```\\n![image](https://assets.leetcode.com/users/images/fb74b2ff-f4af-4386-bd10-c9fc3b86438a_1677384097.22354.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nimport java.math.BigInteger;\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int ans[]=new int[word.length()];\\n        long num=0;\\n        int k=0;\\n        for(int i=0;i<word.length();i++){\\n            int curr=word.charAt(i)-\\'0\\';\\n            num=(num*10+(curr))%m;\\n            if(num==0){\\n                ans[k++]=1;\\n            }\\n            else\\n                ans[k++]=0;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230774,
                "title": "javascript-tc-o-n-sc-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} word\\n * @param {number} m\\n * @return {number[]}\\n */\\nvar divisibilityArray = function(word, m) {\\n    const ans = [];\\n\\n    let num = 0, carry = 0;\\n    \\n    for (let i = 0; i < word.length; i++) {\\n        num = Number(carry + word[i]);\\n        carry = num % m;\\n        ans.push(carry ? 0 : 1);\\n    }\\n    \\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} word\\n * @param {number} m\\n * @return {number[]}\\n */\\nvar divisibilityArray = function(word, m) {\\n    const ans = [];\\n\\n    let num = 0, carry = 0;\\n    \\n    for (let i = 0; i < word.length; i++) {\\n        num = Number(carry + word[i]);\\n        carry = num % m;\\n        ans.push(carry ? 0 : 1);\\n    }\\n    \\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3923589,
                "title": "beats-75-easy-o-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.length();\\n        long long num = 0;\\n        vector<int> div(n, 0);\\n        long long rem = 0;\\n        for(int i = 0; i<n; i++){\\n            num = word[i] - \\'0\\';\\n            num += rem*10;\\n            if(num%m == 0) {div[i] = 1; rem = 0;}\\n            else{\\n                rem = num%m;\\n            }\\n        }\\n        return div;\\n    }\\n};\\n// 998244353\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.length();\\n        long long num = 0;\\n        vector<int> div(n, 0);\\n        long long rem = 0;\\n        for(int i = 0; i<n; i++){\\n            num = word[i] - \\'0\\';\\n            num += rem*10;\\n            if(num%m == 0) {div[i] = 1; rem = 0;}\\n            else{\\n                rem = num%m;\\n            }\\n        }\\n        return div;\\n    }\\n};\\n// 998244353\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3649568,
                "title": "easy-solution-98-memory-beat-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.size();\\n        vector<int> ans(n , 1);\\n        long num = 0;\\n        for(int i=0; i<n; i++){\\n            num = num*10+(word[i]-\\'0\\');\\n            if(num%m != 0){\\n                ans[i] = 0;\\n            }\\n            num = num%m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.size();\\n        vector<int> ans(n , 1);\\n        long num = 0;\\n        for(int i=0; i<n; i++){\\n            num = num*10+(word[i]-\\'0\\');\\n            if(num%m != 0){\\n                ans[i] = 0;\\n            }\\n            num = num%m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3628862,
                "title": "very-simple-c",
                "content": "# if it Helps You, Upvote me Please...!\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nProblem Looks very Easy  but think about **Overflow Condition (string size > 19)**,to handle this Problem **Use reminder** to check the divisibility.\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.size();\\n        long long num = 0;\\n        vector<int> ans(n,0);\\n\\n        for(int i = 0;i<n;i++)\\n        {\\n            int x  = word[i]-\\'0\\';\\n            num = (num*10+x)%m;\\n\\n            if(num%m==0)\\n            ans[i] = 1;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/5614d8f9-ebc8-4710-b0db-5e6e06ff2786_1686564360.5083742.jpeg)",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.size();\\n        long long num = 0;\\n        vector<int> ans(n,0);\\n\\n        for(int i = 0;i<n;i++)\\n        {\\n            int x  = word[i]-\\'0\\';\\n            num = (num*10+x)%m;\\n\\n            if(num%m==0)\\n            ans[i] = 1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3494095,
                "title": "easy-and-simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach \\n<!-- Describe your approach to solving the problem. -->BruteForce\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) \\n    {\\n       vector<int>v;\\n       long long int i=0;\\n       int n= word.size();\\n       long long int mod=0;\\n       while(i<n )\\n    {\\n        mod = (mod * 10 + word[i] - \\'0\\') % m; //checking each element\\n        if(mod==0)\\n        v.push_back(1);\\n        else\\n        v.push_back(0);\\n        i++;\\n    }\\n    return v;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) \\n    {\\n       vector<int>v;\\n       long long int i=0;\\n       int n= word.size();\\n       long long int mod=0;\\n       while(i<n )\\n    {\\n        mod = (mod * 10 + word[i] - \\'0\\') % m; //checking each element\\n        if(mod==0)\\n        v.push_back(1);\\n        else\\n        v.push_back(0);\\n        i++;\\n    }\\n    return v;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3458651,
                "title": "short-crisp",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int>div;\\n        long long int x=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            x=x*10+(word[i]-\\'0\\');\\n            x=x%m;\\n            if(x==0)\\n            div.push_back(1);\\n            else\\n            div.push_back(0);\\n        }\\n        return div;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int>div;\\n        long long int x=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            x=x*10+(word[i]-\\'0\\');\\n            x=x%m;\\n            if(x==0)\\n            div.push_back(1);\\n            else\\n            div.push_back(0);\\n        }\\n        return div;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3273102,
                "title": "java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n    int n = word.length();\\n    int[] div = new int[n];\\n    long num = 0;\\n    for (int i = 0; i < n; i++) {\\n        long digit = word.charAt(i) - \\'0\\';\\n        num = (num * 10 + digit) % m;\\n        div[i] = (num == 0) ? 1 : 0;\\n    }\\n    return div;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n    int n = word.length();\\n    int[] div = new int[n];\\n    long num = 0;\\n    for (int i = 0; i < n; i++) {\\n        long digit = word.charAt(i) - \\'0\\';\\n        num = (num * 10 + digit) % m;\\n        div[i] = (num == 0) ? 1 : 0;\\n    }\\n    return div;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3251832,
                "title": "java-easy-simple",
                "content": "# Java\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        \\n        int l = word.length();\\n        int[] ans = new int[l];\\n        long num = 0;\\n        \\n        for (int i = 0; i < l; i++) {\\n            num = (num * 10) + (word.charAt(i) - \\'0\\');\\n            \\n            if (num % m == 0) ans[i] = 1;\\n            else ans[i] = 0;\\n\\n            num %= m;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        \\n        int l = word.length();\\n        int[] ans = new int[l];\\n        long num = 0;\\n        \\n        for (int i = 0; i < l; i++) {\\n            num = (num * 10) + (word.charAt(i) - \\'0\\');\\n            \\n            if (num % m == 0) ans[i] = 1;\\n            else ans[i] = 0;\\n\\n            num %= m;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3234895,
                "title": "java-o-stringlength-time-and-o-stringlength-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe can form numbers by appending digits, but that leads to the problem of exceeding the numeric range of int/long.\\n\\nConsider the example given in the problem\\nInput: word = \"998244353\", m = 3\\nOutput: [1,1,0,0,0,1,1,0,0]\\n\\nStart scanning from left\\nWe get the number 9\\n9 % 3 = 0 - so divisibility = 1\\nNext number will be 99 and 99 % 3 = 0 - so divisibility is 1 again\\nNext number will be 998 and 998 % 3 = 2 so divisibility is 0.\\n\\nNow, observe this fact from basic modular arithmetic ...\\nIf (10x + y) % z = k, then\\n(10*(x % z) + y) % z is also k.\\n\\n9 % 3 = 0\\nDo we really need to compute the number 99 ? NO.\\n99 = 90 + 9\\n99% 3 = (10*(9 % 3) + 9) % 3 = 0\\nSimilarly we do not need to frame the next number 998\\n\\n998 % 3 = (10*(99 % 3) + 8) % 3 = 2 and so on\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nInstead of framing the full numbers, use the formula as\\nval = ((val * 10)%m + digit) % m\\n\\n# Complexity\\n- Time complexity: O(word.length)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(word.length)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int i, n = word.length();\\n        int[] result = new int[n];\\n        long val = 0;\\n\\n        for(i = 0; i < n; i++){\\n            val = ((val * 10)%m) + (long)(word.charAt(i) - \\'0\\');\\n            val = val % (long)m;\\n            if(val == 0){\\n                result[i] = 1;\\n            }else{\\n                result[i] = 0;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int i, n = word.length();\\n        int[] result = new int[n];\\n        long val = 0;\\n\\n        for(i = 0; i < n; i++){\\n            val = ((val * 10)%m) + (long)(word.charAt(i) - \\'0\\');\\n            val = val % (long)m;\\n            if(val == 0){\\n                result[i] = 1;\\n            }else{\\n                result[i] = 0;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3234892,
                "title": "c-simple-fast",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n=word.size();\\n        long long temp=0;\\n        vector<int>ans;\\n            for(int i=0;i<n;i++){\\n                // cout<<temp<<\" \";\\n                long long mod=(word[i]-\\'0\\')%m;\\n                temp=temp*10+mod;\\n                if(temp%m==0){\\n                    temp=0;\\n                    ans.push_back(1);\\n                }\\n                else{\\n                    temp=temp%m;\\n                    ans.push_back(0);\\n                }\\n            }\\n           return ans;\\n       \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n=word.size();\\n        long long temp=0;\\n        vector<int>ans;\\n            for(int i=0;i<n;i++){\\n                // cout<<temp<<\" \";\\n                long long mod=(word[i]-\\'0\\')%m;\\n                temp=temp*10+mod;\\n                if(temp%m==0){\\n                    temp=0;\\n                    ans.push_back(1);\\n                }\\n                else{\\n                    temp=temp%m;\\n                    ans.push_back(0);\\n                }\\n            }\\n           return ans;\\n       \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3233589,
                "title": "c-simple-math-division",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nApply simple school level division method\\n`Digit = rem * 10 + (s[i] - \\'0\\')`\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. store each character in `digit` and check divisibility with `m`\\n2. If digit divisible by `m` `push_back(1)`, otherwise `push_back(0)`\\n3. store remainder(`digit % m`) in `rem` variable to form next digit with next character of string.\\n4. Initially remaider is `0`.\\n5. return `divisibility` array;\\n# Complexity\\n- Time complexity:`O(n)`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:`O(n)`\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string s, int m) {\\n        \\n        int n = s.length();\\n        vector<int>div;\\n        \\n        long long remainder = 0;\\n\\n        for(int i=0;i<n;i++){\\n\\n            long long digit = remainder * 10 +(s[i] - \\'0\\');\\n\\n            if(digit % m == 0) div.push_back(1);\\n            else div.push_back(0);\\n\\n            remainder = digit % m;\\n        }\\n        return div;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string s, int m) {\\n        \\n        int n = s.length();\\n        vector<int>div;\\n        \\n        long long remainder = 0;\\n\\n        for(int i=0;i<n;i++){\\n\\n            long long digit = remainder * 10 +(s[i] - \\'0\\');\\n\\n            if(digit % m == 0) div.push_back(1);\\n            else div.push_back(0);\\n\\n            remainder = digit % m;\\n        }\\n        return div;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232065,
                "title": "kotlin-ez-solution",
                "content": "```\\nclass Solution {\\n    fun divisibilityArray(word: String, m: Int): IntArray {\\n        val ans = IntArray(word.length)\\n        val prevRemainder = StringBuilder()\\n\\n        for (i in word.indices) {\\n            val number = prevRemainder.append(word[i]).toString().toLong()\\n            if (number != 0L && number < m) {\\n                continue\\n            }\\n\\n            val remainder = number % m\\n            prevRemainder.clear()\\n\\n            if (remainder == 0L) {\\n                ans[i] = 1\\n            } else {\\n                prevRemainder.append(remainder)\\n            }\\n        }\\n\\n        return ans\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun divisibilityArray(word: String, m: Int): IntArray {\\n        val ans = IntArray(word.length)\\n        val prevRemainder = StringBuilder()\\n\\n        for (i in word.indices) {\\n            val number = prevRemainder.append(word[i]).toString().toLong()\\n            if (number != 0L && number < m) {\\n                continue\\n            }\\n\\n            val remainder = number % m\\n            prevRemainder.clear()\\n\\n            if (remainder == 0L) {\\n                ans[i] = 1\\n            } else {\\n                prevRemainder.append(remainder)\\n            }\\n        }\\n\\n        return ans\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231973,
                "title": "java-simple-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        int[] ans = new int[n];\\n        long num = 0;\\n\\n        for(int i = 0; i < n; i++){\\n            int digit = word.charAt(i) - \\'0\\';\\n            num = num * 10 + digit;\\n            if (num % m == 0) {\\n                ans[i] = 1;\\n                num = 0;\\n            } else {\\n                ans[i] = 0;\\n                num = num % m;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        int[] ans = new int[n];\\n        long num = 0;\\n\\n        for(int i = 0; i < n; i++){\\n            int digit = word.charAt(i) - \\'0\\';\\n            num = num * 10 + digit;\\n            if (num % m == 0) {\\n                ans[i] = 1;\\n                num = 0;\\n            } else {\\n                ans[i] = 0;\\n                num = num % m;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231589,
                "title": "answer-in-o-n-time-complexity-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool check(string &word, int k,   vector<int>&ans) {\\n    long long r = 0;\\n    for (auto i :word){\\n        r = ((r * 10) + i - \\'0\\') % k;\\n        if(r==0)ans.push_back(1);\\n        else ans.push_back(0);\\n    }\\n    return r== 0;\\n}\\n    vector<int> divisibilityArray(string word, int m) {\\n        string s;\\n        vector<int> ans;\\n         bool p = check(word,m,ans);\\n        return ans;\\n       \\n    \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool check(string &word, int k,   vector<int>&ans) {\\n    long long r = 0;\\n    for (auto i :word){\\n        r = ((r * 10) + i - \\'0\\') % k;\\n        if(r==0)ans.push_back(1);\\n        else ans.push_back(0);\\n    }\\n    return r== 0;\\n}\\n    vector<int> divisibilityArray(string word, int m) {\\n        string s;\\n        vector<int> ans;\\n         bool p = check(word,m,ans);\\n        return ans;\\n       \\n    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231488,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> div;\\n        \\n        long long int val=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            \\n           val=val*10;\\n           val=val+(word[i]-\\'0\\');\\n           val%=m;\\n            if(val%m==0)\\n            {\\n                div.push_back(1);\\n            }\\n            else\\n            {\\n                div.push_back(0);\\n                \\n            }\\n        }\\n        return div;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> div;\\n        \\n        long long int val=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            \\n           val=val*10;\\n           val=val+(word[i]-\\'0\\');\\n           val%=m;\\n            if(val%m==0)\\n            {\\n                div.push_back(1);\\n            }\\n            else\\n            {\\n                div.push_back(0);\\n                \\n            }\\n        }\\n        return div;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231425,
                "title": "o-n-python",
                "content": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        \\n        ans = []\\n        curr_str  = int(word[0])\\n        if curr_str % m == 0:\\n            ans.append(1)\\n        else:\\n            ans.append(0)\\n        \\n        for i in range(1,len(word)):\\n            \\n            current_num = int(word[i])\\n            curr_str = (curr_str*10)%m + current_num %m\\n            if curr_str%m  == 0:\\n                ans.append(1)\\n            else:\\n                ans.append(0)\\n            \\n        return ans\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        \\n        ans = []\\n        curr_str  = int(word[0])\\n        if curr_str % m == 0:\\n            ans.append(1)\\n        else:\\n            ans.append(0)\\n        \\n        for i in range(1,len(word)):\\n            \\n            current_num = int(word[i])\\n            curr_str = (curr_str*10)%m + current_num %m\\n            if curr_str%m  == 0:\\n                ans.append(1)\\n            else:\\n                ans.append(0)\\n            \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231339,
                "title": "simple-and-short-java-code-with-o-n-time-and-o-1-space",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere we take the previous remainder and append the current character and we take the remaider. If it is zero change div[i] to 1.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\uFF2F(\\uFF4E)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\uFF2F(\\uFF4E)\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        int[] div = new int[n];\\n        long curr;\\n        long rem=0;\\n        for(int i=0;i<n;i++){\\n            curr = rem*10+ word.charAt(i)-\\'0\\';\\n            rem = curr %m;\\n            if(rem==0){\\n                    div[i] = 1;\\n            }\\n        }\\n        return div;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        int[] div = new int[n];\\n        long curr;\\n        long rem=0;\\n        for(int i=0;i<n;i++){\\n            curr = rem*10+ word.charAt(i)-\\'0\\';\\n            rem = curr %m;\\n            if(rem==0){\\n                    div[i] = 1;\\n            }\\n        }\\n        return div;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231275,
                "title": "java-modulo-easy-solution",
                "content": "# Intuition\\nWe need a preSum from left to right. But preSum might overflow if the string is long enough. Since it just checks the divisibility, modulo operation will be considered.\\n\\n# Approach\\nIf (prevSum % m == r), prevSum can be written\\n    prevSum = k * m + r;\\n   \\nSum % m = (prevSum * 10 + currentNum) % m\\n        = ((k * m + r) * 10 + currentNum) % m\\n        = (r * 10 + currentNum) % m\\n\\nWe will get the same result to use either prevSum or the remainder of prevSum. \\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        long sum = 0;\\n        int[] res = new int[n];\\n        for (int i = 0; i < n; i++) {\\n        \\tsum = (sum * 10 + (word.charAt(i) - \\'0\\')) % m;\\n        \\tres[i] = sum == 0 ? 1 : 0;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        long sum = 0;\\n        int[] res = new int[n];\\n        for (int i = 0; i < n; i++) {\\n        \\tsum = (sum * 10 + (word.charAt(i) - \\'0\\')) % m;\\n        \\tres[i] = sum == 0 ? 1 : 0;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231131,
                "title": "easy-solution-with-linear-tc-and-constant-sc-using-modulo-operator",
                "content": "# Intuition\\nJust use modulo and rest will be done \\n\\n# Approach\\n#sort and simple\\n\\nIn 1st try i used substr and checked for each substing starting from 0 to i+1 weather it is divisble by m or not but it was giving TLE during the contest later i realized about modulo properties \\n![image.png](https://assets.leetcode.com/users/images/99623f5e-a270-4f29-8ac8-c7c97c5fa604_1677385224.792066.png)\\nif we take modulo of a number with k then the size of the number will get reduced and remaider will remain,\\nand again checking if(remainder%m == 0) will check if number is divisible by k or not;\\n\\n\\nnum = (num*10 + word[i]-\\'0\\')%m; \\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1) constatnt \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    vector<int> divisibilityArray(string word, int m) {\\n        int  size = word.size();\\n        vector<int> ans(size,0);\\n        long long  num = 0;\\n       for(int i =0;i<size;i++)\\n       {\\n        num = (num*10 + word[i]-\\'0\\')%m;\\n        if(num%m == 0)\\n        ans[i]=1;\\n       }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    vector<int> divisibilityArray(string word, int m) {\\n        int  size = word.size();\\n        vector<int> ans(size,0);\\n        long long  num = 0;\\n       for(int i =0;i<size;i++)\\n       {\\n        num = (num*10 + word[i]-\\'0\\')%m;\\n        if(num%m == 0)\\n        ans[i]=1;\\n       }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231034,
                "title": "c-easy-solution",
                "content": "**connect with me on linkedin** https://www.linkedin.com/in/raghav-upadhyay-80336b229/\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        // vector<int> vr;\\n        // long long int num=0;\\n        // for(int i=0;i<word.size();i++){\\n        //     num=num*10+(word[i]-\\'0\\');\\n        //     if(num%m==0)\\n        //         vr.push_back(1);\\n        //     else vr.push_back(0);\\n        // }\\n        // return vr;\\n        long long leftH = 0;\\n        int n = word.size();\\n        vector<int> results(word.size());\\n        for(int i=0;i<n;i++){\\n            long long p = word[i]-\\'0\\';\\n            long long tmp = leftH*10 + p;\\n            if(tmp%m==0){\\n                results[i]=1;\\n                leftH = 0;\\n            }\\n            else{\\n                results[i] = 0;\\n                leftH = tmp%m;\\n            }\\n        }\\n        return results;\\n        \\n    }\\n};\\n```\\n\\n# **Don\\'t fogot to upvote\\u2B06\\uFE0F**\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        // vector<int> vr;\\n        // long long int num=0;\\n        // for(int i=0;i<word.size();i++){\\n        //     num=num*10+(word[i]-\\'0\\');\\n        //     if(num%m==0)\\n        //         vr.push_back(1);\\n        //     else vr.push_back(0);\\n        // }\\n        // return vr;\\n        long long leftH = 0;\\n        int n = word.size();\\n        vector<int> results(word.size());\\n        for(int i=0;i<n;i++){\\n            long long p = word[i]-\\'0\\';\\n            long long tmp = leftH*10 + p;\\n            if(tmp%m==0){\\n                results[i]=1;\\n                leftH = 0;\\n            }\\n            else{\\n                results[i] = 0;\\n                leftH = tmp%m;\\n            }\\n        }\\n        return results;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231020,
                "title": "one-pass-solution-easy-to-understand",
                "content": "**To solve this problem, we can use the concept of modular arithmetic.**\\n\\n**Let\\'s say we have a number formed by the first i digits of the string \"word\". Let this number be represented by x. Then, we can determine if this number is divisible by m by checking if x % m equals zero.**\\n\\n**To compute the divisibility array div, we can iterate over the characters in the string \"word\" from left to right. For each character at index i, we compute the number formed by the first i+1 characters in the string \"word\", which is x = (x * 10 + (word.charAt(i) - \\'0\\')) % m. If x is divisible by m, then set div[i] to 1, otherwise set div[i] to 0.**\\n\\n**At the end of the iteration, the divisibility array div will contain the desired result.**\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n    int n = word.length();\\n    int[] div = new int[n];\\n    long num = 0;\\n    for (int i = 0; i < n; i++) {\\n        int digit = word.charAt(i) - \\'0\\';\\n        num = (num * 10 + digit) % m;\\n        if (num == 0) {\\n            div[i] = 1;\\n        }\\n    }\\n    return div;\\n    }\\n}\\n```\\n# Upvoting is Much Appreciated",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n    int n = word.length();\\n    int[] div = new int[n];\\n    long num = 0;\\n    for (int i = 0; i < n; i++) {\\n        int digit = word.charAt(i) - \\'0\\';\\n        num = (num * 10 + digit) % m;\\n        if (num == 0) {\\n            div[i] = 1;\\n        }\\n    }\\n    return div;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231009,
                "title": "2575-find-the-divisibility-array-of-a-string-python-easy-approach",
                "content": "# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        l = []\\n        rem = 0\\n        for i in word:\\n            rem = (rem * 10 +int(i))%m \\n            if rem%m==0:\\n                l.append(1)\\n            else:\\n                l.append(0)\\n        return l\\n        \\n```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        l = []\\n        rem = 0\\n        for i in word:\\n            rem = (rem * 10 +int(i))%m \\n            if rem%m==0:\\n                l.append(1)\\n            else:\\n                l.append(0)\\n        return l\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230976,
                "title": "java-short",
                "content": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int len = word.length();\\n        int[] ans = new int[len];\\n        long t = 0;\\n        for (int i = 0; i < len; i++) {\\n            t = (t * 10 + Character.getNumericValue(word.charAt(i)))%m;\\n            ans[i] = t == 0 ? 1 : 0;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int len = word.length();\\n        int[] ans = new int[len];\\n        long t = 0;\\n        for (int i = 0; i < len; i++) {\\n            t = (t * 10 + Character.getNumericValue(word.charAt(i)))%m;\\n            ans[i] = t == 0 ? 1 : 0;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230946,
                "title": "c-7-liners-solution-simulating-division-process",
                "content": "```\\nvector<int> divisibilityArray(string word, int m) \\n{\\n\\tvector<int> result;\\n\\tlong n=word.length(),c=0;\\n\\tfor(int i=0;i<n;i++)\\n\\t{\\n\\t\\tc=(c*10)+(word[i]-\\'0\\');\\n\\t\\tif(c>=m) c%=m;\\n\\t\\tresult.push_back(c==0);\\n\\t}\\n\\treturn result;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvector<int> divisibilityArray(string word, int m) \\n{\\n\\tvector<int> result;\\n\\tlong n=word.length(),c=0;\\n\\tfor(int i=0;i<n;i++)\\n\\t{\\n\\t\\tc=(c*10)+(word[i]-\\'0\\');\\n\\t\\tif(c>=m) c%=m;\\n\\t\\tresult.push_back(c==0);\\n\\t}\\n\\treturn result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3230900,
                "title": "python-simple-python-solution",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 570 ms, faster than 37.50% of Python3 online submissions for Find the Divisibility Array of a String.\\n# Memory Usage: 23.7 MB, less than 12.50% of Python3 online submissions for Find the Divisibility Array of a String.\\n\\n\\tclass Solution:\\n\\t\\tdef divisibilityArray(self, word: str, m: int) -> List[int]:\\n\\n\\t\\t\\tresult = [0 for _ in range(len(word))]\\n\\n\\t\\t\\tcurrent_num = 0\\n\\n\\t\\t\\tfor index in range(len(word)):\\n\\n\\t\\t\\t\\tcurrent_num = (current_num * 10 + (int(word[index]))) % m\\n\\n\\t\\t\\t\\tif current_num == 0:\\n\\t\\t\\t\\t\\tresult[index] = 1\\n\\n\\t\\t\\treturn result\\n\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 570 ms, faster than 37.50% of Python3 online submissions for Find the Divisibility Array of a String.\\n# Memory Usage: 23.7 MB, less than 12.50% of Python3 online submissions for Find the Divisibility Array of a String.\\n\\n\\tclass Solution:\\n\\t\\tdef divisibilityArray(self, word: str, m: int) -> List[int]:\\n\\n\\t\\t\\tresult = [0 for _ in range(len(word))]\\n\\n\\t\\t\\tcurrent_num = 0\\n\\n\\t\\t\\tfor index in range(len(word)):\\n\\n\\t\\t\\t\\tcurrent_num = (current_num * 10 + (int(word[index]))) % m\\n\\n\\t\\t\\t\\tif current_num == 0:\\n\\t\\t\\t\\t\\tresult[index] = 1\\n\\n\\t\\t\\treturn result\\n\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "codeTag": "Java"
            },
            {
                "id": 3230891,
                "title": "c-mod",
                "content": "# Code\\n```\\npublic class Solution \\n{\\n    public int[] DivisibilityArray(string word, int m) \\n    {\\n        int n = word.Length;\\n        int[] result = new int[n];\\n        long sum = 0;\\n        for (int i = 0; i < n; i++)\\n        {\\n            sum = (sum * 10 + word[i]-\\'0\\')%m;\\n            result[i] = (sum == 0) ? 1 : 0;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public int[] DivisibilityArray(string word, int m) \\n    {\\n        int n = word.Length;\\n        int[] result = new int[n];\\n        long sum = 0;\\n        for (int i = 0; i < n; i++)\\n        {\\n            sum = (sum * 10 + word[i]-\\'0\\')%m;\\n            result[i] = (sum == 0) ? 1 : 0;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230877,
                "title": "super-easy-solution-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n=word.length();\\n        int ans[]=new int[n];\\n        long s=0;\\n        for(int i=0;i<n;i++){\\n            s=(s*10+(word.charAt(i)-\\'0\\'))%m;\\n            if(s==0){\\n                ans[i]=1;\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n=word.length();\\n        int ans[]=new int[n];\\n        long s=0;\\n        for(int i=0;i<n;i++){\\n            s=(s*10+(word.charAt(i)-\\'0\\'))%m;\\n            if(s==0){\\n                ans[i]=1;\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230870,
                "title": "python3-very-simple-mod-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        N = len(word)\\n        ans = [0]*N\\n        cur = 0\\n        for i in range(N):\\n            cur *= 10\\n            cur += int(word[i])\\n            \\n            if cur%m==0:\\n                ans[i] = 1\\n            \\n            cur%=m\\n            \\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        N = len(word)\\n        ans = [0]*N\\n        cur = 0\\n        for i in range(N):\\n            cur *= 10\\n            cur += int(word[i])\\n            \\n            if cur%m==0:\\n                ans[i] = 1\\n            \\n            cur%=m\\n            \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230854,
                "title": "simple-modulo-property-a-c-b-c-a-b-c",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int mod = 1e9 + 7;\\n        long long currNum = 0;\\n        vector<int> ans;\\n        for(int i = 0; i < word.size(); ++i){\\n            currNum = currNum * 10 + (int)(word[i] - \\'0\\');\\n            currNum %= m;\\n            if(currNum == 0)    ans.push_back(1);\\n            else                    ans.push_back(0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int mod = 1e9 + 7;\\n        long long currNum = 0;\\n        vector<int> ans;\\n        for(int i = 0; i < word.size(); ++i){\\n            currNum = currNum * 10 + (int)(word[i] - \\'0\\');\\n            currNum %= m;\\n            if(currNum == 0)    ans.push_back(1);\\n            else                    ans.push_back(0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230792,
                "title": "concise",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string w, int m) {\\n        vector<int> ans(w.size());\\n        for (long long i = 0, d = 0; i < w.size(); i++) {\\n            d = d * 10 + (w[i] - \\'0\\');\\n            ans[i] = !(d %= m);    \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string w, int m) {\\n        vector<int> ans(w.size());\\n        for (long long i = 0, d = 0; i < w.size(); i++) {\\n            d = d * 10 + (w[i] - \\'0\\');\\n            ans[i] = !(d %= m);    \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4060255,
                "title": "greedy-java-o-n-video-tutorial",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse precomputation of ith position for next (i+1)th position\\n\\n# Video Tutorial\\nhttps://youtu.be/tHSRBt63gGQ\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        int[] divArr = new int[n];\\n        \\n        long currVal = 0;\\n        for (int i=0; i<n; ++i) {\\n            currVal = (currVal*10 + (word.charAt(i) - \\'0\\'))%m;\\n            divArr[i] = (currVal == 0) ? 1 : 0;\\n        }\\n\\n        return divArr;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        int[] divArr = new int[n];\\n        \\n        long currVal = 0;\\n        for (int i=0; i<n; ++i) {\\n            currVal = (currVal*10 + (word.charAt(i) - \\'0\\'))%m;\\n            divArr[i] = (currVal == 0) ? 1 : 0;\\n        }\\n\\n        return divArr;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3998163,
                "title": "simple-using-general-division-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- o(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- o(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\nstring remainder(string &s,int mod){\\n\\n\\n    \\nlong long a=0;\\nfor (char c : s) {\\n        \\n            a = a * 10 + (c - \\'0\\');\\n        \\n       \\n    }\\n\\n\\n\\nreturn to_string(a%mod);\\n\\n\\n}\\n    \\n    vector<int> divisibilityArray(string word, int m) {\\n\\n\\n        int n=word.size();\\nvector<int>v;\\nstring r;\\nstring s;\\nfor(int i=0;i<n;i++){\\n\\nr.push_back(word[i]);\\n\\nr=remainder(r,m);\\nif(r==\"0\")v.push_back(1);\\nelse v.push_back(0);\\n\\n\\n\\n\\n\\n}\\n\\n  return v;      \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\nstring remainder(string &s,int mod){\\n\\n\\n    \\nlong long a=0;\\nfor (char c : s) {\\n        \\n            a = a * 10 + (c - \\'0\\');\\n        \\n       \\n    }\\n\\n\\n\\nreturn to_string(a%mod);\\n\\n\\n}\\n    \\n    vector<int> divisibilityArray(string word, int m) {\\n\\n\\n        int n=word.size();\\nvector<int>v;\\nstring r;\\nstring s;\\nfor(int i=0;i<n;i++){\\n\\nr.push_back(word[i]);\\n\\nr=remainder(r,m);\\nif(r==\"0\")v.push_back(1);\\nelse v.push_back(0);\\n\\n\\n\\n\\n\\n}\\n\\n  return v;      \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3993761,
                "title": "golang-solution",
                "content": "# Code\\n```go\\nfunc divisibilityArray(word string, m int) []int {\\n\\tresult := make([]int, len(word))\\n\\tcurrent := 0\\n\\tfor i, w := range word {\\n\\t\\tcurrent = (current * 10 + int(w-\\'0\\')) % m\\n\\t\\tif current == 0 {\\n\\t\\t\\tresult[i] = 1\\n\\t\\t}\\n\\t}\\n\\treturn result\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc divisibilityArray(word string, m int) []int {\\n\\tresult := make([]int, len(word))\\n\\tcurrent := 0\\n\\tfor i, w := range word {\\n\\t\\tcurrent = (current * 10 + int(w-\\'0\\')) % m\\n\\t\\tif current == 0 {\\n\\t\\t\\tresult[i] = 1\\n\\t\\t}\\n\\t}\\n\\treturn result\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3985456,
                "title": "divisibility-of-array-rt-7ms-optiminal-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int len = word.length();\\n\\n        int [] arr = new int[len];\\n        long num=0;\\n        for(int i=0; i<len; i++){\\n            int ascii = (int)(word.charAt(i)) - 48;\\n            num = (num*10 + ascii)%m;\\n\\n\\n            if(num == 0){\\n                arr[i]=1;\\n            }else{\\n                arr[i]=0;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int len = word.length();\\n\\n        int [] arr = new int[len];\\n        long num=0;\\n        for(int i=0; i<len; i++){\\n            int ascii = (int)(word.charAt(i)) - 48;\\n            num = (num*10 + ascii)%m;\\n\\n\\n            if(num == 0){\\n                arr[i]=1;\\n            }else{\\n                arr[i]=0;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981808,
                "title": "easy-solution-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n=word.length();\\n        vector<int>ans(n,0);\\n        long long num=0;\\n        for(int i=0;i<n;i++){\\n            num=num*10+(word[i]-\\'0\\');\\n            if(num%m==0)ans[i]=1;\\n            num%=m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n=word.length();\\n        vector<int>ans(n,0);\\n        long long num=0;\\n        for(int i=0;i<n;i++){\\n            num=num*10+(word[i]-\\'0\\');\\n            if(num%m==0)ans[i]=1;\\n            num%=m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954164,
                "title": "go-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n O(1)\\n\\n# Code\\n```\\nfunc divisibilityArray(word string, m int) []int {\\n    ans := make([]int, len(word))\\n    prevRem := 0\\n    for i := 0; i < len(word); i++ {\\n        num := int(word[i] - \\'0\\') \\n        rem := mod(prevRem * 10 + mod(num, m), m)\\n        if rem == 0{ \\n            ans[i] = 1\\n        }else {\\n            ans[i] = 0\\n        }\\n        prevRem = rem   \\n    }\\n    return ans\\n}\\n\\nfunc mod (a int, b int) int {\\n    return (a % b + b) % b\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc divisibilityArray(word string, m int) []int {\\n    ans := make([]int, len(word))\\n    prevRem := 0\\n    for i := 0; i < len(word); i++ {\\n        num := int(word[i] - \\'0\\') \\n        rem := mod(prevRem * 10 + mod(num, m), m)\\n        if rem == 0{ \\n            ans[i] = 1\\n        }else {\\n            ans[i] = 0\\n        }\\n        prevRem = rem   \\n    }\\n    return ans\\n}\\n\\nfunc mod (a int, b int) int {\\n    return (a % b + b) % b\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3938310,
                "title": "java-92-faster-remainder-tracker-math-solution",
                "content": "# Complexity\\n- Time complexity: O(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] arr = new int[word.length()];\\n        long rem = 0;\\n        for (int i = 0; i < word.length(); i++) {\\n            rem = (rem * 10 + (word.charAt(i) - \\'0\\')) % m;\\n            if (rem == 0) arr[i] = 1;\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] arr = new int[word.length()];\\n        long rem = 0;\\n        for (int i = 0; i < word.length(); i++) {\\n            rem = (rem * 10 + (word.charAt(i) - \\'0\\')) % m;\\n            if (rem == 0) arr[i] = 1;\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3938168,
                "title": "best-question-to-understand-modular-arithmetic",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis problem clearly explain why we need to take modulo at every step to get rid of range overflow errors in Competitive Programming.\\nWe need to know the 3 distributive properties of modulo:\\n(a+b)%m = (a%m + b%m)%m\\n(a*b)%m = (a%m * b%m)%m\\n(a-b)%m = (a%m - b%m)%m\\n(a/b)%m = (a%m * (b^-1)%m)%m (Not sure)\\n\\nAnd another important point when we divide a number with a divisor the remainder alwways lie in range [0,divisor-1].\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFor each digit in word multiply previous number by 10 and add present_digit to it. Make sure you use the above principles in the way.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        n=len(word)\\n        op=[0 for i in range(n)]\\n        number=0\\n        for i in range(0,n):\\n            #((a*10)+b))%m ==> ((a%m*10%m)%m + b%m)%m)\\n            number=((number % m * 10 % m) % m + int(word[i]) %m ) % m\\n            op[i]=1 if number==0 else 0\\n        return op\\n            \\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        n=len(word)\\n        op=[0 for i in range(n)]\\n        number=0\\n        for i in range(0,n):\\n            #((a*10)+b))%m ==> ((a%m*10%m)%m + b%m)%m)\\n            number=((number % m * 10 % m) % m + int(word[i]) %m ) % m\\n            op[i]=1 if number==0 else 0\\n        return op\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3922863,
                "title": "java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) \\n    {\\n       int n = word.length();\\n    int[] div = new int[n];\\n    long num = 0;\\n    for (int i = 0; i < n; i++) {\\n        long digit = word.charAt(i) - \\'0\\';\\n        num = (num * 10 + digit) % m;\\n        div[i] = (num == 0) ? 1 : 0;\\n    }\\n    return div;\\n    }\\n        \\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) \\n    {\\n       int n = word.length();\\n    int[] div = new int[n];\\n    long num = 0;\\n    for (int i = 0; i < n; i++) {\\n        long digit = word.charAt(i) - \\'0\\';\\n        num = (num * 10 + digit) % m;\\n        div[i] = (num == 0) ? 1 : 0;\\n    }\\n    return div;\\n    }\\n        \\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3821160,
                "title": "java-modulo",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        long modulo = 0;\\n        int[] result = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            int numericValue = word.charAt(i) - \\'0\\';\\n            modulo = (modulo * 10 + numericValue) % m;\\n            if (modulo == 0) {\\n                result[i] = 1;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        long modulo = 0;\\n        int[] result = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            int numericValue = word.charAt(i) - \\'0\\';\\n            modulo = (modulo * 10 + numericValue) % m;\\n            if (modulo == 0) {\\n                result[i] = 1;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3796479,
                "title": "my-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[]ans=new int[word.length()];\\nlong num=0;\\nfor(int i=0;i<word.length();i++){\\n    num=(num*10+(int)word.charAt(i)-\\'0\\')%m;\\n    if(num%m==0){\\n        ans[i]=1;\\n    }else{\\n        ans[i]=0;\\n    }\\n}\\nreturn ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[]ans=new int[word.length()];\\nlong num=0;\\nfor(int i=0;i<word.length();i++){\\n    num=(num*10+(int)word.charAt(i)-\\'0\\')%m;\\n    if(num%m==0){\\n        ans[i]=1;\\n    }else{\\n        ans[i]=0;\\n    }\\n}\\nreturn ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3791037,
                "title": "c-with-mod-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        \\n        vector<int> result;\\n        result.reserve(word.size());\\n\\n        long value = 0;\\n\\n        for (auto& c : word) {\\n            value *= 10;\\n            value += c - \\'0\\';\\n            value %= m;\\n\\n            result.push_back(!value);\\n        }\\n\\n        return result;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        \\n        vector<int> result;\\n        result.reserve(word.size());\\n\\n        long value = 0;\\n\\n        for (auto& c : word) {\\n            value *= 10;\\n            value += c - \\'0\\';\\n            value %= m;\\n\\n            result.push_back(!value);\\n        }\\n\\n        return result;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3777729,
                "title": "simple-java-solution",
                "content": "\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] ans=new int[word.length()];\\n        long frst=Character.getNumericValue(word.charAt(0));\\n        ans[0]=(frst%m==0)?1:0;\\n        for(int i=1;i<word.length();i++)\\n        { frst=((frst%m)*10)+Character.getNumericValue(word.charAt(i));\\n            if(frst%m==0) ans[i]=1;\\n            else ans[i]=0;\\n        }\\n        return ans;\\n    }\\n}\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] ans=new int[word.length()];\\n        long frst=Character.getNumericValue(word.charAt(0));\\n        ans[0]=(frst%m==0)?1:0;\\n        for(int i=1;i<word.length();i++)\\n        { frst=((frst%m)*10)+Character.getNumericValue(word.charAt(i));\\n            if(frst%m==0) ans[i]=1;\\n            else ans[i]=0;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3770670,
                "title": "find-the-divisibility-array-of-a-string-in-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} word\\n * @param {number} m\\n * @return {number[]}\\n */\\nvar divisibilityArray = function(word, m) {\\n    const result = [];\\n    let num = 0;\\n\\n    for (let i = 0; i < word.length; i++) {\\n        num = (num * 10 + Number(word[i])) % m;\\n        result.push(num === 0 ? 1 : 0);\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} word\\n * @param {number} m\\n * @return {number[]}\\n */\\nvar divisibilityArray = function(word, m) {\\n    const result = [];\\n    let num = 0;\\n\\n    for (let i = 0; i < word.length; i++) {\\n        num = (num * 10 + Number(word[i])) % m;\\n        result.push(num === 0 ? 1 : 0);\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3756059,
                "title": "take-a-long-datatype-and-use-mod-function-in-same-line-while-calc-num",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n    int n = word.length();\\n    int[] div = new int[n];\\n    long num = 0;\\n    for (int i = 0; i < n; i++) {\\n        long digit = word.charAt(i) - \\'0\\';\\n        num = (num * 10 + digit) % m;\\n        div[i] = (num == 0) ? 1 : 0;\\n    }\\n    return div;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n    int n = word.length();\\n    int[] div = new int[n];\\n    long num = 0;\\n    for (int i = 0; i < n; i++) {\\n        long digit = word.charAt(i) - \\'0\\';\\n        num = (num * 10 + digit) % m;\\n        div[i] = (num == 0) ? 1 : 0;\\n    }\\n    return div;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3736283,
                "title": "easy-to-get-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n    int n = word.length();\\n    int[] div = new int[n];\\n    long remainder = 0;\\n    for (int i = 0; i < n; i++) {\\n            int digit = word.charAt(i) - \\'0\\';\\n            remainder = (remainder * 10 + digit) % m;\\n            if (remainder == 0) {\\n                div[i] = 1;\\n            }\\n        }\\n        return div;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n    int n = word.length();\\n    int[] div = new int[n];\\n    long remainder = 0;\\n    for (int i = 0; i < n; i++) {\\n            int digit = word.charAt(i) - \\'0\\';\\n            remainder = (remainder * 10 + digit) % m;\\n            if (remainder == 0) {\\n                div[i] = 1;\\n            }\\n        }\\n        return div;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3682498,
                "title": "c-easy-solution-carry",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) \\n    {\\n         vector<int>v;\\n          long long int carry=0;\\n         for(int i=0;i<word.size();i++)\\n          {\\n              \\n              long long int x=carry*10+(word[i]-\\'0\\');\\n              if(x%m==0)\\n                {\\n                    v.push_back(1);\\n                    carry=0;\\n                }\\n              else\\n                {\\n                    v.push_back(0);\\n                    carry=(x%m);\\n                }  \\n          } \\n          return v;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) \\n    {\\n         vector<int>v;\\n          long long int carry=0;\\n         for(int i=0;i<word.size();i++)\\n          {\\n              \\n              long long int x=carry*10+(word[i]-\\'0\\');\\n              if(x%m==0)\\n                {\\n                    v.push_back(1);\\n                    carry=0;\\n                }\\n              else\\n                {\\n                    v.push_back(0);\\n                    carry=(x%m);\\n                }  \\n          } \\n          return v;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3669373,
                "title": "simple-logic",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int k) {\\n        int n=word.length(),sum=0;\\n        vector<int> v;\\n        sum=(word[0]-\\'0\\')%k;\\n        if(sum==0) v.push_back(1);\\n        else v.push_back(0);\\n        for(int i=1;i<n;i++){\\n            sum=(sum*1LL*10+(word[i]-\\'0\\'))%k;\\n            if(sum==0) v.push_back(1);\\n            else v.push_back(0);\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int k) {\\n        int n=word.length(),sum=0;\\n        vector<int> v;\\n        sum=(word[0]-\\'0\\')%k;\\n        if(sum==0) v.push_back(1);\\n        else v.push_back(0);\\n        for(int i=1;i<n;i++){\\n            sum=(sum*1LL*10+(word[i]-\\'0\\'))%k;\\n            if(sum==0) v.push_back(1);\\n            else v.push_back(0);\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3641906,
                "title": "easy-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        long long int s=0;\\n        vector<int>ans;\\n        for(int i=0;i<word.size();i++){\\n            s=(s*10)+(int)(word[i]-48);\\n            if(s%m==0){\\n                ans.push_back(1);\\n            }\\n            else{\\n                ans.push_back(0);\\n            }\\n            s%=m;\\n            //cout<<s<<endl;\\n        }return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        long long int s=0;\\n        vector<int>ans;\\n        for(int i=0;i<word.size();i++){\\n            s=(s*10)+(int)(word[i]-48);\\n            if(s%m==0){\\n                ans.push_back(1);\\n            }\\n            else{\\n                ans.push_back(0);\\n            }\\n            s%=m;\\n            //cout<<s<<endl;\\n        }return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3641697,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        s=[0 for i in range(len(word))]\\n        curr=0\\n        for i in range(len(word)):\\n            curr=(curr*10+(int(word[i])))%m\\n            if curr==0:\\n                s[i]=1\\n        return s\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        s=[0 for i in range(len(word))]\\n        curr=0\\n        for i in range(len(word)):\\n            curr=(curr*10+(int(word[i])))%m\\n            if curr==0:\\n                s[i]=1\\n        return s\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3631544,
                "title": "c-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        long long s=0;\\n    for(char ch: word){\\n        s=(s*10+(int)ch-\\'0\\')%m;\\n        if(s%m==0)\\n        {\\n            ans.push_back(1);\\n        } else{\\n            ans.push_back(0);\\n        }\\n    }    \\n    return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        long long s=0;\\n    for(char ch: word){\\n        s=(s*10+(int)ch-\\'0\\')%m;\\n        if(s%m==0)\\n        {\\n            ans.push_back(1);\\n        } else{\\n            ans.push_back(0);\\n        }\\n    }    \\n    return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3613434,
                "title": "modular-arithmatics-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string str, int m) \\n    {\\n        long long int prvrem = 0;\\n        int idx = 0;\\n        vector<int>ans;\\n        while(idx < str.length())\\n        {\\n            int digit = (str[idx] - \\'0\\');\\n            long long int curr_rem = ((prvrem * (10%m))%m + (digit%m))%m;\\n            if(curr_rem == 0)\\n            {\\n                ans.push_back(1);   //completely div\\n            }\\n            else \\n            {\\n                ans.push_back(0);\\n            }\\n            prvrem = curr_rem;\\n            idx++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string str, int m) \\n    {\\n        long long int prvrem = 0;\\n        int idx = 0;\\n        vector<int>ans;\\n        while(idx < str.length())\\n        {\\n            int digit = (str[idx] - \\'0\\');\\n            long long int curr_rem = ((prvrem * (10%m))%m + (digit%m))%m;\\n            if(curr_rem == 0)\\n            {\\n                ans.push_back(1);   //completely div\\n            }\\n            else \\n            {\\n                ans.push_back(0);\\n            }\\n            prvrem = curr_rem;\\n            idx++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3603820,
                "title": "java-sum-of-remainders-explained-with-iterations-easy-to-understand-upvote",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n```\\n        word = \"998244353\", m = 3\\n        \\n        //initial value\\n        numberRemainder = 0\\n        \\n        //iterations\\n        ##1\\n        i = 0, digit = 9\\n        ==> numberRemaider = 0 * 10 + (9) ==> 9\\n        ==> numberRemainder % m = 9 % 3 = 0\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 1\\n        \\n        ##2\\n        i = 1, digit = 9\\n        ==> numberRemaider = 0 * 10 + (9) ==> 9\\n        ==> numberRemainder % m = 9 % 3 = 0\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 1\\n        \\n        ##3\\n        i = 2, digit = 8\\n        ==> numberRemaider = 0 * 10 + (8) ==> 8\\n        ==> numberRemainder % m = 8 % 3 = 2\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 0\\n        \\n        ##4\\n        i = 3, digit = 2\\n        ==> numberRemaider = 2 * 10 + (2) ==> 22\\n        ==> numberRemainder % m = 22 % 3 = 1\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 0\\n        \\n        ##5\\n        i = 4, digit = 4\\n        ==> numberRemaider = 1 * 10 + (4) ==> 14\\n        ==> numberRemainder % m = 14 % 3 = 2\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 0\\n        \\n        ##6\\n        i = 5, digit = 4\\n        ==> numberRemaider = 2 * 10 + (4) ==> 24\\n        ==> numberRemainder % m = 24 % 3 = 0\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 1\\n        \\n        ##7\\n        i = 6, digit = 3\\n        ==> numberRemaider = 0 * 10 + (3) ==> 3\\n        ==> numberRemainder % m = 3 % 3 = 0\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 1\\n        \\n        ##8\\n        i = 7, digit = 5\\n        ==> numberRemaider = 0 * 10 + (5) ==> 5\\n        ==> numberRemainder % m = 5 % 3 = 2\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 0\\n        \\n        ##9\\n        i = 8, digit = 3\\n        ==> numberRemaider = 2 * 10 + (3) ==> 23\\n        ==> numberRemainder % m = 23 % 3 = 2\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 0\\n```\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N), N is length of word string\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(N), N length result array\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n\\n        int[] divisibiltyArray = new int[n];\\n\\n        long numberRemainder = 0;\\n\\n        for(int i = 0; i < n; i++){\\n\\n            char digit = word.charAt(i);\\n\\n            //create a number first\\n            numberRemainder = (numberRemainder * 10 + (digit - \\'0\\'));\\n\\n            //number can become very large and we only care about\\n            //the remainder we get from the numberRemainder % m\\n            numberRemainder = numberRemainder % m;\\n\\n            divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0;\\n        }\\n        return divisibiltyArray;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\n        word = \"998244353\", m = 3\\n        \\n        //initial value\\n        numberRemainder = 0\\n        \\n        //iterations\\n        ##1\\n        i = 0, digit = 9\\n        ==> numberRemaider = 0 * 10 + (9) ==> 9\\n        ==> numberRemainder % m = 9 % 3 = 0\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 1\\n        \\n        ##2\\n        i = 1, digit = 9\\n        ==> numberRemaider = 0 * 10 + (9) ==> 9\\n        ==> numberRemainder % m = 9 % 3 = 0\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 1\\n        \\n        ##3\\n        i = 2, digit = 8\\n        ==> numberRemaider = 0 * 10 + (8) ==> 8\\n        ==> numberRemainder % m = 8 % 3 = 2\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 0\\n        \\n        ##4\\n        i = 3, digit = 2\\n        ==> numberRemaider = 2 * 10 + (2) ==> 22\\n        ==> numberRemainder % m = 22 % 3 = 1\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 0\\n        \\n        ##5\\n        i = 4, digit = 4\\n        ==> numberRemaider = 1 * 10 + (4) ==> 14\\n        ==> numberRemainder % m = 14 % 3 = 2\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 0\\n        \\n        ##6\\n        i = 5, digit = 4\\n        ==> numberRemaider = 2 * 10 + (4) ==> 24\\n        ==> numberRemainder % m = 24 % 3 = 0\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 1\\n        \\n        ##7\\n        i = 6, digit = 3\\n        ==> numberRemaider = 0 * 10 + (3) ==> 3\\n        ==> numberRemainder % m = 3 % 3 = 0\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 1\\n        \\n        ##8\\n        i = 7, digit = 5\\n        ==> numberRemaider = 0 * 10 + (5) ==> 5\\n        ==> numberRemainder % m = 5 % 3 = 2\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 0\\n        \\n        ##9\\n        i = 8, digit = 3\\n        ==> numberRemaider = 2 * 10 + (3) ==> 23\\n        ==> numberRemainder % m = 23 % 3 = 2\\n        ==> divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0 ==> 0\\n```\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n\\n        int[] divisibiltyArray = new int[n];\\n\\n        long numberRemainder = 0;\\n\\n        for(int i = 0; i < n; i++){\\n\\n            char digit = word.charAt(i);\\n\\n            //create a number first\\n            numberRemainder = (numberRemainder * 10 + (digit - \\'0\\'));\\n\\n            //number can become very large and we only care about\\n            //the remainder we get from the numberRemainder % m\\n            numberRemainder = numberRemainder % m;\\n\\n            divisibiltyArray[i] = numberRemainder == 0 ? 1 : 0;\\n        }\\n        return divisibiltyArray;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3603135,
                "title": "understandable-solution-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/*\\n    I think I get it now. Basically, at each index i, we get the latest substring (0..i), but instead of getting the value (which can be quite large), we simply get the VALUE mod M, which is easier to work with? Correct me if I am wrong.\\n\\nHere is the sample input explanation:\\n\\nword = \"998244353\", m = 3\\n\\nwhen i = 0\\nremainder = (0 * 10 + 9) % 3 = 0\\n=> div[0] = 1\\n\\nwhen i = 1\\nremainder = (0 * 10 + 9) % 3 = 0\\n=> div[1] = 1\\n\\nwhen i = 2\\nremainder = (0 * 10 + 8) % 3 = 2\\n=> div[2] = 0\\n\\nwhen i = 3\\nremainder = (2 * 10 + 2) % 3 = 1\\n=> div[3] = 0\\n\\nwhen i = 4\\nremainder = (1 * 10 + 4) % 3 = 1\\n=> div[4] = 0\\n\\nwhen i = 5\\nremainder = (1 * 10 + 4) % 3 = 0\\n=> div[5] = 1\\n\\nwhen i = 6\\nremainder = (0 * 10 + 3) % 3 = 0\\n=> div[6] = 1\\n\\nwhen i = 7\\nremainder = (0 * 10 + 5) % 3 = 1\\n=> div[7] = 0\\n\\nwhen i = 8\\nremainder = (1 * 10 + 3) % 3 = 1\\n=> div[8] = 0\\n\\nFinal result => [1,1,0,0,0,1,1,0,0]\\n*/\\n\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n\\n\\n      // now contraint of the given quesiton is that string length is upto 10^5 \\n      // it means that number can be maximum go to upto having 10^5 digits , \\n       // now we cant store such large number in any data type ; \\n\\n        // so we have to do something so that we will not have to store the complete numbr\\n        // upto that index ,\\n\\n\\n        /*\\n             so the algorithm is simply that , we will store only reaminder of the number \\n             of the previous index , because jab bhi hum kisi number ko divide kart hain toh agle\\n             division ke liye uske remainder ki hi tho jarurat padhti h bas \\n\\n\\n             for example 132 / 3  , so after first dvision 1 will left as a remainder , and for further\\n             division we need this 1 only so after that 12 /3 will happen and our divsion will perform \\n             easily , \\n\\n             similarly we will do in this question , instead of storing complete number , we will store\\n             only remainder\\n        */\\n\\n\\n\\n        long remainder = 0 ;  // isko int kar diya tha isliye error aa ra tha ;\\n\\n           int answer[] = new int[word.length()] ;\\n\\n\\n        for( int i = 0 ; i < word.length() ; i++)\\n        {\\n             remainder = remainder*10 + (word.charAt(i)-\\'0\\') ; \\n\\n             remainder = remainder % m ; \\n\\n\\n             if( remainder == 0 ) // means upto i th index , jo number ban ra h wo divisible hai ; \\n             {\\n                answer[i] = 1 ; \\n             }\\n\\n\\n        }\\n\\n\\n        return answer ; \\n\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/*\\n    I think I get it now. Basically, at each index i, we get the latest substring (0..i), but instead of getting the value (which can be quite large), we simply get the VALUE mod M, which is easier to work with? Correct me if I am wrong.\\n\\nHere is the sample input explanation:\\n\\nword = \"998244353\", m = 3\\n\\nwhen i = 0\\nremainder = (0 * 10 + 9) % 3 = 0\\n=> div[0] = 1\\n\\nwhen i = 1\\nremainder = (0 * 10 + 9) % 3 = 0\\n=> div[1] = 1\\n\\nwhen i = 2\\nremainder = (0 * 10 + 8) % 3 = 2\\n=> div[2] = 0\\n\\nwhen i = 3\\nremainder = (2 * 10 + 2) % 3 = 1\\n=> div[3] = 0\\n\\nwhen i = 4\\nremainder = (1 * 10 + 4) % 3 = 1\\n=> div[4] = 0\\n\\nwhen i = 5\\nremainder = (1 * 10 + 4) % 3 = 0\\n=> div[5] = 1\\n\\nwhen i = 6\\nremainder = (0 * 10 + 3) % 3 = 0\\n=> div[6] = 1\\n\\nwhen i = 7\\nremainder = (0 * 10 + 5) % 3 = 1\\n=> div[7] = 0\\n\\nwhen i = 8\\nremainder = (1 * 10 + 3) % 3 = 1\\n=> div[8] = 0\\n\\nFinal result => [1,1,0,0,0,1,1,0,0]\\n*/\\n\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n\\n\\n      // now contraint of the given quesiton is that string length is upto 10^5 \\n      // it means that number can be maximum go to upto having 10^5 digits , \\n       // now we cant store such large number in any data type ; \\n\\n        // so we have to do something so that we will not have to store the complete numbr\\n        // upto that index ,\\n\\n\\n        /*\\n             so the algorithm is simply that , we will store only reaminder of the number \\n             of the previous index , because jab bhi hum kisi number ko divide kart hain toh agle\\n             division ke liye uske remainder ki hi tho jarurat padhti h bas \\n\\n\\n             for example 132 / 3  , so after first dvision 1 will left as a remainder , and for further\\n             division we need this 1 only so after that 12 /3 will happen and our divsion will perform \\n             easily , \\n\\n             similarly we will do in this question , instead of storing complete number , we will store\\n             only remainder\\n        */\\n\\n\\n\\n        long remainder = 0 ;  // isko int kar diya tha isliye error aa ra tha ;\\n\\n           int answer[] = new int[word.length()] ;\\n\\n\\n        for( int i = 0 ; i < word.length() ; i++)\\n        {\\n             remainder = remainder*10 + (word.charAt(i)-\\'0\\') ; \\n\\n             remainder = remainder % m ; \\n\\n\\n             if( remainder == 0 ) // means upto i th index , jo number ban ra h wo divisible hai ; \\n             {\\n                answer[i] = 1 ; \\n             }\\n\\n\\n        }\\n\\n\\n        return answer ; \\n\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3598652,
                "title": "go-easy-to-understand",
                "content": "```\\nfunc divisibilityArray(word string, m int) []int {\\n\\tn := len(word)\\n\\tdiv := make([]int, n)\\n\\tcurrent := 0\\n\\n\\tfor i := 0; i < n; i++ {\\n\\t\\tdigit, _ := strconv.Atoi(string(word[i]))\\n\\t\\tcurrent = (current*10 + digit) % m\\n\\t\\tif current == 0 {\\n\\t\\t\\tdiv[i] = 1\\n\\t\\t}\\n\\t}\\n\\n\\treturn div\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc divisibilityArray(word string, m int) []int {\\n\\tn := len(word)\\n\\tdiv := make([]int, n)\\n\\tcurrent := 0\\n\\n\\tfor i := 0; i < n; i++ {\\n\\t\\tdigit, _ := strconv.Atoi(string(word[i]))\\n\\t\\tcurrent = (current*10 + digit) % m\\n\\t\\tif current == 0 {\\n\\t\\t\\tdiv[i] = 1\\n\\t\\t}\\n\\t}\\n\\n\\treturn div\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3544684,
                "title": "java-math-o-n-approach",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] arr=new int[word.length()];\\n        long sum=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n          sum=(sum*10-(word.charAt(i)-\\'0\\'))%m;\\n          if(sum==0)\\n          {\\n             arr[i]=1; \\n          }\\n          else\\n          {\\n              arr[i]=0;\\n          }\\n        }\\n      return arr;  \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] arr=new int[word.length()];\\n        long sum=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n          sum=(sum*10-(word.charAt(i)-\\'0\\'))%m;\\n          if(sum==0)\\n          {\\n             arr[i]=1; \\n          }\\n          else\\n          {\\n              arr[i]=0;\\n          }\\n        }\\n      return arr;  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3527602,
                "title": "typescript-solution",
                "content": "```\\nfunction divisibilityArray(word: string, m: number): number[] {\\n\\n    const result = [];\\n    let num = 0;\\n    let val = 0;\\n\\n    for (let i = 0; i < word.length; i++) {\\n        num = parseInt(val + word[i]);\\n        val = num % m;\\n        result.push(val ? 0 : 1);\\n    }\\n\\n    return result;\\n\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction divisibilityArray(word: string, m: number): number[] {\\n\\n    const result = [];\\n    let num = 0;\\n    let val = 0;\\n\\n    for (let i = 0; i < word.length; i++) {\\n        num = parseInt(val + word[i]);\\n        val = num % m;\\n        result.push(val ? 0 : 1);\\n    }\\n\\n    return result;\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3501038,
                "title": "easy-solution-using-modulus-operator-faster-than-99",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n=word.length();\\n        long long num=0;\\n        vector<int> ans(n,0);\\n        for(int i=0;i<n;i++)\\n        {\\n            num=(num*10+(word[i]-\\'0\\'))%m;\\n            if(num==0)\\n                ans[i]=1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n=word.length();\\n        long long num=0;\\n        vector<int> ans(n,0);\\n        for(int i=0;i<n;i++)\\n        {\\n            num=(num*10+(word[i]-\\'0\\'))%m;\\n            if(num==0)\\n                ans[i]=1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3497119,
                "title": "using-prefix-modulo",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        long long mul = 10 % m;\\n        long long prev = 0;\\n        vector<int> ans;\\n        for(auto c:word)\\n        {\\n            long long cu = c - \\'0\\';\\n            cu%=m;\\n            prev = (prev*mul)%m + cu;\\n            prev%=m;\\n            if(prev==0)\\n            {\\n                ans.push_back(1);\\n            }\\n            else\\n            {\\n                ans.push_back(0);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Number Theory"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        long long mul = 10 % m;\\n        long long prev = 0;\\n        vector<int> ans;\\n        for(auto c:word)\\n        {\\n            long long cu = c - \\'0\\';\\n            cu%=m;\\n            prev = (prev*mul)%m + cu;\\n            prev%=m;\\n            if(prev==0)\\n            {\\n                ans.push_back(1);\\n            }\\n            else\\n            {\\n                ans.push_back(0);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488822,
                "title": "find-the-divisibility-array-of-a-string",
                "content": "---------------- Easy C++ Solution -----------------------\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        int ct = 0;\\n        for (const auto& c : word) {\\n            ct = (ct*10L+ (c - \\'0\\')) % m;\\n            ans.emplace_back(ct == 0 ? 1 : 0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        int ct = 0;\\n        for (const auto& c : word) {\\n            ct = (ct*10L+ (c - \\'0\\')) % m;\\n            ans.emplace_back(ct == 0 ? 1 : 0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3485004,
                "title": "java-beats-99-58-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        int[]res = new int[n];\\n        long num = 0;\\n        for(int i = 0;i< n;i++){\\n            long d = word.charAt(i) - \\'0\\';\\n            num = (num*10 + d)%m;\\n            if(num == 0)\\n                res[i] = 1;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        int[]res = new int[n];\\n        long num = 0;\\n        for(int i = 0;i< n;i++){\\n            long d = word.charAt(i) - \\'0\\';\\n            num = (num*10 + d)%m;\\n            if(num == 0)\\n                res[i] = 1;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3482850,
                "title": "java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] finalResult = new int[word.length()];\\n        long remainder = 0;\\n        for (int i = 0; i < word.length(); i++) {\\n            remainder = ((remainder * 10) + (word.charAt(i) - \\'0\\')) % m;\\n            finalResult[i] = remainder == 0 ? 1 : 0;\\n        }\\n        return finalResult;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] finalResult = new int[word.length()];\\n        long remainder = 0;\\n        for (int i = 0; i < word.length(); i++) {\\n            remainder = ((remainder * 10) + (word.charAt(i) - \\'0\\')) % m;\\n            finalResult[i] = remainder == 0 ? 1 : 0;\\n        }\\n        return finalResult;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3463188,
                "title": "rust-solution",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nimpl Solution {\\n  pub fn divisibility_array(word: String, m: i32) -> Vec<i32> {\\n    let s = word.chars().map(|v| (v as u8 - \\'0\\' as u8) as usize)\\n        .collect::<Vec<usize>>();\\n    let m = m as usize;\\n    let n = s.len();\\n    let mut result = vec![0;n];\\n    let mut temp = 0;\\n    for i in 0..n {\\n      let v = s[i];\\n      temp += v;\\n      if temp % m == 0 {\\n        result[i] = 1;\\n      }\\n      temp *= 10;\\n      temp %= m;\\n    }\\n\\n    result\\n  }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n  pub fn divisibility_array(word: String, m: i32) -> Vec<i32> {\\n    let s = word.chars().map(|v| (v as u8 - \\'0\\' as u8) as usize)\\n        .collect::<Vec<usize>>();\\n    let m = m as usize;\\n    let n = s.len();\\n    let mut result = vec![0;n];\\n    let mut temp = 0;\\n    for i in 0..n {\\n      let v = s[i];\\n      temp += v;\\n      if temp % m == 0 {\\n        result[i] = 1;\\n      }\\n      temp *= 10;\\n      temp %= m;\\n    }\\n\\n    result\\n  }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3457011,
                "title": "rust-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn divisibility_array(word: String, m: i32) -> Vec<i32> {\\n        let mut ans = vec![];\\n        let mut current = 0;\\n        for ch in word.chars() {\\n            current = (10 * current + (ch as i64 - \\'0\\' as i64)) % m as i64;\\n            if current == 0 {\\n                ans.push(1);\\n            } else {\\n                ans.push(0);\\n            }\\n        }\\n        ans     \\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn divisibility_array(word: String, m: i32) -> Vec<i32> {\\n        let mut ans = vec![];\\n        let mut current = 0;\\n        for ch in word.chars() {\\n            current = (10 * current + (ch as i64 - \\'0\\' as i64)) % m as i64;\\n            if current == 0 {\\n                ans.push(1);\\n            } else {\\n                ans.push(0);\\n            }\\n        }\\n        ans     \\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3403859,
                "title": "c-modulus-division",
                "content": "> Runtime: 178 ms, faster than 66.96% of C# online submissions for Find the Divisibility Array of a String.\\nMemory Usage: 54.8 MB, less than 28.70% of C# online submissions for Find the Divisibility Array of a String.\\n```\\npublic class Solution {\\n    public int[] DivisibilityArray(string word, int m) {\\n        int[] res = new int[word.Length];\\n        \\n        long sum = 0;\\n        for(int i = 0; i < word.Length; i++)\\n        {\\n            sum = ((sum * 10) + (word[i] - \\'0\\')) % m;\\n            res[i] = sum == 0 ? 1 : 0;\\n        }\\n        \\n        return res;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int[] DivisibilityArray(string word, int m) {\\n        int[] res = new int[word.Length];\\n        \\n        long sum = 0;\\n        for(int i = 0; i < word.Length; i++)\\n        {\\n            sum = ((sum * 10) + (word[i] - \\'0\\')) % m;\\n            res[i] = sum == 0 ? 1 : 0;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3402101,
                "title": "computation-modulo-m-python",
                "content": "```\\n\"\"\"\\nTreatment: simple integer division or multiplication\\n\\nIf up to idx i, the numerical value is cur, then one step furthur up to idx i+1 with digit d,\\nthe numerical value is: 10 * cur + d.\\n\\nAssume divmod(cur, m) = q, r; i.e, cur = q * m + r. Then to check if the next numerical is divisible by\\nm, we just need to consider if m | (10 * r + d). \\n\\nReason: 10 * cur + d = 10 * (q * m + r) = 10*q * m + (10 * r + d) = 10 * r + d (mod m)\\n\\nIn other words, we just need to do the computations in the sense of modulo m.\\n\\n\"\"\"\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        res = []\\n        cur = 0\\n        for digit in word:\\n            digit = int(digit)\\n            cur = cur * 10 + digit\\n            # q, r = divmod(cur, m)\\n            r = cur % m\\n            if r == 0:\\n                res.append(1)\\n            else:\\n                res.append(0)\\n            cur = r\\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n\"\"\"\\nTreatment: simple integer division or multiplication\\n\\nIf up to idx i, the numerical value is cur, then one step furthur up to idx i+1 with digit d,\\nthe numerical value is: 10 * cur + d.\\n\\nAssume divmod(cur, m) = q, r; i.e, cur = q * m + r. Then to check if the next numerical is divisible by\\nm, we just need to consider if m | (10 * r + d). \\n\\nReason: 10 * cur + d = 10 * (q * m + r) = 10*q * m + (10 * r + d) = 10 * r + d (mod m)\\n\\nIn other words, we just need to do the computations in the sense of modulo m.\\n\\n\"\"\"\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        res = []\\n        cur = 0\\n        for digit in word:\\n            digit = int(digit)\\n            cur = cur * 10 + digit\\n            # q, r = divmod(cur, m)\\n            r = cur % m\\n            if r == 0:\\n                res.append(1)\\n            else:\\n                res.append(0)\\n            cur = r\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3400438,
                "title": "simple-cpp-solution-naive-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans(word.length(),0);\\n        long long num = 0;\\n        for(int i=0; i<word.length(); i++){\\n            long long rem = word[i] - \\'0\\';\\n            num = num*10 + rem;\\n            if(num%m==0){\\n                ans[i] = 1;\\n            }\\n            num %= m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans(word.length(),0);\\n        long long num = 0;\\n        for(int i=0; i<word.length(); i++){\\n            long long rem = word[i] - \\'0\\';\\n            num = num*10 + rem;\\n            if(num%m==0){\\n                ans[i] = 1;\\n            }\\n            num %= m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3394313,
                "title": "javascript-code-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n\\u2B55(n), n = word.length;\\n\\n- Space complexity:\\n\\u2B55(n), n = word.length;\\n\\n# Code\\n```\\n/**\\n * @param {string} word\\n * @param {number} m\\n * @return {number[]}\\n */\\nvar divisibilityArray = function(word, m) {\\n    let num = 0;\\n    const divArr = [];\\n    for (const elm of word) {\\n        num += +elm;\\n        num % m == 0 ? divArr.push(1) : divArr.push(0);\\n        num = (num * 10) % m;\\n    }\\n    return divArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} word\\n * @param {number} m\\n * @return {number[]}\\n */\\nvar divisibilityArray = function(word, m) {\\n    let num = 0;\\n    const divArr = [];\\n    for (const elm of word) {\\n        num += +elm;\\n        num % m == 0 ? divArr.push(1) : divArr.push(0);\\n        num = (num * 10) % m;\\n    }\\n    return divArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3375991,
                "title": "c-using-modular-arithmetic-operation",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        \\n        int n=word.length();\\n        vector<int> div;\\n\\n        long long int rem=0;\\n        \\n        for(int i=0;i<n;i++){\\n           rem=(rem*10 + word[i]-\\'0\\');\\n           rem=rem%m;\\n\\n           if(rem==0){\\n               div.push_back(1);\\n           }\\n           else{\\n               div.push_back(0);\\n           }\\n        }\\n        \\n         return div;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        \\n        int n=word.length();\\n        vector<int> div;\\n\\n        long long int rem=0;\\n        \\n        for(int i=0;i<n;i++){\\n           rem=(rem*10 + word[i]-\\'0\\');\\n           rem=rem%m;\\n\\n           if(rem==0){\\n               div.push_back(1);\\n           }\\n           else{\\n               div.push_back(0);\\n           }\\n        }\\n        \\n         return div;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3360377,
                "title": "fundamental-maths-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int len = word.length();\\n        vector<int> res(len);\\n        long rem = 0;\\n        for(int i = 0 ; i < len ; i++){\\n            long currNum = rem*10 + (word[i]-\\'0\\');\\n            rem = currNum%m;\\n            if(rem == 0) res[i] = 1;\\n            else res[i] = 0;\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int len = word.length();\\n        vector<int> res(len);\\n        long rem = 0;\\n        for(int i = 0 ; i < len ; i++){\\n            long currNum = rem*10 + (word[i]-\\'0\\');\\n            rem = currNum%m;\\n            if(rem == 0) res[i] = 1;\\n            else res[i] = 0;\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3357638,
                "title": "simple-java-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] ans=new int[word.length()];\\n        long num=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n          num=num*10+(word.charAt(i)-\\'0\\');\\n          if(num%m==0)\\n          {\\n            ans[i]=1;\\n          }\\n          else{\\n            ans[i]=0;\\n          }\\n          num%=m;\\n        }\\n     \\n     return ans;  \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] ans=new int[word.length()];\\n        long num=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n          num=num*10+(word.charAt(i)-\\'0\\');\\n          if(num%m==0)\\n          {\\n            ans[i]=1;\\n          }\\n          else{\\n            ans[i]=0;\\n          }\\n          num%=m;\\n        }\\n     \\n     return ans;  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3351798,
                "title": "best-solution-to-remove-tle-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        long long int num=0;\\n        for(int i=0;i<word.size();i++){\\n            num=num*10+(word[i]-\\'0\\');\\n            if(num%m==0)ans.push_back(1);\\n            else ans.push_back(0);\\n            num%=m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        long long int num=0;\\n        for(int i=0;i<word.size();i++){\\n            num=num*10+(word[i]-\\'0\\');\\n            if(num%m==0)ans.push_back(1);\\n            else ans.push_back(0);\\n            num%=m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3349538,
                "title": "c-cryptic-oneliner",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) \\n    {\\n        long long mod = 0;\\n        vector<int> ans(word.size());\\n        \\n        for (int i = 0; i < word.size(); i++)\\n            ans[i] = !(mod = (mod*10 + word[i] - \\'0\\') % m);\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) \\n    {\\n        long long mod = 0;\\n        vector<int> ans(word.size());\\n        \\n        for (int i = 0; i < word.size(); i++)\\n            ans[i] = !(mod = (mod*10 + word[i] - \\'0\\') % m);\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3339018,
                "title": "easy-solution-using-the-modulo-operator-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    \\n    vector<int> divisibilityArray(string word, int m) {\\n        int n=word.length();\\n        vector<int>v(n,0);\\n        \\n        long long num=0;\\n        for(int i=0;i<word.length();i++){\\n            num = num*10 + (word[i]-\\'0\\');\\n            num = num%m;\\n            if(num==0){\\n                v[i]=1;\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    vector<int> divisibilityArray(string word, int m) {\\n        int n=word.length();\\n        vector<int>v(n,0);\\n        \\n        long long num=0;\\n        for(int i=0;i<word.length();i++){\\n            num = num*10 + (word[i]-\\'0\\');\\n            num = num%m;\\n            if(num==0){\\n                v[i]=1;\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3334723,
                "title": "c-math-faster-easy-to-understand",
                "content": "* ***Math***\\n\\n* ***Time Complexity :- O(N)***\\n\\n* ***Space Complexity :- O(N)***\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        \\n        int n = word.size();\\n        \\n        // declare a remainder array\\n        \\n        vector<long long> remainder(n);\\n        \\n        vector<int> ans(n, 0);\\n        \\n        // traverse over the word\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            // find the num\\n            \\n            long long num = 0;\\n            \\n            if(i > 0)\\n            {\\n                num = remainder[i - 1] * 10;\\n            }\\n            \\n            num += word[i] - \\'0\\';\\n            \\n            int rem = num % m;\\n            \\n            if(rem == 0)\\n            {\\n                ans[i] = 1;\\n            }\\n            \\n            remainder[i] = rem;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        \\n        int n = word.size();\\n        \\n        // declare a remainder array\\n        \\n        vector<long long> remainder(n);\\n        \\n        vector<int> ans(n, 0);\\n        \\n        // traverse over the word\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            // find the num\\n            \\n            long long num = 0;\\n            \\n            if(i > 0)\\n            {\\n                num = remainder[i - 1] * 10;\\n            }\\n            \\n            num += word[i] - \\'0\\';\\n            \\n            int rem = num % m;\\n            \\n            if(rem == 0)\\n            {\\n                ans[i] = 1;\\n            }\\n            \\n            remainder[i] = rem;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3313656,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    // each step can be calculated by (previous * 10 + next) % m\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        long long cur = 0;\\n        for (auto& c : word){\\n            cur *= 10;\\n            cur += c - \\'0\\';\\n            cur %= m;\\n            ans.push_back(cur == 0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    // each step can be calculated by (previous * 10 + next) % m\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        long long cur = 0;\\n        for (auto& c : word){\\n            cur *= 10;\\n            cur += c - \\'0\\';\\n            cur %= m;\\n            ans.push_back(cur == 0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3311264,
                "title": "c-easy",
                "content": "# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n    vector<int> ans;\\n    long long int num=0;\\n    for(auto& digit:word){\\n        num = ((num*10)+(digit-\\'0\\'))%m;\\n        if(num%m==0) ans.push_back(1);\\n        else ans.push_back(0);\\n    }\\n    return ans;\\n}\\n\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n    vector<int> ans;\\n    long long int num=0;\\n    for(auto& digit:word){\\n        num = ((num*10)+(digit-\\'0\\'))%m;\\n        if(num%m==0) ans.push_back(1);\\n        else ans.push_back(0);\\n    }\\n    return ans;\\n}\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3299037,
                "title": "simple-explaination",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nInstead of concatenating string and converting to int at every iteration. \\nJust calculate remainder of current prefix from previous calculated remainder.\\n\\n**Formula**\\ncurrent remainder = (remainder * 10 + digit) % m\\n\\nIf remainder is zero then push 1 in the result vector else push 0 in result vector.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        // Get size of string\\n        int n = word.size();\\n\\n        // Initialize remainder variable\\n        long long rem = 0;\\n\\n        // Result vector\\n        vector<int> result;\\n\\n        // Iterate over words\\n        for(int i = 0; i < n; i++){\\n            // Calculate current remainder\\n            rem = (rem * 10 + int(word[i]-\\'0\\')) % m;\\n\\n            // Insert 1 in result vector if remainder is zero else insert 0\\n            if(rem == 0)\\n                result.push_back(1);\\n            else\\n                result.push_back(0);\\n        }\\n\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        // Get size of string\\n        int n = word.size();\\n\\n        // Initialize remainder variable\\n        long long rem = 0;\\n\\n        // Result vector\\n        vector<int> result;\\n\\n        // Iterate over words\\n        for(int i = 0; i < n; i++){\\n            // Calculate current remainder\\n            rem = (rem * 10 + int(word[i]-\\'0\\')) % m;\\n\\n            // Insert 1 in result vector if remainder is zero else insert 0\\n            if(rem == 0)\\n                result.push_back(1);\\n            else\\n                result.push_back(0);\\n        }\\n\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3297607,
                "title": "easy-solution-c",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> v;\\n        long long int x=0;\\n        for(int i=0; i<word.length(); i++)\\n        {\\n            x=((x*10) + (word[i]-\\'0\\'))%m;\\n            if(x==0)\\n            {\\n                v.push_back(1);\\n            }\\n            else\\n            {\\n                v.push_back(0);\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> v;\\n        long long int x=0;\\n        for(int i=0; i<word.length(); i++)\\n        {\\n            x=((x*10) + (word[i]-\\'0\\'))%m;\\n            if(x==0)\\n            {\\n                v.push_back(1);\\n            }\\n            else\\n            {\\n                v.push_back(0);\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3288745,
                "title": "loops-maths-nearly-120ms-a",
                "content": "# Intuition\\nDirect Mathematical Logic\\n\\n# Approach\\nGet the Reminder & add the next chars to avoid the whole number\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        //Initial Declarations\\n        int len = word.length();\\n        int tempLen = len;\\n        int[] divArr = new int[len];\\n        String currStr = new String();\\n        int digit = 1; int val = m;\\n        //Finding the digit value of the \"m\"\\n        while(val >= 10){\\n            val /= 10;\\n            digit++;\\n        }\\n        val = 0;\\n        // If \"m\" is greater than the value of word\\n        if(digit > len){\\n            for(int i=0; i<len; i++){\\n                if(word.charAt(i) != \\'0\\')\\n                  break;\\n                divArr[i] = 1;\\n            }\\n            return divArr;\\n        }\\n        //Process Calculation Logic \\n        while(len > 0){\\n            if(currStr.length() == 0){\\n                /*Substring to get the reminder value + next digits so that the division calculation \\n                happens only for the limited digits */\\n                int subLength = val+digit >= tempLen ? tempLen : val+digit;\\n                currStr = word.substring(val, subLength);\\n                Long currVal = Long.parseLong(currStr);\\n                /*To make the array value as 1 if the word starts with 0 and this logic works only for \\n                the index 0 */\\n                if(currVal == 0 & val == 0){\\n                    for(int i=0; i<digit-1; i++){\\n                        divArr[i] = 1;\\n                    }\\n                }\\n                //Check if the value is divisible or not\\n                if(currVal % m == 0){\\n                    divArr[subLength - 1] = 1;\\n                    currStr = \"\";\\n                    //Check if the next digit is 0 if so then that is also divisible\\n                    while(len > 0 && subLength < tempLen){\\n                        if(word.charAt(subLength) == \\'0\\'){\\n                            divArr[subLength] = 1;\\n                            len--;\\n                            val++;\\n                            subLength++;\\n                        }else\\n                           break;\\n                    }\\n                }\\n                //If the value is not divisible then get the reminder and make that as the current string\\n                else{\\n                    currStr = String.valueOf(currVal % m);\\n                }\\n                len -= digit;\\n                val += digit;\\n            }\\n            //Check if the previous value is not divisible\\n            else{\\n                currStr += word.charAt(val);\\n                Long currVal = Long.parseLong(currStr);\\n                if(currVal % m == 0){\\n                    divArr[val] = 1;\\n                    currStr = \"\";\\n                    //Check if the next digit is 0 if so then that is also divisible\\n                    while(len > 0 && val+1 < tempLen){\\n                        if(word.charAt(val+1) == \\'0\\'){\\n                            divArr[val+1] = 1;\\n                            len--;\\n                            val++;\\n                        }else\\n                           break;\\n                    }\\n                }\\n                //If the value is not divisible then get the reminder and make that as the current string\\n                else{\\n                    currStr = String.valueOf(currVal % m);\\n                }\\n                len--; \\n                val++;\\n            }\\n        }\\n        return divArr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        //Initial Declarations\\n        int len = word.length();\\n        int tempLen = len;\\n        int[] divArr = new int[len];\\n        String currStr = new String();\\n        int digit = 1; int val = m;\\n        //Finding the digit value of the \"m\"\\n        while(val >= 10){\\n            val /= 10;\\n            digit++;\\n        }\\n        val = 0;\\n        // If \"m\" is greater than the value of word\\n        if(digit > len){\\n            for(int i=0; i<len; i++){\\n                if(word.charAt(i) != \\'0\\')\\n                  break;\\n                divArr[i] = 1;\\n            }\\n            return divArr;\\n        }\\n        //Process Calculation Logic \\n        while(len > 0){\\n            if(currStr.length() == 0){\\n                /*Substring to get the reminder value + next digits so that the division calculation \\n                happens only for the limited digits */\\n                int subLength = val+digit >= tempLen ? tempLen : val+digit;\\n                currStr = word.substring(val, subLength);\\n                Long currVal = Long.parseLong(currStr);\\n                /*To make the array value as 1 if the word starts with 0 and this logic works only for \\n                the index 0 */\\n                if(currVal == 0 & val == 0){\\n                    for(int i=0; i<digit-1; i++){\\n                        divArr[i] = 1;\\n                    }\\n                }\\n                //Check if the value is divisible or not\\n                if(currVal % m == 0){\\n                    divArr[subLength - 1] = 1;\\n                    currStr = \"\";\\n                    //Check if the next digit is 0 if so then that is also divisible\\n                    while(len > 0 && subLength < tempLen){\\n                        if(word.charAt(subLength) == \\'0\\'){\\n                            divArr[subLength] = 1;\\n                            len--;\\n                            val++;\\n                            subLength++;\\n                        }else\\n                           break;\\n                    }\\n                }\\n                //If the value is not divisible then get the reminder and make that as the current string\\n                else{\\n                    currStr = String.valueOf(currVal % m);\\n                }\\n                len -= digit;\\n                val += digit;\\n            }\\n            //Check if the previous value is not divisible\\n            else{\\n                currStr += word.charAt(val);\\n                Long currVal = Long.parseLong(currStr);\\n                if(currVal % m == 0){\\n                    divArr[val] = 1;\\n                    currStr = \"\";\\n                    //Check if the next digit is 0 if so then that is also divisible\\n                    while(len > 0 && val+1 < tempLen){\\n                        if(word.charAt(val+1) == \\'0\\'){\\n                            divArr[val+1] = 1;\\n                            len--;\\n                            val++;\\n                        }else\\n                           break;\\n                    }\\n                }\\n                //If the value is not divisible then get the reminder and make that as the current string\\n                else{\\n                    currStr = String.valueOf(currVal % m);\\n                }\\n                len--; \\n                val++;\\n            }\\n        }\\n        return divArr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3287732,
                "title": "simple-easy-c-solution-explained",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIf we think about how we traditionally divide, at each step we take the remainder and then append it like a prefix to a few digits. Then that becomes the new dividend against which we find a quotient. That again results in a new remainder which again gets prefixed to some more digits which are added to the right of it.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing the above intuition, we maintain a string lastRemainder (which is always less than the divisor) and append additional characters to it. We convert that string to a number and check the divisibility. If remainder is 0, we send back true ; else false\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\n#define ll long long\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        string lastRemainder=\"\";\\n        vector<int>ans(word.size(),0);\\n        for(int i=0;i<word.size();i++){\\n            if(check(word[i],m,lastRemainder))ans[i]=1;\\n            else ans[i]=0;\\n        }\\n        return ans;\\n    }\\n    bool check(char ch, int m, string& lastRemainder){\\n        string w = lastRemainder+ch;\\n        ll num = stoll(w);\\n        int rem = num%m;\\n        w = to_string(rem);\\n        lastRemainder=w;\\n        if(rem == 0)return true;\\n        else return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n#define ll long long\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        string lastRemainder=\"\";\\n        vector<int>ans(word.size(),0);\\n        for(int i=0;i<word.size();i++){\\n            if(check(word[i],m,lastRemainder))ans[i]=1;\\n            else ans[i]=0;\\n        }\\n        return ans;\\n    }\\n    bool check(char ch, int m, string& lastRemainder){\\n        string w = lastRemainder+ch;\\n        ll num = stoll(w);\\n        int rem = num%m;\\n        w = to_string(rem);\\n        lastRemainder=w;\\n        if(rem == 0)return true;\\n        else return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3285019,
                "title": "shortest",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int remainder=0,c=10%m;\\n        vector<int>ans;\\n        for(char &d:word)\\n        {\\n            d-=\\'0\\';\\n            ans.push_back((remainder=((long long)c*remainder+d%m)%m)==0);\\n        }   \\n        return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int remainder=0,c=10%m;\\n        vector<int>ans;\\n        for(char &d:word)\\n        {\\n            d-=\\'0\\';\\n            ans.push_back((remainder=((long long)c*remainder+d%m)%m)==0);\\n        }   \\n        return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3281869,
                "title": "java-solution-with-basic-mathematics",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String str, int m) {\\n         int[] ans =new int[str.length()];int k=0;\\n         long temp =0 ;\\n        for(int i=0;i<str.length();i++){\\n            temp = ((temp*10)+(str.charAt(i)-\\'0\\'))%m; \\n            if(temp==0)ans[k++]=1;\\n           else ans[k++]=0;\\n        }\\n        return ans;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String str, int m) {\\n         int[] ans =new int[str.length()];int k=0;\\n         long temp =0 ;\\n        for(int i=0;i<str.length();i++){\\n            temp = ((temp*10)+(str.charAt(i)-\\'0\\'))%m; \\n            if(temp==0)ans[k++]=1;\\n           else ans[k++]=0;\\n        }\\n        return ans;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3275264,
                "title": "c-solution",
                "content": "# Approach\\nChecking the remainder of current prefix from that of the previous one.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        long long sum = 0, n = word.size();\\n        vector<int> ans;\\n        for(int i = 0; i < n; i++){\\n            sum *= 10LL;\\n            sum += word[i] - \\'0\\';\\n            sum %= m;\\n            ans.push_back(sum == 0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        long long sum = 0, n = word.size();\\n        vector<int> ans;\\n        for(int i = 0; i < n; i++){\\n            sum *= 10LL;\\n            sum += word[i] - \\'0\\';\\n            sum %= m;\\n            ans.push_back(sum == 0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3273992,
                "title": "python3-short-and-understandable-solution-in-o-n-time-o-1-space",
                "content": "# Approach\\nEach number $$number_{i} = int(word[0:i])$$ ($$i < n$$) can be split into $$number_{i} = am + k$$ ($$0 <= a$$, $$0 <= k < m$$). The next number can be calculated as follows: $$number_{i + 1} = 10 * number_{i} + int(word[i + 1]) = 10 * (am + k) + digit_{i + 1} = 10*am + 10k + digit_{i + 1} = b*m + 10k + digit_{i + 1}$$. \\nAs we can see regarding $$number_{i}$$, we can always abstract from the term `am` and, therefore. solely focus on the remainder $$k$$.\\n\\nWhen we now move to the next number $$number_{i + 1}$$, we must calculate $$mod(10k + digit_{i + 1}, m)$$ (reminder: $$k$$ is the remainder of the previous step). We append $$1$$ to our result when the resulting remainder is $$0$$, otherwise $$0$$. We continue the process with each resulting remainder until all numbers have been processed. \\n\\n# Complexity\\n- Time complexity:\\n`O(n)`\\n\\n- Space complexity:\\n`O(1)`\\n\\n# Code\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        remainder = int(word[0]) % m\\n        result = [1] if remainder == 0 else [0]\\n\\n        for i in range(1, len(word)):\\n            remainder *= 10\\n            remainder += int(word[i])\\n            remainder %= m\\n\\n            if remainder == 0:\\n                result.append(1)\\n            else:\\n                result.append(0)\\n\\n        return result\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        remainder = int(word[0]) % m\\n        result = [1] if remainder == 0 else [0]\\n\\n        for i in range(1, len(word)):\\n            remainder *= 10\\n            remainder += int(word[i])\\n            remainder %= m\\n\\n            if remainder == 0:\\n                result.append(1)\\n            else:\\n                result.append(0)\\n\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3264020,
                "title": "c-easy-fast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n=word.size();\\n        long long curr=0;\\n        vector<int> ans(n,0);\\n        for(int i=0;i<n;i++)\\n        {\\n            curr=curr*10+word[i]-\\'0\\';\\n            if(curr%m==0)\\n                ans[i]=1;\\n            curr=curr%m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n=word.size();\\n        long long curr=0;\\n        vector<int> ans(n,0);\\n        for(int i=0;i<n;i++)\\n        {\\n            curr=curr*10+word[i]-\\'0\\';\\n            if(curr%m==0)\\n                ans[i]=1;\\n            curr=curr%m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3263886,
                "title": "python3-o-n-optimized-with-mod-m",
                "content": "# Code\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        ans, cur = [], 0\\n        for c in word:\\n            cur = cur * 10 + int(c)\\n            cur %= m\\n            ans.append(0 if cur else 1)\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        ans, cur = [], 0\\n        for c in word:\\n            cur = cur * 10 + int(c)\\n            cur %= m\\n            ans.append(0 if cur else 1)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3259486,
                "title": "beats-97-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs there are a lotta divisions with each operation we can store the remainder of previous to save time and reduce complexity\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing the concept of dynamic programming here. To divide a digit of string we can add the remainder of previous digit * 10 + next integer \\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        length=len(word)\\n        temp=0      # temp is used to store the remainder of previous digit\\n        result=[0]*length\\n        for i in range(0,length):\\n            temp=((temp*10)+int(word[i]))%m\\n            if temp==0: #if remainder of string upto i is 0 it means that the number is divisible hence we make the result list value 1 \\n                result[i]=1\\n        return result\\n                \\n```\\n\\nUpvote if you like the solution \\uD83D\\uDE42 . Comments are always appreciated.",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        length=len(word)\\n        temp=0      # temp is used to store the remainder of previous digit\\n        result=[0]*length\\n        for i in range(0,length):\\n            temp=((temp*10)+int(word[i]))%m\\n            if temp==0: #if remainder of string upto i is 0 it means that the number is divisible hence we make the result list value 1 \\n                result[i]=1\\n        return result\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3257925,
                "title": "pretty-fast-97-and-easy-to-read",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nHonestly, I was stuck on this because the number was getting too large. Even BigInt doesn\\'t work. Then I looked at another solution that carried over the remainder from char to char -- this is the key math insight to this solution.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSet up a for loop to go through each char.\\nMake sure to convert the char to an integer before adding it to the total (otherwise the total with be coerced into a string!).\\nFill in the array first with zeros. This helps the speed because answer array is only updated when the number is evenly divisible (which tends to be less and less frequent as m gets larger).\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n), because there is one operation for each char in the word.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n), because the answer array gets one element longer with each char in the word.\\n# Code\\n```\\n/**\\n * @param {string} word\\n * @param {number} m\\n * @return {number[]}\\n */\\nvar divisibilityArray = function(word, m) {\\n    let answer = Array(word.length).fill(0)\\n    let total = 0\\n    for (let i = 0; i < word.length; i++){\\n        // because word can be up to 10,000 chars long, we can\\'t check mod on a number this size.\\n        // however we can carry the remainder over from one char to the next\\n        // only the remainder matters when we multiply by ten ...\\n        // ... because the non-remainder (the number minus the remainder) is a multiple of m and will still be a multiple of m when we multiply it by ten\\n        total = ((total * 10) + parseInt(word[i])) % m\\n        if (total === 0){\\n            answer[i] = 1\\n        } \\n    }\\n    return answer\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} word\\n * @param {number} m\\n * @return {number[]}\\n */\\nvar divisibilityArray = function(word, m) {\\n    let answer = Array(word.length).fill(0)\\n    let total = 0\\n    for (let i = 0; i < word.length; i++){\\n        // because word can be up to 10,000 chars long, we can\\'t check mod on a number this size.\\n        // however we can carry the remainder over from one char to the next\\n        // only the remainder matters when we multiply by ten ...\\n        // ... because the non-remainder (the number minus the remainder) is a multiple of m and will still be a multiple of m when we multiply it by ten\\n        total = ((total * 10) + parseInt(word[i])) % m\\n        if (total === 0){\\n            answer[i] = 1\\n        } \\n    }\\n    return answer\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3256095,
                "title": "simple-and-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n      long x = 0;\\n      int div[] = new int [word.length()];\\n      for(int i=0; i<word.length(); i++){\\n          x = x*10+(word.charAt(i)-\\'0\\'); //convert string into int type ; -\\'0\\' becauz string(char) type 0 is substracted from int 0;\\n          if(x%m == 0)\\n          div[i] = 1;\\n         else div[i] = 0; \\n          x%=m; // to take string from start;\\n      }\\n     return div;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n      long x = 0;\\n      int div[] = new int [word.length()];\\n      for(int i=0; i<word.length(); i++){\\n          x = x*10+(word.charAt(i)-\\'0\\'); //convert string into int type ; -\\'0\\' becauz string(char) type 0 is substracted from int 0;\\n          if(x%m == 0)\\n          div[i] = 1;\\n         else div[i] = 0; \\n          x%=m; // to take string from start;\\n      }\\n     return div;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3255054,
                "title": "java-solution-clean-code",
                "content": "# Complexity\\n- Time complexity: $O(n)$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $O(1)$ (not considering the space used for answer)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```java\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        int ans[] = new int[n];\\n        long p = 0;\\n        long l = 10 % m;\\n        for(int i = 0;i < n;i++){\\n            int d = word.charAt(i) - \\'0\\';\\n            p = ((p * l) % m + d % m) % m;\\n            ans[i] = p == 0 ? 1 : 0;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```java\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int n = word.length();\\n        int ans[] = new int[n];\\n        long p = 0;\\n        long l = 10 % m;\\n        for(int i = 0;i < n;i++){\\n            int d = word.charAt(i) - \\'0\\';\\n            p = ((p * l) % m + d % m) % m;\\n            ans[i] = p == 0 ? 1 : 0;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3254410,
                "title": "python-math",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    # math\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        # x % m = n \\n        # => x = km + n\\n        # => 10x = 10km + 10n \\n        # => 10x % m = 10n % m\\n        # so we can use 10n to replace 10x\\n        ans = []\\n        n = 0\\n        for x in word:\\n            n = (10 * n + int(x)) % m\\n            ans.append(1) if n == 0 else ans.append(0)\\n        return ans\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    # math\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        # x % m = n \\n        # => x = km + n\\n        # => 10x = 10km + 10n \\n        # => 10x % m = 10n % m\\n        # so we can use 10n to replace 10x\\n        ans = []\\n        n = 0\\n        for x in word:\\n            n = (10 * n + int(x)) % m\\n            ans.append(1) if n == 0 else ans.append(0)\\n        return ans\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3253634,
                "title": "c-solution",
                "content": "# Intuition\\nWhen checking any number\\'s divisibility, only the remainder matters.\\nSo, if you have 8 divided by 3, remainder is 2.\\nIf you are now checking 81, you can just check 2*10+1 = 21, becuase the remaining numbers (60) would be divisible by 3, because 6 was (if 6/3 works, so does 60/30).\\n\\n```\\npublic class Solution {\\n    public int[] DivisibilityArray(string word, int m) {\\n        int n = word.Length;\\n        int[] divArray = new int[n];\\n\\n        long sourceNum = 0;\\n\\n        for (int i = 0; i < n; i++) {\\n            sourceNum = ((sourceNum * 10) + word[i] - \\'0\\') % m;\\n            divArray[i] = sourceNum == 0 ? 1 : 0;\\n        }\\n\\n        return divArray;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] DivisibilityArray(string word, int m) {\\n        int n = word.Length;\\n        int[] divArray = new int[n];\\n\\n        long sourceNum = 0;\\n\\n        for (int i = 0; i < n; i++) {\\n            sourceNum = ((sourceNum * 10) + word[i] - \\'0\\') % m;\\n            divArray[i] = sourceNum == 0 ? 1 : 0;\\n        }\\n\\n        return divArray;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3251813,
                "title": "clean-o-n-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans(word.size());\\n        long long nn = 0;\\n        for(int i=0;i<word.size();i++){\\n            nn *= 10;\\n            nn += word[i]-\\'0\\';\\n            ans[i] = nn % m == 0;\\n            nn %= m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans(word.size());\\n        long long nn = 0;\\n        for(int i=0;i<word.size();i++){\\n            nn *= 10;\\n            nn += word[i]-\\'0\\';\\n            ans[i] = nn % m == 0;\\n            nn %= m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3249017,
                "title": "c-python-3-solution",
                "content": "# Code\\n\\n```python []\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        x,ans = 0,[]\\n        for e in word:\\n            x = ((x * 10) + int(e)) % m\\n            ans.append(0 if x else 1)\\n        return ans\\n\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        long long rem = 0;\\n        for(char&e: word){\\n            rem = ((rem * 10) + (e - \\'0\\')) % m;\\n            ans.push_back(rem ? 0 : 1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```python []\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        x,ans = 0,[]\\n        for e in word:\\n            x = ((x * 10) + int(e)) % m\\n            ans.append(0 if x else 1)\\n        return ans\\n\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans;\\n        long long rem = 0;\\n        for(char&e: word){\\n            rem = ((rem * 10) + (e - \\'0\\')) % m;\\n            ans.push_back(rem ? 0 : 1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3248292,
                "title": "c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans(word.size(), 0);\\n        long remain = 0;\\n        for(int i=0; i< word.size(); i++){\\n            remain = (remain * 10 + (word[i]-\\'0\\')) % m;\\n            if(!remain) ans[i] = 1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int> ans(word.size(), 0);\\n        long remain = 0;\\n        for(int i=0; i< word.size(); i++){\\n            remain = (remain * 10 + (word[i]-\\'0\\')) % m;\\n            if(!remain) ans[i] = 1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3248039,
                "title": "beats-99-c-easiest",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string words, int m) {\\n        vector<int> res(words.size(),0);\\n       long long  int sum = 0 ; \\n        for(int i = 0 ; i< words.size();i++)\\n        {\\n            sum = (sum *10 +  words[i] - \\'0\\')%m;\\n            if(sum%m==0)\\n            res[i] = 1; \\n        }\\n\\n\\n        return res ; \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string words, int m) {\\n        vector<int> res(words.size(),0);\\n       long long  int sum = 0 ; \\n        for(int i = 0 ; i< words.size();i++)\\n        {\\n            sum = (sum *10 +  words[i] - \\'0\\')%m;\\n            if(sum%m==0)\\n            res[i] = 1; \\n        }\\n\\n\\n        return res ; \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246893,
                "title": "c-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n       unsigned long long int a=0;\\n        vector<int>ans;\\n        for(int j=0;j<word.length();j++){\\n            long long int s=word[j]-\\'0\\';\\n            a=(a*10)%m+s%m;\\n            if(a%m==0){\\n                ans.push_back(1);\\n            }else{\\n                ans.push_back(0);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n       unsigned long long int a=0;\\n        vector<int>ans;\\n        for(int j=0;j<word.length();j++){\\n            long long int s=word[j]-\\'0\\';\\n            a=(a*10)%m+s%m;\\n            if(a%m==0){\\n                ans.push_back(1);\\n            }else{\\n                ans.push_back(0);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246746,
                "title": "c-user-friendly-beginner-very-easy-to-understand",
                "content": "\\nthe most imp thing to understand in this question is how we use ASCII values.\\n\\nfor refference [ASCII table](/https://www.cs.cmu.edu/~pattis/15-1XX/common/handouts/ascii.html)\\nto table a few examples,\\neg string s=\"1234\".\\nnow when we traverse through the string if we need to perform an operation on \\ns[x], then we can do it by getting the actual value. for that we need to subtract the value of \\'0\\' from it.\\n\\ns[1] = \\'2\\'.\\nnow 5 + s[1] == error.\\nbut 5 + (s[1]-\\'0\\') == 7.\\n\\nkeeping this in mind we can peform easy operation on the string,\\n\\nwe traverse through the string doin simple divison \\n\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.size();\\n        long long div=0;\\n        vector<int>ans(n);\\n        \\n        for(int i=0;i<n;i++){\\n            div = (div*10 + word[i] - \\'0\\') %m;\\n            if (div==0) ans[i]=1;\\n            else ans[i]=0;\\n        }\\n        \\n        return ans;\\n        \\n        \\n        \\n    }\\n};\\n```\\n\\nif you got any doubt feel free to ask",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.size();\\n        long long div=0;\\n        vector<int>ans(n);\\n        \\n        for(int i=0;i<n;i++){\\n            div = (div*10 + word[i] - \\'0\\') %m;\\n            if (div==0) ans[i]=1;\\n            else ans[i]=0;\\n        }\\n        \\n        return ans;\\n        \\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3245036,
                "title": "scala-foldleft",
                "content": "# Code\\n```\\nobject Solution {\\n  def divisibilityArray(word: String, m: Int): Array[Int] = {\\n    val arr = new Array[Int](word.length())\\n    arr.indices.foldLeft(0L) { (mod, i) =>\\n      val nMod = (mod * 10 + word(i) - \\'0\\') % m\\n      arr(i) = if (nMod == 0) 1 else 0\\n      nMod\\n    }\\n    arr\\n  }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n  def divisibilityArray(word: String, m: Int): Array[Int] = {\\n    val arr = new Array[Int](word.length())\\n    arr.indices.foldLeft(0L) { (mod, i) =>\\n      val nMod = (mod * 10 + word(i) - \\'0\\') % m\\n      arr(i) = if (nMod == 0) 1 else 0\\n      nMod\\n    }\\n    arr\\n  }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3243703,
                "title": "c-soln",
                "content": "<!-- # Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n         int n = word.size();\\n    vector<int> div(n);\\n    long long rem = 0;\\n    for (int i = 0; i < n; i++) {\\n        int digit = word[i] - \\'0\\';\\n        rem = (rem * 10 + digit) % m;\\n        if (rem == 0) {\\n            div[i] = 1;\\n        } else {\\n            div[i] = 0;\\n        }\\n    }\\n    return div;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n         int n = word.size();\\n    vector<int> div(n);\\n    long long rem = 0;\\n    for (int i = 0; i < n; i++) {\\n        int digit = word[i] - \\'0\\';\\n        rem = (rem * 10 + digit) % m;\\n        if (rem == 0) {\\n            div[i] = 1;\\n        } else {\\n            div[i] = 0;\\n        }\\n    }\\n    return div;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3243558,
                "title": "fastest-c-with-detailed-dry-run-and-explaination",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nPretty Straight and Forward :- \\n1. Simply visualize the basic division method thaught to us in our 4th Class\\n2. At every particular index we check if our dividend digit is divisible by the divisor.\\n3. If Divisible then we get remainder as 0\\n4. Else we get the respective remainder.\\n5. We carry the remainder for the upcoming dividend digit.\\n5. Implement that Process in code and you would be able to generate the divisibility array.\\n\\n# Dry Run\\n<!-- Describe your approach to solving the problem. -->\\n\\n```\\nInput: word = \"9983\", m = 3\\nOutput: [1,1,0,0,0,1,1,0,0]\\n\\nprevRemainder = 0\\n\\ni = 0\\n        currDigit = (0*10)+9 = 9\\n\\n        9 % 3 == 0\\n        ans[i] = 1\\n        prevRemainder = 0\\n\\ni= 1\\n\\n        currDigit = (0*10)+9 = 9\\n\\n        9 % 3 == 0\\n        ans[i] = 1\\n        prevRemainder = 0\\n\\ni = 2\\n        currDigit = (0*10)+8 = 8\\n\\n        8 % 3 = 2\\n        ans[i] = 0\\n        prevRemainder = 2\\n\\ni = 3\\n        currDigit = (2*10)+3 = 23\\n\\n        23 % 3 = 2\\n        ans[i] = 0\\n        prevRemainder = 2\\n\\nTherefore Our divisibility array is as follows : [ 1, 1, 0, 0 ]\\n```\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int>ans(word.size(),0);\\n        long long prevRem = 0;\\n\\n        for(int i=0;i<word.size();i++){\\n            int currDig = word[i]-\\'0\\';\\n\\n            long long newDividend = (prevRem * 10) + currDig;\\n\\n            int rem = (newDividend % m);\\n            if(rem==0){\\n                ans[i] = 1;\\n            }\\n\\n            prevRem = rem;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nInput: word = \"9983\", m = 3\\nOutput: [1,1,0,0,0,1,1,0,0]\\n\\nprevRemainder = 0\\n\\ni = 0\\n        currDigit = (0*10)+9 = 9\\n\\n        9 % 3 == 0\\n        ans[i] = 1\\n        prevRemainder = 0\\n\\ni= 1\\n\\n        currDigit = (0*10)+9 = 9\\n\\n        9 % 3 == 0\\n        ans[i] = 1\\n        prevRemainder = 0\\n\\ni = 2\\n        currDigit = (0*10)+8 = 8\\n\\n        8 % 3 = 2\\n        ans[i] = 0\\n        prevRemainder = 2\\n\\ni = 3\\n        currDigit = (2*10)+3 = 23\\n\\n        23 % 3 = 2\\n        ans[i] = 0\\n        prevRemainder = 2\\n\\nTherefore Our divisibility array is as follows : [ 1, 1, 0, 0 ]\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        vector<int>ans(word.size(),0);\\n        long long prevRem = 0;\\n\\n        for(int i=0;i<word.size();i++){\\n            int currDig = word[i]-\\'0\\';\\n\\n            long long newDividend = (prevRem * 10) + currDig;\\n\\n            int rem = (newDividend % m);\\n            if(rem==0){\\n                ans[i] = 1;\\n            }\\n\\n            prevRem = rem;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3243532,
                "title": "java-solution-easy-to-understand",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int [] arr = new int[word.length()];\\n        long n = 0;\\n        for(int i = 0 ; i < word.length() ; i++){\\n        \\n            n = n*10 + word.charAt(i)-48;\\n            \\n            arr[i] = n%m == 0?1:0;\\n            \\n            if(n >= m) n = n - m * (n/m);\\n            \\n        }\\n\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int [] arr = new int[word.length()];\\n        long n = 0;\\n        for(int i = 0 ; i < word.length() ; i++){\\n        \\n            n = n*10 + word.charAt(i)-48;\\n            \\n            arr[i] = n%m == 0?1:0;\\n            \\n            if(n >= m) n = n - m * (n/m);\\n            \\n        }\\n\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3241690,
                "title": "java-modulo-and-explanations",
                "content": "# Approach\\n1. As the number can have 10^5 digits, we cannot use the whole value of the number, but just in segments of modulo m\\n2. For each position of i, multiply a remainder by 10, add the digit to it and modulo m.\\n3. If this remainder (the modulo) is 0, then the number at position i is divisible by m.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        long remainder = 0;\\n        int[] answer = new int[word.length()];\\n        for (int i = 0; i < word.length(); i++) {\\n            remainder = (remainder * 10 + (word.charAt(i) - \\'0\\')) % m;\\n            if(remainder == 0) {\\n                answer[i] = 1;\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        long remainder = 0;\\n        int[] answer = new int[word.length()];\\n        for (int i = 0; i < word.length(); i++) {\\n            remainder = (remainder * 10 + (word.charAt(i) - \\'0\\')) % m;\\n            if(remainder == 0) {\\n                answer[i] = 1;\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3241594,
                "title": "faster-than-100-trivial-modulo-arithmetics",
                "content": "# Upvote if you like the simplicity\\n# Code\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        n = len(word)\\n        dig = [0] * 64\\n        for i in range(10):\\n            dig[ord(\\'0\\') + i] = i\\n        ret = [0] * n\\n        x = 0\\n        for i, d in enumerate(word):\\n            x = (10 * x + dig[ord(d)]) % m\\n            if not x:\\n                ret[i] = 1\\n        return ret\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        n = len(word)\\n        dig = [0] * 64\\n        for i in range(10):\\n            dig[ord(\\'0\\') + i] = i\\n        ret = [0] * n\\n        x = 0\\n        for i, d in enumerate(word):\\n            x = (10 * x + dig[ord(d)]) % m\\n            if not x:\\n                ret[i] = 1\\n        return ret\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3241558,
                "title": "c-golang",
                "content": "# Code\\n```\\n// C++\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.length();\\n        vector<int> ans(n);\\n        long val = 0;\\n        for(int i = 0; i < n; i++) {\\n            val = val * 10 + (word[i] - \\'0\\');\\n            val %= m;\\n            ans[i] = val == 0;\\n        }\\n        return ans;\\n    }\\n};\\n\\n\\n// Golang\\nfunc divisibilityArray(word string, m int) []int {\\n    var n int = len(word)\\n    ans := make([]int, n)\\n    val := 0\\n    for i := 0; i < n; i++ {\\n        val = val * 10 + int(word[i] - \\'0\\')\\n        val %= m\\n        if val == 0 {\\n            ans[i] = 1\\n        }\\n    }\\n    return ans\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String"
                ],
                "code": "```\\n// C++\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.length();\\n        vector<int> ans(n);\\n        long val = 0;\\n        for(int i = 0; i < n; i++) {\\n            val = val * 10 + (word[i] - \\'0\\');\\n            val %= m;\\n            ans[i] = val == 0;\\n        }\\n        return ans;\\n    }\\n};\\n\\n\\n// Golang\\nfunc divisibilityArray(word string, m int) []int {\\n    var n int = len(word)\\n    ans := make([]int, n)\\n    val := 0\\n    for i := 0; i < n; i++ {\\n        val = val * 10 + int(word[i] - \\'0\\')\\n        val %= m\\n        if val == 0 {\\n            ans[i] = 1\\n        }\\n    }\\n    return ans\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3240807,
                "title": "slolution1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, long m) {\\n        int[] res = new int[word.length()];\\n        long ost = 0;\\n        int i=0;\\n        for (char c : word.toCharArray()) {\\n            ost = (ost*10+(c-\\'0\\')) % m;\\n            res[i++] = ost == 0?1:0;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, long m) {\\n        int[] res = new int[word.length()];\\n        long ost = 0;\\n        int i=0;\\n        for (char c : word.toCharArray()) {\\n            ost = (ost*10+(c-\\'0\\')) % m;\\n            res[i++] = ost == 0?1:0;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3240777,
                "title": "python-straight-forward-1-liner-508ms-beats-99",
                "content": "```\\ndef divisibilityArray(self, word: str, m: int) -> List[int]:\\n        re = [0 for _ in range(len(word))]\\n        num = 0\\n        for i in range(len(word)):\\n            num = (num*10 + int(word[i]))%m\\n            if num%m==0:\\n                re[i] = 1\\n        return re\\n```\\n\\nhere is another shorter version using the new walrus operator (assignment expression), 508ms, beats 99%\\n\\n```\\ndef divisibilityArray(self, word: str, m: int) -> List[int]:\\n        num = 0\\n        return [1 if (num := (num*10 + int(i))%m)==0 else 0 for i in word]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef divisibilityArray(self, word: str, m: int) -> List[int]:\\n        re = [0 for _ in range(len(word))]\\n        num = 0\\n        for i in range(len(word)):\\n            num = (num*10 + int(word[i]))%m\\n            if num%m==0:\\n                re[i] = 1\\n        return re\\n```\n```\\ndef divisibilityArray(self, word: str, m: int) -> List[int]:\\n        num = 0\\n        return [1 if (num := (num*10 + int(i))%m)==0 else 0 for i in word]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3240620,
                "title": "c-easy-math-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m)\\n    {\\n        int n=word.size();\\n        vector<int> ans(n,0);\\n        long long val=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            val=val*10+(word[i]-\\'0\\');\\n            if(val%m==0)\\n            {\\n                ans[i]=1;\\n            }\\n            val=val%m;\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```\\nIf you like the solution plz upvote.\\n=",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m)\\n    {\\n        int n=word.size();\\n        vector<int> ans(n,0);\\n        long long val=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            val=val*10+(word[i]-\\'0\\');\\n            if(val%m==0)\\n            {\\n                ans[i]=1;\\n            }\\n            val=val%m;\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3240447,
                "title": "python",
                "content": "# Python\\n```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        res = []\\n        n = len(word)\\n        if m == 1:\\n            return [1 for _ in range(n)]\\n        \\n        s = 0\\n        for i in range(n):\\n            a = s\\n            b = int(word[i])\\n            c = 10*a + b\\n            r = c % m\\n            if r == 0:\\n                res.append(1)\\n                s = 0\\n            else:\\n                res.append(0)\\n                s = r\\n        \\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n        res = []\\n        n = len(word)\\n        if m == 1:\\n            return [1 for _ in range(n)]\\n        \\n        s = 0\\n        for i in range(n):\\n            a = s\\n            b = int(word[i])\\n            c = 10*a + b\\n            r = c % m\\n            if r == 0:\\n                res.append(1)\\n                s = 0\\n            else:\\n                res.append(0)\\n                s = r\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3240200,
                "title": "typescript-while-loop",
                "content": "# Code\\n```\\nfunction divisibilityArray(word: string, m: number): number[] {\\n    let out: number[] = [];\\n    let carry = 0;\\n    let initalWrdLength = word.length;\\n    let i = 0;\\n    while (i < initalWrdLength) {\\n        carry = carry * 10;\\n        let no = carry + (+word.charAt(0));\\n        carry = no % m\\n        word = word.substring(1, initalWrdLength);\\n        if (carry == 0) {\\n            out[i] = 1;\\n        } else {\\n            out[i] = 0;\\n        }\\n        i = i + 1;\\n    }\\n    return out;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction divisibilityArray(word: string, m: number): number[] {\\n    let out: number[] = [];\\n    let carry = 0;\\n    let initalWrdLength = word.length;\\n    let i = 0;\\n    while (i < initalWrdLength) {\\n        carry = carry * 10;\\n        let no = carry + (+word.charAt(0));\\n        carry = no % m\\n        word = word.substring(1, initalWrdLength);\\n        if (carry == 0) {\\n            out[i] = 1;\\n        } else {\\n            out[i] = 0;\\n        }\\n        i = i + 1;\\n    }\\n    return out;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3240183,
                "title": "easy-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n)\\nbecause the code is runnig till length n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(n)\\nbeacuse n value is being entered the vector\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        long  t=0;\\n    string v=\"\",k;vector<int> ans;\\n    for(int i=0;i<word.size();i++){\\n          t=t*10+(word[i]-\\'0\\');\\n        t%=m;\\n        if(t==0)\\n        ans.push_back(1);\\n        else\\n        ans.push_back(0);\\n    }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        long  t=0;\\n    string v=\"\",k;vector<int> ans;\\n    for(int i=0;i<word.size();i++){\\n          t=t*10+(word[i]-\\'0\\');\\n        t%=m;\\n        if(t==0)\\n        ans.push_back(1);\\n        else\\n        ans.push_back(0);\\n    }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3239426,
                "title": "simple-java-solution-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] arr = new int[word.length()];long num = 0 ;\\n        for(int i = 0 ; i < word.length() ; i++){\\n            num = (num * 10 + word.charAt(i)-\\'0\\')%m;\\n            if(num==0)arr[i]=1;\\n            else arr[i]=0;\\n        }return arr;\\n    }\\n}\\n\\n\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] arr = new int[word.length()];long num = 0 ;\\n        for(int i = 0 ; i < word.length() ; i++){\\n            num = (num * 10 + word.charAt(i)-\\'0\\')%m;\\n            if(num==0)arr[i]=1;\\n            else arr[i]=0;\\n        }return arr;\\n    }\\n}\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3238975,
                "title": "easy-solution",
                "content": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] res = new int[word.length()];\\n        char[] arr = word.toCharArray(); // faster than string.charAt(i)\\n        long carry = 0;\\n        for(int i=0;i<arr.length;i++){\\n            int cur = arr[i] - \\'0\\';\\n            long val = carry * 10 + cur;\\n            if(val % m == 0){\\n                res[i] = 1;\\n                carry = 0;\\n            }else{\\n                res[i] = 0;\\n                carry = val % m;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] res = new int[word.length()];\\n        char[] arr = word.toCharArray(); // faster than string.charAt(i)\\n        long carry = 0;\\n        for(int i=0;i<arr.length;i++){\\n            int cur = arr[i] - \\'0\\';\\n            long val = carry * 10 + cur;\\n            if(val % m == 0){\\n                res[i] = 1;\\n                carry = 0;\\n            }else{\\n                res[i] = 0;\\n                carry = val % m;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3238794,
                "title": "simulate-divide-process-only-remainder-cares",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.size();\\n        vector<int> ans(n);\\n        long long int remainder = 0;\\n        for (int i = 0; i < n; i++) { \\n            int digit = word[i] - \\'0\\';\\n            remainder = (10 * remainder + digit) % m;\\n            ans[i] = remainder == 0 ? 1 : 0;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> divisibilityArray(string word, int m) {\\n        int n = word.size();\\n        vector<int> ans(n);\\n        long long int remainder = 0;\\n        for (int i = 0; i < n; i++) { \\n            int digit = word[i] - \\'0\\';\\n            remainder = (10 * remainder + digit) % m;\\n            ans[i] = remainder == 0 ? 1 : 0;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3238466,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func divisibilityArray(_ word: String, _ m: Int) -> [Int] {\\n        let n = word.count\\n        var ans = Array(repeating: 0, count: n)\\n        var remain = 0\\n        for (i, c) in word.enumerated() {\\n            let digit = Int(String(c))!\\n            remain = (remain * 10 + digit) % m\\n            ans[i] = remain == 0 ? 1 : 0\\n        }\\n        return ans\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func divisibilityArray(_ word: String, _ m: Int) -> [Int] {\\n        let n = word.count\\n        var ans = Array(repeating: 0, count: n)\\n        var remain = 0\\n        for (i, c) in word.enumerated() {\\n            let digit = Int(String(c))!\\n            remain = (remain * 10 + digit) % m\\n            ans[i] = remain == 0 ? 1 : 0\\n        }\\n        return ans\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3238055,
                "title": "swift-one-liner",
                "content": "**One-Liner, terse (accepted answer)**\\n```\\nclass Solution {\\n    func divisibilityArray(_ word: String, _ m: Int) -> [Int] {\\n        word.reduce(into:([Int](),0)){$0.1=($0.1*10+Int($1.asciiValue!)-48)%m;$0.0+=[$0.1==0 ? 1:0]}.0\\n    }\\n}\\n```\\n\\n---\\n\\n**One-Liner, expanded and annotated (accepted answer)**\\n```\\nclass Solution {\\n    func divisibilityArray(_ word: String, _ m: Int) -> [Int] {\\n        word.reduce(into:(\\n                result: [Int](),\\n                rem: 0\\n        )) { data, ch in\\n            data.rem = (data.rem * 10 + (Int(ch.asciiValue!) - 48)) % m  // 48 is ASCII zero\\n            data.result.append(data.rem == 0 ? 1 : 0)\\n        }.result\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func divisibilityArray(_ word: String, _ m: Int) -> [Int] {\\n        word.reduce(into:([Int](),0)){$0.1=($0.1*10+Int($1.asciiValue!)-48)%m;$0.0+=[$0.1==0 ? 1:0]}.0\\n    }\\n}\\n```\n```\\nclass Solution {\\n    func divisibilityArray(_ word: String, _ m: Int) -> [Int] {\\n        word.reduce(into:(\\n                result: [Int](),\\n                rem: 0\\n        )) { data, ch in\\n            data.rem = (data.rem * 10 + (Int(ch.asciiValue!) - 48)) % m  // 48 is ASCII zero\\n            data.result.append(data.rem == 0 ? 1 : 0)\\n        }.result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3237131,
                "title": "java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] ans = new int[word.length()];\\n        long sum = 0;\\n        for(int i=0; i<word.length(); i++){\\n            sum = ((sum * 10) + word.charAt(i) - \\'0\\') % m;\\n            if(sum == 0){\\n                ans[i]=1;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] divisibilityArray(String word, int m) {\\n        int[] ans = new int[word.length()];\\n        long sum = 0;\\n        for(int i=0; i<word.length(); i++){\\n            sum = ((sum * 10) + word.charAt(i) - \\'0\\') % m;\\n            if(sum == 0){\\n                ans[i]=1;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3237108,
                "title": "easy-c-code-o-n-time",
                "content": "```\\nclass Solution\\n{\\n    public:\\n        vector<int> divisibilityArray(string word, int m)\\n        {\\n            long long t = 0;\\n            vector<int> ans;\\n            for (int i = 0; i < word.size(); i++)\\n            {\\n                int num = word[i] - \\'0\\';\\n                t = (t *10 + num) % m;\\n                if (t == 0) \\n                    ans.emplace_back(1);\\n                else \\n                    ans.emplace_back(0);\\n            }\\n            return ans;\\n        }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution\\n{\\n    public:\\n        vector<int> divisibilityArray(string word, int m)\\n        {\\n            long long t = 0;\\n            vector<int> ans;\\n            for (int i = 0; i < word.size(); i++)\\n            {\\n                int num = word[i] - \\'0\\';\\n                t = (t *10 + num) % m;\\n                if (t == 0) \\n                    ans.emplace_back(1);\\n                else \\n                    ans.emplace_back(0);\\n            }\\n            return ans;\\n        }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1814755,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1814930,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1815059,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1815395,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1832399,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1815251,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1858906,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1815216,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1814866,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1814784,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1814755,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1814930,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1815059,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1815395,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1832399,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1815251,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1858906,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1815216,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1814866,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            },
            {
                "id": 1814784,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Who all forgot to take the number as long or long long and got Signed Integer Overflow error?"
                    },
                    {
                        "username": "sansh2356",
                        "content": "Me , but rectified it in 3rd attempt"
                    },
                    {
                        "username": "Khasicode",
                        "content": "if(num == 0)ans.push_back(1);\\nWhy can\\'t I use num%m in the if condition?\\n"
                    },
                    {
                        "username": "aayu_07",
                        "content": "Convert the digit to integer by \"(word[i]-\\'0\\') \".\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\n\\nInitialize an array div of length n to hold the result.\\n\\nInitialize a variable num to 0 to hold the current remainder of the substring divided by m.\\n\\nIterate through each character c of word using a for loop.\\n\\nConvert the character c to an integer digit by subtracting the ASCII value of \\'0\\' from it.\\n\\nUpdate the remainder num using modular arithmetic: num = (num * 10 + digit) % m. This computes the remainder of the current substring up to and including the i-th character divided by m.\\n\\nIf the remainder num is 0, then the substring from the beginning up to and including the i-th character is divisible by m, so set div[i] to 1.\\n\\nReturn the array div."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the code for Help:-\\nhttps://leetcode.com/problems/find-the-divisibility-array-of-a-string/solutions/3231020/one-pass-solution-easy-to-understand/?orderBy=most_votes"
                    },
                    {
                        "username": "gmk92lc",
                        "content": "this is a really good question to understand why many problems that require you to mod the answers work "
                    },
                    {
                        "username": "runqiaoz",
                        "content": "To avoid overflow, the point is: (a * 10 + b) % m == ((a % m) * 10 + b) % m, where b is in the range of [0, 9]. \\nCan somebody explain it or prove in arithmetic way?"
                    },
                    {
                        "username": "worlddev7",
                        "content": " class Solution:\\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\\n         word_len = len(word)\\n         result = [0]*word_len\\n         s = \\'\\'\\n         for i in range(word_len):`\\n               s += word[i]\\n               if int(s) % m == 0:\\n                       result[i] = 1\\n         return result\\n\\n\\nHey Can anyone explain me why my solution is giving TLE:\\nwhere, the forloop is taking the word_len time and concat to string is constant operation and   if int(s) % m == 0: is also constant.\\nanyone who can figure out the problem in this this?"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just a small observation needed \\nsuppose a1a2.....an-1 mod k = rn-1;\\ntherefore a1a2......an mod k = (10a1a2....an-1 + an) mod k\\nwhich can be equal to the (10rn-1 +an) mod k\\n"
                    },
                    {
                        "username": "odnaks",
                        "content": "Swifters, Can it solve in swift?\\n`86217457695827338571.remainder(dividingBy: 8) = 0`\\nit doesn\\'t match with test case `\"86217457695827338571\", 8`\\nOutput\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1]\\nExpected\\n[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]\\n\\n"
                    },
                    {
                        "username": "HarshG",
                        "content": "Why does my solution fail with \njava.lang.NumberFormatException: For input string: \"86217457695827338571\"\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\n  at line 711, java.base/java.lang.Long.parseLong\n  at line 836, java.base/java.lang.Long.parseLong\n\nCode  \n\n` class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        if(word==null) {\n            return new int[0];\n        }\n        if( word.isEmpty()) {\n            return new int[0];\n        }\n        if(m<1) {\n            return new int[word.length()];\n        }\n        int[] ans = new int[word.length()];\n        \n        for(int i=0;i<word.length();i++) {\n            \n            String str = word.substring(0,i+1);\n            if(Long.parseLong(str)%m==0) {\n                ans[i] = 1;\n            } else {\n                ans[i] = 0;\n            }\n            \n        }\n        \n        return ans;\n    }\n}`\n\nI see solutions suceeded in submissions when they multiply the same long numbers by 10 \nAny good explanation is appreciated.\n\n"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Well that error means that parseLong can\\'t parse the number you\\'re asking it to parse. Here, it\\'s cuz its too large. The people who multiplied it by 10 did so since `word.substring` is another O(k) operation where k is the size of that substring.\\nBy remembering the last number generated say 47, it\\'s easy to just multiply is by 10 and add the next number in the string say 5 to get 47*10 + 5 = 475.\\nHowever, to get rid of the exception you must mod the value of this prev number to control the size of the number you\\'re working with."
                    }
                ]
            }
        ]
    }
]