[
    {
        "title": "First Unique Character in a String",
        "question_content": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.\n&nbsp;\nExample 1:\nInput: s = \"leetcode\"\nOutput: 0\nExample 2:\nInput: s = \"loveleetcode\"\nOutput: 2\nExample 3:\nInput: s = \"aabb\"\nOutput: -1\n&nbsp;\nConstraints:\n\n\t1 <= s.length <= 105\n\ts consists of only lowercase English letters.",
        "solutions": [
            {
                "id": 86348,
                "title": "java-7-lines-solution-29ms",
                "content": "Hey guys. My solution is pretty straightforward. It takes O(n) and goes through the string twice:\\n1) Get the frequency of each character.\\n2) Get the first character that has a frequency of one.\\n\\nActually the code below passes all the cases. However, according to @xietao0221, we could change the size of the frequency array to 256 to store other kinds of characters. Thanks for all the other comments and suggestions. Fight on!\\n```\\npublic class Solution {\\n    public int firstUniqChar(String s) {\\n        int freq [] = new int[26];\\n        for(int i = 0; i < s.length(); i ++)\\n            freq [s.charAt(i) - 'a'] ++;\\n        for(int i = 0; i < s.length(); i ++)\\n            if(freq [s.charAt(i) - 'a'] == 1)\\n                return i;\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int firstUniqChar(String s) {\\n        int freq [] = new int[26];\\n        for(int i = 0; i < s.length(); i ++)\\n            freq [s.charAt(i) - 'a'] ++;\\n        for(int i = 0; i < s.length(); i ++)\\n            if(freq [s.charAt(i) - 'a'] == 1)\\n                return i;\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 86338,
                "title": "c-2-solutions",
                "content": "Brute force solution, traverse string s 2 times. First time, store counts of every character into the hash table, second time, find the first character that appears only once.\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char, int> m;\\n        for (char& c : s) {\\n            m[c]++;\\n        }\\n        for (int i = 0; i < s.size(); i++) {\\n            if (m[s[i]] == 1) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```\\nif the string is extremely long, we wouldn\\'t want to traverse it twice, so instead only storing just counts of a char, we also store the index, and then traverse the hash table.\\n\\n```\\nclass Solution {\\npublic:\\n\\tint firstUniqChar(string s) {\\n        unordered_map<char, pair<int, int>> m;\\n        int idx = s.size();\\n        for (int i = 0; i < s.size(); i++) {\\n            m[s[i]].first++;\\n            m[s[i]].second = i;\\n        }\\n        for (const auto& [c, p] : m) {\\n            if (p.first == 1) {\\n                idx = min(idx, p.second);\\n            }\\n        }\\n        return idx == s.size() ? -1 : idx;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char, int> m;\\n        for (char& c : s) {\\n            m[c]++;\\n        }\\n        for (int i = 0; i < s.size(); i++) {\\n            if (m[s[i]] == 1) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n\\tint firstUniqChar(string s) {\\n        unordered_map<char, pair<int, int>> m;\\n        int idx = s.size();\\n        for (int i = 0; i < s.size(); i++) {\\n            m[s[i]].first++;\\n            m[s[i]].second = i;\\n        }\\n        for (const auto& [c, p] : m) {\\n            if (p.first == 1) {\\n                idx = min(idx, p.second);\\n            }\\n        }\\n        return idx == s.size() ? -1 : idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 86351,
                "title": "python-3-lines-beats-100-60ms",
                "content": "```   \\n    def firstUniqChar(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        letters='abcdefghijklmnopqrstuvwxyz'\\n        index=[s.index(l) for l in letters if s.count(l) == 1]\\n        return min(index) if len(index) > 0 else -1\\n```",
                "solutionTags": [],
                "code": "```   \\n    def firstUniqChar(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        letters='abcdefghijklmnopqrstuvwxyz'\\n        index=[s.index(l) for l in letters if s.count(l) == 1]\\n        return min(index) if len(index) > 0 else -1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 86511,
                "title": "java-one-pass-solution-with-linkedhashmap",
                "content": "LinkedHashMap will not be the fastest answer for this question because the input characters are just from 'a' to 'z', but in other situations it might be faster than two pass solutions. I post this just for inspiration.\\n```\\npublic int firstUniqChar(String s) {\\n        Map<Character, Integer> map = new LinkedHashMap<>();\\n        Set<Character> set = new HashSet<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            if (set.contains(s.charAt(i))) {\\n                if (map.get(s.charAt(i)) != null) {\\n                    map.remove(s.charAt(i));\\n                }\\n            } else {\\n                map.put(s.charAt(i), i);\\n                set.add(s.charAt(i));\\n            }\\n        }\\n        return map.size() == 0 ? -1 : map.entrySet().iterator().next().getValue();\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int firstUniqChar(String s) {\\n        Map<Character, Integer> map = new LinkedHashMap<>();\\n        Set<Character> set = new HashSet<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            if (set.contains(s.charAt(i))) {\\n                if (map.get(s.charAt(i)) != null) {\\n                    map.remove(s.charAt(i));\\n                }\\n            } else {\\n                map.put(s.charAt(i), i);\\n                set.add(s.charAt(i));\\n            }\\n        }\\n        return map.size() == 0 ? -1 : map.entrySet().iterator().next().getValue();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2431836,
                "title": "java-100-faster-code-easy-solution-with-explanation",
                "content": "\\tPLEASE UPVOTE IF YOU LIKE.\\n```\\nclass Solution {\\n     public int firstUniqChar(String s) {\\n        // Stores lowest index / first index\\n        int ans = Integer.MAX_VALUE;\\n        // Iterate from a to z which is 26 which makes it constant\\n        for(char c=\\'a\\'; c<=\\'z\\';c++){\\n            // indexOf will return first index of alphabet and lastIndexOf will return last index\\n            // if both are equal then it has occured only once.\\n            // through this we will get all index\\'s which are occured once\\n            // but our answer is lowest index\\n            int index = s.indexOf(c);\\n            if(index!=-1&&index==s.lastIndexOf(c)){\\n                ans = Math.min(ans,index);\\n            }\\n        }\\n\\n        // If ans remain\\'s Integer.MAX_VALUE then their is no unique character\\n        return ans==Integer.MAX_VALUE?-1:ans;\\n    }   \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n     public int firstUniqChar(String s) {\\n        // Stores lowest index / first index\\n        int ans = Integer.MAX_VALUE;\\n        // Iterate from a to z which is 26 which makes it constant\\n        for(char c=\\'a\\'; c<=\\'z\\';c++){\\n            // indexOf will return first index of alphabet and lastIndexOf will return last index\\n            // if both are equal then it has occured only once.\\n            // through this we will get all index\\'s which are occured once\\n            // but our answer is lowest index\\n            int index = s.indexOf(c);\\n            if(index!=-1&&index==s.lastIndexOf(c)){\\n                ans = Math.min(ans,index);\\n            }\\n        }\\n\\n        // If ans remain\\'s Integer.MAX_VALUE then their is no unique character\\n        return ans==Integer.MAX_VALUE?-1:ans;\\n    }   \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 86356,
                "title": "javascript-solution",
                "content": " \\n    var firstUniqChar = function(s) {\\n       for(i=0;i<s.length;i++){\\n           if (s.indexOf(s[i])===s.lastIndexOf(s[i])){\\n              return i;\\n          } \\n       }\\n       return -1;\\n    };\\n\\nOR hash map method\\n\\n     var firstUniqChar = function(s) \\n        var map=new Map();\\n        for(i=0;i<s.length;i++){\\n             if(map.has(s[i])){\\n                 map.set(s[i],2);\\n             }\\n             else{\\n                 map.set(s[i],1);\\n             }\\n         }\\n    \\n        for(i=0;i<s.length;i++){\\n            if(map.has(s[i]) && map.get(s[i])===1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n     } ;",
                "solutionTags": [],
                "code": " \\n    var firstUniqChar = function(s) {\\n       for(i=0;i<s.length;i++){\\n           if (s.indexOf(s[i])===s.lastIndexOf(s[i])){\\n              return i;\\n          } \\n       }\\n       return -1;\\n    };\\n\\nOR hash map method\\n\\n     var firstUniqChar = function(s) \\n        var map=new Map();\\n        for(i=0;i<s.length;i++){\\n             if(map.has(s[i])){\\n                 map.set(s[i],2);\\n             }\\n             else{\\n                 map.set(s[i],1);\\n             }\\n         }\\n    \\n        for(i=0;i<s.length;i++){\\n            if(map.has(s[i]) && map.get(s[i])===1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n     } ;",
                "codeTag": "Unknown"
            },
            {
                "id": 169270,
                "title": "simple-python",
                "content": "```\\nclass Solution:\\n    def firstUniqChar(self, s):\\n        d = {}\\n        seen = set()\\n        for idx, c in enumerate(s):\\n            if c not in seen:\\n                d[c] = idx\\n                seen.add(c)\\n            elif c in d:\\n                del d[c]\\n        return min(d.values()) if d else -1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s):\\n        d = {}\\n        seen = set()\\n        for idx, c in enumerate(s):\\n            if c not in seen:\\n                d[c] = idx\\n                seen.add(c)\\n            elif c in d:\\n                del d[c]\\n        return min(d.values()) if d else -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 515034,
                "title": "c-o-n-4-lines-solution-beats-97",
                "content": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        vector<int> v(26,0);\\n\\t\\tfor(char c : s) v[c - \\'a\\']++;\\n\\t\\tfor(int i = 0; i < s.length(); i++){\\n\\t\\t\\tif(v[s[i] - \\'a\\'] == 1) return i;\\n\\t\\t}\\n\\t\\treturn -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        vector<int> v(26,0);\\n\\t\\tfor(char c : s) v[c - \\'a\\']++;\\n\\t\\tfor(int i = 0; i < s.length(); i++){\\n\\t\\t\\tif(v[s[i] - \\'a\\'] == 1) return i;\\n\\t\\t}\\n\\t\\treturn -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 695033,
                "title": "java-simple-another-thought",
                "content": "```java\\n\\n    public int firstUniqChar(String s) {\\n        for(char c : s.toCharArray()){\\n            int index = s.indexOf(c);\\n            int lastIndex = s.lastIndexOf(c);\\n            if(index == lastIndex)\\n                return index;\\n        }\\n        return -1;\\n    }\\n//runtime O(n^2)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\n\\n    public int firstUniqChar(String s) {\\n        for(char c : s.toCharArray()){\\n            int index = s.indexOf(c);\\n            int lastIndex = s.lastIndexOf(c);\\n            if(index == lastIndex)\\n                return index;\\n        }\\n        return -1;\\n    }\\n//runtime O(n^2)",
                "codeTag": "Unknown"
            },
            {
                "id": 2500495,
                "title": "very-easy-100-fully-explained-java-c-python-javascript-python3",
                "content": "# **Java Solution:**\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        // Base case...\\n        if(s.length() == 0)  return -1;\\n        // To keep track of the count of each character, we initialize an int[]store with size 26...\\n        int[] store = new int[26];\\n        // Traverse string to keep track number of times each character in the string appears...\\n        for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      // To access the store[] element representative of each character, we subtract \\u2018a\\u2019 from that character...\\n        }\\n        // Traverse string again to find a character that appears exactly one time, return it\\u2019s index...\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;      // if no character appeared exactly once...\\n    }\\n}\\n```\\n\\n# **C++ Solution:**\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        map<char, int> hmap;\\n        for (int idx{}; idx < s.size(); idx++) {\\n            // Everytime the character appears in the string, add one to its count\\n            hmap[s[idx]]++;\\n        }\\n        // Traverse the string from the beginning...\\n        for (int idx{}; idx < s.size(); idx++) {\\n            // If the count of the char is equal to 1, it is the first distinct character in the list.\\n            if (hmap[s[idx]] == 1)\\n                return idx;\\n        } \\n        return -1;     // if no character appeared exactly once...\\n    }\\n};\\n```\\n\\n# **Python/Python3 Solution:**\\n```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        hset = collections.Counter(s);\\n        # Traverse the string from the beginning...\\n        for idx in range(len(s)):\\n            # If the count is equal to 1, it is the first distinct character in the list.\\n            if hset[s[idx]] == 1:\\n                return idx\\n        return -1       # If no character appeared exactly once...\\n```\\n                    \\n# **JavaScript Solution:**\\n```\\nvar firstUniqChar = function(s) {\\n    for (let idx = 0; idx < s.length; idx++){\\n        // If same...\\n        if(s.indexOf(s[idx]) === s.lastIndexOf(s[idx])){\\n            // return the index of that unique character\\n            return idx\\n        } else {\\n            return -1       // If no character appeared exactly once...\\n        }\\n    }\\n};\\n```\\n**I am working hard for you guys...\\nPlease upvote if you found any help with this code...**",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript",
                    "String",
                    "Queue"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        // Base case...\\n        if(s.length() == 0)  return -1;\\n        // To keep track of the count of each character, we initialize an int[]store with size 26...\\n        int[] store = new int[26];\\n        // Traverse string to keep track number of times each character in the string appears...\\n        for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      // To access the store[] element representative of each character, we subtract \\u2018a\\u2019 from that character...\\n        }\\n        // Traverse string again to find a character that appears exactly one time, return it\\u2019s index...\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;      // if no character appeared exactly once...\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        map<char, int> hmap;\\n        for (int idx{}; idx < s.size(); idx++) {\\n            // Everytime the character appears in the string, add one to its count\\n            hmap[s[idx]]++;\\n        }\\n        // Traverse the string from the beginning...\\n        for (int idx{}; idx < s.size(); idx++) {\\n            // If the count of the char is equal to 1, it is the first distinct character in the list.\\n            if (hmap[s[idx]] == 1)\\n                return idx;\\n        } \\n        return -1;     // if no character appeared exactly once...\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        hset = collections.Counter(s);\\n        # Traverse the string from the beginning...\\n        for idx in range(len(s)):\\n            # If the count is equal to 1, it is the first distinct character in the list.\\n            if hset[s[idx]] == 1:\\n                return idx\\n        return -1       # If no character appeared exactly once...\\n```\n```\\nvar firstUniqChar = function(s) {\\n    for (let idx = 0; idx < s.length; idx++){\\n        // If same...\\n        if(s.indexOf(s[idx]) === s.lastIndexOf(s[idx])){\\n            // return the index of that unique character\\n            return idx\\n        } else {\\n            return -1       // If no character appeared exactly once...\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1793386,
                "title": "python-simple-python-solution-with-two-approach",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Approach 1: - Iterative \\n\\tclass Solution:\\n\\t\\tdef firstUniqChar(self, s: str) -> int:\\n\\n\\t\\t\\tfor i in range(len(s)):\\n\\n\\t\\t\\t\\tif s[i] not in s[:i] and s[i] not in s[i+1:]:\\n\\n\\t\\t\\t\\t\\treturn i\\n\\n\\t\\t\\treturn -1\\n\\n# Approach 2: - HashMap or Dictionary \\n# Runtime: 137 ms, faster than 71.83% of Python3 online submissions for First Unique Character in a String.\\n# Memory Usage: 14.2 MB, less than 18.33% of Python3 online submissions for First Unique Character in a String.\\n\\n\\tclass Solution:\\n\\t\\tdef firstUniqChar(self, s: str) -> int:\\n\\n\\t\\t\\tfrequency = {}\\n\\n\\t\\t\\tfor char in s:\\n\\n\\t\\t\\t\\tif char not in frequency:\\n\\t\\t\\t\\t\\tfrequency[char] = 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tfrequency[char] = frequency[char] + 1\\n\\n\\t\\t\\tfor index in range(len(s)):\\n\\n\\t\\t\\t\\tif frequency[s[index]] == 1:\\n\\t\\t\\t\\t\\treturn index\\n\\n\\t\\t\\treturn -1\\n\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Iterator"
                ],
                "code": "class Solution:\\n\\t\\tdef firstUniqChar(self, s: str) -> int:\\n\\n\\t\\t\\tfor i in range(len(s)):\\n\\n\\t\\t\\t\\tif s[i] not in s[:i] and s[i] not in s[i+1:]:\\n\\n\\t\\t\\t\\t\\treturn i\\n\\n\\t\\t\\treturn -1\\n\\n# Approach 2: - HashMap or Dictionary \\n# Runtime: 137 ms, faster than 71.83% of Python3 online submissions for First Unique Character in a String.\\n# Memory Usage: 14.2 MB, less than 18.33% of Python3 online submissions for First Unique Character in a String.\\n\\n\\tclass Solution:\\n\\t\\tdef firstUniqChar(self, s: str) -> int:\\n\\n\\t\\t\\tfrequency = {}",
                "codeTag": "Java"
            },
            {
                "id": 369575,
                "title": "my-javascript-solution",
                "content": "```\\nvar firstUniqChar = function(s) {\\n    for(i=0; i<s.length; i++)\\n        if(s.indexOf(s[i])===s.lastIndexOf(s[i])) return i\\n    return -1\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar firstUniqChar = function(s) {\\n    for(i=0; i<s.length; i++)\\n        if(s.indexOf(s[i])===s.lastIndexOf(s[i])) return i\\n    return -1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 355045,
                "title": "python-simple-solution",
                "content": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        d = {}\\n        for l in s:\\n            if l not in d: d[l] = 1\\n            else: d[l] += 1\\n        \\n        index = -1\\n        for i in range(len(s)):\\n            if d[s[i]] == 1:\\n                index = i\\n                break\\n        \\n        return index\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        d = {}\\n        for l in s:\\n            if l not in d: d[l] = 1\\n            else: d[l] += 1\\n        \\n        index = -1\\n        for i in range(len(s)):\\n            if d[s[i]] == 1:\\n                index = i\\n                break\\n        \\n        return index\\n```",
                "codeTag": "Java"
            },
            {
                "id": 86340,
                "title": "java-two-pointers-slow-and-fast-solution-18-ms",
                "content": "The idea is to use a slow pointer to point to the current unique character and a fast pointer to scan the string. The fast pointer not only just add the count of the character. Meanwhile, when fast pointer finds the identical character of the character at the current slow pointer, we move the slow pointer to the next unique character or **not visited** character. (20 ms)\\n\\n```\\npublic class Solution {\\n    public int firstUniqChar(String s) {\\n        if (s==null || s.length()==0) return -1;\\n        int len = s.length();\\n        if (len==1) return 0;\\n        char[] cc = s.toCharArray();\\n        int slow =0, fast=1;\\n        int[] count = new int[256];\\n        count[cc[slow]]++;\\n        while (fast < len) {\\n            count[cc[fast]]++;\\n            // if slow pointer is not a unique character anymore, move to the next unique one\\n            while (slow < len && count[cc[slow]] > 1) slow++;  \\n            if (slow >= len) return -1; // no unique character exist\\n            if (count[cc[slow]]==0) { // not yet visited by the fast pointer\\n                count[cc[slow]]++; \\n                fast=slow; // reset the fast pointer\\n            }\\n            fast++;\\n        }\\n        return slow;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int firstUniqChar(String s) {\\n        if (s==null || s.length()==0) return -1;\\n        int len = s.length();\\n        if (len==1) return 0;\\n        char[] cc = s.toCharArray();\\n        int slow =0, fast=1;\\n        int[] count = new int[256];\\n        count[cc[slow]]++;\\n        while (fast < len) {\\n            count[cc[fast]]++;\\n            // if slow pointer is not a unique character anymore, move to the next unique one\\n            while (slow < len && count[cc[slow]] > 1) slow++;  \\n            if (slow >= len) return -1; // no unique character exist\\n            if (count[cc[slow]]==0) { // not yet visited by the fast pointer\\n                count[cc[slow]]++; \\n                fast=slow; // reset the fast pointer\\n            }\\n            fast++;\\n        }\\n        return slow;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3326333,
                "title": "5-lines-of-code-in-two-methods",
                "content": "\\n\\n# 1. Count the first occurence one and break loop\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i,c in enumerate(s):\\n            if s.count(c)==1:\\n                return i\\n                break\\n        return -1\\n    #please upvote me it would encourage me alot\\n\\n```\\n# 2. Using Hashtable and Set\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        dic={}\\n        seen=set()\\n        for ind,let in enumerate(s):\\n            if let not in seen:\\n                dic[let]=ind\\n                seen.add(let)\\n            elif let in dic:\\n                del dic[let]\\n        return min(dic.values()) if dic else -1\\n\\n    //please upvote me it would encourage me alot\\n\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i,c in enumerate(s):\\n            if s.count(c)==1:\\n                return i\\n                break\\n        return -1\\n    #please upvote me it would encourage me alot\\n\\n```\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        dic={}\\n        seen=set()\\n        for ind,let in enumerate(s):\\n            if let not in seen:\\n                dic[let]=ind\\n                seen.add(let)\\n            elif let in dic:\\n                del dic[let]\\n        return min(dic.values()) if dic else -1\\n\\n    //please upvote me it would encourage me alot\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 473047,
                "title": "javascript-simple-2-iterations-hash-search",
                "content": "```\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for (let char of s) {\\n        map[char] ? map[char]++ : map[char] = 1\\n    }\\n    \\n    for (let i = 0; i < s.length; i++) {\\n        if (map[s[i]] === 1) return i\\n    }\\n        \\n    return -1\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for (let char of s) {\\n        map[char] ? map[char]++ : map[char] = 1\\n    }\\n    \\n    for (let i = 0; i < s.length; i++) {\\n        if (map[s[i]] === 1) return i\\n    }\\n        \\n    return -1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 86359,
                "title": "my-4-lines-java-solution",
                "content": "```\\npublic static int firstUniqChar(String s) {\\n        \\n\\t\\tchar[] a = s.toCharArray();\\n\\t\\t\\n\\t\\tfor(int i=0; i<a.length;i++){\\n\\t\\t\\tif(s.indexOf(a[i])==s.lastIndexOf(a[i])){return i;}\\n\\t\\t}\\n\\t\\treturn -1;\\n    }",
                "solutionTags": [],
                "code": "```\\npublic static int firstUniqChar(String s) {\\n        \\n\\t\\tchar[] a = s.toCharArray();\\n\\t\\t\\n\\t\\tfor(int i=0; i<a.length;i++){\\n\\t\\t\\tif(s.indexOf(a[i])==s.lastIndexOf(a[i])){return i;}\\n\\t\\t}\\n\\t\\treturn -1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 637483,
                "title": "python-4-lines-beats-98-52ms",
                "content": "```\\nfrom collections import OrderedDict, Counter\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n\\t# Explaination: Ordered Dict will save the characters it encounters in\\n\\t# same sequence as the original string. Hence it becomes easy to catch hold of the first\\n\\t#unique character. Then according to the counter variable, whenever the first 1 is encountered\\n\\t# the corresponding dict.key\\'s index is returned from the original String.\\n        for i,j in OrderedDict(Counter(s)).items():\\n            if j == 1:\\n                return s.index(i)\\n        return -1\\n```\\n\\nEdit (2022): With updates in Python Dict, Counter now preserves order of elements during insertions. So usage of OrderedDict is redundant now.\\n```\\nfrom collections import Counter\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i,j in Counter(s).items():\\n            if j == 1:\\n                return s.index(i)\\n        return -1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nfrom collections import OrderedDict, Counter\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n\\t# Explaination: Ordered Dict will save the characters it encounters in\\n\\t# same sequence as the original string. Hence it becomes easy to catch hold of the first\\n\\t#unique character. Then according to the counter variable, whenever the first 1 is encountered\\n\\t# the corresponding dict.key\\'s index is returned from the original String.\\n        for i,j in OrderedDict(Counter(s)).items():\\n            if j == 1:\\n                return s.index(i)\\n        return -1\\n```\n```\\nfrom collections import Counter\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i,j in Counter(s).items():\\n            if j == 1:\\n                return s.index(i)\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2431833,
                "title": "python-easily-understood-faster-than-99-7-5-lines",
                "content": "**Appreciate if you could upvote this solution**\\n\\nCode:\\n```\\ndef firstUniqChar(self, s: str) -> int:\\n\\tchr_count = Counter(s)\\n\\tfor x in chr_count:\\n\\t\\tif chr_count[x] == 1:\\n\\t\\t\\treturn s.index(chr_count[x])\\n\\treturn -1\\n```\\n\\n**Time Complexity**: `O(n)`\\n**Space Complexity**: `O(n)`",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef firstUniqChar(self, s: str) -> int:\\n\\tchr_count = Counter(s)\\n\\tfor x in chr_count:\\n\\t\\tif chr_count[x] == 1:\\n\\t\\t\\treturn s.index(chr_count[x])\\n\\treturn -1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2432085,
                "title": "short-c-java-python-explained-solution-beginner-friendly-by-mr-coder",
                "content": "**Please UPVOTE if you LIKE!!**\\n**Watch this video \\uD83E\\uDC83 for the better explanation of the code.**\\n\\nhttps://www.youtube.com/watch?v=HVmq6apu3Zk\\n\\n\\n**Also you can SUBSCRIBE  \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.**\\n\\n\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        \\n        unordered_map<char,int> ump(26);\\n        for(int i=0; i<s.size(); i++){\\n            ump[s[i]]++;\\n        }\\n           \\n        \\n         for(int i=0; i<s.size(); i++){\\n           if(ump[s[i]]==1) return i;\\n        }\\n         \\n        \\n        return -1;\\n    }\\n};\\n```\\n\\n**PYTHON**(copied)\\n\\n```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        \\n        # Store drequency of all the characters of string in the array\\n        freq = Counter(s)\\n        \\n        # now check frequency of each character in the string from left-to-right\\n        # and whose frequency found to be 1 return the index\\n        for e in s :\\n            if freq[e] == 1 :\\n                return s.index(e)\\n            \\n        return -1\\n```\\n**JAVA**(copied)\\n\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        \\n        char[] arr = s.toCharArray();\\n        int len = arr.length;\\n        \\n    \\n        int[] fre = new int[26];\\n        for(char c : arr) fre[c-\\'a\\']++;\\n        \\n     \\n        for(int i=0; i<len; i++) if(fre[arr[i]-\\'a\\'] == 1) return i;\\n        return -1;\\n    }\\n}\\n```\\n**Please UPVOTE if you LIKE!!**",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        \\n        unordered_map<char,int> ump(26);\\n        for(int i=0; i<s.size(); i++){\\n            ump[s[i]]++;\\n        }\\n           \\n        \\n         for(int i=0; i<s.size(); i++){\\n           if(ump[s[i]]==1) return i;\\n        }\\n         \\n        \\n        return -1;\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        \\n        # Store drequency of all the characters of string in the array\\n        freq = Counter(s)\\n        \\n        # now check frequency of each character in the string from left-to-right\\n        # and whose frequency found to be 1 return the index\\n        for e in s :\\n            if freq[e] == 1 :\\n                return s.index(e)\\n            \\n        return -1\\n```\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        \\n        char[] arr = s.toCharArray();\\n        int len = arr.length;\\n        \\n    \\n        int[] fre = new int[26];\\n        for(char c : arr) fre[c-\\'a\\']++;\\n        \\n     \\n        for(int i=0; i<len; i++) if(fre[arr[i]-\\'a\\'] == 1) return i;\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 86385,
                "title": "1-liners-in-python-76ms",
                "content": "```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        return min([s.find(c) for c in string.ascii_lowercase if s.count(c)==1] or [-1])\\n```\\nIt gave me 76ms.\\n\\nOr\\n```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        return min([s.find(c) for c,v in collections.Counter(s).iteritems() if v==1] or [-1])\\n```\\nwhich is slower.",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        return min([s.find(c) for c in string.ascii_lowercase if s.count(c)==1] or [-1])\\n```\n```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        return min([s.find(c) for c,v in collections.Counter(s).iteritems() if v==1] or [-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 379880,
                "title": "easy-c-solution-beats-97",
                "content": "Runtime: 32 ms, faster than 97.50% of C++ online submissions for First Unique Character in a String.\\nMemory Usage: 12.6 MB, less than 100.00% of C++ online submissions for First Unique Character in a String.\\n\\n```\\nint firstUniqChar(string s) {\\n    \\n        int count[26] = {0};\\n        for(int i = 0; i<s.length(); i++)\\n            count[s[i] - \\'a\\']++;\\n        \\n        for(int i = 0; i<s.length(); i++)\\n            if(count[s[i] - \\'a\\'] == 1)\\n                return i;\\n        \\n        return -1;\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "Runtime: 32 ms, faster than 97.50% of C++ online submissions for First Unique Character in a String.\\nMemory Usage: 12.6 MB, less than 100.00% of C++ online submissions for First Unique Character in a String.\\n\\n```\\nint firstUniqChar(string s) {\\n    \\n        int count[26] = {0};\\n        for(int i = 0; i<s.length(); i++)\\n            count[s[i] - \\'a\\']++;\\n        \\n        for(int i = 0; i<s.length(); i++)\\n            if(count[s[i] - \\'a\\'] == 1)\\n                return i;\\n        \\n        return -1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2433832,
                "title": "python-99-unique-fastest-solution-detailed-explanation-easy-understand-beginner-friendly",
                "content": "**Please UPVOTE if you LIKE !!**\\n\\nSuper fast solution:\\n* Instead of counting every character, we use `find()` & `rfind()` to find the first and the last index of that character.\\n* If both index is the same, it means that the character only appears once.\\n* Store the smallest index we found, because it\\'s the answer.\\n\\nTake `\"leetcode\"` for example:\\n![image](https://assets.leetcode.com/users/images/08c5ff22-31f6-4bff-8065-5bbfdee031c9_1660649114.9671717.png)\\n\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        abc = \"abcdefghijklmnopqrstuvwxyz\"\\n        ans = 10**5     # since 1 <= s.length <= 105, the answer must be smaller than 10^5\\n        print(s.find(\\'e\\'))\\n        for c in abc:\\n            idx = s.find(c)     # check if this word is in s\\n            if (idx != -1 and idx == s.rfind(c)):   # check if first index == last index\\n                ans = min(ans, idx)     # store the smallest \\n                \\n        return ans if ans < 10**5 else -1\\n```\\nFaster than 99%, really amazing!\\n![image](https://assets.leetcode.com/users/images/fe8ca312-37f2-492d-a1f6-293fd5fc1b8a_1660647175.8997374.png)\\n\\nRegular solution (It\\'s slower but easy to understand):\\n* Just simply count how many times a character appears in s\\n* If the character only appears once, we find the answer.\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        \\n        cnt = Counter(s)\\n        \\n        for i, c in enumerate(s):\\n            if cnt[c] == 1:\\n                return i\\n        \\n        return -1\\n```\\nHere\\'s the easiest code for better understand:\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        \\n        cnt = {}\\n        \\n        for c in s:\\n            if c not in cnt:\\n                cnt[c] = 1\\n            else:\\n                cnt[c] += 1\\n                \\n        for i in range(len(s)):\\n            if cnt[s[i]] == 1:\\n                return i\\n            \\n        return -1\\n```\\n![image](https://assets.leetcode.com/users/images/80f20707-cc46-41db-86d0-d0af760647be_1660646413.674045.png)\\n\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        abc = \"abcdefghijklmnopqrstuvwxyz\"\\n        ans = 10**5     # since 1 <= s.length <= 105, the answer must be smaller than 10^5\\n        print(s.find(\\'e\\'))\\n        for c in abc:\\n            idx = s.find(c)     # check if this word is in s\\n            if (idx != -1 and idx == s.rfind(c)):   # check if first index == last index\\n                ans = min(ans, idx)     # store the smallest \\n                \\n        return ans if ans < 10**5 else -1\\n```\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        \\n        cnt = Counter(s)\\n        \\n        for i, c in enumerate(s):\\n            if cnt[c] == 1:\\n                return i\\n        \\n        return -1\\n```\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        \\n        cnt = {}\\n        \\n        for c in s:\\n            if c not in cnt:\\n                cnt[c] = 1\\n            else:\\n                cnt[c] += 1\\n                \\n        for i in range(len(s)):\\n            if cnt[s[i]] == 1:\\n                return i\\n            \\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1631612,
                "title": "java-solution-1ms-beats-100",
                "content": "```\\nclass Solution {\\n\\t\\tpublic int firstUniqChar(String s) {\\n        int ans = Integer.MAX_VALUE;\\n        for (char i = \\'a\\'; i <= \\'z\\';i++) {\\n            int ind = s.indexOf (i);\\n            if (ind != -1 && ind == s.lastIndexOf (i))\\n                ans = Math.min (ans,ind);\\n        }\\n        if (ans == Integer.MAX_VALUE)\\n            return -1;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\t\\tpublic int firstUniqChar(String s) {\\n        int ans = Integer.MAX_VALUE;\\n        for (char i = \\'a\\'; i <= \\'z\\';i++) {\\n            int ind = s.indexOf (i);\\n            if (ind != -1 && ind == s.lastIndexOf (i))\\n                ans = Math.min (ans,ind);\\n        }\\n        if (ans == Integer.MAX_VALUE)\\n            return -1;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1125015,
                "title": "cpp-hashmaps",
                "content": "```\\n#include<unordered_map>\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> map;\\n        for(int i=0; i<s.length(); i++){\\n            if(map.count(s[i])==0)\\n                map[s[i]] = 1;\\n            else\\n                map[s[i]]++;   \\n        }\\n        for(int i=0; i<s.length(); i++)\\n            if(map[s.at(i)] == 1)\\n                return i;\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n#include<unordered_map>\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> map;\\n        for(int i=0; i<s.length(); i++){\\n            if(map.count(s[i])==0)\\n                map[s[i]] = 1;\\n            else\\n                map[s[i]]++;   \\n        }\\n        for(int i=0; i<s.length(); i++)\\n            if(map[s.at(i)] == 1)\\n                return i;\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2431426,
                "title": "c-3-simple-and-easy-solutions-concise-solutions",
                "content": "**please upvote if you find it helpful**\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s)\\n    {\\n        unordered_map<char, int> letter;\\n        const int sSize = s.size();\\n        for (int i = 0; i < sSize; ++i)\\n            ++letter[s[i]];\\n\\n        for (int i = 0; i < sSize; ++i)\\n            if (letter[s[i]] == 1)\\n                return i;\\n        return -1;\\n    }\\n};\\n```\\n```\\nclass Solution {\\npublic:\\n\\tint firstUniqChar(string s) {\\n        unordered_map<char, pair<int, int>> m;\\n        int idx = s.size();\\n        for (int i = 0; i < s.size(); i++) {\\n            m[s[i]].first++;\\n            m[s[i]].second = i;\\n        }\\n        for (const auto& [c, p] : m) {\\n            if (p.first == 1) {\\n                idx = min(idx, p.second);\\n            }\\n        }\\n        return idx == s.size() ? -1 : idx;\\n    }\\n};\\n```\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) \\n    {  \\n        for(int i=0;i<s.length();i++)\\n        {\\n            bool flag = true;\\n            for(int j=0;j<s.length();j++)\\n            {\\n                if(i!=j && s[i] == s[j])\\n                {\\n                    flag = false;\\n                    break;\\n                }\\n            }\\n            \\n            if(flag == true)\\n                return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s)\\n    {\\n        unordered_map<char, int> letter;\\n        const int sSize = s.size();\\n        for (int i = 0; i < sSize; ++i)\\n            ++letter[s[i]];\\n\\n        for (int i = 0; i < sSize; ++i)\\n            if (letter[s[i]] == 1)\\n                return i;\\n        return -1;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n\\tint firstUniqChar(string s) {\\n        unordered_map<char, pair<int, int>> m;\\n        int idx = s.size();\\n        for (int i = 0; i < s.size(); i++) {\\n            m[s[i]].first++;\\n            m[s[i]].second = i;\\n        }\\n        for (const auto& [c, p] : m) {\\n            if (p.first == 1) {\\n                idx = min(idx, p.second);\\n            }\\n        }\\n        return idx == s.size() ? -1 : idx;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) \\n    {  \\n        for(int i=0;i<s.length();i++)\\n        {\\n            bool flag = true;\\n            for(int j=0;j<s.length();j++)\\n            {\\n                if(i!=j && s[i] == s[j])\\n                {\\n                    flag = false;\\n                    break;\\n                }\\n            }\\n            \\n            if(flag == true)\\n                return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 86471,
                "title": "my-c-6-lines-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int list[256] = {0};\\n        for(auto i: s)\\n            list[i] ++;\\n        for(int i=0; i<s.length();i++)\\n            if(list[s[i]]==1) return i;\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int list[256] = {0};\\n        for(auto i: s)\\n            list[i] ++;\\n        for(int i=0; i<s.length();i++)\\n            if(list[s[i]]==1) return i;\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2431420,
                "title": "daily-leetcoding-challenge-august-day-16",
                "content": "This problem is the Daily LeetCoding Challenge for August, Day 16.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/first-unique-character-in-a-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Linear time solution\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/first-unique-character-in-a-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 86379,
                "title": "python-dictionary-collections-counter-and-count-3-ways",
                "content": "```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n\\n        for i in range(len(s)):\\n            c = s[i]\\n            if s.count(c)==1:\\n                return i\\n\\n        return -1\\n\\n    def firstUniqChar2(self, s):\\n\\n        from collections import Counter\\n        sc = Counter(s)\\n        for i in range(len(s)):\\n            c = s[i]\\n            if sc.get(c,0)==1:\\n                return i\\n\\n        return -1\\n\\n    def firstUniqChar3(self, s):\\n\\n        d = {}\\n        for c in s:\\n            if c in d.keys():\\n                d[c] += 1\\n            else:\\n                d[c] = 1\\n\\n        for i in range(len(s)):\\n            c = s[i]\\n            if d[c]==1:\\n                return i\\n\\n        return -1 \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n\\n        for i in range(len(s)):\\n            c = s[i]\\n            if s.count(c)==1:\\n                return i\\n\\n        return -1\\n\\n    def firstUniqChar2(self, s):\\n\\n        from collections import Counter\\n        sc = Counter(s)\\n        for i in range(len(s)):\\n            c = s[i]\\n            if sc.get(c,0)==1:\\n                return i\\n\\n        return -1\\n\\n    def firstUniqChar3(self, s):\\n\\n        d = {}\\n        for c in s:\\n            if c in d.keys():\\n                d[c] += 1\\n            else:\\n                d[c] = 1\\n\\n        for i in range(len(s)):\\n            c = s[i]\\n            if d[c]==1:\\n                return i\\n\\n        return -1 \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2976235,
                "title": "easy-c-solution-basic-approach-array-loop",
                "content": "# Intuition\\nJust find the first character whose count is 1 by iterating.\\n\\n# Approach\\nInitialised an array of 26 length to store count of alphabets.\\nThen just iterated through the string to find 1st unique character.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int arr[26]={0};\\n        int ans = -1;\\n        for(int i=0; i<s.length(); i++){\\n            int index = s[i]-\\'a\\';\\n            arr[index]++;\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(arr[s[i]-\\'a\\'] == 1) return i; \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int arr[26]={0};\\n        int ans = -1;\\n        for(int i=0; i<s.length(); i++){\\n            int index = s[i]-\\'a\\';\\n            arr[index]++;\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(arr[s[i]-\\'a\\'] == 1) return i; \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1131305,
                "title": "99-56-of-javascript-online-submissions-easy-js-solution",
                "content": "```\\nvar firstUniqChar = function(s) {\\n    for(let i=0;i<s.length;i++){\\n         let ch=s[i]\\n         if(s.indexOf(ch)==i && s.indexOf(ch,i+1)==-1){\\n                 return i\\n         }\\n    }\\n        return -1\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar firstUniqChar = function(s) {\\n    for(let i=0;i<s.length;i++){\\n         let ch=s[i]\\n         if(s.indexOf(ch)==i && s.indexOf(ch,i+1)==-1){\\n                 return i\\n         }\\n    }\\n        return -1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3356090,
                "title": "java-100-faster-3-line-hashmap-code",
                "content": "**PLEASE UPVOTE IF YOU LIKE IT;**\\n\\n# Code\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for (char c : s.toCharArray()) map.put(c, map.getOrDefault(c, 0) + 1);\\n\\n        for(int i = 0; i < s.length(); i++){\\n            if(map.containsKey(s.charAt(i)) && map.get(s.charAt(i)) == 1) return i;\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "Counting",
                    "Hash Function"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for (char c : s.toCharArray()) map.put(c, map.getOrDefault(c, 0) + 1);\\n\\n        for(int i = 0; i < s.length(); i++){\\n            if(map.containsKey(s.charAt(i)) && map.get(s.charAt(i)) == 1) return i;\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1282412,
                "title": "c-brute-force-approach-efficient-approach-easy-to-understand",
                "content": "* **Brute Force Approach**  - O(n^2) time complexity + 2 traversals needed \\nFaster than 59.75% of cpp submissions\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) \\n    {  \\n        for(int i=0;i<s.length();i++)\\n        {\\n            bool flag = true;\\n            for(int j=0;j<s.length();j++)\\n            {\\n                if(i!=j && s[i] == s[j])\\n                {\\n                    flag = false;\\n                    break;\\n                }\\n            }\\n            \\n            if(flag == true)\\n                return i;\\n        }\\n        return -1;\\n    }\\n};\\n```\\n\\n* **Efficient Approach** -  O(**len(s)** + 26)   time complexity + 2 traversals needed\\nFaster than 95.91% of cpp submissions\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) \\n    {\\n        \\n        int arr[26] = {0};\\n        \\n        for(int i=0;i<s.length();i++)\\n        {\\n           arr[s[i]-\\'a\\']++;\\n        }\\n        \\n        \\n        for(int i =0 ;i<s.length();i++)\\n        {\\n            if(arr[s[i]-\\'a\\'] ==1)\\n                return i;\\n        }\\n        return -1;\\n    }\\n    \\n};\\n```\\n\\n***Like it ? Upvote it !***",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) \\n    {  \\n        for(int i=0;i<s.length();i++)\\n        {\\n            bool flag = true;\\n            for(int j=0;j<s.length();j++)\\n            {\\n                if(i!=j && s[i] == s[j])\\n                {\\n                    flag = false;\\n                    break;\\n                }\\n            }\\n            \\n            if(flag == true)\\n                return i;\\n        }\\n        return -1;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) \\n    {\\n        \\n        int arr[26] = {0};\\n        \\n        for(int i=0;i<s.length();i++)\\n        {\\n           arr[s[i]-\\'a\\']++;\\n        }\\n        \\n        \\n        for(int i =0 ;i<s.length();i++)\\n        {\\n            if(arr[s[i]-\\'a\\'] ==1)\\n                return i;\\n        }\\n        return -1;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3137751,
                "title": "onlycode-in-java-using-hashmap",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int firstUniqChar(String str) {\\n        HashMap<Character,Integer> map = new HashMap<>();\\n        for(int i=0;i<str.length();i++){\\n            if(map.containsKey(str.charAt(i))){\\n                map.put(str.charAt(i),map.get(str.charAt(i))+1);\\n            }else{\\n                map.put(str.charAt(i),1);\\n            }\\n        }\\n        for(int i=0;i<str.length();i++){\\n            if(map.get(str.charAt(i))==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String str) {\\n        HashMap<Character,Integer> map = new HashMap<>();\\n        for(int i=0;i<str.length();i++){\\n            if(map.containsKey(str.charAt(i))){\\n                map.put(str.charAt(i),map.get(str.charAt(i))+1);\\n            }else{\\n                map.put(str.charAt(i),1);\\n            }\\n        }\\n        for(int i=0;i<str.length();i++){\\n            if(map.get(str.charAt(i))==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1736628,
                "title": "python-simple-solution",
                "content": "Input: \"loveleetcode\"\\nOutput: 2\\n\\nAt position 2, if we see [lo]+[eleetcode], there is no occurance of \\'v\\',\\nSo we return 2\\n\\nFor loop is finished and still nothing is returned, we return -1\\n```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        for i in range(len(s)):\\n            if s[i] not in s[:i]+s[i+1:]:\\n                return i\\n        return -1\\n        \\n```\\nAn upvote won\\'t cost u anything :)",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        for i in range(len(s)):\\n            if s[i] not in s[:i]+s[i+1:]:\\n                return i\\n        return -1\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3062165,
                "title": "accepted-easy-solution-short-simple-best-method",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n         unordered_map<char, int> m;\\n        for (char& c : s) {\\n            m[c]++;\\n        }\\n        for (int i = 0; i < s.size(); i++) {\\n            if (m[s[i]] == 1)\\n                return i;\\n        }\\n        return -1;\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n         unordered_map<char, int> m;\\n        for (char& c : s) {\\n            m[c]++;\\n        }\\n        for (int i = 0; i < s.size(); i++) {\\n            if (m[s[i]] == 1)\\n                return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1082362,
                "title": "my-4-line-o-n-solution-5ms-beats-100",
                "content": "```\\npublic int firstUniqChar(String s) {\\n\\n           int freq[] = new int[26];\\n           for(char i: s.toCharArray()) freq[i-\\'a\\']++;\\n           for(int i = 0; i < s.length(); i++) if(freq[s.charAt(i)-\\'a\\'] == 1) return i;\\n           return -1;\\n \\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int firstUniqChar(String s) {\\n\\n           int freq[] = new int[26];\\n           for(char i: s.toCharArray()) freq[i-\\'a\\']++;\\n           for(int i = 0; i < s.length(); i++) if(freq[s.charAt(i)-\\'a\\'] == 1) return i;\\n           return -1;\\n \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 166983,
                "title": "python-two-pass-one-pass",
                "content": "### 387. First Unique Character in a String\\n\\n\\n#### Two Pass \\n```\\n> \\u7C7B\\u578B\\uFF1AHash Table\\n> Time Complexity O(2N)\\n> Space Complexity O(N)\\n```\\n\\n\\u626B\\u4E24\\u8FB9\\uFF0C\\u7B2C\\u4E00\\u904D\\u5B58\\u5B57\\u5178\\uFF0C\\u7B2C\\u4E8C\\u904D\\u67E5\\u627E\\uFF0C\\u5982\\u679C\\u5B57\\u5178\\u91CC\\u9762\\u5BF9\\u5E94Counter\\u4E3A1\\uFF0C\\u5C31\\u8FD4\\u56DE\\u3002\\n\\u8FD9\\u91CC\\u6709\\u4E2A\\u53EF\\u4EE5\\u6539\\u8FDB\\u7684\\u5730\\u65B9\\uFF0C\\u5982\\u679C\\u6211\\u4EEC\\u7684input\\u957F\\u5EA6\\u7279\\u522B\\u7684\\u957F\\uFF0C\\u6211\\u4EEC\\u7B2C\\u4E8C\\u6B21\\u7684for loop\\u5C31\\u4F1A\\u6BD4\\u8F83\\u6D6A\\u8D39\\u65F6\\u95F4\\uFF0C\\u6240\\u4EE5\\u6211\\u4EEC\\u53EF\\u4EE5\\u5BF9\\u7B2C\\u4E8C\\u904D\\u8FED\\u4EE3\\u8FDB\\u884C\\u4F18\\u5316\\u3002\\n\\n```python\\nclass Solution:\\n    def firstUniqChar(self, s):\\n        dic = {}\\n        for char in s:\\n            dic[char] = dic.get(char, 0) + 1\\n        \\n        for i, char in enumerate(s):\\n            if dic[char] and dic[char] == 1:\\n                return i\\n        return -1\\n```\\n\\n#### One Pass \\n```\\n> \\u7C7B\\u578B\\uFF1AHash Table\\n> Time Complexity O(N * M)\\n> Space Complexity O(M)\\n```\\n\\n##### Step 1 \\u626B\\u63CF`s`\\u5E76\\u5B58\\u50A8\\u5B57\\u5178\\n\\u5B58\\u5B57\\u5178\\u65F6\\u5019\\uFF0C\\u5C06value\\u8BBE\\u6210`index`\\uFF0C\\u5982\\u679C\\u5728\\u5B58\\u50A8\\u7684\\u65F6\\u5019\\u53D1\\u73B0\\u5B57\\u5178\\u91CC\\u9762\\u6709\\u91CD\\u590D\\uFF0C\\u5219\\u5C06value\\u8BBE\\u7F6E\\u6210`-1`\\n\\n##### Step 2 \\u626B\\u63CF\\u5B57\\u5178\\uFF0C\\u5B9E\\u65BD\\u66F4\\u65B0\\u6700\\u5C0F\\u8FD4\\u56DE\\u503C\\u3002\\n\\u6211\\u4EEC\\u8FED\\u4EE3\\u5B58\\u50A8\\u597D\\u4E86\\u7684\\u5B57\\u5178\\uFF0C\\u56E0\\u4E3A\\u6211\\u4EEC\\u77E5\\u9053`-1`\\u4EE3\\u8868\\u4E00\\u5B9A\\u6709\\u91CD\\u590D\\uFF0C\\u6211\\u4EEC\\u5C31pass\\u6389\\u8FD9\\u79CD\\u60C5\\u51B5\\uFF0C\\u53EA\\u8981\\u5F53\\u524D`key`\\u5BF9\\u5E94\\u7684`value`\\u4E0D\\u4E3A\\u8D1F\\u6570\\uFF0C\\u5C31\\u8BC1\\u660E`value`\\u662F**unique character\\u76F8\\u5BF9\\u5E94\\u7684index**\\uFF0C\\u6211\\u4EEC\\u5728\\u5916\\u56F4\\u8BBE\\u7F6E\\u4E00\\u4E2A`res`\\u8BB0\\u5F55\\u6700\\u5C0F\\u7684index\\u503C\\uFF0C\\u5728\\u5BF9\\u5B57\\u5178\\u8FED\\u4EE3\\u7684\\u65F6\\u5019\\uFF0C\\u5B9E\\u65F6\\u6BD4\\u8F83+\\u66F4\\u65B0\\u5373\\u53EF\\u3002\\n\\u53E6\\u5916\\u5982\\u679C`res`\\u4ECE\\u5934\\u5230\\u5C3E\\u6CA1\\u6709\\u53D8\\u8FC7\\uFF0C\\u5219\\u4EE3\\u8868\\u5B57\\u5178\\u6CA1\\u6709unique character\\uFF0C\\u8FD4\\u56DE`-1`\\n\\n```python\\nclass Solution:\\n    def firstUniqChar(self, s):\\n        dic = {}\\n        for i, char in enumerate(s):\\n            if char in dic:\\n                dic[char] = -1\\n            else:\\n                dic[char] = i\\n        \\n        res = float(\\'inf\\')\\n        for key, val in dic.items():\\n            if val == -1: continue\\n            res = min(res, val)\\n        \\n        return res if res != float(\\'inf\\') else -1\\n\\n```",
                "solutionTags": [],
                "code": "```\\n> \\u7C7B\\u578B\\uFF1AHash Table\\n> Time Complexity O(2N)\\n> Space Complexity O(N)\\n```\n```python\\nclass Solution:\\n    def firstUniqChar(self, s):\\n        dic = {}\\n        for char in s:\\n            dic[char] = dic.get(char, 0) + 1\\n        \\n        for i, char in enumerate(s):\\n            if dic[char] and dic[char] == 1:\\n                return i\\n        return -1\\n```\n```\\n> \\u7C7B\\u578B\\uFF1AHash Table\\n> Time Complexity O(N * M)\\n> Space Complexity O(M)\\n```\n```python\\nclass Solution:\\n    def firstUniqChar(self, s):\\n        dic = {}\\n        for i, char in enumerate(s):\\n            if char in dic:\\n                dic[char] = -1\\n            else:\\n                dic[char] = i\\n        \\n        res = float(\\'inf\\')\\n        for key, val in dic.items():\\n            if val == -1: continue\\n            res = min(res, val)\\n        \\n        return res if res != float(\\'inf\\') else -1\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877348,
                "title": "easy-brute-force-upvote-if-you-like",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int  n=s.size();\\n       \\n        \\n        for(int i=0;i<n;i++)\\n        {\\n             int flag=1;\\n            for(int j=0;j<n;j++)\\n            {\\n                if(i!=j && s[i]==s[j])\\n                {\\n                    flag=0;\\n                    break;\\n                }\\n               \\n            }\\n            if(flag==1)\\n            {\\n                return i;\\n            }\\n           \\n        }\\n        return -1;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int  n=s.size();\\n       \\n        \\n        for(int i=0;i<n;i++)\\n        {\\n             int flag=1;\\n            for(int j=0;j<n;j++)\\n            {\\n                if(i!=j && s[i]==s[j])\\n                {\\n                    flag=0;\\n                    break;\\n                }\\n               \\n            }\\n            if(flag==1)\\n            {\\n                return i;\\n            }\\n           \\n        }\\n        return -1;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2433918,
                "title": "c-beats-100-easy-to-understand-beginner-friendly",
                "content": "```\\nint firstUniqChar(char * s){\\n    int i = 0, map[26], sSize = strlen(s);\\n    \\n    for(i; i < 26; i++)\\n        map[i] = 0;\\n    \\n    for(i=0; i < sSize; i++)\\n        map[s[i] - \\'a\\']++;\\n    \\n    for(i=0; i < sSize; i++)\\n        if (map[s[i] - \\'a\\'] == 1)\\n            return i;\\n    \\n    return -1;\\n}\\n```\\n**Please UPVOTE if you LIKE!!**\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint firstUniqChar(char * s){\\n    int i = 0, map[26], sSize = strlen(s);\\n    \\n    for(i; i < 26; i++)\\n        map[i] = 0;\\n    \\n    for(i=0; i < sSize; i++)\\n        map[s[i] - \\'a\\']++;\\n    \\n    for(i=0; i < sSize; i++)\\n        if (map[s[i] - \\'a\\'] == 1)\\n            return i;\\n    \\n    return -1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1326162,
                "title": "swift-first-unique-character-in-a-string-test-cases",
                "content": "```swift\\nclass Solution {\\n    func firstUniqChar(_ s: String) -> Int {\\n        var arr = Array(repeating: 0, count: 26)\\n        let a = UnicodeScalar(\"a\").value\\n        s.unicodeScalars.forEach{\\n            arr[Int($0.value - a)] += 1\\n        }\\n        var iter = 0\\n        for ch in s.unicodeScalars {\\n            if arr[Int(ch.value - a)] == 1 { return iter }\\n            iter += 1\\n        }\\n        return -1\\n    }\\n}\\n```\\n\\n```swift\\nimport XCTest\\n\\n// Executed 3 tests, with 0 failures (0 unexpected) in 0.045 (0.048) seconds\\n\\nclass Tests: XCTestCase {\\n    private let s = Solution()\\n    func test0() {\\n        let res = s.firstUniqChar(\"leetcode\")\\n        XCTAssertEqual(res, 0)\\n    }\\n    func test1() {\\n        let res = s.firstUniqChar(\"loveleetcode\")\\n        XCTAssertEqual(res, 2)\\n    }\\n    func test2() {\\n        let res = s.firstUniqChar(\"aabb\")\\n        XCTAssertEqual(res, -1)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func firstUniqChar(_ s: String) -> Int {\\n        var arr = Array(repeating: 0, count: 26)\\n        let a = UnicodeScalar(\"a\").value\\n        s.unicodeScalars.forEach{\\n            arr[Int($0.value - a)] += 1\\n        }\\n        var iter = 0\\n        for ch in s.unicodeScalars {\\n            if arr[Int(ch.value - a)] == 1 { return iter }\\n            iter += 1\\n        }\\n        return -1\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\n// Executed 3 tests, with 0 failures (0 unexpected) in 0.045 (0.048) seconds\\n\\nclass Tests: XCTestCase {\\n    private let s = Solution()\\n    func test0() {\\n        let res = s.firstUniqChar(\"leetcode\")\\n        XCTAssertEqual(res, 0)\\n    }\\n    func test1() {\\n        let res = s.firstUniqChar(\"loveleetcode\")\\n        XCTAssertEqual(res, 2)\\n    }\\n    func test2() {\\n        let res = s.firstUniqChar(\"aabb\")\\n        XCTAssertEqual(res, -1)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2683951,
                "title": "easy-to-understand-java-solution-using-hashmap",
                "content": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        HashMap<Character,Integer> map = new HashMap<>();//Creating a hashmap which will take avery character and note its occurrence.\\n        for(int i = 0 ; i < s.length() ; i++){\\n            map.put(s.charAt(i), map.getOrDefault(s.charAt(i),0)+1);\\n        }\\n        for(int i = 0 ; i < s.length() ; i++){\\n            if(map.get(s.charAt(i))==1) return i;//If the occurrence of any char is once, then it is the required ans\\n        }\\n        return -1;//else returning -1\\n    }\\n}\\n```\\nIt\\'s time complexity is O(n)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        HashMap<Character,Integer> map = new HashMap<>();//Creating a hashmap which will take avery character and note its occurrence.\\n        for(int i = 0 ; i < s.length() ; i++){\\n            map.put(s.charAt(i), map.getOrDefault(s.charAt(i),0)+1);\\n        }\\n        for(int i = 0 ; i < s.length() ; i++){\\n            if(map.get(s.charAt(i))==1) return i;//If the occurrence of any char is once, then it is the required ans\\n        }\\n        return -1;//else returning -1\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2431556,
                "title": "c-constant-space-solution-o-1-space-very-fast-sickest",
                "content": "Keep a frequency map of all characters in s.  \\nUse a vector of size 26 for speed\\nreturn first index that the count is == 1\\n\\nTime complexity: O(N)\\nSpace complexity: O(1) because its just vector of size 26 everytime\\n\\n**SOLVED LIVE ON STREAM. link in profile.  check out my sick keyboards.**\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        vector<int> freqMap(26);\\n        \\n        for(char c : s) {\\n            freqMap[c - \\'a\\']++;\\n        }\\n        \\n        int n = s.length();\\n        \\n        for(int i = 0; i < n; i++) {\\n            if(freqMap[s[i] - \\'a\\'] == 1) return i;\\n        }\\n        \\n        return -1;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        vector<int> freqMap(26);\\n        \\n        for(char c : s) {\\n            freqMap[c - \\'a\\']++;\\n        }\\n        \\n        int n = s.length();\\n        \\n        for(int i = 0; i < n; i++) {\\n            if(freqMap[s[i] - \\'a\\'] == 1) return i;\\n        }\\n        \\n        return -1;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 614351,
                "title": "js-solution",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar firstUniqChar = function(s) {\\n    for(var i =0 ; i < s.length ; i++) {\\n        if(s.indexOf(s[i]) == s.lastIndexOf(s[i]))  {\\n            return i;\\n        } \\n    }return -1\\n   \\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar firstUniqChar = function(s) {\\n    for(var i =0 ; i < s.length ; i++) {\\n        if(s.indexOf(s[i]) == s.lastIndexOf(s[i]))  {\\n            return i;\\n        } \\n    }return -1\\n   \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 258797,
                "title": "clean-python-solution",
                "content": "```python\\nfrom collections import Counter\\n\\nclass Solution(object):\\n    def firstUniqChar(self, string):\\n        # counter = Counter()\\n        # for char in string:\\n        #     counter[char]+=1\\n        counter = Counter(string)\\n\\n        for i in xrange(len(string)):\\n            char = string[i]\\n            if counter[char]==1: return i\\n\\n        return -1\\n```\\n\\n# More Resource\\nI really take time tried to make the best solution or explaination. \\nBecause I wanted to help others like me. \\nIf you like my answer, a star on [GitHub](https://github.com/wuduhren/leetcode-python) means a lot to me. \\nhttps://github.com/wuduhren/leetcode-python",
                "solutionTags": [],
                "code": "```python\\nfrom collections import Counter\\n\\nclass Solution(object):\\n    def firstUniqChar(self, string):\\n        # counter = Counter()\\n        # for char in string:\\n        #     counter[char]+=1\\n        counter = Counter(string)\\n\\n        for i in xrange(len(string)):\\n            char = string[i]\\n            if counter[char]==1: return i\\n\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 86460,
                "title": "javascript-beats-98-o-n-time-o-1-space",
                "content": "`states` is an array of 26 states (represented by an integer) corresponding to each possible character.\\nIf a state is `-1`, the character has not been encountered yet.\\nIf a state is `-2`, the character has been encountered more than once.\\nOtherwise, the state represents the index at which the character was first encountered.\\n\\n`order` is an array containing character values.\\n\\nA character value is calculated by the ascii value of the character minus `97` (ascii value of `'a'`), such that the value of `'a'` is `0`, the value of `'b'` is `1`, etc.\\n\\nAt the end of the string traversal, `order` will contain in chronological order the value for every new character encountered. The values are unique because any character is only added on its first encounter during the string traversal.\\n\\nThe string traversal is as follows:\\n```md\\nfor (character, index) in string:\\n    if state of character is \"not found\":\\n        set state of character to be index\\n        add character to encounters\\n    else:\\n        set state of character to be \"duplicate\"\\n```\\n\\nThe return value will be the index of the first character in `order` for which the state is not \"not found\" or \"duplicate\", or `-1` if none of the characters meet this requirement.\\n\\n```js\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\n\\nlet firstUniqChar = s => {\\n    let states = Array(26).fill(-1)\\n    let order = []\\n    \\n    for (let i = 0; i < s.length; i++) {\\n        let char = s.charCodeAt(i) - 97\\n        \\n        if (states[char] === -1) {\\n            order.push(char)\\n            states[char] = i\\n        } else {\\n            states[char] = -2\\n        }\\n    }\\n    \\n    for (let i = 0; i < order.length; i++) {\\n        let char = order[i]\\n        let index = states[char]\\n        if (index > -1) return index\\n    }\\n    \\n    return -1\\n};\\n```",
                "solutionTags": [],
                "code": "```md\\nfor (character, index) in string:\\n    if state of character is \"not found\":\\n        set state of character to be index\\n        add character to encounters\\n    else:\\n        set state of character to be \"duplicate\"\\n```\n```js\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\n\\nlet firstUniqChar = s => {\\n    let states = Array(26).fill(-1)\\n    let order = []\\n    \\n    for (let i = 0; i < s.length; i++) {\\n        let char = s.charCodeAt(i) - 97\\n        \\n        if (states[char] === -1) {\\n            order.push(char)\\n            states[char] = i\\n        } else {\\n            states[char] = -2\\n        }\\n    }\\n    \\n    for (let i = 0; i < order.length; i++) {\\n        let char = order[i]\\n        let index = states[char]\\n        if (index > -1) return index\\n    }\\n    \\n    return -1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1283520,
                "title": "hash-map-solution-c-better-and-easy-solution",
                "content": "```\\nint firstUniqChar(string s) \\n    {\\n        unordered_map<char,int> map;\\n        for(int i=0; i<s.length(); i++)\\n        {\\n                map[s[i]]++;   \\n        }\\n        for(int i=0; i<s.length(); i++)\\n        {  \\n            if(map[s[i]] == 1)\\n                return i;\\n        }\\n        return -1;\\n    \\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint firstUniqChar(string s) \\n    {\\n        unordered_map<char,int> map;\\n        for(int i=0; i<s.length(); i++)\\n        {\\n                map[s[i]]++;   \\n        }\\n        for(int i=0; i<s.length(); i++)\\n        {  \\n            if(map[s[i]] == 1)\\n                return i;\\n        }\\n        return -1;\\n    \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 979061,
                "title": "c-array-based-solutions-compared-and-explained-100-time-90-space",
                "content": "For this problem I decided to go straight for an array approach to build a frequency table of all the seen characters and then iterate again to find the first with a frequency of only `1`.\\n\\nTo do so, I created 2 support variables:\\n* `len` to store the length of the string;\\n* `alpha`, the aforementioned frequency table, with a size of `127`, making the char code of `\\'z\\'`, the last character in our range.\\n\\nWe will then move first of all to populate `alpha` increasing the cell matching each character by `1` as we go.\\n\\nWe will then loop through the string another time, this time just checking if the frequency is `1`, meaning the character is indeed unique and returning its index in case.\\n\\nIf we exit the loop without a match, we can then safely conclude no uniques were there and return `-1` :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        // support variables\\n        int len = s.size(), alpha[127] = {};\\n\\t\\t// populating alpha\\n        for (char c: s) alpha[c]++;\\n\\t\\t// hunting for unique elements\\n        for (int i = 0; i < len; i++) {\\n            if (alpha[s[i]] == 1) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```\\n\\nVariation using an array of only `26` characters, making it less memory consuming, but also a bit slower due to the extra burden of normalising each character to be in the `0 - 25` range:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        // support variables\\n        int len = s.size(), alpha[26] = {};\\n\\t\\t// populating alpha\\n        for (char c: s) alpha[c - \\'a\\']++;\\n\\t\\t// hunting for unique elements\\n        for (int i = 0; i < len; i++) {\\n            if (alpha[s[i] - \\'a\\'] == 1) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```\\n\\nFurther variation where I iterate building up `alpha` while at the same time updating a `seenTwice` variable - once that hits `26` overall seen characters, it means we cannot get any matches and it does not make any sense to loop further:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        // support variables\\n        int len = s.size(), alpha[127] = {}, seenTwice = 0;\\n\\t\\t// populating alpha as long as it is needed\\n        for (char c: s) {\\n            if (alpha[c] == 1) seenTwice++;\\n            if (seenTwice == 26) return -1;\\n            alpha[c]++;\\n        }\\n\\t\\t// hunting for unique elements\\n        for (int i = 0; i < len; i++) {\\n            if (alpha[s[i]] == 1) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Counting"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        // support variables\\n        int len = s.size(), alpha[127] = {};\\n\\t\\t// populating alpha\\n        for (char c: s) alpha[c]++;\\n\\t\\t// hunting for unique elements\\n        for (int i = 0; i < len; i++) {\\n            if (alpha[s[i]] == 1) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        // support variables\\n        int len = s.size(), alpha[26] = {};\\n\\t\\t// populating alpha\\n        for (char c: s) alpha[c - \\'a\\']++;\\n\\t\\t// hunting for unique elements\\n        for (int i = 0; i < len; i++) {\\n            if (alpha[s[i] - \\'a\\'] == 1) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        // support variables\\n        int len = s.size(), alpha[127] = {}, seenTwice = 0;\\n\\t\\t// populating alpha as long as it is needed\\n        for (char c: s) {\\n            if (alpha[c] == 1) seenTwice++;\\n            if (seenTwice == 26) return -1;\\n            alpha[c]++;\\n        }\\n\\t\\t// hunting for unique elements\\n        for (int i = 0; i < len; i++) {\\n            if (alpha[s[i]] == 1) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 318242,
                "title": "c-charandcount",
                "content": "```\\npublic class Solution {\\n    public int FirstUniqChar(string s) {\\n        var charAndCount = new int[256];\\n\\n        foreach (var c in s) {\\n            charAndCount[c]++;\\n        }\\n\\n        for (int i = 0; i < s.Length; i++) {\\n            if (charAndCount[s[i]] == 1) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int FirstUniqChar(string s) {\\n        var charAndCount = new int[256];\\n\\n        foreach (var c in s) {\\n            charAndCount[c]++;\\n        }\\n\\n        for (int i = 0; i < s.Length; i++) {\\n            if (charAndCount[s[i]] == 1) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 232174,
                "title": "c-linq-count-method",
                "content": "here C# solution, using Count Method\\n```\\npublic class Solution {\\n    public int FirstUniqChar(string s) {\\n        foreach(var itm in s.Distinct()){\\n                if(s.Count(x=>x==itm)==1){\\n                    return s.IndexOf(itm);\\n                }\\n            }\\n        return -1;\\n\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int FirstUniqChar(string s) {\\n        foreach(var itm in s.Distinct()){\\n                if(s.Count(x=>x==itm)==1){\\n                    return s.IndexOf(itm);\\n                }\\n            }\\n        return -1;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 86418,
                "title": "golang-concise-solution",
                "content": "The idea is simple.\\n\\n1. Create a flag array that holds flags for each [a-z] characters and initialize all indexes with `-1`.\\n2. Iterate through `s` and if a character appears, set the index to the flag array. If the character appears again,\\n    we can set invalid index to the flag. I use `len(s)` in the code below.\\n3. Iterate through the flag array and returns the least valid index found. If we cannot find the valid one, return `-1`\\n\\nIn this manner, we can avoid iterating through `s` itself twice. Looping through the flag array is `O(1)` because the length is limited:)\\n\\n```\\nfunc firstUniqChar(s string) int {\\n\\tflags := make([]int, 26)\\n\\tfor i := range flags {\\n\\t\\tflags[i] = -1\\n\\t}\\n\\tslen := len(s)\\n\\n\\tfor i, ch := range s {\\n\\t\\tidx := byte(ch - 'a')\\n\\t\\tif flags[idx] == -1 {\\n\\t\\t\\tflags[idx] = i\\n\\t\\t} else {\\n\\t\\t\\tflags[idx] = slen\\n\\t\\t}\\n\\t}\\n\\n\\tmin := slen\\n\\tfor i := range flags {\\n\\t\\tif flags[i] >= 0 && flags[i] < len(s) && flags[i] < min {\\n\\t\\t\\tmin = flags[i]\\n\\t\\t}\\n\\t}\\n\\n\\tif min == slen {\\n\\t\\treturn -1\\n\\t}\\n\\treturn min\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc firstUniqChar(s string) int {\\n\\tflags := make([]int, 26)\\n\\tfor i := range flags {\\n\\t\\tflags[i] = -1\\n\\t}\\n\\tslen := len(s)\\n\\n\\tfor i, ch := range s {\\n\\t\\tidx := byte(ch - 'a')\\n\\t\\tif flags[idx] == -1 {\\n\\t\\t\\tflags[idx] = i\\n\\t\\t} else {\\n\\t\\t\\tflags[idx] = slen\\n\\t\\t}\\n\\t}\\n\\n\\tmin := slen\\n\\tfor i := range flags {\\n\\t\\tif flags[i] >= 0 && flags[i] < len(s) && flags[i] < min {\\n\\t\\t\\tmin = flags[i]\\n\\t\\t}\\n\\t}\\n\\n\\tif min == slen {\\n\\t\\treturn -1\\n\\t}\\n\\treturn min\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2568152,
                "title": "short-c-java-python-explained-solution-beginner-friendly-by-mr-coder",
                "content": "**Please UPVOTE if you LIKE!!**\\n**Watch this video \\uD83E\\uDC83 for the better explanation of the code.**\\n\\nhttps://www.youtube.com/watch?v=HVmq6apu3Zk\\n\\n\\n**Also you can SUBSCRIBE  \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.**\\n\\n\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        \\n        unordered_map<char,int> ump(26);\\n        for(int i=0; i<s.size(); i++){\\n            ump[s[i]]++;\\n        }\\n           \\n        \\n         for(int i=0; i<s.size(); i++){\\n           if(ump[s[i]]==1) return i;\\n        }\\n         \\n        \\n        return -1;\\n    }\\n};\\n```\\n\\n**PYTHON**(copied)\\n\\n```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        \\n        # Store drequency of all the characters of string in the array\\n        freq = Counter(s)\\n        \\n        # now check frequency of each character in the string from left-to-right\\n        # and whose frequency found to be 1 return the index\\n        for e in s :\\n            if freq[e] == 1 :\\n                return s.index(e)\\n            \\n        return -1\\n```\\n**JAVA**(copied)\\n\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        \\n        char[] arr = s.toCharArray();\\n        int len = arr.length;\\n        \\n    \\n        int[] fre = new int[26];\\n        for(char c : arr) fre[c-\\'a\\']++;\\n        \\n     \\n        for(int i=0; i<len; i++) if(fre[arr[i]-\\'a\\'] == 1) return i;\\n        return -1;\\n    }\\n}\\n```\\n**Please UPVOTE if you LIKE!!**",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        \\n        unordered_map<char,int> ump(26);\\n        for(int i=0; i<s.size(); i++){\\n            ump[s[i]]++;\\n        }\\n           \\n        \\n         for(int i=0; i<s.size(); i++){\\n           if(ump[s[i]]==1) return i;\\n        }\\n         \\n        \\n        return -1;\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        \\n        # Store drequency of all the characters of string in the array\\n        freq = Counter(s)\\n        \\n        # now check frequency of each character in the string from left-to-right\\n        # and whose frequency found to be 1 return the index\\n        for e in s :\\n            if freq[e] == 1 :\\n                return s.index(e)\\n            \\n        return -1\\n```\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        \\n        char[] arr = s.toCharArray();\\n        int len = arr.length;\\n        \\n    \\n        int[] fre = new int[26];\\n        for(char c : arr) fre[c-\\'a\\']++;\\n        \\n     \\n        for(int i=0; i<len; i++) if(fre[arr[i]-\\'a\\'] == 1) return i;\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1003847,
                "title": "intuitive-javascript-solution",
                "content": "Runtime: 108 ms, faster than 81.91% of JavaScript online submissions for First Unique Character in a String.\\nMemory Usage: 42.5 MB, less than 50.33% of JavaScript online submissions for First Unique Character in a String.\\n```\\n\\nvar firstUniqChar = function(s) {\\n    for(let i = 0; i < s.length; i++) {\\n\\t\\t// Here we check to see if the index of the character can be found anywhere else\\n\\t\\t// If it is indeed unique, it would only be found at the same index i\\n        if(s.lastIndexOf(s[i]) === i && s.indexOf(s[i]) === i) {\\n            return i;\\n        }\\n    } \\n    return -1;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n\\nvar firstUniqChar = function(s) {\\n    for(let i = 0; i < s.length; i++) {\\n\\t\\t// Here we check to see if the index of the character can be found anywhere else\\n\\t\\t// If it is indeed unique, it would only be found at the same index i\\n        if(s.lastIndexOf(s[i]) === i && s.indexOf(s[i]) === i) {\\n            return i;\\n        }\\n    } \\n    return -1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 337965,
                "title": "go-o-n-hashmap-with-explanation",
                "content": "```go\\nfunc firstUniqChar(s string) int {\\n\\td := map[byte]int{}\\n\\n\\t// Count each character.\\n\\tfor i := 0; i < len(s); i++ {\\n\\t\\td[s[i]]++\\n\\t}\\n\\n\\t// Find the first unique character and return.\\n\\tfor i := 0; i < len(s); i++ {\\n\\t\\tif d[s[i]] == 1 {\\n\\t\\t\\treturn i\\n\\t\\t}\\n\\t}\\n\\n\\t// If there\\'s no unique character then return -1.\\n\\treturn -1\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc firstUniqChar(s string) int {\\n\\td := map[byte]int{}\\n\\n\\t// Count each character.\\n\\tfor i := 0; i < len(s); i++ {\\n\\t\\td[s[i]]++\\n\\t}\\n\\n\\t// Find the first unique character and return.\\n\\tfor i := 0; i < len(s); i++ {\\n\\t\\tif d[s[i]] == 1 {\\n\\t\\t\\treturn i\\n\\t\\t}\\n\\t}\\n\\n\\t// If there\\'s no unique character then return -1.\\n\\treturn -1\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3779340,
                "title": "2-methods-easy-clean-code",
                "content": "# Idea:\\nAs we need to return first unique character in the string.\\nSo we need to store character and its frequency.\\n\\n# Complexity\\n- Time complexity: O(s.size())\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(s.size()) -> in queue\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Method #1\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n    // can also use unordered_map (it will work same)\\n       queue<int> q;\\n       int arr[26]={0};\\n       for(int i=0;i<s.length();i++){\\n           char ch=s[i];\\n           q.push(i);\\n           arr[ch-\\'a\\']++;\\n           while(!q.empty()){\\n               if(arr[s[q.front()]-\\'a\\']>1)\\n                    q.pop();\\n                else break;\\n           }\\n       }\\n        if(q.empty())\\n            return -1;\\n        return q.front(); \\n    }\\n};\\n```\\n# Method #2\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> m;\\n\\n        for(int i=0;i<s.length();i++)\\n        // storing how many times a character appears in order\\n        // leetcode -> l e t c o d\\n        //             1 3 1 1 1 1\\n        // first time unique character apeared is -> l in string\\n          m[s[i]]++;\\n\\n        // m[s[0]] -> s[0] = l and m[s[0]] =1\\n        // m[s[1]] -> s[1] = e and m[s[1]] =3\\n        // m[s[2]] -> s[2] = t and m[s[2]] =1\\n        // and so on\\n        for(int i=0;i<s.length();i++)\\n          {\\n              if(m[s[i]]==1)     \\n                return i;\\n          }\\n          return -1;   \\n    }\\n};\\n",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String",
                    "Queue",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n    // can also use unordered_map (it will work same)\\n       queue<int> q;\\n       int arr[26]={0};\\n       for(int i=0;i<s.length();i++){\\n           char ch=s[i];\\n           q.push(i);\\n           arr[ch-\\'a\\']++;\\n           while(!q.empty()){\\n               if(arr[s[q.front()]-\\'a\\']>1)\\n                    q.pop();\\n                else break;\\n           }\\n       }\\n        if(q.empty())\\n            return -1;\\n        return q.front(); \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3350213,
                "title": "easy-to-understand-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n   \\n          unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n         mp[s[i]]++;   \\n        }\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])->second==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n   \\n          unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n         mp[s[i]]++;   \\n        }\\n        for(int i=0;i<s.size();i++){\\n            if(mp.find(s[i])->second==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1614114,
                "title": "easy-python-solution",
                "content": "```\\ndef firstUniqChar(self, s: str) -> int:\\n        c=Counter(s)\\n        for i,j in enumerate(s):\\n            if c[j]<=1:\\n                return i\\n        return -1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef firstUniqChar(self, s: str) -> int:\\n        c=Counter(s)\\n        for i,j in enumerate(s):\\n            if c[j]<=1:\\n                return i\\n        return -1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 816684,
                "title": "c-simple-code",
                "content": "```\\nint firstUniqChar(char * s){\\n    int alph[26]={0};\\n    \\n    if (s==NULL)\\n        return -1;\\n    \\n    for (int i=0;s[i]!=\\'\\\\0\\';i++)\\n    {\\n        alph[s[i] - \\'a\\'] = alph[s[i] - \\'a\\']+1;\\n    }\\n    \\n    for(int i=0;s[i]!=\\'\\\\0\\';i++)\\n    {\\n        if (1 == alph[s[i] - \\'a\\'])\\n            return i;\\n    }\\n    \\n    return -1;\\n}\\n\\n```",
                "solutionTags": [
                    "C",
                    "Hash Table"
                ],
                "code": "```\\nint firstUniqChar(char * s){\\n    int alph[26]={0};\\n    \\n    if (s==NULL)\\n        return -1;\\n    \\n    for (int i=0;s[i]!=\\'\\\\0\\';i++)\\n    {\\n        alph[s[i] - \\'a\\'] = alph[s[i] - \\'a\\']+1;\\n    }\\n    \\n    for(int i=0;s[i]!=\\'\\\\0\\';i++)\\n    {\\n        if (1 == alph[s[i] - \\'a\\'])\\n            return i;\\n    }\\n    \\n    return -1;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 615504,
                "title": "python-simple-solution-60-ms-faster-than-96-16",
                "content": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        visited = set()\\n        for i in range(len(s)):\\n            if s[i] not in visited:\\n                visited.add(s[i])\\n                if s.count(s[i]) == 1:\\n                    return i\\n        return -1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        visited = set()\\n        for i in range(len(s)):\\n            if s[i] not in visited:\\n                visited.add(s[i])\\n                if s.count(s[i]) == 1:\\n                    return i\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 522332,
                "title": "python-single-pass-using-queue",
                "content": "```\\nfrom collections import deque\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        d = {}\\n        q = deque()\\n        for i, x in enumerate(s):\\n            d[x] = d.get(x, 0) + 1\\n            if d[x] == 1:\\n                q.append((x, i))\\n            while q and d[q[0][0]] > 1:\\n                q.popleft()\\n        return -1 if not q else q[0][1]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nfrom collections import deque\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        d = {}\\n        q = deque()\\n        for i, x in enumerate(s):\\n            d[x] = d.get(x, 0) + 1\\n            if d[x] == 1:\\n                q.append((x, i))\\n            while q and d[q[0][0]] > 1:\\n                q.popleft()\\n        return -1 if not q else q[0][1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 86367,
                "title": "simple-solution-single-pass",
                "content": "```\\npublic int firstUniqChar(String s) {\\n\\tif(s==null || s.length()==0) {\\n\\t\\treturn -1;\\n\\t}\\n\\tchar[] chars = s.toCharArray();\\n\\tMap<Character,Integer> charsPositions = new HashMap<>();\\n\\tList<Integer> uniqsPositions = new ArrayList<>();\\n\\tfor(int i=0; i<chars.length; i++) {\\n\\t\\tchar c = chars[i];\\n\\t\\tif(charsPositions.containsKey(c)) {\\n\\t\\t\\tInteger charFirstPosition = charsPositions.get(c);\\n\\t\\t\\tuniqsPositions.remove(charFirstPosition);\\n\\t\\t} else {\\n\\t\\t\\tcharsPositions.put(c,i);\\n\\t\\t\\tuniqsPositions.add(i);\\n\\t\\t}\\n\\t}\\n\\treturn uniqsPositions.isEmpty()?-1:uniqsPositions.get(0);\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int firstUniqChar(String s) {\\n\\tif(s==null || s.length()==0) {\\n\\t\\treturn -1;\\n\\t}\\n\\tchar[] chars = s.toCharArray();\\n\\tMap<Character,Integer> charsPositions = new HashMap<>();\\n\\tList<Integer> uniqsPositions = new ArrayList<>();\\n\\tfor(int i=0; i<chars.length; i++) {\\n\\t\\tchar c = chars[i];\\n\\t\\tif(charsPositions.containsKey(c)) {\\n\\t\\t\\tInteger charFirstPosition = charsPositions.get(c);\\n\\t\\t\\tuniqsPositions.remove(charFirstPosition);\\n\\t\\t} else {\\n\\t\\t\\tcharsPositions.put(c,i);\\n\\t\\t\\tuniqsPositions.add(i);\\n\\t\\t}\\n\\t}\\n\\treturn uniqsPositions.isEmpty()?-1:uniqsPositions.get(0);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 86608,
                "title": "java-using-twice-scans",
                "content": "the first scan we statistics the number of each letter in string.\\nthe second scan we find the first letter which number equals 1.\\n```\\npublic class Solution {\\n    public int firstUniqChar(String s) {\\n        if (s == null || s.isEmpty()) {\\n            return -1;\\n        }\\n        int[] letters = new int[26];\\n        for (int i = 0; i < s.length(); i++) {\\n            letters[s.charAt(i) - 'a']++;\\n        }\\n        for (int i = 0; i < s.length(); i++) {\\n            if (letters[s.charAt(i) - 'a'] == 1) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int firstUniqChar(String s) {\\n        if (s == null || s.isEmpty()) {\\n            return -1;\\n        }\\n        int[] letters = new int[26];\\n        for (int i = 0; i < s.length(); i++) {\\n            letters[s.charAt(i) - 'a']++;\\n        }\\n        for (int i = 0; i < s.length(); i++) {\\n            if (letters[s.charAt(i) - 'a'] == 1) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 86450,
                "title": "python-very-easy-solution",
                "content": "```\\nclass Solution(object):\\n    def firstUniqChar(self, str1):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        for x in str1:\\n            if str1.find(x)==str1.rfind(x):\\n                return str1.find(x)\\n        return -1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def firstUniqChar(self, str1):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        for x in str1:\\n            if str1.find(x)==str1.rfind(x):\\n                return str1.find(x)\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3254711,
                "title": "387-space-93-87-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. We define a class Solution with a method firstUniqChar that takes a string s as input and returns an integer.\\n2. We create an empty dictionary freq to store the frequency of each character in the string.\\n3. We iterate through the string s using a for loop and update the frequency of each character in the dictionary.\\n   - For each character c in the string s, we check if it is already present in the freq dictionary using the .get() method. If it is not present, we set its value to 0 and then add 1 to it. If it is already present, we add 1 to its existing value.\\n4. We iterate through the string s again using another for loop and return the index of the first character with a frequency of 1.\\n   - For each character in the string s, we check if its frequency in the freq dictionary is 1. If it is 1, we return the index of that character in the string.\\n5. If we do not find any character with a frequency of 1, we return -1.\\n\\n# Complexity\\n- Time complexity:\\n60.4%\\n\\n- Space complexity:\\n93.87%\\n\\n# Code\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        freq = {}\\n        for c in s:\\n            freq[c] = freq.get(c, 0) + 1\\n        for i in range(len(s)):\\n            if freq[s[i]] == 1:\\n                return i\\n        return -1\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "String",
                    "Queue"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        freq = {}\\n        for c in s:\\n            freq[c] = freq.get(c, 0) + 1\\n        for i in range(len(s)):\\n            if freq[s[i]] == 1:\\n                return i\\n        return -1\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2433188,
                "title": "python-beats-99-3-solutions-o-n",
                "content": "![image](https://assets.leetcode.com/users/images/8af0e1ca-dc69-4c8b-83b1-2f27e5509ed7_1660639573.8068275.png)\\n\\n<hr />\\n\\nThe 3rd solution beats 99%\\n<hr />\\n\\n1. We run over `s` to count how many times each character appears.\\n\\n2. We run over `s` again, and whenever we meet a character that appears only once, we return the index. Since we run in order, we will meet the first non-repeating character\\n\\n\\nWe can count letters with hashmap, like `{a: 3}` or array of length 26 to represent the a-z letters.\\n\\n# Counter / hashmap\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        c = Counter(s)\\n        for i, v in enumerate(s):\\n            if c[v] == 1:\\n                return i\\n        return -1\\n```\\n\\n# Array representing english letters\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        A = [0] * 26\\n        for v in s: A[ord(v) - ord(\\'a\\')] += 1\\n        \\n        for i, v in enumerate(s):\\n            if A[ord(v) - ord(\\'a\\')] == 1:\\n                return i\\n        return -1\\n```\\n\\n\\n# 3rd solution\\nIterate a-z and find the index character where the first and last occurrence match\\n\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        best = float(\\'inf\\')\\n        for i in range(26):\\n            c = chr(i + ord(\\'a\\'))\\n            l = s.find(c)\\n            r = s.rfind(c)\\n            if l != -1 and l == r:\\n                best = min(best, l)\\n        return best if best != float(\\'inf\\') else -1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        c = Counter(s)\\n        for i, v in enumerate(s):\\n            if c[v] == 1:\\n                return i\\n        return -1\\n```\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        A = [0] * 26\\n        for v in s: A[ord(v) - ord(\\'a\\')] += 1\\n        \\n        for i, v in enumerate(s):\\n            if A[ord(v) - ord(\\'a\\')] == 1:\\n                return i\\n        return -1\\n```\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        best = float(\\'inf\\')\\n        for i in range(26):\\n            c = chr(i + ord(\\'a\\'))\\n            l = s.find(c)\\n            r = s.rfind(c)\\n            if l != -1 and l == r:\\n                best = min(best, l)\\n        return best if best != float(\\'inf\\') else -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1854653,
                "title": "java-if-u-want-to-practice-hashmap",
                "content": "class Solution {\\n    public int firstUniqChar(String s) {\\n        HashMap <Character, Integer> ans = new HashMap <>();\\n        \\n        //go through the whole string, record the frequency of each letter\\n        for (int i = 0; i < s.length(); i ++){\\n            char c = s.charAt(i);\\n            if(ans.containsKey(c)){\\n                ans.put(c,ans.get(c) + 1);\\n            }\\n            else{\\n                ans.put(c, 1);\\n            }\\n        }\\n        \\n        //return the first letter that has frequency of 1\\n        for (int i = 0; i < s.length(); i ++){\\n            char c = s.charAt(i);\\n            if (ans.get(c) == 1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n           \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int firstUniqChar(String s) {\\n        HashMap <Character, Integer> ans = new HashMap <>();\\n        \\n        //go through the whole string, record the frequency of each letter\\n        for (int i = 0; i < s.length(); i ++){\\n            char c = s.charAt(i);\\n            if(ans.containsKey(c)){\\n                ans.put(c,ans.get(c) + 1);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1756246,
                "title": "java-easiest-solution-without-using-extra-space",
                "content": "```\\n public int firstUniqChar(String s) {\\n        for(int i = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if(s.indexOf(c) == s.lastIndexOf(c)) {\\n                return i;\\n            }\\n        }\\n        \\n        return -1;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\n public int firstUniqChar(String s) {\\n        for(int i = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if(s.indexOf(c) == s.lastIndexOf(c)) {\\n                return i;\\n            }\\n        }\\n        \\n        return -1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1680330,
                "title": "easy-python-solution-o-n",
                "content": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in range(len(s)):\\n            if s[i] not in s[i+1:] and s[i] not in s[:i]:\\n                return i\\n                break\\n        return -1\\n                \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in range(len(s)):\\n            if s[i] not in s[i+1:] and s[i] not in s[:i]:\\n                return i\\n                break\\n        return -1\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1656978,
                "title": "easy-to-understand-in-c-hashmap",
                "content": "class Solution {\\npublic:\\n\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> mp;\\n        for(int i=0;i<s.length();i++){\\n            mp[s[i]]++;\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(mp[s[i]]==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> mp;\\n        for(int i=0;i<s.length();i++){\\n            mp[s[i]]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1649048,
                "title": "kotlin-1-line",
                "content": "```\\nfun firstUniqChar(s: String) = s.indexOfFirst { s.indexOf(it) == s.lastIndexOf(it) }\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nfun firstUniqChar(s: String) = s.indexOfFirst { s.indexOf(it) == s.lastIndexOf(it) }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1567727,
                "title": "java-queue-solution",
                "content": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        Queue<Character> ch = new LinkedList<Character>();\\n        int len = s.length();\\n        char temper = 0;\\n        for(int j = 0; j < s.length(); j++)\\n        {\\n            ch.offer(s.charAt(j));\\n        }\\n        while(len > 0)\\n        {\\n            temper = ch.poll();\\n            if(!ch.contains(temper))\\n            {\\n                return s.indexOf(temper);\\n            }\\n            else\\n            {\\n                ch.offer(temper);\\n            }\\n            len--;\\n        }\\n        return -1;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Queue"
                ],
                "code": "class Solution {\\n    public int firstUniqChar(String s) {\\n        Queue<Character> ch = new LinkedList<Character>();\\n        int len = s.length();\\n        char temper = 0;\\n        for(int j = 0; j < s.length(); j++)\\n        {\\n            ch.offer(s.charAt(j));\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1556740,
                "title": "most-efficient-solution-in-c-with-time-complexity-o-n-space-o-1-faster-than-98",
                "content": "Here I have used a 2D array with **2 rows and 26 Columns** so that there occurrence can be stored in **row 1** with all corresponding **characters repetitions** and **row 2** with there last **occurrence index**. Finally I iterate through the 2D array and find the **first unique char with only one occurrences**.\\n\\n**Time Complexity -> O(n)**\\n**Space Complexity-> O(1)**(because linear array)\\n\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int arr[2][27] = {0}; \\n        int num=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            num=s[i]-\\'a\\';\\n            arr[0][num]+=1;\\n            arr[1][num]=i;\\n        }\\n        int small=99999;         // Storing maximum value that can possibly occur.\\n        for(int i=0;i<26;i++)\\n        {\\n            if(arr[0][i]==1)\\n            {\\n                if(arr[1][i]<small && arr[1][i]>=0)\\n                {\\n                    small=arr[1][i];\\n                }\\n            }\\n        }\\n        if(small==99999)\\n            return -1;\\n        return small;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int arr[2][27] = {0}",
                "codeTag": "Java"
            },
            {
                "id": 1003259,
                "title": "javascript-solution-simple-and-clear",
                "content": "```\\nconst firstUniqChar = (s) => {\\n  for (let i = 0; i < s.length; ++i) if (s.indexOf(s[i]) === s.lastIndexOf(s[i])) return i;\\n  return -1;\\n};\\n```\\n<a href=\"https://gist.github.com/ahmet-cetinkaya/479fe978f9130bd09be32e6e8f063822\"><img src=\"https://img.shields.io/badge/gist-100000?style=for-the-badge&logo=github&logoColor=white\" /></a>\\n\\nResult\\nRuntime: 96 ms, faster than 94.94% of JavaScript online submissions for First Unique Character in a String.\\nMemory Usage: 42.6 MB, less than 42.64% of JavaScript online submissions for First Unique Character in a String.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst firstUniqChar = (s) => {\\n  for (let i = 0; i < s.length; ++i) if (s.indexOf(s[i]) === s.lastIndexOf(s[i])) return i;\\n  return -1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 521555,
                "title": "c-faster-than-96-38-less-than-10-00-mem-o-n",
                "content": "Runtime: 80 ms\\nMemory Usage: 31.9 MB\\n\\n```\\n  public int FirstUniqChar(string s) {\\n        int[] counts = new int[\\'z\\'-\\'a\\'+1];\\n        \\n        for(int i=0; i< s.Length; i++)\\n        {\\n            counts[s[i]-\\'a\\']++;\\n        }\\n        \\n        for(int i=0; i< s.Length; i++)\\n        {\\n            if (counts[s[i]-\\'a\\'] == 1) { return i; }\\n        }\\n        \\n        return -1;\\n    }",
                "solutionTags": [],
                "code": "Runtime: 80 ms\\nMemory Usage: 31.9 MB\\n\\n```\\n  public int FirstUniqChar(string s) {\\n        int[] counts = new int[\\'z\\'-\\'a\\'+1];\\n        \\n        for(int i=0; i< s.Length; i++)\\n        {\\n            counts[s[i]-\\'a\\']++;\\n        }\\n        \\n        for(int i=0; i< s.Length; i++)\\n        {\\n            if (counts[s[i]-\\'a\\'] == 1) { return i; }\\n        }\\n        \\n        return -1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 223065,
                "title": "cpp-solution-that-beats-97-96",
                "content": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        vector<int> record(26, 0);\\n        for(char c: s) {\\n            int tmp = c - \\'a\\';\\n            record[tmp]++;\\n        }\\n        for(int i = 0; i < s.size(); i ++) {\\n            int tmp = s[i] - \\'a\\';\\n            if(record[tmp] == 1) return i;\\n        }\\n        return - 1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        vector<int> record(26, 0);\\n        for(char c: s) {\\n            int tmp = c - \\'a\\';\\n            record[tmp]++;\\n        }\\n        for(int i = 0; i < s.size(); i ++) {\\n            int tmp = s[i] - \\'a\\';\\n            if(record[tmp] == 1) return i;\\n        }\\n        return - 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4030212,
                "title": "java-easy-to-understand-queue-0-n-2-solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:0(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int temp[] = new int[26];\\n        for(int i=0; i<s.length(); i++){\\n           temp[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i=0; i<s.length(); i++){\\n           if(temp[s.charAt(i)-\\'a\\']==1) return i;\\n        }\\n        return -1;\\n\\n//       using Queue\\n\\n        // int temp[] = new int [26];\\n        // Queue<Character> val = new LinkedList<>();\\n        // for(int i=0; i<s.length(); i++){\\n        //     char ch = s.charAt(i);\\n        //     val.add(ch);\\n        //     temp[ch-\\'a\\']++;\\n        //     while(!val.isEmpty() && temp[val.peek()-\\'a\\'] >1){\\n        //         val.remove();\\n        //     }\\n        // }\\n        // return val.isEmpty()?-1 : s.indexOf(val.peek());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Queue"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int temp[] = new int[26];\\n        for(int i=0; i<s.length(); i++){\\n           temp[s.charAt(i)-\\'a\\']++;\\n        }\\n        for(int i=0; i<s.length(); i++){\\n           if(temp[s.charAt(i)-\\'a\\']==1) return i;\\n        }\\n        return -1;\\n\\n//       using Queue\\n\\n        // int temp[] = new int [26];\\n        // Queue<Character> val = new LinkedList<>();\\n        // for(int i=0; i<s.length(); i++){\\n        //     char ch = s.charAt(i);\\n        //     val.add(ch);\\n        //     temp[ch-\\'a\\']++;\\n        //     while(!val.isEmpty() && temp[val.peek()-\\'a\\'] >1){\\n        //         val.remove();\\n        //     }\\n        // }\\n        // return val.isEmpty()?-1 : s.indexOf(val.peek());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2822789,
                "title": "c-unordered-map-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\'\\'\\'\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint firstUniqChar(string s) {\\n\\t\\t\\tunordered_map<char, int>m;\\n\\t\\t\\tfor(int i=0; i<s.size(); i++){\\n\\t\\t\\t\\tm[s[i]]++;\\n\\t\\t\\t}\\n\\t\\t\\tfor(int i=0; i<s.size(); i++){\\n\\t\\t\\t\\tif(m[s[i]]==1){return i;}\\n\\t\\t\\t}\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t};\\n\\'\\'\\'",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint firstUniqChar(string s) {\\n\\t\\t\\tunordered_map<char, int>m;\\n\\t\\t\\tfor(int i=0; i<s.size(); i++){\\n\\t\\t\\t\\tm[s[i]]++;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2433844,
                "title": "my-one-pass-solution-o-n-time-o-1-space",
                "content": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int[] count = new int[26];\\n        \\n        int n = s.length(),j = 0;\\n        for(int i=0;i<n;i++){\\n            count[s.charAt(i)-\\'a\\']++;\\n            while(j<=i && count[s.charAt(j)-\\'a\\']>1){\\n                j++;\\n            }\\n        }\\n        return j==n ? -1:j;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int[] count = new int[26];\\n        \\n        int n = s.length(),j = 0;\\n        for(int i=0;i<n;i++){\\n            count[s.charAt(i)-\\'a\\']++;\\n            while(j<=i && count[s.charAt(j)-\\'a\\']>1){\\n                j++;\\n            }\\n        }\\n        return j==n ? -1:j;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2432345,
                "title": "c-constant-spaces-o-1-o-n-time-complexity",
                "content": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.size();\\n         vector<int> m(26,0);\\n        for(char a : s){\\n            m[a-\\'a\\']++;\\n        }\\n        int ans=-1;\\n        for(int i=0;i<n;++i){\\n            if(m[s[i]-\\'a\\']==1){\\n                ans=i;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.size();\\n         vector<int> m(26,0);\\n        for(char a : s){\\n            m[a-\\'a\\']++;\\n        }\\n        int ans=-1;\\n        for(int i=0;i<n;++i){\\n            if(m[s[i]-\\'a\\']==1){\\n                ans=i;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2432281,
                "title": "java-c-map",
                "content": "\\n\\nAlso added a shorter (and slower) solution using the stream API.\\n\\n#### Java\\n```\\npublic int firstUniqChar(String s) {\\n        Map<Character, Integer> characterMap = new HashMap<>();\\n        for (char c : s.toCharArray()) {\\n            characterMap.put(c, characterMap.getOrDefault(c, 0) + 1);\\n        }\\n        for (int i = 0; i < s.length(); i++) {\\n            if (characterMap.get(s.charAt(i)) == 1)\\n                return i;\\n        }\\n        return -1;\\n    }\\n```\\n\\n#### Java Stream\\n\\n```\\n public int firstUniqChar(String s) {\\n        Map<Character, Integer> characterMap = new LinkedHashMap<>();\\n        s.chars().mapToObj(c -> (char) c).forEach(c -> characterMap.put(c, characterMap.getOrDefault(c, 0) + 1));\\n        return characterMap.entrySet().stream().filter(entry -> entry.getValue() == 1)\\n                .map(entry -> s.indexOf(entry.getKey())).findFirst().orElse(-1);\\n    }\\n```\\n\\n#### C++\\n```\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char, int> characterMap;\\n        \\n        for (char& c : s) {\\n            characterMap[c]++;\\n        }\\n        for (int i = 0; i < s.length(); i++) {\\n            if (characterMap[s[i]] == 1) \\n                return i;\\n        }\\n        return -1;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\npublic int firstUniqChar(String s) {\\n        Map<Character, Integer> characterMap = new HashMap<>();\\n        for (char c : s.toCharArray()) {\\n            characterMap.put(c, characterMap.getOrDefault(c, 0) + 1);\\n        }\\n        for (int i = 0; i < s.length(); i++) {\\n            if (characterMap.get(s.charAt(i)) == 1)\\n                return i;\\n        }\\n        return -1;\\n    }\\n```\n```\\n public int firstUniqChar(String s) {\\n        Map<Character, Integer> characterMap = new LinkedHashMap<>();\\n        s.chars().mapToObj(c -> (char) c).forEach(c -> characterMap.put(c, characterMap.getOrDefault(c, 0) + 1));\\n        return characterMap.entrySet().stream().filter(entry -> entry.getValue() == 1)\\n                .map(entry -> s.indexOf(entry.getKey())).findFirst().orElse(-1);\\n    }\\n```\n```\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char, int> characterMap;\\n        \\n        for (char& c : s) {\\n            characterMap[c]++;\\n        }\\n        for (int i = 0; i < s.length(); i++) {\\n            if (characterMap[s[i]] == 1) \\n                return i;\\n        }\\n        return -1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2325930,
                "title": "c-all-approaches-map-queue-vector-tc-sc",
                "content": "UPVOTE IF YOU LIKE \\uD83D\\uDE01\\nAPPROACHES : \\n1. HashMaps\\n2. Vector\\n3. Queue\\n4. Sorting\\n```\\nclass Solution {\\npublic:\\n    /*\\n    TC : O(N)\\n    SC : O(N)\\n    */\\n    int firstUniqChar(string s) {\\n        unordered_map<int,int>m;\\n        for(int i=0;i<s.length();i++){\\n            m[s[i]]++;\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(m[s[i]]==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n/*\\nUsing Vector : \\nTC : O(N)\\nSC : O(26)\\n\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int a[26] = {0};\\n        for(char &x:s)\\n            a[x-\\'a\\']++;\\n        for(int i = 0; i < s.size(); i++)\\n            if(a[s[i]-\\'a\\'] == 1)return i;\\n        return -1;\\n    }\\n};\\n\\n--------------------------------------------------------------\\nwe donot require to use queue in it , we can get better \\ncomplexities using map.\\n\\nUsing Queue : \\nTC : O(N)\\nSC : O(N)+O(N) , - O(N) but obv more as we are using pairs in queue (in terms of computation)\\n\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> m;\\n       queue<pair<char,int>> q;\\n        for(int i=0;i<s.length();i++){\\n            m[s[i]]++;\\n            q.push({s[i],i});\\n        }\\n        while(!q.empty()){\\n            if(m[q.front().first]==1) return q.front().second;\\n            else{\\n                q.pop();\\n            }\\n        }\\n        return -1;\\n       \\n    }\\n    \\n};\\n\\n--------------------------------------------------------\\nSORTING : \\nTC : O(n log n)\\nSC : O(1)\\nWe can sort the string according to the alphabetical order , then iterate using for loop and find for the first unique occourance : \\nExample  : s=\"leetcode\"\\nsorted :  s=\"cdeeelot\"\\n\\nIterate using for loop : find for unique first occurance and return it  , else return -1\\n*/\\n```",
                "solutionTags": [
                    "C",
                    "Queue"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    /*\\n    TC : O(N)\\n    SC : O(N)\\n    */\\n    int firstUniqChar(string s) {\\n        unordered_map<int,int>m;\\n        for(int i=0;i<s.length();i++){\\n            m[s[i]]++;\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(m[s[i]]==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n/*\\nUsing Vector : \\nTC : O(N)\\nSC : O(26)\\n\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int a[26] = {0};\\n        for(char &x:s)\\n            a[x-\\'a\\']++;\\n        for(int i = 0; i < s.size(); i++)\\n            if(a[s[i]-\\'a\\'] == 1)return i;\\n        return -1;\\n    }\\n};\\n\\n--------------------------------------------------------------\\nwe donot require to use queue in it , we can get better \\ncomplexities using map.\\n\\nUsing Queue : \\nTC : O(N)\\nSC : O(N)+O(N) , - O(N) but obv more as we are using pairs in queue (in terms of computation)\\n\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> m;\\n       queue<pair<char,int>> q;\\n        for(int i=0;i<s.length();i++){\\n            m[s[i]]++;\\n            q.push({s[i],i});\\n        }\\n        while(!q.empty()){\\n            if(m[q.front().first]==1) return q.front().second;\\n            else{\\n                q.pop();\\n            }\\n        }\\n        return -1;\\n       \\n    }\\n    \\n};\\n\\n--------------------------------------------------------\\nSORTING : \\nTC : O(n log n)\\nSC : O(1)\\nWe can sort the string according to the alphabetical order , then iterate using for loop and find for the first unique occourance : \\nExample  : s=\"leetcode\"\\nsorted :  s=\"cdeeelot\"\\n\\nIterate using for loop : find for unique first occurance and return it  , else return -1\\n*/\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1871617,
                "title": "two-different-easy-to-understand-solutions",
                "content": "Approach 1: Using array - We can declare an array of type integer and then store the count of every occurence of character minus ASCII value of character \\'a\\'. \\nWe run another loop to check if the character at \\'i-th\\' place has a frequency of 1, we return its index. In all other cases we can return -1.\\n\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        \\n        int[] count= new int[26];\\n        \\n        for(char c: s.toCharArray()){\\n            count[c-\\'a\\']+=1;\\n        }\\n        \\n        for(int i=0;i<s.length();i++){\\n            \\n            char c=s.charAt(i);\\n            \\n            if(count[c-\\'a\\']==1) return i;\\n        }\\n        return -1;\\n    }\\n}\\n\\n```\\n\\nApproach 2: Using HashMap - We can declare a frequency map of Character and Integer type and store the frequency against every character value. We can run another loop to find the index of character that has a count of 1.\\n\\n```\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        \\n        for(char c: s.toCharArray()){\\n            map.put(c, map.getOrDefault(c,0)+1);\\n        }\\n        \\n        for(int i=0;i<s.length();i++){\\n            \\n            char c=s.charAt(i);\\n            if(map.get(c)==1) return i;\\n            \\n            \\n        }\\n        \\n        return -1;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        \\n        int[] count= new int[26];\\n        \\n        for(char c: s.toCharArray()){\\n            count[c-\\'a\\']+=1;\\n        }\\n        \\n        for(int i=0;i<s.length();i++){\\n            \\n            char c=s.charAt(i);\\n            \\n            if(count[c-\\'a\\']==1) return i;\\n        }\\n        return -1;\\n    }\\n}\\n\\n```\n```\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        \\n        for(char c: s.toCharArray()){\\n            map.put(c, map.getOrDefault(c,0)+1);\\n        }\\n        \\n        for(int i=0;i<s.length();i++){\\n            \\n            char c=s.charAt(i);\\n            if(map.get(c)==1) return i;\\n            \\n            \\n        }\\n        \\n        return -1;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1715812,
                "title": "c-short-and-easy-to-understand-solution-using-hashmap",
                "content": "**Please Upvote if you find this solution helpful**\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map <char,int> mp;\\n        for(int i=0; i<s.size(); i++) {\\n            mp[s[i]]++;\\n        }\\n        for(int i=0; i<s.size(); i++) {\\n            if(mp[s[i]] == 1) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map <char,int> mp;\\n        for(int i=0; i<s.size(); i++) {\\n            mp[s[i]]++;\\n        }\\n        for(int i=0; i<s.size(); i++) {\\n            if(mp[s[i]] == 1) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1659819,
                "title": "2-approaches-simple-easy-c",
                "content": "Implementation\\n\\n**Using Queue & Unordered Map\\nTime Complexity = O(N), Space Complexity = O(N)**\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char, int> mp;\\n        queue<char> q;\\n        \\n        for(int itr = 0; itr < s.size(); itr++){\\n            if(!mp[s[itr]]){\\n                mp[s[itr]] = itr+1;\\n                q.push(s[itr]);\\n            }\\n            else mp[s[itr]] = -1;\\n        }        \\n        \\n        while(!q.empty()){\\n            if(mp[q.front()] != -1) return mp[q.front()]-1;\\n            q.pop();\\n        }\\n        return -1;\\n    }\\n};\\n```\\n\\n\\n**Using Unordered Map\\nTime Complexity = O(N), Space Complexity = O(N)**\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char, int> mp;        \\n        \\n        // counting the frequency of a character present into string\\n        for(int itr = 0; itr < s.size(); itr++) mp[s[itr]]++;\\n                \\n        for(int itr = 0; itr < s.size(); itr++){\\n            // at the time when we are getting char frequency as 1, we are returning the itr\\n            // as itr is a index on which the character is unique and appearing first into string\\n            if(mp[s[itr]] == 1) return itr;\\n        }\\n        return -1;\\n    }\\n};\\n```\\nIf you find any issue in understanding the solution then comment below, will try to help you.\\nIf you found my solution useful.\\nSo **please do upvote and encourage me** to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)",
                "solutionTags": [
                    "C",
                    "String",
                    "Queue"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char, int> mp;\\n        queue<char> q;\\n        \\n        for(int itr = 0; itr < s.size(); itr++){\\n            if(!mp[s[itr]]){\\n                mp[s[itr]] = itr+1;\\n                q.push(s[itr]);\\n            }\\n            else mp[s[itr]] = -1;\\n        }        \\n        \\n        while(!q.empty()){\\n            if(mp[q.front()] != -1) return mp[q.front()]-1;\\n            q.pop();\\n        }\\n        return -1;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char, int> mp;        \\n        \\n        // counting the frequency of a character present into string\\n        for(int itr = 0; itr < s.size(); itr++) mp[s[itr]]++;\\n                \\n        for(int itr = 0; itr < s.size(); itr++){\\n            // at the time when we are getting char frequency as 1, we are returning the itr\\n            // as itr is a index on which the character is unique and appearing first into string\\n            if(mp[s[itr]] == 1) return itr;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1078629,
                "title": "swift",
                "content": "```\\nclass Solution {\\n    func firstUniqChar(_ s: String) -> Int {\\n        var ocurrences: [Character: Int] = [:]\\n        \\n        for char in s {\\n            ocurrences[char, default: 0] += 1\\n        }\\n        \\n        var i = 0\\n        \\n        for char in s {\\n            if let count = ocurrences[char], count == 1 {\\n                return i\\n            }\\n            i += 1\\n        }\\n        \\n        return -1\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func firstUniqChar(_ s: String) -> Int {\\n        var ocurrences: [Character: Int] = [:]\\n        \\n        for char in s {\\n            ocurrences[char, default: 0] += 1\\n        }\\n        \\n        var i = 0\\n        \\n        for char in s {\\n            if let count = ocurrences[char], count == 1 {\\n                return i\\n            }\\n            i += 1\\n        }\\n        \\n        return -1\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1028822,
                "title": "java-simple-solution-details-explained-below",
                "content": "As it contains only lower case the keep putting the character of string two approiapiate location and increasing the size by 1 if already available.\\n\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int[] data= new int[26];\\n        for (int i = 0; i < s.length(); i++) \\n             data[s.charAt(i)-\\'a\\']++;\\n        for (int i = 0; i < s.length(); i++) \\n            if (data[s.charAt(i)-\\'a\\'] == 1) \\n                return i;\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int[] data= new int[26];\\n        for (int i = 0; i < s.length(); i++) \\n             data[s.charAt(i)-\\'a\\']++;\\n        for (int i = 0; i < s.length(); i++) \\n            if (data[s.charAt(i)-\\'a\\'] == 1) \\n                return i;\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1018772,
                "title": "map-in-javascript",
                "content": "```\\nvar firstUniqChar = function(s) {\\n    const count = new Map();\\n    for(let i = 0; i < s.length; i++) {\\n        if(!count[s[i]]) {\\n            count[s[i]] = 1;\\n        } else {\\n            count[s[i]]++\\n        }\\n    }\\n    for(let i = 0; i < s.length; i++) {\\n        if(count[s[i]] === 1) return i\\n    }    \\n    return -1\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar firstUniqChar = function(s) {\\n    const count = new Map();\\n    for(let i = 0; i < s.length; i++) {\\n        if(!count[s[i]]) {\\n            count[s[i]] = 1;\\n        } else {\\n            count[s[i]]++\\n        }\\n    }\\n    for(let i = 0; i < s.length; i++) {\\n        if(count[s[i]] === 1) return i\\n    }    \\n    return -1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 446644,
                "title": "java-solution-using-hashmap",
                "content": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        for(int i=0;i<s.length();i++) {\\n            char c = s.charAt(i);\\n            if(map.containsKey(c)) {\\n                map.put(c, map.get(c)+1);\\n            }\\n            else\\n                map.put(c,1);\\n        }\\n        for(int i=0;i<s.length();i++) {\\n            char c = s.charAt(i);\\n            if(map.get(c)==1)\\n                return i;\\n        }\\n        return -1;\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int firstUniqChar(String s) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        for(int i=0;i<s.length();i++) {\\n            char c = s.charAt(i);\\n            if(map.containsKey(c)) {\\n                map.put(c, map.get(c)+1);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 352616,
                "title": "simple-code-in-go-4ms-beats-100",
                "content": "```\\nfunc firstUniqChar(s string) int {\\n    m := make([]int, 26)\\n    for _, v := range s {\\n        m[int(v- \\'a\\')]++\\n    }\\n    for i, v := range s {\\n        if m[int(v- \\'a\\')] == 1 {\\n            return i\\n        }\\n    }\\n    return -1\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc firstUniqChar(s string) int {\\n    m := make([]int, 26)\\n    for _, v := range s {\\n        m[int(v- \\'a\\')]++\\n    }\\n    for i, v := range s {\\n        if m[int(v- \\'a\\')] == 1 {\\n            return i\\n        }\\n    }\\n    return -1\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 86335,
                "title": "easy-c",
                "content": "```c++\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        \\n        int index = -1;\\n        int alpha[27] = { 0 };\\n        \\n        for (int i = 0; i < s.size(); ++i) {\\n            alpha[s[i]-'a'] += 1;\\n        }\\n        \\n        for (int i = 0; i < s.size(); ++i) {\\n            if (alpha[s[i]-'a'] == 1) {\\n                index = i;\\n                break;\\n            }\\n        }\\n        \\n        return index;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```c++\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        \\n        int index = -1;\\n        int alpha[27] = { 0 };\\n        \\n        for (int i = 0; i < s.size(); ++i) {\\n            alpha[s[i]-'a'] += 1;\\n        }\\n        \\n        for (int i = 0; i < s.size(); ++i) {\\n            if (alpha[s[i]-'a'] == 1) {\\n                index = i;\\n                break;\\n            }\\n        }\\n        \\n        return index;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 86598,
                "title": "java-solution-o-n",
                "content": "```\\npublic class Solution {\\n    public int firstUniqChar(String s) {\\n\\t\\tif (s == null || s.equals(\"\")) return -1;\\n\\t\\tchar[] c = s.toCharArray();\\n\\t\\tint[] cnt = new int[256];\\n\\t\\t\\t\\t\\n\\t\\tfor (int i = 0; i < c.length; i++) {\\n\\t\\t\\tcnt[c[i]]++;\\n\\t\\t}\\n\\n\\t\\tfor (int i = 0; i < c.length; i++) {\\n\\t\\t\\tif (cnt[c[i]] == 1) return i; \\n\\t\\t}\\n\\t\\treturn -1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int firstUniqChar(String s) {\\n\\t\\tif (s == null || s.equals(\"\")) return -1;\\n\\t\\tchar[] c = s.toCharArray();\\n\\t\\tint[] cnt = new int[256];\\n\\t\\t\\t\\t\\n\\t\\tfor (int i = 0; i < c.length; i++) {\\n\\t\\t\\tcnt[c[i]]++;\\n\\t\\t}\\n\\n\\t\\tfor (int i = 0; i < c.length; i++) {\\n\\t\\t\\tif (cnt[c[i]] == 1) return i; \\n\\t\\t}\\n\\t\\treturn -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3816704,
                "title": "easy-c-solution-using-map",
                "content": "# Intuition\\nstoring how many times a character appears in order\\n# Complexity\\n- Time complexity:$$O(n)$$\\n\\n- Space complexity:$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> mp;\\n        for(int i =0; i<s.length();i++){\\n            mp[s[i]]++;\\n        }\\n        for(int i =0;i<s.length();i++){\\n            if(mp[s[i]]==1) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```\\n![7abc56.jpg](https://assets.leetcode.com/users/images/13ae835d-5d1e-46fd-81b1-13c0204bb5b9_1690327309.0092556.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> mp;\\n        for(int i =0; i<s.length();i++){\\n            mp[s[i]]++;\\n        }\\n        for(int i =0;i<s.length();i++){\\n            if(mp[s[i]]==1) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3741393,
                "title": "my-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int m=0;\\n        for(int i : s.toCharArray()) {\\n            \\n            if(s.indexOf(i) == s.lastIndexOf(i)){\\n                return m;\\n            }m++;\\n        }return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int m=0;\\n        for(int i : s.toCharArray()) {\\n            \\n            if(s.indexOf(i) == s.lastIndexOf(i)){\\n                return m;\\n            }m++;\\n        }return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202987,
                "title": "java-solution-1-ms-beats-100",
                "content": "# Java Code\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int min = Integer.MAX_VALUE;\\n        for (char c = \\'a\\'; c <= \\'z\\'; c++) {\\n            int inx = s.indexOf(c);\\n            if (inx != -1 && inx == s.lastIndexOf(c)) min = Math.min(min, inx);\\n        }\\n        return (min != Integer.MAX_VALUE) ? min : -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String",
                    "Queue",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int min = Integer.MAX_VALUE;\\n        for (char c = \\'a\\'; c <= \\'z\\'; c++) {\\n            int inx = s.indexOf(c);\\n            if (inx != -1 && inx == s.lastIndexOf(c)) min = Math.min(min, inx);\\n        }\\n        return (min != Integer.MAX_VALUE) ? min : -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189129,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n =s.length();\\n        vector<int> freq(26,0);\\n\\n        for(int i=0;s[i]!=\\'\\\\0\\';++i){\\n            freq[s[i]-\\'a\\']+=1;\\n        }\\n        for(int i=0;s[i]!=\\'\\\\0\\';++i){\\n            if(freq[s[i]-\\'a\\']==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n =s.length();\\n        vector<int> freq(26,0);\\n\\n        for(int i=0;s[i]!=\\'\\\\0\\';++i){\\n            freq[s[i]-\\'a\\']+=1;\\n        }\\n        for(int i=0;s[i]!=\\'\\\\0\\';++i){\\n            if(freq[s[i]-\\'a\\']==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3171009,
                "title": "best-python-solution-beats-99",
                "content": "The best easy solution beats 99%.\\nPlease upvote if you like it.\\n\\n# Code\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        if 1 not in Counter(s).values():\\n            return -1\\n        for i,j in Counter(s).items():\\n            if j==1:\\n                return s.index(i)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        if 1 not in Counter(s).values():\\n            return -1\\n        for i,j in Counter(s).items():\\n            if j==1:\\n                return s.index(i)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3155152,
                "title": "java-simple-easy-clean-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n\\n        int index = -1;\\n        int len = s.length();\\n        int i = 0;\\n\\n        while(i < len){\\n            char c = s.charAt(i);\\n            int firstIndex = s.indexOf(c);\\n            int lastIndex = s.lastIndexOf(c);\\n            if(firstIndex == lastIndex){\\n                index = i;\\n                break;\\n\\n            }\\n            i++;\\n        }\\n        return index;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n\\n        int index = -1;\\n        int len = s.length();\\n        int i = 0;\\n\\n        while(i < len){\\n            char c = s.charAt(i);\\n            int firstIndex = s.indexOf(c);\\n            int lastIndex = s.lastIndexOf(c);\\n            if(firstIndex == lastIndex){\\n                index = i;\\n                break;\\n\\n            }\\n            i++;\\n        }\\n        return index;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3137849,
                "title": "python-98-50-faster-code-easy-solution",
                "content": "# Approach\\nUsing Hash Table\\n\\n# Complexity\\n- Time complexity:     O(N)\\n\\n- Space complexity:    O(N)\\n\\n# Code\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        count=Counter(s)\\n        for i,j in count.items():\\n            if j==1:\\n                return s.index(i)\\n        return -1\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        count=Counter(s)\\n        for i,j in count.items():\\n            if j==1:\\n                return s.index(i)\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2915696,
                "title": "beats-90-codedominar-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        d=dict()\\n        for c in s:\\n            d[c] = d.get(c,0)+1\\n        for i,c in enumerate(s):\\n            if d[c] == 1:\\n                return i\\n        return -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        d=dict()\\n        for c in s:\\n            d[c] = d.get(c,0)+1\\n        for i,c in enumerate(s):\\n            if d[c] == 1:\\n                return i\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2888045,
                "title": "java-easy-solution",
                "content": "# Complexity\\n- Time complexity:O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int[] counter = new int[26];\\n        for (char c : s.toCharArray()) {\\n            ++counter[c - \\'a\\'];\\n        }\\n        for (int i = 0; i < s.length(); ++i) {\\n            char c = s.charAt(i);\\n            if (counter[c - \\'a\\'] == 1) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int[] counter = new int[26];\\n        for (char c : s.toCharArray()) {\\n            ++counter[c - \\'a\\'];\\n        }\\n        for (int i = 0; i < s.length(); ++i) {\\n            char c = s.charAt(i);\\n            if (counter[c - \\'a\\'] == 1) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2746834,
                "title": "one-loop",
                "content": "```\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int a=0;\\n        char b[]=s.toCharArray();\\n        \\n        for(char c:b){\\n            if(s.indexOf(c)==s.lastIndexOf(c)){\\n                a=s.indexOf(c);\\n                break;\\n            }\\n            else{\\n                a=-1;\\n            }\\n        }\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int a=0;\\n        char b[]=s.toCharArray();\\n        \\n        for(char c:b){\\n            if(s.indexOf(c)==s.lastIndexOf(c)){\\n                a=s.indexOf(c);\\n                break;\\n            }\\n            else{\\n                a=-1;\\n            }\\n        }\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2431635,
                "title": "first-unique-character-in-a-string-c-solution-easy-100",
                "content": "First Unique Character in a string\\n\\nC++ Solution - \\n```\\n        map<char,int> m;\\n        for(int i=0;i<s.length();i++){\\n            m[s[i]]++;\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(m[s[i]]==1)\\n                return i;\\n        }\\n        return -1;\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n        map<char,int> m;\\n        for(int i=0;i<s.length();i++){\\n            m[s[i]]++;\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(m[s[i]]==1)\\n                return i;\\n        }\\n        return -1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2431434,
                "title": "python-using-counter",
                "content": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        counter = Counter(s)\\n        for i, c in enumerate(s):\\n            if counter[c] == 1:\\n                return i\\n            \\n        return -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        counter = Counter(s)\\n        for i, c in enumerate(s):\\n            if counter[c] == 1:\\n                return i\\n            \\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2244032,
                "title": "beginner-friendly-java-javascript-python-solution",
                "content": "**Time Complexity : O(n)**\\n**Java**\\n```\\npublic class Solution {\\n    public int firstUniqChar(String s) {\\n        int freq [] = new int[26];\\n        for(int i = 0; i < s.length(); i ++)\\n            freq [s.charAt(i) - \\'a\\'] ++;\\n        for(int i = 0; i < s.length(); i ++)\\n            if(freq [s.charAt(i) - \\'a\\'] == 1)\\n                return i;\\n        return -1;\\n    }\\n}\\n```\\n**JavaScript**\\n```\\nvar firstUniqChar = function(s) {\\n    let freq = new Array(26).fill(0)\\n    for(let i = 0; i < s.length; i ++)\\n        freq [s.charCodeAt(i) - 97]++\\n    for(let i = 0; i < s.length; i ++)\\n        if(freq [s.charCodeAt(i) - 97] == 1)\\n            return i\\n    return -1\\n};\\n```\\n**Python**\\n```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        freq = [0 for i in range(26)]\\n        for i in range(len(s)):\\n            freq[ord(s[i]) - ord(\\'a\\')] += 1\\n        for i in range(len(s)):\\n            if freq[ord(s[i]) - ord(\\'a\\')] == 1:\\n                return i\\n        return -1\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "JavaScript"
                ],
                "code": "```\\npublic class Solution {\\n    public int firstUniqChar(String s) {\\n        int freq [] = new int[26];\\n        for(int i = 0; i < s.length(); i ++)\\n            freq [s.charAt(i) - \\'a\\'] ++;\\n        for(int i = 0; i < s.length(); i ++)\\n            if(freq [s.charAt(i) - \\'a\\'] == 1)\\n                return i;\\n        return -1;\\n    }\\n}\\n```\n```\\nvar firstUniqChar = function(s) {\\n    let freq = new Array(26).fill(0)\\n    for(let i = 0; i < s.length; i ++)\\n        freq [s.charCodeAt(i) - 97]++\\n    for(let i = 0; i < s.length; i ++)\\n        if(freq [s.charCodeAt(i) - 97] == 1)\\n            return i\\n    return -1\\n};\\n```\n```\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        freq = [0 for i in range(26)]\\n        for i in range(len(s)):\\n            freq[ord(s[i]) - ord(\\'a\\')] += 1\\n        for i in range(len(s)):\\n            if freq[ord(s[i]) - ord(\\'a\\')] == 1:\\n                return i\\n        return -1\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1985308,
                "title": "simple-javascript-solution-using-inbuilt-function",
                "content": "```\\nvar firstUniqChar = function(s) {\\n      for(let i = 0; i < s.length; i++){\\n       if(s.indexOf(s[i]) === s.lastIndexOf(s[i])){\\n           return s.indexOf(s[i])\\n       }\\n   }\\n   return -1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar firstUniqChar = function(s) {\\n      for(let i = 0; i < s.length; i++){\\n       if(s.indexOf(s[i]) === s.lastIndexOf(s[i])){\\n           return s.indexOf(s[i])\\n       }\\n   }\\n   return -1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1933043,
                "title": "c-naive-effecient-and-best-solutions",
                "content": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n       \\n\\t    NAIVE SOLUTION O(N^2)\\n        /*int n = s.size();\\n        int res = -1;\\n        for(int i = 0;  i < n;  i++)\\n        {\\n            bool flag = true;\\n            for(int j = 0;  j < i;  j++)\\n            {\\n                if(s[i] == s[j])\\n                {\\n                    flag = false;\\n                    break;\\n                }\\n            }\\n            if(flag == true)\\n            {\\n                for(int j = i+1;  j < n;  j++)\\n                {\\n                    if(s[i] == s[j])\\n                    {\\n                        cout << s[i] <<\" \" << s[j]<< endl;\\n                        flag = false;\\n                        break;\\n                    }    \\n                }\\n            }\\n            if(flag == true)\\n            {\\n                res = i;\\n                break;\\n            }\\n        }\\n        return res;*/\\n        \\n        EFFECIENT 2 TRAVERSAL SOLUTION O(N)+O(N) \\n        /*int count[26] = {0};\\n        int res = -1;\\n        for(int i = 0;  i < s.size();  i++)\\n        {\\n            count[s[i]-\\'a\\']++;\\n        }\\n        for(int i = 0;  i < s.size();  i++)\\n        {\\n            if(count[s[i]-\\'a\\'] == 1)\\n            {\\n               res = i;\\n               break;\\n            }\\n        }\\n        return res;*/\\n        \\n        \\n        NOW INTERVIEWER GENERALLY ASK THE SOLUTION OF SINGLE TRAVERSAL --> BEST \\n\\t\\tSOLUTION O(N) + O(26) + O(26) \\n        int count[26];\\n        for(int i = 0;  i < 26;  i++)\\n        {\\n            count[i] = -1;\\n        }\\n        for(int i = 0;  i < s.size();  i++)\\n        {\\n            if(count[s[i] - \\'a\\'] == -1)\\n            {\\n                count[s[i] - \\'a\\'] = i;\\n            }\\n            else\\n            {\\n                count[s[i] - \\'a\\'] = -2;\\n            }\\n        }\\n        int res = INT_MAX;\\n        for(int i = 0;  i < 26;  i++)\\n        {\\n            if(count[i] >= 0)\\n            {\\n                res = min(res, count[i]);\\n            }\\n        }\\n        return (res == INT_MAX) ? -1 : res;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n       \\n\\t    NAIVE SOLUTION O(N^2)\\n        /*int n = s.size();\\n        int res = -1;\\n        for(int i = 0;  i < n;  i++)\\n        {\\n            bool flag = true;\\n            for(int j = 0;  j < i;  j++)\\n            {\\n                if(s[i] == s[j])\\n                {\\n                    flag = false;\\n                    break;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1871280,
                "title": "my-4-line-solution-unordered-map-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> mp;\\n        for(auto &it : s) mp[it]++;\\n        for(int i=0;i<s.size();i++) if(mp[s[i]] == 1) return i;\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> mp;\\n        for(auto &it : s) mp[it]++;\\n        for(int i=0;i<s.size();i++) if(mp[s[i]] == 1) return i;\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1826371,
                "title": "scala-functional-easy-to-understand-solution",
                "content": "Code: \\n```\\ndef firstUniqChar(s: String): Int = {\\n  val charCountMap = s.groupBy(_.toChar).mapValues(_.length)\\n  s.indexWhere(charCountMap.get(_).contains(1))\\n}\\n```\\n\\nIntuition:\\n1. Use HashMap to store the count of occurence of each character in string. in above code grouBy method creating a Map of ( char -> char, ex : e-> eee) then mapValues, convert value to count resulting in ex: e ->3)\\n2. In second line indexWhere is similar to looping through the string and get where is my first character for which count of occurence in above hashMap is 1\\n\\n\\nTime Complexity : O(n) : for putting in Map and then scanning through the string\\nSpace Compexity : O(n) for storing the character in map",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\ndef firstUniqChar(s: String): Int = {\\n  val charCountMap = s.groupBy(_.toChar).mapValues(_.length)\\n  s.indexWhere(charCountMap.get(_).contains(1))\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1770980,
                "title": "javascript-o-n-with-explaination-using-char-array",
                "content": "1. Create an Array of size 26 i.e for all characters (a - z)\\n2. fill it with 0. (zero)\\n    hint:- we have a function for that  => Array.fill(0);\\n3. Itterate the array and increase the count of respective character like this \\uD83D\\uDC47\\n \\nLets take an eg. - str = Nimisha\\n![image](https://assets.leetcode.com/users/images/2d6b44f6-b1a2-4248-95ed-2573e57efadc_1644855524.7772164.png)\\n4.  then itterate through the string again and check which char is having 1 at its value.\\n\\n Catch here is ***Ascii values***\\nHint - charAt() will return string while charCodeAt() will return number.\\nTry yourself then check the code. \\n\\n```\\nvar firstUniqChar = function(s) {\\n    let arr = new Array(26).fill(0);\\n    for (let i = 0; i < s.length; i++){\\n        arr[s.charCodeAt(i) - 97]++;\\n    }\\n    for (let i = 0; i < s.length; i++){\\n        if (arr[s.charCodeAt(i)-97] === 1){\\n            return i;\\n        }\\n    }\\n    return -1;\\n};\\n```\\n\\n**Upvote** if it helped.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar firstUniqChar = function(s) {\\n    let arr = new Array(26).fill(0);\\n    for (let i = 0; i < s.length; i++){\\n        arr[s.charCodeAt(i) - 97]++;\\n    }\\n    for (let i = 0; i < s.length; i++){\\n        if (arr[s.charCodeAt(i)-97] === 1){\\n            return i;\\n        }\\n    }\\n    return -1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1710878,
                "title": "swift-solution",
                "content": "```\\nclass Solution {\\n    func firstUniqChar(_ s: String) -> Int {\\n        let freqMap = s\\n        .reduce(into: [Character: Int]()) { $0[$1, default: 0] += 1 }\\n        \\n        for (index, char) in s.enumerated() {\\n            if let count = freqMap[char], count == 1 {\\n                return index\\n            }\\n        }\\n        \\n        return -1\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func firstUniqChar(_ s: String) -> Int {\\n        let freqMap = s\\n        .reduce(into: [Character: Int]()) { $0[$1, default: 0] += 1 }\\n        \\n        for (index, char) in s.enumerated() {\\n            if let count = freqMap[char], count == 1 {\\n                return index\\n            }\\n        }\\n        \\n        return -1\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1677666,
                "title": "c-26ms-count-array-and-single-string-traversal",
                "content": "```\\n int firstUniqChar(string s) {\\n        int fI[256];\\n        for(int i=0; i<256; i++)\\n            fI[i]=-1;\\n        \\n        for(int i=0; i<s.size(); i++)\\n        {\\n            if(fI[s[i]]==-1)\\n                fI[s[i]]=i;\\n            else\\n                fI[s[i]]=-2;\\n        }\\n        int res=INT_MAX;\\n        for(int i=0; i<256; i++)\\n        {\\n            if(fI[i]>=0)\\n                res=min(res,fI[i]);\\n        }\\n        return (res==INT_MAX)? -1 : res;\\n}\\n```\\n**Time Complexity: O(n)**\\n                As the string need to be traversed once\\n\\n**Auxiliary Space: O(n)**\\n                Space is occupied by the use of count-array to keep track of frequency.",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n int firstUniqChar(string s) {\\n        int fI[256];\\n        for(int i=0; i<256; i++)\\n            fI[i]=-1;\\n        \\n        for(int i=0; i<s.size(); i++)\\n        {\\n            if(fI[s[i]]==-1)\\n                fI[s[i]]=i;\\n            else\\n                fI[s[i]]=-2;\\n        }\\n        int res=INT_MAX;\\n        for(int i=0; i<256; i++)\\n        {\\n            if(fI[i]>=0)\\n                res=min(res,fI[i]);\\n        }\\n        return (res==INT_MAX)? -1 : res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1588585,
                "title": "java-4-lines-solution-21ms",
                "content": "Just check if first index and last index of that character in string are same or not.\\n```\\npublic int firstUniqChar(String s) {\\n        for(int i=0;i<s.length();i++)\\n            if(s.indexOf(s.charAt(i))==s.lastIndexOf(s.charAt(i)))\\n                return i;\\n        return -1;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int firstUniqChar(String s) {\\n        for(int i=0;i<s.length();i++)\\n            if(s.indexOf(s.charAt(i))==s.lastIndexOf(s.charAt(i)))\\n                return i;\\n        return -1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1536580,
                "title": "java-solution-beats-91-in-runtime",
                "content": "Simple character count solution\\n```\\npublic int findUniqueCharacter(String s) {\\n\\tint[] count = new int[26];\\n\\tfor (int i = 0; i < s.length(); i++) \\n\\t\\tcount[s.charAt(i) - 97]++;\\n\\tfor (int i = 0; i < s.length(); i++) {\\n\\t\\tif (count[s.charAt(i) - 97] == 1)\\n\\t\\t\\treturn i;\\n\\t}\\n    return -1;\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int findUniqueCharacter(String s) {\\n\\tint[] count = new int[26];\\n\\tfor (int i = 0; i < s.length(); i++) \\n\\t\\tcount[s.charAt(i) - 97]++;\\n\\tfor (int i = 0; i < s.length(); i++) {\\n\\t\\tif (count[s.charAt(i) - 97] == 1)\\n\\t\\t\\treturn i;\\n\\t}\\n    return -1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1465320,
                "title": "javascript-js-90-faster-less-memory",
                "content": "```\\nvar firstUniqChar = function(s) {\\n    const m = new Map()\\n    for (let i=0; i<s.length; i++) {\\n        m.has(s[i]) ? m.set(s[i],-1) : m.set(s[i],i)\\n    }\\n    for (const value of m.values()) {\\n        if (value !== -1) return value\\n    }\\n    return -1\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar firstUniqChar = function(s) {\\n    const m = new Map()\\n    for (let i=0; i<s.length; i++) {\\n        m.has(s[i]) ? m.set(s[i],-1) : m.set(s[i],i)\\n    }\\n    for (const value of m.values()) {\\n        if (value !== -1) return value\\n    }\\n    return -1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1270520,
                "title": "c-using-array",
                "content": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.size();\\n        int arr[26]={0};\\n        for(int i=0;i<n;i++){\\n            arr[(int)(s[i]-\\'a\\')]++;\\n        }\\n        for(int i=0;i<n;i++){\\n            if(arr[(int)(s[i]-\\'a\\')]==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.size();\\n        int arr[26]={0};\\n        for(int i=0;i<n;i++){\\n            arr[(int)(s[i]-\\'a\\')]++;\\n        }\\n        for(int i=0;i<n;i++){\\n            if(arr[(int)(s[i]-\\'a\\')]==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1116434,
                "title": "python-using-dictionary",
                "content": "I wanted to share my code with you. This is the first time I got it running and accepted. I just started practice my leetcode. This may not be the best and fastest. But I am very pride! And I will continue practice my leetcode and I hope I can have more code being accepted in the future! \\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        mp = {}\\n        res = 0\\n        for i,c in enumerate(s):\\n            if c in mp:\\n                mp[c] +=1\\n            else:\\n                mp[c] = 1\\n        for key, value in mp.items():\\n            if value ==1:\\n                res = s.index(key)\\n                return res\\n        return -1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        mp = {}\\n        res = 0\\n        for i,c in enumerate(s):\\n            if c in mp:\\n                mp[c] +=1\\n            else:\\n                mp[c] = 1\\n        for key, value in mp.items():\\n            if value ==1:\\n                res = s.index(key)\\n                return res\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 875489,
                "title": "simple-and-easy-to-understand-c",
                "content": "```\\nint firstUniqChar(string s) {\\n        map<char, int> m ;\\n        \\n        for(int i =0 ; i<s.length();i++){\\n            m[s[i]]++;\\n        }\\n         for(int i =0 ; i<s.length();i++){\\n         if(m[s[i]]==1)\\n             return i;\\n        }\\n        return -1;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint firstUniqChar(string s) {\\n        map<char, int> m ;\\n        \\n        for(int i =0 ; i<s.length();i++){\\n            m[s[i]]++;\\n        }\\n         for(int i =0 ; i<s.length();i++){\\n         if(m[s[i]]==1)\\n             return i;\\n        }\\n        return -1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 614893,
                "title": "python-rust-hashmap-solutions-time-o-n-space-o-n",
                "content": "- **Python**\\n\\n```python\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        count = {}\\n        \\n        for l in s:\\n            if l in count: count[l] += 1\\n            else: count[l] = 1\\n                    \\n        for i, l in enumerate(s):\\n            if count[l] == 1:\\n                return i\\n        \\n        return -1\\n```\\n\\n- **Rust**\\n\\n```rust\\nuse std::collections::HashMap;\\n\\nimpl Solution {\\n    pub fn first_uniq_char(s: String) -> i32 {\\n        let mut count: HashMap<char, i32> = HashMap::new();\\n        \\n        for l in s.chars() {\\n            if count.contains_key(&l) {\\n                let val = count.get(&l).unwrap();\\n                count.insert(l, val + 1);\\n            } else {\\n                count.insert(l, 1);\\n            }\\n        }\\n        \\n        for (i, l) in s.chars().enumerate() {\\n            let val = *count.get(&l).unwrap();\\n            if val == 1 {\\n                return i as i32;\\n            }\\n        }\\n        \\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Python",
                    "Rust"
                ],
                "code": "```python\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        count = {}\\n        \\n        for l in s:\\n            if l in count: count[l] += 1\\n            else: count[l] = 1\\n                    \\n        for i, l in enumerate(s):\\n            if count[l] == 1:\\n                return i\\n        \\n        return -1\\n```\n```rust\\nuse std::collections::HashMap;\\n\\nimpl Solution {\\n    pub fn first_uniq_char(s: String) -> i32 {\\n        let mut count: HashMap<char, i32> = HashMap::new();\\n        \\n        for l in s.chars() {\\n            if count.contains_key(&l) {\\n                let val = count.get(&l).unwrap();\\n                count.insert(l, val + 1);\\n            } else {\\n                count.insert(l, 1);\\n            }\\n        }\\n        \\n        for (i, l) in s.chars().enumerate() {\\n            let val = *count.get(&l).unwrap();\\n            if val == 1 {\\n                return i as i32;\\n            }\\n        }\\n        \\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 543555,
                "title": "easy-python-100",
                "content": "```python\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        maps = {}\\n        for i in s:\\n            maps[i] = maps.get(i,0) + 1\\n        for i in range(len(s)):\\n            if maps[s[i]] == 1:\\n                return i\\n        return -1\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        maps = {}\\n        for i in s:\\n            maps[i] = maps.get(i,0) + 1\\n        for i in range(len(s)):\\n            if maps[s[i]] == 1:\\n                return i\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 540788,
                "title": "java-5-liner",
                "content": "```\\npublic int firstUniqChar(String s) {\\n\\tint[] chars = new int[26];\\n\\tfor(char ch: s.toCharArray()) chars[ch-\\'a\\']++;\\n\\tfor(int i = 0;i<s.length();i++)\\n\\t\\tif(chars[s.charAt(i)-\\'a\\']==1) return i;\\n\\treturn -1;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int firstUniqChar(String s) {\\n\\tint[] chars = new int[26];\\n\\tfor(char ch: s.toCharArray()) chars[ch-\\'a\\']++;\\n\\tfor(int i = 0;i<s.length();i++)\\n\\t\\tif(chars[s.charAt(i)-\\'a\\']==1) return i;\\n\\treturn -1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 519050,
                "title": "easy-python-solution",
                "content": "\"\"\"\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        for i,j in enumerate(s):\\n            if(s.count(j)==1):\\n                return i\\n        return -1\\n\"\"\"",
                "solutionTags": [
                    "Python"
                ],
                "code": "\"\"\"\\nclass Solution(object):\\n    def firstUniqChar(self, s):\\n        for i,j in enumerate(s):\\n            if(s.count(j)==1):\\n                return i\\n        return -1\\n\"\"\"",
                "codeTag": "Java"
            },
            {
                "id": 515224,
                "title": "kotlin-easy-solution",
                "content": "```\\nclass Solution {\\n    fun firstUniqChar(s: String): Int {\\n      if(s.length ==0) return -1\\n      var maps: MutableMap<Char, Int>  = mutableMapOf()\\n      \\n      for( i in s){\\n        maps.put(i, maps.getOrDefault(i,0) +1)    \\n      }\\n      for(i in 0..s.length-1) {\\n        if(maps.get(s[i]) ==1) return i\\n      }\\n      return -1        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun firstUniqChar(s: String): Int {\\n      if(s.length ==0) return -1\\n      var maps: MutableMap<Char, Int>  = mutableMapOf()\\n      \\n      for( i in s){\\n        maps.put(i, maps.getOrDefault(i,0) +1)    \\n      }\\n      for(i in 0..s.length-1) {\\n        if(maps.get(s[i]) ==1) return i\\n      }\\n      return -1        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 438233,
                "title": "javascript",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar firstUniqChar = function(s) {\\n    if (s.length === 0)\\n        return -1;\\n    const uniqueValues = new Map();\\n    const notUnique = new Map();\\n    let index = 0;\\n    for (let letter of s) {\\n        if (uniqueValues.has(letter)) {\\n            uniqueValues.delete(letter);\\n            notUnique.set(letter, true);\\n        } else if (!notUnique.has(letter)) {\\n            uniqueValues.set(letter, index);\\n        }\\n        index++;\\n    }\\n    if (uniqueValues.size === 0)\\n        return -1;\\n    return uniqueValues.values().next().value;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar firstUniqChar = function(s) {\\n    if (s.length === 0)\\n        return -1;\\n    const uniqueValues = new Map();\\n    const notUnique = new Map();\\n    let index = 0;\\n    for (let letter of s) {\\n        if (uniqueValues.has(letter)) {\\n            uniqueValues.delete(letter);\\n            notUnique.set(letter, true);\\n        } else if (!notUnique.has(letter)) {\\n            uniqueValues.set(letter, index);\\n        }\\n        index++;\\n    }\\n    if (uniqueValues.size === 0)\\n        return -1;\\n    return uniqueValues.values().next().value;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 421639,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        d = {}\\n        for n in s:\\n            if n in d:\\n                d[n]+=1\\n            else:\\n                d[n]=1\\n        for key,val in d.items():\\n            if val==1:\\n                return s.index(key)\\n        return -1\\n```\\nRuntime: 104 ms, faster than 82.83% of Python3 online submissions for First Unique Character in a String.\\nMemory Usage: 14 MB, less than 6.52% of Python3 online submissions for First Unique Character in a String.",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        d = {}\\n        for n in s:\\n            if n in d:\\n                d[n]+=1\\n            else:\\n                d[n]=1\\n        for key,val in d.items():\\n            if val==1:\\n                return s.index(key)\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 365135,
                "title": "three-variation-explanation-100-100-leetcode-platform-fast",
                "content": "Algo 1: Run on given string, find frequency of each element. Than run again over string, the first character having frequency 1 is your answer. \\nComplexity : (2*n) => O(n)\\n\\n```\\n public int firstUniqCharTwiceIteration(String s) {\\n        \\n        if ( s == null || s.isEmpty())\\n            return -1; \\n        \\n        int [] freq = new int [26] ; \\n        \\n        for (char c : s.toCharArray()){\\n            int x = c - \\'a\\'; \\n            freq[x]++;\\n        }\\n        \\n        int i =0;\\n        for (char c : s.toCharArray()){\\n            int x = c - \\'a\\'; \\n            if(freq[x]==1)\\n                return i; \\n                \\n                i++;\\n        }\\n        return -1;\\n    }\\n```\\n\\nAlgo 2: Run over given string, store the \"First index\" of each character. If a character is repeated, then push -1.\\nRun over frequency array, and find the least index value. \\n\\nComplexity: O(26+n) => O(n)\\n\\n```\\n  public int firstUniqCharSingleIteration(String s) {\\n          if ( s == null || s.isEmpty())\\n            return -1; \\n        \\n        int [] freq = new int [26] ; \\n        \\n        for (int i = 0; i<s.length(); i++){\\n            int x = s.charAt(i) - \\'a\\'; \\n            \\n            if(freq[x] == 0)\\n                freq[x] = i+1; \\n            else \\n                freq[x] = -1; \\n        }\\n        \\n        int min = Integer.MAX_VALUE;\\n        for (int i =0; i < 26; i++){\\n            if ( freq[i] >0 )\\n                min = Math.min(min, freq[i]-1); \\n                \\n        }\\n       \\n        return min==Integer.MAX_VALUE ? -1 : min;\\n        \\n    }\\n```\\n\\nAlgo 3: Iterate over a to z, find the \\n1. Find the first index and last index of this character.\\n2. Choose min ( min, First) So far if first = last\\n\\nComplexity: O(26*n)\\nHowever this is 100% fast and run in 1 ms (supersingly ) \\n```\\npublic int firstUniqCharIteration(String s) {\\n        if(s == null || s.isEmpty()) return -1;\\n        int min = Integer.MAX_VALUE;\\n        \\n        for(char c = \\'a\\'; c <= \\'z\\'; c++) {\\n            int first = s.indexOf(c);\\n            int last = s.lastIndexOf(c);\\n            \\n            if(first != -1 && first == last) {\\n                min = Math.min(min, first);\\n            }\\n        }\\n        return min == Integer.MAX_VALUE ? -1 : min;\\n    }\\n```\\n\\nI believe the fastest one should be the Algo 2 as it has the least complexity O(26+n)\\nBut, on leetcode the third algo is fastest.",
                "solutionTags": [],
                "code": "```\\n public int firstUniqCharTwiceIteration(String s) {\\n        \\n        if ( s == null || s.isEmpty())\\n            return -1; \\n        \\n        int [] freq = new int [26] ; \\n        \\n        for (char c : s.toCharArray()){\\n            int x = c - \\'a\\'; \\n            freq[x]++;\\n        }\\n        \\n        int i =0;\\n        for (char c : s.toCharArray()){\\n            int x = c - \\'a\\'; \\n            if(freq[x]==1)\\n                return i; \\n                \\n                i++;\\n        }\\n        return -1;\\n    }\\n```\n```\\n  public int firstUniqCharSingleIteration(String s) {\\n          if ( s == null || s.isEmpty())\\n            return -1; \\n        \\n        int [] freq = new int [26] ; \\n        \\n        for (int i = 0; i<s.length(); i++){\\n            int x = s.charAt(i) - \\'a\\'; \\n            \\n            if(freq[x] == 0)\\n                freq[x] = i+1; \\n            else \\n                freq[x] = -1; \\n        }\\n        \\n        int min = Integer.MAX_VALUE;\\n        for (int i =0; i < 26; i++){\\n            if ( freq[i] >0 )\\n                min = Math.min(min, freq[i]-1); \\n                \\n        }\\n       \\n        return min==Integer.MAX_VALUE ? -1 : min;\\n        \\n    }\\n```\n```\\npublic int firstUniqCharIteration(String s) {\\n        if(s == null || s.isEmpty()) return -1;\\n        int min = Integer.MAX_VALUE;\\n        \\n        for(char c = \\'a\\'; c <= \\'z\\'; c++) {\\n            int first = s.indexOf(c);\\n            int last = s.lastIndexOf(c);\\n            \\n            if(first != -1 && first == last) {\\n                min = Math.min(min, first);\\n            }\\n        }\\n        return min == Integer.MAX_VALUE ? -1 : min;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 341803,
                "title": "not-too-fast-but-short",
                "content": "```\\nvar firstUniqChar = function(s) {\\n    let result = s.length ? [...s].filter((x,i,a) => a.indexOf(x) === a.lastIndexOf(x)) : \\'\\'\\n    return result.length ? s.indexOf(result[0]) : -1\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar firstUniqChar = function(s) {\\n    let result = s.length ? [...s].filter((x,i,a) => a.indexOf(x) === a.lastIndexOf(x)) : \\'\\'\\n    return result.length ? s.indexOf(result[0]) : -1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 157955,
                "title": "java-9-ms-beats-97-66",
                "content": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        if(s == null || s.isEmpty()) {\\n            return -1;\\n        }\\n        int[] c = new int[26];\\n        char[] s1 = s.toCharArray();\\n        \\n        for(int i =0; i < s1.length; ++i) {\\n            c[s1[i] - \\'a\\']++;\\n        }\\n        \\n        \\n        for(int i =0; i < s1.length; ++i) {\\n            if(c[s1[i] - \\'a\\'] == 1) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        if(s == null || s.isEmpty()) {\\n            return -1;\\n        }\\n        int[] c = new int[26];\\n        char[] s1 = s.toCharArray();\\n        \\n        for(int i =0; i < s1.length; ++i) {\\n            c[s1[i] - \\'a\\']++;\\n        }\\n        \\n        \\n        for(int i =0; i < s1.length; ++i) {\\n            if(c[s1[i] - \\'a\\'] == 1) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 157347,
                "title": "swift-solution",
                "content": "```\\n func firstUniqChar(_ s: String) -> Int {\\n        \\n        var dict = [Character : Int]()\\n        \\n        for i in s {\\n            dict[i] = dict[i] != nil ? dict[i]! + 1 : 1\\n        }\\n        \\n        for (index,char) in s.enumerated() {\\n            \\n            if let value = dict[char]\\n            {\\n                if value == 1{\\n                    return index\\n                }\\n            }\\n        }\\n        \\n        return -1\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n func firstUniqChar(_ s: String) -> Int {\\n        \\n        var dict = [Character : Int]()\\n        \\n        for i in s {\\n            dict[i] = dict[i] != nil ? dict[i]! + 1 : 1\\n        }\\n        \\n        for (index,char) in s.enumerated() {\\n            \\n            if let value = dict[char]\\n            {\\n                if value == 1{\\n                    return index\\n                }\\n            }\\n        }\\n        \\n        return -1\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 86560,
                "title": "c-56ms-5-lines",
                "content": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int alphabet[26] = {0};\\n        for (int i = 0; i < s.size(); ++i){++alphabet[s[i] -'a'];}\\n        int i = 0;\\n        while (i < s.size() && alphabet[s[i]-'a'] > 1) ++i;\\n        return i == s.size() ? -1 : i;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int alphabet[26] = {0};\\n        for (int i = 0; i < s.size(); ++i){++alphabet[s[i] -'a'];}\\n        int i = 0;\\n        while (i < s.size() && alphabet[s[i]-'a'] > 1) ++i;\\n        return i == s.size() ? -1 : i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978748,
                "title": "easy-sol",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> mp;\\n        int n = s.length();\\n\\n        for(int i=0;i<n;i++) {\\n            mp[s[i]]++;\\n        }\\n\\n\\n        for (int i = 0; i < n; i++) {\\n            if (mp[s[i]] == 1) {\\n                return i; // Return the index of the first non-repeating character\\n            }\\n        }\\n\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> mp;\\n        int n = s.length();\\n\\n        for(int i=0;i<n;i++) {\\n            mp[s[i]]++;\\n        }\\n\\n\\n        for (int i = 0; i < n; i++) {\\n            if (mp[s[i]] == 1) {\\n                return i; // Return the index of the first non-repeating character\\n            }\\n        }\\n\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3877973,
                "title": "finding-the-index-of-first-unique-character-in-a-string-beginner-friendly",
                "content": "**Title: Finding the Index of First Unique Character in a String**\\n\\n**Introduction:**\\nIn this article, we will explore a C++ solution to find the index of the first unique character in a given string. The provided code implements a function called `firstUniqChar`, which takes a string as input and returns the index of the first non-repeating character in the string. The solution utilizes an unordered map to efficiently count the occurrences of each character in the string.\\n\\n**Understanding the Approach:**\\nTo find the index of the first unique character in the string, we can follow these steps:\\n\\n1. Create an unordered map, `mp`, to store characters as keys and their corresponding frequencies as values.\\n2. Iterate through the input string, `s`, and count the occurrences of each character by updating the frequency in the `mp` map.\\n3. Once we have the character frequencies in the `mp` map, we iterate through the string again.\\n4. For each character, check if its frequency in the `mp` map is equal to 1. If it is, return the index of that character in the string.\\n5. If there is no unique character found during the iteration, return -1 to indicate that no such character exists in the string.\\n\\n**Solution Code Explanation:**\\n```cpp\\nint firstUniqChar(string s) {\\n    unordered_map<char, int> mp;\\n    int n = s.size();\\n\\n    // Count the occurrences of each character in the string and store in the map\\n    for (int i = 0; i < n; i++) {\\n        mp[s[i]]++;\\n    }\\n\\n    // Find the first unique character and return its index\\n    for (int i = 0; i < n; i++) {\\n        char key = s[i];\\n        auto temp = mp.find(key);\\n        if (temp->second == 1) {\\n            return i;\\n        }\\n    }\\n\\n    // If no unique character found, return -1\\n    return -1;\\n}\\n```\\n\\n**Time and Space Complexity Analysis:**\\nThe time complexity of this solution is O(n), where \\'n\\' is the length of the input string. We iterate through the string twice: once to count character frequencies and then to find the first unique character.\\n\\nThe space complexity is O(1) since the unordered map `mp` can store a limited number of characters (typically 26 lowercase letters) regardless of the size of the input string.\\n\\n**Conclusion:**\\nIn this article, we explored a C++ solution to find the index of the first unique character in a given string. The approach effectively uses an unordered map to count character frequencies and then identifies the first non-repeating character by iterating through the string again. This approach provides an efficient solution to the problem of finding the first unique character in a string without using nested loops or sorting, resulting in linear time complexity.",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```cpp\\nint firstUniqChar(string s) {\\n    unordered_map<char, int> mp;\\n    int n = s.size();\\n\\n    // Count the occurrences of each character in the string and store in the map\\n    for (int i = 0; i < n; i++) {\\n        mp[s[i]]++;\\n    }\\n\\n    // Find the first unique character and return its index\\n    for (int i = 0; i < n; i++) {\\n        char key = s[i];\\n        auto temp = mp.find(key);\\n        if (temp->second == 1) {\\n            return i;\\n        }\\n    }\\n\\n    // If no unique character found, return -1\\n    return -1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3529920,
                "title": "hashmap-easy-solution-with-comments-java",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        // initialze hashmap \\n        HashMap<Character, Integer> mp = new HashMap<Character, Integer>();\\n\\n        // If the character exists, its frequency is incremented by 1\\n        // If the character doesn\\'t exist in the HashMap, it is added with a frequency of 1\\n        for(int i = 0; i < s.length(); i++)\\n        {\\n            if(mp.containsKey(s.charAt(i)))\\n            {\\n                mp.put(s.charAt(i), mp.get(s.charAt(i))+1);\\n            }\\n            else\\n            {\\n                mp.put(s.charAt(i), 1);\\n            }\\n        }\\n\\n        // If the frequency is 1, it means the character is unique, else return -1\\n        for(int i = 0; i < s.length(); i++)\\n        {\\n            if(mp.get(s.charAt(i)) == 1)\\n            {\\n                return i;\\n            }\\n        }\\n\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        // initialze hashmap \\n        HashMap<Character, Integer> mp = new HashMap<Character, Integer>();\\n\\n        // If the character exists, its frequency is incremented by 1\\n        // If the character doesn\\'t exist in the HashMap, it is added with a frequency of 1\\n        for(int i = 0; i < s.length(); i++)\\n        {\\n            if(mp.containsKey(s.charAt(i)))\\n            {\\n                mp.put(s.charAt(i), mp.get(s.charAt(i))+1);\\n            }\\n            else\\n            {\\n                mp.put(s.charAt(i), 1);\\n            }\\n        }\\n\\n        // If the frequency is 1, it means the character is unique, else return -1\\n        for(int i = 0; i < s.length(); i++)\\n        {\\n            if(mp.get(s.charAt(i)) == 1)\\n            {\\n                return i;\\n            }\\n        }\\n\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3355931,
                "title": "java-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n       for(int i=0;i<s.length();i++)\\n       {\\n           int c=0;\\n           for(int j=0;j<s.length();j++)\\n           {\\n               if(i==j)\\n               continue;\\n               if(s.charAt(i)==s.charAt(j))\\n               {\\n               c++;\\n               break;\\n               }\\n           }\\n           if(c==0)\\n           return i;\\n       }\\n       return -1;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n       for(int i=0;i<s.length();i++)\\n       {\\n           int c=0;\\n           for(int j=0;j<s.length();j++)\\n           {\\n               if(i==j)\\n               continue;\\n               if(s.charAt(i)==s.charAt(j))\\n               {\\n               c++;\\n               break;\\n               }\\n           }\\n           if(c==0)\\n           return i;\\n       }\\n       return -1;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3235295,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n*n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        \\n    for (int i = 0; i < s.size(); i++)\\n    {\\n        bool found = false;\\n        if (s[i] == \\'@\\')\\n        {\\n            found=true;\\n            continue;\\n        }\\n        for (int j = i + 1; j < s.size(); j++)\\n        {\\n            if (s[i] == s[j])\\n            {\\n                found = true;\\n                s[j] = \\'@\\';\\n            }\\n        }\\n        if (found == false)\\n        {\\n            return i;\\n        }\\n    }\\n    return -1;\\n    \\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        \\n    for (int i = 0; i < s.size(); i++)\\n    {\\n        bool found = false;\\n        if (s[i] == \\'@\\')\\n        {\\n            found=true;\\n            continue;\\n        }\\n        for (int j = i + 1; j < s.size(); j++)\\n        {\\n            if (s[i] == s[j])\\n            {\\n                found = true;\\n                s[j] = \\'@\\';\\n            }\\n        }\\n        if (found == false)\\n        {\\n            return i;\\n        }\\n    }\\n    return -1;\\n    \\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3234236,
                "title": "fully-explained-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nfirst store the count of every alphabet.\\n\\nthen iterate from start and find which element count is not zero,agr mil jata hai th us element ka index return kar do,nhi th -1 return krdo\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. in a vector size array , we\\'ll store count for every alphabet.\\n2. we\\'ll return first element whose count is not 0\\n\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n =s.length();\\n        vector<int> freq(26,0);\\n\\n        for(int i=0;s[i]!=\\'\\\\0\\';++i){\\n            freq[s[i]-\\'a\\']+=1;\\n        }\\n        for(int i=0;s[i]!=\\'\\\\0\\';++i){\\n            if(freq[s[i]-\\'a\\']==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n =s.length();\\n        vector<int> freq(26,0);\\n\\n        for(int i=0;s[i]!=\\'\\\\0\\';++i){\\n            freq[s[i]-\\'a\\']+=1;\\n        }\\n        for(int i=0;s[i]!=\\'\\\\0\\';++i){\\n            if(freq[s[i]-\\'a\\']==1){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3172444,
                "title": "c-solution-map-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nRefer to the comments in the code.\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        map<char,int> mp;\\n        //map to store frequency of each character in the string\\n        for(auto i:s)\\n        {\\n            mp[i]++;\\n        }\\n        //if map[s[i]] has a value 1 then return the index.\\n        //else return -1\\n        for(int i = 0;i<s.size();i++)\\n        {\\n            if(mp.at(s[i])==1)\\n            return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        map<char,int> mp;\\n        //map to store frequency of each character in the string\\n        for(auto i:s)\\n        {\\n            mp[i]++;\\n        }\\n        //if map[s[i]] has a value 1 then return the index.\\n        //else return -1\\n        for(int i = 0;i<s.size();i++)\\n        {\\n            if(mp.at(s[i])==1)\\n            return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3158073,
                "title": "js-solution-time-and-space-complexity",
                "content": "# Intuition\\nCreate a hash map of letters \"seen\". Iterate through the map and find the first \\n\\n# Approach\\nA hash map is better application because it helps to preserve order vs. using a regular object. Iterate through the string and generate the hash map. If it is seen for the first time, set to 1, if it\\'s seen a second time or more just set it to -1. Then iterate through the hash map and find the first 1 and return the index. Return -1 if it\\'s not found.\\n\\n# Complexity\\n- Time complexity:\\nO(n): n is the length of the string s. We will need to iterate through all letters. After that we iterate through the hash map, which at most should have 26 items (26 letters in alphabet).\\n\\n- Space complexity:\\nO(1): constant because the only space we use is for our hashmap, which will have constant space due to 26 letters in our alphabet.\\n\\n# Code\\n```\\nconst firstUniqChar = (s) => {\\n    const map = new Map()\\n\\n    // build map, if not in map initialize it to 1\\n    // if it is already in the map, set to -1\\n    for(let letter of s)\\n        !map.has(letter) ? map.set(letter,1) : map.set(letter,-1)\\n\\n    // iterate through the map to find the first element with 1\\n    for (let item of map)\\n        if (item[1] === 1) return s.indexOf(item[0])\\n\\n\\n    return -1\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst firstUniqChar = (s) => {\\n    const map = new Map()\\n\\n    // build map, if not in map initialize it to 1\\n    // if it is already in the map, set to -1\\n    for(let letter of s)\\n        !map.has(letter) ? map.set(letter,1) : map.set(letter,-1)\\n\\n    // iterate through the map to find the first element with 1\\n    for (let item of map)\\n        if (item[1] === 1) return s.indexOf(item[0])\\n\\n\\n    return -1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3121907,
                "title": "java-simple-logic-solution",
                "content": "//.indexOf()-->return first occurence in this string \"index\" of that letter\\n\\n//.lastIndexOf()-->return last occurence in this string \"index\" of that letter\\n\\ncomplexity O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        for(int i=0;i<s.length();i++){\\n            char letter=s.charAt(i);\\n\\n            //if first index value is same to the last index value\\n            if(s.indexOf(letter)==s.lastIndexOf(letter)){\\n                return i;\\n            }\\n        }\\n\\n        //else return -1\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        for(int i=0;i<s.length();i++){\\n            char letter=s.charAt(i);\\n\\n            //if first index value is same to the last index value\\n            if(s.indexOf(letter)==s.lastIndexOf(letter)){\\n                return i;\\n            }\\n        }\\n\\n        //else return -1\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086070,
                "title": "easy-and-simple-first-unique-character-in-a-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in s:\\n            if s.count(i)==1:\\n                return s.index(i)\\n        else:\\n            return -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in s:\\n            if s.count(i)==1:\\n                return s.index(i)\\n        else:\\n            return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3029714,
                "title": "3-line-code-python3-easy-and-neat-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i,j in(Counter(s).items()):\\n            if j == 1: return s.index(i)\\n        return -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i,j in(Counter(s).items()):\\n            if j == 1: return s.index(i)\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2964965,
                "title": "c-code-with-notes-and-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAdd all characters and amount of times they enter into a map. keep track of how many times each char appears.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- First for loop adds items to map.\\n- second for loop finds the first occurence of \\'0\\'. Which in my case would be when a char appears only once. \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n * 2) = O(n) \\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        //put everything in a map\\n        map<char,int>mp;\\n        int ans = -1;\\n        \\n        for(auto it: s){\\n            map<char,int>::iterator iter = mp.find(it);\\n            if(iter == mp.end()){\\n                //add to map\\n                mp.emplace(it,0);\\n            }\\n            else{\\n                mp[it]++;\\n                //increment by 1 at map location\\n            }\\n        }\\n        int index = 0;\\n        for(auto it: s){\\n            map<char,int>::iterator iter = mp.find(it);\\n            if(iter->second == 0) return index;\\n            index++;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        //put everything in a map\\n        map<char,int>mp;\\n        int ans = -1;\\n        \\n        for(auto it: s){\\n            map<char,int>::iterator iter = mp.find(it);\\n            if(iter == mp.end()){\\n                //add to map\\n                mp.emplace(it,0);\\n            }\\n            else{\\n                mp[it]++;\\n                //increment by 1 at map location\\n            }\\n        }\\n        int index = 0;\\n        for(auto it: s){\\n            map<char,int>::iterator iter = mp.find(it);\\n            if(iter->second == 0) return index;\\n            index++;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2962373,
                "title": "simple-c-solution",
                "content": "```\\nint arr[256]={0};\\n        for(int i=0;i<s.size();i++)\\n        {\\n            arr[s[i]]++;\\n        }\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(arr[s[i]]==1)\\n            {\\n                return i;\\n            }\\n        }\\n        return -1;\\n```",
                "solutionTags": [
                    "Array",
                    "String"
                ],
                "code": "```\\nint arr[256]={0};\\n        for(int i=0;i<s.size();i++)\\n        {\\n            arr[s[i]]++;\\n        }\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(arr[s[i]]==1)\\n            {\\n                return i;\\n            }\\n        }\\n        return -1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2949311,
                "title": "hashing-c-simple-effective",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n\\n        unordered_map<char, int> m;\\n        for(int i = 0; i<s.length(); i++){\\n\\n            m[s[i]]++;\\n\\n            \\n        }\\n        for(int i = 0; i<s.length(); i++){\\n\\n            if(m[s[i]] == 1){\\n                return i;\\n            }\\n\\n            \\n        }\\n        return -1;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n\\n        unordered_map<char, int> m;\\n        for(int i = 0; i<s.length(); i++){\\n\\n            m[s[i]]++;\\n\\n            \\n        }\\n        for(int i = 0; i<s.length(); i++){\\n\\n            if(m[s[i]] == 1){\\n                return i;\\n            }\\n\\n            \\n        }\\n        return -1;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2934821,
                "title": "faster-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int [] a =new int[123];\\n        int i=0,r=-1;\\n        for(i=0;i<s.length();i++)\\n        a[s.charAt(i)]++;\\n        for(i=0;i<s.length();i++){\\n            if(a[s.charAt(i)]==1){\\n              r=i;\\n              break;\\n            }\\n        }\\n        return r;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n        int [] a =new int[123];\\n        int i=0,r=-1;\\n        for(i=0;i<s.length();i++)\\n        a[s.charAt(i)]++;\\n        for(i=0;i<s.length();i++){\\n            if(a[s.charAt(i)]==1){\\n              r=i;\\n              break;\\n            }\\n        }\\n        return r;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2929697,
                "title": "simply-c-with-early-return",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        vector<int> charsMemo(128, 0);\\n        for (int i = 0; i < s.size(); i++) {\\n            charsMemo[s[i]]++;\\n        }\\n\\n        for (int i = 0; i < s.size(); i++) {\\n            if (charsMemo[s[i]] == 1) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        vector<int> charsMemo(128, 0);\\n        for (int i = 0; i < s.size(); i++) {\\n            charsMemo[s[i]]++;\\n        }\\n\\n        for (int i = 0; i < s.size(); i++) {\\n            if (charsMemo[s[i]] == 1) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2895987,
                "title": "c-simple-easy-begginner-friendly-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n`` As we need to return first unique character in the string.``\\n`` So we need to store character and its frequency.``\\n \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n`` So we need to use Unorderd Map to keep the character and their frequency in ``\\n``the same order as appeared in string. ``\\n\\n# Upvote\\n`` If you find this answer helpful ``\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> m;\\n\\n        for(int i=0;i<s.length();i++)\\n        // storing how many times a character appears in order\\n        // leetcode -> l e t c o d\\n        //             1 3 1 1 1 1\\n        // first time unique character apeared is -> l in string\\n          m[s[i]]++;\\n\\n        // m[s[0]] -> s[0] = l and m[s[0]] =1\\n        // m[s[1]] -> s[1] = e and m[s[1]] =3\\n        // m[s[2]] -> s[2] = t and m[s[2]] =1\\n        // and so on\\n        for(int i=0;i<s.length();i++)\\n          {\\n              if(m[s[i]]==1)     \\n                return i;\\n          }\\n          return -1;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String",
                    "Ordered Map"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        unordered_map<char,int> m;\\n\\n        for(int i=0;i<s.length();i++)\\n        // storing how many times a character appears in order\\n        // leetcode -> l e t c o d\\n        //             1 3 1 1 1 1\\n        // first time unique character apeared is -> l in string\\n          m[s[i]]++;\\n\\n        // m[s[0]] -> s[0] = l and m[s[0]] =1\\n        // m[s[1]] -> s[1] = e and m[s[1]] =3\\n        // m[s[2]] -> s[2] = t and m[s[2]] =1\\n        // and so on\\n        for(int i=0;i<s.length();i++)\\n          {\\n              if(m[s[i]]==1)     \\n                return i;\\n          }\\n          return -1;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2848712,
                "title": "beats-99-python-easy-solution",
                "content": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        checked = set()\\n        for i in range(0, len(s)):\\n            if s[i] not in checked and s.count(s[i]) == 1:\\n                return i\\n            elif s[i] not in checked:\\n                checked.add(s[i])\\n        return -1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        checked = set()\\n        for i in range(0, len(s)):\\n            if s[i] not in checked and s.count(s[i]) == 1:\\n                return i\\n            elif s[i] not in checked:\\n                checked.add(s[i])\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2832563,
                "title": "387-easy-clear-and-classic-solution-javascript",
                "content": "# Approach\\n## Firstly, \\nHere store all chars inside obj or hash table with freq.\\n[l : 1,\\ne : 3,\\nt : 1,\\nc : 1,\\no : 1,\\nd : 1]\\n\\nfor(let ch of s) {\\n        if(!(obj[ch])) {\\n            obj[ch] = 0;\\n        }\\n        obj[ch]++;\\n    }\\n## Secondly,\\nCheck which character\\'s frequency is equal to one, so that returns the first character whose frequency is equal to one it is  index.\\n\\nThat above case:\\nl : 1, l is first character whose frequency is equal to one then, return index of l.\\n\\nfor(let i = 0; i < s.length; ++i) {\\n       if( obj[s[i]] === 1) {\\n           return i;\\n       }\\n# Complexity\\n- Time complexity:\\nO(n) linear search\\n\\n- Space complexity:\\nO(n) using obj or hash table\\n\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar firstUniqChar = function(s) {\\n    let obj = {};\\n\\n    for(let ch of s) {\\n        if(!(obj[ch])) {\\n            obj[ch] = 0;\\n        }\\n        obj[ch]++;\\n    }\\n\\n   for(let i = 0; i < s.length; ++i) {\\n       if( obj[s[i]] === 1) {\\n           return i;\\n       }\\n     \\n   }\\n    return -1;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Hash Table",
                    "String",
                    "Queue",
                    "Counting"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar firstUniqChar = function(s) {\\n    let obj = {};\\n\\n    for(let ch of s) {\\n        if(!(obj[ch])) {\\n            obj[ch] = 0;\\n        }\\n        obj[ch]++;\\n    }\\n\\n   for(let i = 0; i < s.length; ++i) {\\n       if( obj[s[i]] === 1) {\\n           return i;\\n       }\\n     \\n   }\\n    return -1;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2799992,
                "title": "simple-python-solution-with-hashmap",
                "content": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        hashmap = {}\\n        for c in s:\\n            hashmap[c] = hashmap.get(c, 0) + 1\\n        \\n        for i, c in enumerate(s):\\n            if hashmap[c] == 1:\\n                return i\\n        \\n        return -1\\n\\nTime: O(n)\\nSpace: O(n)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        hashmap = {}\\n        for c in s:\\n            hashmap[c] = hashmap.get(c, 0) + 1\\n        \\n        for i, c in enumerate(s):\\n            if hashmap[c] == 1:\\n                return i\\n        \\n        return -1\\n\\nTime: O(n)\\nSpace: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2753981,
                "title": "c-solution-76-31-time-15-40-space-used-unordered-map",
                "content": "```\\ntypedef struct {\\n    int count;\\n    int pos;\\n} id;\\n\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s);\\n};\\n/******************************************************************/\\nint Solution::firstUniqChar(string s) {\\n    unordered_map<char,id> m;\\n    unordered_map<char,id>::iterator it;\\n    int i, size = s.size(), firstIndex= INT_MAX;\\n    for (i = 0; i < size; ++i) {\\n        ++m[s[i]].count;\\n        if (m[s[i]].count == 1) {\\n            m[s[i]].pos = i;\\n        }\\n    }\\n    for (it = m.begin(); it != m.end(); ++it) {\\n        if (it->second.count == 1 && m[it->first].pos < firstIndex) {\\n            firstIndex = m[it->first].pos;\\n        }\\n    }\\n    if (firstIndex == INT_MAX) {\\n        firstIndex = -1;\\n    }\\n    return firstIndex;\\n}\\n/******************************************************************/\\n```",
                "solutionTags": [],
                "code": "```\\ntypedef struct {\\n    int count;\\n    int pos;\\n} id;\\n\\nclass Solution {\\npublic:\\n    int firstUniqChar(string s);\\n};\\n/******************************************************************/\\nint Solution::firstUniqChar(string s) {\\n    unordered_map<char,id> m;\\n    unordered_map<char,id>::iterator it;\\n    int i, size = s.size(), firstIndex= INT_MAX;\\n    for (i = 0; i < size; ++i) {\\n        ++m[s[i]].count;\\n        if (m[s[i]].count == 1) {\\n            m[s[i]].pos = i;\\n        }\\n    }\\n    for (it = m.begin(); it != m.end(); ++it) {\\n        if (it->second.count == 1 && m[it->first].pos < firstIndex) {\\n            firstIndex = m[it->first].pos;\\n        }\\n    }\\n    if (firstIndex == INT_MAX) {\\n        firstIndex = -1;\\n    }\\n    return firstIndex;\\n}\\n/******************************************************************/\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1574628,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1825445,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1690732,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1573716,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1569869,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1715544,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1782547,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1569339,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1786870,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1573994,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1574628,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1825445,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1690732,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1573716,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1569869,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1715544,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1782547,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1569339,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1786870,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 1573994,
                "content": [
                    {
                        "username": "saisathwik1999",
                        "content": "![image](https://assets.leetcode.com/users/images/0004a9df-5231-4647-b9e8-a0659deb1ae8_1606483815.2292523.png)\\nrindex returns the last occurance of that letter in the string\\nindex returns the first occurance of that letter in the string"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "nice solution"
                    },
                    {
                        "username": "gundashanmukha",
                        "content": "can any one say why this question is tagged under Queue?"
                    },
                    {
                        "username": "aparr487",
                        "content": "I think it\\'s to provide a challenge for approaching the problem with a solution that is admittedly not the default choice for most (i.e. array or HashSet (.NET)). I\\'m working through a Coding Roadmap and this was listed under the Queue module, so I forced myself to utilize a queue. I will admit, however, it took me some time to think of any good way to do so, since it is such a poor choice for the problem."
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "Haha I was also thinking the same!\\n"
                    },
                    {
                        "username": "MeetaHaldar",
                        "content": "Brute force :\\nTime complexity : O(n^2) \\nSpace complexity : O(1) \\n you can run two loop , one inside another and check weather it is present in whole string or not .\\n\\nOptimise : \\nTime complexity : O(n) \\nSpace complexity : O(1) \\nyou can use unordered_map and then search where the value is 1 and return it\\'s index else return -1"
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "unordered_map will always be O(n) bc it is dynamic. Instead you can use an array with a fixed size of 26 and do the same code by substracting 97 to get the correct index of each char in a range of 26. That will make your space complexity O(1)"
                    },
                    {
                        "username": "AhmedIbrahimHassan",
                        "content": "so how unordered_map and Space complexity : O(1)\\n ?"
                    },
                    {
                        "username": "mbur",
                        "content": "Hi,\\nLeetCode incorrectly measures performance. Please support [this topic](https://leetcode.com/discuss/interview-question/608055/Why-is-the-LeetCode-showing-incorrect-results) with upvote or comment.\\n\\nThanks"
                    },
                    {
                        "username": "geek_",
                        "content": "Check here\\n\\nhttps://thefellowprogrammer.blogspot.com/2020/05/first-unique-character-in-string.html"
                    },
                    {
                        "username": "karimomaya",
                        "content": " `\\nvar firstUniqChar = function(s) {\\n    let map = {}\\n    \\n    for(let i=0;i<s.length; i++){\\n        if(!map[s[i]]) map[s[i]] = 1;\\n        else map[s[i]]++;\\n    }\\n    for(let i=0;i<s.length; i++){\\n       if(map[s[i]] == 1) return i\\n    }\\n    return -1;\\n};\\n`"
                    },
                    {
                        "username": "superhare",
                        "content": "Guys, can anyone help take a look why my code below produce the wrong results here, while correct in IDE (pycharm)?\\n\\nfrequency = {}\\n\\n        for i in s:\\n            if i not in frequency:\\n                frequency[i] = 1\\n            else:\\n                frequency[i] +=1\\n\\n        for i in frequency:\\n            if frequency[i] == 1:\\n                return s.index(i)\\n                \\n        return -1"
                    },
                    {
                        "username": "BrodyK",
                        "content": "Ok i think i figured out the problem. On leetcode i think you have your language set to python and not python3. In older versions of python when you iterated over a dictionaries keys it wasn\\'t in the same order as they were entered so you were returning the first idx with a value of 1 that the dict iterated over rather than the first one in the string. hope that makes sense.\\n\\ntldr: swap from python to python3 on leet code"
                    },
                    {
                        "username": "Apollo1840",
                        "content": "min([s.index(char) for char in set(s) if s.count(char) == 1] or [-1])"
                    },
                    {
                        "username": "tushar_Kine",
                        "content": "First Unique Character in a String (JAVA SOLUTION)\\n\\n\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n  if(s.length() == 0)  return -1;\\n        int[] store = new int[26];\\n                for(char ch : s.toCharArray()){\\n            store[ch - \\'a\\']++;      \\n        }\\n        for(int idx = 0; idx < s.length(); idx++){\\n            if(store[s.charAt(idx) - \\'a\\'] == 1){\\n                return idx;\\n            }\\n        }\\n        return -1;     \\n    }\\n}"
                    },
                    {
                        "username": "msn_user",
                        "content": "Refer below for well-explained one pass solution in C++/Java/Python\\nhttps://www.techiedelight.com/find-first-non-repeating-character-string-one-traversal/"
                    }
                ]
            },
            {
                "id": 2074719,
                "content": [
                    {
                        "username": "itsgoyalshashank",
                        "content": "-> Start a loop \\n-> create a function \\n-> get each element through first step \\n-> check in the newly created function\\n-> return answer of function in boolean\\n-> if answer is true return that index\\n-> else if there is no unique return -1"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "Why bubble sort is always to slow :( Some tips to chceck character one by one faster ? \\n\\nclass Solution {\\n    \\n        public int firstUniqChar(String s) {\\n        char[] characters = s.toCharArray();\\n        int idx=0;\\n        for (int i = 0; i < characters.length; i++) {\\n            for (int j = 0; j < characters.length; j++) {\\n                char temp=characters[j];\\n                if(characters[i] == characters[j]){\\n                    idx++;\\n                }\\n            }if(idx==1) {\\n                return i;\\n            }\\n            idx=0;\\n        }\\n        return -1;\\n    }\\n    \\n}\\n"
                    },
                    {
                        "username": "sandeepdudi1990",
                        "content": "IN Java fastest solution O(n) T O(1) S\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n       int index = Integer.MAX_VALUE;\\n\\n        for(int i = \\'a\\' ; i <= \\'z\\'; i++){\\n           int x = s.indexOf(i);\\n           if(x != -1 && s.lastIndexOf(i) == x){\\n               index = Math.min(index, x );\\n           }\\n        }\\n        \\n        return index != Integer.MAX_VALUE?index:-1;\\n    }\\n}"
                    },
                    {
                        "username": "Shorna1",
                        "content": "what is the input of 105 test case? I don\\'t understand. It\\'s empty but says Time Limit Exceeded. Anyone else facing this problem?"
                    },
                    {
                        "username": "aparr487",
                        "content": "[@Shorna1](/Shorna1) I assume this is Python3 (disclaimer: not a language I am entirely familiar with). I just fully read your question and noticed the discrepancy with the problem\\'s Constraints, specifically \"1 <= s.length <= 10^5\". It seems faulty to me that this test case is even allowed, since s=\"\" is not. Regardless, your issue seems specific to at least Python3 and only when using Submit, rather than Run. My C# solution works without issue (I just resubmitted again to verify). It also seems the issue occurs in whatever code executes before firstUniqChar() is called, as I get nothing written to stdout (console) when using \"print(\"test\")\" as my very first line, whether using Run or Submit. All that to say, I think this test case may need to be flagged for review/removal, if possible."
                    },
                    {
                        "username": "Shorna1",
                        "content": "[@aparr487](/aparr487) \n\n        s = list(s)\n        l = len(s)\n        \n        temp = []\n        i = 0\n        output = -1\n        \n        while i < l:\n            temp = s.copy()\n            temp[i] = 0\n            if s[i] not in temp:\n                output = i\n                break\n            i += 1\n        \n        return output\n\nThis is my code. It passed all the test cases except the last one. The input of 105 no. test case is empty. Like.... \"s=\". There's no input."
                    },
                    {
                        "username": "aparr487",
                        "content": "Without a code example, it\\'s impossible to say what\\'s going on in your situation. However, it sounds like you may have an infinite loop in your logic, particularly if the input is an empty string."
                    },
                    {
                        "username": "ayushraj006",
                        "content": "d={}\\n        for i in s:\\n            d[i] = d.get(i,0)+1\\n        print((d)) \\nwhy this gives me the dict in alphabetically order can someone help me"
                    },
                    {
                        "username": "AbhiCT",
                        "content": "anyone solved this using queue ?\\n"
                    },
                    {
                        "username": "tarun22",
                        "content": "HashSet with DoublyLinked list would be a nice solution for this. Anyone implemented this in JAVA ?\\n\\n"
                    },
                    {
                        "username": "pravesh2408",
                        "content": "===  HELP NEEDED =====\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={0};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==1)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n\nAbove code works but below dont . Can someone explain please why so ?  Only difference is I am initializing vis with -1 and checking for 0 for first occurrence.\n\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={-1};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==0)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n"
                    },
                    {
                        "username": "undercover_coder",
                        "content": "When we user collections.counter the output will be displayed as all the letters with their corresponding count values.\\n#code snippet\\nl = collections.Counter(s)\\n        for i in range(len(s)):\\n            if l[s[i]] == 1:    #here it will filter all letters occurring once\\n                return i\\n        return -1\\n\\nLeetcode accepts this solution but it asks for only the first occurrence.\\nCan anyone pls answer?"
                    },
                    {
                        "username": "aayushkumarsingh2021",
                        "content": "use rindex == index in python"
                    }
                ]
            },
            {
                "id": 2068181,
                "content": [
                    {
                        "username": "itsgoyalshashank",
                        "content": "-> Start a loop \\n-> create a function \\n-> get each element through first step \\n-> check in the newly created function\\n-> return answer of function in boolean\\n-> if answer is true return that index\\n-> else if there is no unique return -1"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "Why bubble sort is always to slow :( Some tips to chceck character one by one faster ? \\n\\nclass Solution {\\n    \\n        public int firstUniqChar(String s) {\\n        char[] characters = s.toCharArray();\\n        int idx=0;\\n        for (int i = 0; i < characters.length; i++) {\\n            for (int j = 0; j < characters.length; j++) {\\n                char temp=characters[j];\\n                if(characters[i] == characters[j]){\\n                    idx++;\\n                }\\n            }if(idx==1) {\\n                return i;\\n            }\\n            idx=0;\\n        }\\n        return -1;\\n    }\\n    \\n}\\n"
                    },
                    {
                        "username": "sandeepdudi1990",
                        "content": "IN Java fastest solution O(n) T O(1) S\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n       int index = Integer.MAX_VALUE;\\n\\n        for(int i = \\'a\\' ; i <= \\'z\\'; i++){\\n           int x = s.indexOf(i);\\n           if(x != -1 && s.lastIndexOf(i) == x){\\n               index = Math.min(index, x );\\n           }\\n        }\\n        \\n        return index != Integer.MAX_VALUE?index:-1;\\n    }\\n}"
                    },
                    {
                        "username": "Shorna1",
                        "content": "what is the input of 105 test case? I don\\'t understand. It\\'s empty but says Time Limit Exceeded. Anyone else facing this problem?"
                    },
                    {
                        "username": "aparr487",
                        "content": "[@Shorna1](/Shorna1) I assume this is Python3 (disclaimer: not a language I am entirely familiar with). I just fully read your question and noticed the discrepancy with the problem\\'s Constraints, specifically \"1 <= s.length <= 10^5\". It seems faulty to me that this test case is even allowed, since s=\"\" is not. Regardless, your issue seems specific to at least Python3 and only when using Submit, rather than Run. My C# solution works without issue (I just resubmitted again to verify). It also seems the issue occurs in whatever code executes before firstUniqChar() is called, as I get nothing written to stdout (console) when using \"print(\"test\")\" as my very first line, whether using Run or Submit. All that to say, I think this test case may need to be flagged for review/removal, if possible."
                    },
                    {
                        "username": "Shorna1",
                        "content": "[@aparr487](/aparr487) \n\n        s = list(s)\n        l = len(s)\n        \n        temp = []\n        i = 0\n        output = -1\n        \n        while i < l:\n            temp = s.copy()\n            temp[i] = 0\n            if s[i] not in temp:\n                output = i\n                break\n            i += 1\n        \n        return output\n\nThis is my code. It passed all the test cases except the last one. The input of 105 no. test case is empty. Like.... \"s=\". There's no input."
                    },
                    {
                        "username": "aparr487",
                        "content": "Without a code example, it\\'s impossible to say what\\'s going on in your situation. However, it sounds like you may have an infinite loop in your logic, particularly if the input is an empty string."
                    },
                    {
                        "username": "ayushraj006",
                        "content": "d={}\\n        for i in s:\\n            d[i] = d.get(i,0)+1\\n        print((d)) \\nwhy this gives me the dict in alphabetically order can someone help me"
                    },
                    {
                        "username": "AbhiCT",
                        "content": "anyone solved this using queue ?\\n"
                    },
                    {
                        "username": "tarun22",
                        "content": "HashSet with DoublyLinked list would be a nice solution for this. Anyone implemented this in JAVA ?\\n\\n"
                    },
                    {
                        "username": "pravesh2408",
                        "content": "===  HELP NEEDED =====\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={0};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==1)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n\nAbove code works but below dont . Can someone explain please why so ?  Only difference is I am initializing vis with -1 and checking for 0 for first occurrence.\n\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={-1};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==0)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n"
                    },
                    {
                        "username": "undercover_coder",
                        "content": "When we user collections.counter the output will be displayed as all the letters with their corresponding count values.\\n#code snippet\\nl = collections.Counter(s)\\n        for i in range(len(s)):\\n            if l[s[i]] == 1:    #here it will filter all letters occurring once\\n                return i\\n        return -1\\n\\nLeetcode accepts this solution but it asks for only the first occurrence.\\nCan anyone pls answer?"
                    },
                    {
                        "username": "aayushkumarsingh2021",
                        "content": "use rindex == index in python"
                    }
                ]
            },
            {
                "id": 1968640,
                "content": [
                    {
                        "username": "itsgoyalshashank",
                        "content": "-> Start a loop \\n-> create a function \\n-> get each element through first step \\n-> check in the newly created function\\n-> return answer of function in boolean\\n-> if answer is true return that index\\n-> else if there is no unique return -1"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "Why bubble sort is always to slow :( Some tips to chceck character one by one faster ? \\n\\nclass Solution {\\n    \\n        public int firstUniqChar(String s) {\\n        char[] characters = s.toCharArray();\\n        int idx=0;\\n        for (int i = 0; i < characters.length; i++) {\\n            for (int j = 0; j < characters.length; j++) {\\n                char temp=characters[j];\\n                if(characters[i] == characters[j]){\\n                    idx++;\\n                }\\n            }if(idx==1) {\\n                return i;\\n            }\\n            idx=0;\\n        }\\n        return -1;\\n    }\\n    \\n}\\n"
                    },
                    {
                        "username": "sandeepdudi1990",
                        "content": "IN Java fastest solution O(n) T O(1) S\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n       int index = Integer.MAX_VALUE;\\n\\n        for(int i = \\'a\\' ; i <= \\'z\\'; i++){\\n           int x = s.indexOf(i);\\n           if(x != -1 && s.lastIndexOf(i) == x){\\n               index = Math.min(index, x );\\n           }\\n        }\\n        \\n        return index != Integer.MAX_VALUE?index:-1;\\n    }\\n}"
                    },
                    {
                        "username": "Shorna1",
                        "content": "what is the input of 105 test case? I don\\'t understand. It\\'s empty but says Time Limit Exceeded. Anyone else facing this problem?"
                    },
                    {
                        "username": "aparr487",
                        "content": "[@Shorna1](/Shorna1) I assume this is Python3 (disclaimer: not a language I am entirely familiar with). I just fully read your question and noticed the discrepancy with the problem\\'s Constraints, specifically \"1 <= s.length <= 10^5\". It seems faulty to me that this test case is even allowed, since s=\"\" is not. Regardless, your issue seems specific to at least Python3 and only when using Submit, rather than Run. My C# solution works without issue (I just resubmitted again to verify). It also seems the issue occurs in whatever code executes before firstUniqChar() is called, as I get nothing written to stdout (console) when using \"print(\"test\")\" as my very first line, whether using Run or Submit. All that to say, I think this test case may need to be flagged for review/removal, if possible."
                    },
                    {
                        "username": "Shorna1",
                        "content": "[@aparr487](/aparr487) \n\n        s = list(s)\n        l = len(s)\n        \n        temp = []\n        i = 0\n        output = -1\n        \n        while i < l:\n            temp = s.copy()\n            temp[i] = 0\n            if s[i] not in temp:\n                output = i\n                break\n            i += 1\n        \n        return output\n\nThis is my code. It passed all the test cases except the last one. The input of 105 no. test case is empty. Like.... \"s=\". There's no input."
                    },
                    {
                        "username": "aparr487",
                        "content": "Without a code example, it\\'s impossible to say what\\'s going on in your situation. However, it sounds like you may have an infinite loop in your logic, particularly if the input is an empty string."
                    },
                    {
                        "username": "ayushraj006",
                        "content": "d={}\\n        for i in s:\\n            d[i] = d.get(i,0)+1\\n        print((d)) \\nwhy this gives me the dict in alphabetically order can someone help me"
                    },
                    {
                        "username": "AbhiCT",
                        "content": "anyone solved this using queue ?\\n"
                    },
                    {
                        "username": "tarun22",
                        "content": "HashSet with DoublyLinked list would be a nice solution for this. Anyone implemented this in JAVA ?\\n\\n"
                    },
                    {
                        "username": "pravesh2408",
                        "content": "===  HELP NEEDED =====\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={0};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==1)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n\nAbove code works but below dont . Can someone explain please why so ?  Only difference is I am initializing vis with -1 and checking for 0 for first occurrence.\n\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={-1};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==0)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n"
                    },
                    {
                        "username": "undercover_coder",
                        "content": "When we user collections.counter the output will be displayed as all the letters with their corresponding count values.\\n#code snippet\\nl = collections.Counter(s)\\n        for i in range(len(s)):\\n            if l[s[i]] == 1:    #here it will filter all letters occurring once\\n                return i\\n        return -1\\n\\nLeetcode accepts this solution but it asks for only the first occurrence.\\nCan anyone pls answer?"
                    },
                    {
                        "username": "aayushkumarsingh2021",
                        "content": "use rindex == index in python"
                    }
                ]
            },
            {
                "id": 1906991,
                "content": [
                    {
                        "username": "itsgoyalshashank",
                        "content": "-> Start a loop \\n-> create a function \\n-> get each element through first step \\n-> check in the newly created function\\n-> return answer of function in boolean\\n-> if answer is true return that index\\n-> else if there is no unique return -1"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "Why bubble sort is always to slow :( Some tips to chceck character one by one faster ? \\n\\nclass Solution {\\n    \\n        public int firstUniqChar(String s) {\\n        char[] characters = s.toCharArray();\\n        int idx=0;\\n        for (int i = 0; i < characters.length; i++) {\\n            for (int j = 0; j < characters.length; j++) {\\n                char temp=characters[j];\\n                if(characters[i] == characters[j]){\\n                    idx++;\\n                }\\n            }if(idx==1) {\\n                return i;\\n            }\\n            idx=0;\\n        }\\n        return -1;\\n    }\\n    \\n}\\n"
                    },
                    {
                        "username": "sandeepdudi1990",
                        "content": "IN Java fastest solution O(n) T O(1) S\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n       int index = Integer.MAX_VALUE;\\n\\n        for(int i = \\'a\\' ; i <= \\'z\\'; i++){\\n           int x = s.indexOf(i);\\n           if(x != -1 && s.lastIndexOf(i) == x){\\n               index = Math.min(index, x );\\n           }\\n        }\\n        \\n        return index != Integer.MAX_VALUE?index:-1;\\n    }\\n}"
                    },
                    {
                        "username": "Shorna1",
                        "content": "what is the input of 105 test case? I don\\'t understand. It\\'s empty but says Time Limit Exceeded. Anyone else facing this problem?"
                    },
                    {
                        "username": "aparr487",
                        "content": "[@Shorna1](/Shorna1) I assume this is Python3 (disclaimer: not a language I am entirely familiar with). I just fully read your question and noticed the discrepancy with the problem\\'s Constraints, specifically \"1 <= s.length <= 10^5\". It seems faulty to me that this test case is even allowed, since s=\"\" is not. Regardless, your issue seems specific to at least Python3 and only when using Submit, rather than Run. My C# solution works without issue (I just resubmitted again to verify). It also seems the issue occurs in whatever code executes before firstUniqChar() is called, as I get nothing written to stdout (console) when using \"print(\"test\")\" as my very first line, whether using Run or Submit. All that to say, I think this test case may need to be flagged for review/removal, if possible."
                    },
                    {
                        "username": "Shorna1",
                        "content": "[@aparr487](/aparr487) \n\n        s = list(s)\n        l = len(s)\n        \n        temp = []\n        i = 0\n        output = -1\n        \n        while i < l:\n            temp = s.copy()\n            temp[i] = 0\n            if s[i] not in temp:\n                output = i\n                break\n            i += 1\n        \n        return output\n\nThis is my code. It passed all the test cases except the last one. The input of 105 no. test case is empty. Like.... \"s=\". There's no input."
                    },
                    {
                        "username": "aparr487",
                        "content": "Without a code example, it\\'s impossible to say what\\'s going on in your situation. However, it sounds like you may have an infinite loop in your logic, particularly if the input is an empty string."
                    },
                    {
                        "username": "ayushraj006",
                        "content": "d={}\\n        for i in s:\\n            d[i] = d.get(i,0)+1\\n        print((d)) \\nwhy this gives me the dict in alphabetically order can someone help me"
                    },
                    {
                        "username": "AbhiCT",
                        "content": "anyone solved this using queue ?\\n"
                    },
                    {
                        "username": "tarun22",
                        "content": "HashSet with DoublyLinked list would be a nice solution for this. Anyone implemented this in JAVA ?\\n\\n"
                    },
                    {
                        "username": "pravesh2408",
                        "content": "===  HELP NEEDED =====\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={0};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==1)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n\nAbove code works but below dont . Can someone explain please why so ?  Only difference is I am initializing vis with -1 and checking for 0 for first occurrence.\n\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={-1};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==0)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n"
                    },
                    {
                        "username": "undercover_coder",
                        "content": "When we user collections.counter the output will be displayed as all the letters with their corresponding count values.\\n#code snippet\\nl = collections.Counter(s)\\n        for i in range(len(s)):\\n            if l[s[i]] == 1:    #here it will filter all letters occurring once\\n                return i\\n        return -1\\n\\nLeetcode accepts this solution but it asks for only the first occurrence.\\nCan anyone pls answer?"
                    },
                    {
                        "username": "aayushkumarsingh2021",
                        "content": "use rindex == index in python"
                    }
                ]
            },
            {
                "id": 1906281,
                "content": [
                    {
                        "username": "itsgoyalshashank",
                        "content": "-> Start a loop \\n-> create a function \\n-> get each element through first step \\n-> check in the newly created function\\n-> return answer of function in boolean\\n-> if answer is true return that index\\n-> else if there is no unique return -1"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "Why bubble sort is always to slow :( Some tips to chceck character one by one faster ? \\n\\nclass Solution {\\n    \\n        public int firstUniqChar(String s) {\\n        char[] characters = s.toCharArray();\\n        int idx=0;\\n        for (int i = 0; i < characters.length; i++) {\\n            for (int j = 0; j < characters.length; j++) {\\n                char temp=characters[j];\\n                if(characters[i] == characters[j]){\\n                    idx++;\\n                }\\n            }if(idx==1) {\\n                return i;\\n            }\\n            idx=0;\\n        }\\n        return -1;\\n    }\\n    \\n}\\n"
                    },
                    {
                        "username": "sandeepdudi1990",
                        "content": "IN Java fastest solution O(n) T O(1) S\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n       int index = Integer.MAX_VALUE;\\n\\n        for(int i = \\'a\\' ; i <= \\'z\\'; i++){\\n           int x = s.indexOf(i);\\n           if(x != -1 && s.lastIndexOf(i) == x){\\n               index = Math.min(index, x );\\n           }\\n        }\\n        \\n        return index != Integer.MAX_VALUE?index:-1;\\n    }\\n}"
                    },
                    {
                        "username": "Shorna1",
                        "content": "what is the input of 105 test case? I don\\'t understand. It\\'s empty but says Time Limit Exceeded. Anyone else facing this problem?"
                    },
                    {
                        "username": "aparr487",
                        "content": "[@Shorna1](/Shorna1) I assume this is Python3 (disclaimer: not a language I am entirely familiar with). I just fully read your question and noticed the discrepancy with the problem\\'s Constraints, specifically \"1 <= s.length <= 10^5\". It seems faulty to me that this test case is even allowed, since s=\"\" is not. Regardless, your issue seems specific to at least Python3 and only when using Submit, rather than Run. My C# solution works without issue (I just resubmitted again to verify). It also seems the issue occurs in whatever code executes before firstUniqChar() is called, as I get nothing written to stdout (console) when using \"print(\"test\")\" as my very first line, whether using Run or Submit. All that to say, I think this test case may need to be flagged for review/removal, if possible."
                    },
                    {
                        "username": "Shorna1",
                        "content": "[@aparr487](/aparr487) \n\n        s = list(s)\n        l = len(s)\n        \n        temp = []\n        i = 0\n        output = -1\n        \n        while i < l:\n            temp = s.copy()\n            temp[i] = 0\n            if s[i] not in temp:\n                output = i\n                break\n            i += 1\n        \n        return output\n\nThis is my code. It passed all the test cases except the last one. The input of 105 no. test case is empty. Like.... \"s=\". There's no input."
                    },
                    {
                        "username": "aparr487",
                        "content": "Without a code example, it\\'s impossible to say what\\'s going on in your situation. However, it sounds like you may have an infinite loop in your logic, particularly if the input is an empty string."
                    },
                    {
                        "username": "ayushraj006",
                        "content": "d={}\\n        for i in s:\\n            d[i] = d.get(i,0)+1\\n        print((d)) \\nwhy this gives me the dict in alphabetically order can someone help me"
                    },
                    {
                        "username": "AbhiCT",
                        "content": "anyone solved this using queue ?\\n"
                    },
                    {
                        "username": "tarun22",
                        "content": "HashSet with DoublyLinked list would be a nice solution for this. Anyone implemented this in JAVA ?\\n\\n"
                    },
                    {
                        "username": "pravesh2408",
                        "content": "===  HELP NEEDED =====\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={0};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==1)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n\nAbove code works but below dont . Can someone explain please why so ?  Only difference is I am initializing vis with -1 and checking for 0 for first occurrence.\n\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={-1};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==0)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n"
                    },
                    {
                        "username": "undercover_coder",
                        "content": "When we user collections.counter the output will be displayed as all the letters with their corresponding count values.\\n#code snippet\\nl = collections.Counter(s)\\n        for i in range(len(s)):\\n            if l[s[i]] == 1:    #here it will filter all letters occurring once\\n                return i\\n        return -1\\n\\nLeetcode accepts this solution but it asks for only the first occurrence.\\nCan anyone pls answer?"
                    },
                    {
                        "username": "aayushkumarsingh2021",
                        "content": "use rindex == index in python"
                    }
                ]
            },
            {
                "id": 1859537,
                "content": [
                    {
                        "username": "itsgoyalshashank",
                        "content": "-> Start a loop \\n-> create a function \\n-> get each element through first step \\n-> check in the newly created function\\n-> return answer of function in boolean\\n-> if answer is true return that index\\n-> else if there is no unique return -1"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "Why bubble sort is always to slow :( Some tips to chceck character one by one faster ? \\n\\nclass Solution {\\n    \\n        public int firstUniqChar(String s) {\\n        char[] characters = s.toCharArray();\\n        int idx=0;\\n        for (int i = 0; i < characters.length; i++) {\\n            for (int j = 0; j < characters.length; j++) {\\n                char temp=characters[j];\\n                if(characters[i] == characters[j]){\\n                    idx++;\\n                }\\n            }if(idx==1) {\\n                return i;\\n            }\\n            idx=0;\\n        }\\n        return -1;\\n    }\\n    \\n}\\n"
                    },
                    {
                        "username": "sandeepdudi1990",
                        "content": "IN Java fastest solution O(n) T O(1) S\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n       int index = Integer.MAX_VALUE;\\n\\n        for(int i = \\'a\\' ; i <= \\'z\\'; i++){\\n           int x = s.indexOf(i);\\n           if(x != -1 && s.lastIndexOf(i) == x){\\n               index = Math.min(index, x );\\n           }\\n        }\\n        \\n        return index != Integer.MAX_VALUE?index:-1;\\n    }\\n}"
                    },
                    {
                        "username": "Shorna1",
                        "content": "what is the input of 105 test case? I don\\'t understand. It\\'s empty but says Time Limit Exceeded. Anyone else facing this problem?"
                    },
                    {
                        "username": "aparr487",
                        "content": "[@Shorna1](/Shorna1) I assume this is Python3 (disclaimer: not a language I am entirely familiar with). I just fully read your question and noticed the discrepancy with the problem\\'s Constraints, specifically \"1 <= s.length <= 10^5\". It seems faulty to me that this test case is even allowed, since s=\"\" is not. Regardless, your issue seems specific to at least Python3 and only when using Submit, rather than Run. My C# solution works without issue (I just resubmitted again to verify). It also seems the issue occurs in whatever code executes before firstUniqChar() is called, as I get nothing written to stdout (console) when using \"print(\"test\")\" as my very first line, whether using Run or Submit. All that to say, I think this test case may need to be flagged for review/removal, if possible."
                    },
                    {
                        "username": "Shorna1",
                        "content": "[@aparr487](/aparr487) \n\n        s = list(s)\n        l = len(s)\n        \n        temp = []\n        i = 0\n        output = -1\n        \n        while i < l:\n            temp = s.copy()\n            temp[i] = 0\n            if s[i] not in temp:\n                output = i\n                break\n            i += 1\n        \n        return output\n\nThis is my code. It passed all the test cases except the last one. The input of 105 no. test case is empty. Like.... \"s=\". There's no input."
                    },
                    {
                        "username": "aparr487",
                        "content": "Without a code example, it\\'s impossible to say what\\'s going on in your situation. However, it sounds like you may have an infinite loop in your logic, particularly if the input is an empty string."
                    },
                    {
                        "username": "ayushraj006",
                        "content": "d={}\\n        for i in s:\\n            d[i] = d.get(i,0)+1\\n        print((d)) \\nwhy this gives me the dict in alphabetically order can someone help me"
                    },
                    {
                        "username": "AbhiCT",
                        "content": "anyone solved this using queue ?\\n"
                    },
                    {
                        "username": "tarun22",
                        "content": "HashSet with DoublyLinked list would be a nice solution for this. Anyone implemented this in JAVA ?\\n\\n"
                    },
                    {
                        "username": "pravesh2408",
                        "content": "===  HELP NEEDED =====\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={0};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==1)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n\nAbove code works but below dont . Can someone explain please why so ?  Only difference is I am initializing vis with -1 and checking for 0 for first occurrence.\n\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={-1};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==0)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n"
                    },
                    {
                        "username": "undercover_coder",
                        "content": "When we user collections.counter the output will be displayed as all the letters with their corresponding count values.\\n#code snippet\\nl = collections.Counter(s)\\n        for i in range(len(s)):\\n            if l[s[i]] == 1:    #here it will filter all letters occurring once\\n                return i\\n        return -1\\n\\nLeetcode accepts this solution but it asks for only the first occurrence.\\nCan anyone pls answer?"
                    },
                    {
                        "username": "aayushkumarsingh2021",
                        "content": "use rindex == index in python"
                    }
                ]
            },
            {
                "id": 1857567,
                "content": [
                    {
                        "username": "itsgoyalshashank",
                        "content": "-> Start a loop \\n-> create a function \\n-> get each element through first step \\n-> check in the newly created function\\n-> return answer of function in boolean\\n-> if answer is true return that index\\n-> else if there is no unique return -1"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "Why bubble sort is always to slow :( Some tips to chceck character one by one faster ? \\n\\nclass Solution {\\n    \\n        public int firstUniqChar(String s) {\\n        char[] characters = s.toCharArray();\\n        int idx=0;\\n        for (int i = 0; i < characters.length; i++) {\\n            for (int j = 0; j < characters.length; j++) {\\n                char temp=characters[j];\\n                if(characters[i] == characters[j]){\\n                    idx++;\\n                }\\n            }if(idx==1) {\\n                return i;\\n            }\\n            idx=0;\\n        }\\n        return -1;\\n    }\\n    \\n}\\n"
                    },
                    {
                        "username": "sandeepdudi1990",
                        "content": "IN Java fastest solution O(n) T O(1) S\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n       int index = Integer.MAX_VALUE;\\n\\n        for(int i = \\'a\\' ; i <= \\'z\\'; i++){\\n           int x = s.indexOf(i);\\n           if(x != -1 && s.lastIndexOf(i) == x){\\n               index = Math.min(index, x );\\n           }\\n        }\\n        \\n        return index != Integer.MAX_VALUE?index:-1;\\n    }\\n}"
                    },
                    {
                        "username": "Shorna1",
                        "content": "what is the input of 105 test case? I don\\'t understand. It\\'s empty but says Time Limit Exceeded. Anyone else facing this problem?"
                    },
                    {
                        "username": "aparr487",
                        "content": "[@Shorna1](/Shorna1) I assume this is Python3 (disclaimer: not a language I am entirely familiar with). I just fully read your question and noticed the discrepancy with the problem\\'s Constraints, specifically \"1 <= s.length <= 10^5\". It seems faulty to me that this test case is even allowed, since s=\"\" is not. Regardless, your issue seems specific to at least Python3 and only when using Submit, rather than Run. My C# solution works without issue (I just resubmitted again to verify). It also seems the issue occurs in whatever code executes before firstUniqChar() is called, as I get nothing written to stdout (console) when using \"print(\"test\")\" as my very first line, whether using Run or Submit. All that to say, I think this test case may need to be flagged for review/removal, if possible."
                    },
                    {
                        "username": "Shorna1",
                        "content": "[@aparr487](/aparr487) \n\n        s = list(s)\n        l = len(s)\n        \n        temp = []\n        i = 0\n        output = -1\n        \n        while i < l:\n            temp = s.copy()\n            temp[i] = 0\n            if s[i] not in temp:\n                output = i\n                break\n            i += 1\n        \n        return output\n\nThis is my code. It passed all the test cases except the last one. The input of 105 no. test case is empty. Like.... \"s=\". There's no input."
                    },
                    {
                        "username": "aparr487",
                        "content": "Without a code example, it\\'s impossible to say what\\'s going on in your situation. However, it sounds like you may have an infinite loop in your logic, particularly if the input is an empty string."
                    },
                    {
                        "username": "ayushraj006",
                        "content": "d={}\\n        for i in s:\\n            d[i] = d.get(i,0)+1\\n        print((d)) \\nwhy this gives me the dict in alphabetically order can someone help me"
                    },
                    {
                        "username": "AbhiCT",
                        "content": "anyone solved this using queue ?\\n"
                    },
                    {
                        "username": "tarun22",
                        "content": "HashSet with DoublyLinked list would be a nice solution for this. Anyone implemented this in JAVA ?\\n\\n"
                    },
                    {
                        "username": "pravesh2408",
                        "content": "===  HELP NEEDED =====\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={0};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==1)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n\nAbove code works but below dont . Can someone explain please why so ?  Only difference is I am initializing vis with -1 and checking for 0 for first occurrence.\n\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={-1};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==0)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n"
                    },
                    {
                        "username": "undercover_coder",
                        "content": "When we user collections.counter the output will be displayed as all the letters with their corresponding count values.\\n#code snippet\\nl = collections.Counter(s)\\n        for i in range(len(s)):\\n            if l[s[i]] == 1:    #here it will filter all letters occurring once\\n                return i\\n        return -1\\n\\nLeetcode accepts this solution but it asks for only the first occurrence.\\nCan anyone pls answer?"
                    },
                    {
                        "username": "aayushkumarsingh2021",
                        "content": "use rindex == index in python"
                    }
                ]
            },
            {
                "id": 1806939,
                "content": [
                    {
                        "username": "itsgoyalshashank",
                        "content": "-> Start a loop \\n-> create a function \\n-> get each element through first step \\n-> check in the newly created function\\n-> return answer of function in boolean\\n-> if answer is true return that index\\n-> else if there is no unique return -1"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "Why bubble sort is always to slow :( Some tips to chceck character one by one faster ? \\n\\nclass Solution {\\n    \\n        public int firstUniqChar(String s) {\\n        char[] characters = s.toCharArray();\\n        int idx=0;\\n        for (int i = 0; i < characters.length; i++) {\\n            for (int j = 0; j < characters.length; j++) {\\n                char temp=characters[j];\\n                if(characters[i] == characters[j]){\\n                    idx++;\\n                }\\n            }if(idx==1) {\\n                return i;\\n            }\\n            idx=0;\\n        }\\n        return -1;\\n    }\\n    \\n}\\n"
                    },
                    {
                        "username": "sandeepdudi1990",
                        "content": "IN Java fastest solution O(n) T O(1) S\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n       int index = Integer.MAX_VALUE;\\n\\n        for(int i = \\'a\\' ; i <= \\'z\\'; i++){\\n           int x = s.indexOf(i);\\n           if(x != -1 && s.lastIndexOf(i) == x){\\n               index = Math.min(index, x );\\n           }\\n        }\\n        \\n        return index != Integer.MAX_VALUE?index:-1;\\n    }\\n}"
                    },
                    {
                        "username": "Shorna1",
                        "content": "what is the input of 105 test case? I don\\'t understand. It\\'s empty but says Time Limit Exceeded. Anyone else facing this problem?"
                    },
                    {
                        "username": "aparr487",
                        "content": "[@Shorna1](/Shorna1) I assume this is Python3 (disclaimer: not a language I am entirely familiar with). I just fully read your question and noticed the discrepancy with the problem\\'s Constraints, specifically \"1 <= s.length <= 10^5\". It seems faulty to me that this test case is even allowed, since s=\"\" is not. Regardless, your issue seems specific to at least Python3 and only when using Submit, rather than Run. My C# solution works without issue (I just resubmitted again to verify). It also seems the issue occurs in whatever code executes before firstUniqChar() is called, as I get nothing written to stdout (console) when using \"print(\"test\")\" as my very first line, whether using Run or Submit. All that to say, I think this test case may need to be flagged for review/removal, if possible."
                    },
                    {
                        "username": "Shorna1",
                        "content": "[@aparr487](/aparr487) \n\n        s = list(s)\n        l = len(s)\n        \n        temp = []\n        i = 0\n        output = -1\n        \n        while i < l:\n            temp = s.copy()\n            temp[i] = 0\n            if s[i] not in temp:\n                output = i\n                break\n            i += 1\n        \n        return output\n\nThis is my code. It passed all the test cases except the last one. The input of 105 no. test case is empty. Like.... \"s=\". There's no input."
                    },
                    {
                        "username": "aparr487",
                        "content": "Without a code example, it\\'s impossible to say what\\'s going on in your situation. However, it sounds like you may have an infinite loop in your logic, particularly if the input is an empty string."
                    },
                    {
                        "username": "ayushraj006",
                        "content": "d={}\\n        for i in s:\\n            d[i] = d.get(i,0)+1\\n        print((d)) \\nwhy this gives me the dict in alphabetically order can someone help me"
                    },
                    {
                        "username": "AbhiCT",
                        "content": "anyone solved this using queue ?\\n"
                    },
                    {
                        "username": "tarun22",
                        "content": "HashSet with DoublyLinked list would be a nice solution for this. Anyone implemented this in JAVA ?\\n\\n"
                    },
                    {
                        "username": "pravesh2408",
                        "content": "===  HELP NEEDED =====\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={0};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==1)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n\nAbove code works but below dont . Can someone explain please why so ?  Only difference is I am initializing vis with -1 and checking for 0 for first occurrence.\n\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={-1};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==0)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n"
                    },
                    {
                        "username": "undercover_coder",
                        "content": "When we user collections.counter the output will be displayed as all the letters with their corresponding count values.\\n#code snippet\\nl = collections.Counter(s)\\n        for i in range(len(s)):\\n            if l[s[i]] == 1:    #here it will filter all letters occurring once\\n                return i\\n        return -1\\n\\nLeetcode accepts this solution but it asks for only the first occurrence.\\nCan anyone pls answer?"
                    },
                    {
                        "username": "aayushkumarsingh2021",
                        "content": "use rindex == index in python"
                    }
                ]
            },
            {
                "id": 1793776,
                "content": [
                    {
                        "username": "itsgoyalshashank",
                        "content": "-> Start a loop \\n-> create a function \\n-> get each element through first step \\n-> check in the newly created function\\n-> return answer of function in boolean\\n-> if answer is true return that index\\n-> else if there is no unique return -1"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "Why bubble sort is always to slow :( Some tips to chceck character one by one faster ? \\n\\nclass Solution {\\n    \\n        public int firstUniqChar(String s) {\\n        char[] characters = s.toCharArray();\\n        int idx=0;\\n        for (int i = 0; i < characters.length; i++) {\\n            for (int j = 0; j < characters.length; j++) {\\n                char temp=characters[j];\\n                if(characters[i] == characters[j]){\\n                    idx++;\\n                }\\n            }if(idx==1) {\\n                return i;\\n            }\\n            idx=0;\\n        }\\n        return -1;\\n    }\\n    \\n}\\n"
                    },
                    {
                        "username": "sandeepdudi1990",
                        "content": "IN Java fastest solution O(n) T O(1) S\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n       int index = Integer.MAX_VALUE;\\n\\n        for(int i = \\'a\\' ; i <= \\'z\\'; i++){\\n           int x = s.indexOf(i);\\n           if(x != -1 && s.lastIndexOf(i) == x){\\n               index = Math.min(index, x );\\n           }\\n        }\\n        \\n        return index != Integer.MAX_VALUE?index:-1;\\n    }\\n}"
                    },
                    {
                        "username": "Shorna1",
                        "content": "what is the input of 105 test case? I don\\'t understand. It\\'s empty but says Time Limit Exceeded. Anyone else facing this problem?"
                    },
                    {
                        "username": "aparr487",
                        "content": "[@Shorna1](/Shorna1) I assume this is Python3 (disclaimer: not a language I am entirely familiar with). I just fully read your question and noticed the discrepancy with the problem\\'s Constraints, specifically \"1 <= s.length <= 10^5\". It seems faulty to me that this test case is even allowed, since s=\"\" is not. Regardless, your issue seems specific to at least Python3 and only when using Submit, rather than Run. My C# solution works without issue (I just resubmitted again to verify). It also seems the issue occurs in whatever code executes before firstUniqChar() is called, as I get nothing written to stdout (console) when using \"print(\"test\")\" as my very first line, whether using Run or Submit. All that to say, I think this test case may need to be flagged for review/removal, if possible."
                    },
                    {
                        "username": "Shorna1",
                        "content": "[@aparr487](/aparr487) \n\n        s = list(s)\n        l = len(s)\n        \n        temp = []\n        i = 0\n        output = -1\n        \n        while i < l:\n            temp = s.copy()\n            temp[i] = 0\n            if s[i] not in temp:\n                output = i\n                break\n            i += 1\n        \n        return output\n\nThis is my code. It passed all the test cases except the last one. The input of 105 no. test case is empty. Like.... \"s=\". There's no input."
                    },
                    {
                        "username": "aparr487",
                        "content": "Without a code example, it\\'s impossible to say what\\'s going on in your situation. However, it sounds like you may have an infinite loop in your logic, particularly if the input is an empty string."
                    },
                    {
                        "username": "ayushraj006",
                        "content": "d={}\\n        for i in s:\\n            d[i] = d.get(i,0)+1\\n        print((d)) \\nwhy this gives me the dict in alphabetically order can someone help me"
                    },
                    {
                        "username": "AbhiCT",
                        "content": "anyone solved this using queue ?\\n"
                    },
                    {
                        "username": "tarun22",
                        "content": "HashSet with DoublyLinked list would be a nice solution for this. Anyone implemented this in JAVA ?\\n\\n"
                    },
                    {
                        "username": "pravesh2408",
                        "content": "===  HELP NEEDED =====\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={0};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==1)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n\nAbove code works but below dont . Can someone explain please why so ?  Only difference is I am initializing vis with -1 and checking for 0 for first occurrence.\n\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={-1};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==0)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n"
                    },
                    {
                        "username": "undercover_coder",
                        "content": "When we user collections.counter the output will be displayed as all the letters with their corresponding count values.\\n#code snippet\\nl = collections.Counter(s)\\n        for i in range(len(s)):\\n            if l[s[i]] == 1:    #here it will filter all letters occurring once\\n                return i\\n        return -1\\n\\nLeetcode accepts this solution but it asks for only the first occurrence.\\nCan anyone pls answer?"
                    },
                    {
                        "username": "aayushkumarsingh2021",
                        "content": "use rindex == index in python"
                    }
                ]
            },
            {
                "id": 1780979,
                "content": [
                    {
                        "username": "itsgoyalshashank",
                        "content": "-> Start a loop \\n-> create a function \\n-> get each element through first step \\n-> check in the newly created function\\n-> return answer of function in boolean\\n-> if answer is true return that index\\n-> else if there is no unique return -1"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "Why bubble sort is always to slow :( Some tips to chceck character one by one faster ? \\n\\nclass Solution {\\n    \\n        public int firstUniqChar(String s) {\\n        char[] characters = s.toCharArray();\\n        int idx=0;\\n        for (int i = 0; i < characters.length; i++) {\\n            for (int j = 0; j < characters.length; j++) {\\n                char temp=characters[j];\\n                if(characters[i] == characters[j]){\\n                    idx++;\\n                }\\n            }if(idx==1) {\\n                return i;\\n            }\\n            idx=0;\\n        }\\n        return -1;\\n    }\\n    \\n}\\n"
                    },
                    {
                        "username": "sandeepdudi1990",
                        "content": "IN Java fastest solution O(n) T O(1) S\\n\\nclass Solution {\\n    public int firstUniqChar(String s) {\\n       int index = Integer.MAX_VALUE;\\n\\n        for(int i = \\'a\\' ; i <= \\'z\\'; i++){\\n           int x = s.indexOf(i);\\n           if(x != -1 && s.lastIndexOf(i) == x){\\n               index = Math.min(index, x );\\n           }\\n        }\\n        \\n        return index != Integer.MAX_VALUE?index:-1;\\n    }\\n}"
                    },
                    {
                        "username": "Shorna1",
                        "content": "what is the input of 105 test case? I don\\'t understand. It\\'s empty but says Time Limit Exceeded. Anyone else facing this problem?"
                    },
                    {
                        "username": "aparr487",
                        "content": "[@Shorna1](/Shorna1) I assume this is Python3 (disclaimer: not a language I am entirely familiar with). I just fully read your question and noticed the discrepancy with the problem\\'s Constraints, specifically \"1 <= s.length <= 10^5\". It seems faulty to me that this test case is even allowed, since s=\"\" is not. Regardless, your issue seems specific to at least Python3 and only when using Submit, rather than Run. My C# solution works without issue (I just resubmitted again to verify). It also seems the issue occurs in whatever code executes before firstUniqChar() is called, as I get nothing written to stdout (console) when using \"print(\"test\")\" as my very first line, whether using Run or Submit. All that to say, I think this test case may need to be flagged for review/removal, if possible."
                    },
                    {
                        "username": "Shorna1",
                        "content": "[@aparr487](/aparr487) \n\n        s = list(s)\n        l = len(s)\n        \n        temp = []\n        i = 0\n        output = -1\n        \n        while i < l:\n            temp = s.copy()\n            temp[i] = 0\n            if s[i] not in temp:\n                output = i\n                break\n            i += 1\n        \n        return output\n\nThis is my code. It passed all the test cases except the last one. The input of 105 no. test case is empty. Like.... \"s=\". There's no input."
                    },
                    {
                        "username": "aparr487",
                        "content": "Without a code example, it\\'s impossible to say what\\'s going on in your situation. However, it sounds like you may have an infinite loop in your logic, particularly if the input is an empty string."
                    },
                    {
                        "username": "ayushraj006",
                        "content": "d={}\\n        for i in s:\\n            d[i] = d.get(i,0)+1\\n        print((d)) \\nwhy this gives me the dict in alphabetically order can someone help me"
                    },
                    {
                        "username": "AbhiCT",
                        "content": "anyone solved this using queue ?\\n"
                    },
                    {
                        "username": "tarun22",
                        "content": "HashSet with DoublyLinked list would be a nice solution for this. Anyone implemented this in JAVA ?\\n\\n"
                    },
                    {
                        "username": "pravesh2408",
                        "content": "===  HELP NEEDED =====\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={0};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==1)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n\nAbove code works but below dont . Can someone explain please why so ?  Only difference is I am initializing vis with -1 and checking for 0 for first occurrence.\n\n\n int n=s.size();\n    int prev=0;\n    int vis[26]={-1};\n    for(int i=0;i<n;i++)\n    {\n          ++vis[s[i]-'a'];\n    }\n    int res=-1;\n    for(int i=0;i<n;i++)\n    {\n        \n        if(vis[s[i]-'a']==0)\n           { \n               res= i;\n               break;\n            }\n\n    }\n    return res;\n"
                    },
                    {
                        "username": "undercover_coder",
                        "content": "When we user collections.counter the output will be displayed as all the letters with their corresponding count values.\\n#code snippet\\nl = collections.Counter(s)\\n        for i in range(len(s)):\\n            if l[s[i]] == 1:    #here it will filter all letters occurring once\\n                return i\\n        return -1\\n\\nLeetcode accepts this solution but it asks for only the first occurrence.\\nCan anyone pls answer?"
                    },
                    {
                        "username": "aayushkumarsingh2021",
                        "content": "use rindex == index in python"
                    }
                ]
            },
            {
                "id": 1771404,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "visheshNITS",
                        "content": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.length();\\n        unordered_map<char,int>h;\\n        for(int i=0;i<n;i++)\\n        h[s[i]]++;\\n        vector<char>v;\\n        for(auto e:h)\\n        if(e.second==1) v.push_back(e.first);\\n        char d=v[0];\\n        for(int i=0;i<n;i++){\\n            if(d==s[i]) return i;\\n            break;\\n        }\\n        return -1;\\n    }\\n};\\nQ1 Is this solution correct for the question? \\nQ2 If coreect, then why is it giving runtime error\\nQ3 If wrong what changes should I make to correct it?\\nPlease answer as soon as possible"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in range(len(s)): \\n            if s.count(s[i]) == 1: \\n                return i \\n        return -1"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "teeteeCode",
                        "content": "What is wrong with thise code?\\n\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        # for loop\\n        # if a charcter repeats, remove it from the dictionary\\n        d = {}\\n        min = len(s)\\n        for i in range(len(s)):\\n            if s[i] in d.keys():\\n                d[s[i]] = \\'r\\'\\n            else:\\n                d[s[i]] = i\\n            print(d)\\n        for k in d:\\n            if d[k] != \\'r\\':\\n                if d[k] < min:\\n                    min = d[k]\\n            else:\\n                continue\\n        if min == len(s):\\n            return -1\\n        else:\\n            return min"
                    },
                    {
                        "username": "widiantara",
                        "content": "[QUESTION]\nwhy ```s = \"loveleetcode\"``` the output 2 not -1 (they had 2 `l`)\nbut the other case ```\"dacca\"``` is 1"
                    },
                    {
                        "username": "Nihit_Yadav",
                        "content": "it\\'s -1 only if there is no unique character, as in 3rd case \"aabb\" there is no unique character so its -1, meanwhile in case 2 the 2nd index char v is non-repeating unique so it\\'s 2"
                    },
                    {
                        "username": "harishrivaidya",
                        "content": "What\\'s wrong in the below approach ??\\n `\\n        for i in range(len(s)):\\n            if((s[i]) not in s[i+1:]):\\n                return i\\n        return -1`"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/387_First_unique_char.cpp"
                    },
                    {
                        "username": "DipakTaur",
                        "content": "class Solution {\\n  public int firstUniqChar(String s) {\\n    int[] count = new int[128];\\n\\n    for (final char c : s.toCharArray())\\n      ++count[c];\\n\\n    for (int i = 0; i < s.length(); ++i)\\n      if (count[s.charAt(i)] == 1)\\n        return i;\\n\\n    return -1;\\n  }\\n}\\n"
                    }
                ]
            },
            {
                "id": 1771208,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "visheshNITS",
                        "content": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.length();\\n        unordered_map<char,int>h;\\n        for(int i=0;i<n;i++)\\n        h[s[i]]++;\\n        vector<char>v;\\n        for(auto e:h)\\n        if(e.second==1) v.push_back(e.first);\\n        char d=v[0];\\n        for(int i=0;i<n;i++){\\n            if(d==s[i]) return i;\\n            break;\\n        }\\n        return -1;\\n    }\\n};\\nQ1 Is this solution correct for the question? \\nQ2 If coreect, then why is it giving runtime error\\nQ3 If wrong what changes should I make to correct it?\\nPlease answer as soon as possible"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in range(len(s)): \\n            if s.count(s[i]) == 1: \\n                return i \\n        return -1"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "teeteeCode",
                        "content": "What is wrong with thise code?\\n\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        # for loop\\n        # if a charcter repeats, remove it from the dictionary\\n        d = {}\\n        min = len(s)\\n        for i in range(len(s)):\\n            if s[i] in d.keys():\\n                d[s[i]] = \\'r\\'\\n            else:\\n                d[s[i]] = i\\n            print(d)\\n        for k in d:\\n            if d[k] != \\'r\\':\\n                if d[k] < min:\\n                    min = d[k]\\n            else:\\n                continue\\n        if min == len(s):\\n            return -1\\n        else:\\n            return min"
                    },
                    {
                        "username": "widiantara",
                        "content": "[QUESTION]\nwhy ```s = \"loveleetcode\"``` the output 2 not -1 (they had 2 `l`)\nbut the other case ```\"dacca\"``` is 1"
                    },
                    {
                        "username": "Nihit_Yadav",
                        "content": "it\\'s -1 only if there is no unique character, as in 3rd case \"aabb\" there is no unique character so its -1, meanwhile in case 2 the 2nd index char v is non-repeating unique so it\\'s 2"
                    },
                    {
                        "username": "harishrivaidya",
                        "content": "What\\'s wrong in the below approach ??\\n `\\n        for i in range(len(s)):\\n            if((s[i]) not in s[i+1:]):\\n                return i\\n        return -1`"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/387_First_unique_char.cpp"
                    },
                    {
                        "username": "DipakTaur",
                        "content": "class Solution {\\n  public int firstUniqChar(String s) {\\n    int[] count = new int[128];\\n\\n    for (final char c : s.toCharArray())\\n      ++count[c];\\n\\n    for (int i = 0; i < s.length(); ++i)\\n      if (count[s.charAt(i)] == 1)\\n        return i;\\n\\n    return -1;\\n  }\\n}\\n"
                    }
                ]
            },
            {
                "id": 1761722,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "visheshNITS",
                        "content": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.length();\\n        unordered_map<char,int>h;\\n        for(int i=0;i<n;i++)\\n        h[s[i]]++;\\n        vector<char>v;\\n        for(auto e:h)\\n        if(e.second==1) v.push_back(e.first);\\n        char d=v[0];\\n        for(int i=0;i<n;i++){\\n            if(d==s[i]) return i;\\n            break;\\n        }\\n        return -1;\\n    }\\n};\\nQ1 Is this solution correct for the question? \\nQ2 If coreect, then why is it giving runtime error\\nQ3 If wrong what changes should I make to correct it?\\nPlease answer as soon as possible"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in range(len(s)): \\n            if s.count(s[i]) == 1: \\n                return i \\n        return -1"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "teeteeCode",
                        "content": "What is wrong with thise code?\\n\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        # for loop\\n        # if a charcter repeats, remove it from the dictionary\\n        d = {}\\n        min = len(s)\\n        for i in range(len(s)):\\n            if s[i] in d.keys():\\n                d[s[i]] = \\'r\\'\\n            else:\\n                d[s[i]] = i\\n            print(d)\\n        for k in d:\\n            if d[k] != \\'r\\':\\n                if d[k] < min:\\n                    min = d[k]\\n            else:\\n                continue\\n        if min == len(s):\\n            return -1\\n        else:\\n            return min"
                    },
                    {
                        "username": "widiantara",
                        "content": "[QUESTION]\nwhy ```s = \"loveleetcode\"``` the output 2 not -1 (they had 2 `l`)\nbut the other case ```\"dacca\"``` is 1"
                    },
                    {
                        "username": "Nihit_Yadav",
                        "content": "it\\'s -1 only if there is no unique character, as in 3rd case \"aabb\" there is no unique character so its -1, meanwhile in case 2 the 2nd index char v is non-repeating unique so it\\'s 2"
                    },
                    {
                        "username": "harishrivaidya",
                        "content": "What\\'s wrong in the below approach ??\\n `\\n        for i in range(len(s)):\\n            if((s[i]) not in s[i+1:]):\\n                return i\\n        return -1`"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/387_First_unique_char.cpp"
                    },
                    {
                        "username": "DipakTaur",
                        "content": "class Solution {\\n  public int firstUniqChar(String s) {\\n    int[] count = new int[128];\\n\\n    for (final char c : s.toCharArray())\\n      ++count[c];\\n\\n    for (int i = 0; i < s.length(); ++i)\\n      if (count[s.charAt(i)] == 1)\\n        return i;\\n\\n    return -1;\\n  }\\n}\\n"
                    }
                ]
            },
            {
                "id": 1757019,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "visheshNITS",
                        "content": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.length();\\n        unordered_map<char,int>h;\\n        for(int i=0;i<n;i++)\\n        h[s[i]]++;\\n        vector<char>v;\\n        for(auto e:h)\\n        if(e.second==1) v.push_back(e.first);\\n        char d=v[0];\\n        for(int i=0;i<n;i++){\\n            if(d==s[i]) return i;\\n            break;\\n        }\\n        return -1;\\n    }\\n};\\nQ1 Is this solution correct for the question? \\nQ2 If coreect, then why is it giving runtime error\\nQ3 If wrong what changes should I make to correct it?\\nPlease answer as soon as possible"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in range(len(s)): \\n            if s.count(s[i]) == 1: \\n                return i \\n        return -1"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "teeteeCode",
                        "content": "What is wrong with thise code?\\n\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        # for loop\\n        # if a charcter repeats, remove it from the dictionary\\n        d = {}\\n        min = len(s)\\n        for i in range(len(s)):\\n            if s[i] in d.keys():\\n                d[s[i]] = \\'r\\'\\n            else:\\n                d[s[i]] = i\\n            print(d)\\n        for k in d:\\n            if d[k] != \\'r\\':\\n                if d[k] < min:\\n                    min = d[k]\\n            else:\\n                continue\\n        if min == len(s):\\n            return -1\\n        else:\\n            return min"
                    },
                    {
                        "username": "widiantara",
                        "content": "[QUESTION]\nwhy ```s = \"loveleetcode\"``` the output 2 not -1 (they had 2 `l`)\nbut the other case ```\"dacca\"``` is 1"
                    },
                    {
                        "username": "Nihit_Yadav",
                        "content": "it\\'s -1 only if there is no unique character, as in 3rd case \"aabb\" there is no unique character so its -1, meanwhile in case 2 the 2nd index char v is non-repeating unique so it\\'s 2"
                    },
                    {
                        "username": "harishrivaidya",
                        "content": "What\\'s wrong in the below approach ??\\n `\\n        for i in range(len(s)):\\n            if((s[i]) not in s[i+1:]):\\n                return i\\n        return -1`"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/387_First_unique_char.cpp"
                    },
                    {
                        "username": "DipakTaur",
                        "content": "class Solution {\\n  public int firstUniqChar(String s) {\\n    int[] count = new int[128];\\n\\n    for (final char c : s.toCharArray())\\n      ++count[c];\\n\\n    for (int i = 0; i < s.length(); ++i)\\n      if (count[s.charAt(i)] == 1)\\n        return i;\\n\\n    return -1;\\n  }\\n}\\n"
                    }
                ]
            },
            {
                "id": 1751984,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "visheshNITS",
                        "content": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.length();\\n        unordered_map<char,int>h;\\n        for(int i=0;i<n;i++)\\n        h[s[i]]++;\\n        vector<char>v;\\n        for(auto e:h)\\n        if(e.second==1) v.push_back(e.first);\\n        char d=v[0];\\n        for(int i=0;i<n;i++){\\n            if(d==s[i]) return i;\\n            break;\\n        }\\n        return -1;\\n    }\\n};\\nQ1 Is this solution correct for the question? \\nQ2 If coreect, then why is it giving runtime error\\nQ3 If wrong what changes should I make to correct it?\\nPlease answer as soon as possible"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in range(len(s)): \\n            if s.count(s[i]) == 1: \\n                return i \\n        return -1"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "teeteeCode",
                        "content": "What is wrong with thise code?\\n\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        # for loop\\n        # if a charcter repeats, remove it from the dictionary\\n        d = {}\\n        min = len(s)\\n        for i in range(len(s)):\\n            if s[i] in d.keys():\\n                d[s[i]] = \\'r\\'\\n            else:\\n                d[s[i]] = i\\n            print(d)\\n        for k in d:\\n            if d[k] != \\'r\\':\\n                if d[k] < min:\\n                    min = d[k]\\n            else:\\n                continue\\n        if min == len(s):\\n            return -1\\n        else:\\n            return min"
                    },
                    {
                        "username": "widiantara",
                        "content": "[QUESTION]\nwhy ```s = \"loveleetcode\"``` the output 2 not -1 (they had 2 `l`)\nbut the other case ```\"dacca\"``` is 1"
                    },
                    {
                        "username": "Nihit_Yadav",
                        "content": "it\\'s -1 only if there is no unique character, as in 3rd case \"aabb\" there is no unique character so its -1, meanwhile in case 2 the 2nd index char v is non-repeating unique so it\\'s 2"
                    },
                    {
                        "username": "harishrivaidya",
                        "content": "What\\'s wrong in the below approach ??\\n `\\n        for i in range(len(s)):\\n            if((s[i]) not in s[i+1:]):\\n                return i\\n        return -1`"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/387_First_unique_char.cpp"
                    },
                    {
                        "username": "DipakTaur",
                        "content": "class Solution {\\n  public int firstUniqChar(String s) {\\n    int[] count = new int[128];\\n\\n    for (final char c : s.toCharArray())\\n      ++count[c];\\n\\n    for (int i = 0; i < s.length(); ++i)\\n      if (count[s.charAt(i)] == 1)\\n        return i;\\n\\n    return -1;\\n  }\\n}\\n"
                    }
                ]
            },
            {
                "id": 1750525,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "visheshNITS",
                        "content": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.length();\\n        unordered_map<char,int>h;\\n        for(int i=0;i<n;i++)\\n        h[s[i]]++;\\n        vector<char>v;\\n        for(auto e:h)\\n        if(e.second==1) v.push_back(e.first);\\n        char d=v[0];\\n        for(int i=0;i<n;i++){\\n            if(d==s[i]) return i;\\n            break;\\n        }\\n        return -1;\\n    }\\n};\\nQ1 Is this solution correct for the question? \\nQ2 If coreect, then why is it giving runtime error\\nQ3 If wrong what changes should I make to correct it?\\nPlease answer as soon as possible"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in range(len(s)): \\n            if s.count(s[i]) == 1: \\n                return i \\n        return -1"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "teeteeCode",
                        "content": "What is wrong with thise code?\\n\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        # for loop\\n        # if a charcter repeats, remove it from the dictionary\\n        d = {}\\n        min = len(s)\\n        for i in range(len(s)):\\n            if s[i] in d.keys():\\n                d[s[i]] = \\'r\\'\\n            else:\\n                d[s[i]] = i\\n            print(d)\\n        for k in d:\\n            if d[k] != \\'r\\':\\n                if d[k] < min:\\n                    min = d[k]\\n            else:\\n                continue\\n        if min == len(s):\\n            return -1\\n        else:\\n            return min"
                    },
                    {
                        "username": "widiantara",
                        "content": "[QUESTION]\nwhy ```s = \"loveleetcode\"``` the output 2 not -1 (they had 2 `l`)\nbut the other case ```\"dacca\"``` is 1"
                    },
                    {
                        "username": "Nihit_Yadav",
                        "content": "it\\'s -1 only if there is no unique character, as in 3rd case \"aabb\" there is no unique character so its -1, meanwhile in case 2 the 2nd index char v is non-repeating unique so it\\'s 2"
                    },
                    {
                        "username": "harishrivaidya",
                        "content": "What\\'s wrong in the below approach ??\\n `\\n        for i in range(len(s)):\\n            if((s[i]) not in s[i+1:]):\\n                return i\\n        return -1`"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/387_First_unique_char.cpp"
                    },
                    {
                        "username": "DipakTaur",
                        "content": "class Solution {\\n  public int firstUniqChar(String s) {\\n    int[] count = new int[128];\\n\\n    for (final char c : s.toCharArray())\\n      ++count[c];\\n\\n    for (int i = 0; i < s.length(); ++i)\\n      if (count[s.charAt(i)] == 1)\\n        return i;\\n\\n    return -1;\\n  }\\n}\\n"
                    }
                ]
            },
            {
                "id": 1744703,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "visheshNITS",
                        "content": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.length();\\n        unordered_map<char,int>h;\\n        for(int i=0;i<n;i++)\\n        h[s[i]]++;\\n        vector<char>v;\\n        for(auto e:h)\\n        if(e.second==1) v.push_back(e.first);\\n        char d=v[0];\\n        for(int i=0;i<n;i++){\\n            if(d==s[i]) return i;\\n            break;\\n        }\\n        return -1;\\n    }\\n};\\nQ1 Is this solution correct for the question? \\nQ2 If coreect, then why is it giving runtime error\\nQ3 If wrong what changes should I make to correct it?\\nPlease answer as soon as possible"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in range(len(s)): \\n            if s.count(s[i]) == 1: \\n                return i \\n        return -1"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "teeteeCode",
                        "content": "What is wrong with thise code?\\n\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        # for loop\\n        # if a charcter repeats, remove it from the dictionary\\n        d = {}\\n        min = len(s)\\n        for i in range(len(s)):\\n            if s[i] in d.keys():\\n                d[s[i]] = \\'r\\'\\n            else:\\n                d[s[i]] = i\\n            print(d)\\n        for k in d:\\n            if d[k] != \\'r\\':\\n                if d[k] < min:\\n                    min = d[k]\\n            else:\\n                continue\\n        if min == len(s):\\n            return -1\\n        else:\\n            return min"
                    },
                    {
                        "username": "widiantara",
                        "content": "[QUESTION]\nwhy ```s = \"loveleetcode\"``` the output 2 not -1 (they had 2 `l`)\nbut the other case ```\"dacca\"``` is 1"
                    },
                    {
                        "username": "Nihit_Yadav",
                        "content": "it\\'s -1 only if there is no unique character, as in 3rd case \"aabb\" there is no unique character so its -1, meanwhile in case 2 the 2nd index char v is non-repeating unique so it\\'s 2"
                    },
                    {
                        "username": "harishrivaidya",
                        "content": "What\\'s wrong in the below approach ??\\n `\\n        for i in range(len(s)):\\n            if((s[i]) not in s[i+1:]):\\n                return i\\n        return -1`"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/387_First_unique_char.cpp"
                    },
                    {
                        "username": "DipakTaur",
                        "content": "class Solution {\\n  public int firstUniqChar(String s) {\\n    int[] count = new int[128];\\n\\n    for (final char c : s.toCharArray())\\n      ++count[c];\\n\\n    for (int i = 0; i < s.length(); ++i)\\n      if (count[s.charAt(i)] == 1)\\n        return i;\\n\\n    return -1;\\n  }\\n}\\n"
                    }
                ]
            },
            {
                "id": 1729157,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "visheshNITS",
                        "content": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.length();\\n        unordered_map<char,int>h;\\n        for(int i=0;i<n;i++)\\n        h[s[i]]++;\\n        vector<char>v;\\n        for(auto e:h)\\n        if(e.second==1) v.push_back(e.first);\\n        char d=v[0];\\n        for(int i=0;i<n;i++){\\n            if(d==s[i]) return i;\\n            break;\\n        }\\n        return -1;\\n    }\\n};\\nQ1 Is this solution correct for the question? \\nQ2 If coreect, then why is it giving runtime error\\nQ3 If wrong what changes should I make to correct it?\\nPlease answer as soon as possible"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in range(len(s)): \\n            if s.count(s[i]) == 1: \\n                return i \\n        return -1"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "teeteeCode",
                        "content": "What is wrong with thise code?\\n\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        # for loop\\n        # if a charcter repeats, remove it from the dictionary\\n        d = {}\\n        min = len(s)\\n        for i in range(len(s)):\\n            if s[i] in d.keys():\\n                d[s[i]] = \\'r\\'\\n            else:\\n                d[s[i]] = i\\n            print(d)\\n        for k in d:\\n            if d[k] != \\'r\\':\\n                if d[k] < min:\\n                    min = d[k]\\n            else:\\n                continue\\n        if min == len(s):\\n            return -1\\n        else:\\n            return min"
                    },
                    {
                        "username": "widiantara",
                        "content": "[QUESTION]\nwhy ```s = \"loveleetcode\"``` the output 2 not -1 (they had 2 `l`)\nbut the other case ```\"dacca\"``` is 1"
                    },
                    {
                        "username": "Nihit_Yadav",
                        "content": "it\\'s -1 only if there is no unique character, as in 3rd case \"aabb\" there is no unique character so its -1, meanwhile in case 2 the 2nd index char v is non-repeating unique so it\\'s 2"
                    },
                    {
                        "username": "harishrivaidya",
                        "content": "What\\'s wrong in the below approach ??\\n `\\n        for i in range(len(s)):\\n            if((s[i]) not in s[i+1:]):\\n                return i\\n        return -1`"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/387_First_unique_char.cpp"
                    },
                    {
                        "username": "DipakTaur",
                        "content": "class Solution {\\n  public int firstUniqChar(String s) {\\n    int[] count = new int[128];\\n\\n    for (final char c : s.toCharArray())\\n      ++count[c];\\n\\n    for (int i = 0; i < s.length(); ++i)\\n      if (count[s.charAt(i)] == 1)\\n        return i;\\n\\n    return -1;\\n  }\\n}\\n"
                    }
                ]
            },
            {
                "id": 1725611,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "visheshNITS",
                        "content": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.length();\\n        unordered_map<char,int>h;\\n        for(int i=0;i<n;i++)\\n        h[s[i]]++;\\n        vector<char>v;\\n        for(auto e:h)\\n        if(e.second==1) v.push_back(e.first);\\n        char d=v[0];\\n        for(int i=0;i<n;i++){\\n            if(d==s[i]) return i;\\n            break;\\n        }\\n        return -1;\\n    }\\n};\\nQ1 Is this solution correct for the question? \\nQ2 If coreect, then why is it giving runtime error\\nQ3 If wrong what changes should I make to correct it?\\nPlease answer as soon as possible"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in range(len(s)): \\n            if s.count(s[i]) == 1: \\n                return i \\n        return -1"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "teeteeCode",
                        "content": "What is wrong with thise code?\\n\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        # for loop\\n        # if a charcter repeats, remove it from the dictionary\\n        d = {}\\n        min = len(s)\\n        for i in range(len(s)):\\n            if s[i] in d.keys():\\n                d[s[i]] = \\'r\\'\\n            else:\\n                d[s[i]] = i\\n            print(d)\\n        for k in d:\\n            if d[k] != \\'r\\':\\n                if d[k] < min:\\n                    min = d[k]\\n            else:\\n                continue\\n        if min == len(s):\\n            return -1\\n        else:\\n            return min"
                    },
                    {
                        "username": "widiantara",
                        "content": "[QUESTION]\nwhy ```s = \"loveleetcode\"``` the output 2 not -1 (they had 2 `l`)\nbut the other case ```\"dacca\"``` is 1"
                    },
                    {
                        "username": "Nihit_Yadav",
                        "content": "it\\'s -1 only if there is no unique character, as in 3rd case \"aabb\" there is no unique character so its -1, meanwhile in case 2 the 2nd index char v is non-repeating unique so it\\'s 2"
                    },
                    {
                        "username": "harishrivaidya",
                        "content": "What\\'s wrong in the below approach ??\\n `\\n        for i in range(len(s)):\\n            if((s[i]) not in s[i+1:]):\\n                return i\\n        return -1`"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/387_First_unique_char.cpp"
                    },
                    {
                        "username": "DipakTaur",
                        "content": "class Solution {\\n  public int firstUniqChar(String s) {\\n    int[] count = new int[128];\\n\\n    for (final char c : s.toCharArray())\\n      ++count[c];\\n\\n    for (int i = 0; i < s.length(); ++i)\\n      if (count[s.charAt(i)] == 1)\\n        return i;\\n\\n    return -1;\\n  }\\n}\\n"
                    }
                ]
            },
            {
                "id": 1706980,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "visheshNITS",
                        "content": "class Solution {\\npublic:\\n    int firstUniqChar(string s) {\\n        int n=s.length();\\n        unordered_map<char,int>h;\\n        for(int i=0;i<n;i++)\\n        h[s[i]]++;\\n        vector<char>v;\\n        for(auto e:h)\\n        if(e.second==1) v.push_back(e.first);\\n        char d=v[0];\\n        for(int i=0;i<n;i++){\\n            if(d==s[i]) return i;\\n            break;\\n        }\\n        return -1;\\n    }\\n};\\nQ1 Is this solution correct for the question? \\nQ2 If coreect, then why is it giving runtime error\\nQ3 If wrong what changes should I make to correct it?\\nPlease answer as soon as possible"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        for i in range(len(s)): \\n            if s.count(s[i]) == 1: \\n                return i \\n        return -1"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "teeteeCode",
                        "content": "What is wrong with thise code?\\n\\nclass Solution:\\n    def firstUniqChar(self, s: str) -> int:\\n        # for loop\\n        # if a charcter repeats, remove it from the dictionary\\n        d = {}\\n        min = len(s)\\n        for i in range(len(s)):\\n            if s[i] in d.keys():\\n                d[s[i]] = \\'r\\'\\n            else:\\n                d[s[i]] = i\\n            print(d)\\n        for k in d:\\n            if d[k] != \\'r\\':\\n                if d[k] < min:\\n                    min = d[k]\\n            else:\\n                continue\\n        if min == len(s):\\n            return -1\\n        else:\\n            return min"
                    },
                    {
                        "username": "widiantara",
                        "content": "[QUESTION]\nwhy ```s = \"loveleetcode\"``` the output 2 not -1 (they had 2 `l`)\nbut the other case ```\"dacca\"``` is 1"
                    },
                    {
                        "username": "Nihit_Yadav",
                        "content": "it\\'s -1 only if there is no unique character, as in 3rd case \"aabb\" there is no unique character so its -1, meanwhile in case 2 the 2nd index char v is non-repeating unique so it\\'s 2"
                    },
                    {
                        "username": "harishrivaidya",
                        "content": "What\\'s wrong in the below approach ??\\n `\\n        for i in range(len(s)):\\n            if((s[i]) not in s[i+1:]):\\n                return i\\n        return -1`"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/first-unique-character-in-a-string-leet-code-387/"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/387_First_unique_char.cpp"
                    },
                    {
                        "username": "DipakTaur",
                        "content": "class Solution {\\n  public int firstUniqChar(String s) {\\n    int[] count = new int[128];\\n\\n    for (final char c : s.toCharArray())\\n      ++count[c];\\n\\n    for (int i = 0; i < s.length(); ++i)\\n      if (count[s.charAt(i)] == 1)\\n        return i;\\n\\n    return -1;\\n  }\\n}\\n"
                    }
                ]
            }
        ]
    }
]