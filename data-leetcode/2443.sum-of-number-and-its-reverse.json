[
    {
        "title": "Sum of Number and Its Reverse",
        "question_content": "Given a non-negative integer num, return true if num can be expressed as the sum of any non-negative integer and its reverse, or false otherwise.\n&nbsp;\nExample 1:\n\nInput: num = 443\nOutput: true\nExplanation: 172 + 271 = 443 so we return true.\n\nExample 2:\n\nInput: num = 63\nOutput: false\nExplanation: 63 cannot be expressed as the sum of a non-negative integer and its reverse so we return false.\n\nExample 3:\n\nInput: num = 181\nOutput: true\nExplanation: 140 + 041 = 181 so we return true. Note that when a number is reversed, there may be leading zeros.\n\n&nbsp;\nConstraints:\n\n\t0 <= num <= 105",
        "solutions": [
            {
                "id": 2708124,
                "title": "brute-force",
                "content": "Start from `n / 2` and go up to `n`.\\n\\n**C++**\\n```cpp\\nbool sumOfNumberAndReverse(int num) {\\n \\xA0 \\xA0auto rev = [](int n) {\\n        int rn = 0;\\n        for (; n; n /= 10)\\n            rn = rn * 10 + n % 10;\\n        return rn;\\n    };  \\n    for (int n1 = num / 2; n1 <= num; ++n1)\\n        if (n1 + rev(n1) == num)\\n            return true;\\n    return false;\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nbool sumOfNumberAndReverse(int num) {\\n \\xA0 \\xA0auto rev = [](int n) {\\n        int rn = 0;\\n        for (; n; n /= 10)\\n            rn = rn * 10 + n % 10;\\n        return rn;\\n    };  \\n    for (int n1 = num / 2; n1 <= num; ++n1)\\n        if (n1 + rev(n1) == num)\\n            return true;\\n    return false;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2708265,
                "title": "brute-force-c-got-tricked",
                "content": "I thought of starting the comparing from the num/2 value, since the smaller values may not give the answer needed and if there exist a smaller one we can always find it using the reversing the number tech.\\n\\nRemember i used some inbuilt functions to reverse the number , but this could give wrong answers if the constraints were too high.\\n\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i =num/2;i<=num;i++)\\n        {\\n            int mid = i;\\n            string s = to_string(mid);\\n            reverse(s.begin(),s.end());\\n            int n = stoi(s);\\n            if((i+n)==num)\\n            {\\n                //cout<<i<<\" \";\\n                return true;\\n            }\\n                \\n        }\\n        return false;\\n        \\n    }\\n};\\n```\\n\\n**upvote if you got tricked and wasted time on this question maybe**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i =num/2;i<=num;i++)\\n        {\\n            int mid = i;\\n            string s = to_string(mid);\\n            reverse(s.begin(),s.end());\\n            int n = stoi(s);\\n            if((i+n)==num)\\n            {\\n                //cout<<i<<\" \";\\n                return true;\\n            }\\n                \\n        }\\n        return false;\\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2708025,
                "title": "python3-simple-o-n-beginner-friendly",
                "content": "Lets go over all the number from num//2 to num, convert each number to its reverse representation, then add this number with its reverse representation see if the sum equals to the given num, if it is return True. After go over all the numbers in nums if we still didn\\'t find a matching number, return False.\\nTime Complixity: O(6n) = O(n) where 6 came from reverse digits of each element since it at most 10^5.\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n    \\t### make sure to check num as well (for case num=0), so we go from 0 to num+1\\n        for n in range(num//2,num+1):\\n            strN = str(n)\\t\\t### convert int to string\\n            strR = strN[::-1]\\t### reverse the digits\\n            ### make sure to convert the string back to int.\\n            if int(strN)+int(strR)==num:\\n                return True\\n        return False\\n```\\n\\n**Upvote** if you like this post.\\n\\n**Connect with me on [LinkedIn](https://www.linkedin.com/in/meida-chen-938a265b/)** if you\\'d like to discuss other related topics\\n\\nJust in case if you are working on **ML/DL 3D data-related projects** or are interested in the topic, please check out our project **[HERE](https://github.com/meidachen/STPLS3D)**",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n    \\t### make sure to check num as well (for case num=0), so we go from 0 to num+1\\n        for n in range(num//2,num+1):\\n            strN = str(n)\\t\\t### convert int to string\\n            strR = strN[::-1]\\t### reverse the digits\\n            ### make sure to convert the string back to int.\\n            if int(strN)+int(strR)==num:\\n                return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708194,
                "title": "fast-solution",
                "content": "```\\nclass Solution {\\n    static HashSet<Integer> set = new HashSet<>();\\n    static {\\n        for(int i=0;i<=100000;i++){\\n            set.add(i+Integer.parseInt(new StringBuilder(Integer.toString(i)).reverse().toString()));\\n        }\\n    }\\n    public boolean sumOfNumberAndReverse(int num) {\\n        return set.contains(num);\\n    }\\n}\\n```\\nCreate one HashSet for all test cases",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    static HashSet<Integer> set = new HashSet<>();\\n    static {\\n        for(int i=0;i<=100000;i++){\\n            set.add(i+Integer.parseInt(new StringBuilder(Integer.toString(i)).reverse().toString()));\\n        }\\n    }\\n    public boolean sumOfNumberAndReverse(int num) {\\n        return set.contains(num);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708188,
                "title": "python-reverse-number",
                "content": "Two promblems for reverse number comes in a row.\\n\\n# 2442. Count Number of Distinct Integers After Reverse Operations\\n**Python**\\n```py\\n    def countDistinctIntegers(self, A: List[int]) -> int:\\n        return len({b for a in A for b in [a, int(str(a)[::-1])]})\\n```\\n\\n# 2443. Sum of Number and Its Reverse\\n**Python**\\n```py\\n    def sumOfNumberAndReverse(self, k: int) -> bool:\\n        return any(a + int(str(a)[::-1]) == k for a in range(k + 1))\\n```\\n\\n",
                "solutionTags": [],
                "code": "```py\\n    def countDistinctIntegers(self, A: List[int]) -> int:\\n        return len({b for a in A for b in [a, int(str(a)[::-1])]})\\n```\n```py\\n    def sumOfNumberAndReverse(self, k: int) -> bool:\\n        return any(a + int(str(a)[::-1]) == k for a in range(k + 1))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2709340,
                "title": "java-beats-100-math-solution-with-backtracking-o-log-n-1ms",
                "content": "for input N, we are going to find X , for X + reversed(X) = N, let says N is 3 digit number like 443,\\nso we are going to find if exist any number combination  xyz + zyx = 443\\n\\nxyz = 100x + 10y +z,  zyx = 100z + 10y + x, so we are going find if exist polynomial solution of 101x + 20y + 101z = 443  while 0 < x & y & z < 9\\n\\nand we notice there are some term would be the same, we can merge 101x, 101z to 101(X\\') where X\\' range is 0 to 18\\n\\nso final we just to find if exist 101X\\' +20y = 443, u can see the X\\' must be select in 3, or there would be no other way to build number 443,\\nso the polynomial would be like 20y = 140, and y must be 7, and we find the answer.\\n\\nthe tricky part is if we get the polynomial, last digit would be decide only with one term, so it would be really fast to find if there is solution for this polynomial.\\n\\nAnd if N is digit 5 number like 33333, we are going to find abcde + edcba = 33333, the polynomial would like abcde +edcba = 10001(a+e) + 01010(b + d) + 00200(c)  = 33333, and do it with same logic with digit = 3.\\n![image](https://assets.leetcode.com/users/images/382b12f8-d95f-484f-9a07-b69288627445_1665914391.087497.png)\\n\\nThus, the basic idea is we find the polynomial for the num, and to check if the polynomial have solution.\\n\\nnotice that the number input start with 1, like 1324, we are not only checking abcd + dcba = 1324, also abc + cba is need to check.\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if (num == 0) {return true;}\\n        \\n        int digit = digit(num);\\n        int firstDigit = num / (int)Math.pow(10, digit - 1);\\n        \\n        if (firstDigit == 1) {\\n            return  hasAns(0, num, getPoly(digit)) || hasAns(0, num, getPoly(digit - 1));\\n        }\\n        return hasAns(0, num, getPoly(digit));\\n    }\\n    \\n    public int[] getPoly(int digit) {\\n        int[] poly = new int[(digit + 1) /2];\\n        for (int i = 0; i < poly.length; i++) {\\n            poly[i] = (int)Math.pow(10, digit - 1 - i*2) + 1;\\n        }\\n        return poly;\\n    }\\n    \\n    public boolean hasAns(int polyIdx, int num,int[] poly) {\\n        if (num == 0) {return true;}\\n        if (num < 0 || polyIdx == poly.length) {return false;}\\n        \\n        int curPoly = poly[polyIdx];\\n        int polyLastDigit = curPoly % 10;\\n        \\n        int curDigit = num % 10;\\n        if (curDigit % polyLastDigit != 0) {return false;}\\n    \\n        int polyMultiplyer = curDigit / polyLastDigit;\\n        boolean res = false;\\n        if (polyIdx == 0 && polyMultiplyer == 0) {\\n            res = false;\\n        } else {\\n            res = hasAns(polyIdx+1, (num - (curPoly * polyMultiplyer)) / 10, poly);\\n        }\\n        \\n        if (res) {return true;}\\n        \\n        polyMultiplyer += 10 / polyLastDigit;\\n        if (polyMultiplyer <= 18) {\\n            return hasAns(polyIdx+1, (num - (curPoly * polyMultiplyer)) / 10, poly);\\n        }\\n        return false;\\n    }\\n    \\n    public int digit(int num) {\\n        int res = 0;\\n        while (num > 0) {\\n            res++;\\n            num /= 10;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Backtracking",
                    "Depth-First Search"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if (num == 0) {return true;}\\n        \\n        int digit = digit(num);\\n        int firstDigit = num / (int)Math.pow(10, digit - 1);\\n        \\n        if (firstDigit == 1) {\\n            return  hasAns(0, num, getPoly(digit)) || hasAns(0, num, getPoly(digit - 1));\\n        }\\n        return hasAns(0, num, getPoly(digit));\\n    }\\n    \\n    public int[] getPoly(int digit) {\\n        int[] poly = new int[(digit + 1) /2];\\n        for (int i = 0; i < poly.length; i++) {\\n            poly[i] = (int)Math.pow(10, digit - 1 - i*2) + 1;\\n        }\\n        return poly;\\n    }\\n    \\n    public boolean hasAns(int polyIdx, int num,int[] poly) {\\n        if (num == 0) {return true;}\\n        if (num < 0 || polyIdx == poly.length) {return false;}\\n        \\n        int curPoly = poly[polyIdx];\\n        int polyLastDigit = curPoly % 10;\\n        \\n        int curDigit = num % 10;\\n        if (curDigit % polyLastDigit != 0) {return false;}\\n    \\n        int polyMultiplyer = curDigit / polyLastDigit;\\n        boolean res = false;\\n        if (polyIdx == 0 && polyMultiplyer == 0) {\\n            res = false;\\n        } else {\\n            res = hasAns(polyIdx+1, (num - (curPoly * polyMultiplyer)) / 10, poly);\\n        }\\n        \\n        if (res) {return true;}\\n        \\n        polyMultiplyer += 10 / polyLastDigit;\\n        if (polyMultiplyer <= 18) {\\n            return hasAns(polyIdx+1, (num - (curPoly * polyMultiplyer)) / 10, poly);\\n        }\\n        return false;\\n    }\\n    \\n    public int digit(int num) {\\n        int res = 0;\\n        while (num > 0) {\\n            res++;\\n            num /= 10;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708030,
                "title": "c-simple-easy-to-understand-solution",
                "content": "<b>Up Vote if you like the solution \\n```\\n/*\\nSimple Bruteforce approach, consider each number from 0 to n and \\ncheck if its reverse add it to give the value of n or not.\\n*/\\n\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i = 0; i <= num; ++i){\\n            int n = i;\\n            int r = 0;\\n            while(n){\\n                r = r*10 + n%10;\\n                n = n/10;\\n            }\\n            if(r + i == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/*\\nSimple Bruteforce approach, consider each number from 0 to n and \\ncheck if its reverse add it to give the value of n or not.\\n*/\\n\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i = 0; i <= num; ++i){\\n            int n = i;\\n            int r = 0;\\n            while(n){\\n                r = r*10 + n%10;\\n                n = n/10;\\n            }\\n            if(r + i == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708217,
                "title": "python-rust-fast-easy-concise-mini-proof-with-detailed-comments",
                "content": "**IF YOU LIKE THIS SOLUTION, PLEASE UPVOTE.**\\n\\n**Comment.** Both brute-force solutions use range **[n/2, n]**. This is explained by the fact that if two numbers sum up to a third number then one of them is not less than **n/2** and the other is not greater than **n/2**. Why not to use range **[0, n/2]** then? The answer here is that starting from low numbers like **1=001** we will never get **100** (let alone the reverse is not unique). However, the opposite is always true.\\n\\n**Python.** This [**solution**](https://leetcode.com/submissions/detail/823514408/) employs a brute force approach. It demonstrated **1495 ms runtime (100.00%)** and used **13.8 MB memory (100.00%)**. Time complexity is linear: **O(N)**. Space complexity is constant: **O(1)**.\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        # check the sum condition for all combinations\\n        return any(n + int(str(n)[::-1]) == num for n in range(num//2,num+1))\\n```\\n\\n**Rust.** This [**solution**](https://leetcode.com/submissions/detail/823517356/) employs a brute force approach. It demonstrated **18 ms runtime (100.00%)** and used **2.0 MB memory (100.00%)**. Time complexity is linear: **O(N)**. Space complexity is constant: **O(1)**.\\n```\\nimpl Solution \\n{\\n    pub fn sum_of_number_and_reverse(num: i32) -> bool \\n    {\\n        // [1] a helper function to reverse a number\\n        fn revnum(mut n: i32) -> i32\\n        {\\n            let mut rev : i32 = 0;\\n            while n > 0\\n            {\\n                rev *= 10;\\n                rev += (n%10);\\n                n   /= 10;\\n            }\\n            rev\\n        }\\n        \\n        // [2] check the sum condition for all combinations\\n        (num/2..=num).any(|n| n + revnum(n) == num)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Python",
                    "Rust"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        # check the sum condition for all combinations\\n        return any(n + int(str(n)[::-1]) == num for n in range(num//2,num+1))\\n```\n```\\nimpl Solution \\n{\\n    pub fn sum_of_number_and_reverse(num: i32) -> bool \\n    {\\n        // [1] a helper function to reverse a number\\n        fn revnum(mut n: i32) -> i32\\n        {\\n            let mut rev : i32 = 0;\\n            while n > 0\\n            {\\n                rev *= 10;\\n                rev += (n%10);\\n                n   /= 10;\\n            }\\n            rev\\n        }\\n        \\n        // [2] check the sum condition for all combinations\\n        (num/2..=num).any(|n| n + revnum(n) == num)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708268,
                "title": "sorry-but-why-6-10-5-will-give-tle-it-takes-less-than-1-second-to-run-it-i-don-t-know",
                "content": "Ruined my contest. Gives TLE on test case - n=99982\\n```\\n#define ll long long\\n#define pi (3.141592653589)\\n#define mod 1000000007\\n#define float double\\n#define pb push_back\\n#define mp make_pair\\n#define ff first\\n#define ss second\\n#define all(c) c.begin(), c.end()\\n#define min3(a, b, c) min(c, min(a, b))\\n#define min4(a, b, c, d) min(d, min(c, min(a, b)))\\n#define rrep(i, n) for(int i=n-1;i>=0;i--)\\n#define rep(i,n) for(int i=0;i<n;i++)\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        int f=0;\\n        for(int i=0; i<=num;i++){\\n            ll x=i;\\n            string s=to_string(i);\\n            reverse(all(s));\\n            ll y=stoll(s);\\n            if(x+y==num) {return true;}\\n        }\\n        \\n        return false;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        int f=0;\\n        for(int i=0; i<=num;i++){\\n            ll x=i;\\n            string s=to_string(i);\\n            reverse(all(s));\\n            ll y=stoll(s);\\n            if(x+y==num) {return true;}",
                "codeTag": "Java"
            },
            {
                "id": 2711861,
                "title": "python-modular-arithmetic-1-9-time-of-brute-force-t-m-391-ms-13-8-mb",
                "content": "This solution depends upon a fact from number theory for any non-negative integer N: \\n```\\n                               N%9  = sum(digits of N)&9 \\n```\\nFrom this identity, we infer that N%9 == revN%9, where revN is the reverse of N. For example, for N = 47 and revN = 74: \\n```\\n                          47%9 == 74%9  == (4+7)%9 = 2.\\n```\\nFurthermore, \\n```\\n                 2+2 = 47%2 + 74%2 == (47+74)%9 == 121%9 == 4\\n```\\nSo, if num = 121 in this problem, we can limit our search to integers N and revN to those that are greater than 121//2 and N%9 == 2. Instead of checking [1,2, ..., 58,59,60], sixty iterations, so we only need to iterate halfway of this list, which is seven iterations:\\n```\\n             [2, 11, 20,29,38,47,56,   65,74,83,92,101,110,119]\\n```\\nNote that 47 and 74 are in the list. \\n\\nThere\\'s still a few other issues to grapple with, but the code below will give you some hints.\\n\\n\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        \\n        if num < 11: return not num%2\\n        \\n        m = [0,5,1,6,2,7,3,8,4]\\n\\n        for i in range(m[num%9],num,9)[::-1]:\\n            if i + int(str(i)[::-1]) == num:\\n                return True\\n            \\n        return False\\n```\\n[https://leetcode.com/submissions/detail/824050980/](http://)\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n                               N%9  = sum(digits of N)&9 \\n```\n```\\n                          47%9 == 74%9  == (4+7)%9 = 2.\\n```\n```\\n                 2+2 = 47%2 + 74%2 == (47+74)%9 == 121%9 == 4\\n```\n```\\n             [2, 11, 20,29,38,47,56,   65,74,83,92,101,110,119]\\n```\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        \\n        if num < 11: return not num%2\\n        \\n        m = [0,5,1,6,2,7,3,8,4]\\n\\n        for i in range(m[num%9],num,9)[::-1]:\\n            if i + int(str(i)[::-1]) == num:\\n                return True\\n            \\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708632,
                "title": "o-n-time-c-o-1-space-c-easy-c-code-beats-100-submissions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nConsider the example : n = 181\\nSuppose we have x = 41 and y = 140 (x+y=181)\\nnow we want to return true if (41)+(140) and their reverses (14)+(041) gives same sum, but here both are giving different sum\\n\\nbut but but.. according to the description , when a number is reversed it can have leading zeros\\ntherefore, (41)+(140) can be written as (041)+(140)\\nnow on reversing them , we get 140+041 which gives us the same sum.\\ntherefore here we will return true;\\n\\nwe got the answerr already,\\n\\nbut consider what if instead of adding zeroes , we can just remove the trailing zeroes from the second val \\'y\\' to get the result ?\\nwe will get the same result write?\\n\\nlike 41+140--> 41+14=55\\nreverses 14+41 = 55\\non equating them we will still get the result, that\\'s what i did in my approach.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nWe will run the for loop for \\'n/2\\' times\\nStore the value of \\'n-i\\' in an integer variable \\'y\\'\\nThen we will create a string variable \\'a\\' which store the value of \\'y\\' in string format\\nThen we will reverse it and again convert it to an integer and will store it in \\'y\\' again \\nAnd now we will check if x=y, we will return true\\notherwise the loop will continue\\nand if we didn\\'t find any such value by iterating the loop, we will return false\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> O(n)\\n\\nActually the value of \\'n\\' lies in the ranges 0<=n<=10^5, so consider the number as 10^5 itself i.e. 100000, now taking it as a string , the length of the number can be atmax \\'6\\' and reversing the string will take negligible time\\nor we will run the for(j=0;j<6/2;j++)swap(s[i],s[n-i-1]); (for reversing the string obv)\\ni.e. this loop will run maximum for 3 times\\ntherefore total time complexity will be O(n/2 * 3)--->O(3n/2)\\nwhich you can consider as O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ --> O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int n) {\\n        int i;\\n        for(i=0;i<=n/2;i++){\\n            int x = i;\\n            int y = n-i;\\n            string a = to_string(y);\\n            reverse(a.begin(),a.end());\\n            y = stoi(a);\\n            if(x==y)return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int n) {\\n        int i;\\n        for(i=0;i<=n/2;i++){\\n            int x = i;\\n            int y = n-i;\\n            string a = to_string(y);\\n            reverse(a.begin(),a.end());\\n            y = stoi(a);\\n            if(x==y)return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2707996,
                "title": "c-hit-trial-simple-approach",
                "content": "**Please upvote if you find this solution helpful :)**\\n```\\nclass Solution \\n{\\npublic:\\n    bool sumOfNumberAndReverse(int num) \\n    {\\n        int temp, new_num=0;\\n        for(int i=0; i<= num; i++)\\n        {\\n            temp = i;\\n            while(temp)\\n            { \\n                new_num = new_num*10 + temp%10;\\n                temp /= 10;\\n            }\\n            \\n            if(i + new_num == num) return true;\\n            new_num=0;\\n        }\\n        return false;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    bool sumOfNumberAndReverse(int num) \\n    {\\n        int temp, new_num=0;\\n        for(int i=0; i<= num; i++)\\n        {\\n            temp = i;\\n            while(temp)\\n            { \\n                new_num = new_num*10 + temp%10;\\n                temp /= 10;\\n            }\\n            \\n            if(i + new_num == num) return true;\\n            new_num=0;\\n        }\\n        return false;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708812,
                "title": "sum-of-number-and-its-reverse",
                "content": "Here in this problem we use the property of StringBuilder to reverse the number and then compute it.\\n\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num == 0) return true;\\n        for(int i =1; i<num; i++){\\n            StringBuilder sb = new StringBuilder(i+\"\");\\n            String st = sb.reverse().toString();\\n            int val = Integer.parseInt(st);\\n            if(val + i == num){\\n                \\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num == 0) return true;\\n        for(int i =1; i<num; i++){\\n            StringBuilder sb = new StringBuilder(i+\"\");\\n            String st = sb.reverse().toString();\\n            int val = Integer.parseInt(st);\\n            if(val + i == num){\\n                \\n                return true;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3225467,
                "title": "no-more-easy-solution-can-be-in-8-lines",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nBasically, the approach is to find if *[\"i and reversed form of i\"]*  is equal to the num then return true else return false.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public static int reverse(int n){\\n        int r,s=0;\\n        while(n>0){\\n            r = n%10;\\n            s = (s*10)+r;\\n            n/=10;\\n        }\\n        return s;\\n    }\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for(int i = 0; i<=num; i++){\\n            int rev = reverse(i);\\n            if(i+rev==num){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public static int reverse(int n){\\n        int r,s=0;\\n        while(n>0){\\n            r = n%10;\\n            s = (s*10)+r;\\n            n/=10;\\n        }\\n        return s;\\n    }\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for(int i = 0; i<=num; i++){\\n            int rev = reverse(i);\\n            if(i+rev==num){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2711013,
                "title": "beats-100-in-python-easy-code-beginner-friendly",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome*.**\\n___________________\\n_________________\\n***Q2443. Sum of Number and Its Reverse***\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **Python  Code** :\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(num+1):\\n            if i+int(str(i)[::-1])==num:\\n                return True\\n        return False\\n```\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(num+1):\\n            if i+int(str(i)[::-1])==num:\\n                return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2709283,
                "title": "c-easy-reversal",
                "content": "```\\nclass Solution {\\npublic:\\n    int rev(int i){\\n        int ans = 0;\\n        while(i > 0){\\n            ans *= 10;\\n            ans += i%10;\\n            i /= 10;\\n        }\\n        return ans;\\n    }\\n    \\n    bool sumOfNumberAndReverse(int num) {\\n        if(num == 0) return true;\\n        \\n        for(int i = 0; i < num; i++){\\n         if(i + rev(i) == num){\\n             return true;\\n         }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int rev(int i){\\n        int ans = 0;\\n        while(i > 0){\\n            ans *= 10;\\n            ans += i%10;\\n            i /= 10;\\n        }\\n        return ans;\\n    }\\n    \\n    bool sumOfNumberAndReverse(int num) {\\n        if(num == 0) return true;\\n        \\n        for(int i = 0; i < num; i++){\\n         if(i + rev(i) == num){\\n             return true;\\n         }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708821,
                "title": "unpredictable-behaviour-of-judge",
                "content": "I did linear solution for problem C (Sum and Its Reverse) by iterating on i from 0 to N and converting each i to it\\'s string form, reversing it and checking if it satisfies the condition. It got TLE.\\n[https://leetcode.com/contest/weekly-contest-315/submissions/detail/823379124/]\\n\\nThen, I modified it a bit, iterated from N to N/2 and it got AC.\\n[https://leetcode.com/contest/weekly-contest-315/submissions/detail/823385362/]\\n\\nThis is weird behaviour of judge, Both the solutions have the same time complexity and one gets AC, other gets TLE. \\n\\nAfter the contest, I again tried submitting the contest submission that TLEd, and to my surprise, it got Accepted.\\n[https://leetcode.com/submissions/detail/823470868/]\\n\\nThis kind of thing happens again and again too often on leetcode. This is my 4th instance of this kind. \\n\\nSome other such instances (all very recent):\\n\\nProblem  : [https://leetcode.com/contest/biweekly-contest-87/problems/smallest-subarrays-with-maximum-bitwise-or/]\\nTLE submission : [https://leetcode.com/contest/biweekly-contest-87/submissions/detail/802055451/]\\nAC submission : [https://leetcode.com/contest/biweekly-contest-87/submissions/detail/802065843/]\\n\\nProblem : [https://leetcode.com/contest/weekly-contest-309/problems/longest-nice-subarray/]\\nTLE submission : [https://leetcode.com/contest/weekly-contest-309/submissions/detail/790941223/]\\nAC submission : [https://leetcode.com/contest/weekly-contest-309/submissions/detail/790946882/]\\n\\nProblem : [https://leetcode.com/contest/weekly-contest-311/problems/sum-of-prefix-scores-of-strings/]\\nTLE submission : [https://leetcode.com/contest/weekly-contest-311/submissions/detail/802516089/]\\nAC submission : [https://leetcode.com/contest/weekly-contest-311/submissions/detail/802520499/]\\n\\nThis creates a very sub-par experience, especially in the contests. Leetcode neither declares what the time limit is, nor does it enforce strong checking system, and morever it has undefined behaiour some times. What\\'s even worse is that, similar code that gets TLE in CPP, almost always gets Accepted in Python. So, people using other languages aren\\'t at equal footing with Python users. The time constraints for Python are too lenient. \\nI hope Leetcode takes note of these complaints and acts on them. I\\'m not the only one complaining, you can check discuss section of contests and lot of people have similar complaints.",
                "solutionTags": [
                    "C"
                ],
                "code": "I did linear solution for problem C (Sum and Its Reverse) by iterating on i from 0 to N and converting each i to it\\'s string form, reversing it and checking if it satisfies the condition. It got TLE.\\n[https://leetcode.com/contest/weekly-contest-315/submissions/detail/823379124/]\\n\\nThen, I modified it a bit, iterated from N to N/2 and it got AC.\\n[https://leetcode.com/contest/weekly-contest-315/submissions/detail/823385362/]\\n\\nThis is weird behaviour of judge, Both the solutions have the same time complexity and one gets AC, other gets TLE. \\n\\nAfter the contest, I again tried submitting the contest submission that TLEd, and to my surprise, it got Accepted.\\n[https://leetcode.com/submissions/detail/823470868/]\\n\\nThis kind of thing happens again and again too often on leetcode. This is my 4th instance of this kind. \\n\\nSome other such instances (all very recent):\\n\\nProblem  : [https://leetcode.com/contest/biweekly-contest-87/problems/smallest-subarrays-with-maximum-bitwise-or/]\\nTLE submission : [https://leetcode.com/contest/biweekly-contest-87/submissions/detail/802055451/]\\nAC submission : [https://leetcode.com/contest/biweekly-contest-87/submissions/detail/802065843/]\\n\\nProblem : [https://leetcode.com/contest/weekly-contest-309/problems/longest-nice-subarray/]\\nTLE submission : [https://leetcode.com/contest/weekly-contest-309/submissions/detail/790941223/]\\nAC submission : [https://leetcode.com/contest/weekly-contest-309/submissions/detail/790946882/]\\n\\nProblem : [https://leetcode.com/contest/weekly-contest-311/problems/sum-of-prefix-scores-of-strings/]\\nTLE submission : [https://leetcode.com/contest/weekly-contest-311/submissions/detail/802516089/]\\nAC submission : [https://leetcode.com/contest/weekly-contest-311/submissions/detail/802520499/]\\n\\nThis creates a very sub-par experience, especially in the contests. Leetcode neither declares what the time limit is, nor does it enforce strong checking system, and morever it has undefined behaiour some times. What\\'s even worse is that, similar code that gets TLE in CPP, almost always gets Accepted in Python. So, people using other languages aren\\'t at equal footing with Python users. The time constraints for Python are too lenient. \\nI hope Leetcode takes note of these complaints and acts on them. I\\'m not the only one complaining, you can check discuss section of contests and lot of people have similar complaints.",
                "codeTag": "Unknown"
            },
            {
                "id": 2708031,
                "title": "clean-and-simple-c-solution",
                "content": "```\\nclass Solution {\\nprivate:\\n    // reverse the number\\n    int rev(int num) {\\n        int rev_num = 0;\\n        while(num > 0) {\\n            rev_num = rev_num * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev_num;\\n    }\\n    \\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0; i<=num; i++) {\\n            if(i + rev(i) == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    // reverse the number\\n    int rev(int num) {\\n        int rev_num = 0;\\n        while(num > 0) {\\n            rev_num = rev_num * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev_num;\\n    }\\n    \\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0; i<=num; i++) {\\n            if(i + rev(i) == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3897078,
                "title": "simple-binary-search-beats-50-but-code-is-simply-understandable",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nDekho bhai jab bhi hume koi nummber(say num) kini bhi do numbers ke sum ke form mei express karna hota h to ek number [0,num/2] li range mei hota h aur doosra number [num/2,num] ki range mei hota h\\nsimply iterate karo doosri range mei aur jo bhi number pe tum ho uska reverse dhoond lo pehli range mei, binary search se\\nagar mil jaata h aur dono ek tumhara number doosri range se aur ek dhoonda hua number pehli range se ka sum num ke barabar ho gya to loop se break karo aur return kara do true nhi to agar poora loop se bahar aa gye to return kara do false\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reversenum(int n)\\n    {\\n        int num= 0;\\n        while(n!=0)\\n        {\\n            int r = n%10;\\n            num = num*10+r;\\n            n = n/10;\\n        }\\n        return num;\\n    }\\n    bool find(int s,int e,int num)\\n    {\\n        while(s<=e)\\n        {\\n            int mid = (s+e)/2;\\n            if(mid==num)\\n            return true;\\n            else if(mid<num)\\n            s = mid+1;\\n            else\\n            e = mid-1;\\n        }\\n        return false;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        int n = num/2;\\n        int sss = 0;\\n        int sse = n;\\n        bool ans = false;\\n        for(int i=n;i<=num;i++)\\n        {\\n            int revno=reversenum(i);\\n            if(find(sss,sse,revno) && revno+i==num)\\n            {\\n                ans = true;\\n                break;\\n            }\\n        }\\n\\n        return ans;\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reversenum(int n)\\n    {\\n        int num= 0;\\n        while(n!=0)\\n        {\\n            int r = n%10;\\n            num = num*10+r;\\n            n = n/10;\\n        }\\n        return num;\\n    }\\n    bool find(int s,int e,int num)\\n    {\\n        while(s<=e)\\n        {\\n            int mid = (s+e)/2;\\n            if(mid==num)\\n            return true;\\n            else if(mid<num)\\n            s = mid+1;\\n            else\\n            e = mid-1;\\n        }\\n        return false;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        int n = num/2;\\n        int sss = 0;\\n        int sse = n;\\n        bool ans = false;\\n        for(int i=n;i<=num;i++)\\n        {\\n            int revno=reversenum(i);\\n            if(find(sss,sse,revno) && revno+i==num)\\n            {\\n                ans = true;\\n                break;\\n            }\\n        }\\n\\n        return ans;\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3272492,
                "title": "easy-and-simple-python-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(1)\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(0,num+1):\\n            s=str(i)\\n            s=s[::-1]\\n            s=int(s)\\n            if (s+i) == num:\\n                return True\\n        return False\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(0,num+1):\\n            s=str(i)\\n            s=s[::-1]\\n            s=int(s)\\n            if (s+i) == num:\\n                return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2741287,
                "title": "easy-to-understand-java-solution",
                "content": "```\\nclass Solution {\\n    public int reverse(int number) {\\n        int reversed = 0;\\n        while (number != 0) {\\n            int digit = number % 10;\\n            reversed = reversed * 10 + digit;\\n            number /= 10;\\n        }\\n        return reversed;\\n    }\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num == 0) return true;\\n        for (int i = 1; i <num; i++) {\\n            if (i + reverse(i) == num) return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int number) {\\n        int reversed = 0;\\n        while (number != 0) {\\n            int digit = number % 10;\\n            reversed = reversed * 10 + digit;\\n            number /= 10;\\n        }\\n        return reversed;\\n    }\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num == 0) return true;\\n        for (int i = 1; i <num; i++) {\\n            if (i + reverse(i) == num) return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2711864,
                "title": "mathematical-o-logn-solution-c-recursion-0ms-beat-100",
                "content": "Besides using brute-force solution which O(n), there is a way to analyze (2) digit by (2) digit to recursively solve the problem. The complexity is O(logn). I didn\\'t come up with this solution during the contest but after some time of careful derivation, here is my thinking process and the code.\\n\\nIf you find it useful, please vote.\\n\\nLet\\u2019s say a number is `abcd` and if we take the reverse to make it `dcba`, then their sum will be:\\n\\n```\\nabcd + dcba\\n= 1000 * a + 100 * b + 10 * c + d + 1000 * d + 100 * c + 10 * b + a\\n= 1001 * a + 110 * b + 110 * c + 1001 * d\\n= 1001 * (a + d) + 110 * (b + c)\\n```\\n\\nFollowing the same logic, for any numbers with 1 digit \\u201Ca\\u201D, its sum should be in the form of:\\n\\n```\\na:      1 * (a + a)\\nab:     11 * (a + b)\\nabc:    101 * (a + c) + 10 * (b + b)                     = 101 * (a + c) + 10 * (1 * (b + b))\\nabcd:   1001 * (a + d) + 110 * (b + c)                   = 1001 * (a + d) + 10 * (11 * (b + c))\\nabcde:\\t10001 * (a + e) + 1010 * (b + d) + 100 * (c + c) = 10001 * (a + e) + 10 * (101 * (b + d) + 10 * (c + c))\\n```\\nNote in the last row it can be writen as `10001 * (a + e) + bcd * 10`, and 2nd to the last, `1001 * (a + d) + bc * 10`, etc., which gives us hints for recursion.\\n\\nAlso note that\\n\\na). `a`, `b`, `c`, and `d` are single digits, therefore, for any `x + y` above it should be less than 19, for any `x` it should be less than 10.\\nb). The last digit is only contributd by the first term as the rest `% 10 = 0`\\n\\nA direct translation becomes, e.g. for `abc` with 3 digits:\\n\\n```\\nfor (int i = 0; i < 2; ++i) {\\n\\tint res = num \\u2013 101 * (10 * i + (num % 10));\\n\\tif (res < 0) continue;\\n\\tif (res == num) continue;\\n\\tif (res % 20 == 0 && res / 20 < 10) return true;\\n}\\nreturn false;\\n```\\n\\nThe loop here is to cover two possible different scenario, e.g., `443 = 3 * 101 + 7 * 20`, but `1453 = 13 * 101 + 7 * 20`. When you only know the sum `1453` you only know the last digit is `3` but you don\\'t know whether `a + c` is `3` or `13`.\\n\\nThere is still one more thing, I have always been talking about the `digit` of the forming number instead of the formed number. Using the above example, the `digit` is `3` for both `271` and `776` that can generate `443` and `1453`. So when we are checking a number (`443` or `1453`) of `n` digits, we need to check two possible cases that the forming number has `n` digits, or `n - 1` digits.\\n\\nSo finally, putting everything togehter we have:\\n\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        string sn = to_string(num);\\n        return verify(num, sn.size()) || (sn[0] == \\'1\\' && verify(num, sn.size() - 1));\\n    }\\n\\n    bool verify(int num, int digit) {\\n        if (num == 0) return true;\\n        if (digit == 1)\\n            return num % 2 == 0 && num / 2 < 10;\\n        else if (digit == 2)\\n            return num % 11 == 0 && num / 11 < 19;\\n        else {\\n            if (num == 2 * pow(10, digit) - 1) return false;\\n            for (int i = 0; i < 2; ++i) {\\n                int res = num - (pow(10, digit - 1) + 1) * (10 * i + (num % 10));\\n                if (res < 0) continue;\\n                if (res == num) continue;\\n                res /= 10;\\n                if (verify(res, digit - 2)) return true;\\n            }\\n            return false;\\n        }\\n    }\\n};\\n```\\n\\nPlease upvote if this is helpful for you.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nabcd + dcba\\n= 1000 * a + 100 * b + 10 * c + d + 1000 * d + 100 * c + 10 * b + a\\n= 1001 * a + 110 * b + 110 * c + 1001 * d\\n= 1001 * (a + d) + 110 * (b + c)\\n```\n```\\na:      1 * (a + a)\\nab:     11 * (a + b)\\nabc:    101 * (a + c) + 10 * (b + b)                     = 101 * (a + c) + 10 * (1 * (b + b))\\nabcd:   1001 * (a + d) + 110 * (b + c)                   = 1001 * (a + d) + 10 * (11 * (b + c))\\nabcde:\\t10001 * (a + e) + 1010 * (b + d) + 100 * (c + c) = 10001 * (a + e) + 10 * (101 * (b + d) + 10 * (c + c))\\n```\n```\\nfor (int i = 0; i < 2; ++i) {\\n\\tint res = num \\u2013 101 * (10 * i + (num % 10));\\n\\tif (res < 0) continue;\\n\\tif (res == num) continue;\\n\\tif (res % 20 == 0 && res / 20 < 10) return true;\\n}\\nreturn false;\\n```\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        string sn = to_string(num);\\n        return verify(num, sn.size()) || (sn[0] == \\'1\\' && verify(num, sn.size() - 1));\\n    }\\n\\n    bool verify(int num, int digit) {\\n        if (num == 0) return true;\\n        if (digit == 1)\\n            return num % 2 == 0 && num / 2 < 10;\\n        else if (digit == 2)\\n            return num % 11 == 0 && num / 11 < 19;\\n        else {\\n            if (num == 2 * pow(10, digit) - 1) return false;\\n            for (int i = 0; i < 2; ++i) {\\n                int res = num - (pow(10, digit - 1) + 1) * (10 * i + (num % 10));\\n                if (res < 0) continue;\\n                if (res == num) continue;\\n                res /= 10;\\n                if (verify(res, digit - 2)) return true;\\n            }\\n            return false;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2711145,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n        public int reverseDigit(int n){\\n            int rev = 0;\\n            while(n>0){\\n                int rem = n % 10;\\n                rev = rev * 10 + rem;\\n                n /= 10;\\n            }\\n            return rev;\\n        }\\n        public boolean sumOfNumberAndReverse(int num) {\\n            if(num == 0){\\n                return true;\\n            }\\n            for(int i = 1; i<= num; i++){\\n                if(i + reverseDigit(i) == num){\\n                    return true;\\n                }\\n            }\\n            return false;\\n    }\\n}\\n\\n\\t\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n        public int reverseDigit(int n){\\n            int rev = 0;\\n            while(n>0){\\n                int rem = n % 10;\\n                rev = rev * 10 + rem;\\n                n /= 10;\\n            }\\n            return rev;\\n        }\\n        public boolean sumOfNumberAndReverse(int num) {\\n            if(num == 0){\\n                return true;\\n            }\\n            for(int i = 1; i<= num; i++){\\n                if(i + reverseDigit(i) == num){\\n                    return true;\\n                }\\n            }\\n            return false;\\n    }\\n}\\n\\n\\t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708626,
                "title": "python-3-recursion-solution-faster-than-brute-force",
                "content": "This solution utilizes the base case where num < 20 and some case reduction techniques which should be **much faster than brute-force solutions**. The uppder bound of num is `10^5` so the digits in num should not exceed 6. The count of digits can be expressed as `log10(n)`, but since the worst case may try enter the second case for each recursion, this algorithm should have worst time efficiency of `O(2^(log10(n)/2))` , which is although still `O(n)`, should be **faster** than brute-force (`O(nlog10(n))` efficiency). This algorithm also should have a small coeffienct because we have `10 (greater than 2^3)` as the log base result in 3 times faster and *dig* decreases by 2 instead of 1 for each recursion result in 4 times faster than `T(n)`. (Please point out if any step is incorrect)\\n\\nFor each recusion, mx_dig describes the count of digits need to be in the reversion number and can **neither exceed nor be under**. When num is equal to 0, it should be considered as a special case that regardless of mx_dig, it will be true because a sequence of 0 must equal to one 0. When num < 20, only even numbers can be generated using one digit and 11 would need 2 digits which is from \"10 + 01\"\\n\\nThen we consider either addition results in a carry or not. Observe that, for example 847 is a valid input, but there are multiple equivalent expressions: \"770 + 077\", \"671 + 176\", ... ,\"176 + 671\". You may notice that the hundreds + ones are always equal to 7, and with no carry (not 17 but 07). There is a similar example 154 but always with a carry on hundreds + ones. This is an intuition for why there can be only 2 cases about carry instead of 10 cases for each digit, or actually after you have this intuition, it\\'s quite easy to convince yourself with some mathwork.\\n\\nAfter that, we just have to deal with both cases and in my code, ld is the right most digit, rd is the left most digit ( I don\\'t know what I was thinking but I made it confusing for the variable names). dig stands for how many digits are in the reversing adder number, then let the dig to be as big as possible without exceeding the num (this is again an intuition, but you can some how tell that if we are not being greedy at this step, it is impossible for the shortened number in next recursion call to cover the difference). Finally do the **digit count equal check** and **recurse**!\\n\\n***Why digit count cannot be smaller?*** Use test input 20442 which expects a false as an example, after the first recursion in case one with no carry, 20002 is subtracted and 44 is passed to next. 44 is a valid by reverse adding 22, but when we flips 20220, 22 does not stay in the same position as how it works in two digits. So there need to be a 3 digit reverse number that adds to 44 which is impossible.\\n\\n***Why are there two functions?*** Before entering the first recursion we do not know how many digits must there be so assume it\\'s unbounded and remove the digit count checks for the first recursion.\\n\\nI believe that optimization can be made based on this algorithm and this problem could be a hard level problem if the runtime check is more strict.\\n\\n``` \\ndef recur(num: int, mx_dig) -> bool:\\n    if num == 0:\\n        return True\\n\\n    if mx_dig <= 0:\\n        return False\\n\\n    if num < 20:\\n        return (num % 2 == 0) or (num == 11 and mx_dig == 2)\\n\\n    if num % 10 != 0:\\n        ld = 0\\n        rd = num % 10\\n        dig = 2\\n        if num < (ld + rd) * 11:\\n            return False\\n        while (ld + rd) * (10**dig + 1) <= num:\\n            dig += 1\\n        if dig != mx_dig:\\n            return False\\n        if recur((num - (ld + rd) * (10**(dig - 1) + 1))//10, dig - 2):\\n            return True\\n\\n    if num % 10 != 9:\\n        ld = 9\\n        rd = (num - 9) % 10\\n        dig = 2\\n        if num < (ld + rd) * 11:\\n            return False\\n        while (ld + rd) * (10**dig + 1) <= num:\\n            dig += 1\\n        if dig != mx_dig:\\n            return False\\n        if recur((num - (ld + rd) * (10**(dig - 1) + 1))//10, dig - 2):\\n            return True\\n    return False\\n\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num == 0:\\n            return True\\n        \\n        if num < 20:\\n            return (num % 2 == 0) or (num == 11)\\n        \\n        if num % 10 != 0:\\n            ld = 0\\n            rd = num % 10\\n            dig = 2\\n            if num < (ld + rd) * 11:\\n                return False\\n            while (ld + rd) * (10**dig + 1) <= num:\\n                dig += 1\\n            if recur((num - (ld + rd) * (10**(dig - 1) + 1))//10, dig - 2):\\n                return True\\n        \\n        if num % 10 != 9:\\n            ld = 9\\n            rd = (num - 9) % 10\\n            dig = 2\\n            if num < (ld + rd) * 11:\\n                return False\\n            while (ld + rd) * (10**dig + 1) <= num:\\n                dig += 1\\n            if recur((num - (ld + rd) * (10**(dig - 1) + 1))//10, dig - 2):\\n                return True\\n        \\n        return False\\n\\n",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "This solution utilizes the base case where num < 20 and some case reduction techniques which should be **much faster than brute-force solutions**. The uppder bound of num is `10^5` so the digits in num should not exceed 6. The count of digits can be expressed as `log10(n)`, but since the worst case may try enter the second case for each recursion, this algorithm should have worst time efficiency of `O(2^(log10(n)/2))` , which is although still `O(n)`, should be **faster** than brute-force (`O(nlog10(n))` efficiency). This algorithm also should have a small coeffienct because we have `10 (greater than 2^3)` as the log base result in 3 times faster and *dig* decreases by 2 instead of 1 for each recursion result in 4 times faster than `T(n)`. (Please point out if any step is incorrect)\\n\\nFor each recusion, mx_dig describes the count of digits need to be in the reversion number and can **neither exceed nor be under**. When num is equal to 0, it should be considered as a special case that regardless of mx_dig, it will be true because a sequence of 0 must equal to one 0. When num < 20, only even numbers can be generated using one digit and 11 would need 2 digits which is from \"10 + 01\"\\n\\nThen we consider either addition results in a carry or not. Observe that, for example 847 is a valid input, but there are multiple equivalent expressions: \"770 + 077\", \"671 + 176\", ... ,\"176 + 671\". You may notice that the hundreds + ones are always equal to 7, and with no carry (not 17 but 07). There is a similar example 154 but always with a carry on hundreds + ones. This is an intuition for why there can be only 2 cases about carry instead of 10 cases for each digit, or actually after you have this intuition, it\\'s quite easy to convince yourself with some mathwork.\\n\\nAfter that, we just have to deal with both cases and in my code, ld is the right most digit, rd is the left most digit ( I don\\'t know what I was thinking but I made it confusing for the variable names). dig stands for how many digits are in the reversing adder number, then let the dig to be as big as possible without exceeding the num (this is again an intuition, but you can some how tell that if we are not being greedy at this step, it is impossible for the shortened number in next recursion call to cover the difference). Finally do the **digit count equal check** and **recurse**!\\n\\n***Why digit count cannot be smaller?*** Use test input 20442 which expects a false as an example, after the first recursion in case one with no carry, 20002 is subtracted and 44 is passed to next. 44 is a valid by reverse adding 22, but when we flips 20220, 22 does not stay in the same position as how it works in two digits. So there need to be a 3 digit reverse number that adds to 44 which is impossible.\\n\\n***Why are there two functions?*** Before entering the first recursion we do not know how many digits must there be so assume it\\'s unbounded and remove the digit count checks for the first recursion.\\n\\nI believe that optimization can be made based on this algorithm and this problem could be a hard level problem if the runtime check is more strict.\\n\\n``` \\ndef recur(num: int, mx_dig) -> bool:\\n    if num == 0:\\n        return True\\n\\n    if mx_dig <= 0:\\n        return False\\n\\n    if num < 20:\\n        return (num % 2 == 0) or (num == 11 and mx_dig == 2)\\n\\n    if num % 10 != 0:\\n        ld = 0\\n        rd = num % 10\\n        dig = 2\\n        if num < (ld + rd) * 11:\\n            return False\\n        while (ld + rd) * (10**dig + 1) <= num:\\n            dig += 1\\n        if dig != mx_dig:\\n            return False\\n        if recur((num - (ld + rd) * (10**(dig - 1) + 1))//10, dig - 2):\\n            return True\\n\\n    if num % 10 != 9:\\n        ld = 9\\n        rd = (num - 9) % 10\\n        dig = 2\\n        if num < (ld + rd) * 11:\\n            return False\\n        while (ld + rd) * (10**dig + 1) <= num:\\n            dig += 1\\n        if dig != mx_dig:\\n            return False\\n        if recur((num - (ld + rd) * (10**(dig - 1) + 1))//10, dig - 2):\\n            return True\\n    return False\\n\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num == 0:\\n            return True\\n        \\n        if num < 20:\\n            return (num % 2 == 0) or (num == 11)\\n        \\n        if num % 10 != 0:\\n            ld = 0\\n            rd = num % 10\\n            dig = 2\\n            if num < (ld + rd) * 11:\\n                return False\\n            while (ld + rd) * (10**dig + 1) <= num:\\n                dig += 1\\n            if recur((num - (ld + rd) * (10**(dig - 1) + 1))//10, dig - 2):\\n                return True\\n        \\n        if num % 10 != 9:\\n            ld = 9\\n            rd = (num - 9) % 10\\n            dig = 2\\n            if num < (ld + rd) * 11:\\n                return False\\n            while (ld + rd) * (10**dig + 1) <= num:\\n                dig += 1\\n            if recur((num - (ld + rd) * (10**(dig - 1) + 1))//10, dig - 2):\\n                return True\\n        \\n        return False\\n\\n",
                "codeTag": "Java"
            },
            {
                "id": 2708439,
                "title": "python3-o-digits-solution-beats-100-47ms",
                "content": "There are so many branches to consider in this solution.... \\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        digits = []\\n        while num > 0:\\n            digits.append(num % 10)\\n            num = num // 10\\n\\n        digits.reverse()\\n        hi, lo = 0, len(digits) - 1\\n        while hi <= lo:\\n            if hi == lo:\\n                if digits[hi] % 2 == 0:\\n                    break\\n                else:\\n                    return False\\n            if digits[hi] == digits[lo]:\\n                hi += 1\\n                lo -= 1\\n            elif digits[hi] == 1 and digits[hi] != digits[lo]:\\n                digits[hi] -= 1\\n                digits[hi+1] += 10\\n                hi += 1\\n                if lo != hi:\\n                    digits[lo] += 10\\n                    digits[lo-1] -= 1\\n                    cur = lo - 1\\n                    while digits[cur] < 0:\\n                        digits[cur] = 0\\n                        digits[cur-1] -= 1\\n                        cur -= 1\\n                \\n            elif digits[hi]-1 == digits[lo] and hi + 1 < lo:\\n                    digits[hi]-= 1\\n                    digits[hi+1] += 10\\n                    hi += 1\\n                    lo -= 1\\n                # else:\\n                #     return False\\n            elif digits[hi] - 1 == digits[lo] + 10 and hi + 1 < lo:\\n                digits[hi] -= 1\\n                digits[hi+1] += 10\\n                digits[lo-1] -= 1\\n                cur = lo - 1\\n                while digits[cur] < 0:\\n                    digits[cur] = 0\\n                    digits[cur-1] -= 1\\n                    cur -= 1     \\n                digits[lo] += 10\\n            elif hi-1>=0 and lo+1<=len(digits)-1 and digits[hi-1] == 1 and digits[lo+1] == 1:\\n                digits[hi-1] -= 1\\n                digits[hi] += 10\\n                digits[lo+1] += 10\\n                digits[lo] -= 1\\n                cur = lo\\n                while digits[cur] < 0:\\n                    digits[cur] = 0\\n                    digits[cur-1] -= 1\\n                    cur -= 1\\n                lo += 1\\n            else:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        digits = []\\n        while num > 0:\\n            digits.append(num % 10)\\n            num = num // 10\\n\\n        digits.reverse()\\n        hi, lo = 0, len(digits) - 1\\n        while hi <= lo:\\n            if hi == lo:\\n                if digits[hi] % 2 == 0:\\n                    break\\n                else:\\n                    return False\\n            if digits[hi] == digits[lo]:\\n                hi += 1\\n                lo -= 1\\n            elif digits[hi] == 1 and digits[hi] != digits[lo]:\\n                digits[hi] -= 1\\n                digits[hi+1] += 10\\n                hi += 1\\n                if lo != hi:\\n                    digits[lo] += 10\\n                    digits[lo-1] -= 1\\n                    cur = lo - 1\\n                    while digits[cur] < 0:\\n                        digits[cur] = 0\\n                        digits[cur-1] -= 1\\n                        cur -= 1\\n                \\n            elif digits[hi]-1 == digits[lo] and hi + 1 < lo:\\n                    digits[hi]-= 1\\n                    digits[hi+1] += 10\\n                    hi += 1\\n                    lo -= 1\\n                # else:\\n                #     return False\\n            elif digits[hi] - 1 == digits[lo] + 10 and hi + 1 < lo:\\n                digits[hi] -= 1\\n                digits[hi+1] += 10\\n                digits[lo-1] -= 1\\n                cur = lo - 1\\n                while digits[cur] < 0:\\n                    digits[cur] = 0\\n                    digits[cur-1] -= 1\\n                    cur -= 1     \\n                digits[lo] += 10\\n            elif hi-1>=0 and lo+1<=len(digits)-1 and digits[hi-1] == 1 and digits[lo+1] == 1:\\n                digits[hi-1] -= 1\\n                digits[hi] += 10\\n                digits[lo+1] += 10\\n                digits[lo] -= 1\\n                cur = lo\\n                while digits[cur] < 0:\\n                    digits[cur] = 0\\n                    digits[cur-1] -= 1\\n                    cur -= 1\\n                lo += 1\\n            else:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708220,
                "title": "c-brute-force",
                "content": "\\n\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i = 0; i <= num; i++)\\n        {\\n            int a = i;\\n            int revA = 0;\\n            while(a)\\n            {\\n                revA = ((revA*10) + a%10);\\n                a /= 10;\\n            }\\n            if(i + revA == num)\\n                return true;\\n            \\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i = 0; i <= num; i++)\\n        {\\n            int a = i;\\n            int revA = 0;\\n            while(a)\\n            {\\n                revA = ((revA*10) + a%10);\\n                a /= 10;\\n            }\\n            if(i + revA == num)\\n                return true;\\n            \\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708107,
                "title": "python-o-nlog-n",
                "content": "# Complexity\\n- Time complexity: O(nlog<sub>10</sub>n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num == 0:\\n            return True\\n        \\n        def reverse(n):\\n            rev = 0\\n            while n!=0:\\n                rev = rev*10+n%10\\n                n = n//10\\n            return rev\\n        \\n        for i in range(1, num+1):\\n            if i+reverse(i) == num:\\n                return True\\n                \\n        return False\\n```\\n----------------\\n**Upvote the post if you find it helpful.\\nHappy coding.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num == 0:\\n            return True\\n        \\n        def reverse(n):\\n            rev = 0\\n            while n!=0:\\n                rev = rev*10+n%10\\n                n = n//10\\n            return rev\\n        \\n        for i in range(1, num+1):\\n            if i+reverse(i) == num:\\n                return True\\n                \\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708050,
                "title": "c-simple-brute-force-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverseDigits(int num)\\n{\\n    int rev_num = 0;\\n    while (num > 0) {\\n        rev_num = rev_num * 10 + num % 10;\\n        num = num / 10;\\n    }\\n    return rev_num;\\n}\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num == 0) return true;\\n        else\\n        {\\n        for(int i=0;i<num;i++)\\n        {\\n            if(i + reverseDigits(i) == num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n        }\\n    }\\n};\\n```\\n**Please upvote if it was helpful for you, thank you!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverseDigits(int num)\\n{\\n    int rev_num = 0;\\n    while (num > 0) {\\n        rev_num = rev_num * 10 + num % 10;\\n        num = num / 10;\\n    }\\n    return rev_num;\\n}\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num == 0) return true;\\n        else\\n        {\\n        for(int i=0;i<num;i++)\\n        {\\n            if(i + reverseDigits(i) == num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3415676,
                "title": "brute-force-easy-to-understand-c-short-sweet",
                "content": "````\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        int y,x;\\n        for(int i = 0; i <= 1e5; i++){\\n            x = i,y = 0;\\n            while(x){//get inverse of number i\\n                y = y*10+(x%10);\\n                x /= 10;\\n            }\\n            if(i+y==num){//if number i is possible and than return true\\n                return true;\\n            }\\n        }\\n        return false;//ans not possible\\n    }\\n};\\n````",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "````\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        int y,x;\\n        for(int i = 0; i <= 1e5; i++){\\n            x = i,y = 0;\\n            while(x){//get inverse of number i\\n                y = y*10+(x%10);\\n                x /= 10;\\n            }\\n            if(i+y==num){//if number i is possible and than return true\\n                return true;\\n            }\\n        }\\n        return false;//ans not possible\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3196622,
                "title": "easy-python-solution-beats-100-memory",
                "content": "![image.png](https://assets.leetcode.com/users/images/47cdd59a-497d-4228-b7b3-e9a85f15c525_1676624375.03464.png)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def sumOfNumberAndReverse(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: bool\\n        \"\"\"\\n        if not num:return True\\n        i=1\\n        ans=False\\n        while i<num:\\n            if i+int(str(i)[::-1])==num:\\n                ans=True\\n                break\\n            i+=1\\n        return ans\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sumOfNumberAndReverse(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: bool\\n        \"\"\"\\n        if not num:return True\\n        i=1\\n        ans=False\\n        while i<num:\\n            if i+int(str(i)[::-1])==num:\\n                ans=True\\n                break\\n            i+=1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3109954,
                "title": "beginner-friendly-easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nA simple mathematical approach to reverse a number and then, usage of if statement.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSTEP-1: Firstly traverse through the all natural numbers from 1 to num-1.\\n\\nSTEP-2: Store each number(i) into a variable(rev), and reverse each number(i), and store it into a integer(a).\\n\\nSTEP-3: Add rev and a and check if sum is equal to num, if yes then return true, else return false.\\n\\nSTEP-4: Changes values of i and a back to normal as they were taken initally.\\n\\nSTEP-5: If you find this answer helpful then upvote it. \\uD83D\\uDE4C\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        int rev, a = 0;\\n        if(num==0)\\n        return true;\\n        for(int i = 0; i<num ; i++)\\n        {\\n              int rev = i;\\n              while(i>0)\\n              {\\n                  a = a*10 + i%10;\\n                  i/=10;\\n              }\\n              i = rev;\\n              if(rev+a==num)\\n              {\\n                  return true;\\n              }\\n              a = 0;\\n              \\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        int rev, a = 0;\\n        if(num==0)\\n        return true;\\n        for(int i = 0; i<num ; i++)\\n        {\\n              int rev = i;\\n              while(i>0)\\n              {\\n                  a = a*10 + i%10;\\n                  i/=10;\\n              }\\n              i = rev;\\n              if(rev+a==num)\\n              {\\n                  return true;\\n              }\\n              a = 0;\\n              \\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2846688,
                "title": "c-o-n-brute-force-easy-commented-explained",
                "content": "# Intuition\\nChecking from 0 to \\'n\\', if the sum of number between 0 & \\'n\\' and it\\'s reversed is equals to \\'n\\' then true;\\n\\n# Approach\\nlooping from 0 to \\'n\\' and checking the number with it\\'s reverse.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i = 0; i <= num; i++)\\n            {\\n                int n = i;\\n                int rev = 0;   // to store revresed\\n                while(n)             // reversing\\n                {\\n                    rev = rev*10 + n%10;\\n                    n = n/10;\\n                }\\n            \\n            if(rev + i == num)    // checking if the SUM of number and it\\'s reverse is equals to \"num\"\\n                return true;\\n            }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i = 0; i <= num; i++)\\n            {\\n                int n = i;\\n                int rev = 0;   // to store revresed\\n                while(n)             // reversing\\n                {\\n                    rev = rev*10 + n%10;\\n                    n = n/10;\\n                }\\n            \\n            if(rev + i == num)    // checking if the SUM of number and it\\'s reverse is equals to \"num\"\\n                return true;\\n            }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2810861,
                "title": "python-easy-solution-faster-than-90-43",
                "content": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        def check(a,b):\\n            return b==int(str(a)[-1::-1])\\n        t=num\\n        i=0\\n        while i<=t:\\n            if check(t,i):\\n                return True\\n            i+=1\\n            t-=1\\n        return False\\n```\\n\\n**Upvote if you like the solution or ask if there is any query**\\n        \\n        \\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        def check(a,b):\\n            return b==int(str(a)[-1::-1])\\n        t=num\\n        i=0\\n        while i<=t:\\n            if check(t,i):\\n                return True\\n            i+=1\\n            t-=1\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2757962,
                "title": "java-easiest-java-solution-of-this-question-on-leetcode-discuss",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n         for(int i = 0; i <= num; ++ i){\\n            int n = i;\\n            int r = 0;\\n            while(n != 0){\\n                r = r * 10 + n % 10;\\n                n = n / 10;\\n            }\\n            if(r + i == num) return true;\\n        }\\n        return false;\\n    }\\n}\\n```\\n# PLEASE UPVOTE IF IT WAS HELPFULL",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n         for(int i = 0; i <= num; ++ i){\\n            int n = i;\\n            int r = 0;\\n            while(n != 0){\\n                r = r * 10 + n % 10;\\n                n = n / 10;\\n            }\\n            if(r + i == num) return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2716050,
                "title": "brute-force-reverse",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: *`O(n)`*\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: *`O(1)`*\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long reverse(int n) {\\n        long rev = 0;\\n        while(n != 0) {\\n            rev = rev * 10 + n % 10;\\n            n /= 10;\\n        }\\n        return rev;\\n    }\\n    \\n    bool sumOfNumberAndReverse(int num) {\\n        long rev;\\n        \\n        for(int i = 0; i <= num; i++)\\n            if(i + reverse(i) == num)\\n                return true;\\n        \\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long reverse(int n) {\\n        long rev = 0;\\n        while(n != 0) {\\n            rev = rev * 10 + n % 10;\\n            n /= 10;\\n        }\\n        return rev;\\n    }\\n    \\n    bool sumOfNumberAndReverse(int num) {\\n        long rev;\\n        \\n        for(int i = 0; i <= num; i++)\\n            if(i + reverse(i) == num)\\n                return true;\\n        \\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2711745,
                "title": "c-o-n-time-brute-force",
                "content": "Cuz the said the input num should be a Int, and the range should in `0 <= num <= 1e5`, So the `O(N)` method should be an  acceptable solution.\\nIn this problem, the worest case\\'s time should be `O(l * N)`, `l` should be the max length of num, the N should be `1e5`\\n```C++\\nclass Solution {\\npublic:\\n    int helper(int num){\\n        int n = num, reversed_number = 0, remainder;\\n        while(n != 0) {\\n            remainder = n % 10;\\n            reversed_number = reversed_number * 10 + remainder;\\n            n /= 10;\\n        }\\n        return reversed_number;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        if(!num) return true;\\n        for(int i = 0; i < num; i++){\\n            int reversedNum = helper(i);\\n            if(reversedNum + i ==num)\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```\\n\\u611F\\u89C9\\u4E4B\\u524D\\u53EA\\u6709\\u5728\\u9762\\u8BD5\\u7684\\u65F6\\u5019\\u624D\\u4F1A\\u66F4\\u5173\\u6CE8\\u6570\\u636E\\u89C4\\u6A21\\u2026\\u2026\\u4F46\\u662F\\u611F\\u89C9\\u6700\\u8FD1\\u5C31\\u53D1\\u73B0\\u597D\\u591A\\u65F6\\u5019\\u5468\\u8D5B\\u5982\\u679C\\u4ED4\\u7EC6\\u89C2\\u5BDF\\u6570\\u636E\\u89C4\\u6A21\\u53EF\\u4EE5\\u6478\\u9C7C\\u4E0A\\u5206",
                "solutionTags": [
                    "C"
                ],
                "code": "```C++\\nclass Solution {\\npublic:\\n    int helper(int num){\\n        int n = num, reversed_number = 0, remainder;\\n        while(n != 0) {\\n            remainder = n % 10;\\n            reversed_number = reversed_number * 10 + remainder;\\n            n /= 10;\\n        }\\n        return reversed_number;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        if(!num) return true;\\n        for(int i = 0; i < num; i++){\\n            int reversedNum = helper(i);\\n            if(reversedNum + i ==num)\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2710056,
                "title": "java-solution-for-beginners-easy-to-understand",
                "content": "![image](https://assets.leetcode.com/users/images/2712de68-42f7-48fe-b574-57aff223b713_1665921797.4848323.png)\\n\\n**Upvote if you like my solution**\\n```\\n\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        int reverse = 0;\\n        if(num == 0) return true;\\n        for(int i = 0;i<num;i++){\\n            int number = i;\\n            while(number != 0)   \\n            {  \\n                int remainder = number % 10;  \\n                reverse = reverse * 10 + remainder;  \\n                number = number/10;  \\n            }  \\n            if(i+reverse == num){\\n                return true;\\n            }\\n            else{\\n                reverse = 0;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        int reverse = 0;\\n        if(num == 0) return true;\\n        for(int i = 0;i<num;i++){\\n            int number = i;\\n            while(number != 0)   \\n            {  \\n                int remainder = number % 10;  \\n                reverse = reverse * 10 + remainder;  \\n                number = number/10;  \\n            }  \\n            if(i+reverse == num){\\n                return true;\\n            }\\n            else{\\n                reverse = 0;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708598,
                "title": "easy-solution-0-n-brute-force-java",
                "content": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num==0)\\n            return true;\\n        for(int i=1;i<num;i++)\\n        {\\n            String s = String.valueOf(i);\\n            StringBuilder sb = new StringBuilder(s);\\n            sb.reverse();\\n            int x= Integer.parseInt(sb.toString());\\n            if(i+x==num)\\n                return true;\\n        }\\n        return false;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num==0)\\n            return true;\\n        for(int i=1;i<num;i++)\\n        {\\n            String s = String.valueOf(i);\\n            StringBuilder sb = new StringBuilder(s);\\n            sb.reverse();\\n            int x= Integer.parseInt(sb.toString());\\n            if(i+x==num)\\n                return true;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2708460,
                "title": "o-1-simple-solution-100-time-100-space",
                "content": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        bool ans = false;\\n\\t\\t// if the number is single digit\\n        if (num <= 18) {\\n            ans = ans || (num % 2 == 0);\\n        } \\n\\t\\t// if the number is double digits\\n\\t\\t// 10a + b + a + 10b = 11(a + b)\\n        if (num <= 198) {\\n            ans = ans || (num % 11 == 0);\\n        } \\n\\t\\t// if the number has three digits\\n\\t\\t// 100a + 10b + c + a + 10b + 100c = 101(a + c) + 20b\\n        if (num <= 1998) {\\n            for (int i=0; i<=9; ++i) {\\n                int tmp = num - (20 * i);\\n                if (tmp > 0 && (tmp % 101 == 0)) {\\n                    return true;\\n                }\\n            }\\n        } \\n\\t\\t// if the number has four digits\\n\\t\\t// 1000a + 100b + 10c + d + a + 10b + 100c  + 1000d= 1001(a + d) + 110(b + c)\\n        if (num <= 19998) {\\n            for (int i=0; i<=18; ++i) {\\n                int tmp = num - (110 * i);\\n                if (tmp > 0 && (tmp % 1001 == 0)) {\\n                    return true;\\n                }\\n            }\\n        } \\n\\t\\t// if the number has five digits\\n\\t\\t// 10000a + 1000b + 100c + 10d + e + a + 10b + 100c  + 1000d + 10000e= 10001(a + e) + 1010(b + d) + 200c\\n        for (int i=0; i<=18; ++i) {\\n            for (int j=0; j<=9; ++j) {\\n                int tmp = num - (1010 * i) - (200 * j);\\n                if (tmp > 0 && (tmp % 10001 == 0)) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        bool ans = false;\\n\\t\\t// if the number is single digit\\n        if (num <= 18) {\\n            ans = ans || (num % 2 == 0);\\n        } \\n\\t\\t// if the number is double digits\\n\\t\\t// 10a + b + a + 10b = 11(a + b)\\n        if (num <= 198) {\\n            ans = ans || (num % 11 == 0);\\n        } \\n\\t\\t// if the number has three digits\\n\\t\\t// 100a + 10b + c + a + 10b + 100c = 101(a + c) + 20b\\n        if (num <= 1998) {\\n            for (int i=0; i<=9; ++i) {\\n                int tmp = num - (20 * i);\\n                if (tmp > 0 && (tmp % 101 == 0)) {\\n                    return true;\\n                }\\n            }\\n        } \\n\\t\\t// if the number has four digits\\n\\t\\t// 1000a + 100b + 10c + d + a + 10b + 100c  + 1000d= 1001(a + d) + 110(b + c)\\n        if (num <= 19998) {\\n            for (int i=0; i<=18; ++i) {\\n                int tmp = num - (110 * i);\\n                if (tmp > 0 && (tmp % 1001 == 0)) {\\n                    return true;\\n                }\\n            }\\n        } \\n\\t\\t// if the number has five digits\\n\\t\\t// 10000a + 1000b + 100c + 10d + e + a + 10b + 100c  + 1000d + 10000e= 10001(a + e) + 1010(b + d) + 200c\\n        for (int i=0; i<=18; ++i) {\\n            for (int j=0; j<=9; ++j) {\\n                int tmp = num - (1010 * i) - (200 * j);\\n                if (tmp > 0 && (tmp % 10001 == 0)) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708372,
                "title": "java-simple-and-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for (int i=num/2; i <= num; i++){\\n            // if found print the pair, return\\n            int j = reverse(i);\\n            // System.out.println(j);\\n            if (i + j == num){\\n                return true;\\n            }\\n        }\\n        // System.out.println(reverse(140));\\n        return false;\\n    }\\n    static int reverse(int n){\\n        int rev = 0;\\n        while(n != 0){\\n            int rem = n % 10;\\n            rev = rev* 10 + rem;\\n            n /= 10;\\n        }\\n        return rev;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for (int i=num/2; i <= num; i++){\\n            // if found print the pair, return\\n            int j = reverse(i);\\n            // System.out.println(j);\\n            if (i + j == num){\\n                return true;\\n            }\\n        }\\n        // System.out.println(reverse(140));\\n        return false;\\n    }\\n    static int reverse(int n){\\n        int rev = 0;\\n        while(n != 0){\\n            int rem = n % 10;\\n            rev = rev* 10 + rem;\\n            n /= 10;\\n        }\\n        return rev;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708198,
                "title": "simple-o-n-solution",
                "content": "# Intuition\\nJust do a loop from 1 to n/2 and check for it\\'s reverse and n - i if they are equal.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n    bool sumOfNumberAndReverse(int n)\\n    {\\n        for(int i = 0; i <= n / 2; i++)\\n        {\\n            string s = to_string(i), r = to_string(n - i);\\n            while(s.size() < r.size())\\n                s = \"0\" + s;\\n            while(s.size() > r.size())\\n                r = \"0\" + r;\\n            reverse(s.begin(), s.end());\\n            if(r == s)\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    bool sumOfNumberAndReverse(int n)\\n    {\\n        for(int i = 0; i <= n / 2; i++)\\n        {\\n            string s = to_string(i), r = to_string(n - i);\\n            while(s.size() < r.size())\\n                s = \"0\" + s;\\n            while(s.size() > r.size())\\n                r = \"0\" + r;\\n            reverse(s.begin(), s.end());\\n            if(r == s)\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708173,
                "title": "easy-java-solution-set",
                "content": "# Sum of Numbers and its Reverse\\n# Easy Java Solution\\n\\n**Approach:**\\n1.) Start from mid of the num\\n2.) If such number exist then it is mainly form by a number greater then mid of the required sum and its reverse\\n3.) Trying all such combinations and putting it in set to avoid check for dublicate number\\n4.) If ans found return true else at the end of while loop return false;\\n\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        int i=0;\\n        HashSet<Integer> set=new HashSet<Integer>();\\n        if(num==0){\\n            return true;\\n        }\\n        i=num/2;\\n        //Here, we start from mid of number\\n        while(i<=num){\\n            int temp=i;\\n            int temp1=0;\\n            //Check if it is already being checked for the number, If no checking again.\\n            if(!set.contains(i)){\\n                //Reversing the number\\n                while(temp>0){\\n                    temp1=temp1*10+temp%10;\\n                    temp/=10;\\n                }\\n                //if(i+reverse(i)==number) return true\\n                if(i+temp1==num){\\n                    return true;\\n                }\\n                set.add(i);\\n                set.add(temp1); \\n            }\\n            i++;\\n        }\\n        //If we do not any such number then return false\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        int i=0;\\n        HashSet<Integer> set=new HashSet<Integer>();\\n        if(num==0){\\n            return true;\\n        }\\n        i=num/2;\\n        //Here, we start from mid of number\\n        while(i<=num){\\n            int temp=i;\\n            int temp1=0;\\n            //Check if it is already being checked for the number, If no checking again.\\n            if(!set.contains(i)){\\n                //Reversing the number\\n                while(temp>0){\\n                    temp1=temp1*10+temp%10;\\n                    temp/=10;\\n                }\\n                //if(i+reverse(i)==number) return true\\n                if(i+temp1==num){\\n                    return true;\\n                }\\n                set.add(i);\\n                set.add(temp1); \\n            }\\n            i++;\\n        }\\n        //If we do not any such number then return false\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3644257,
                "title": "c-brute-force-easy-to-understand-61ms",
                "content": "```\\nclass Solution {\\npublic:\\nint reverse(int num){\\n    int d=0;\\n    while(num>0){\\n        d=d*10+num%10;\\n        num/=10;\\n    }\\n    return d;\\n}\\n    bool sumOfNumberAndReverse(int num) {\\n       for(int i=0;i<=num;i++){\\n           if(i+reverse(i)==num)\\n           return true;\\n       } \\n       return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nint reverse(int num){\\n    int d=0;\\n    while(num>0){\\n        d=d*10+num%10;\\n        num/=10;\\n    }\\n    return d;\\n}\\n    bool sumOfNumberAndReverse(int num) {\\n       for(int i=0;i<=num;i++){\\n           if(i+reverse(i)==num)\\n           return true;\\n       } \\n       return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3535117,
                "title": "java-brute-force",
                "content": "I was thinking I should be using binary search but I ended up trying the brute force solution and I beat 95%. I\\'m not sure if I should continue with the exploration...\\n\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for (int i = num / 2; i <= num; i++) {\\n            if (i + reverse(i) == num) return true;\\n        }\\n        return false;\\n    }\\n\\n    private int reverse (int num) {\\n        int res = 0;\\n        while (num > 0) {\\n            int digit = num % 10;\\n            num /= 10;\\n            res = res * 10 + digit;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for (int i = num / 2; i <= num; i++) {\\n            if (i + reverse(i) == num) return true;\\n        }\\n        return false;\\n    }\\n\\n    private int reverse (int num) {\\n        int res = 0;\\n        while (num > 0) {\\n            int digit = num % 10;\\n            num /= 10;\\n            res = res * 10 + digit;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2880232,
                "title": "javascript-solution",
                "content": "**Consideration To Solve:**\\n\\tOne part of the number must be greater than or equal half of the original Number.\\n\\n```\\nvar sumOfNumberAndReverse = function(num) {\\n    if(num == 0) {\\n        return true\\n    }\\n    let i = Math.floor(num/2)\\n    while(i<num) {\\n        if(i+reverseANumber(i) == num) {\\n            return true\\n        }\\n        i++\\n    }\\n    return false\\n};\\n\\nvar reverseANumber = function (x, base = 10) {\\n\\tlet result = 0;\\n\\n\\twhile (x != 0) {\\n\\t\\tlastDigit = x % base;\\n\\t\\tresult    = result * base + lastDigit;\\n\\t\\tx         = Math.floor(x / base);\\n\\t}\\n\\n\\treturn result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar sumOfNumberAndReverse = function(num) {\\n    if(num == 0) {\\n        return true\\n    }\\n    let i = Math.floor(num/2)\\n    while(i<num) {\\n        if(i+reverseANumber(i) == num) {\\n            return true\\n        }\\n        i++\\n    }\\n    return false\\n};\\n\\nvar reverseANumber = function (x, base = 10) {\\n\\tlet result = 0;\\n\\n\\twhile (x != 0) {\\n\\t\\tlastDigit = x % base;\\n\\t\\tresult    = result * base + lastDigit;\\n\\t\\tx         = Math.floor(x / base);\\n\\t}\\n\\n\\treturn result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2761234,
                "title": "c-wtf",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i =num/2;i<=num;i++)\\n        {\\n            string s = to_string(i);\\n            reverse(s.begin(),s.end());\\n            \\n            if (i+stoi(s) == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i =num/2;i<=num;i++)\\n        {\\n            string s = to_string(i);\\n            reverse(s.begin(),s.end());\\n            \\n            if (i+stoi(s) == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2751981,
                "title": "c-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=num/2;i<=num;i++)\\n        {\\n            int rev=fun(i);\\n            if(rev+i==num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    int fun(int n)\\n    {\\n        int ans=0;\\n        int rem;\\n        while(n>0)\\n        {\\n            rem=n%10;\\n            ans=ans*10+rem;\\n            n=n/10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=num/2;i<=num;i++)\\n        {\\n            int rev=fun(i);\\n            if(rev+i==num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    int fun(int n)\\n    {\\n        int ans=0;\\n        int rem;\\n        while(n>0)\\n        {\\n            rem=n%10;\\n            ans=ans*10+rem;\\n            n=n/10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2733629,
                "title": "python-one-liner-easy-to-understand",
                "content": "\\tclass Solution:\\n\\t\\tdef sumOfNumberAndReverse(self, num: int) -> bool:\\n\\t\\t\\treturn any(number + int(str(number)[::-1]) == num for number in range(num + 1))",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef sumOfNumberAndReverse(self, num: int) -> bool:\\n\\t\\t\\treturn any(number + int(str(number)[::-1]) == num for number in range(num + 1))",
                "codeTag": "Java"
            },
            {
                "id": 2719380,
                "title": "simple-python-solution",
                "content": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num == 0:\\n            return True\\n        for i in range(num):\\n            if i + int(\\'\\'.join(list(reversed(str(i))))) == num:\\n                return True\\n        return False\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num == 0:\\n            return True\\n        for i in range(num):\\n            if i + int(\\'\\'.join(list(reversed(str(i))))) == num:\\n                return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2714576,
                "title": "c-brute-force-100-fast-and-100-efficient-soln",
                "content": "```\\n// Literally a piece of cake \\nint rev(int n){\\n        int ans = 0;\\n        while(n){\\n            ans=(ans*10)+(n%10);\\n            n/=10;\\n        }\\n        return ans;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++){\\n            if(i+rev(i)==num) return true;\\n        }\\n        return false;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n// Literally a piece of cake \\nint rev(int n){\\n        int ans = 0;\\n        while(n){\\n            ans=(ans*10)+(n%10);\\n            n/=10;\\n        }\\n        return ans;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++){\\n            if(i+rev(i)==num) return true;\\n        }\\n        return false;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2711668,
                "title": "c",
                "content": "\\n# Code\\n```\\npublic class Solution \\n{\\n    public bool SumOfNumberAndReverse(int num) \\n    {\\n        if(num == 0) \\n        {    \\n            return true;\\n        }\\n\\n        for(int i=1; i<num; i++)\\n        {\\n            int n = i;\\n            int reverse=0;           \\n            while(n != 0)      \\n            {      \\n                int rem = n % 10;        \\n                reverse = reverse*10 + rem;      \\n                n /= 10;      \\n            }\\n\\n            if(reverse + i == num)\\n            {   \\n                return true;\\n            }\\n        }\\n\\n        return false;    \\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public bool SumOfNumberAndReverse(int num) \\n    {\\n        if(num == 0) \\n        {    \\n            return true;\\n        }\\n\\n        for(int i=1; i<num; i++)\\n        {\\n            int n = i;\\n            int reverse=0;           \\n            while(n != 0)      \\n            {      \\n                int rem = n % 10;        \\n                reverse = reverse*10 + rem;      \\n                n /= 10;      \\n            }\\n\\n            if(reverse + i == num)\\n            {   \\n                return true;\\n            }\\n        }\\n\\n        return false;    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2711618,
                "title": "c-simple-and-easy-brute-force",
                "content": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=num/2;i<=num;i++)\\n        {\\n            int curr=i;\\n            string s=to_string(i);\\n            reverse(s.begin(),s.end());\\n            int rev=stoi(s);\\n            if((curr+rev)==num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=num/2;i<=num;i++)\\n        {\\n            int curr=i;\\n            string s=to_string(i);\\n            reverse(s.begin(),s.end());\\n            int rev=stoi(s);\\n            if((curr+rev)==num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2710386,
                "title": "java-straight-forward-solution",
                "content": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n\\t\\n        if(num == 0) return true;\\n\\t\\t\\n        int val = num/2;\\n        while(val<num){\\n            int rev = 0;\\n            int a = val;\\n\\t\\t\\t\\n            while(a>0){\\n            int rem = a % 10;\\n            rev = rev*10 + rem;\\n            a = a/10;\\n            }\\n\\t\\t\\t\\n            if(rev + val == num) return true;\\n            else val++;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n\\t\\n        if(num == 0) return true;\\n\\t\\t\\n        int val = num/2;\\n        while(val<num){\\n            int rev = 0;\\n            int a = val;\\n\\t\\t\\t\\n            while(a>0){\\n            int rem = a % 10;\\n            rev = rev*10 + rem;\\n            a = a/10;\\n            }\\n\\t\\t\\t\\n            if(rev + val == num) return true;\\n            else val++;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2709994,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int giveNum(int num){\\n        int rev=0;\\n        while(num){\\n            int rem=num%10;\\n            rev=rev*10+rem;\\n            num/=10;\\n        }\\n        return rev;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        int num1=num>>1;\\n       for(int i=r;i<=num;i++){\\n           int newN=giveNum(i);\\n           if(newN+i==num) return true;\\n       }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int giveNum(int num){\\n        int rev=0;\\n        while(num){\\n            int rem=num%10;\\n            rev=rev*10+rem;\\n            num/=10;\\n        }\\n        return rev;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        int num1=num>>1;\\n       for(int i=r;i<=num;i++){\\n           int newN=giveNum(i);\\n           if(newN+i==num) return true;\\n       }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2709944,
                "title": "java-solution-easy",
                "content": "### **Please Upvote** :D\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for (int i = 0; i <= num; i++) {\\n            if (i + reverse(i) == num) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    public int reverse(int n) {\\n        int r = 0;\\n        while (n != 0) {\\n            r = r * 10 + n % 10;\\n            n /= 10;\\n        }\\n\\n        return r;\\n    }\\n}\\n```\\n**Or using a stringbuilder for reversal:**\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for (int i = 0; i < num + 1; i++) {\\n            if (i + reverse(i) == num) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    public int reverse(int n) {\\n        StringBuilder sb = new StringBuilder();\\n        sb.append(n);\\n\\n        return Integer.valueOf(sb.reverse().toString());\\n    }\\n}\\n\\n// TC: O(n * k)\\n// say k is the maximum number of digits in a particular element in nums\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for (int i = 0; i <= num; i++) {\\n            if (i + reverse(i) == num) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    public int reverse(int n) {\\n        int r = 0;\\n        while (n != 0) {\\n            r = r * 10 + n % 10;\\n            n /= 10;\\n        }\\n\\n        return r;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for (int i = 0; i < num + 1; i++) {\\n            if (i + reverse(i) == num) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    public int reverse(int n) {\\n        StringBuilder sb = new StringBuilder();\\n        sb.append(n);\\n\\n        return Integer.valueOf(sb.reverse().toString());\\n    }\\n}\\n\\n// TC: O(n * k)\\n// say k is the maximum number of digits in a particular element in nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2709850,
                "title": "c-explicit-check",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe can easily check each number in 0..n range \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLinq query\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\npublic class Solution {\\n\\n    private static int Reverse(int value) {\\n        int result = 0;\\n\\n        for (int v = value; v > 0; v /= 10)\\n            result = result * 10 + v % 10;\\n\\n        return result;\\n    }\\n\\n    public bool SumOfNumberAndReverse(int num) => Enumerable\\n        .Range(0, num + 1)\\n        .Any(item => item + Reverse(item) == num);\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n\\n    private static int Reverse(int value) {\\n        int result = 0;\\n\\n        for (int v = value; v > 0; v /= 10)\\n            result = result * 10 + v % 10;\\n\\n        return result;\\n    }\\n\\n    public bool SumOfNumberAndReverse(int num) => Enumerable\\n        .Range(0, num + 1)\\n        .Any(item => item + Reverse(item) == num);\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708995,
                "title": "python-check-all",
                "content": "Efficient approach would be staring from n//2\\ncheck whether sum of number and its reverse equal to num\\n\\tIf possible return True\\nIf we don\\'t find any way just return False\\n```\\nn=num//2\\nwhile n<=num:\\n\\tif n+int(str(n)[::-1])==num:\\n\\t\\treturn True\\n\\tn+=1\\nreturn False\\n```\\nTime Complexity : O(n)\\nSpace Complexity : O(1)\\n\\nIf you any mathematical way to solve this problem, please discuss in comments.",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nn=num//2\\nwhile n<=num:\\n\\tif n+int(str(n)[::-1])==num:\\n\\t\\treturn True\\n\\tn+=1\\nreturn False\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2708875,
                "title": "c-simple-easy-to-understand-solution",
                "content": "```\\nbool sumOfNumberAndReverse(int num) \\n    {\\n        int x = num/2;\\n        for(int i=x; i<=num; i++)\\n        {\\n            int f=i, c=i;\\n            int nn=0;\\n            while(c>0)\\n            {\\n                nn = nn*10+c%10;\\n                c = c/10;\\n            }\\n            if(f+nn==num)\\n                return true;\\n        }\\n        return false;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nbool sumOfNumberAndReverse(int num) \\n    {\\n        int x = num/2;\\n        for(int i=x; i<=num; i++)\\n        {\\n            int f=i, c=i;\\n            int nn=0;\\n            while(c>0)\\n            {\\n                nn = nn*10+c%10;\\n                c = c/10;\\n            }\\n            if(f+nn==num)\\n                return true;\\n        }\\n        return false;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2708830,
                "title": "c-easy-approach-100-faster",
                "content": "```\\nvector<bool> v(200002,false);\\nstatic int a = 0;\\nvoid Do(int num){ \\n        string str1,str2;\\n        int number;\\n        for(int i=0;i<=100000;i++){\\n            str1=to_string(i);\\n            str2=str1;\\n            reverse(str2.begin(),str2.end()); \\n            number = stoi(str2);\\n            v[i+number] = true;\\n        }\\n    }\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(a==0){\\n            Do(num);\\n            a++;\\n        }\\n        return v[num];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nvector<bool> v(200002,false);\\nstatic int a = 0;\\nvoid Do(int num){ \\n        string str1,str2;\\n        int number;\\n        for(int i=0;i<=100000;i++){\\n            str1=to_string(i);\\n            str2=str1;\\n            reverse(str2.begin(),str2.end()); \\n            number = stoi(str2);\\n            v[i+number] = true;\\n        }\\n    }\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(a==0){\\n            Do(num);\\n            a++;\\n        }\\n        return v[num];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708757,
                "title": "brute-force-c-solution-easy",
                "content": "**Upvote if it helps**\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        int n = num/2;\\n        int size = n+100;\\n        for(int i=n;i<=size;i++){\\n            int x = i;\\n            int rev=0;\\n            while(x>0){\\n                int r = x%10;\\n                rev = rev*10 + r;\\n                x = x/10;\\n            }\\n            int sum = rev + i;\\n            if(sum == num) return true;\\n        }\\n        \\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        int n = num/2;\\n        int size = n+100;\\n        for(int i=n;i<=size;i++){\\n            int x = i;\\n            int rev=0;\\n            while(x>0){\\n                int r = x%10;\\n                rev = rev*10 + r;\\n                x = x/10;\\n            }\\n            int sum = rev + i;\\n            if(sum == num) return true;\\n        }\\n        \\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708597,
                "title": "python3-little-math-time-and-space-o-1",
                "content": "Probably could be optimized better and generalized to arbitrary length (or value)\\n```python\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num <= 18:\\n\\t\\t   #Adding 1 digit number, a, and its reverse, also a: 2a\\n            if num % 2 == 0:\\n                return True\\n\\t\\t\\t#Adding 2 digit number, 10a+b, and its reverse, 10b+a: 11a+11b\\n            if num % 11 == 0:\\n                return True\\n            return False\\n        elif num <= 198:\\n            if num % 11 == 0:\\n                return True\\n\\t\\t\\t#Adding 3 digit number, 100a+10b+c, and its reverse, 100c+10b+a: 101a+20b+101c\\n            for b in range(10):\\n                newNum = (num - 20 * b)\\n\\t\\t\\t\\t# checking last condition since a+c can be up to 18\\n                if newNum > 0 and newNum % 101 == 0 and newNum // 101 != 19: \\n                    return True\\n            return False\\n        # rest follows similar pattern\\n        elif num <= 1998:\\n            for b in range(10):\\n                newNum = (num - 20 * b)\\n                if newNum > 0 and newNum % 101 == 0 and newNum // 101 != 19:\\n                    return True\\n            for bc in range(19):\\n                newNum = (num - 110 * bc)\\n                if newNum > 0 and newNum % 1001 == 0 and newNum // 1001 != 19:\\n                    return True  \\n            return False\\n        elif num <= 19998:\\n            for c in range(10):\\n                for bd in range(19):\\n                    newNum = (num - 200 *c - 1010 * bd)\\n                    if newNum > 0 and newNum % 10001 == 0 and newNum // 10001 != 19:\\n                        return True  \\n            for bc in range(19):\\n                newNum = (num - 110 * bc)\\n                if newNum > 0 and newNum % 1001 == 0 and newNum // 1001 != 19:\\n                    return True  \\n            return False\\n        elif num <= 199998: # 10**5 - 2\\n            for c in range(10):\\n                for bd in range(19):\\n                    newNum = (num - 200 *c - 1010 * bd)\\n                    if newNum > 0 and newNum % 10001 == 0 and newNum // 10001 != 19:\\n                        return True  \\n            for cd in range(19):\\n                for be in range(19):\\n                    newNum = (num - 100100 *cd - 100010 * be)\\n                    if newNum > 0 and newNum % 100001 == 0 and newNum // 100001 != 19:\\n                        return True  \\n            return False\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```python\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num <= 18:\\n\\t\\t   #Adding 1 digit number, a, and its reverse, also a: 2a\\n            if num % 2 == 0:\\n                return True\\n\\t\\t\\t#Adding 2 digit number, 10a+b, and its reverse, 10b+a: 11a+11b\\n            if num % 11 == 0:\\n                return True\\n            return False\\n        elif num <= 198:\\n            if num % 11 == 0:\\n                return True\\n\\t\\t\\t#Adding 3 digit number, 100a+10b+c, and its reverse, 100c+10b+a: 101a+20b+101c\\n            for b in range(10):\\n                newNum = (num - 20 * b)\\n\\t\\t\\t\\t# checking last condition since a+c can be up to 18\\n                if newNum > 0 and newNum % 101 == 0 and newNum // 101 != 19: \\n                    return True\\n            return False\\n        # rest follows similar pattern\\n        elif num <= 1998:\\n            for b in range(10):\\n                newNum = (num - 20 * b)\\n                if newNum > 0 and newNum % 101 == 0 and newNum // 101 != 19:\\n                    return True\\n            for bc in range(19):\\n                newNum = (num - 110 * bc)\\n                if newNum > 0 and newNum % 1001 == 0 and newNum // 1001 != 19:\\n                    return True  \\n            return False\\n        elif num <= 19998:\\n            for c in range(10):\\n                for bd in range(19):\\n                    newNum = (num - 200 *c - 1010 * bd)\\n                    if newNum > 0 and newNum % 10001 == 0 and newNum // 10001 != 19:\\n                        return True  \\n            for bc in range(19):\\n                newNum = (num - 110 * bc)\\n                if newNum > 0 and newNum % 1001 == 0 and newNum // 1001 != 19:\\n                    return True  \\n            return False\\n        elif num <= 199998: # 10**5 - 2\\n            for c in range(10):\\n                for bd in range(19):\\n                    newNum = (num - 200 *c - 1010 * bd)\\n                    if newNum > 0 and newNum % 10001 == 0 and newNum // 10001 != 19:\\n                        return True  \\n            for cd in range(19):\\n                for be in range(19):\\n                    newNum = (num - 100100 *cd - 100010 * be)\\n                    if newNum > 0 and newNum % 100001 == 0 and newNum // 100001 != 19:\\n                        return True  \\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708590,
                "title": "sum-of-number-and-its-reverse",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        i=1\\n        if num==0:\\n            return True\\n        while i<num:\\n            a=str(i)\\n            a=a[::-1]\\n            a=int(a)\\n            if a+i==num:\\n                return True\\n            i+=1\\n        return False\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        i=1\\n        if num==0:\\n            return True\\n        while i<num:\\n            a=str(i)\\n            a=a[::-1]\\n            a=int(a)\\n            if a+i==num:\\n                return True\\n            i+=1\\n        return False\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708498,
                "title": "please-help-in-understanding-why-my-code-gives-tle",
                "content": "Its `O(nlogn)` approach, I dont get why this is giving TLE. The `logn` factor should be nothing with the constraints given\\n\\n [Submission link](https://leetcode.com/contest/weekly-contest-315/submissions/detail/823402918/)/\\n \\n Code - \\n\\n```\\nclass Solution\\n{\\npublic:\\n    int reverseInt(int n)\\n    {\\n        int rev = 0;\\n        vector<int> digits;\\n        while (n)\\n        {\\n            digits.push_back(n % 10);\\n            n = n / 10;\\n        }\\n        int numSize = digits.size();\\n        int tens = 1;\\n        while (numSize--)\\n            tens = tens * 10;\\n        tens = tens / 10;\\n        for (int i = 0; i < digits.size(); i++)\\n        {\\n            rev += (digits[i] * tens);\\n            tens = tens / 10;\\n        }\\n        return rev;\\n    }\\n    bool sumOfNumberAndReverse(int num)\\n    {\\n        if(num==0)\\n            return true;\\n        for (int i = 1; i <= num; i++)\\n        {\\n            if (i + reverseInt(i) == num)\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int reverseInt(int n)\\n    {\\n        int rev = 0;\\n        vector<int> digits;\\n        while (n)\\n        {\\n            digits.push_back(n % 10);\\n            n = n / 10;\\n        }\\n        int numSize = digits.size();\\n        int tens = 1;\\n        while (numSize--)\\n            tens = tens * 10;\\n        tens = tens / 10;\\n        for (int i = 0; i < digits.size(); i++)\\n        {\\n            rev += (digits[i] * tens);\\n            tens = tens / 10;\\n        }\\n        return rev;\\n    }\\n    bool sumOfNumberAndReverse(int num)\\n    {\\n        if(num==0)\\n            return true;\\n        for (int i = 1; i <= num; i++)\\n        {\\n            if (i + reverseInt(i) == num)\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708393,
                "title": "brute-force-beats-100-easy-explanation",
                "content": "**Run a loop from i = 0 to n/2, find sum of i and it\\'s reverse, return true if sum equals n**\\n```\\nbool sumOfNumberAndReverse(int num) {\\n\\tfor(int i = 0; i<=num/2; i++){\\n\\t\\tif(i + rev(i) == num) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nint rev(int n) //function to reverse a number\\n{\\n\\tint x = 0;\\n\\twhile (n > 0) {\\n\\t\\tx = x * 10 + n % 10;\\n\\t\\tn = n / 10;\\n\\t}\\n\\treturn x;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool sumOfNumberAndReverse(int num) {\\n\\tfor(int i = 0; i<=num/2; i++){\\n\\t\\tif(i + rev(i) == num) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nint rev(int n) //function to reverse a number\\n{\\n\\tint x = 0;\\n\\twhile (n > 0) {\\n\\t\\tx = x * 10 + n % 10;\\n\\t\\tn = n / 10;\\n\\t}\\n\\treturn x;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2708349,
                "title": "easy-java-solution",
                "content": "\\n\\n# Code\\n```class Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++){\\n            int rev=0;\\n            int temp=i;\\n            while(temp!=0){\\n                int r=temp%10;\\n                rev=rev*10+r;\\n                temp=temp/10;\\n            }\\n            if((i+rev)==num){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```class Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++){\\n            int rev=0;\\n            int temp=i;\\n            while(temp!=0){\\n                int r=temp%10;\\n                rev=rev*10+r;\\n                temp=temp/10;\\n            }\\n            if((i+rev)==num){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708313,
                "title": "rust-dfs-with-comments",
                "content": "This is my unrevised submission for the 2022-10-16 Weekly Contest 315. Perform a DFS of the candidates to see if we can a number so that the candidate plus its reverse equals `num`.\\n\\nComment: I took too long thinking about fancy solutions to prune the search. In the end I thought that I just had to go for it, since it was only a medium problem, and it worked.\\n\\n```\\nimpl Solution {\\n    fn dfs(num: i32, rem: i32, curr: i32) -> bool {\\n        if rem == 0 {\\n            let mut n = curr;\\n            let mut rev = 0;\\n            while n > 0 {\\n                rev = rev * 10 + n % 10;\\n                n /= 10;\\n            }\\n            return rev + curr == num;\\n        }\\n        for i in 0..=9 {\\n            if Self::dfs(num, rem / 10, curr * 10 + i) {\\n                return true;\\n            }\\n        }\\n        false\\n    }\\n\\n    pub fn sum_of_number_and_reverse(num: i32) -> bool {\\n        Self::dfs(num, num, 0)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    fn dfs(num: i32, rem: i32, curr: i32) -> bool {\\n        if rem == 0 {\\n            let mut n = curr;\\n            let mut rev = 0;\\n            while n > 0 {\\n                rev = rev * 10 + n % 10;\\n                n /= 10;\\n            }\\n            return rev + curr == num;\\n        }\\n        for i in 0..=9 {\\n            if Self::dfs(num, rem / 10, curr * 10 + i) {\\n                return true;\\n            }\\n        }\\n        false\\n    }\\n\\n    pub fn sum_of_number_and_reverse(num: i32) -> bool {\\n        Self::dfs(num, num, 0)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2708293,
                "title": "c-brute-force-accepted",
                "content": "We can simply do brute force:\\n**Iterate through 0 to n and  check if current value + reverse of current value == num**\\nFor checking the reverse we simply take %10 (to extract last digit) and /10 (to move to prev digits) and performing `ans*10 + last digit` of the value.\\n\\n```\\nlong long int reverse(long long int num){\\n        long long int ans=0;\\n        while(num){\\n            ans=ans*10;\\n            ans+=(num%10);\\n            num/=10;\\n        }\\n        return ans;\\n    }\\n```\\n```\\nbool sumOfNumberAndReverse(int n) {\\n        for(long long int i=0;i<=n;i++){\\n            if(i+reverse(i)==n)return true;\\n        }\\n        return false;\\n    }\\n```\\n\\n**Final code: **\\n```\\nclass Solution {\\npublic:\\n    long long int reverse(long long int num){\\n        long long int ans=0;\\n        while(num){\\n            ans=ans*10;\\n            ans+=(num%10);\\n            num/=10;\\n        }\\n        return ans;\\n    }\\n    bool sumOfNumberAndReverse(int n) {\\n        for(long long int i=0;i<=n;i++){\\n            if(i+reverse(i)==n)return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nlong long int reverse(long long int num){\\n        long long int ans=0;\\n        while(num){\\n            ans=ans*10;\\n            ans+=(num%10);\\n            num/=10;\\n        }\\n        return ans;\\n    }\\n```\n```\\nbool sumOfNumberAndReverse(int n) {\\n        for(long long int i=0;i<=n;i++){\\n            if(i+reverse(i)==n)return true;\\n        }\\n        return false;\\n    }\\n```\n```\\nclass Solution {\\npublic:\\n    long long int reverse(long long int num){\\n        long long int ans=0;\\n        while(num){\\n            ans=ans*10;\\n            ans+=(num%10);\\n            num/=10;\\n        }\\n        return ans;\\n    }\\n    bool sumOfNumberAndReverse(int n) {\\n        for(long long int i=0;i<=n;i++){\\n            if(i+reverse(i)==n)return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708291,
                "title": "c-brute-force",
                "content": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++){\\n            string s=to_string(i);\\n            reverse(s.begin(),s.end());\\n            int ch=stoi(s);\\n            if(ch+i==num)\\n                return 1;\\n        }\\n        return 0;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++){\\n            string s=to_string(i);\\n            reverse(s.begin(),s.end());\\n            int ch=stoi(s);\\n            if(ch+i==num)\\n                return 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2708267,
                "title": "brute-force-nlogn",
                "content": "```\\nclass Solution {\\npublic:\\n    int rev(int num){\\n       int rev_num = 0;\\n        while (num > 0) {\\n            rev_num = rev_num * 10 + num % 10;\\n            num = num / 10;\\n        }\\n        return rev_num;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        int i = 0;\\n        while(i<=num){\\n            if(i+rev(i)==num)return true;\\n            ++i;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int rev(int num){\\n       int rev_num = 0;\\n        while (num > 0) {\\n            rev_num = rev_num * 10 + num % 10;\\n            num = num / 10;\\n        }\\n        return rev_num;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        int i = 0;\\n        while(i<=num){\\n            if(i+rev(i)==num)return true;\\n            ++i;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708202,
                "title": "c-brute-force-o-n-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i = num; i >= num/2 ; i--){                  //we run loop from n to n/2 to handle leading zero problem\\n            string str = to_string(i);\\n            reverse(str.begin(), str.end());\\n            if(i + stoi(str) == num) return true;\\n\\t\\t\\t}\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i = num; i >= num/2 ; i--){                  //we run loop from n to n/2 to handle leading zero problem\\n            string str = to_string(i);\\n            reverse(str.begin(), str.end());\\n            if(i + stoi(str) == num) return true;\\n\\t\\t\\t}\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708193,
                "title": "c-easy-brute-force",
                "content": "bool sumOfNumberAndReverse(int num) {\\n        \\n        if (num == 0) return true;\\n        for(int i = 1 ; i < num ; i++){\\n            int nums = i,rev = 0,rem;\\n            while(nums!=0){\\n                rem = nums%10;\\n                rev = rev*10 + rem;\\n                nums/=10;\\n            }\\n             if(i + rev == num) return true;  \\n        }\\n        return\\xA0false;\\n\\xA0\\xA0\\xA0\\xA0}",
                "solutionTags": [],
                "code": "bool sumOfNumberAndReverse(int num) {\\n        \\n        if (num == 0) return true;\\n        for(int i = 1 ; i < num ; i++){\\n            int nums = i,rev = 0,rem;\\n            while(nums!=0){\\n                rem = nums%10;\\n                rev = rev*10 + rem;\\n                nums/=10;\\n            }\\n             if(i + rev == num) return true;  \\n        }\\n        return\\xA0false;\\n\\xA0\\xA0\\xA0\\xA0}",
                "codeTag": "Unknown"
            },
            {
                "id": 2708181,
                "title": "a-good-approach",
                "content": "class Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num==0) return true;\\n            int temp = i,sum=0;\\n            while(temp>0){\\n                int rem = temp%10;\\n                sum = sum*10+rem;\\n                temp/=10;\\n            }\\n                if(i+sum==num) return true;\\n        }\\n        return false;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num==0) return true;\\n            int temp = i,sum=0;\\n            while(temp>0){\\n                int rem = temp%10;\\n                sum = sum*10+rem;\\n                temp/=10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2708163,
                "title": "c-very-easy-solution-to-understand",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n   \\n     int help(int n)\\n    {\\n         int x=0;\\n       while(n>0)\\n       {\\n           x=x*10+n%10;\\n           n/=10;\\n       }\\n        return x;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n      \\n        for(int i=num/2;i<=100001;i++)\\n        {\\n            \\n            int y=help(i);\\n          if(i+y==num)\\n              return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   \\n     int help(int n)\\n    {\\n         int x=0;\\n       while(n>0)\\n       {\\n           x=x*10+n%10;\\n           n/=10;\\n       }\\n        return x;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n      \\n        for(int i=num/2;i<=100001;i++)\\n        {\\n            \\n            int y=help(i);\\n          if(i+y==num)\\n              return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708162,
                "title": "easy-to-understand-python",
                "content": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        def reverse_digits(n):\\n            return int(str(n)[::-1])\\n\\n\\n        for i in range(num + 1):\\n            if i == reverse_digits(num - i):\\n                return True\\n        return False\\n\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        def reverse_digits(n):\\n            return int(str(n)[::-1])\\n\\n\\n        for i in range(num + 1):\\n            if i == reverse_digits(num - i):\\n                return True\\n        return False\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708144,
                "title": "c-simple-and-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    long long reverse(int &n)\\n    {\\n        long long s=0;\\n        int m=n;\\n        while(m!=0)\\n        {\\n            int r=m%10;\\n            s=s*10+r;\\n            m/=10;\\n        }\\n        return s;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num==0)\\n            return true;\\n        for(int i=1;i<num;i++)\\n        {\\n           long long y= reverse(i);\\n            if(y+i==num)\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    long long reverse(int &n)\\n    {\\n        long long s=0;\\n        int m=n;\\n        while(m!=0)\\n        {\\n            int r=m%10;\\n            s=s*10+r;\\n            m/=10;\\n        }\\n        return s;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num==0)\\n            return true;\\n        for(int i=1;i<num;i++)\\n        {\\n           long long y= reverse(i);\\n            if(y+i==num)\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708131,
                "title": "easy-short-efficient-clean-code",
                "content": "```\\nclass Solution {\\ntypedef long long ll;\\npublic:\\n    ll reverse(ll num) {\\n\\t    ll result = 0;\\n\\t    while(num > 0){\\n            result = result * 10 + (num % 10);\\n            num /= 10;\\n        }\\n\\t    return result;\\n    }\\n    bool sumOfNumberAndReverse(int n) {   \\n        for(ll i=0;i<=n;++i){\\n            if(i+reverse(i)==n){\\n                return 1;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\ntypedef long long ll;\\npublic:\\n    ll reverse(ll num) {\\n\\t    ll result = 0;\\n\\t    while(num > 0){\\n            result = result * 10 + (num % 10);\\n            num /= 10;\\n        }\\n\\t    return result;\\n    }\\n    bool sumOfNumberAndReverse(int n) {   \\n        for(ll i=0;i<=n;++i){\\n            if(i+reverse(i)==n){\\n                return 1;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708006,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for (int i = 0; i <= num; i++) {\\n            int copyI = i;\\n            int value1 = i;\\n            int value2 = 0;\\n            while (copyI > 0) {\\n                value2 = value2 * 10 + copyI % 10;\\n                copyI = copyI / 10;\\n            }\\n            if (value1 + value2 == num) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for (int i = 0; i <= num; i++) {\\n            int copyI = i;\\n            int value1 = i;\\n            int value2 = 0;\\n            while (copyI > 0) {\\n                value2 = value2 * 10 + copyI % 10;\\n                copyI = copyI / 10;\\n            }\\n            if (value1 + value2 == num) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065570,
                "title": "beats-100-in-memory-and-96-8-in-time-answered-by-beginner",
                "content": "# Intuition\\nI find this hard by reading, I went to a youtube video, he said his first sentence this is eaasy for a hard problem, i paused video came back and gave the best anser for the problem in few trials. \\n\\n# Approach\\njust divide the brute force by half cause only case with zero we have to add but we can reduce the time complexity by half!\\n\\n# Complexity\\n- Time complexity:\\no(num/2)\\n\\n- Space complexity:\\no(1)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def sumOfNumberAndReverse(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: bool\\n        \"\"\"\\n        n=num//2\\n\\n        while n<=num:\\n            m=num-n\\n            m=str(m)\\n            m=m[::-1]\\n\\n            \\n            if str(n) == m:\\n                return True\\n            if str(n)== m +\"0\":\\n                return True\\n            n+=1\\n        \\n        return False\\n            \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def sumOfNumberAndReverse(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: bool\\n        \"\"\"\\n        n=num//2\\n\\n        while n<=num:\\n            m=num-n\\n            m=str(m)\\n            m=m[::-1]\\n\\n            \\n            if str(n) == m:\\n                return True\\n            if str(n)== m +\"0\":\\n                return True\\n            n+=1\\n        \\n        return False\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4033998,
                "title": "python-easy-4-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBruteForce works in this case as the canstraint values are small\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num==0 :\\n            return True\\n        for i in range(0,num+1):\\n            if i+int(str(i)[::-1])==num:\\n                return True\\n        return False\\n    \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num==0 :\\n            return True\\n        for i in range(0,num+1):\\n            if i+int(str(i)[::-1])==num:\\n                return True\\n        return False\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4006895,
                "title": "easy-java-approach-easy-to-understand",
                "content": "# Intuition  - \\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach \\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:157 ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:39.3 MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n     public static int reverse (int n){\\n            int rev =0;\\n            while(n != 0) {\\n                  \\n          int remainder = n % 10;  \\n          rev = rev * 10 + remainder;  \\n          n = n/10; \\n     \\n            }\\n\\n            return rev;\\n        }\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for(int i=num;i>0;i--){\\n           int x = reverse(i);\\n           if(x+i==num){\\n               return true;\\n           }\\n\\n        }\\n        if(num==0){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n     public static int reverse (int n){\\n            int rev =0;\\n            while(n != 0) {\\n                  \\n          int remainder = n % 10;  \\n          rev = rev * 10 + remainder;  \\n          n = n/10; \\n     \\n            }\\n\\n            return rev;\\n        }\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for(int i=num;i>0;i--){\\n           int x = reverse(i);\\n           if(x+i==num){\\n               return true;\\n           }\\n\\n        }\\n        if(num==0){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4003398,
                "title": "simple-brute-force-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i = num/2;i<=num;i++) {\\n            int mid = i;\\n            string s = to_string(i);\\n            reverse(s.begin(),s.end());\\n            int x = stoi(s);\\n\\n            if(mid+x == num)\\n                return true;\\n        }\\n\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i = num/2;i<=num;i++) {\\n            int mid = i;\\n            string s = to_string(i);\\n            reverse(s.begin(),s.end());\\n            int x = stoi(s);\\n\\n            if(mid+x == num)\\n                return true;\\n        }\\n\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3983238,
                "title": "reverse-sum-excatly-3-line-drive-code-interview-question",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    int reverse(int num){\\n        int rev=0;\\n        while(num!=0){\\n            rev = rev*10+(num%10);\\n            num/=10;\\n        }\\n        return rev;\\n    }\\n\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num==0){\\n            return true;\\n        }\\n\\n        for(int i=1; i<num; i++){\\n            if(i+reverse(i)==num){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Enumeration"
                ],
                "code": "```\\nclass Solution {\\n    int reverse(int num){\\n        int rev=0;\\n        while(num!=0){\\n            rev = rev*10+(num%10);\\n            num/=10;\\n        }\\n        return rev;\\n    }\\n\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num==0){\\n            return true;\\n        }\\n\\n        for(int i=1; i<num; i++){\\n            if(i+reverse(i)==num){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981011,
                "title": "java-straightforward-solution",
                "content": "# Intuition\\n- Just make two Strings: one is i, another one is num - i.\\n- Add zeros to the front until the lengths of two strings are equal.\\n- Then compare chars from the left of **a** with chars from the right of **b**. If there is a match with the condition, then return true. If no match at all - return false.\\n\\n\\n# Complexity\\n- Time complexity: O(N * lenMax), since lenMax is 6 => O(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for (int i = 0; i <= num; i++) {\\n            String a = (num - i) + \"\", b = i + \"\";\\n            int lenMax = Math.max(a.length(), b.length());\\n            while (a.length() < lenMax) a = \"0\" + a;\\n            while (b.length() < lenMax) b = \"0\" + b;\\n            int count = 0;\\n            for (int j = 0; j < lenMax; j++) if (a.charAt(j) == b.charAt(lenMax - 1 - j)) count++;\\n            if (count == lenMax) return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for (int i = 0; i <= num; i++) {\\n            String a = (num - i) + \"\", b = i + \"\";\\n            int lenMax = Math.max(a.length(), b.length());\\n            while (a.length() < lenMax) a = \"0\" + a;\\n            while (b.length() < lenMax) b = \"0\" + b;\\n            int count = 0;\\n            for (int j = 0; j < lenMax; j++) if (a.charAt(j) == b.charAt(lenMax - 1 - j)) count++;\\n            if (count == lenMax) return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3949073,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTraverse from 0 to num .\\nReverse every no .\\nif(rev+no == num)\\nreturn true\\nelse \\nreturn false\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n       for(int i=0;i<=num;i++)\\n       {\\n           String x=Integer.toString(i);\\n           StringBuilder sb=new StringBuilder(x);\\n           sb.reverse();\\n           int no=Integer.parseInt(sb.toString());\\n           if(i+no==num)\\n           {\\n               return true;\\n           }\\n       }\\n       return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n       for(int i=0;i<=num;i++)\\n       {\\n           String x=Integer.toString(i);\\n           StringBuilder sb=new StringBuilder(x);\\n           sb.reverse();\\n           int no=Integer.parseInt(sb.toString());\\n           if(i+no==num)\\n           {\\n               return true;\\n           }\\n       }\\n       return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3944917,
                "title": "simple-program-easy-to-understand-simple-c-code-same-logic-for-other-languages-too",
                "content": "# Flow of Code\\n1. Taking the number randomly from 0 to num through loop.\\n2. For every number, finding it reverse and adding the number with its reverse.\\n3. If the added number and the result are same then return true or return false as answer.\\n\\n# Follow the Same Logic for other programming languages(C,Java,Python,etc...) too. \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num){\\n        int A,B;\\n        for(int i=0;i<=num;i++){\\n            A=i;\\n            if(A>=0 && A<=9)\\n                B=A;\\n            else{\\n                int j=A;\\n                B=0;\\n                while(j){\\n                    int m=j%10;\\n                    B=(B*10)+m;\\n                    j/=10;\\n                }\\n            }\\n            if(A+B==num)\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```\\n# Happy Coding...\\uD83E\\uDD1D",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num){\\n        int A,B;\\n        for(int i=0;i<=num;i++){\\n            A=i;\\n            if(A>=0 && A<=9)\\n                B=A;\\n            else{\\n                int j=A;\\n                B=0;\\n                while(j){\\n                    int m=j%10;\\n                    B=(B*10)+m;\\n                    j/=10;\\n                }\\n            }\\n            if(A+B==num)\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923954,
                "title": "light",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num==0:\\n            return True\\n        for i in range(num//2, num):\\n            if i+int(str(i)[::-1])==num:\\n                return True\\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num==0:\\n            return True\\n        for i in range(num//2, num):\\n            if i+int(str(i)[::-1])==num:\\n                return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3911420,
                "title": "easy-code-with-tc-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        int sum=0;\\n        if(num==0){\\n            return true;\\n        }\\n        for(int i=0;i<num;i++){\\n            String s=String.valueOf(i);\\n             StringBuilder sb=new StringBuilder(s);\\n             int k=Integer.valueOf(s);\\n             int l=Integer.valueOf(sb.reverse().toString());\\n             sum=k+l;\\n              if(sum==num){\\n                  return true;\\n              }\\n        }\\n        return false;\\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        int sum=0;\\n        if(num==0){\\n            return true;\\n        }\\n        for(int i=0;i<num;i++){\\n            String s=String.valueOf(i);\\n             StringBuilder sb=new StringBuilder(s);\\n             int k=Integer.valueOf(s);\\n             int l=Integer.valueOf(sb.reverse().toString());\\n             sum=k+l;\\n              if(sum==num){\\n                  return true;\\n              }\\n        }\\n        return false;\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3884602,
                "title": "easiest-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        boolean returnResult = false;\\n        int reversed = 0;\\n        int jCopy = 0;\\n        for(int j = num; j >= 0; j--) {\\n            jCopy = j;\\n            while (jCopy > 0) {\\n                reversed = reversed * 10 + jCopy % 10;\\n                jCopy /= 10;\\n            }\\n            if(j + reversed == num) {\\n                returnResult = true;\\n            }\\n            reversed = 0;\\n        }\\n        return returnResult;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        boolean returnResult = false;\\n        int reversed = 0;\\n        int jCopy = 0;\\n        for(int j = num; j >= 0; j--) {\\n            jCopy = j;\\n            while (jCopy > 0) {\\n                reversed = reversed * 10 + jCopy % 10;\\n                jCopy /= 10;\\n            }\\n            if(j + reversed == num) {\\n                returnResult = true;\\n            }\\n            reversed = 0;\\n        }\\n        return returnResult;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3881453,
                "title": "easy-cpp-bruteforce",
                "content": "# Intuition\\nThe intuition is to try all possible numbers from (num/2, num) basket. \\nUse a for loop for traverse all this number, reverse it. And check if that satifies the condtion. \\n\\n\\n# Code\\n```\\nclass Solution {\\n\\n// reverse number \\n\\nint reverseNum(int a){\\n    int reverse= 0 ; \\n\\n    while(a > 0){\\n        int rem =  a % 10; \\n        a = a/10;\\n\\n        // building number \\n        reverse = reverse * 10 + rem;  \\n    }\\n\\n    return reverse; \\n}\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n\\n        if(num == 0){\\n            return true; \\n        }\\n        \\n        for(int i = num/2 ; i < num ; i++){\\n            int reverse = reverseNum(i); \\n            if(i + reverse == num){\\n                return true; \\n            }\\n        }\\n\\n        return false; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n\\n// reverse number \\n\\nint reverseNum(int a){\\n    int reverse= 0 ; \\n\\n    while(a > 0){\\n        int rem =  a % 10; \\n        a = a/10;\\n\\n        // building number \\n        reverse = reverse * 10 + rem;  \\n    }\\n\\n    return reverse; \\n}\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n\\n        if(num == 0){\\n            return true; \\n        }\\n        \\n        for(int i = num/2 ; i < num ; i++){\\n            int reverse = reverseNum(i); \\n            if(i + reverse == num){\\n                return true; \\n            }\\n        }\\n\\n        return false; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3879670,
                "title": "python-quick-soln",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def sumOfNumberAndReverse(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: bool\\n        \"\"\"\\n\\n        n = num//2\\n\\n        while n <= num:\\n            if n + int(str(n)[::-1]) == num:\\n                return True\\n            n += 1    \\n        return False        \\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sumOfNumberAndReverse(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: bool\\n        \"\"\"\\n\\n        n = num//2\\n\\n        while n <= num:\\n            if n + int(str(n)[::-1]) == num:\\n                return True\\n            n += 1    \\n        return False        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3871811,
                "title": "simple-affordable-cheap-understanding-and-lovely-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, l: int) -> bool:\\n        \\n        flag = 0\\n        if l ==0:\\n            return True\\n        for i in range(1,l+1):\\n            s = str(i)\\n            s1 = s[::-1]\\n            if int(s) + int(s1) ==l:\\n                flag =1\\n        \\n        if flag == 1:\\n            return True\\n        else:\\n            return False\\n\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, l: int) -> bool:\\n        \\n        flag = 0\\n        if l ==0:\\n            return True\\n        for i in range(1,l+1):\\n            s = str(i)\\n            s1 = s[::-1]\\n            if int(s) + int(s1) ==l:\\n                flag =1\\n        \\n        if flag == 1:\\n            return True\\n        else:\\n            return False\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3861404,
                "title": "sum-of-number-and-its-reverse",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num==0)\\n        return true;\\n        for(int i=1;i<=num;i++)\\n        {\\n            String str = String.valueOf(i);\\n            String s = new String();\\n            if(i%10==0)\\n            {\\n                int k=i;\\n                while(k%10==0)\\n                {\\n                    s=s+\"0\";\\n                    k=k/10;\\n                }\\n            }\\n            s = s+String.valueOf(num-i);\\n            String str1 = new String();\\n            for(int j=s.length()-1;j>=0;j--)\\n            {\\n                str1=str1+s.charAt(j);\\n            }\\n            if(str.equals(str1))\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num==0)\\n        return true;\\n        for(int i=1;i<=num;i++)\\n        {\\n            String str = String.valueOf(i);\\n            String s = new String();\\n            if(i%10==0)\\n            {\\n                int k=i;\\n                while(k%10==0)\\n                {\\n                    s=s+\"0\";\\n                    k=k/10;\\n                }\\n            }\\n            s = s+String.valueOf(num-i);\\n            String str1 = new String();\\n            for(int j=s.length()-1;j>=0;j--)\\n            {\\n                str1=str1+s.charAt(j);\\n            }\\n            if(str.equals(str1))\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3860853,
                "title": "easy-c-solution-brute-force",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i=num;i>=num/2;i--){\\n            string temp=to_string(i);\\n            reverse(temp.begin(),temp.end());\\n            int rnum = stoi(temp);\\n            if(i+rnum==num) return true;\\n        }\\n\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i=num;i>=num/2;i--){\\n            string temp=to_string(i);\\n            reverse(temp.begin(),temp.end());\\n            int rnum = stoi(temp);\\n            if(i+rnum==num) return true;\\n        }\\n\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3826588,
                "title": "easy-to-understand-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n      \\n         for(int i=0; i<=num; i++)\\n       {\\n             int n = i , j = 0;\\n             while( 0 < n )\\n            {\\n                j = j*10;\\n                j = j + n%10;\\n                n = n/10;\\n             }\\n\\n           if( i+j == num ) return true;\\n        }\\n        \\n      return false;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n      \\n         for(int i=0; i<=num; i++)\\n       {\\n             int n = i , j = 0;\\n             while( 0 < n )\\n            {\\n                j = j*10;\\n                j = j + n%10;\\n                n = n/10;\\n             }\\n\\n           if( i+j == num ) return true;\\n        }\\n        \\n      return false;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3816396,
                "title": "simple-solution-using-reverse-number-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Iterate through the loop from 1 to given number\\n2. Find the reverse of the number(i.e, i) in the loop. And add them to check where it is equal to given number or not.\\n\\n\\n# Complexity\\n- Time complexity: O(nlogn)\\n\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int n){\\n        int rem, sum = 0;\\n        while(n!=0){\\n            rem = n % 10;\\n            sum = sum*10 + rem;\\n            n /= 10;\\n        }\\n        return sum;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0; i<=num; i++){\\n            int rev = reverse(i);\\n            if (rev+i == num)\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int n){\\n        int rem, sum = 0;\\n        while(n!=0){\\n            rem = n % 10;\\n            sum = sum*10 + rem;\\n            n /= 10;\\n        }\\n        return sum;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0; i<=num; i++){\\n            int rev = reverse(i);\\n            if (rev+i == num)\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3807756,
                "title": "brute-force-approach",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$ \\n\\n- Space complexity: $$O(1)$$ \\n\\n# Code\\n```\\nclass Solution {\\n    int reverse(int i) //function to calculate reverse of each number\\n    {\\n        int rev = 0;\\n        while(i)\\n        {\\n            rev = rev*10 + i%10;\\n            i /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i=num/2; i <= num; i++)\\n        {\\n            if(i + reverse(i) == num) //if it is possible\\n             return true;             //then return true\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    int reverse(int i) //function to calculate reverse of each number\\n    {\\n        int rev = 0;\\n        while(i)\\n        {\\n            rev = rev*10 + i%10;\\n            i /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i=num/2; i <= num; i++)\\n        {\\n            if(i + reverse(i) == num) //if it is possible\\n             return true;             //then return true\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3781860,
                "title": "sum-of-number-and-its-reverse-easy-approach",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) \\n    {\\n        for(int i = 0; i<=num; i++)\\n        {\\n            string s = to_string(i);\\n            reverse(s.begin(),s.end());\\n            int n = stoi(s);\\n\\n            if(i+n==num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) \\n    {\\n        for(int i = 0; i<=num; i++)\\n        {\\n            string s = to_string(i);\\n            reverse(s.begin(),s.end());\\n            int n = stoi(s);\\n\\n            if(i+n==num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3781562,
                "title": "java-easy-code-144ms-91-beat",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBrute Force Approach\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public static boolean reverse(int n,int num){\\n        int temp=n;\\n        int r=0,sum=0;\\n        while(temp>0){\\n            r=temp%10;\\n            sum=sum*10+r;\\n            temp/=10;\\n        }\\n        if(sum+n==num)\\n            return true;\\n        return false;\\n    }\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for(int i=num/2;i<=num;i++){\\n            if(reverse(i,num)){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public static boolean reverse(int n,int num){\\n        int temp=n;\\n        int r=0,sum=0;\\n        while(temp>0){\\n            r=temp%10;\\n            sum=sum*10+r;\\n            temp/=10;\\n        }\\n        if(sum+n==num)\\n            return true;\\n        return false;\\n    }\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for(int i=num/2;i<=num;i++){\\n            if(reverse(i,num)){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3754942,
                "title": "shortest-easiest-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int n) {\\n        vector<int>a,b;\\n        vector<string>p;\\n        for(int i=0;i<=n;i++)a.push_back(i);\\n        for(int i=0;i<a.size();i++){\\n            string k=to_string(a[i]);\\n            reverse(k.begin(),k.end());\\n            p.push_back(k);\\n        }\\n        for(int i=0;i<p.size();i++)b.push_back(stoi(p[i]));\\n        for(int i=0;i<a.size();i++)if(a[i]+b[i]==n)return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int n) {\\n        vector<int>a,b;\\n        vector<string>p;\\n        for(int i=0;i<=n;i++)a.push_back(i);\\n        for(int i=0;i<a.size();i++){\\n            string k=to_string(a[i]);\\n            reverse(k.begin(),k.end());\\n            p.push_back(k);\\n        }\\n        for(int i=0;i<p.size();i++)b.push_back(stoi(p[i]));\\n        for(int i=0;i<a.size();i++)if(a[i]+b[i]==n)return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3752449,
                "title": "python-solution-very-simple-just-a-simple-loop-an-d-no-bullshit",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num==0:\\n            return True\\n        for i in range(num):\\n            if int(str(i)[::-1])+(i)==num:\\n                return True\\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num==0:\\n            return True\\n        for i in range(num):\\n            if int(str(i)[::-1])+(i)==num:\\n                return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3735173,
                "title": "python-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:o(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num==0:\\n            return True\\n        for i in range(1,num):\\n             if i + int(str(i)[::-1]) == num:\\n                return True\\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num==0:\\n            return True\\n        for i in range(1,num):\\n             if i + int(str(i)[::-1]) == num:\\n                return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3716763,
                "title": "javascript-easy-solution-with-7-lines-of-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {boolean}\\n */\\nvar sumOfNumberAndReverse = function(num) {\\n    for(let integer = 0; integer <= num; integer++){\\n        const reversedInteger = Number(String(integer).split(\\'\\').reverse().join(\\'\\'))\\n        if(integer + reversedInteger === num){\\n            return true\\n        }\\n    }\\n    return false\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {boolean}\\n */\\nvar sumOfNumberAndReverse = function(num) {\\n    for(let integer = 0; integer <= num; integer++){\\n        const reversedInteger = Number(String(integer).split(\\'\\').reverse().join(\\'\\'))\\n        if(integer + reversedInteger === num){\\n            return true\\n        }\\n    }\\n    return false\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3714894,
                "title": "5-lines-of-python-beats-54-of-y-all",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->I whiteboarded this a bit to see if there was a pattern to the answers.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->I didn\\'t see any pattern that was more efficient than simply brute forcing it! \\n</br>It starts at the number and checks every number i down to 0. Converts it into a string, reverses it, then converts it back into an integer. Checks if i plus its reverse add up to num. If so, it returns True.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(num,-1,-1):\\n            revnum = int(str(i)[::-1])\\n            if i + revnum == num:\\n                return True\\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(num,-1,-1):\\n            revnum = int(str(i)[::-1])\\n            if i + revnum == num:\\n                return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3681893,
                "title": "easy-and-understandable-approach-peeps",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N/2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nPlease Approach If useful,Gaizz\\nIf any doubt feel free to reach me.\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        n=num//2\\n        if(num==0):\\n            return True\\n        while(n<num):\\n            st=str(n)\\n            rev=int(st[::-1])\\n            if rev+n==num:\\n                return True\\n            n+=1\\n        return False\\n```",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "Enumeration"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        n=num//2\\n        if(num==0):\\n            return True\\n        while(n<num):\\n            st=str(n)\\n            rev=int(st[::-1])\\n            if rev+n==num:\\n                return True\\n            n+=1\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3670438,
                "title": "string-to-integer-conversion",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num==0) return true;\\n        for(int i=1;i<num;i++){\\n            StringBuilder n = new StringBuilder(i+\"\");\\n            StringBuilder nRev = new StringBuilder(n.toString());\\n            nRev = nRev.reverse();\\n            if(Integer.parseInt(n.toString())+Integer.parseInt(nRev.toString())==num) return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num==0) return true;\\n        for(int i=1;i<num;i++){\\n            StringBuilder n = new StringBuilder(i+\"\");\\n            StringBuilder nRev = new StringBuilder(n.toString());\\n            nRev = nRev.reverse();\\n            if(Integer.parseInt(n.toString())+Integer.parseInt(nRev.toString())==num) return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3658696,
                "title": "sum-of-number-and-its-reverse",
                "content": "Simple Approach\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num==0 || num==2 || num==4 || num==6 || num==8 || num==10)\\n        return true;\\n        if(num==1 || num==3 || num==5 || num==7 || num==9)\\n        return false;\\n        int half=num/2;\\n        int t=0,sum=0,r=0;\\n        for(int i=num;i>=0;i--)\\n        {\\n            t=i;\\n            sum=0;\\n            while(t>0)\\n            {\\n                r=t%10;\\n                sum=sum*10+r;\\n                t=t/10;\\n            }\\n            if(sum+i==num)\\n             return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num==0 || num==2 || num==4 || num==6 || num==8 || num==10)\\n        return true;\\n        if(num==1 || num==3 || num==5 || num==7 || num==9)\\n        return false;\\n        int half=num/2;\\n        int t=0,sum=0,r=0;\\n        for(int i=num;i>=0;i--)\\n        {\\n            t=i;\\n            sum=0;\\n            while(t>0)\\n            {\\n                r=t%10;\\n                sum=sum*10+r;\\n                t=t/10;\\n            }\\n            if(sum+i==num)\\n             return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3653386,
                "title": "sum-of-number-and-its-reverse",
                "content": "# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num==0:\\n            return True\\n        else:\\n            for i in range(1,num):\\n                a = str(i)\\n                if i + int(a[::-1])==num:\\n                    return True\\n            return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num==0:\\n            return True\\n        else:\\n            for i in range(1,num):\\n                a = str(i)\\n                if i + int(a[::-1])==num:\\n                    return True\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3639744,
                "title": "c-solution-with-brute-force-approach",
                "content": "```class Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;++i){\\n            int n = i,rev = 0;\\n            while(n){\\n                rev = rev*10+n%10;\\n                n /= 10;\\n            }\\n            if(i+rev == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math",
                    "Enumeration"
                ],
                "code": "```class Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;++i){\\n            int n = i,rev = 0;\\n            while(n){\\n                rev = rev*10+n%10;\\n                n /= 10;\\n            }\\n            if(i+rev == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3635270,
                "title": "sum-of-the-number-and-its-reverse",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num==0:\\n            return True\\n        for i in range(1,num):\\n            if i+int(str(i)[::-1])==num:\\n                return True\\n        return False\\n```",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "Enumeration"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num==0:\\n            return True\\n        for i in range(1,num):\\n            if i+int(str(i)[::-1])==num:\\n                return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3578986,
                "title": "python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(num+1):\\n            a=str(i)\\n            a=a[::-1]\\n            if i + int(a) == num:\\n                return True\\n        return False\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(num+1):\\n            a=str(i)\\n            a=a[::-1]\\n            if i + int(a) == num:\\n                return True\\n        return False\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3578985,
                "title": "python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(num+1):\\n            a=str(i)\\n            a=a[::-1]\\n            if i + int(a) == num:\\n                return True\\n        return False\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(num+1):\\n            a=str(i)\\n            a=a[::-1]\\n            if i + int(a) == num:\\n                return True\\n        return False\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3567494,
                "title": "worst-solution-ever-must-see",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int n) {\\n        for(int i=0;i<=n;i++){\\n            if(i+rev(i)==n){\\n                System.out.printf(\"%d %d\",i,rev(i));\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    public int rev(int n){\\n        int temp=0;\\n        while(n!=0){\\n            temp=temp*10+n%10;\\n            n/=10;\\n        }\\n        return temp;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int n) {\\n        for(int i=0;i<=n;i++){\\n            if(i+rev(i)==n){\\n                System.out.printf(\"%d %d\",i,rev(i));\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    public int rev(int n){\\n        int temp=0;\\n        while(n!=0){\\n            temp=temp*10+n%10;\\n            n/=10;\\n        }\\n        return temp;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3556796,
                "title": "easy-and-compact-method-to-solve-the-problem",
                "content": "# Intuition\\nI used a \"brute\" method to solve it, but also tried to limit the time it took to run\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nI firsty looped from $$0$$ up to $$n + 1$$ . I then turn  $$i$$ to a string reverse it and sum it up with the original $$i$$. Then if the sum equals $$n$$ I break the loop and return $$True$$\\n\\nOtherwise if no match is found, after the end of the loop it returns $$False$$\\n\\nTo make the algorithm a little more time efficient a set a $$min$$ var which determines from where the loop should start.\\nThe code is not very clear on how it works but I will try to summarise it. It calculates the length $$str(n//2)$$ and then it multiplies it by 10 => $$min=len(str(n//2)) * 10$$ \\n\\nI lastly, multiply the whole thing with a bool that ensures that if the var n is small enough (for example 12), the min is automatically 0 and not 10.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n$$n* log(n) $$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n$$n* log(n) $$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def sumOfNumberAndReverse(self, num):\\n        min_ = 1*(len(str(num//2) *10*int(num//2 > 10) ) )\\n        \\n        for i in range(min_,num+1):\\n            if i + int(str(i)[::-1]) == num:\\n                return True\\n        \\n        return False\\n\\n\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sumOfNumberAndReverse(self, num):\\n        min_ = 1*(len(str(num//2) *10*int(num//2 > 10) ) )\\n        \\n        for i in range(min_,num+1):\\n            if i + int(str(i)[::-1]) == num:\\n                return True\\n        \\n        return False\\n\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3535313,
                "title": "c-easy-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int reverse(int n ){\\n        int ans = 0;\\n        while(n > 0){\\n            ans = ans*10 + n%10;\\n            n /= 10;\\n        }\\n        return ans;\\n    }\\n\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i=0;i<=num;i++){\\n            int rev = reverse(i);\\n            if(i + rev == num){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    int reverse(int n ){\\n        int ans = 0;\\n        while(n > 0){\\n            ans = ans*10 + n%10;\\n            n /= 10;\\n        }\\n        return ans;\\n    }\\n\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i=0;i<=num;i++){\\n            int rev = reverse(i);\\n            if(i + rev == num){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3524010,
                "title": "using-for-loop-in-simple-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) \\n    {\\n        if(num==0)\\n        {\\n            return true;\\n        }\\n        int flag=0;\\n        for(int i=1;i<num;i++)\\n        {\\n            int copy=i;\\n            int rev=0;\\n            while(copy>0)\\n            {\\n                rev=(rev*10)+(copy%10);\\n                copy=copy/10;\\n            }\\n            if(i+rev==num)\\n            {\\n                 flag=1;\\n                 break;\\n            }\\n            \\n        }\\n        if(flag==0)\\n        {\\n            return false;\\n        }\\n        else\\n        {\\n            return true;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) \\n    {\\n        if(num==0)\\n        {\\n            return true;\\n        }\\n        int flag=0;\\n        for(int i=1;i<num;i++)\\n        {\\n            int copy=i;\\n            int rev=0;\\n            while(copy>0)\\n            {\\n                rev=(rev*10)+(copy%10);\\n                copy=copy/10;\\n            }\\n            if(i+rev==num)\\n            {\\n                 flag=1;\\n                 break;\\n            }\\n            \\n        }\\n        if(flag==0)\\n        {\\n            return false;\\n        }\\n        else\\n        {\\n            return true;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3517893,
                "title": "complex-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(num):\\n            l=str(i)\\n            l=l[::-1]\\n            l=int(l)\\n            if(i+l==num):\\n                return \"true\"\\n                break\\n        if(num==0):\\n            return (num==0)\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(num):\\n            l=str(i)\\n            l=l[::-1]\\n            l=int(l)\\n            if(i+l==num):\\n                return \"true\"\\n                break\\n        if(num==0):\\n            return (num==0)\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3507398,
                "title": "easy-solution-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n         for (int i = 0; i <= num; i++) {  // loop until the num\\n\\t\\t\\t int reverse= reverse(i);\\n\\t\\t\\t if(i+reverse== num) { // if any point number + num reverse== num\\n\\t\\t\\t\\t return true; }\\t\\t\\t \\n\\t\\t\\t \\n\\t\\t }\\n\\t\\t\\t \\n\\t\\t\\t return false;\\n\\t\\t \\n\\t\\t \\n}\\n\\tprivate static int reverse(int num) {\\n\\t\\tint r=0,s =0;\\n\\t\\t\\n\\t\\twhile(num>0) {  // get reverse of every num\\n\\t\\t\\tr= num%10;\\n\\t\\t\\ts= (s*10)+r;\\n\\t\\t\\tnum/=10;  }\\n\\t\\t\\n\\t\\treturn s;}\\n\\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n         for (int i = 0; i <= num; i++) {  // loop until the num\\n\\t\\t\\t int reverse= reverse(i);\\n\\t\\t\\t if(i+reverse== num) { // if any point number + num reverse== num\\n\\t\\t\\t\\t return true; }\\t\\t\\t \\n\\t\\t\\t \\n\\t\\t }\\n\\t\\t\\t \\n\\t\\t\\t return false;\\n\\t\\t \\n\\t\\t \\n}\\n\\tprivate static int reverse(int num) {\\n\\t\\tint r=0,s =0;\\n\\t\\t\\n\\t\\twhile(num>0) {  // get reverse of every num\\n\\t\\t\\tr= num%10;\\n\\t\\t\\ts= (s*10)+r;\\n\\t\\t\\tnum/=10;  }\\n\\t\\t\\n\\t\\treturn s;}\\n\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3503256,
                "title": "easy-brute-force-approach-for-beginner-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        int x,y;\\n        for(int i=0;i<=1e5;i++)\\n        {\\n            x=i,y=0;\\n            while(x!=0)\\n            {\\n                y=y*10+(x%10);\\n                x/=10;\\n            }\\n            if(i+y==num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        int x,y;\\n        for(int i=0;i<=1e5;i++)\\n        {\\n            x=i,y=0;\\n            while(x!=0)\\n            {\\n                y=y*10+(x%10);\\n                x/=10;\\n            }\\n            if(i+y==num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3495470,
                "title": "simple-solution-very-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMake another function to reverse number the cheak for every number till you find the answer \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num==0)return true;\\n        for(int i=0;i<num;i++){\\n            if(i+rev(i)==num){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    public int rev(int n){\\n        int ans=0;\\n        while(n!=0){\\n            int a=n%10;\\n            ans=ans*10+a;\\n            n=n/10;\\n\\n        }\\n        return ans;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if(num==0)return true;\\n        for(int i=0;i<num;i++){\\n            if(i+rev(i)==num){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    public int rev(int n){\\n        int ans=0;\\n        while(n!=0){\\n            int a=n%10;\\n            ans=ans*10+a;\\n            n=n/10;\\n\\n        }\\n        return ans;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3479017,
                "title": "c-beginner-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nint reverse(int num){\\n    int ans = 0;\\n    int rem;\\n    while(num>0){\\n        rem = num%10;\\n        ans = ans*10+rem;\\n        num = num/10;\\n    }\\n    return ans;\\n}\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i = 0;i<=num;i++){\\n            if(i+reverse(i)==num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nint reverse(int num){\\n    int ans = 0;\\n    int rem;\\n    while(num>0){\\n        rem = num%10;\\n        ans = ans*10+rem;\\n        num = num/10;\\n    }\\n    return ans;\\n}\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i = 0;i<=num;i++){\\n            if(i+reverse(i)==num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457848,
                "title": "sum-of-number-and-its-reverse",
                "content": "----------------- Easy C++ Solution --------------\\n\\n# Complexity\\n- Time complexity: $$O(num)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nbool sumOfNumberAndReverse(int num) {\\n    for (int i = num / 2; i <= num; ++i)\\n      if (num == i + reversed(i))\\n        return true;\\n    return false;\\n  }\\n\\n private:\\n  int reversed(int num) {\\n    int ans = 0;\\n    while (num > 0) {\\n      ans = ans * 10 + num % 10;\\n      num /= 10;\\n    }\\n    return ans;\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nbool sumOfNumberAndReverse(int num) {\\n    for (int i = num / 2; i <= num; ++i)\\n      if (num == i + reversed(i))\\n        return true;\\n    return false;\\n  }\\n\\n private:\\n  int reversed(int num) {\\n    int ans = 0;\\n    while (num > 0) {\\n      ans = ans * 10 + num % 10;\\n      num /= 10;\\n    }\\n    return ans;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3429066,
                "title": "understandable-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        int a,b;\\n        for(int i=0;i<=1e5;i++)\\n        {\\n            a=i,b=0;\\n            while(a)\\n            {\\n                b=(b*10)+(a%10);\\n                a=a/10;\\n            }\\n            if(b+i==num)\\n            {\\n                return true;\\n            }\\n            \\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        int a,b;\\n        for(int i=0;i<=1e5;i++)\\n        {\\n            a=i,b=0;\\n            while(a)\\n            {\\n                b=(b*10)+(a%10);\\n                a=a/10;\\n            }\\n            if(b+i==num)\\n            {\\n                return true;\\n            }\\n            \\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3425830,
                "title": "easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def sumOfNumberAndReverse(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: bool\\n        \"\"\"\\n        if num == 0:\\n            return True\\n        for i in range(1, int(num/2)+1):\\n            reverse = num - i\\n            if int(str(i)) == int(str(reverse)[::-1]) or int(str(i)[::-1]) == int(str(reverse)):\\n                return True\\n        return False\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sumOfNumberAndReverse(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: bool\\n        \"\"\"\\n        if num == 0:\\n            return True\\n        for i in range(1, int(num/2)+1):\\n            reverse = num - i\\n            if int(str(i)) == int(str(reverse)[::-1]) or int(str(i)[::-1]) == int(str(reverse)):\\n                return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3425801,
                "title": "c-bf",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i = 0; i <= num; i++){\\n            int a = i;\\n            int b = i;\\n            string s = to_string(b);\\n            reverse(s.begin(), s.end());\\n            b = stoi(s);\\n            if(a + b == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        \\n        for(int i = 0; i <= num; i++){\\n            int a = i;\\n            int b = i;\\n            string s = to_string(b);\\n            reverse(s.begin(), s.end());\\n            b = stoi(s);\\n            if(a + b == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3400627,
                "title": "python-solution",
                "content": "\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num == 0 : return True \\n        for i in range(1,num+1):\\n            if i + int(str(i)[::-1]) == num: \\n                return True \\n        return False \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num == 0 : return True \\n        for i in range(1,num+1):\\n            if i + int(str(i)[::-1]) == num: \\n                return True \\n        return False \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3384253,
                "title": "typescript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction sumOfNumberAndReverse(num: number): boolean {\\n    let diff: number;\\n    for (let i = Math.floor(num / 2); i <= num; i++) {\\n        diff = num - i;\\n        let diffReverse = Number(String(diff).split(\\'\\').reverse().join(\\'\\'));\\n        let iReverse = Number(String(i).split(\\'\\').reverse().join(\\'\\'));\\n        \\n        if ( i === diffReverse || diff === iReverse) {\\n                return true;\\n            }  \\n    }\\n    return false;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction sumOfNumberAndReverse(num: number): boolean {\\n    let diff: number;\\n    for (let i = Math.floor(num / 2); i <= num; i++) {\\n        diff = num - i;\\n        let diffReverse = Number(String(diff).split(\\'\\').reverse().join(\\'\\'));\\n        let iReverse = Number(String(i).split(\\'\\').reverse().join(\\'\\'));\\n        \\n        if ( i === diffReverse || diff === iReverse) {\\n                return true;\\n            }  \\n    }\\n    return false;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3362479,
                "title": "c-beats-99-o-n-reverse-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n* Use reverse function\\n* iterate a loop until the given num\\n* Check if i + rev(i) == num then return true\\n* else false\\n* and a base condition where num = 0 return true;\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n* Brute Force\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    private:\\n    int reversearr(int a){\\n        int rev = 0;\\n        while(a!=0){\\n            rev = rev * 10 + a%10;\\n            a /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    bool sumOfNumberAndReverse(int n) {\\n        if(n ==0){\\n            return 1;\\n        }\\n        for(int i=1;i<=n;i++){\\n            if(i+reversearr(i) == n){\\n                return 1;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    private:\\n    int reversearr(int a){\\n        int rev = 0;\\n        while(a!=0){\\n            rev = rev * 10 + a%10;\\n            a /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    bool sumOfNumberAndReverse(int n) {\\n        if(n ==0){\\n            return 1;\\n        }\\n        for(int i=1;i<=n;i++){\\n            if(i+reversearr(i) == n){\\n                return 1;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3346568,
                "title": "solution-in-java-from-very-basic-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\niterating  the loop \\n \\n# Complexity\\n- Time complexity:\\nO(N)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        int i,flag=0;\\n        int revnum;\\n        for(i=0;i<=num;i++)\\n        {\\n          revnum = reverse(i);\\n          if(num==i+revnum)\\n          {\\n              flag=1;\\n              break;\\n          }\\n        }\\n        if(flag==1)\\n        {\\n            return true ;\\n        }\\n        else\\n        return false ;\\n    }\\n    static int reverse(int n)\\n    {\\n        int res=0,k;\\n        while(n!=0)\\n        {\\n            k=n%10;\\n            res=res*10+k;\\n            n=n/10;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        int i,flag=0;\\n        int revnum;\\n        for(i=0;i<=num;i++)\\n        {\\n          revnum = reverse(i);\\n          if(num==i+revnum)\\n          {\\n              flag=1;\\n              break;\\n          }\\n        }\\n        if(flag==1)\\n        {\\n            return true ;\\n        }\\n        else\\n        return false ;\\n    }\\n    static int reverse(int n)\\n    {\\n        int res=0,k;\\n        while(n!=0)\\n        {\\n            k=n%10;\\n            res=res*10+k;\\n            n=n/10;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3297930,
                "title": "slow-but-one-line",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        return num in map(lambda x: x + int(str(x)[::-1]), [i for i in range(num)]) or num == 0\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        return num in map(lambda x: x + int(str(x)[::-1]), [i for i in range(num)]) or num == 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3292470,
                "title": "nlogn-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool rec(int n,int num)\\n    {\\n        int x=n,sum=0;\\n        int rev=0;\\n        while(n!=0)\\n        {\\n            rev=rev*10+n%10;\\n            n/=10;\\n        }\\n        sum=x+rev;\\n        if(num==sum)\\n            return true;\\n        else \\n            return false;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++)\\n        {\\n            if(rec(i,num))\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool rec(int n,int num)\\n    {\\n        int x=n,sum=0;\\n        int rev=0;\\n        while(n!=0)\\n        {\\n            rev=rev*10+n%10;\\n            n/=10;\\n        }\\n        sum=x+rev;\\n        if(num==sum)\\n            return true;\\n        else \\n            return false;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++)\\n        {\\n            if(rec(i,num))\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3288110,
                "title": "c-easy-fast",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverseDigits(int num)\\n{\\n    int rev_num = 0;\\n    while (num > 0) {\\n        rev_num = rev_num * 10 + num % 10;\\n        num = num / 10;\\n    }\\n    return rev_num;\\n}\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num == 0) return true;\\n        else\\n        {\\n        for(int i=0;i<num;i++)\\n        {\\n            if(i + reverseDigits(i) == num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverseDigits(int num)\\n{\\n    int rev_num = 0;\\n    while (num > 0) {\\n        rev_num = rev_num * 10 + num % 10;\\n        num = num / 10;\\n    }\\n    return rev_num;\\n}\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num == 0) return true;\\n        else\\n        {\\n        for(int i=0;i<num;i++)\\n        {\\n            if(i + reverseDigits(i) == num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3269462,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nRun loop from 0 to last element of an array . At each element check whether the sum of that element and its reverse is equal to the given value num.. if it is equal return 1 otherwise 0...  In this reverse of a number is found seperately using function and every time we are calling for a particular element....\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint reverse(int num)\\n{\\n    int d,rev=0;\\n    while(num>0)\\n    {\\n        d=num%10;\\n        rev=(rev*10)+d;\\n        num=num/10;\\n    }\\n    return rev;\\n}\\nbool sumOfNumberAndReverse(int num){\\n    int r=reverse(num);\\n   for(int i=0;i<=num;i++)\\n   {\\n       if(i+reverse(i)==num)\\n           return 1;\\n   }\\n   return 0;\\n}\\n```\\n\\n\\nThank You.. Happy Learning !!\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint reverse(int num)\\n{\\n    int d,rev=0;\\n    while(num>0)\\n    {\\n        d=num%10;\\n        rev=(rev*10)+d;\\n        num=num/10;\\n    }\\n    return rev;\\n}\\nbool sumOfNumberAndReverse(int num){\\n    int r=reverse(num);\\n   for(int i=0;i<=num;i++)\\n   {\\n       if(i+reverse(i)==num)\\n           return 1;\\n   }\\n   return 0;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3262315,
                "title": "java-easy-string-o-n",
                "content": "\\n\\n# Approach\\nOn every iteration find two numbers, such that` num1+num2 = num` then use String builder class to reverse the second number. Compare `num1` with reversed `num2`. If equal then return true else false\\n\\nAlgorithm\\n\\nReturn true if num is 0 (edge case)\\nIterate through 1 to num - 1\\n- Braek the num into two numbers `i` and `num - i` \\n- `i + num -i` is always equals to `num`\\n- So, let the first number be `i`, convert it into string\\n- Second number be `num-i`, convert it into string and then reverse it\\n- `for example, 181 is our number, `\\n- `i= 140` ,` num-i `will be `41`, \\n- if we reverse `num-i` string we will get `14`\\n- Remove trailing zeros from first number, which is `i` and then compare it with the reversed string `num-i`\\n- Once all zeros are removed, match first with second. \\n\\n\\n\\n\\n# Complexity\\n- Time complexity:\\ne.g. $$O(n)$$ \\n\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if (num == 0) return true; //edge case\\n\\n        for(int i=1;i<=num-1;i++){\\n            String first = String.valueOf(i); //i\\n            String second = new StringBuilder(String.valueOf(num-i)).reverse().toString(); //num-i in string\\n            \\n            //remove all trailing zeros from i \\n            //Loop, until last character of i string is not 0\\n            while(first.charAt(first.length()-1)==\\'0\\'){\\n                first  = first.substring(0,first.length()-1);\\n            }\\n            \\n            \\n            if(first.equals(second)) return true; //compare\\n            \\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        if (num == 0) return true; //edge case\\n\\n        for(int i=1;i<=num-1;i++){\\n            String first = String.valueOf(i); //i\\n            String second = new StringBuilder(String.valueOf(num-i)).reverse().toString(); //num-i in string\\n            \\n            //remove all trailing zeros from i \\n            //Loop, until last character of i string is not 0\\n            while(first.charAt(first.length()-1)==\\'0\\'){\\n                first  = first.substring(0,first.length()-1);\\n            }\\n            \\n            \\n            if(first.equals(second)) return true; //compare\\n            \\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3259464,
                "title": "c-easy-solution-to-string",
                "content": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num == 0){\\n            return true;\\n        }\\n        for(int i = num/2;i < num;i++){\\n            string temp = to_string(num-i);   //181-140 ->  \"41\"\\n            string res = to_string(i);        //140     ->  \"140\"\\n            while(res.back() == \\'0\\'){         //\"140\"    \\n                res.pop_back();               //\"14\"     \\n            }\\n            reverse(res.begin(),res.end());   //\"41\"\\n            if(temp == res){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num == 0){\\n            return true;\\n        }\\n        for(int i = num/2;i < num;i++){\\n            string temp = to_string(num-i);   //181-140 ->  \"41\"\\n            string res = to_string(i);        //140     ->  \"140\"\\n            while(res.back() == \\'0\\'){         //\"140\"    \\n                res.pop_back();               //\"14\"     \\n            }\\n            reverse(res.begin(),res.end());   //\"41\"\\n            if(temp == res){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3253999,
                "title": "sum-of-number-and-it-s-reverse-easy-understanding-beginner-friendly",
                "content": "class Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num==0)\\n            return true;\\n        for(int i=num/2;i<num;i++){\\n            int rem=0,rev=0,n=i;\\n            while(n>0){\\n                rem=n%10;\\n                rev=rev*10+rem;\\n                n=n/10;\\n            }\\n            if(i+rev==num)\\n                return true;\\n        }\\n        return false;\\n    }\\n};",
                "solutionTags": [
                    "Math"
                ],
                "code": "class Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num==0)\\n            return true;\\n        for(int i=num/2;i<num;i++){\\n            int rem=0,rev=0,n=i;\\n            while(n>0){\\n                rem=n%10;\\n                rev=rev*10+rem;\\n                n=n/10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3239078,
                "title": "easy-and-fast-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n/2 + d)   --> where d is number of digits\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) \\n    {\\n       for(int i=num; i>=num/2; i--)\\n       {\\n           int n = i, rev=0;\\n           while(n>0)\\n           {\\n               rev = rev*10 + (n%10);\\n               n /= 10;\\n           }\\n\\n           if(i+rev == num)\\n               return true;\\n       } \\n       return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) \\n    {\\n       for(int i=num; i>=num/2; i--)\\n       {\\n           int n = i, rev=0;\\n           while(n>0)\\n           {\\n               rev = rev*10 + (n%10);\\n               n /= 10;\\n           }\\n\\n           if(i+rev == num)\\n               return true;\\n       } \\n       return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3220779,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++){\\n            int r=i;\\n            int l=0;\\n               while(r!=0){\\n                l=l*10+r%10;\\n                r=r/10;\\n               }\\n             if(l+i==num)\\n             return true;\\n             \\n\\n        }\\n        return false;\\n    }\\n}\\n\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++){\\n            int r=i;\\n            int l=0;\\n               while(r!=0){\\n                l=l*10+r%10;\\n                r=r/10;\\n               }\\n             if(l+i==num)\\n             return true;\\n             \\n\\n        }\\n        return false;\\n    }\\n}\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3218384,
                "title": "python-brute-force-technique-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(num+1):\\n            if i + int(str(i)[::-1]) == num:\\n                return True\\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        for i in range(num+1):\\n            if i + int(str(i)[::-1]) == num:\\n                return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3218072,
                "title": "easy-solution-for-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num ==0:\\n            return True\\n        \\n        for i in range(num//2, num):\\n            a = str(i)\\n            b = a[::-1]\\n            if (i+int(b)==num):\\n                return True\\n                break\\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        if num ==0:\\n            return True\\n        \\n        for i in range(num//2, num):\\n            a = str(i)\\n            b = a[::-1]\\n            if (i+int(b)==num):\\n                return True\\n                break\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3215369,
                "title": "easy-c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num ==0){\\n            return true;\\n        }\\n        else{\\n            for(int i=0;i<num;i++){\\n                string ans = to_string(i);\\n                reverse(ans.begin(),ans.end());\\n                if(i + stoi(ans) == num){\\n                    return true;\\n                }\\n            }\\n            return false;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num ==0){\\n            return true;\\n        }\\n        else{\\n            for(int i=0;i<num;i++){\\n                string ans = to_string(i);\\n                reverse(ans.begin(),ans.end());\\n                if(i + stoi(ans) == num){\\n                    return true;\\n                }\\n            }\\n            return false;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3194681,
                "title": "easy-c-solution-two-methods",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0; i<=num; i++)\\n        {\\n            int n = i;\\n            string temp = to_string(i);\\n            reverse(temp.begin(), temp.end());\\n            if(n + stoi(temp) == num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```\\n# Code\\n```\\nclass Solution {\\npublic:\\nint rev(int a)\\n{\\n    int temp = a;\\n    int reverse = 0;\\n    while(temp != 0)\\n    {\\n        int rem = temp%10;\\n        reverse = (reverse*10) + rem;\\n        temp = temp/10;\\n    }\\n    return reverse;\\n}\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0; i<=num; i++)\\n        {\\n            if(i + rev(i) == num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0; i<=num; i++)\\n        {\\n            int n = i;\\n            string temp = to_string(i);\\n            reverse(temp.begin(), temp.end());\\n            if(n + stoi(temp) == num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\nint rev(int a)\\n{\\n    int temp = a;\\n    int reverse = 0;\\n    while(temp != 0)\\n    {\\n        int rem = temp%10;\\n        reverse = (reverse*10) + rem;\\n        temp = temp/10;\\n    }\\n    return reverse;\\n}\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0; i<=num; i++)\\n        {\\n            if(i + rev(i) == num)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3193526,
                "title": "c-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) \\n    {\\n        for(int i = 0; i<=num; i++)\\n        {\\n            int n = i;\\n            string s = to_string(i);\\n            reverse(s.begin(), s.end());\\n            \\n            if(n + stoi(s) == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Enumeration"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) \\n    {\\n        for(int i = 0; i<=num; i++)\\n        {\\n            int n = i;\\n            string s = to_string(i);\\n            reverse(s.begin(), s.end());\\n            \\n            if(n + stoi(s) == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3185742,
                "title": "ok",
                "content": "```\\nbool sumOfNumberAndReverse(int n)\\n{\\n\\tfor(int i{}; i<=n; ++i)\\n\\t{\\n\\t\\tint r{};\\n\\t\\tfor(int t{i}; t; r=10*r+t%10, t/=10);\\t\\t\\t     \\n\\t\\tif(i+r==n) return true;\\n\\t}\\n   return false;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nbool sumOfNumberAndReverse(int n)\\n{\\n\\tfor(int i{}; i<=n; ++i)\\n\\t{\\n\\t\\tint r{};\\n\\t\\tfor(int t{i}; t; r=10*r+t%10, t/=10);\\t\\t\\t     \\n\\t\\tif(i+r==n) return true;\\n\\t}\\n   return false;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3185175,
                "title": "easy-to-understand-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        i=1\\n        if num==0:\\n            return True\\n        while i<num:\\n            a=str(i)\\n            a=a[::-1]\\n            a=int(a)\\n            if a+i==num:\\n                return True\\n            i+=1\\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        i=1\\n        if num==0:\\n            return True\\n        while i<num:\\n            a=str(i)\\n            a=a[::-1]\\n            a=int(a)\\n            if a+i==num:\\n                return True\\n            i+=1\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3179284,
                "title": "c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        int num = n, rev = 0;\\n        while(num != 0) {\\n            int d = num % 10;\\n            rev = (rev * 10) + d;\\n            num /= 10; \\n        }\\n        return rev;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i = 0; i <= num; i++) {\\n            if(i + reverse(i) == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        int num = n, rev = 0;\\n        while(num != 0) {\\n            int d = num % 10;\\n            rev = (rev * 10) + d;\\n            num /= 10; \\n        }\\n        return rev;\\n    }\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i = 0; i <= num; i++) {\\n            if(i + reverse(i) == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3177798,
                "title": "c",
                "content": "```\\nint reverse(int val){\\n    int ret = 0 ;\\n    while(val){\\n        ret = ret*10 + val%10 ;\\n        val /= 10 ;\\n    }\\n    return ret ;  \\n}\\nbool sumOfNumberAndReverse(int num){\\n    for(int i = num/2 ; i <= num; i++){\\n        if((i + reverse(i)) == num)\\n            return true ;\\n    }\\n    return false ;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint reverse(int val){\\n    int ret = 0 ;\\n    while(val){\\n        ret = ret*10 + val%10 ;\\n        val /= 10 ;\\n    }\\n    return ret ;  \\n}\\nbool sumOfNumberAndReverse(int num){\\n    for(int i = num/2 ; i <= num; i++){\\n        if((i + reverse(i)) == num)\\n            return true ;\\n    }\\n    return false ;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3175057,
                "title": "java-easy-solution",
                "content": "![image.png](https://assets.leetcode.com/users/images/64e5d665-09e7-4222-96c5-463d5086f0c4_1676187257.3941054.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\n\\n    public int reverse(int num) {\\n    int reversed = 0;\\n    \\n    while (num != 0) {\\n      int digit = num % 10;\\n      if (reversed > Integer.MAX_VALUE/10 || (reversed == Integer.MAX_VALUE / 10 && digit > 7)) {\\n        return 0;\\n      }\\n      if (reversed < Integer.MIN_VALUE/10 || (reversed == Integer.MIN_VALUE / 10 && digit < -8)) {\\n        return 0;\\n      }\\n      reversed = reversed * 10 + digit;\\n      num /= 10;\\n    }\\n    \\n    return reversed;\\n  }\\n\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++)\\n        {\\n            if(i + reverse(i) == num)\\n                return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    public int reverse(int num) {\\n    int reversed = 0;\\n    \\n    while (num != 0) {\\n      int digit = num % 10;\\n      if (reversed > Integer.MAX_VALUE/10 || (reversed == Integer.MAX_VALUE / 10 && digit > 7)) {\\n        return 0;\\n      }\\n      if (reversed < Integer.MIN_VALUE/10 || (reversed == Integer.MIN_VALUE / 10 && digit < -8)) {\\n        return 0;\\n      }\\n      reversed = reversed * 10 + digit;\\n      num /= 10;\\n    }\\n    \\n    return reversed;\\n  }\\n\\n    public boolean sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++)\\n        {\\n            if(i + reverse(i) == num)\\n                return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3161569,
                "title": "c-clean-code-short",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++)\\n        {\\n            int n=i;\\n            int c=0;\\n            while(n>0)\\n            {\\n                c=c*10+n%10;\\n                n=n/10;\\n            }\\n            if(c+i==num) return 1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i=0;i<=num;i++)\\n        {\\n            int n=i;\\n            int c=0;\\n            while(n>0)\\n            {\\n                c=c*10+n%10;\\n                n=n/10;\\n            }\\n            if(c+i==num) return 1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3161226,
                "title": "1-approach-both-python-cpp",
                "content": "\\n\\n# python\\n```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        i=0\\n        while i<=num:\\n            if i+int(str(i)[::-1])==num:\\n                return True\\n            i+=1\\n        return False\\n```\\n# cpp\\n```\\nclass Solution {\\nprivate:\\n    int reversed_num(int n){\\n        int rev=0;\\n        while(n>0){\\n            rev=rev*10+n%10;\\n            n/=10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num==0) return true;\\n        for(int i=1;i<=num;i++){\\n            if(i+reversed_num(i)==num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfNumberAndReverse(self, num: int) -> bool:\\n        i=0\\n        while i<=num:\\n            if i+int(str(i)[::-1])==num:\\n                return True\\n            i+=1\\n        return False\\n```\n```\\nclass Solution {\\nprivate:\\n    int reversed_num(int n){\\n        int rev=0;\\n        while(n>0){\\n            rev=rev*10+n%10;\\n            n/=10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        if(num==0) return true;\\n        for(int i=1;i<=num;i++){\\n            if(i+reversed_num(i)==num) return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3156393,
                "title": "c-golang",
                "content": "# Code\\n```\\n// C++\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i = num; i >= 0; i--) {\\n            int rev = 0;\\n            for(int j = i; j > 0; j /= 10) {\\n                rev = rev * 10 + (j % 10);\\n            }\\n            if(i + rev == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n\\n// Golang\\nfunc sumOfNumberAndReverse(num int) bool {\\n    for i := num; i >= 0; i-- {\\n        rev := 0\\n        for j := i; j > 0; j /= 10 {\\n            rev = rev * 10 + (j % 10)\\n        }\\n        if i + rev == num {return true}\\n    }\\n    return false\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Enumeration"
                ],
                "code": "```\\n// C++\\nclass Solution {\\npublic:\\n    bool sumOfNumberAndReverse(int num) {\\n        for(int i = num; i >= 0; i--) {\\n            int rev = 0;\\n            for(int j = i; j > 0; j /= 10) {\\n                rev = rev * 10 + (j % 10);\\n            }\\n            if(i + rev == num) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n\\n// Golang\\nfunc sumOfNumberAndReverse(num int) bool {\\n    for i := num; i >= 0; i-- {\\n        rev := 0\\n        for j := i; j > 0; j /= 10 {\\n            rev = rev * 10 + (j % 10)\\n        }\\n        if i + rev == num {return true}\\n    }\\n    return false\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1950553,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "Brute force accepted guys!"
                    },
                    {
                        "username": "Krishna0601",
                        "content": "Valid O(1) TC. Beats 99percent.\\n\\nIterate from 1 to 50000(which is 10**5/2) and perform reversal and addition operation for each i, store them all in a set( as searching in a set costs O(1)).Do it only for first testcase. And use that set for all the remaining testcases. \\n\\nCheck it out here : https://leetcode.com/problems/sum-of-number-and-its-reverse/solutions/2708657/o1-python/"
                    },
                    {
                        "username": "Vikad",
                        "content": "1. keep it simple brute-force will work [constraints are small]\n2. convert number to string it will make your job easy\n3. convert string back to number while checking and return true/false accordingly.\n"
                    },
                    {
                        "username": "Vikad",
                        "content": "[@neildeng0705] no overflow  it will work"
                    },
                    {
                        "username": "neildeng0705",
                        "content": "will this convert string back to number cause the overflow?\\n"
                    }
                ]
            },
            {
                "id": 1652409,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "Brute force accepted guys!"
                    },
                    {
                        "username": "Krishna0601",
                        "content": "Valid O(1) TC. Beats 99percent.\\n\\nIterate from 1 to 50000(which is 10**5/2) and perform reversal and addition operation for each i, store them all in a set( as searching in a set costs O(1)).Do it only for first testcase. And use that set for all the remaining testcases. \\n\\nCheck it out here : https://leetcode.com/problems/sum-of-number-and-its-reverse/solutions/2708657/o1-python/"
                    },
                    {
                        "username": "Vikad",
                        "content": "1. keep it simple brute-force will work [constraints are small]\n2. convert number to string it will make your job easy\n3. convert string back to number while checking and return true/false accordingly.\n"
                    },
                    {
                        "username": "Vikad",
                        "content": "[@neildeng0705] no overflow  it will work"
                    },
                    {
                        "username": "neildeng0705",
                        "content": "will this convert string back to number cause the overflow?\\n"
                    }
                ]
            },
            {
                "id": 1646796,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "Brute force accepted guys!"
                    },
                    {
                        "username": "Krishna0601",
                        "content": "Valid O(1) TC. Beats 99percent.\\n\\nIterate from 1 to 50000(which is 10**5/2) and perform reversal and addition operation for each i, store them all in a set( as searching in a set costs O(1)).Do it only for first testcase. And use that set for all the remaining testcases. \\n\\nCheck it out here : https://leetcode.com/problems/sum-of-number-and-its-reverse/solutions/2708657/o1-python/"
                    },
                    {
                        "username": "Vikad",
                        "content": "1. keep it simple brute-force will work [constraints are small]\n2. convert number to string it will make your job easy\n3. convert string back to number while checking and return true/false accordingly.\n"
                    },
                    {
                        "username": "Vikad",
                        "content": "[@neildeng0705] no overflow  it will work"
                    },
                    {
                        "username": "neildeng0705",
                        "content": "will this convert string back to number cause the overflow?\\n"
                    }
                ]
            }
        ]
    }
]