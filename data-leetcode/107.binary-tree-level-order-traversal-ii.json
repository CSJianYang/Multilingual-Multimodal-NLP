[
    {
        "title": "Reverse Integer",
        "question_content": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\n&nbsp;\nExample 1:\n\nInput: x = 123\nOutput: 321\n\nExample 2:\n\nInput: x = -123\nOutput: -321\n\nExample 3:\n\nInput: x = 120\nOutput: 21\n\n&nbsp;\nConstraints:\n\n\t-231 <= x <= 231 - 1",
        "solutions": [
            {
                "id": 4060,
                "title": "my-accepted-15-lines-of-code-for-java",
                "content": "Only 15 lines.\\nIf overflow exists, the new result will not equal previous one.\\nNo flags needed. No hard code like 0xf7777777 needed.\\nSorry for my bad english.\\n\\n    public int reverse(int x)\\n    {\\n        int result = 0;\\n\\n        while (x != 0)\\n        {\\n            int tail = x % 10;\\n            int newResult = result * 10 + tail;\\n            if ((newResult - tail) / 10 != result)\\n            { return 0; }\\n            result = newResult;\\n            x = x / 10;\\n        }\\n\\n        return result;\\n    }",
                "solutionTags": [],
                "code": "Only 15 lines.\\nIf overflow exists, the new result will not equal previous one.\\nNo flags needed. No hard code like 0xf7777777 needed.\\nSorry for my bad english.\\n\\n    public int reverse(int x)\\n    {\\n        int result = 0;\\n\\n        while (x != 0)\\n        {\\n            int tail = x % 10;\\n            int newResult = result * 10 + tail;\\n            if ((newResult - tail) / 10 != result)\\n            { return 0; }\\n            result = newResult;\\n            x = x / 10;\\n        }\\n\\n        return result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3099545,
                "title": "my-c-solution-beats-100-0ms-run-time",
                "content": "- Linkedin Profile (https://linkedin.com/in/ayush-kumar-a276a124a)\\n//-------------> \\uD83D\\uDC7B Pls Upvote if it is helpful for You \\uD83D\\uDC7B <-----------------//\\n# Approach\\n 1. First we decleare a variable r and initilise it to 0\\n2.  Then each time find remainder Using modulus Operator  \\n3. Then add remainder to r Lets Understand with example\\n\\n  \\n![WhatsApp Image 2023-01-26 at 2.59.34 AM.jpeg](https://assets.leetcode.com/users/images/bc5eef77-1e1f-4202-b0c6-68a62bff490c_1674682266.8555562.jpeg)\\n\\n - Then compare The value of  r  to check it is inside the 32-bit   integer range [-2^31, 2^31 - 1]   Then  return r     \\n - Otherwise return 0;\\n\\n<!-- Decribe your approach to solving the problem. -->\\n    - Space complexity:  O(1) \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code using 64 bit integer\\n``` \\nclass Solution {                      \\npublic:\\n    int reverse(int x) {\\n        long r=0;      // decleare r \\n        while(x){\\n         r=r*10+x%10; // find remainder and add its to r\\n         x=x/10;     // Update the value of x\\n        }\\n        if(r>INT_MAX || r<INT_MIN) return 0; // check range if r is outside the range then return 0  \\n        return int(r);  // if r in the 32 bit range then return r\\n    }\\n}; \\n``` \\n **   \\n  \\n# Code using 32 bit integer\\n``` \\nclass Solution {                      \\npublic:\\n    int reverse(int x) {\\n        int r=0;      // decleare r \\n        while(x){\\n         if (r>INT_MAX/10 || r<INT_MIN/10) return 0; // check 32 bit range if r is outside the range then return 0 \\n         r=r*10+x%10; // find remainder and add its to r\\n         x=x/10;     // Update the value of x\\n        } \\n        return r;  // if r in the 32 bit range then return r\\n    }\\n}; \\n``` \\n **  \\n                    \\n\\n---\\n\\n* \\uD83D\\uDC7B IF YOU LIKE THE SOLUTION THEN PLEASE UPVOTE MY SOLUTION BECAUSE IT GIVES ME MOTIVATION TO REGULARLY POST THE SOLUTION\\uD83D\\uDC7B*\\n![image.png](https://assets.leetcode.com/users/images/c4590f79-be9c-47da-b9ef-0428c9c509a6_1678435819.387464.png)\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "``` \\nclass Solution {                      \\npublic:\\n    int reverse(int x) {\\n        long r=0;      // decleare r \\n        while(x){\\n         r=r*10+x%10; // find remainder and add its to r\\n         x=x/10;     // Update the value of x\\n        }\\n        if(r>INT_MAX || r<INT_MIN) return 0; // check range if r is outside the range then return 0  \\n        return int(r);  // if r in the 32 bit range then return r\\n    }\\n}; \\n```\n``` \\nclass Solution {                      \\npublic:\\n    int reverse(int x) {\\n        int r=0;      // decleare r \\n        while(x){\\n         if (r>INT_MAX/10 || r<INT_MIN/10) return 0; // check 32 bit range if r is outside the range then return 0 \\n         r=r*10+x%10; // find remainder and add its to r\\n         x=x/10;     // Update the value of x\\n        } \\n        return r;  // if r in the 32 bit range then return r\\n    }\\n}; \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3136892,
                "title": "java-beat-100-well-explained-code",
                "content": "\\n# Approach\\nThis is a solution in Java that reverses an integer and checks if the result is within the range of a 32-bit signed integer.\\n\\nThe approach involves using a while loop to extract the last digit of the input integer x and add it to a variable finalNum. At each iteration, finalNum is multiplied by 10 so that the next extracted digit can be added as the next significant digit. After the loop, finalNum is divided by 10 to remove the extra trailing zero.\\n\\nNext, the solution checks if finalNum is greater than the maximum value of a 32-bit signed integer (Integer.MAX_VALUE) or less than its minimum value (Integer.MIN_VALUE). If either of these conditions is met, the function returns 0 as the result will not fit within the range of a 32-bit signed integer.\\n\\nFinally, if x is negative, the solution returns -1 * finalNum as a negative result. If x is positive, the solution returns finalNum as the final answer.\\n\\n\\n\\n\\n\\n# Time and Space Complexity\\n- Time complexity:\\nThe time complexity of this solution is O(log(x)) where x is the input integer. This is because each iteration of the while loop processes the last digit of x and reduces the size of x by a factor of 10. The number of iterations is logarithmic with respect to the size of x, thus making the time complexity O(log(x)).\\n\\n- Space complexity:\\nThe space complexity of this solution is O(1) because only a few variables are used (x, lastDig, and finalNum) and their sizes are constant and do not grow with the size of the input.\\n\\n![upvote.jpeg](https://assets.leetcode.com/users/images/db601c26-56ec-45f3-a400-2bf9e8a0192b_1675439531.9407325.jpeg)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        long finalNum = 0;\\n        while(x!=0){\\n            int lastDig = x%10;\\n            finalNum += lastDig;\\n            finalNum = finalNum*10;\\n            x= x/10;\\n        }\\n        finalNum = finalNum/10;\\n        if(finalNum > Integer.MAX_VALUE || finalNum<Integer.MIN_VALUE){\\n            return 0;\\n        }\\n        if(x<0){\\n            return (int)(-1*finalNum);\\n        }\\n        return (int)finalNum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        long finalNum = 0;\\n        while(x!=0){\\n            int lastDig = x%10;\\n            finalNum += lastDig;\\n            finalNum = finalNum*10;\\n            x= x/10;\\n        }\\n        finalNum = finalNum/10;\\n        if(finalNum > Integer.MAX_VALUE || finalNum<Integer.MIN_VALUE){\\n            return 0;\\n        }\\n        if(x<0){\\n            return (int)(-1*finalNum);\\n        }\\n        return (int)finalNum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 132861,
                "title": "3-lines-python-solution",
                "content": "```python3\\nclass Solution:\\n    def reverse(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        sign = [1,-1][x < 0]\\n        rst = sign * int(str(abs(x))[::-1])\\n        return rst if -(2**31)-1 < rst < 2**31 else 0\\n```",
                "solutionTags": [],
                "code": "```python3\\nclass Solution:\\n    def reverse(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        sign = [1,-1][x < 0]\\n        rst = sign * int(str(abs(x))[::-1])\\n        return rst if -(2**31)-1 < rst < 2**31 else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4056,
                "title": "very-short-7-lines-and-elegant-solution",
                "content": "```    \\npublic int reverse(int x) {\\n        long rev= 0;\\n        while( x != 0){\\n            rev= rev*10 + x % 10;\\n            x= x/10;\\n            if( rev > Integer.MAX_VALUE || rev < Integer.MIN_VALUE)\\n                return 0;\\n        }\\n        return (int) rev;\\n    }\\n```\\n\\t\\t\\n**Update: Not using long:**\\n\\n```\\n  public int reverse(int x) {\\n        int prevRev = 0 , rev= 0;\\n        while( x != 0){\\n            rev= rev*10 + x % 10;\\n            if((rev - x % 10) / 10 != prevRev){\\n                return 0;\\n            }\\n            prevRev = rev;\\n            x= x/10;\\n        }\\n        return rev;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```    \\npublic int reverse(int x) {\\n        long rev= 0;\\n        while( x != 0){\\n            rev= rev*10 + x % 10;\\n            x= x/10;\\n            if( rev > Integer.MAX_VALUE || rev < Integer.MIN_VALUE)\\n                return 0;\\n        }\\n        return (int) rev;\\n    }\\n```\n```\\n  public int reverse(int x) {\\n        int prevRev = 0 , rev= 0;\\n        while( x != 0){\\n            rev= rev*10 + x % 10;\\n            if((rev - x % 10) / 10 != prevRev){\\n                return 0;\\n            }\\n            prevRev = rev;\\n            x= x/10;\\n        }\\n        return rev;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055,
                "title": "golfing-in-python",
                "content": "Get the `s`ign, get the `r`eversed absolute integer, and return their product if `r` didn't \"overflow\".\\n\\n    def reverse(self, x):\\n        s = cmp(x, 0)\\n        r = int(`s*x`[::-1])\\n        return s*r * (r < 2**31)\\n\\nAs compressed one-liner, for potential comparison:\\n\\n    def reverse(self, x):\\n        s=cmp(x,0);r=int(`s*x`[::-1]);return(r<2**31)*s*r\\n\\nAnybody got something shorter?",
                "solutionTags": [
                    "Python"
                ],
                "code": "Get the `s`ign, get the `r`eversed absolute integer, and return their product if `r` didn't \"overflow\".\\n\\n    def reverse(self, x):\\n        s = cmp(x, 0)\\n        r = int(`s*x`[::-1])\\n        return s*r * (r < 2**31)\\n\\nAs compressed one-liner, for potential comparison:\\n\\n    def reverse(self, x):\\n        s=cmp(x,0);r=int(`s*x`[::-1]);return(r<2**31)*s*r\\n\\nAnybody got something shorter?",
                "codeTag": "Python3"
            },
            {
                "id": 4124,
                "title": "8-ms-simple-c-solution-which-checks-overflow",
                "content": "    class Solution {\\n    public:\\n        int reverse(int x) {\\n            int ans = 0;\\n            while (x) {\\n                int temp = ans * 10 + x % 10;\\n                if (temp / 10 != ans)\\n                    return 0;\\n                ans = temp;\\n                x /= 10;\\n            }\\n            return ans;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int reverse(int x) {\\n            int ans = 0;\\n            while (x) {\\n                int temp = ans * 10 + x % 10;\\n                if (temp / 10 != ans)\\n                    return 0;\\n                ans = temp;\\n                x /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4057,
                "title": "shortest-code-possible-in-c",
                "content": "long long make res a 64 bit number, the overflow is checked.\\n\\n    class Solution {\\n    public:\\n        int reverse(int x) {\\n            long long res = 0;\\n            while(x) {\\n                res = res*10 + x%10;\\n                x /= 10;\\n            }\\n            return (res<INT_MIN || res>INT_MAX) ? 0 : res;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int reverse(int x) {\\n            long long res = 0;\\n            while(x) {\\n                res = res*10 + x%10;\\n                x /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4527,
                "title": "a-python-solution-o-n-58ms",
                "content": "    class Solution:\\n        # @return an integer\\n        def reverse(self, x):\\n            result = 0\\n    \\n            if x < 0:\\n                symbol = -1\\n                x = -x\\n            else:\\n                symbol = 1\\n    \\n            while x:\\n                result = result * 10 + x % 10\\n                x /= 10\\n    \\n            return 0 if result > pow(2, 31) else result * symbol\\n            \\n\\n**Also another solution if you just want to hack it with int -> str -> int**\\n\\n    class Solution:\\n        # @return an integer\\n        def reverse(self, x):\\n            negFlag = 1\\n            if x < 0:\\n                negFlag = -1\\n                strx = str(x)[1:]\\n            else:\\n                strx = str(x)\\n    \\n            x = int(strx[::-1])\\n            \\n            return 0 if x > pow(2, 31) else x * negFlag",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution:\\n        # @return an integer\\n        def reverse(self, x):\\n            result = 0\\n    \\n            if x < 0:\\n                symbol = -1\\n                x = -x\\n            else:\\n                symbol = 1\\n    \\n            while x:\\n                result = result * 10 + x % 10\\n                x /= 10\\n    \\n            return 0 if result > pow(2, 31) else result * symbol\\n            \\n\\n**Also another solution if you just want to hack it with int -> str -> int**\\n\\n    class Solution:\\n        # @return an integer\\n        def reverse(self, x):\\n            negFlag = 1\\n            if x < 0:\\n                negFlag = -1\\n                strx = str(x)[1:]\\n            else:\\n                strx = str(x)\\n    \\n            x = int(strx[::-1])\\n            \\n            return 0 if x > pow(2, 31) else x * negFlag",
                "codeTag": "Java"
            },
            {
                "id": 373709,
                "title": "clean-and-simple-javascript-solution",
                "content": "```\\nvar reverse = function(x) {\\n  const absReversed = Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\');\\n  if (absReversed > 2**31) return 0;\\n  return absReversed * Math.sign(x);\\n};\\n```\\nPlease upvote if you like it!!",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reverse = function(x) {\\n  const absReversed = Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\');\\n  if (absReversed > 2**31) return 0;\\n  return absReversed * Math.sign(x);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1054279,
                "title": "faster-than-100-00-of-c-online-submissions",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int y=0;\\n        while(x){\\n            if(y>INT_MAX/10 || y<INT_MIN/10){\\n                return 0;\\n            }else{\\n                y=y*10 +x%10;\\n                x=x/10;\\n            }\\n        }\\n        return y;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int y=0;\\n        while(x){\\n            if(y>INT_MAX/10 || y<INT_MIN/10){\\n                return 0;\\n            }else{\\n                y=y*10 +x%10;\\n                x=x/10;\\n            }\\n        }\\n        return y;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 732756,
                "title": "24ms-96-82-python3-solution",
                "content": "Python\\'s `bit_length()` is useful, it returns the number of bits required to represent an integer in binary. \\n\\nWe can utilize this and create a compound conditional statement for dealing with the assumption of 32-bit signed integer range.\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        rev = int(str(abs(x))[::-1])\\n        return (-rev if x < 0 else rev) if rev.bit_length() < 32 else 0\\n```\\n\\nThis approach is faster than other approaches, for example: `join()` and `reversed()`.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        rev = int(str(abs(x))[::-1])\\n        return (-rev if x < 0 else rev) if rev.bit_length() < 32 else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4109,
                "title": "a-simple-c-solution-with-5ms",
                "content": "    int reverse(int x) {\\n        long long val = 0;\\n    \\tdo \\n    \\t{\\n    \\t\\tval = val * 10 + x % 10;\\n    \\t\\tx /= 10;\\n    \\t} while (x);\\n    \\t\\n    \\treturn (val > INT_MAX || val < INT_MIN) ? 0 : val;\\n    }",
                "solutionTags": [],
                "code": "    int reverse(int x) {\\n        long long val = 0;\\n    \\tdo \\n    \\t{\\n    \\t\\tval = val * 10 + x % 10;\\n    \\t\\tx /= 10;\\n    \\t} while (x);\\n    \\t\\n    \\treturn (val > INT_MAX || val < INT_MIN) ? 0 : val;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4127,
                "title": "simple-java-solution-o-n-time-and-o-1-space",
                "content": "Simply just modulo the input by 10, add it to a long-integer variable as the result.\\nRepeat. When the result is > max integer or < min integer, return 0. Hence, return the result as an integer\\n\\n    public class Solution {\\n        public int reverse(int x) {\\n            long result =0;\\n            while(x != 0)\\n            {\\n                result = (result*10) + (x%10);\\n                if(result > Integer.MAX_VALUE) return 0;\\n                if(result < Integer.MIN_VALUE) return 0;\\n                x = x/10;\\n            }\\n            return (int)result;\\n            \\n            \\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int reverse(int x) {\\n            long result =0;\\n            while(x != 0)\\n            {\\n                result = (result*10) + (x%10);\\n                if(result > Integer.MAX_VALUE) return 0;\\n                if(result < Integer.MIN_VALUE) return 0;\\n                x = x/10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4196,
                "title": "java-2ms-9-lines-of-code-easy-understand",
                "content": "    public int rever(int x){\\n    \\t\\tlong r = 0;\\n    \\t\\twhile(x != 0){\\n    \\t\\t\\tr = r*10 + x%10;\\n    \\t\\t\\tx /= 10;\\n    \\t\\t}\\n    \\t\\tif(r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE)\\n    \\t\\t\\treturn (int)r;\\n    \\t\\telse\\n    \\t\\t\\treturn 0;\\n    \\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public int rever(int x){\\n    \\t\\tlong r = 0;\\n    \\t\\twhile(x != 0){\\n    \\t\\t\\tr = r*10 + x%10;\\n    \\t\\t\\tx /= 10;\\n    \\t\\t}\\n    \\t\\tif(r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE)\\n    \\t\\t\\treturn (int)r;\\n    \\t\\telse\\n    \\t\\t\\treturn 0;\\n    \\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 3251935,
                "title": "easy-to-understand-c-solution-with-no-usage-of-64-bit-integers-o-log-n-o-1",
                "content": "# Complexity\\n- Time complexity:  $$O(log(n))$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\npublic class Solution \\n{\\n    public int Reverse(int x)\\n    {\\n        var result = 0;\\n\\n        while (x != 0)\\n        {\\n            var remainder = x % 10;\\n            var temp = result * 10 + remainder;\\n\\n            // in case of overflow, the current value will not be equal to the previous one\\n            if ((temp - remainder) / 10 != result)\\n            {\\n                return 0;\\n            }\\n\\n            result = temp;\\n            x /= 10;\\n        }\\n        \\n        return result;\\n    }\\n}\\n```\\n\\n![pleaseupvote.jpg](https://assets.leetcode.com/users/images/5e6d2edc-7a72-46ab-83a6-ef6503bb5c56_1677848416.2608643.jpeg)\\n",
                "solutionTags": [
                    "C#",
                    "Math"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public int Reverse(int x)\\n    {\\n        var result = 0;\\n\\n        while (x != 0)\\n        {\\n            var remainder = x % 10;\\n            var temp = result * 10 + remainder;\\n\\n            // in case of overflow, the current value will not be equal to the previous one\\n            if ((temp - remainder) / 10 != result)\\n            {\\n                return 0;\\n            }\\n\\n            result = temp;\\n            x /= 10;\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1598636,
                "title": "solution-swift-reverse-integer-test-cases",
                "content": "<blockquote>\\n<b>Disclaimer:</b> By using any content from this post or thread, you release the author(s) from all liability and warranty of any kind. You are free to use the content freely and as you see fit. Any suggestions for improvement are welcome and greatly appreciated! Happy coding!\\n</blockquote>\\n\\n```swift\\nclass Solution {\\n    func reverse(_ x: Int) -> Int {\\n        var r = 0, x = x\\n        while x != 0 {\\n            r = r * 10\\n            r = r + (x % 10)\\n            x /= 10\\n        }\\n        return r < Int32.min || r > Int32.max ? 0 : r\\n    }\\n}\\n```\\n\\n<hr>\\n\\n<p>\\n<details>\\n<summary><img src=\"https://git.io/JDblm\" height=\"24\"> <b>TEST CASES</b></summary>\\n\\n<br>\\n\\n<pre>\\nResult: Executed 4 tests, with 0 failures (0 unexpected) in 0.009 (0.011) seconds\\n</pre>\\n\\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n\\n    func test0() {\\n        let value = solution.reverse(123)\\n        XCTAssertEqual(value, 321)\\n    }\\n    func test1() {\\n        let value = solution.reverse(-123)\\n        XCTAssertEqual(value, -321)\\n    }\\n    func test2() {\\n        let value = solution.reverse(120)\\n        XCTAssertEqual(value, 21)\\n    }\\n    func test3() {\\n        let value = solution.reverse(0)\\n        XCTAssertEqual(value, 0)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\\n\\n</details>\\n</p>",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func reverse(_ x: Int) -> Int {\\n        var r = 0, x = x\\n        while x != 0 {\\n            r = r * 10\\n            r = r + (x % 10)\\n            x /= 10\\n        }\\n        return r < Int32.min || r > Int32.max ? 0 : r\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n\\n    func test0() {\\n        let value = solution.reverse(123)\\n        XCTAssertEqual(value, 321)\\n    }\\n    func test1() {\\n        let value = solution.reverse(-123)\\n        XCTAssertEqual(value, -321)\\n    }\\n    func test2() {\\n        let value = solution.reverse(120)\\n        XCTAssertEqual(value, 21)\\n    }\\n    func test3() {\\n        let value = solution.reverse(0)\\n        XCTAssertEqual(value, 0)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 969722,
                "title": "javascript-solution-94-83-no-reverse-string",
                "content": "```\\nfunction reverse(x) {\\n  const isNegative = x < 0;\\n  x = Math.abs(x);\\n  let ret = 0;\\n  while (x > 0) {\\n    const num = x % 10;\\n    x = Math.floor(x / 10);\\n    ret *= 10;\\n    ret += num;\\n  }\\n  if (ret > Math.pow(2,31)) return 0;\\n  return isNegative ? ret * -1 : ret;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction reverse(x) {\\n  const isNegative = x < 0;\\n  x = Math.abs(x);\\n  let ret = 0;\\n  while (x > 0) {\\n    const num = x % 10;\\n    x = Math.floor(x / 10);\\n    ret *= 10;\\n    ret += num;\\n  }\\n  if (ret > Math.pow(2,31)) return 0;\\n  return isNegative ? ret * -1 : ret;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 408697,
                "title": "two-python-solutions-and-explanation-of-python-modulo-and-int-division-differences-from-c-java",
                "content": "**Solution 1:** \\nSimilar Approach to the official solution, but modified to work with python modulo and division differences\\n\\n```\\n    def reverse_v1(self, x: int) -> int:\\n        reverse = 0\\n        max_int = pow(2, 31)-1\\n        min_int = pow(-2, 31)\\n        \\n        while x != 0:   \\n            # Python modulo does not work the same as c or java. It always returns the same\\n            # sign as the divisor and rounds towards negative infinit. Also // rounds towards negative infinity not 0 as in C so this also\\n            # behaves differently. Python 3.7 added a math.remainder(), but leet code is\\n            # running a python version prior to this (at least at the time of writing). Since the C \\'remainder\\' behavior is desirable for\\n            # this problem, the following code emulates it. \\n            #\\n            # See https://stackoverflow.com/questions/1907565/c-and-python-different-behaviour-of-the-modulo-operation and\\n\\t\\t\\t# http://python-history.blogspot.com/2010/08/why-pythons-integer-division-floors.html\\n            pop = x % 10 if x >= 0 else (abs(x) % 10)*-1\\n            x = x // 10 if x >=0 else math.ceil(x / 10)\\n\\n            if (reverse > max_int//10) or (reverse == max_int // 10 and pop > 7):\\n                return 0\\n            \\n            if (reverse < math.ceil(min_int / 10)) or (reverse == math.ceil(min_int / 10) and pop < -8):\\n                return 0\\n            \\n            reverse = reverse * 10 + pop\\n        \\n        return reverse\\n```\\n\\n**Solution 2:** \\nUsing string as an intermediate representation. \\n\\n```\\ndef reverse_v2(self, x: int) -> int:\\n\\tmax_int = pow(2, 31)-1\\n\\tmin_int = pow(-2, 31)\\n\\n\\tstr_x = str(abs(x))\\n\\tstr_x_reversed = str_x[::-1]\\n\\tresult = int(str_x_reversed)\\n\\tresult = result * -1 if x < 0 else result\\n\\n\\treturn result if (result < max_int and result > min_int) else 0\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def reverse_v1(self, x: int) -> int:\\n        reverse = 0\\n        max_int = pow(2, 31)-1\\n        min_int = pow(-2, 31)\\n        \\n        while x != 0:   \\n            # Python modulo does not work the same as c or java. It always returns the same\\n            # sign as the divisor and rounds towards negative infinit. Also // rounds towards negative infinity not 0 as in C so this also\\n            # behaves differently. Python 3.7 added a math.remainder(), but leet code is\\n            # running a python version prior to this (at least at the time of writing). Since the C \\'remainder\\' behavior is desirable for\\n            # this problem, the following code emulates it. \\n            #\\n            # See https://stackoverflow.com/questions/1907565/c-and-python-different-behaviour-of-the-modulo-operation and\\n\\t\\t\\t# http://python-history.blogspot.com/2010/08/why-pythons-integer-division-floors.html\\n            pop = x % 10 if x >= 0 else (abs(x) % 10)*-1\\n            x = x // 10 if x >=0 else math.ceil(x / 10)\\n\\n            if (reverse > max_int//10) or (reverse == max_int // 10 and pop > 7):\\n                return 0\\n            \\n            if (reverse < math.ceil(min_int / 10)) or (reverse == math.ceil(min_int / 10) and pop < -8):\\n                return 0\\n            \\n            reverse = reverse * 10 + pop\\n        \\n        return reverse\\n```\n```\\ndef reverse_v2(self, x: int) -> int:\\n\\tmax_int = pow(2, 31)-1\\n\\tmin_int = pow(-2, 31)\\n\\n\\tstr_x = str(abs(x))\\n\\tstr_x_reversed = str_x[::-1]\\n\\tresult = int(str_x_reversed)\\n\\tresult = result * -1 if x < 0 else result\\n\\n\\treturn result if (result < max_int and result > min_int) else 0\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4243,
                "title": "4ms-c-solution-easy-to-understand",
                "content": "    int reverse(int x) {\\n        long result = 0;\\n        while(x != 0)\\n        {\\n            result = result*10 + x % 10;\\n            x /= 10;\\n        }\\n        return (result > INT_MAX || result < INT_MIN)? 0 : result;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "    int reverse(int x) {\\n        long result = 0;\\n        while(x != 0)\\n        {\\n            result = result*10 + x % 10;\\n            x /= 10;\\n        }\\n        return (result > INT_MAX || result < INT_MIN)? 0 : result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4240,
                "title": "5-lines-2ms-java-solution",
                "content": "    public class Solution {\\n        public int reverse(int x) {\\n            long answer = 0;\\n            while(x != 0) {\\n                answer = 10 * answer + x % 10;\\n                x /= 10;\\n            }\\n            return (answer > Integer.MAX_VALUE || answer < Integer.MIN_VALUE) ? 0 : (int) answer;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int reverse(int x) {\\n            long answer = 0;\\n            while(x != 0) {\\n                answer = 10 * answer + x % 10;\\n                x /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2002944,
                "title": "c-100-no-int-max-long-easy-explanation-interview-helper",
                "content": "# **Before beginning to understand, get ready to see your solution\\'s code quality result as shown below:\\u2764**\\n\\n![image](https://assets.leetcode.com/users/images/5d0fa2d6-c3b5-40ca-bf59-e226bd410421_1651533248.641618.jpeg)\\n\\n### **Question Explanation and Observation of difficulty:**\\n\\nAs per the question, we need to reverse the integer checking if the **result remains in the range of integer(32 bits) or not.**. Well the main part/crux of the question why this question is a **MEDIUM LEVEL PROBLEM** lies in this line:\\n`Assume the environment does not allow you to store 64-bit integers (signed or unsigned).`\\n\\n\\n**Approach 1 (Missing Edge Case):**\\n\\nA basic approch which we all would follow initially is: \\n**Lets take a simple Example: `x = 123` for understanding:**\\n1. Initiate original answer as `0`. (Lets say `ans = 0`)\\n2. Find the last digit of `x` by using `x%10`.( `lastDigit = 3`)\\n3. Multiply `x` by `10` and add the last digit to the new Temporary number. (`temp = x*10 + lastDigit` -> `temp = 0*10 + 3 = 3` )\\n4. **Check if the `( (temp - ans) / 10  == ans )`** --> `( (3 - 0)/10 == 0)`. \\n\\tA. If **NOT**, then return 0 as soon as possible and break.(Explained below)\\n\\tB. If **yes**, *continue the process 2 to 4 while x is greater than 0*.\\n\\nExplaning **NOT case:**\\nBasically why we check this case is that if the integer overflow occurs, then int * val would take a random value from the range of  integer which would fail the above check in line 4.\\n\\n#### **Sample Code for this:**\\n```\\nint reverse(int x) {\\n        \\n        int ans = 0;\\n        while(x){\\n           \\n            int lastDigit = x%10;\\n            \\n            int temp = ans * 10 + lastDigit;\\n            \\n            if((temp - lastDigit)/10 != ans)\\n                return 0;\\n            \\n            ans = temp;\\n            x/=10;    \\n        }\\n        return ans;\\n    }\\n```\\n\\n#### **Output:**\\n```\\nRuntime Error Message:\\nLine 10: Char 33: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:33\\nLast executed input:\\n1534236469\\n```\\n### **Where did it failed??**\\nThe error message says about integer overflow that **`964632435 * 10 cannot be represented in type \\'int\\'`**. Which means we already have reached the **answer = 964632435** to which if we multiply by **10** it would exceed the int range`[-2^31, 2^31 - 1]`.\\n\\n**Some would suggest is that taking the ans variable as long (as 964632435 * 10 can be stored in long) and the checking the check:**\\n```\\n if(ans > INT_MAX || ans < INT_MIN)\\n                return 0;\\n```\\n\\n\\n**BUT THE INTERVIEWER MIGHT ASK YOU NOT TO USE ANY DATA TYPE(Except int) or any prebuilt function such as INT_MAX / INT_MIN for checking the max/min range of int.**\\n\\nThus, please **AVOID using long Data Type** for your solution if you are in your interview. The interviewer might become sad \\uD83D\\uDE22 and you can fail in your that interview (which I dont want).\\uD83D\\uDE0A\\n\\n\\n## **EXPLANATION OF SOLUTION / OBSERVATION:**\\n\\n### **Lets see if we can check integer overflow at compile time without using any extra function??**\\n\\nWe know that our solution fails at overflow when perform `ans * 10 `.\\n\\nThus let us define an **upper bound** and a **lower bound** for our answer to be always between this range. Thus lets define: \\n`lower bound =  INT_MIN/10 =   - (2^31 /10 )` \\n`upper bound =  INT_MAX/10 =  (2^31 - 1 / 10)`.\\n\\n**Note:**\\nWe took lower and upper bound by dividing the actual range by 10 because we make the reverse by multiplying the `ans * 10 `. So we need to make sure that `ans *10` remains in **INT** only. That\\'s why we **declare the bounds dividing the MAX_INT and MIN_INT by 10 so that we can check the interger overflow at the compile time** as shown below:\\n\\n```\\n\\tint lastDigit = x%10;\\n\\tif(ans <= upperLimit && ans >= lowerLimit){ // Checking if ans will be there in integer range only.\\n\\t\\t int temp = ans * 10 + lastDigit;\\n\\t\\t ans = temp;\\n\\t\\t x/=10;  \\n   }\\n   else{ // ans would exceed the int if multiplied by 10. Thus integer overflow occur.\\n\\t\\treturn 0;\\n\\t}\\n```\\n\\n\\n#### **SOLUTION: (ACCEPTED, 100% FAST, 0MS)**\\n\\n```\\nint reverse(int x) {\\n        \\n        int upperLimit =  (pow(2,31) - 1)/10;\\n        int lowerLimit = -(pow(2,31)/10);\\n    \\n        int ans = 0;\\n        \\n        while(x){\\n           \\n            int lastDigit = x%10;\\n\\t\\t\\t\\n            if(ans <= upperLimit && ans >= lowerLimit){ // Checking if ans will be there in integer range only.\\n                 int temp = ans * 10 + lastDigit;\\n                 ans = temp;\\n                 x/=10;  \\n            }\\n            else{ // ans would exceed the int if multiplied by 10. Thus integer overflow occur\\n                return 0;\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n```\\n\\n#### **Output: Try it  yourself and comment!\\u2764** \\n\\n**Feel free to comment for any doubt and please upvote \\u2B06 if you find anything useful, as it would motivate me to write more explanations**.\\n\\n**Happy Coding! Lets crack it\\uD83D\\uDE0A**\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint reverse(int x) {\\n        \\n        int ans = 0;\\n        while(x){\\n           \\n            int lastDigit = x%10;\\n            \\n            int temp = ans * 10 + lastDigit;\\n            \\n            if((temp - lastDigit)/10 != ans)\\n                return 0;\\n            \\n            ans = temp;\\n            x/=10;    \\n        }\\n        return ans;\\n    }\\n```\n```\\nRuntime Error Message:\\nLine 10: Char 33: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:33\\nLast executed input:\\n1534236469\\n```\n```\\n if(ans > INT_MAX || ans < INT_MIN)\\n                return 0;\\n```\n```\\n\\tint lastDigit = x%10;\\n\\tif(ans <= upperLimit && ans >= lowerLimit){ // Checking if ans will be there in integer range only.\\n\\t\\t int temp = ans * 10 + lastDigit;\\n\\t\\t ans = temp;\\n\\t\\t x/=10;  \\n   }\\n   else{ // ans would exceed the int if multiplied by 10. Thus integer overflow occur.\\n\\t\\treturn 0;\\n\\t}\\n```\n```\\nint reverse(int x) {\\n        \\n        int upperLimit =  (pow(2,31) - 1)/10;\\n        int lowerLimit = -(pow(2,31)/10);\\n    \\n        int ans = 0;\\n        \\n        while(x){\\n           \\n            int lastDigit = x%10;\\n\\t\\t\\t\\n            if(ans <= upperLimit && ans >= lowerLimit){ // Checking if ans will be there in integer range only.\\n                 int temp = ans * 10 + lastDigit;\\n                 ans = temp;\\n                 x/=10;  \\n            }\\n            else{ // ans would exceed the int if multiplied by 10. Thus integer overflow occur\\n                return 0;\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4007493,
                "title": "simple-java-solutions-runtime-1ms-beats-99",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        StringBuilder s = new StringBuilder();\\n        s.append(Math.abs(x));\\n        s.reverse();\\n        if (s.length() >= 10 ){\\n            int c1 = Integer.parseInt(s.substring(0 , 5) );\\n            int c2 = Integer.parseInt(s.substring(5 , 10) );\\n            if (c1 > 21474 || c2 > 83647){\\n                return 0;\\n            }\\n        }\\n\\n       int num = Integer.parseInt(s.toString());\\n        \\n        return (x < 0) ? -num : num ;\\n    }\\n}\\n```\\n\\n![abcd1.jpeg](https://assets.leetcode.com/users/images/54c93cde-680e-4aad-8162-4e0d183022ed_1693954123.431134.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        StringBuilder s = new StringBuilder();\\n        s.append(Math.abs(x));\\n        s.reverse();\\n        if (s.length() >= 10 ){\\n            int c1 = Integer.parseInt(s.substring(0 , 5) );\\n            int c2 = Integer.parseInt(s.substring(5 , 10) );\\n            if (c1 > 21474 || c2 > 83647){\\n                return 0;\\n            }\\n        }\\n\\n       int num = Integer.parseInt(s.toString());\\n        \\n        return (x < 0) ? -num : num ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4090,
                "title": "my-2ms-4lines-clean-java-solution-may-help-you",
                "content": "    public class Solution {\\n        public int reverse(int x) {\\n            long res = 0;\\n    \\t\\tfor (; x != 0; x /= 10)\\n    \\t\\t\\tres = res * 10 + x % 10;\\n    \\t\\treturn res > Integer.MAX_VALUE || res < Integer.MIN_VALUE ? 0: (int) res;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int reverse(int x) {\\n            long res = 0;\\n    \\t\\tfor (; x != 0; x /= 10)\\n    \\t\\t\\tres = res * 10 + x % 10;\\n    \\t\\treturn res > Integer.MAX_VALUE || res < Integer.MIN_VALUE ? 0: (int) res;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 4148,
                "title": "share-my-clean-accepted-c-solution-without-long-type-or-magic-number",
                "content": "    class Solution {\\n    public:\\n        int reverse(int x) {\\n            if (x == INT_MIN)\\n                return 0;\\n            if (x < 0)\\n                return -reverse(-x);\\n            \\n            int rx = 0; // store reversed integer\\n            while (x != 0) {\\n                // check overflow\\n                if (rx > INT_MAX / 10 || 10 * rx > INT_MAX - x % 10) return 0;\\n                rx = rx * 10 + x % 10;\\n                x = x / 10;\\n            }\\n            return rx;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int reverse(int x) {\\n            if (x == INT_MIN)\\n                return 0;\\n            if (x < 0)\\n                return -reverse(-x);\\n            \\n            int rx = 0; // store reversed integer\\n            while (x != 0) {\\n                // check overflow\\n                if (rx > INT_MAX / 10 || 10 * rx > INT_MAX - x % 10) return 0;\\n                rx = rx * 10 + x % 10;\\n                x = x / 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 284410,
                "title": "simple-and-fast",
                "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        result = 0\\n        symbol = 1\\n        \\n        if x < 0:\\n            symbol = -1\\n            x = -x\\n\\n        while x:\\n            result = result * 10 + x % 10\\n            x /= 10\\n            \\n        return 0 if result > pow(2,31) else result * symbol\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        result = 0\\n        symbol = 1\\n        \\n        if x < 0:\\n            symbol = -1\\n            x = -x\\n\\n        while x:\\n            result = result * 10 + x % 10\\n            x /= 10\\n            \\n        return 0 if result > pow(2,31) else result * symbol\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1061403,
                "title": "clean-pythonic-solution",
                "content": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        retval = int(str(abs(x))[::-1])\\n        \\n        if(retval.bit_length()>31):\\n            return 0\\n    \\n        if x<0:\\n            return -1*retval\\n        else:\\n            return retval\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        retval = int(str(abs(x))[::-1])\\n        \\n        if(retval.bit_length()>31):\\n            return 0\\n    \\n        if x<0:\\n            return -1*retval\\n        else:\\n            return retval\\n```",
                "codeTag": "Java"
            },
            {
                "id": 212513,
                "title": "python-scala-with-explanations",
                "content": "Rather than count the number of digits in advance, we can multiply `result` by 10 before add the current `digit` from time to time.\\n****\\n> Python\\n```\\nclass Solution:\\n    def reverse(self, x):\\n        if x < 0:\\n            return -1 * self.reverseUtil(-x)\\n        return self.reverseUtil(x)\\n        \\n    def reverseUtil(self, x):\\n        result = 0\\n        while x != 0:\\n            digit = x % 10\\n            result = result * 10 + digit\\n            x = int(x / 10)\\n\\t\\t\\t\\n        return 0 if result > pow(2, 31) - 1 or result < -pow(2, 31) else result\\n```\\n> Scala\\n```\\n    def reverse(x: Int): Int = {\\n        // Corner case.\\n        if (!isValidInteger(x)) {\\n            return 0\\n        }\\n        \\n        if (x < 0) {\\n            return -reverseUtil(-x)\\n        }\\n        return reverseUtil(x)\\n    }\\n    \\n    def reverseUtil(x: Int): Int = {\\n        var result: Long = 0\\n        var vx = x\\n        \\n        while (vx != 0) {\\n            result = result * 10 + vx % 10\\n            if (!isValidInteger(result)) {\\n                return 0\\n            }\\n            vx /= 10\\n        }\\n        \\n        result.toInt\\n    }\\n    \\n    // Check if x is a valid integer.\\n    def isValidInteger(x: Long): Boolean = {\\n        if (x > Int.MaxValue || x < Int.MinValue) {\\n            return false\\n        }\\n        true\\n    }\\n```\\n**(\\u4EBA \\u2022\\u0348\\u1D17\\u2022\\u0348)** Thanks for voting!",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def reverse(self, x):\\n        if x < 0:\\n            return -1 * self.reverseUtil(-x)\\n        return self.reverseUtil(x)\\n        \\n    def reverseUtil(self, x):\\n        result = 0\\n        while x != 0:\\n            digit = x % 10\\n            result = result * 10 + digit\\n            x = int(x / 10)\\n\\t\\t\\t\\n        return 0 if result > pow(2, 31) - 1 or result < -pow(2, 31) else result\\n```\n```\\n    def reverse(x: Int): Int = {\\n        // Corner case.\\n        if (!isValidInteger(x)) {\\n            return 0\\n        }\\n        \\n        if (x < 0) {\\n            return -reverseUtil(-x)\\n        }\\n        return reverseUtil(x)\\n    }\\n    \\n    def reverseUtil(x: Int): Int = {\\n        var result: Long = 0\\n        var vx = x\\n        \\n        while (vx != 0) {\\n            result = result * 10 + vx % 10\\n            if (!isValidInteger(result)) {\\n                return 0\\n            }\\n            vx /= 10\\n        }\\n        \\n        result.toInt\\n    }\\n    \\n    // Check if x is a valid integer.\\n    def isValidInteger(x: Long): Boolean = {\\n        if (x > Int.MaxValue || x < Int.MinValue) {\\n            return false\\n        }\\n        true\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1195169,
                "title": "java-faster-than-100-00-less-than-99-22-abiding-all-rules",
                "content": "Following all the rules (can\\'t use long etc.), I don\\'t think there is a simplier solution.\\n\\nWe need to look at the max value of int which is 2147483647 (2<sup>31</sup> - 1). We can then see that when we are adding the 10th digit and the first 9 exceed 214748364, then no matter what the 10th digit will be, the number will be larger than the max int value. But if the first 9 digits are no more than 214748364, then the 10th digit can be in the range [0, 7].\\n\\nNow, we need to make sure that the 10th digit will never be larger than 7. This can easily be done by again looking at the max int value 2147483647, from which we can see that if the given number is 10 digits long, then the largest possible 1st digit is 2, so in the reversed number the largest possible 10th digit is 2, thus it will never be larger than 7.\\n\\nThe same observation can be made for the negative numbers.\\n\\n```\\nclass Solution {\\n    public int reverse(int x) {  \\n\\n        int ans = 0;\\n        while (x != 0)\\n        {\\n            if (ans > 214748364 || ans < -214748364)\\n            {\\n                return 0;\\n            }\\n            \\n            ans = ans * 10 + x % 10;\\n            x /= 10;\\n        }  \\n        return ans;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {  \\n\\n        int ans = 0;\\n        while (x != 0)\\n        {\\n            if (ans > 214748364 || ans < -214748364)\\n            {\\n                return 0;\\n            }\\n            \\n            ans = ans * 10 + x % 10;\\n            x /= 10;\\n        }  \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 219020,
                "title": "rust-0ms-string-reversing",
                "content": "```rust\\nimpl Solution {\\n    pub fn reverse(x: i32) -> i32 {\\n        x.signum() * x\\n\\t\\t\\t.abs()\\n\\t\\t\\t.to_string()\\n\\t\\t\\t.chars()\\n\\t\\t\\t.rev()\\n\\t\\t\\t.collect::<String>()\\n\\t\\t\\t.parse::<i32>()\\n\\t\\t\\t.unwrap_or(0)\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nimpl Solution {\\n    pub fn reverse(x: i32) -> i32 {\\n        x.signum() * x\\n\\t\\t\\t.abs()\\n\\t\\t\\t.to_string()\\n\\t\\t\\t.chars()\\n\\t\\t\\t.rev()\\n\\t\\t\\t.collect::<String>()\\n\\t\\t\\t.parse::<i32>()\\n\\t\\t\\t.unwrap_or(0)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3497080,
                "title": "c-java-python-javascript-10-lines-of-code-beats-100-0ms",
                "content": "# Intuition:\\nThe problem asks to reverse the digits of a given integer. The approach is to extract the digits one by one using modulo operator and then add them in reverse order.\\n\\n# Approach:\\n\\n1. Initialize a variable \\'reverse\\' to 0. This variable will hold the reversed integer.\\n\\n2. Initialize another variable \\'num\\' to the given integer. We will use \\'num\\' to avoid modifying the original input integer.\\n\\n3. While the \\'num\\' is not equal to 0, extract the rightmost digit of \\'num\\' using the modulo operator (%). Store this digit in a variable called \\'digit\\'.\\n\\n4. Multiply \\'reverse\\' by 10 and add the extracted digit \\'digit\\' to it.\\n\\n5. Divide \\'num\\' by 10 and update \\'num\\' with the quotient. This will remove the rightmost digit of \\'num\\' in each iteration.\\n\\n6. Repeat steps 3-5 until \\'num\\' becomes 0.\\n\\n7. Check if the reversed integer \\'reverse\\' is within the range of a 32-bit signed integer. If it is not, return 0.\\n\\n8. Return the reversed integer \\'reverse\\'.\\n\\n# Complexity:\\n- Time Complexity: The time complexity of the solution is O(log(x)). We need to extract the digits of the integer one by one until there are no more digits left. This process continues until the integer becomes 0. The number of iterations required depends on the number of digits in the integer, which is proportional to log(x) with base 10.\\n- Space Complexity: The space complexity of the solution is O(1). We are only using a constant amount of extra space to store the reversed integer and a few other variables.\\n---\\n# C++\\n```cpp\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long reverse = 0;\\n        while(x!=0){\\n            int digit = x%10;\\n            reverse = reverse*10 + digit;\\n            x=x/10;\\n        }\\n       if(reverse>INT_MAX || reverse<INT_MIN) return 0;\\n        return reverse;\\n    }\\n};\\n```\\n\\n---\\n# JAVA\\n```java\\nclass Solution {\\n    public int reverse(int x) {\\n        long reverse = 0;\\n        while (x != 0) {\\n            int digit = x % 10;\\n            reverse = reverse * 10 + digit;\\n            x = x / 10;\\n        }\\n        if (reverse > Integer.MAX_VALUE || reverse < Integer.MIN_VALUE) return 0;\\n        return (int) reverse;\\n    }\\n}\\n\\n```\\n---\\n# Python\\n```py\\nclass Solution(object):\\n    def reverse(self, x):\\n        reverse = 0\\n        sign = -1 if x < 0 else 1\\n        x = abs(x)\\n        while x:\\n            digit = x % 10\\n            reverse = reverse * 10 + digit\\n            x /= 10\\n        result = sign * reverse\\n        if result > 2 ** 31 - 1 or result < -(2 ** 31):\\n            return 0\\n        return result\\n\\n```\\n---\\n# JavaScript\\n```js\\nvar reverse = function(x) {\\n  let rev = 0;\\n  const sign = x < 0 ? -1 : 1;\\n  x = Math.abs(x);\\n  while (x !== 0) {\\n    const digit = x % 10;\\n    rev = rev * 10 + digit;\\n    x = Math.floor(x / 10);\\n  }\\n  const result = sign * rev;\\n  if (result > 2 ** 31 - 1 || result < -(2 ** 31)) return 0;\\n  return result;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "Math"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long reverse = 0;\\n        while(x!=0){\\n            int digit = x%10;\\n            reverse = reverse*10 + digit;\\n            x=x/10;\\n        }\\n       if(reverse>INT_MAX || reverse<INT_MIN) return 0;\\n        return reverse;\\n    }\\n};\\n```\n```java\\nclass Solution {\\n    public int reverse(int x) {\\n        long reverse = 0;\\n        while (x != 0) {\\n            int digit = x % 10;\\n            reverse = reverse * 10 + digit;\\n            x = x / 10;\\n        }\\n        if (reverse > Integer.MAX_VALUE || reverse < Integer.MIN_VALUE) return 0;\\n        return (int) reverse;\\n    }\\n}\\n\\n```\n```py\\nclass Solution(object):\\n    def reverse(self, x):\\n        reverse = 0\\n        sign = -1 if x < 0 else 1\\n        x = abs(x)\\n        while x:\\n            digit = x % 10\\n            reverse = reverse * 10 + digit\\n            x /= 10\\n        result = sign * reverse\\n        if result > 2 ** 31 - 1 or result < -(2 ** 31):\\n            return 0\\n        return result\\n\\n```\n```js\\nvar reverse = function(x) {\\n  let rev = 0;\\n  const sign = x < 0 ? -1 : 1;\\n  x = Math.abs(x);\\n  while (x !== 0) {\\n    const digit = x % 10;\\n    rev = rev * 10 + digit;\\n    x = Math.floor(x / 10);\\n  }\\n  const result = sign * rev;\\n  if (result > 2 ** 31 - 1 || result < -(2 ** 31)) return 0;\\n  return result;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 293960,
                "title": "rust-use-checked-ops-to-check-overflow-0ms-2-3mb",
                "content": "Runtime: 0 ms, faster than 100.00% of Rust online submissions for Reverse Integer.\\nMemory Usage: 2.3 MB, less than 91.40% of Rust online submissions for Reverse Integer.\\n\\n```\\nimpl Solution {\\n    pub fn reverse(x: i32) -> i32 {\\n        let mut res: i32 = 0;\\n        let mut cur: i32 = x;\\n        \\n        while cur != 0 {\\n            match res.checked_mul(10) {\\n                None => return 0,\\n                Some(tmp) => match tmp.checked_add(cur % 10) {\\n                    None => return 0,\\n                    Some(fine) => {\\n                        res = fine;\\n                    }\\n                } \\n            }\\n            cur = cur / 10;\\n        }\\n        \\n        res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn reverse(x: i32) -> i32 {\\n        let mut res: i32 = 0;\\n        let mut cur: i32 = x;\\n        \\n        while cur != 0 {\\n            match res.checked_mul(10) {\\n                None => return 0,\\n                Some(tmp) => match tmp.checked_add(cur % 10) {\\n                    None => return 0,\\n                    Some(fine) => {\\n                        res = fine;\\n                    }\\n                } \\n            }\\n            cur = cur / 10;\\n        }\\n        \\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2398536,
                "title": "c-solution-100-faster-0ms-6mb-easy",
                "content": "```\\nint reverse(int n) {\\n    int rev = 0;\\n    \\n        while(n !=0) {\\n            \\n            if( (rev > INT_MAX/10) || (rev < INT_MIN/10) ){\\n                return 0;\\n            }\\n            \\n            rev = (rev * 10) + (n % 10);\\n            n /= 10;\\n        }\\n        \\n     return rev;   \\n    }\\n```\\nPlease upvote if you find the solution useful, means a lot.",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint reverse(int n) {\\n    int rev = 0;\\n    \\n        while(n !=0) {\\n            \\n            if( (rev > INT_MAX/10) || (rev < INT_MIN/10) ){\\n                return 0;\\n            }\\n            \\n            rev = (rev * 10) + (n % 10);\\n            n /= 10;\\n        }\\n        \\n     return rev;   \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 488686,
                "title": "python-string-slicing-28-ms-76-88-12-6-mb-100-00",
                "content": "```\\n# reverse an integer\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        result = int(str(x)[::-1]) if x >= 0 else -int(str(x)[1:][::-1])\\n\\n        if -2**31 <= result <= (2**31)-1:\\n            return result\\n        else:\\n            return 0\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n# reverse an integer\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        result = int(str(x)[::-1]) if x >= 0 else -int(str(x)[1:][::-1])\\n\\n        if -2**31 <= result <= (2**31)-1:\\n            return result\\n        else:\\n            return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4378,
                "title": "might-be-helpful-to-you-my-2ms-11-lines-java-solution",
                "content": "    public int reverse(int x) {\\n        long result = 0;\\n        while (x != 0) {\\n            result = result * 10 + x%10;\\n            if (result > Integer.MAX_VALUE || result < Integer.MIN_VALUE) {\\n                return 0;\\n            }\\n            x = x / 10;\\n        }\\n        return (int)result;\\n    }",
                "solutionTags": [],
                "code": "    public int reverse(int x) {\\n        long result = 0;\\n        while (x != 0) {\\n            result = result * 10 + x%10;\\n            if (result > Integer.MAX_VALUE || result < Integer.MIN_VALUE) {\\n                return 0;\\n            }\\n            x = x / 10;\\n        }\\n        return (int)result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4501,
                "title": "javascript-solution-for-reversed-integer",
                "content": "\\n    \\n    if (x < 0) return -reverse(-x);\\n    \\n    var reversedInt = 0;\\n    \\n    while(x>0) {\\n        var a = x%10;\\n        x = Math.floor(x/10);\\n        \\n        //Should no larger than Math.floor(Number.MAX_VALUE/10)\\n        if(reversedInt >= 214748365)\\n            return 0;\\n        reversedInt = reversedInt*10+a;\\n    }\\n    \\n    return reversedInt;\\n\\nFor Javascript, I guess just using Number.MAX_VALUE or Number.MAX_SAFE_VALUE works instead of using specific number.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "\\n    \\n    if (x < 0) return -reverse(-x);\\n    \\n    var reversedInt = 0;\\n    \\n    while(x>0) {\\n        var a = x%10;\\n        x = Math.floor(x/10);\\n        \\n        //Should no larger than Math.floor(Number.MAX_VALUE/10)\\n        if(reversedInt >= 214748365)\\n            return 0;\\n        reversedInt = reversedInt*10+a;\\n    }\\n    \\n    return reversedInt;\\n\\nFor Javascript, I guess just using Number.MAX_VALUE or Number.MAX_SAFE_VALUE works instead of using specific number.",
                "codeTag": "Unknown"
            },
            {
                "id": 1868805,
                "title": "100-intuitive-explanation-any-language-just-kill-it",
                "content": "# Learn something New. Try Your best\\n![image](https://assets.leetcode.com/users/images/27ec9c9d-d6f2-41eb-99a1-18baf1c6fed3_1647835795.1753824.png)\\n\\n\\nRange of int is -2147483648 to 2147483647.\\nSuppose you want to reverse the 2147483645 which is a valid interger in given range and it\\'s reverse is 5463847412 which is out of range.\\n\\nLet\\'s take another example:\\n\\nx= 2147483641\\nreverse(x) : 1463847412\\n\\n**-2,147,483,648<(1463847412)< 2,147,483,647**\\nreverse lies with in the range of integer.\\n\\n**consider this case:**\\n\\nx=1234567809                      // *inside the range of int*\\nreverse(x): 9087654321         // outside the range of int \\n\\nHere 9087654321 is more than than the upper positive bound of integer (9087654321 > 2147483647). So over flow occurs.\\nAccording to problem statement if overflow occurs then return 0. Therefore above example we know there is need to check upper bound and lower bound.\\n**We will add a condition to check the bounds**\\n\\n**if(rev>2147483641 || rev<-2147483641) return 0;**\\nAnd question is killed.\\n\\n![image](https://assets.leetcode.com/users/images/b96d2f1f-8165-487e-9c6e-e35c9f11af73_1647827287.3637693.png)\\n# Aim-10 upvotes. Please do upvote if you like it.\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long rev=0;\\n\\t\\t// simple logic of reverse using while loop\\n\\t\\t\\n         while(x!=0){\\n             rev=rev*10+x%10;\\n             x/=10;\\n         }\\n\\t\\t \\n\\t\\t //check condition \\n        if(rev>2147483641 || rev<-2147483641) return 0;\\n        return rev;\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long rev=0;\\n\\t\\t// simple logic of reverse using while loop\\n\\t\\t\\n         while(x!=0){\\n             rev=rev*10+x%10;\\n             x/=10;\\n         }\\n\\t\\t \\n\\t\\t //check condition \\n        if(rev>2147483641 || rev<-2147483641) return 0;\\n        return rev;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1539232,
                "title": "java-tc-o-log10-n-sc-o-1-reverse-digit-by-digit-check-for-overflow",
                "content": "```java\\n/**\\n * Reverse digit by digit. For each reversal check if the result is greater than\\n * MAX_VALUE\\n *\\n * Time Complexity: O(log10 N) or O(Number of digits in N)\\n *\\n * Space Complexity: O(1)\\n *\\n * N = Input number.\\n */\\nclass Solution {\\n    public int reverse(int x) {\\n        if (x >= -9 && x <= 9) {\\n            return x;\\n        }\\n        if (x == Integer.MIN_VALUE || x == Integer.MAX_VALUE) {\\n            return 0;\\n        }\\n\\n        int sign = x < 0 ? -1 : 1;\\n        x = Math.abs(x);\\n        int result = 0;\\n\\n        while (x > 0) {\\n            int digit = x % 10;\\n            if (result > Integer.MAX_VALUE / 10\\n                    || (result == Integer.MAX_VALUE / 10 && digit > Integer.MAX_VALUE % 10)) {\\n                return 0;\\n            }\\n            result = result * 10 + digit;\\n            x /= 10;\\n        }\\n\\n        return sign * result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```java\\n/**\\n * Reverse digit by digit. For each reversal check if the result is greater than\\n * MAX_VALUE\\n *\\n * Time Complexity: O(log10 N) or O(Number of digits in N)\\n *\\n * Space Complexity: O(1)\\n *\\n * N = Input number.\\n */\\nclass Solution {\\n    public int reverse(int x) {\\n        if (x >= -9 && x <= 9) {\\n            return x;\\n        }\\n        if (x == Integer.MIN_VALUE || x == Integer.MAX_VALUE) {\\n            return 0;\\n        }\\n\\n        int sign = x < 0 ? -1 : 1;\\n        x = Math.abs(x);\\n        int result = 0;\\n\\n        while (x > 0) {\\n            int digit = x % 10;\\n            if (result > Integer.MAX_VALUE / 10\\n                    || (result == Integer.MAX_VALUE / 10 && digit > Integer.MAX_VALUE % 10)) {\\n                return 0;\\n            }\\n            result = result * 10 + digit;\\n            x /= 10;\\n        }\\n\\n        return sign * result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2481312,
                "title": "100-fast-with-commented-best-solution",
                "content": "```\\n// We will go beyond the question rule by storing our reverse ans as long long int;\\n// Then we check if the reverse value is following the INT_MAX or INT_MIN condition or not\\n// Lastly we will return the value ans a int type;\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        \\n        long long reverse=0;  // it will make our working process super easy\\n        \\n        while(n!=0)\\n        {\\n            int temp = n%10;\\n            reverse = reverse*10+temp;\\n            if(reverse>=INT_MAX || reverse<=INT_MIN) //checkint if the reverse value is following the INT_MAX or INT_MIN condition or not\\n\\t\\t\\t{ \\n                return 0;\\n            }\\n            n/=10;\\n        }\\n        \\n        int ans=reverse;\\n        return ans;\\n    }\\n};\\n//  please upvote, if u liked the solution\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n// We will go beyond the question rule by storing our reverse ans as long long int;\\n// Then we check if the reverse value is following the INT_MAX or INT_MIN condition or not\\n// Lastly we will return the value ans a int type;\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        \\n        long long reverse=0;  // it will make our working process super easy\\n        \\n        while(n!=0)\\n        {\\n            int temp = n%10;\\n            reverse = reverse*10+temp;\\n            if(reverse>=INT_MAX || reverse<=INT_MIN) //checkint if the reverse value is following the INT_MAX or INT_MIN condition or not\\n\\t\\t\\t{ \\n                return 0;\\n            }\\n            n/=10;\\n        }\\n        \\n        int ans=reverse;\\n        return ans;\\n    }\\n};\\n//  please upvote, if u liked the solution\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1336322,
                "title": "simplest-c-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x)\\n    {\\n        long int ans = 0;\\n        while(x != 0)\\n        {\\n            ans = (ans * 10) + (x % 10);\\n            x = x/10;\\n        }\\n        if(ans > INT_MAX || ans < INT_MIN)\\n        {\\n            return 0;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n**Like the solution?\\nPlease upvote \\u30C4**\\n\\nIf you can\\'t understand any step/point, feel free to comment.\\nHappy to help.",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x)\\n    {\\n        long int ans = 0;\\n        while(x != 0)\\n        {\\n            ans = (ans * 10) + (x % 10);\\n            x = x/10;\\n        }\\n        if(ans > INT_MAX || ans < INT_MIN)\\n        {\\n            return 0;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1290537,
                "title": "python-clean-solution-with-suggested-assumption",
                "content": "```\\n    def reverse(self, x: int) -> int:\\n        positive = x > 0\\n        limits = [214748364, 7 if positive else 8]  # 2**31 // 10 == (2**31 - 1) // 10 == 214748364\\n\\n        x = abs(x)\\n        rev = 0\\n\\n        while x != 0:\\n            pop = x % 10\\n            x //= 10\\n\\n            if rev > limits[0] or (rev == limits[0] and pop > limits[1]):\\n                return 0\\n\\n            rev = rev * 10 + pop\\n\\n        return rev if positive else -rev\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def reverse(self, x: int) -> int:\\n        positive = x > 0\\n        limits = [214748364, 7 if positive else 8]  # 2**31 // 10 == (2**31 - 1) // 10 == 214748364\\n\\n        x = abs(x)\\n        rev = 0\\n\\n        while x != 0:\\n            pop = x % 10\\n            x //= 10\\n\\n            if rev > limits[0] or (rev == limits[0] and pop > limits[1]):\\n                return 0\\n\\n            rev = rev * 10 + pop\\n\\n        return rev if positive else -rev\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 411330,
                "title": "go-0ms-solution",
                "content": "```\\nfunc reverse(x int) int {\\n    //math.MinInt32 = -2147483648\\n    //math.MaxInt32 = 2147483647\\n    var result int\\n    for x!=0{\\n        result=result*10+x%10\\n        if result > 2147483647  || result < -2147483648{\\n            return 0\\n        }\\n        x/=10\\n    }\\n    return result\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc reverse(x int) int {\\n    //math.MinInt32 = -2147483648\\n    //math.MaxInt32 = 2147483647\\n    var result int\\n    for x!=0{\\n        result=result*10+x%10\\n        if result > 2147483647  || result < -2147483648{\\n            return 0\\n        }\\n        x/=10\\n    }\\n    return result\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3005234,
                "title": "sort-and-easy",
                "content": "\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1272121,
                "title": "c-clean-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int res = 0;\\n        while(x){\\n            if(res > INT_MAX/10 || res < INT_MIN/10)\\n                return 0;\\n            res = res*10 + x%10;\\n            x /= 10; \\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int res = 0;\\n        while(x){\\n            if(res > INT_MAX/10 || res < INT_MIN/10)\\n                return 0;\\n            res = res*10 + x%10;\\n            x /= 10; \\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 857688,
                "title": "python-cool-and-clean-solution",
                "content": "\\tclass Solution:\\n\\t\\tdef reverse(self, x: int) -> int:\\n\\t\\t\\tif x > 0:\\n\\t\\t\\t\\tans = int(str(x)[:: -1])\\n\\t\\t\\t\\treturn ans if ans < 2**31 else 0\\n\\t\\t\\tans = - int(str(- x)[:: -1])\\n\\t\\t\\treturn ans if ans > - 2**31 else 0\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef reverse(self, x: int) -> int:\\n\\t\\t\\tif x > 0:\\n\\t\\t\\t\\tans = int(str(x)[:: -1])\\n\\t\\t\\t\\treturn ans if ans < 2**31 else 0\\n\\t\\t\\tans = - int(str(- x)[:: -1])\\n\\t\\t\\treturn ans if ans > - 2**31 else 0\\n",
                "codeTag": "Java"
            },
            {
                "id": 169516,
                "title": "c-language",
                "content": "```\\nint reverse(int x) \\n{\\n    int m=x;\\n    int t=0;\\n    int q=0;//save the last t\\n    int n=0;\\n    while(m!=0)\\n    {   q=t;\\n        n = m % 10;\\n        t=t*10+n;\\n        m=m/10;\\n        if((t-n)/10!=q) return 0;//check overflow\\n    }\\n    \\n    return t;    \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint reverse(int x) \\n{\\n    int m=x;\\n    int t=0;\\n    int q=0;//save the last t\\n    int n=0;\\n    while(m!=0)\\n    {   q=t;\\n        n = m % 10;\\n        t=t*10+n;\\n        m=m/10;\\n        if((t-n)/10!=q) return 0;//check overflow\\n    }\\n    \\n    return t;    \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4229,
                "title": "my-4ms-c-solution",
                "content": "    int reverse(int x) {\\n    int px=0;\\n    while(x!=0)\\n     {\\n        if(px>INT_MAX/10 || px<INT_MIN/10)return 0;\\n        px=px*10+x%10;\\n        x=x/10;\\n    }\\n    return px; \\n}",
                "solutionTags": [],
                "code": "    int reverse(int x) {\\n    int px=0;\\n    while(x!=0)\\n     {\\n        if(px>INT_MAX/10 || px<INT_MIN/10)return 0;\\n        px=px*10+x%10;\\n        x=x/10;\\n    }\\n    return px; \\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 3374885,
                "title": "java-solution-without-long-usage-beats-100",
                "content": "# Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nHere is the Approach how we can solve the problem without using any type with more bits.\\n\\nIt\\'s obvious that every time we do this update\\n$$reversed = reversed * 10 + digit;$$\\nIn order to avoid overflow of integers, we need to check whether\\n$$reversed > (Integer.MAXVALUE - digit) / 10$$\\nor not.\\nAnd the same for $$Integer.MINVALUE$$\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(len(n))$$ -->\\n$$O(len(n))$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n\\n        for (; x != 0; x /= 10) {\\n            int digit = x % 10;\\n            if (reversed > 0 && reversed > (Integer.MAX_VALUE - digit) / 10) {\\n                return 0;\\n            }\\n            if (reversed < 0 && reversed < (Integer.MIN_VALUE - digit) / 10) {\\n                return 0;\\n            }\\n            reversed = reversed * 10 + digit;\\n        }\\n\\n        return reversed;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n\\n        for (; x != 0; x /= 10) {\\n            int digit = x % 10;\\n            if (reversed > 0 && reversed > (Integer.MAX_VALUE - digit) / 10) {\\n                return 0;\\n            }\\n            if (reversed < 0 && reversed < (Integer.MIN_VALUE - digit) / 10) {\\n                return 0;\\n            }\\n            reversed = reversed * 10 + digit;\\n        }\\n\\n        return reversed;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2055036,
                "title": "0ms-1liner-100-fastest-solution-explained-o-n-time-complexity-o-n-space-complexity",
                "content": "(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful, ***please upvote*** this post.)\\n***Take care brother, peace, love!***\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 38.2MB*** (beats 92.04% / 24.00%).\\n* *** Python ***\\n\\n```\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        \\n        x = str(x)\\n        \\n        if x[0]==\"-\":\\n            sign = -1\\n        else:\\n            sign = 1\\n            \\n        x = x.lstrip(\"-\")\\n        x = x.lstrip(\"+\")\\n        \\n        x = x[::-1]\\n        \\n        int_x = int(x) * sign\\n        \\n        if int_x > 2**31-1:\\n            return 0\\n        elif int_x < -2**31:\\n            return 0\\n        else:\\n            return int_x\\n        \\n\\n```\\n\\n```\\n```\\n\\n```\\n```\\n***\"We are Anonymous. We are legion. We do not forgive. We do not forget. Expect us. Open your eyes..\" - \\uD835\\uDCD0\\uD835\\uDCF7\\uD835\\uDCF8\\uD835\\uDCF7\\uD835\\uDD02\\uD835\\uDCF6\\uD835\\uDCF8\\uD835\\uDCFE\\uD835\\uDCFC***",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C",
                    "JavaScript",
                    "Kotlin",
                    "Combinatorics"
                ],
                "code": "```\\n```\n```\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        \\n        x = str(x)\\n        \\n        if x[0]==\"-\":\\n            sign = -1\\n        else:\\n            sign = 1\\n            \\n        x = x.lstrip(\"-\")\\n        x = x.lstrip(\"+\")\\n        \\n        x = x[::-1]\\n        \\n        int_x = int(x) * sign\\n        \\n        if int_x > 2**31-1:\\n            return 0\\n        elif int_x < -2**31:\\n            return 0\\n        else:\\n            return int_x\\n        \\n\\n```\n```\\n```\n```\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1280651,
                "title": "c-solution",
                "content": "```\\npublic class Solution {\\n  public int Reverse(int x) {\\n\\t\\tstring str = new string(x.ToString().Trim(\\'-\\').Reverse().ToArray());\\n\\t\\tbool tryInt32 = int.TryParse(str, out int intValue);\\n\\t\\treturn tryInt32 ? x.ToString().Contains(\"-\") ? intValue * -1 : intValue : 0;\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n  public int Reverse(int x) {\\n\\t\\tstring str = new string(x.ToString().Trim(\\'-\\').Reverse().ToArray());\\n\\t\\tbool tryInt32 = int.TryParse(str, out int intValue);\\n\\t\\treturn tryInt32 ? x.ToString().Contains(\"-\") ? intValue * -1 : intValue : 0;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 668535,
                "title": "c-commented",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int flag = 0; //marks negativity \\n        \\n        if(x < 0)\\n            flag = 1;\\n        \\n        int num = abs(x);\\n        long int newNum = 0; //long to avoid integer overflow\\n        \\n        while(num > 0)\\n        {\\n            int rem = num % 10;\\n            \\n            if(newNum*10 > INT_MAX) //to avoid signed integer overflow\\n                return 0;\\n            \\n            newNum = newNum*10 + rem; //Multiply by 10 to increment place value\\n            num = num/10;\\n        }\\n        \\n        if(flag == 0)\\n            return newNum;\\n        \\n        else\\n            return newNum*(-1);\\n    }\\n};\\n```\\n\\n**Upvote if this helped!**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int flag = 0; //marks negativity \\n        \\n        if(x < 0)\\n            flag = 1;\\n        \\n        int num = abs(x);\\n        long int newNum = 0; //long to avoid integer overflow\\n        \\n        while(num > 0)\\n        {\\n            int rem = num % 10;\\n            \\n            if(newNum*10 > INT_MAX) //to avoid signed integer overflow\\n                return 0;\\n            \\n            newNum = newNum*10 + rem; //Multiply by 10 to increment place value\\n            num = num/10;\\n        }\\n        \\n        if(flag == 0)\\n            return newNum;\\n        \\n        else\\n            return newNum*(-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4422,
                "title": "python-straight-forward-solution",
                "content": "    def reverse(x):\\n        sign = -1 if x<0 else 1\\n        res, x = 0, abs(x)\\n        while x:\\n            res = res*10 + (x%10)\\n            x /= 10\\n        # handle the overflow bound\\n        if res > 2**31+1 or res < -2**31-1:\\n            return 0\\n        return res*sign",
                "solutionTags": [
                    "Python"
                ],
                "code": "    def reverse(x):\\n        sign = -1 if x<0 else 1\\n        res, x = 0, abs(x)\\n        while x:\\n            res = res*10 + (x%10)\\n            x /= 10\\n        # handle the overflow bound\\n        if res > 2**31+1 or res < -2**31-1:\\n            return 0\\n        return res*sign",
                "codeTag": "Python3"
            },
            {
                "id": 3642573,
                "title": "python-solution",
                "content": "# Intuition\\nEasy solution in python\\n\\n# Code\\n```\\nMIN=-2**31\\nMAX=(2**31)-1\\nclass Solution:\\n    def __init__(self):\\n        self.rev=0\\n        self.is_neg=False\\n    def reverse(self, x: int) -> int:\\n        if x < 0:\\n            self.is_neg=True\\n            x=abs(x)\\n        while(x!=0):\\n            digit=x%10\\n            x=x//10\\n\\n            if self.rev > MAX//10 or (self.rev==MAX//10 and digit>MAX%10):\\n                return 0\\n            if self.rev<MIN//10 or (self.rev==MIN//10 and digit <MIN%10):\\n                return 0\\n            \\n            self.rev=10*self.rev+digit\\n        if self.is_neg:\\n            self.rev=-self.rev\\n        return self.rev\\n        \\n```\\n\\n\\n![upvote.jpg](https://assets.leetcode.com/users/images/f2b20535-89a4-4005-acb6-e9ba67f53399_1686849752.7148187.jpeg)\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nMIN=-2**31\\nMAX=(2**31)-1\\nclass Solution:\\n    def __init__(self):\\n        self.rev=0\\n        self.is_neg=False\\n    def reverse(self, x: int) -> int:\\n        if x < 0:\\n            self.is_neg=True\\n            x=abs(x)\\n        while(x!=0):\\n            digit=x%10\\n            x=x//10\\n\\n            if self.rev > MAX//10 or (self.rev==MAX//10 and digit>MAX%10):\\n                return 0\\n            if self.rev<MIN//10 or (self.rev==MIN//10 and digit <MIN%10):\\n                return 0\\n            \\n            self.rev=10*self.rev+digit\\n        if self.is_neg:\\n            self.rev=-self.rev\\n        return self.rev\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3227561,
                "title": "simple-2-liner-in-python",
                "content": "# Code\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        ans = int(str(abs(x))[::-1]) * (-1 if x < 0 else 1)\\n        return ans if -2**31 <= ans < 2**31 else 0\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        ans = int(str(abs(x))[::-1]) * (-1 if x < 0 else 1)\\n        return ans if -2**31 <= ans < 2**31 else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2723367,
                "title": "java-easy-solution-100-fast",
                "content": "```\\npublic int reverse(int x) {\\n       long rev=0;\\n        while(x!=0){\\n                \\n                int rem=x%10;\\n                rev=rev*10+rem;\\n                        x=x/10;\\n                if(rev>Integer.MAX_VALUE || rev<Integer.MIN_VALUE) return 0;\\n                \\n                \\n                \\n        }\\n        return (int)rev;\\n    }\\n}",
                "solutionTags": [],
                "code": "```\\npublic int reverse(int x) {\\n       long rev=0;\\n        while(x!=0){\\n                \\n                int rem=x%10;\\n                rev=rev*10+rem;\\n                        x=x/10;\\n                if(rev>Integer.MAX_VALUE || rev<Integer.MIN_VALUE) return 0;\\n                \\n                \\n                \\n        }\\n        return (int)rev;\\n    }\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 1888703,
                "title": "100-fastest-typescript-solution",
                "content": "```\\nconst minInt = -Math.pow(2, 31)\\nconst maxInt = -minInt - 1\\n\\nfunction reverse(x: number): number {\\n  const isNegative = x < 0\\n  let reversed = 0\\n  if (isNegative) { x = -x }\\n\\n  while (x > 0) {\\n    const remainder = x % 10\\n    reversed = reversed * 10 + remainder\\n    x = Math.floor(x / 10)\\n  }\\n\\n  if (reversed > maxInt) { return 0 }\\n  return isNegative ? -reversed : reversed\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nconst minInt = -Math.pow(2, 31)\\nconst maxInt = -minInt - 1\\n\\nfunction reverse(x: number): number {\\n  const isNegative = x < 0\\n  let reversed = 0\\n  if (isNegative) { x = -x }\\n\\n  while (x > 0) {\\n    const remainder = x % 10\\n    reversed = reversed * 10 + remainder\\n    x = Math.floor(x / 10)\\n  }\\n\\n  if (reversed > maxInt) { return 0 }\\n  return isNegative ? -reversed : reversed\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2626431,
                "title": "javascript-easy-understanding",
                "content": "```\\nvar reverse = function(x) {\\n\\t//reverse as string\\n    let reversed = Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\');\\n    // check if result inside range of uint32, dont need to check int32,  checks only positive because we take into account the minus sign in the logic later\\n    if(reversed > 2 ** 31 - 1 ) return 0;\\n    // and if we have minus sign, add it now \\n    return Math.sign(x) * reversed\\n};\\n\\n// if it helps you, please upvote\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reverse = function(x) {\\n\\t//reverse as string\\n    let reversed = Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\');\\n    // check if result inside range of uint32, dont need to check int32,  checks only positive because we take into account the minus sign in the logic later\\n    if(reversed > 2 ** 31 - 1 ) return 0;\\n    // and if we have minus sign, add it now \\n    return Math.sign(x) * reversed\\n};\\n\\n// if it helps you, please upvote\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 895338,
                "title": "easy-python3-solution-w-runtime-16-ms-faster-than-99-94-memu-14-2-mb-less-than-99-98",
                "content": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        rev = int(str(abs(x))[::-1])\\n        i = -rev if x < 0 else rev\\n        if i < -2**31 or i > 2**31-1:\\n            return 0\\n        return i\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        rev = int(str(abs(x))[::-1])\\n        i = -rev if x < 0 else rev\\n        if i < -2**31 or i > 2**31-1:\\n            return 0\\n        return i\\n```",
                "codeTag": "Java"
            },
            {
                "id": 768553,
                "title": "beginner-friendly-js-solution",
                "content": "```\\nvar reverse = function(x) {\\n  // Make the number positive and turn it into a string\\n  let s = Math.abs(x).toString();\\n  let arr = [];\\n  // Push each \"number\" from last to first into an array \\n  for (let i = s.length - 1; i >= 0; i--) {\\n    arr.push(s[i])\\n  }\\n  // Turn the reversed string into a number\\n  let result = Number(arr.join(\\'\\'));\\n  // If the number exceeds the range, return 0\\n  if (result > 2 ** 31 - 1) {\\n    return 0;\\n  }\\n  // If the original input number was negative, turn the final number negative\\n  if (x < 0) {\\n    result *= -1;\\n  }\\n\\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reverse = function(x) {\\n  // Make the number positive and turn it into a string\\n  let s = Math.abs(x).toString();\\n  let arr = [];\\n  // Push each \"number\" from last to first into an array \\n  for (let i = s.length - 1; i >= 0; i--) {\\n    arr.push(s[i])\\n  }\\n  // Turn the reversed string into a number\\n  let result = Number(arr.join(\\'\\'));\\n  // If the number exceeds the range, return 0\\n  if (result > 2 ** 31 - 1) {\\n    return 0;\\n  }\\n  // If the original input number was negative, turn the final number negative\\n  if (x < 0) {\\n    result *= -1;\\n  }\\n\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 724586,
                "title": "javascript-2-solutions-with-video-explanation",
                "content": "https://www.youtube.com/watch?v=zvNEWnLyeQQ&feature=youtu.be\\n\\n### Approach 1: String reverse\\n* Runtime: 148 ms, faster than 5.51% of JavaScript online submissions for Reverse Integer.\\n* Memory Usage: 37.7 MB, less than 10.78% of JavaScript online submissions for Reverse Integer.\\n\\n```\\nvar reverse = function(x) {\\n    const number = Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\');\\n\\n    if (number > Math.pow(2, 31) - 1) {\\n        return 0\\n    }\\n\\n    return x < 0 ? -number : number;\\n};\\n```\\n\\n### Approach 2: Pop and Push digits\\n* Runtime: 72 ms, faster than 94.38% of JavaScript online submissions for Reverse Integer.\\n* Memory Usage: 37.2 MB, less than 38.77% of JavaScript online submissions for Reverse Integer.\\n\\n```\\nvar reverse = function(x) {\\n    let revert = 0;\\n    // const isNegative = x < 0;\\n    const isNegative = x < 0 ? true : false;\\n\\n    // x = Math.abs(x);\\n    if (isNegative) {\\n        x = -1 * x;\\n    }\\n\\n    // while(x) {\\n    //     const pop = x % 10;\\n    //     x = Math.trunc(x / 10);\\n    //     revert = revert * 10 + pop\\n    // }\\n\\n    for (let i = x; i; i = Math.trunc(i / 10)) {\\n        revert = revert * 10 + i % 10\\n    }\\n\\n\\n    // if (revert > 2**31) {\\n    //     return 0;\\n    // }\\n\\n    if (revert >= 2147483648) {\\n        return 0;\\n    }\\n\\n    return isNegative ? -revert : revert\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reverse = function(x) {\\n    const number = Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\');\\n\\n    if (number > Math.pow(2, 31) - 1) {\\n        return 0\\n    }\\n\\n    return x < 0 ? -number : number;\\n};\\n```\n```\\nvar reverse = function(x) {\\n    let revert = 0;\\n    // const isNegative = x < 0;\\n    const isNegative = x < 0 ? true : false;\\n\\n    // x = Math.abs(x);\\n    if (isNegative) {\\n        x = -1 * x;\\n    }\\n\\n    // while(x) {\\n    //     const pop = x % 10;\\n    //     x = Math.trunc(x / 10);\\n    //     revert = revert * 10 + pop\\n    // }\\n\\n    for (let i = x; i; i = Math.trunc(i / 10)) {\\n        revert = revert * 10 + i % 10\\n    }\\n\\n\\n    // if (revert > 2**31) {\\n    //     return 0;\\n    // }\\n\\n    if (revert >= 2147483648) {\\n        return 0;\\n    }\\n\\n    return isNegative ? -revert : revert\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4227,
                "title": "c-solution",
                "content": "```\\npublic class Solution {\\n    public int Reverse(int x) {\\n        \\n        var n =0;\\n        while(x!=0) {\\n            var mod = x%10;\\n            x=x/10;\\n            if (n> Int32.MaxValue/10 || n< Int32.MinValue/10){\\n                return 0;\\n            }\\n            else if(n==Int32.MaxValue/10 && mod >= Int32.MaxValue %10) {\\n                return 0;\\n            }\\n            else if(n==Int32.MinValue/10 && mod <= Int32.MinValue %10) {\\n                return 0;\\n            }\\n            n = n*10 + mod;\\n        }\\n        \\n        return n;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int Reverse(int x) {\\n        \\n        var n =0;\\n        while(x!=0) {\\n            var mod = x%10;\\n            x=x/10;\\n            if (n> Int32.MaxValue/10 || n< Int32.MinValue/10){\\n                return 0;\\n            }\\n            else if(n==Int32.MaxValue/10 && mod >= Int32.MaxValue %10) {\\n                return 0;\\n            }\\n            else if(n==Int32.MinValue/10 && mod <= Int32.MinValue %10) {\\n                return 0;\\n            }\\n            n = n*10 + mod;\\n        }\\n        \\n        return n;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4185,
                "title": "my-simple-solution-in-javascript",
                "content": "    var reverse = function(x)\\n     {\\n    var sign= (x>0)?1: -1;\\n    x=Math.abs(x);\\n    var str=x.toString().split(\"\").reverse().join(\"\");\\n    var result=sign * Number(str);\\n    if(result>2147483647 || result < -2147483648)return 0;\\n    else return result;\\n    };",
                "solutionTags": [],
                "code": "    var reverse = function(x)\\n     {\\n    var sign= (x>0)?1: -1;\\n    x=Math.abs(x);\\n    var str=x.toString().split(\"\").reverse().join(\"\");\\n    var result=sign * Number(str);\\n    if(result>2147483647 || result < -2147483648)return 0;\\n    else return result;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 4588,
                "title": "java-solution-using-stringbuilder-over-underflow-caught",
                "content": "I was thinking a different approach, so I came up with a solution that uses StringBuilder.\\nIt's not a best solution out there, but it saves some time.. (226ms) \\n\\n    public int reverse(int x) {\\n        StringBuilder result = new StringBuilder();\\n        String resultSt = \"\";\\n        int val = 0;\\n        \\n        if (x > 0) {\\n            resultSt = result.append(x).reverse().toString();\\n\\n            try { \\n                val = (int) Integer.parseInt(resultSt);\\n            } catch (NumberFormatException e) { return 0; }\\n            \\n            return val;\\n        }\\n        \\n        else {\\n            x = -x;\\n            resultSt = result.append(x).reverse().toString();\\n\\n            try { \\n                val = (int) Integer.parseInt(resultSt);\\n            } catch (NumberFormatException e) { return 0; }\\n            \\n            return -val;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "I was thinking a different approach, so I came up with a solution that uses StringBuilder.\\nIt's not a best solution out there, but it saves some time.. (226ms) \\n\\n    public int reverse(int x) {\\n        StringBuilder result = new StringBuilder();\\n        String resultSt = \"\";\\n        int val = 0;\\n        \\n        if (x > 0) {\\n            resultSt = result.append(x).reverse().toString();\\n\\n            try { \\n                val = (int) Integer.parseInt(resultSt);\\n            } catch (NumberFormatException e) { return 0; }\\n            \\n            return val;\\n        }\\n        \\n        else {\\n            x = -x;\\n            resultSt = result.append(x).reverse().toString();\\n\\n            try { \\n                val = (int) Integer.parseInt(resultSt);\\n            } catch (NumberFormatException e) { return 0; }\\n            \\n            return -val;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3333255,
                "title": "95-99-javascript-without-store-64-bit-integers",
                "content": "This problem is very similar to the [9. Palindrome Number](https://leetcode.com/problems/palindrome-number/description/). \\nTo solve it, I was just edit [my solution](https://leetcode.com/problems/palindrome-number/solutions/2499161/99-22-javascript-without-converting-the-integer-to-a-string/?orderBy=hot) of palindrome number problem.\\n\\n#### How to reverse the number\\n```\\noriginal number: 543\\nreverse number: 0\\n\\n//Get the last digit of the original number\\noriginal % 10 = 543 % 10 = 3\\n//Put this digit as the last one in the reverse number\\nreverse * 10 + digit = 0 * 10 + 3 = 0 + 3 = 3\\nreverse: 3\\n//Remove this digit from the original number\\noriginal / 10 = 543 / 10 = 54.3\\n~~54.3 = 54\\noriginal: 54\\n\\n//Repeat\\noriginal % 10 = 54 % 10 = 4\\nreverse * 10 + digit = 3 * 10 + 4 = 30 + 4 = 34\\nreverse: 34\\noriginal / 10 = 54 / 10 = 5.4\\n~~5.4 = 5\\noriginal: 5\\n\\n//Repeat\\noriginal % 10 = 5 % 10 = 5\\nreverse * 10 + digit = 34 * 10 + 5 = 340 + 5 = 345\\nreverse: 345\\noriginal / 10 = 5 / 10 = 0.5\\n~~0.5 = 0\\noriginal: 0\\n\\ninput: 543\\noutput: 345\\n\\n```\\n\\nBut we also have to pay attention to the condition of the problem:\\n\\n*If reversing`x`causes the value to go outside the signed 32-bit integer range`[-2^31,2^31 - 1]`, then return`0`.*\\n\\nThis means that the reverse number must not be less than ```-2147483648``` or greater than ```2147483647```. Let\\'s declare these two values as constants:\\n\\n``` JavaScript []\\nconst MAX_SAFE_INTEGER = 2147483647;\\nconst MIN_SAFE_INTEGER = -2147483648;\\n```\\nThe condition also states:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that we cannot allocate a variable that is greater than the max safe value or less than the min safe value. This can happen during `reverse * 10 + digit`, so before we do this, we need to make sure of a few things.\\n\\n``` JavaScript []\\nreverse * 10 \\n//will not be greater than the max safe value or less than the min save value\\nif (reverse > MAX_SAFE_INTEGER / 10 || reverse < MIN_SAFE_INTEGER / 10)\\n\\nreverse * 10 + digit \\n//will not be greater than the max safe value\\nif (reverse == MAX_SAFE_INTEGER / 10 && digit > 7)\\n\\nreverse * 10 + digit \\n//will not be less than the min safe value\\nif (reverse == MIN_SAFE_INTEGER / 10 && digit < -8)\\n```\\n\\n**Please upvote if it was helpful!**\\n# Final code\\n\\n``` javascript []\\nvar reverse = function(x) {\\n    const MAX_SAFE_INTEGER = 2147483647;\\n    const MIN_SAFE_INTEGER = -2147483648;\\n\\n    var reverse = 0;\\n\\n    while (x != 0) {\\n      if (reverse > MAX_SAFE_INTEGER / 10 || reverse < MIN_SAFE_INTEGER / 10) {\\n        return 0;\\n      }\\n\\n      const digit = x % 10;\\n      if (reverse == MAX_SAFE_INTEGER / 10 && digit > 7) {\\n        return 0;\\n      }\\n      if (reverse == MIN_SAFE_INTEGER / 10 && digit < -8) {\\n        return 0;\\n      }\\n\\n      reverse = reverse * 10 + digit;\\n      x = ~~(x / 10);\\n    }\\n\\n    return reverse;\\n};\\n```\\n[Submission Detail](https://leetcode.com/submissions/detail/924341915/)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\noriginal number: 543\\nreverse number: 0\\n\\n//Get the last digit of the original number\\noriginal % 10 = 543 % 10 = 3\\n//Put this digit as the last one in the reverse number\\nreverse * 10 + digit = 0 * 10 + 3 = 0 + 3 = 3\\nreverse: 3\\n//Remove this digit from the original number\\noriginal / 10 = 543 / 10 = 54.3\\n~~54.3 = 54\\noriginal: 54\\n\\n//Repeat\\noriginal % 10 = 54 % 10 = 4\\nreverse * 10 + digit = 3 * 10 + 4 = 30 + 4 = 34\\nreverse: 34\\noriginal / 10 = 54 / 10 = 5.4\\n~~5.4 = 5\\noriginal: 5\\n\\n//Repeat\\noriginal % 10 = 5 % 10 = 5\\nreverse * 10 + digit = 34 * 10 + 5 = 340 + 5 = 345\\nreverse: 345\\noriginal / 10 = 5 / 10 = 0.5\\n~~0.5 = 0\\noriginal: 0\\n\\ninput: 543\\noutput: 345\\n\\n```\n```-2147483648```\n```2147483647```\n``` JavaScript []\\nconst MAX_SAFE_INTEGER = 2147483647;\\nconst MIN_SAFE_INTEGER = -2147483648;\\n```\n``` JavaScript []\\nreverse * 10 \\n//will not be greater than the max safe value or less than the min save value\\nif (reverse > MAX_SAFE_INTEGER / 10 || reverse < MIN_SAFE_INTEGER / 10)\\n\\nreverse * 10 + digit \\n//will not be greater than the max safe value\\nif (reverse == MAX_SAFE_INTEGER / 10 && digit > 7)\\n\\nreverse * 10 + digit \\n//will not be less than the min safe value\\nif (reverse == MIN_SAFE_INTEGER / 10 && digit < -8)\\n```\n``` javascript []\\nvar reverse = function(x) {\\n    const MAX_SAFE_INTEGER = 2147483647;\\n    const MIN_SAFE_INTEGER = -2147483648;\\n\\n    var reverse = 0;\\n\\n    while (x != 0) {\\n      if (reverse > MAX_SAFE_INTEGER / 10 || reverse < MIN_SAFE_INTEGER / 10) {\\n        return 0;\\n      }\\n\\n      const digit = x % 10;\\n      if (reverse == MAX_SAFE_INTEGER / 10 && digit > 7) {\\n        return 0;\\n      }\\n      if (reverse == MIN_SAFE_INTEGER / 10 && digit < -8) {\\n        return 0;\\n      }\\n\\n      reverse = reverse * 10 + digit;\\n      x = ~~(x / 10);\\n    }\\n\\n    return reverse;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2748225,
                "title": "reverse-integer-easy-c-solution",
                "content": "```\\n//Upvote Kar Keddhi\\uD83D\\uDE42\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num=abs(x);\\n        long rev_num=0;\\n        while(num)\\n        {\\n            rev_num*=10;\\n            int digit=num%10;\\n            rev_num+=digit;\\n            num/=10;\\n        }\\n        if(x<0) rev_num*=-1;\\n        if(rev_num>=-1*pow(2,31)&&rev_num<=pow(2,31)-1) return rev_num;\\n        else return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\n//Upvote Kar Keddhi\\uD83D\\uDE42\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num=abs(x);\\n        long rev_num=0;\\n        while(num)\\n        {\\n            rev_num*=10;\\n            int digit=num%10;\\n            rev_num+=digit;\\n            num/=10;\\n        }\\n        if(x<0) rev_num*=-1;\\n        if(rev_num>=-1*pow(2,31)&&rev_num<=pow(2,31)-1) return rev_num;\\n        else return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2747767,
                "title": "simple-python",
                "content": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        if x > 0:\\n            ans = int(str(x)[::-1])\\n        else:\\n            ans = int(str(x * -1)[::-1]) * -1\\n        \\n        mi = 2 ** 31 * (-1)\\n        ma = 2 ** 31 - 1\\n        \\n        if ans > ma or ans < mi:\\n            return 0\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        if x > 0:\\n            ans = int(str(x)[::-1])\\n        else:\\n            ans = int(str(x * -1)[::-1]) * -1\\n        \\n        mi = 2 ** 31 * (-1)\\n        ma = 2 ** 31 - 1\\n        \\n        if ans > ma or ans < mi:\\n            return 0\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 821663,
                "title": "c-solution-0-ms-faster-than-100-00",
                "content": "int reverse(int x) {\\n\\tint reversed = 0;\\n\\tint flag = 0;\\n\\tint mode = 0;\\n\\n\\tif (x > pow(2, 31) - 1 && x < -(pow(2, 31))) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\twhile (x != 0) {\\n\\t\\tmode = x % 10;\\n\\t\\tif (reversed > (pow(2, 31) - 1) / 10 || reversed < -(pow(2, 31) / 10)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treversed = reversed * 10 + mode;\\n\\t\\tx /= 10;\\n\\t}\\n\\n\\treturn reversed;\\n}",
                "solutionTags": [
                    "C"
                ],
                "code": "int reverse(int x) {\\n\\tint reversed = 0;\\n\\tint flag = 0;\\n\\tint mode = 0;\\n\\n\\tif (x > pow(2, 31) - 1 && x < -(pow(2, 31))) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\twhile (x != 0) {\\n\\t\\tmode = x % 10;\\n\\t\\tif (reversed > (pow(2, 31) - 1) / 10 || reversed < -(pow(2, 31) / 10)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treversed = reversed * 10 + mode;\\n\\t\\tx /= 10;\\n\\t}\\n\\n\\treturn reversed;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 351937,
                "title": "java-solution-beats-100",
                "content": "```\\n    public int reverse(int x) {\\n        int r=0; \\n        int sign = x<0? -1 : 1;\\n        x = Math.abs(x);\\n        while ( x>0){\\n            if( r>Integer.MAX_VALUE/10) return 0;\\n            r = r*10+ x%10;\\n            x = x/10;\\n        }\\n        return sign*r;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int reverse(int x) {\\n        int r=0; \\n        int sign = x<0? -1 : 1;\\n        x = Math.abs(x);\\n        while ( x>0){\\n            if( r>Integer.MAX_VALUE/10) return 0;\\n            r = r*10+ x%10;\\n            x = x/10;\\n        }\\n        return sign*r;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4359,
                "title": "golang-solution",
                "content": "    func reverse(x int) int {\\n        var result int\\n        for x != 0 {\\n            result = result * 10 + x % 10\\n            x = x / 10\\n        }\\n        if result < math.MinInt32 || result > math.MaxInt32 {\\n            return 0\\n        }\\n        return result\\n    }",
                "solutionTags": [],
                "code": "    func reverse(x int) int {\\n        var result int\\n        for x != 0 {\\n            result = result * 10 + x % 10\\n            x = x / 10\\n        }\\n        if result < math.MinInt32 || result > math.MaxInt32 {\\n            return 0\\n        }\\n        return result\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4475,
                "title": "short-accepted-c-solution-using-int-without-long-or-string",
                "content": "     int reverse(int x) {\\n            if(INT_MIN == x) return 0;\\n            if(x < 0) return -reverse(-x);\\n            int result = 0;\\n            while(x > 0){\\n                int a = x % 10;\\n                x = x / 10;\\n                if((INT_MAX - a) / 10 < result)\\n                  return 0;\\n                result = result * 10 + a;\\n            }\\n            return result;\\n        }",
                "solutionTags": [
                    "C++",
                    "Python"
                ],
                "code": "     int reverse(int x) {\\n            if(INT_MIN == x) return 0;\\n            if(x < 0) return -reverse(-x);\\n            int result = 0;\\n            while(x > 0){\\n                int a = x % 10;\\n                x = x / 10;\\n                if((INT_MAX - a) / 10 < result)\\n                  return 0;\\n                result = result * 10 + a;\\n            }\\n            return result;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 3005319,
                "title": "c-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1343365,
                "title": "c-solution-using-try-catch-block",
                "content": "Here is my code using try catch block in C++.\\n\\n```\\nint reverse(int x) {\\n        int sig = 1;\\n        if(x < 0)\\n            sig = -1;\\n        \\n        x = abs(x);\\n        \\n        string s = to_string(x);\\n        std::reverse(s.begin(), s.end());\\n        \\n        try{\\n            x = stoi(s);\\n        } catch (...) {\\n            return 0;\\n        }\\n        \\n        x = sig * x;\\n        return x;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint reverse(int x) {\\n        int sig = 1;\\n        if(x < 0)\\n            sig = -1;\\n        \\n        x = abs(x);\\n        \\n        string s = to_string(x);\\n        std::reverse(s.begin(), s.end());\\n        \\n        try{\\n            x = stoi(s);\\n        } catch (...) {\\n            return 0;\\n        }\\n        \\n        x = sig * x;\\n        return x;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 945102,
                "title": "c-solution-handle-the-overflow",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        // check if x is outside the boundary of signed integer range: [\\u2212231,  231 \\u2212 1]\\n        if(INT_MIN < x && x > INT_MAX) {\\n            return 0;\\n        }\\n        \\n        // check if x is negative integer\\n        int sign = 1;\\n        if (x < 0) {\\n            sign = -1;\\n        }\\n        \\n        // do while loop for x > 0\\n        int num = abs(x), res = 0;\\n        while (num > 0) {\\n            // check if [res * 10 > INT_MAX], which equals to [res > INT_MAX/10]\\n            if (res > INT_MAX/10) {\\n                return 0;\\n            }\\n\\n            res = (res * 10) + (num % 10);\\n            num = int(num/10);\\n        }\\n        \\n        // don\\'t forget to multipy the result with sign\\n        return res * sign;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        // check if x is outside the boundary of signed integer range: [\\u2212231,  231 \\u2212 1]\\n        if(INT_MIN < x && x > INT_MAX) {\\n            return 0;\\n        }\\n        \\n        // check if x is negative integer\\n        int sign = 1;\\n        if (x < 0) {\\n            sign = -1;\\n        }\\n        \\n        // do while loop for x > 0\\n        int num = abs(x), res = 0;\\n        while (num > 0) {\\n            // check if [res * 10 > INT_MAX], which equals to [res > INT_MAX/10]\\n            if (res > INT_MAX/10) {\\n                return 0;\\n            }\\n\\n            res = (res * 10) + (num % 10);\\n            num = int(num/10);\\n        }\\n        \\n        // don\\'t forget to multipy the result with sign\\n        return res * sign;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 407350,
                "title": "javascript",
                "content": "```\\nvar reverse = function(x) {\\n    let ans = x < 0 ? \\n        parseInt(Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\')) * -1\\n        :\\n        parseInt(x.toString().split(\\'\\').reverse().join(\\'\\'))\\n    return Math.abs(ans) < Math.pow(2,31) ? ans : 0;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar reverse = function(x) {\\n    let ans = x < 0 ? \\n        parseInt(Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\')) * -1\\n        :\\n        parseInt(x.toString().split(\\'\\').reverse().join(\\'\\'))\\n    return Math.abs(ans) < Math.pow(2,31) ? ans : 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 366565,
                "title": "2-line-straightforward-python-solution",
                "content": "```python\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        r = int(str(abs(x))[::-1])\\n        return (-r if x < 0 else r) if r.bit_length() < 32 else 0\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        r = int(str(abs(x))[::-1])\\n        return (-r if x < 0 else r) if r.bit_length() < 32 else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 250597,
                "title": "c-solution-using-unchecked-beats-100-40ms",
                "content": "This is a C# solution using a foor loop to organize the loop control variables.\\nI used the unchecked keyword to allow overflow. If the new push value doesn\\'t match the original value then we have detected overflow and we can return 0.\\n\\n```\\npublic class Solution \\n{\\n    public int Reverse(int x) \\n    {\\n        int reversed = 0;\\n        for(int pop = 0, push = 0; x != 0; x /= 10)\\n        {\\n            unchecked \\n            {\\n                pop = x % 10;\\n                push = reversed * 10 + pop;\\n                if((push-pop)/10 != reversed) \\n                   return 0;\\n                reversed = push;\\n            }\\n        }\\n        return reversed;\\n    }\\n}\\n```\\n\\nWe \"pop\" a value by removing it using the % operator. If we do % 10 then we\\'ll always get the number in the single digits.\\n\\nWe \"push\" a value by multiplying the current reversed integer by 10, this effectively shifts everything to the left 1 digit, then we add the recently \"popped\" value into the singles digit. \\n\\nWe can move onto the next value by dividing the value by 10, this cuts off the rightmost digit.",
                "solutionTags": [],
                "code": "```\\npublic class Solution \\n{\\n    public int Reverse(int x) \\n    {\\n        int reversed = 0;\\n        for(int pop = 0, push = 0; x != 0; x /= 10)\\n        {\\n            unchecked \\n            {\\n                pop = x % 10;\\n                push = reversed * 10 + pop;\\n                if((push-pop)/10 != reversed) \\n                   return 0;\\n                reversed = push;\\n            }\\n        }\\n        return reversed;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4407,
                "title": "an-standard-c-solution-with-fast-speed-14-lines",
                "content": "    class Solution {\\n    public:\\n        int reverse(int x) {\\n            long returnInt = 0;\\n            while (x)\\n            {\\n                returnInt = returnInt*10+x%10;\\n                x/=10;\\n            }\\n            if (returnInt>0)\\n                return returnInt > INT_MAX ? 0 : returnInt;\\n            else return returnInt < INT_MIN ? 0 : returnInt;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        int reverse(int x) {\\n            long returnInt = 0;\\n            while (x)\\n            {\\n                returnInt = returnInt*10+x%10;\\n                x/=10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4431,
                "title": "2ms-java-easy-version-to-understand-and-you-needn-t-to-consider-the-symbol-of",
                "content": "**I think it might be better! and needn't to consider the symbol of +/- when you compute -123 or 123**\\n\\n  \\n        /**\\n         * \\u8003\\u8651\\u6ea2\\u51fa\\n         * + - \\u53f7\\u4e0d\\u7528\\u8003\\u8651\\n         * */\\n         \\n         double res = 0;\\n         while(x != 0){\\n              //int single = x % 10;\\n             res = res*10 + x % 10;\\n             x = x/10;\\n         }\\n         \\n         if(res > Integer.MAX_VALUE || res < Integer.MIN_VALUE)\\n        \\t res = 0;\\n         \\n         return (int) res;",
                "solutionTags": [],
                "code": "**I think it might be better! and needn't to consider the symbol of +/- when you compute -123 or 123**\\n\\n  \\n        /**\\n         * \\u8003\\u8651\\u6ea2\\u51fa\\n         * + - \\u53f7\\u4e0d\\u7528\\u8003\\u8651\\n         * */\\n         \\n         double res = 0;\\n         while(x != 0){\\n              //int single = x % 10;\\n             res = res*10 + x % 10;\\n             x = x/10;\\n         }\\n         \\n         if(res > Integer.MAX_VALUE || res < Integer.MIN_VALUE)\\n        \\t res = 0;\\n         \\n         return (int) res;",
                "codeTag": "Unknown"
            },
            {
                "id": 4234,
                "title": "c-8-ms-solution-for-overflow-in-5-lines",
                "content": "      int tmp,y = 0;\\n      while(x != 0){\\n            tmp = y * 10 + x % 10;\\n            if(x>0&&(tmp/10 < y))  return 0;\\n            if(x<0&&(tmp/10 > y))  return 0;\\n            y = tmp;\\n            x /= 10;\\n        }\\n        return y;",
                "solutionTags": [
                    "C++"
                ],
                "code": "      int tmp,y = 0;\\n      while(x != 0){\\n            tmp = y * 10 + x % 10;\\n            if(x>0&&(tmp/10 < y))  return 0;\\n            if(x<0&&(tmp/10 > y))  return 0;\\n            y = tmp;\\n            x /= 10;\\n        }\\n        return y;",
                "codeTag": "Unknown"
            },
            {
                "id": 4550,
                "title": "simple-java-accepted-code-with-explanation",
                "content": "    public int reverse(int x) {\\n        long result = 0;\\n        //long type is for compare. Only larger range can compare Max and Min Integer \\n\\n        while(x!=0)\\n        {\\n        \\tint mod = x%10;\\n        \\tx = x/10;\\n        \\tresult = result*10 + mod;\\n        \\tif(result>Integer.MAX_VALUE||result<Integer.MIN_VALUE) return 0;\\n        }\\n        return (int) result;\\n    }",
                "solutionTags": [],
                "code": "    public int reverse(int x) {\\n        long result = 0;\\n        //long type is for compare. Only larger range can compare Max and Min Integer \\n\\n        while(x!=0)\\n        {\\n        \\tint mod = x%10;\\n        \\tx = x/10;\\n        \\tresult = result*10 + mod;\\n        \\tif(result>Integer.MAX_VALUE||result<Integer.MIN_VALUE) return 0;\\n        }\\n        return (int) result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4500,
                "title": "can-we-give-different-language-different-overflow-boundary",
                "content": "In official and most of people's solution, C++ or Java is used. So check 2147483647 in the code is necessary. But 2147483647 is not the boundary in Python. So in Python code, adding \\n\\n>         if (result >= 2147483647):\\n            return 0\\n\\nis sort of ugly and just for AC.\\n\\nCan we have different boundary for Python in this case?",
                "solutionTags": [
                    "Python"
                ],
                "code": "In official and most of people's solution, C++ or Java is used. So check 2147483647 in the code is necessary. But 2147483647 is not the boundary in Python. So in Python code, adding \\n\\n>         if (result >= 2147483647):\\n            return 0\\n\\nis sort of ugly and just for AC.\\n\\nCan we have different boundary for Python in this case?",
                "codeTag": "Unknown"
            },
            {
                "id": 3077886,
                "title": "javascript-solution-without-converting-to-string-by-using-simple-math",
                "content": "# Intuition\\nhere, we are going to find out a program to reverse an integer without needing to convert the number to string or using any functions (like reverse);\\n\\n# Approach\\nwe are actually going to make the number work like a string without converting it to a string using mathematical equations.\\n\\nthings to keep in mind:\\n1) To find the last digit of a number, do as below:\\n   number % 10 \\n\\n    example: \\n        123 % 10 = 3,\\n        28 % 10 = 8\\n2) To insert a digit to the number, do as below:\\n    (number * 10) + digit\\n\\n    example:\\n        suppose we need insert digit 4 into the number 123,\\n        (123 * 10) + 4 = 1234\\n\\nBy just using these two simple mathematical equations, we can do reverse the integer.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n    let output = 0;  //initialising the reverse value as 0 at beginning\\n    while(x!=0){ // to stop the while loop once we have completed the reversal\\n        output = (output * 10) + (x % 10); // maths formula to insert the digit to the number (like in the equation 2 (see the approach section of this solution))\\n        x = (x - (x % 10))/10; // maths formula to delete the last digit using equation 1 (see the approach section of this solution)\\n    }\\n    if(output <= -2147483651 || output >= 2147483651){  // checking whether the result is in the range as mentioned in the question)\\n        return 0;\\n    }\\n    return output; // returning the result\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n    let output = 0;  //initialising the reverse value as 0 at beginning\\n    while(x!=0){ // to stop the while loop once we have completed the reversal\\n        output = (output * 10) + (x % 10); // maths formula to insert the digit to the number (like in the equation 2 (see the approach section of this solution))\\n        x = (x - (x % 10))/10; // maths formula to delete the last digit using equation 1 (see the approach section of this solution)\\n    }\\n    if(output <= -2147483651 || output >= 2147483651){  // checking whether the result is in the range as mentioned in the question)\\n        return 0;\\n    }\\n    return output; // returning the result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2804732,
                "title": "java-code-runtime-1-ms-faster-than-100-00",
                "content": "```\\nclass Solution {\\n    public int reverse(int n) {\\n        \\n   // Constraints GIVEN In Question:  -231 <= x <= 231 - 1\\n         if(n>= Integer.MAX_VALUE || n<=Integer.MIN_VALUE)\\n             return 0;\\n     \\n        int num = n;   \\n        if(num<0){\\n            n=n*(-1);    // make number positive and reverse it.\\n        }\\n\\n        // REVERSE LOGIC :\\n        long rev=0;\\n        while(n > 0) {\\n            long digit=n%10;\\n            rev = rev*10 + digit;\\n            n/=10;\\n\\n          if(rev>= Integer.MAX_VALUE)                  // If during reversing, value of number becomes  greater than MAX_VALUE  -> return 0\\n           return 0;\\n        }\\n\\n //If Original Number is negative - then convert reverse also number to negative.          \\n   \\n       if(num<0)\\n             rev=rev*(-1);         \\n        \\n        return (int)rev; \\n    }\\n}```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int n) {\\n        \\n   // Constraints GIVEN In Question:  -231 <= x <= 231 - 1\\n         if(n>= Integer.MAX_VALUE || n<=Integer.MIN_VALUE)\\n             return 0;\\n     \\n        int num = n;   \\n        if(num<0){\\n            n=n*(-1);    // make number positive and reverse it.\\n        }\\n\\n        // REVERSE LOGIC :\\n        long rev=0;\\n        while(n > 0) {\\n            long digit=n%10;\\n            rev = rev*10 + digit;\\n            n/=10;\\n\\n          if(rev>= Integer.MAX_VALUE)                  // If during reversing, value of number becomes  greater than MAX_VALUE  -> return 0\\n           return 0;\\n        }\\n\\n //If Original Number is negative - then convert reverse also number to negative.          \\n   \\n       if(num<0)\\n             rev=rev*(-1);         \\n        \\n        return (int)rev; \\n    }\\n}```",
                "codeTag": "Java"
            },
            {
                "id": 2387483,
                "title": "solution-without-converting-into-string",
                "content": "```\\nvar reverse = function(x) {\\n    let val = Math.abs(x)\\n    let res = 0\\n    while(val !=0){\\n         res = (res*10) + val %10\\n         val = Math.floor(val/10)\\n    }\\n    if(x < 0)res = 0 - res\\n    return (res > ((2**31)-1) || res < (-2)**31) ? 0 : res \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reverse = function(x) {\\n    let val = Math.abs(x)\\n    let res = 0\\n    while(val !=0){\\n         res = (res*10) + val %10\\n         val = Math.floor(val/10)\\n    }\\n    if(x < 0)res = 0 - res\\n    return (res > ((2**31)-1) || res < (-2)**31) ? 0 : res \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1417747,
                "title": "python-without-string",
                "content": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        INT_MAX = 2**31\\n        INT_MIN = -2**31 -1\\n        ans = 0\\n        xabs = abs(x)\\n        \\n        while xabs > 0:\\n            ans *= 10\\n            ans += xabs % 10\\n            xabs = int(xabs/10)      \\n        \\n        ans = ans if x > 0 else -ans\\n        \\n        return ans if INT_MIN <= ans <= INT_MAX else 0\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        INT_MAX = 2**31\\n        INT_MIN = -2**31 -1\\n        ans = 0\\n        xabs = abs(x)\\n        \\n        while xabs > 0:\\n            ans *= 10\\n            ans += xabs % 10\\n            xabs = int(xabs/10)      \\n        \\n        ans = ans if x > 0 else -ans\\n        \\n        return ans if INT_MIN <= ans <= INT_MAX else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1064206,
                "title": "simple-java-beats-100",
                "content": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x<10 && x>-10) {\\n            return x;\\n        }\\n        long answer = 0;\\n        while(x!=0) {\\n            answer = answer * 10 + x%10;\\n            x /= 10;\\n        }\\n        return answer>=Integer.MIN_VALUE && answer <= Integer.MAX_VALUE ? (int)answer:0;\\n        \\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x<10 && x>-10) {\\n            return x;\\n        }\\n        long answer = 0;\\n        while(x!=0) {\\n            answer = answer * 10 + x%10;\\n            x /= 10;\\n        }\\n        return answer>=Integer.MIN_VALUE && answer <= Integer.MAX_VALUE ? (int)answer:0;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 401225,
                "title": "swift-5-solution",
                "content": "```swift\\n  func reverse(_ x: Int) -> Int {\\n    if x >= 0 {\\n      return Int(Int32(String(String(x).reversed())) ?? 0)\\n    }\\n    else {\\n      return -Int(Int32(String(String(-x).reversed())) ?? 0)\\n    }\\n  }\\n```",
                "solutionTags": [],
                "code": "```swift\\n  func reverse(_ x: Int) -> Int {\\n    if x >= 0 {\\n      return Int(Int32(String(String(x).reversed())) ?? 0)\\n    }\\n    else {\\n      return -Int(Int32(String(String(-x).reversed())) ?? 0)\\n    }\\n  }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 333081,
                "title": "cpp-code",
                "content": "```\\nint reverse(int x) {\\n      int a = INT_MAX;\\n      int b = INT_MIN;\\n\\n      int ans = 0;\\n      while(x != 0){\\n        if(a/10 < ans) return 0;\\n        if(b/10 > ans) return 0;\\n        ans = ans * 10 + x % 10;\\n        x = x / 10;\\n      }\\n      \\n      return ans;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint reverse(int x) {\\n      int a = INT_MAX;\\n      int b = INT_MIN;\\n\\n      int ans = 0;\\n      while(x != 0){\\n        if(a/10 < ans) return 0;\\n        if(b/10 > ans) return 0;\\n        ans = ans * 10 + x % 10;\\n        x = x / 10;\\n      }\\n      \\n      return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4220,
                "title": "simple-python-solution-56ms",
                "content": "In Python, integer has no true fixed maximum, only limited by available memory.\\n\\n    def reverse(self, x):\\n        s = str(x)\\n        res = int('-' + s[1:][::-1]) if s[0] == '-' else int(s[::-1])\\n        return res if -2147483648 <= res <= 2147483647 else 0",
                "solutionTags": [
                    "Python"
                ],
                "code": "In Python, integer has no true fixed maximum, only limited by available memory.\\n\\n    def reverse(self, x):\\n        s = str(x)\\n        res = int('-' + s[1:][::-1]) if s[0] == '-' else int(s[::-1])\\n        return res if -2147483648 <= res <= 2147483647 else 0",
                "codeTag": "Python3"
            },
            {
                "id": 4494,
                "title": "also-8ms-c-solution-with-comments",
                "content": "    class Solution {\\n     public:\\n        int reverse(int x) {\\n            long result = 0;           // Final result\\n            long op = x < 0 ? -1 : 1;  // Get the operator\\n    \\n            long tmp = abs((long)x);  // Avoid too many type conversions and work with positive number\\n            while (tmp) {             // When tmp is zero, stops\\n                result += tmp % 10;   // Get the last number\\n                result *= 10;\\n                tmp /= 10;\\n            }\\n            result /= 10;  // Remove the last zero\\n    \\n            return result > (long)INT_MAX ? 0 : result * op;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n     public:\\n        int reverse(int x) {\\n            long result = 0;           // Final result\\n            long op = x < 0 ? -1 : 1;  // Get the operator\\n    \\n            long tmp = abs((long)x);  // Avoid too many type conversions and work with positive number\\n            while (tmp) {             // When tmp is zero, stops\\n                result += tmp % 10;   // Get the last number\\n                result *= 10;\\n                tmp /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4338,
                "title": "4-ms-c-solution",
                "content": "    class Solution {\\n    public:\\n        int reverse(int x) {\\n            long num = abs((long)x);\\n            long new_num = 0;\\n            while(num) {\\n                new_num = new_num*10 + num%10;\\n                num /= 10;\\n            }\\n            \\n            if (new_num > INT_MAX) {\\n                return 0;\\n            }\\n            return (x<0 ? -1*new_num : new_num);\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        int reverse(int x) {\\n            long num = abs((long)x);\\n            long new_num = 0;\\n            while(num) {\\n                new_num = new_num*10 + num%10;\\n                num /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4613,
                "title": "why-compared-with-214748364-in-the-solution",
                "content": "In the solution, the ret value is compared with 214748364, why?\\n\\nThe Integer.MAX_VALUE  should be  2147483647 , isn't it? \\n\\nThe solution code is as below:  \\n\\n    public int reverse(int x) {\\n       int ret = 0;\\n       while (x != 0) {\\n          // handle overflow/underflow\\n          if (Math.abs(ret) > 214748364) {\\n             return 0;\\n          }\\n          ret = ret * 10 + x % 10;\\n          x /= 10;\\n       }\\n       return ret;\\n    }",
                "solutionTags": [],
                "code": "In the solution, the ret value is compared with 214748364, why?\\n\\nThe Integer.MAX_VALUE  should be  2147483647 , isn't it? \\n\\nThe solution code is as below:  \\n\\n    public int reverse(int x) {\\n       int ret = 0;\\n       while (x != 0) {\\n          // handle overflow/underflow\\n          if (Math.abs(ret) > 214748364) {\\n             return 0;\\n          }\\n          ret = ret * 10 + x % 10;\\n          x /= 10;\\n       }\\n       return ret;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4616,
                "title": "more-test-cases-needed",
                "content": "I have the following code w/o taking care of the overflow, but it's got AC.\\n\\n    int reverse(int x) {\\n        int sign=x>0?1:-1;\\n        x=x*sign;\\n        int rev=0;\\n        while(x!=0) {\\n            rev=10*rev+x%10;\\n            x/=10;\\n        }\\n        return rev*sign;\\n    }",
                "solutionTags": [],
                "code": "I have the following code w/o taking care of the overflow, but it's got AC.\\n\\n    int reverse(int x) {\\n        int sign=x>0?1:-1;\\n        x=x*sign;\\n        int rev=0;\\n        while(x!=0) {\\n            rev=10*rev+x%10;\\n            x/=10;\\n        }\\n        return rev*sign;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3946651,
                "title": "reverse-integer-in-java-beats-98-91-runtime-solutions",
                "content": "\\n# Approach\\nFirst of all I have chosen the basic formula for reverseing integers,\\nthen as the questing says (after reversing) if the reversed integer is out \\nof range then it should return 0, so for that i have used conditional statement for checking MIN and MAX range .\\nAnd if its in range then it returned reversed integer.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n\\n- Space complexity:\\nO(1)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        long reversedx=0;\\n        int remainder=0;\\n\\n        int temp = x;\\n\\n        while (temp != 0) {\\n            remainder = temp % 10;\\n            reversedx = (reversedx * 10) + remainder;\\n            temp /= 10;\\n        }\\n        if(reversedx > Integer.MAX_VALUE || reversedx < Integer.MIN_VALUE)\\n            return 0;\\n        return (int)reversedx;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        long reversedx=0;\\n        int remainder=0;\\n\\n        int temp = x;\\n\\n        while (temp != 0) {\\n            remainder = temp % 10;\\n            reversedx = (reversedx * 10) + remainder;\\n            temp /= 10;\\n        }\\n        if(reversedx > Integer.MAX_VALUE || reversedx < Integer.MIN_VALUE)\\n            return 0;\\n        return (int)reversedx;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3769355,
                "title": "java-code-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int ld = x % 10;\\n            ans = ans * 10 + ld;\\n            x /= 10;\\n        }\\n        if(ans<Math.pow(-2,31) || ans>Math.pow(2,31) )\\n            return 0;\\n        else \\n            return (int)ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int ld = x % 10;\\n            ans = ans * 10 + ld;\\n            x /= 10;\\n        }\\n        if(ans<Math.pow(-2,31) || ans>Math.pow(2,31) )\\n            return 0;\\n        else \\n            return (int)ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3538899,
                "title": "best-o-logn-solution",
                "content": "# Approach\\nUsing Math\\n\\n# Complexity\\n- Time complexity:\\n$$O(logn)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while (x != 0) {\\n            int digit = x % 10;\\n            if ((ans > INT_MAX / 10) || (ans < INT_MIN / 10))\\n                return 0;\\n            ans = ans * 10 + digit;\\n            x = x / 10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while (x != 0) {\\n            int digit = x % 10;\\n            if ((ans > INT_MAX / 10) || (ans < INT_MIN / 10))\\n                return 0;\\n            ans = ans * 10 + digit;\\n            x = x / 10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3315471,
                "title": "java-solution-of-reverse-integer",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        int sum=0, r;\\n        \\n        while(x!=0){\\n            r=x%10;\\n            \\n            x=x/10;\\n              if (sum > Integer.MAX_VALUE/10 || (sum == Integer.MAX_VALUE / 10 && r > 7)) \\n                  return 0;\\n            if (sum  < Integer.MIN_VALUE/10 || (sum == Integer.MIN_VALUE / 10 && r < -8)) \\n                return 0;\\n            sum= sum*10+r;\\n        }\\n        \\n    \\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        int sum=0, r;\\n        \\n        while(x!=0){\\n            r=x%10;\\n            \\n            x=x/10;\\n              if (sum > Integer.MAX_VALUE/10 || (sum == Integer.MAX_VALUE / 10 && r > 7)) \\n                  return 0;\\n            if (sum  < Integer.MIN_VALUE/10 || (sum == Integer.MIN_VALUE / 10 && r < -8)) \\n                return 0;\\n            sum= sum*10+r;\\n        }\\n        \\n    \\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3109185,
                "title": "easily-understandable-solution-beats-99-30",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {                      \\npublic:\\n    int reverse(int x) {\\n        long r=0;      // decleare r \\n        while(x){\\n         r=r*10+x%10; // find reminder and add its to r\\n         x=x/10;     // Update the value of x\\n        }\\n        if(r>INT_MAX || r<INT_MIN) return 0; // check 32 bit range \\n        return int(r);\\n    }\\n}; \\n```\\nPlease upvote to motivate me to write more solutions\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {                      \\npublic:\\n    int reverse(int x) {\\n        long r=0;      // decleare r \\n        while(x){\\n         r=r*10+x%10; // find reminder and add its to r\\n         x=x/10;     // Update the value of x\\n        }\\n        if(r>INT_MAX || r<INT_MIN) return 0; // check 32 bit range \\n        return int(r);\\n    }\\n}; \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3022114,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3005345,
                "title": "c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2916425,
                "title": "reverse-integer-100-medium-beginner-friendly",
                "content": "class Solution {\\npublic:\\n\\t\\n    int reverse(int x) \\n    {\\n       int r , s=0;\\n            while(x)\\n            {\\n                r = x%10;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//as int cant handle value higher than its max value to it will check it a step before//\\n                if(s > INT_MAX/10 || s < INT_MIN/10) return 0;\\n                s = s*10 + r;\\n                x /= 10;\\n            }\\n        return s;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\t\\n    int reverse(int x) \\n    {\\n       int r , s=0;\\n            while(x)\\n            {\\n                r = x%10;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//as int cant handle value higher than its max value to it will check it a step before//\\n                if(s > INT_MAX/10 || s < INT_MIN/10) return 0;\\n                s = s*10 + r;\\n                x /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2803440,
                "title": "python-easy-solution",
                "content": "\\n# Code\\u2705\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        if x not in range(-9,9):\\n            x = int(str(x)[::-1].lstrip(\\'0\\')) if x >= 0 else int(f\"-{str(x)[:0:-1]}\".lstrip(\\'0\\'))\\n        return x if (x < 2**31-1 and x > -2**31) else 0\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        if x not in range(-9,9):\\n            x = int(str(x)[::-1].lstrip(\\'0\\')) if x >= 0 else int(f\"-{str(x)[:0:-1]}\".lstrip(\\'0\\'))\\n        return x if (x < 2**31-1 and x > -2**31) else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2743588,
                "title": "2-ms-java-solution",
                "content": "class Solution {\\npublic int reverse(int x) {\\nint rem=0;\\nlong rev=0;\\nwhile(x!=0){\\nrem=x%10;\\nx=x/10;\\nrev=rev*10+rem;\\n\\n}\\n    \\nif (rev > Math.pow(2, 31)-1 || rev < -(Math.pow(2, 31))) {\\n       return 0;\\n    }\\nint check=(int)rev;\\n\\n      return check;\\n    \\n}\\n}",
                "solutionTags": [],
                "code": "class Solution {\\npublic int reverse(int x) {\\nint rem=0;\\nlong rev=0;\\nwhile(x!=0){\\nrem=x%10;\\nx=x/10;\\nrev=rev*10+rem;\\n\\n}",
                "codeTag": "Java"
            },
            {
                "id": 2703631,
                "title": "most-possible-java-solution",
                "content": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        if (x == Integer.MIN_VALUE){\\n            return 0;\\n        }\\n        else{\\n            int flag = 1;\\n            if (x < 0){\\n                flag = -1;\\n                x = -x;\\n            }\\n            int result = 0;\\n            while(x > 0){\\n                int digit = x % 10;\\n                int newresult = result * 10 + digit; \\n                if (result != (newresult - digit) / 10){\\n                    result = 0;\\n                    break;\\n                }\\n                result = newresult;\\n                x = x / 10;\\n            }\\n            result = result * flag;\\n            return result;\\n        }\\n\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        if (x == Integer.MIN_VALUE){\\n            return 0;\\n        }\\n        else{\\n            int flag = 1;\\n            if (x < 0){\\n                flag = -1;\\n                x = -x;\\n            }\\n            int result = 0;\\n            while(x > 0){\\n                int digit = x % 10;\\n                int newresult = result * 10 + digit; \\n                if (result != (newresult - digit) / 10){\\n                    result = 0;\\n                    break;\\n                }\\n                result = newresult;\\n                x = x / 10;\\n            }\\n            result = result * flag;\\n            return result;\\n        }\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2458991,
                "title": "simple-solution-using-32-bit-integer-only",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int reverse=0;\\n        while (x) {\\n            if (INT_MAX/10 < reverse || INT_MIN/10 > reverse)\\n                return 0;\\n            reverse = reverse*10 + x % 10;\\n            x /= 10;\\n        }\\n        return reverse;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int reverse=0;\\n        while (x) {\\n            if (INT_MAX/10 < reverse || INT_MIN/10 > reverse)\\n                return 0;\\n            reverse = reverse*10 + x % 10;\\n            x /= 10;\\n        }\\n        return reverse;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2128445,
                "title": "short-c-solution-beats-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int output = 0;\\n        while(x != 0){\\n            if(output > INT_MAX/10 || output < INT_MIN/10) //need to check this first (if input would overflow in next line) and if the value calculated will overflow\\n                return 0;\\n            output = output*10 + x%10;\\n            x /= 10;\\n        }\\n        return output;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int output = 0;\\n        while(x != 0){\\n            if(output > INT_MAX/10 || output < INT_MIN/10) //need to check this first (if input would overflow in next line) and if the value calculated will overflow\\n                return 0;\\n            output = output*10 + x%10;\\n            x /= 10;\\n        }\\n        return output;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1998253,
                "title": "100-fastest-solution-explained",
                "content": "Easy to understand and detailed step by step explanation with code(Java, Python, Go).\\n\\nhttps://www.code-recipe.com/post/reverse-integer\\n\\nLet me know in comments section if you have any doubts. I will be happy to answer.\\n\\n**Kindly upvote if this helps you. Thank You**",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Go"
                ],
                "code": "Easy to understand and detailed step by step explanation with code(Java, Python, Go).\\n\\nhttps://www.code-recipe.com/post/reverse-integer\\n\\nLet me know in comments section if you have any doubts. I will be happy to answer.\\n\\n**Kindly upvote if this helps you. Thank You**",
                "codeTag": "Unknown"
            },
            {
                "id": 1801738,
                "title": "java-most-easy-solution",
                "content": "\\n    class Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        for(; x!=0; x/=10){\\n            ans = ans*10 + x%10;\\n        }\\n        return ans>Integer.MAX_VALUE || ans<Integer.MIN_VALUE ?0: (int) ans;\\n      }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        for(; x!=0; x/=10){\\n            ans = ans*10 + x%10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1549555,
                "title": "python-simple-solution",
                "content": "**Python :**\\n\\n```\\ndef reverse(self, x: int) -> int:\\n\\tif int(str(abs(x))[::-1]) >= pow(2, 31):\\n\\t\\treturn 0\\n\\n\\tif x < 0:\\n\\t\\treturn -int(str(-x)[::-1])\\n\\n\\treturn int(str(x)[::-1])\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef reverse(self, x: int) -> int:\\n\\tif int(str(abs(x))[::-1]) >= pow(2, 31):\\n\\t\\treturn 0\\n\\n\\tif x < 0:\\n\\t\\treturn -int(str(-x)[::-1])\\n\\n\\treturn int(str(x)[::-1])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1303074,
                "title": "my-easy-solution-is-here",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long rev = 0;\\n        bool isMinus = false;\\n        \\n        if(x < 0){\\n            isMinus = true;\\n            x = abs(x);\\n        }\\n        \\n        while(x > 0) {\\n            rev = rev * 10;\\n            rev += x % 10;\\n            x = x / 10;\\n        }\\n        \\n        return (rev > INT_MAX || rev < INT_MIN) ? 0 : isMinus ? -rev : rev;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long rev = 0;\\n        bool isMinus = false;\\n        \\n        if(x < 0){\\n            isMinus = true;\\n            x = abs(x);\\n        }\\n        \\n        while(x > 0) {\\n            rev = rev * 10;\\n            rev += x % 10;\\n            x = x / 10;\\n        }\\n        \\n        return (rev > INT_MAX || rev < INT_MIN) ? 0 : isMinus ? -rev : rev;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1086285,
                "title": "idiomatic-rust-solution-via-checked-ops",
                "content": "```\\nimpl Solution {\\n    pub fn reverse(x: i32) -> i32 {\\n        Solution::reverse_no_overflow(x).unwrap_or(0)\\n    }\\n\\n    fn reverse_no_overflow(x: i32) -> Option<i32> {\\n        let mut sum: i32 = 0;\\n        let mut rem: i32 = x;\\n        while rem != 0 {\\n            const DEC_BASE: i32 = 10;\\n            let digit = rem % DEC_BASE;\\n            rem = rem / DEC_BASE;\\n            \\n            sum = sum.checked_mul(DEC_BASE)?;\\n            sum = sum.checked_add(digit)?;\\n        }\\n        \\n        Some(sum)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn reverse(x: i32) -> i32 {\\n        Solution::reverse_no_overflow(x).unwrap_or(0)\\n    }\\n\\n    fn reverse_no_overflow(x: i32) -> Option<i32> {\\n        let mut sum: i32 = 0;\\n        let mut rem: i32 = x;\\n        while rem != 0 {\\n            const DEC_BASE: i32 = 10;\\n            let digit = rem % DEC_BASE;\\n            rem = rem / DEC_BASE;\\n            \\n            sum = sum.checked_mul(DEC_BASE)?;\\n            sum = sum.checked_add(digit)?;\\n        }\\n        \\n        Some(sum)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 685587,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long long int rem, ans = 0; \\n        while(x > 0 || x < 0){\\n            rem = x % 10;\\n            ans = (ans * 10) + rem;\\n            x /= 10;\\n        }\\n        if(ans > INT_MAX || ans < INT_MIN){\\n            return 0;\\n        }\\n        else{\\n            return ans;\\n        }  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long long int rem, ans = 0; \\n        while(x > 0 || x < 0){\\n            rem = x % 10;\\n            ans = (ans * 10) + rem;\\n            x /= 10;\\n        }\\n        if(ans > INT_MAX || ans < INT_MIN){\\n            return 0;\\n        }\\n        else{\\n            return ans;\\n        }  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 680684,
                "title": "c-100-simple-and-short",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long res = 0;\\n        while (x) {\\n            res = (res * 10) + (x % 10);\\n            x /= 10;\\n        }\\n        return (res < INT_MIN || res > INT_MAX) ? 0 : (int) res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long res = 0;\\n        while (x) {\\n            res = (res * 10) + (x % 10);\\n            x /= 10;\\n        }\\n        return (res < INT_MIN || res > INT_MAX) ? 0 : (int) res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 322629,
                "title": "swift-4ms",
                "content": "```\\nclass Solution {\\n    func reverse(_ x: Int) -> Int {\\n      var number = x\\n      var revNumber: Int = 0\\n\\n      while number != 0 {\\n          let pop = number % 10\\n          number = number / 10\\n\\n          if revNumber > Int32.max / 10 || (revNumber == Int32.max / 10 && pop > 7) {\\n              return 0\\n          }\\n\\n          if revNumber < Int32.min / 10 || (revNumber == Int32.min / 10 && pop < -8) {\\n              return 0\\n          }\\n\\n          let temp = revNumber * 10 + pop\\n          revNumber = temp\\n      }\\n\\n      return revNumber\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func reverse(_ x: Int) -> Int {\\n      var number = x\\n      var revNumber: Int = 0\\n\\n      while number != 0 {\\n          let pop = number % 10\\n          number = number / 10\\n\\n          if revNumber > Int32.max / 10 || (revNumber == Int32.max / 10 && pop > 7) {\\n              return 0\\n          }\\n\\n          if revNumber < Int32.min / 10 || (revNumber == Int32.min / 10 && pop < -8) {\\n              return 0\\n          }\\n\\n          let temp = revNumber * 10 + pop\\n          revNumber = temp\\n      }\\n\\n      return revNumber\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 310510,
                "title": "c-solution-no-string-parsing-no-long-variables-no-try-catch",
                "content": "Thought I\\'d share my solution to this problem since all the other C# solutions seemed inadequate.\\nThe program detects the integer overflow right before the last multiplication by 10 of the result variable.\\n\\n\\n```\\npublic class Solution {\\n    public int Reverse(int x) {\\n        int overflowLimit = int.MaxValue / 10;\\n        \\n        var negative = x < 0;\\n\\t\\tif (negative)\\n\\t\\t\\tx = -x;\\n        \\n        int result = 0;\\n        while(x > 0){\\n            if(result > overflowLimit)\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t\\n            result = 10 * result + x % 10;\\n            \\n            x = x / 10;\\n        };\\n        \\n\\t\\tif(negative)\\n\\t\\t\\tresult = -result;\\n        \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int Reverse(int x) {\\n        int overflowLimit = int.MaxValue / 10;\\n        \\n        var negative = x < 0;\\n\\t\\tif (negative)\\n\\t\\t\\tx = -x;\\n        \\n        int result = 0;\\n        while(x > 0){\\n            if(result > overflowLimit)\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t\\n            result = 10 * result + x % 10;\\n            \\n            x = x / 10;\\n        };\\n        \\n\\t\\tif(negative)\\n\\t\\t\\tresult = -result;\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 304394,
                "title": "simple-and-generic-overflow-test-before-operation-without-using-long-0ms-c-100-ile-solution",
                "content": "I was able to get a pretty simple solution and wanted to check the overflow conditions without using long because the problem statement technically says we can only use 32 bit integer (even though it isn\\'t really verified).\\n\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int reverse = 0;\\n        \\n        while(x != 0){\\n            // Check overflow\\n            if(reverse > (INT_MAX/10 - (x%10)/10) || reverse < (INT_MIN/10-(x%10)/10)){\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t// Calculate reversed integer\\n            reverse = reverse*10 + x%10;\\n            x /= 10;\\n        }\\n        \\n        return reverse;\\n    }\\n};\\n```\\n\\nIt is essentially derived from the need that we want to check if our next operation, (Ax + B)  > INT_MAX. We can write it as, x > (INT_MAX - B)/A. Since INT_MAX - B can itself overflow in cases where B is negative, its better to write this as, x > INT_MAX/A - B/A to ensure that no overflow happens during execution of this condition.\\n\\nYou can derive this conditions for all similar problems, by appropriately choosing A and B.",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int reverse = 0;\\n        \\n        while(x != 0){\\n            // Check overflow\\n            if(reverse > (INT_MAX/10 - (x%10)/10) || reverse < (INT_MIN/10-(x%10)/10)){\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t// Calculate reversed integer\\n            reverse = reverse*10 + x%10;\\n            x /= 10;\\n        }\\n        \\n        return reverse;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 294600,
                "title": "need-a-fix-for-the-error",
                "content": "\\'\\'\\'\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        bool flag = false;\\n        int num = 0;\\n        if(num < 0){\\n            num = num * (-1);\\n            flag = true;\\n        }\\n        while(x != 0){\\n            num = (num * 10) + (x % 10);\\n            x = x / 10;\\n        }\\n        if (flag == true)\\n            return (num * (-1));\\n        return num;\\n        }\\n};\\n\\'\\'\\'\\n\\nLine 11: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\n\\nIs there a fix for the error?",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        bool flag = false;\\n        int num = 0;\\n        if(num < 0){\\n            num = num * (-1);\\n            flag = true;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 154259,
                "title": "c-solution-10-lines",
                "content": "```\\n        if (x / 10 == 0) {return x;}\\n        \\n        int prev;\\n        int curr = 0;\\n        \\n        while (x != 0) {\\n            prev = curr;\\n            curr = curr*10 + x%10;\\n            x /= 10;\\n        }\\n        \\n        if (curr/10 != prev) {return 0;}\\n        return curr;\\n```\\nSimple iterative solution. The check for overflow is done by storing the inverted number with n-1 digits (with n being the number of digits in x). If the inverted number divided by 10 is not equal to the inverted number with n-1 digits, then overflow has occurred.",
                "solutionTags": [],
                "code": "```\\n        if (x / 10 == 0) {return x;}\\n        \\n        int prev;\\n        int curr = 0;\\n        \\n        while (x != 0) {\\n            prev = curr;\\n            curr = curr*10 + x%10;\\n            x /= 10;\\n        }\\n        \\n        if (curr/10 != prev) {return 0;}\\n        return curr;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4052,
                "title": "python-solution",
                "content": "```\\nclass Solution:\\n\\n    def reverse(self, x):\\n        def signCheck(n):\\n            if n >= 0:\\n                return 1\\n            else:\\n                return -1\\n    \\n        sign = signCheck(x)\\n        x = str(abs(x))\\n        reverse = x[::-1]\\n        num = sign * int(reverse)\\n        \\n        # check overflow\\n        if(abs(num) > (2 ** 31 - 1)):\\n            return 0\\n        else:\\n            return num\\n        ```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n\\n    def reverse(self, x):\\n        def signCheck(n):\\n            if n >= 0:\\n                return 1\\n            else:\\n                return -1\\n    \\n        sign = signCheck(x)\\n        x = str(abs(x))\\n        reverse = x[::-1]\\n        num = sign * int(reverse)\\n        \\n        # check overflow\\n        if(abs(num) > (2 ** 31 - 1)):\\n            return 0\\n        else:\\n            return num\\n        ```",
                "codeTag": "Java"
            },
            {
                "id": 4062,
                "title": "java-solution-that-takes-1-of-your-brain-to-understand-it",
                "content": "There are numerous awesome solutions over here. I like the trick with \"long\" + casting. And the crazy \"reminder\" \"tail\" magic. Maybe I'm missing the point of these exercises. Maybe the point is to provide the fastest and most elegant solution. If so I definitely enjoy and try to understand the one liners I see. However, in my day to day practice I prefer to see a solution that doesn't make me pause and scratch my head. That doesn't make me think - \"Wow, what kind of black magic is going on here.\"  Maybe that is just a reflection of how unsophisticated or average my intellect is.\\n\\nI apologize if similar solution was offered here before. To many of them to look over each one. Nonetheless here is my \"naive\" solution. If that would ever cause problem in QA or Prod only then I would think of optimizing it. My point is it doesn't require much brain power to understand. \\n\\n\\n\\nclass Solution {\\n\\n    public int reverse(int x) {\\n\\n        int reverse = 0;\\n        char[] chars =(\"\" + x).toCharArray();\\n        StringBuilder result = new StringBuilder();\\n\\n        if(chars[0] == '-'){\\n            result.append(chars[0]);\\n        }\\n\\n        for(int i = chars.length-1; i>=0; i--){\\n            if(chars[i] == '-') continue;\\n            result.append(chars[i]);        \\n        }\\n        \\n        try{\\n            reverse = Integer.parseInt(result.toString()); // takes care of leading 0s and overflow.\\n        }catch(Exception e){\\n            // do nothing;\\n        }\\n        \\n        return reverse;\\n    }\\n}\\n<code>",
                "solutionTags": [],
                "code": "class Solution {\\n\\n    public int reverse(int x) {\\n\\n        int reverse = 0;\\n        char[] chars =(\"\" + x).toCharArray();\\n        StringBuilder result = new StringBuilder();\\n\\n        if(chars[0] == '-'){\\n            result.append(chars[0]);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 4447,
                "title": "7-line-c-simple-solution-explained",
                "content": "Use a long to detect overflow simply check if the long value has passed the allowed range of a 32 bit int. The heart of the problem is in the line `res = (x % 10) + (res * 10)` which builds the reversed value digit by digit. This line of code pulls the least significant digit from `x` and shifts our current accumulated `res` one digit over finally adding the results together. the `x` is then divided by 10 to get rid of the least significant digit since we have already accommodated this digit in our reversed integer. \\n\\n    public int Reverse(int x) {\\n            long res = 0;\\n            while(x != 0){\\n                res = (x % 10) + (res * 10);\\n                if(res > Int32.MaxValue || res < Int32.MinValue) return 0;\\n                x /= 10;\\n            }\\n            return (int)res;\\n    }",
                "solutionTags": [
                    "C#"
                ],
                "code": "Use a long to detect overflow simply check if the long value has passed the allowed range of a 32 bit int. The heart of the problem is in the line `res = (x % 10) + (res * 10)` which builds the reversed value digit by digit. This line of code pulls the least significant digit from `x` and shifts our current accumulated `res` one digit over finally adding the results together. the `x` is then divided by 10 to get rid of the least significant digit since we have already accommodated this digit in our reversed integer. \\n\\n    public int Reverse(int x) {\\n            long res = 0;\\n            while(x != 0){\\n                res = (x % 10) + (res * 10);\\n                if(res > Int32.MaxValue || res < Int32.MinValue) return 0;\\n                x /= 10;\\n            }\\n            return (int)res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4285,
                "title": "python-solution-for-reverse-integer-with-no-overflow-handling",
                "content": "This is my code:\\n\\n    class Solution:\\n    # @param {integer} x\\n    # @return {integer}\\n    def reverse(self, x):\\n        arr = []\\n        f = False\\n        if x < 0:\\n            x *= -1\\n            f = True\\n        while True:\\n            arr.append(x % 10)\\n            x /= 10\\n            if x == 0:\\n                break\\n        result = 0\\n        for i in arr:\\n            result = i + 10 * result\\n        if f:\\n            result *= -1\\n        return result\\n\\nActually python wouldn't overflow, but the test cases consider it.\\nWhen Input is1534236469 and my output is 9646324351,it says wrong.:-(",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n    # @param {integer}",
                "codeTag": "Java"
            },
            {
                "id": 4586,
                "title": "any-solution-for-reverse-interger-please-share-it",
                "content": "That's my code.\\n\\n    public class Solution {\\n        public int reverse(int x) {\\n    \\t\\tint sum = 0;\\n    \\t\\twhile (Math.abs(x) != 0)\\n    \\t\\t{\\n    \\t\\t\\tif(Math.abs(sum) > Integer.MAX_VALUE / 10)\\n    \\t\\t\\t{\\n    \\t\\t\\t\\treturn 0;\\n    \\t\\t\\t}\\n    \\t\\t\\tsum = sum * 10 + x % 10;\\n    \\t\\t\\tx = x / 10;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn sum;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int reverse(int x) {\\n    \\t\\tint sum = 0;\\n    \\t\\twhile (Math.abs(x) != 0)\\n    \\t\\t{\\n    \\t\\t\\tif(Math.abs(sum) > Integer.MAX_VALUE / 10)\\n    \\t\\t\\t{\\n    \\t\\t\\t\\treturn 0;\\n    \\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 4102700,
                "title": "video-step-by-step-visualization-in-python",
                "content": "https://youtu.be/YCxDTkWqcxw\\n\\nStep 1: Extract the digit in the ones place of `x` by using the modulo operator and store it in `digit`\\n\\nStep 2: Add that digit to `reverse` as the rightmost digit\\n\\nStep 3: Remove the ones digit from `x` and continue until `x` equals 0.\\n\\nIn Python, the modulo operator works slightly differently than other languages (such as Java or C) when it comes to negative numbers.  Basically, you will get weird results if you try to do [positive number] mod [negative number].  If you want the modulo to behave the same way with negative numbers as it does with positive numbers, but just have the result be negative, then you need to make sure the divisor is also negative, since the modulo operation will always return a number with the same sign as the divisor.\\n\\nLastly, I use `math.trunc` instead of just using floor division `//` because of negative numbers.  When dividing `x` by 10 and truncating the decimal, if the number is negative, then it would round down <i>away</i> from zero, when really, we want it to round up <i>towards</i> zero.\\n\\n# Code\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        MAX_INT = 2 ** 31 - 1 # 2,147,483,647\\n        MIN_INT = -2 ** 31    #-2,147,483,648\\n        reverse = 0\\n\\n        while x != 0:\\n            if reverse > MAX_INT / 10 or reverse < MIN_INT / 10:\\n                return 0\\n            digit = x % 10 if x > 0 else x % -10\\n            reverse = reverse * 10 + digit\\n            x = math.trunc(x / 10)\\n\\n        return reverse\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        MAX_INT = 2 ** 31 - 1 # 2,147,483,647\\n        MIN_INT = -2 ** 31    #-2,147,483,648\\n        reverse = 0\\n\\n        while x != 0:\\n            if reverse > MAX_INT / 10 or reverse < MIN_INT / 10:\\n                return 0\\n            digit = x % 10 if x > 0 else x % -10\\n            reverse = reverse * 10 + digit\\n            x = math.trunc(x / 10)\\n\\n        return reverse\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3770118,
                "title": "python-3-5-lines-confession-and-strings-t-m-95-72",
                "content": "**Scoff\\u2022law** | \\u02C8sk\\xF4fl\\xF4 | *noun, North American informal* -- A person who flouts the rules, especially by failing to comply with a rule that is difficult to enforce effectively.\\n\\nMy first take on this problem was that it should be classified as *easy*. I reversed the digits, checked whether it was indeed less than 2^31-1 in absolute value, and submitted the code, which AC\\'d with time/memory 98%/100%.\\n\\nBut I unknowingly was being a scofflaw. The last line of the problem description is:\\n- **Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nI had broken this rule; by applying`int`to the reversed digits, I potentially created a 64-bit integer, which is not allowed.\\n\\nBelow is my revised code, which I now believe is non-scofflawish. Thanks for allowing me to get that off my chest.\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        mxStr =  \\'2147483647\\'\\n\\n        ansLst = reversed(str(abs(x)))\\n      \\n        ansStr = \\'\\'.join(ansLst).rjust(10,\\'0\\')\\n\\n        if ansStr > mxStr: return 0\\n       \\n        return int(ansStr)*(1 - 2*(x < 0))\\n```\\n[https://leetcode.com/problems/reverse-integer/submissions/995246504/](http://)\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(*N*), in which *N* ~ `len(str(x))`.\\n\\nHere is my scofflaw code:\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        Neg, mxInt = x < 0, 2147483647\\n        \\n        ansStr = reversed(str(abs(x)))\\n\\n        ansInt = int(\\'\\'.join(ansStr))   #  <-- violates the \"no 64-bit\" rule\\n        if ansInt > mxInt: return 0     #  \\n            \\n        return -ansInt if Neg else ansInt",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        mxStr =  \\'2147483647\\'\\n\\n        ansLst = reversed(str(abs(x)))\\n      \\n        ansStr = \\'\\'.join(ansLst).rjust(10,\\'0\\')\\n\\n        if ansStr > mxStr: return 0\\n       \\n        return int(ansStr)*(1 - 2*(x < 0))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3730376,
                "title": "simple-c-solution-easy-to-understand-must-check",
                "content": "# Intuition\\nWe want to reverse the number , i.e we need to find the ```lastDigit``` of the number first, Now How to find the lastDigit of number ?\\n\\n---> When we perform the Modulus opertion on any number it gives the remainder but when we perform % 10 it gives the ```lastDigit```.\\n\\neg. 123 % 10 = 3 we get the lastDigit.\\n\\nwe want to update the number so divide it by 10\\n\\nhence number become 12\\n\\nSimilary \\n         \\n\\n         12 % 10 = 2\\n         12 / 10 = 1\\n         1 % 10 = 1;\\n         1 / 10 = 0 ----> Stop\\n\\n\\nby simple Mathematics \\n\\n    ans = ans*10 + lastDigit\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n---\\n\\n\\n**Solution:**\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            // find last Digit \\n\\n            int lastDigit = x%10;\\n            \\n            //check for the interger range\\n            if((ans>INT_MAX/10 || ans < INT_MIN/10)){\\n                return 0;\\n            }\\n\\n            // Update ans \\n            ans = 10*ans + lastDigit;\\n\\n            //Update the number (x)\\n            x = x / 10;\\n        }\\n        return ans;\\n    }\\n};\\n\\n/*\\n    Analysis:\\n    Time Complexity : O(logn)\\n    Space Complexity : O(1)\\n*/    \\n```\\n\\n---\\n**Complexity:**\\n- Time complexity: $$O(logn)$$\\n<!-- Add your time complexity here, e.g. $$O(logn)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n----\\n\\nIf this Solution helps you then please ```UPVOTE```.\\nTill then **KEEP LEARNING, KEEP GROWING**\\n\\n**Thank You !!**\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```lastDigit```\n```lastDigit```\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            // find last Digit \\n\\n            int lastDigit = x%10;\\n            \\n            //check for the interger range\\n            if((ans>INT_MAX/10 || ans < INT_MIN/10)){\\n                return 0;\\n            }\\n\\n            // Update ans \\n            ans = 10*ans + lastDigit;\\n\\n            //Update the number (x)\\n            x = x / 10;\\n        }\\n        return ans;\\n    }\\n};\\n\\n/*\\n    Analysis:\\n    Time Complexity : O(logn)\\n    Space Complexity : O(1)\\n*/    \\n```\n```UPVOTE```",
                "codeTag": "Java"
            },
            {
                "id": 3354987,
                "title": "reverse-integer",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. --> The problem requires us to reverse the given integer. We can do this by extracting the digits of the integer one by one and constructing the reversed integer.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->The approach used in the given code is as follows:\\n\\n1. Initialize the upper and lower limits of the integer to be reversed. We use the constant values Integer.MAX_VALUE and Integer.MIN_VALUE for this purpose.\\n2. Initialize the answer variable to 0.\\n3. While the input integer is not zero:\\na. Check if adding the next digit to the answer variable will result in an overflow (i.e., the answer variable will be greater than the upper limit or less than the lower limit). If so, return 0.\\nb. Add the next digit to the answer variable by multiplying the current answer variable by 10 and adding the next digit.\\nc. Remove the extracted digit from the input integer by dividing it by 10.\\n4. Return the reversed integer.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->The time complexity of the given solution is O(log(x)), where x is the magnitude of the input integer. This is because the number of digits in x is log(x) with base 10.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->The space complexity of the given solution is O(1), as we are using only a constant amount of extra space irrespective of the magnitude of the input integer.\\n\\n# Code\\n```C++ []\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n       int ans=0;\\n        while(x!=0)\\n        {\\n            if (ans > INT_MAX/10 || (ans == INT_MAX / 10 && x > 7)) return 0;\\n            if (ans < INT_MIN/10 || (ans == INT_MIN / 10 && x < -8)) return 0;   \\n            ans=ans*10+x%10;\\n            x=x/10;\\n        }\\n        return ans; \\n    }\\n};\\n```\\n```JAVA []\\nclass Solution {\\n    public int reverse(int x) {\\n        int h=Integer.MAX_VALUE,l=Integer.MIN_VALUE,ans=0;\\n        while(x!=0)\\n        {\\n            if(ans>h/10|| (ans==h/10&&x>7))\\n                return 0;\\n            if(ans<l/10|| (ans==l/10 && x<-8))\\n                return 0;\\n            ans=ans*10+x%10;\\n            x=x/10;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Math"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n       int ans=0;\\n        while(x!=0)\\n        {\\n            if (ans > INT_MAX/10 || (ans == INT_MAX / 10 && x > 7)) return 0;\\n            if (ans < INT_MIN/10 || (ans == INT_MIN / 10 && x < -8)) return 0;   \\n            ans=ans*10+x%10;\\n            x=x/10;\\n        }\\n        return ans; \\n    }\\n};\\n```\n```JAVA []\\nclass Solution {\\n    public int reverse(int x) {\\n        int h=Integer.MAX_VALUE,l=Integer.MIN_VALUE,ans=0;\\n        while(x!=0)\\n        {\\n            if(ans>h/10|| (ans==h/10&&x>7))\\n                return 0;\\n            if(ans<l/10|| (ans==l/10 && x<-8))\\n                return 0;\\n            ans=ans*10+x%10;\\n            x=x/10;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3311008,
                "title": "python-solution-that-checks-overflow-underflow-beats-83-32-bit-env",
                "content": "\\n# Complexity\\n- Time complexity: $$O(log_{10}n)$$ \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        # store the absolute value of x in num\\n        # INTMIN = -2^31 = -2,147,483,648 can\\'t have absolute value\\n        # as INTMAX = 2^31 - 1 = 2,147,483,647\\n        if x <= (-2**31):\\n            return 0 # reversing/storing x not possible\\n        else:\\n            num = abs(x)\\n        # get the sign of x\\n        sign = 0 if x == 0 else x//num\\n        # intialize rev_num to 0\\n        rev_num = 0\\n\\n        # continue the loop until num is 0\\n        while num:\\n            # get the last digit\\n            last_digit = num % 10\\n\\n            # check the overflow condition before multiplying with 10\\n            # INTMAX = 2^31 - 1 = 2,147,483,647\\n            # condition 1 - rev_num > (INTMAX/10)\\n            # condition 2 - rev_num = (INTMAX/10) and last_digit > 7 to exclude\\n            # numbers 2,147,483,648 and 2,147,483,649\\n            if x > 0 and ((rev_num > (2**31//10)) or (rev_num == (2**31) and last_digit > 7)):\\n                return 0\\n\\n            # check the underflow condition before multiplying with 10\\n            # INTMIN = -2^31 = -2,147,483,648\\n            # condition 1 - rev_num > (INTMAX/10)\\n            # condition 2 - rev_num = (INTMAX/10) and last_digit > 8 to exclude\\n            # number -2,147,483,649\\n            if x < 0 and ((rev_num > (2**31//10)) or (rev_num == (2**31) and last_digit > 8)):\\n                return 0\\n\\n            # multiply rev_num by 10, add the last digit and reassign to rev_num\\n            rev_num = (rev_num * 10) + last_digit\\n            # divide num by 10\\n            num //= 10\\n\\n        # return the reversed num\\n        return (sign * rev_num)\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        # store the absolute value of x in num\\n        # INTMIN = -2^31 = -2,147,483,648 can\\'t have absolute value\\n        # as INTMAX = 2^31 - 1 = 2,147,483,647\\n        if x <= (-2**31):\\n            return 0 # reversing/storing x not possible\\n        else:\\n            num = abs(x)\\n        # get the sign of x\\n        sign = 0 if x == 0 else x//num\\n        # intialize rev_num to 0\\n        rev_num = 0\\n\\n        # continue the loop until num is 0\\n        while num:\\n            # get the last digit\\n            last_digit = num % 10\\n\\n            # check the overflow condition before multiplying with 10\\n            # INTMAX = 2^31 - 1 = 2,147,483,647\\n            # condition 1 - rev_num > (INTMAX/10)\\n            # condition 2 - rev_num = (INTMAX/10) and last_digit > 7 to exclude\\n            # numbers 2,147,483,648 and 2,147,483,649\\n            if x > 0 and ((rev_num > (2**31//10)) or (rev_num == (2**31) and last_digit > 7)):\\n                return 0\\n\\n            # check the underflow condition before multiplying with 10\\n            # INTMIN = -2^31 = -2,147,483,648\\n            # condition 1 - rev_num > (INTMAX/10)\\n            # condition 2 - rev_num = (INTMAX/10) and last_digit > 8 to exclude\\n            # number -2,147,483,649\\n            if x < 0 and ((rev_num > (2**31//10)) or (rev_num == (2**31) and last_digit > 8)):\\n                return 0\\n\\n            # multiply rev_num by 10, add the last digit and reassign to rev_num\\n            rev_num = (rev_num * 10) + last_digit\\n            # divide num by 10\\n            num //= 10\\n\\n        # return the reversed num\\n        return (sign * rev_num)\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3150833,
                "title": "simple-short-java-solution",
                "content": "```\\nclass Solution \\n{\\n    public int reverse(int x) \\n    {\\n        String s=x+\"\";\\n        long ans=0;\\n        int flag=0;\\n        for(int i=s.length()-1;i>=0;i--)\\n        {\\n            if(s.charAt(i)==\\'-\\')\\n            {\\n                flag=1;\\n                continue;\\n            }\\n            ans=ans*10+(s.charAt(i)-\\'0\\');\\n        }\\n        if(ans>=Integer.MAX_VALUE)\\n            return 0;\\n        if(flag==1)\\n            ans=ans*-1;\\n        return (int)ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int reverse(int x) \\n    {\\n        String s=x+\"\";\\n        long ans=0;\\n        int flag=0;\\n        for(int i=s.length()-1;i>=0;i--)\\n        {\\n            if(s.charAt(i)==\\'-\\')\\n            {\\n                flag=1;\\n                continue;\\n            }\\n            ans=ans*10+(s.charAt(i)-\\'0\\');\\n        }\\n        if(ans>=Integer.MAX_VALUE)\\n            return 0;\\n        if(flag==1)\\n            ans=ans*-1;\\n        return (int)ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3048803,
                "title": "1-ms-100-faster-simple-java",
                "content": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        long store = x;\\n        long ans = 0;\\n        \\n        // if x is +ve just reverse it;\\n        if (x > 0) {     \\n            ans = helper (x, 0);\\n            if (ans > Integer.MAX_VALUE) store =  0;\\n            else store = ans;\\n            \\n        } else {\\n            \\n            // if x is -ne make it +ve by mutliplying with -1;\\n            long positive = x * -1;\\n            ans = helper (positive, 0);\\n            \\n            // if answer goes out of Integer range, set as 0;\\n            if (ans > Integer.MAX_VALUE || ans < Integer.MIN_VALUE) store = 0;\\n            else store = -(ans);\\n        }\\n        return (int) store;\\n    }\\n    static long helper (long n, long rev) {\\n        \\n        // base case;\\n        if (n == 0) {\\n            return rev;\\n        }\\n        \\n        long rem = n % 10;\\n        return helper (n = n / 10, rev = (rev * 10) + rem);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        long store = x;\\n        long ans = 0;\\n        \\n        // if x is +ve just reverse it;\\n        if (x > 0) {     \\n            ans = helper (x, 0);\\n            if (ans > Integer.MAX_VALUE) store =  0;\\n            else store = ans;\\n            \\n        } else {\\n            \\n            // if x is -ne make it +ve by mutliplying with -1;\\n            long positive = x * -1;\\n            ans = helper (positive, 0);\\n            \\n            // if answer goes out of Integer range, set as 0;\\n            if (ans > Integer.MAX_VALUE || ans < Integer.MIN_VALUE) store = 0;\\n            else store = -(ans);\\n        }\\n        return (int) store;\\n    }\\n    static long helper (long n, long rev) {\\n        \\n        // base case;\\n        if (n == 0) {\\n            return rev;\\n        }\\n        \\n        long rem = n % 10;\\n        return helper (n = n / 10, rev = (rev * 10) + rem);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3005285,
                "title": "0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2972482,
                "title": "simple-java-beats-100-runtime-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nAfter reading the problem, I find that we need to check two things:\\n1. Whether the number is positive or negative.\\n2. Whether the reversed number is greater than INTEGER range. \\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe will work on the \"Ones place\" of number i.e. the last digit.\\nSuppose the number is 321, we need to follow the following steps:\\n\\n    1. Make a long integer num initialized with 0. (long num = 0).\\n    2. Store the ones place of \"321\" in variable r. (int r = num%10).\\n    3. Multiply num by 10. (num *= 10).\\n    4. Add the remainder r to num. (num += r).\\n    3. Divide \"321\" by 10. Then it will become \"32\". (x /= 10).\\n    4. Continue the above steps untill x becomes 0.\\nYou will get your answer.\\n    \\n        **If this solution helped you, give it a like to help others.**\\n\\n\\n\\n# Complexity\\n- Time complexity: O(n) (where n is the total no. of digits)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n\\n        boolean flag = true;\\n        if(x < 0) flag = false; // if x is -ve then flag is false;\\n\\n        x = Math.abs(x);\\n\\n        long num = 0;\\n        int r;\\n\\n        while(x > 0)\\n        {\\n            num *= 10;      \\n            r = x % 10;         // r = remainder;\\n            num += r;           // remainder is added;\\n            x /= 10;            // x is divided by 10;\\n        }\\n        if(num > Integer.MAX_VALUE)     // if reversed is greater then 0 is returned;\\n        return 0;\\n\\n        int result = (int)num;\\n\\n        if(!flag)           // if the no. is -ve. Subtract it two times;\\n        {\\n            result -= num;\\n            result -= num;            \\n        }\\n\\n        return result;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n\\n        boolean flag = true;\\n        if(x < 0) flag = false; // if x is -ve then flag is false;\\n\\n        x = Math.abs(x);\\n\\n        long num = 0;\\n        int r;\\n\\n        while(x > 0)\\n        {\\n            num *= 10;      \\n            r = x % 10;         // r = remainder;\\n            num += r;           // remainder is added;\\n            x /= 10;            // x is divided by 10;\\n        }\\n        if(num > Integer.MAX_VALUE)     // if reversed is greater then 0 is returned;\\n        return 0;\\n\\n        int result = (int)num;\\n\\n        if(!flag)           // if the no. is -ve. Subtract it two times;\\n        {\\n            result -= num;\\n            result -= num;            \\n        }\\n\\n        return result;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2935773,
                "title": "easy-solution-short-simple-best-method-easy-to-understand",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans=0;\\n        while(x)\\n        {\\n            int r=x%10;\\n            if(ans>INT_MAX/10 || ans<INT_MIN/10)\\n                return 0;\\n            if(ans==INT_MAX/10 && r>7)\\n                return 0;\\n            ans=ans*10+r;\\n            x/=10;\\n        }\\n        return ans;\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans=0;\\n        while(x)\\n        {\\n            int r=x%10;\\n            if(ans>INT_MAX/10 || ans<INT_MIN/10)\\n                return 0;\\n            if(ans==INT_MAX/10 && r>7)\\n                return 0;\\n            ans=ans*10+r;\\n            x/=10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2915725,
                "title": "beats-100-codedominar-solution",
                "content": "# approach - 1\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        return (1 if x>0 else -1)*int(str(abs(x))[::-1]) if -2147483648 < int(str(abs(x))[::-1]) < 2147483647 else 0\\n```\\n\\n\\n---\\n# approach - 2\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        rev = 0\\n        sign = 1 if x >= 0 else -1\\n        x = abs(x)\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            if rev > 2**31 - 1:\\n                return 0\\n            x //= 10\\n        return rev * sign\\n\\n\\n```\\n\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        return (1 if x>0 else -1)*int(str(abs(x))[::-1]) if -2147483648 < int(str(abs(x))[::-1]) < 2147483647 else 0\\n```\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        rev = 0\\n        sign = 1 if x >= 0 else -1\\n        x = abs(x)\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            if rev > 2**31 - 1:\\n                return 0\\n            x //= 10\\n        return rev * sign\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2814302,
                "title": "perfect-java-solution-with-explaination",
                "content": "Here the main logic is to check that if the number exceeds the Integer max or min value then we have to return 0.\\nIn order to to that, lets look at the situation we will be in when the number exceeds the min or max value.\\nIt will look something like this :\\n**(res * 10) + rem > Integer.MAX_VALUE**\\nSo now we can\\'t check this condition like this because the left hand side will exceed Integer max and give error, so we will shift the left side operands to right side and check.\\n**res > (Integer.MAX_VALUE - rem)/10**\\nAnd we use Math.abs for negative values of number.\\n\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        int res = 0, rem = 0;\\n        while(x != 0) {\\n            rem = x % 10;\\n            x = x/10;\\n            if(Math.abs(res) > (Integer.MAX_VALUE- Math.abs(rem))/10) return 0;\\n            res = (res * 10) + rem;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        int res = 0, rem = 0;\\n        while(x != 0) {\\n            rem = x % 10;\\n            x = x/10;\\n            if(Math.abs(res) > (Integer.MAX_VALUE- Math.abs(rem))/10) return 0;\\n            res = (res * 10) + rem;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2809688,
                "title": "0-ms-faster-than-100-c-natural-approach",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int r=0,num;\\n        if(x==INT_MIN) //INT_MAX=2147483647 and INT_MIN = -2147483648 we wil be leaving out -2147483648 when multiplying by -1 in next step\\n            return 0;\\n\\n        if(x<0)//we will find reverse considering it a positive no\\n            num=x*(-1);\\n        else\\n            num=x;\\n        while(num!=0){\\n            if( r>(INT_MAX/10) || r>( (INT_MAX/10)+num%10) ) //if out of 32-bit int range\\n                return 0;\\n            r=r*10 + num%10;\\n            num=num/10;\\n        }\\n        if(x<0)//as we calculated num as positive no\\n            return r*(-1);\\n        return r;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int r=0,num;\\n        if(x==INT_MIN) //INT_MAX=2147483647 and INT_MIN = -2147483648 we wil be leaving out -2147483648 when multiplying by -1 in next step\\n            return 0;\\n\\n        if(x<0)//we will find reverse considering it a positive no\\n            num=x*(-1);\\n        else\\n            num=x;\\n        while(num!=0){\\n            if( r>(INT_MAX/10) || r>( (INT_MAX/10)+num%10) ) //if out of 32-bit int range\\n                return 0;\\n            r=r*10 + num%10;\\n            num=num/10;\\n        }\\n        if(x<0)//as we calculated num as positive no\\n            return r*(-1);\\n        return r;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2769750,
                "title": "simple-java-solution-o-n",
                "content": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        int temp; \\n        long reverse = 0; \\n        \\n        while(x!=0){\\n            temp = x % 10; \\n            reverse = reverse * 10 + temp; \\n            x = x/10; \\n        }\\n        if(reverse >= Integer.MIN_VALUE && reverse <= Integer.MAX_VALUE)\\n            return (int)reverse; \\n         else\\n             return 0; \\n    }    \\n}\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int reverse(int x) {\\n        int temp; \\n        long reverse = 0; \\n        \\n        while(x!=0){\\n            temp = x % 10; \\n            reverse = reverse * 10 + temp; \\n            x = x/10; \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2747878,
                "title": "c-simple",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    int reverse(int x) \\n    {\\n        long long int x1=abs(x);\\n        long long int ans=0;\\n        while(x1>0)\\n        {\\n            long long int temp=x1%10;\\n            ans=ans*10+temp;\\n            x1/=10;\\n        }\\n        if(ans>-pow(2,31) && ans<pow(2,31)-1){if(x<0){return (-1)*ans;}else{return ans;}}\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int reverse(int x) \\n    {\\n        long long int x1=abs(x);\\n        long long int ans=0;\\n        while(x1>0)\\n        {\\n            long long int temp=x1%10;\\n            ans=ans*10+temp;\\n            x1/=10;\\n        }\\n        if(ans>-pow(2,31) && ans<pow(2,31)-1){if(x<0){return (-1)*ans;}else{return ans;}}\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2669023,
                "title": "python-best-solution",
                "content": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        if x > 0:\\n            ans = int(str(x)[::-1])\\n        else:\\n            ans = int(str(x * -1)[::-1]) * -1\\n        \\n        mi = 2 ** 31 * (-1)\\n        ma = 2 ** 31 - 1\\n        \\n        if ans > ma or ans < mi:\\n            return 0\\n        return ans\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        if x > 0:\\n            ans = int(str(x)[::-1])\\n        else:\\n            ans = int(str(x * -1)[::-1]) * -1\\n        \\n        mi = 2 ** 31 * (-1)\\n        ma = 2 ** 31 - 1\\n        \\n        if ans > ma or ans < mi:\\n            return 0\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2571791,
                "title": "100-faster-solution-c-easy-solution",
                "content": "```\\n int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            int digit = x%10;\\n            if(ans>INT_MAX/10 || ans<INT_MIN/10){\\n                return 0;\\n            }\\n            ans = (ans*10)+ digit;\\n            x /= 10;\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            int digit = x%10;\\n            if(ans>INT_MAX/10 || ans<INT_MIN/10){\\n                return 0;\\n            }\\n            ans = (ans*10)+ digit;\\n            x /= 10;\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2565646,
                "title": "easy-and-fast-solution",
                "content": "```\\nint reverse(int x) {\\n        int reverse=0;\\n        while (x) {\\n            if (INT_MAX/10 < reverse || INT_MIN/10 > reverse)\\n                return 0;\\n            reverse = reverse*10 + x % 10;\\n            x /= 10;\\n        }\\n        return reverse;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint reverse(int x) {\\n        int reverse=0;\\n        while (x) {\\n            if (INT_MAX/10 < reverse || INT_MIN/10 > reverse)\\n                return 0;\\n            reverse = reverse*10 + x % 10;\\n            x /= 10;\\n        }\\n        return reverse;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2283524,
                "title": "c-java-python3-javascript-solutions",
                "content": "Included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - LeetCode Solutions](https://zyrastory.com/en/category/coding-en/leetcode-en/)**",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "JavaScript"
                ],
                "code": "Included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - LeetCode Solutions](https://zyrastory.com/en/category/coding-en/leetcode-en/)**",
                "codeTag": "Unknown"
            },
            {
                "id": 2280962,
                "title": "very-easy-100-java-c-javascript-c-fully-explained-line-by-line",
                "content": "# **Java Solution:**\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean isNeg = false;\\n        //First we check if the number is negative\\n        //then we will store this information.\\n        if (x < 0) {\\n            isNeg = true;\\n            x = -x;\\n        }\\n        //store the result in a data type which is bigger than an integer (here we use long)...\\n        long rev = 0;\\n        //the reverse process begins through the loop...\\n        while (x > 0) {\\n            rev = rev * 10 + x % 10;\\n            x /= 10;    //Divide the number repeatedly by 10 until the number becomes zero.\\n        }\\n        //check if the output is greater than the range...\\n        if (rev > Integer.MAX_VALUE) {\\n            return 0;\\n        }\\n        //return the output with the correct sign (positive or negative)...\\n        return (int) (isNeg ? -rev : rev);\\n    }\\n}\\n```\\n\\n# **C++ Solution:**\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        //store the result in a data type which is bigger than an integer (here we use long)...\\n        long rev = 0;\\n        //the reverse process begins through the loop...\\n        while (x != 0) {\\n            rev = 10 * rev + x % 10;\\n            x /= 10;    //Divide the number repeatedly by 10 until the number becomes zero.\\n        }\\n        return (rev > INT_MAX || rev < INT_MIN) ? 0 : rev;  //check integer overflow and return..\\n    }\\n};\\n```\\n\\n# **Javascript Solution:**\\n```\\nvar reverse = function(x) {\\n    let isNeg = false;\\n    //First we check if the number is negative\\n    //then we will store this information.\\n    if (x < 0) {\\n        isNeg = true;\\n        x = -x;\\n    }\\n    //store the result in a data type which is bigger than an integer (here we use long)...\\n    let rev = 0;\\n    //the reverse process begins through the loop...\\n    while (x > 0) {\\n        rev = rev * 10 + x % 10;\\n        x = parseInt(x / 10);    //Divide the number repeatedly by 10 until the number becomes zero.\\n    }\\n    //check if the output is greater than the range...\\n    if (rev >= Math.pow(2, 31) - 1 || rev <= Math.pow(-2, 31)) {\\n        return 0;\\n    }\\n    //return the output with the correct sign (positive or negative)...\\n    return isNeg ? -rev : rev;\\n};\\n```\\n\\n# **C Language:**\\n```\\nint reverse(int x){\\n    //store the result in a data type which is bigger than an integer (here we use long)...\\n    long rev = 0;\\n    //the reverse process begins through the loop...\\n    while (x != 0) {\\n        rev = 10 * rev + x % 10;\\n        x /= 10;    //Divide the number repeatedly by 10 until the number becomes zero.\\n    }\\n    return (rev > INT_MAX || rev < INT_MIN) ? 0 : rev;  //check integer overflow and return..\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean isNeg = false;\\n        //First we check if the number is negative\\n        //then we will store this information.\\n        if (x < 0) {\\n            isNeg = true;\\n            x = -x;\\n        }\\n        //store the result in a data type which is bigger than an integer (here we use long)...\\n        long rev = 0;\\n        //the reverse process begins through the loop...\\n        while (x > 0) {\\n            rev = rev * 10 + x % 10;\\n            x /= 10;    //Divide the number repeatedly by 10 until the number becomes zero.\\n        }\\n        //check if the output is greater than the range...\\n        if (rev > Integer.MAX_VALUE) {\\n            return 0;\\n        }\\n        //return the output with the correct sign (positive or negative)...\\n        return (int) (isNeg ? -rev : rev);\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        //store the result in a data type which is bigger than an integer (here we use long)...\\n        long rev = 0;\\n        //the reverse process begins through the loop...\\n        while (x != 0) {\\n            rev = 10 * rev + x % 10;\\n            x /= 10;    //Divide the number repeatedly by 10 until the number becomes zero.\\n        }\\n        return (rev > INT_MAX || rev < INT_MIN) ? 0 : rev;  //check integer overflow and return..\\n    }\\n};\\n```\n```\\nvar reverse = function(x) {\\n    let isNeg = false;\\n    //First we check if the number is negative\\n    //then we will store this information.\\n    if (x < 0) {\\n        isNeg = true;\\n        x = -x;\\n    }\\n    //store the result in a data type which is bigger than an integer (here we use long)...\\n    let rev = 0;\\n    //the reverse process begins through the loop...\\n    while (x > 0) {\\n        rev = rev * 10 + x % 10;\\n        x = parseInt(x / 10);    //Divide the number repeatedly by 10 until the number becomes zero.\\n    }\\n    //check if the output is greater than the range...\\n    if (rev >= Math.pow(2, 31) - 1 || rev <= Math.pow(-2, 31)) {\\n        return 0;\\n    }\\n    //return the output with the correct sign (positive or negative)...\\n    return isNeg ? -rev : rev;\\n};\\n```\n```\\nint reverse(int x){\\n    //store the result in a data type which is bigger than an integer (here we use long)...\\n    long rev = 0;\\n    //the reverse process begins through the loop...\\n    while (x != 0) {\\n        rev = 10 * rev + x % 10;\\n        x /= 10;    //Divide the number repeatedly by 10 until the number becomes zero.\\n    }\\n    return (rev > INT_MAX || rev < INT_MIN) ? 0 : rev;  //check integer overflow and return..\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2042355,
                "title": "0-ms-c-solution-using-inbuilt-functions",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string str=to_string(x);\\n        if(str[0]==\\'-\\')\\n            std::reverse(str.begin()+1,str.end());\\n        else\\n            std::reverse(str.begin(),str.end());\\n        if(stol(str)>INT_MAX || stol(str)<INT_MIN) // checks for overflow\\n            return 0;\\n        else\\n            return stoi(str);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string str=to_string(x);\\n        if(str[0]==\\'-\\')\\n            std::reverse(str.begin()+1,str.end());\\n        else\\n            std::reverse(str.begin(),str.end());\\n        if(stol(str)>INT_MAX || stol(str)<INT_MIN) // checks for overflow\\n            return 0;\\n        else\\n            return stoi(str);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1855179,
                "title": "python-fun-type-casting-and-strings-solution",
                "content": "This solution is by no means the best approach, nor is it the shortest. It\\'s just a fun little solution I found that works and is fairly simple given that there is nothing complex going on. We want to intially set our 32-bit integer region\\'s boundaries so we can later use that to check if our answer is \"safe\". What I\\'ve wrote would work for positive integers just fine but if we input, say, \"-321\" our list of numbers (stored as characters) would be [\"1\", \"2\", \"3\", \"-\"] which would cause an error when doing the int(\"321-\") and so I\\'ve created the boolean a to specificy whether the number is negative, then later if True, it\\'ll remove the negative sign. Besides this, we\\'re simply breaking the integer down after making it into a string in an array of characters through which we creating the new string. At this point, our output string is converted back into an integer but always positive, if the original was negative, we multiply by -1, else just return it after a final check to make sure it\\'s in our range.\\n```\\nclass Solution:\\n    MIN_INT = - (2 ** 31)\\n    MAX_INT = 2 ** 31\\n    \\n    def reverse(self, x: int) -> int:\\n        if x == 0 : return 0\\n        a = False\\n        if x < 0:\\n            a = True\\n    \\n        x = str(x)\\n        x = list(x[::-1])\\n        \\n        for char in x:\\n            if char == \\'-\\':\\n                x.remove(char)\\n        \\n        ans = \"\"\\n        \\n        for char in x:\\n            ans += char\\n        \\n        ans = int(ans)  \\n        if a: ans *= -1\\n        \\n        if ans not in range(self.MIN_INT, self.MAX_INT) : return 0\\n        else : return int(ans)\\n```",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    MIN_INT = - (2 ** 31)\\n    MAX_INT = 2 ** 31\\n    \\n    def reverse(self, x: int) -> int:\\n        if x == 0 : return 0\\n        a = False\\n        if x < 0:\\n            a = True\\n    \\n        x = str(x)\\n        x = list(x[::-1])\\n        \\n        for char in x:\\n            if char == \\'-\\':\\n                x.remove(char)\\n        \\n        ans = \"\"\\n        \\n        for char in x:\\n            ans += char\\n        \\n        ans = int(ans)  \\n        if a: ans *= -1\\n        \\n        if ans not in range(self.MIN_INT, self.MAX_INT) : return 0\\n        else : return int(ans)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1835942,
                "title": "easy-c-with-comments",
                "content": "int reverse(int x) {\\n        \\n     //convert integer to string \\n        \\n        string str=to_string(x);\\n        \\n    //manage the sign \\n        \\n        int sign=1;\\n        \\n        if(str[0]==\\'-\\')\\n        {\\n            sign=-1;\\n           \\n        }\\n        \\n     //reverse the string \\n        \\n        int n=str.length();\\n        int low=0;\\n        int high=n-1;\\n        while(low<=high)\\n        {\\n            swap(str[low++],str[high--]);\\n        }\\n        \\n        //convert string to integer\\n        //stol ->convert string to long int\\n        \\n        if(stol(str)<INT_MIN || stol(str)>INT_MAX)return 0;//out of the bond condition\\n        \\n        \\n        return sign*stol(str);\\n    }",
                "solutionTags": [],
                "code": "int reverse(int x) {\\n        \\n     //convert integer to string \\n        \\n        string str=to_string(x);\\n        \\n    //manage the sign \\n        \\n        int sign=1;\\n        \\n        if(str[0]==\\'-\\')\\n        {\\n            sign=-1;\\n           \\n        }\\n        \\n     //reverse the string \\n        \\n        int n=str.length();\\n        int low=0;\\n        int high=n-1;\\n        while(low<=high)\\n        {\\n            swap(str[low++],str[high--]);\\n        }\\n        \\n        //convert string to integer\\n        //stol ->convert string to long int\\n        \\n        if(stol(str)<INT_MIN || stol(str)>INT_MAX)return 0;//out of the bond condition\\n        \\n        \\n        return sign*stol(str);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1432176,
                "title": "java-100-efficient-o-n-time-o-1-space",
                "content": "**Idea**\\nJust check if we subtract the last digit from current number and it is not equal to previous number then return 0.\\nOtherwise return prevNum!\\n\\n\\n\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n    \\t\\n    \\tint prevNum=0;\\n        while(x!=0)\\n        {\\n            int currNum=prevNum*10+x%10;\\n            if((currNum-x%10)/10!=prevNum)\\n                return 0;\\n            prevNum=currNum;\\n            x=x/10;\\n        }\\n        return prevNum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n    \\t\\n    \\tint prevNum=0;\\n        while(x!=0)\\n        {\\n            int currNum=prevNum*10+x%10;\\n            if((currNum-x%10)/10!=prevNum)\\n                return 0;\\n            prevNum=currNum;\\n            x=x/10;\\n        }\\n        return prevNum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1399160,
                "title": "javascript-3-lines-with-explanation",
                "content": "So this one is not so hard with JavaScript.\\nLet\\'s go through my solution step by step:\\n1. Convert type of number to string, so we can use the split() method\\n2. Split the string with the empty string (\\'\\') to get an array of single characters\\n3. Reverse the array of single characters\\n4. Use the join method to create a string again out of the array of single characters\\n5. Delete the - character with the replace function, because while reversing the string it will be at the end (e.g. 321-)\\n6. Use the parseInt function to parse the string to an int; numbers is JS have a greater range than the mentioned signed 32-bit integer range, so we shouild be safe here (see Number.MAX_SAFE_INTEGER) and multiply the number with -1 (make it negative), if the parameter x is smaller than 0\\n7. Check if the reversed number is outside the range, then return 0, otherwise return the reversed number\\n\\n```\\nvar reverse = function(x) {\\n  const reversedAsString = x.toString().split(\\'\\').reverse().join(\\'\\').replace(\\'-\\', \\'\\');\\n  const reversedNumber = x < 0 ? parseInt(reversedAsString) * (-1) : parseInt(reversedAsString);\\n  return (reversedNumber > (2**31 - 1) || reversedNumber < (-(2**31))) ? 0 : reversedNumber;\\n};\\n```\\n\\nHope this helps :)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reverse = function(x) {\\n  const reversedAsString = x.toString().split(\\'\\').reverse().join(\\'\\').replace(\\'-\\', \\'\\');\\n  const reversedNumber = x < 0 ? parseInt(reversedAsString) * (-1) : parseInt(reversedAsString);\\n  return (reversedNumber > (2**31 - 1) || reversedNumber < (-(2**31))) ? 0 : reversedNumber;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1391038,
                "title": "c-clean-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int rev= 0;\\n        while(x!=0)\\n        {\\n            if(rev > INT_MAX/10 || rev< INT_MIN/10)\\n            {\\n                return 0;\\n            }\\n            rev = rev*10 + x%10;\\n            x/=10;\\n        }\\n        return rev;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int rev= 0;\\n        while(x!=0)\\n        {\\n            if(rev > INT_MAX/10 || rev< INT_MIN/10)\\n            {\\n                return 0;\\n            }\\n            rev = rev*10 + x%10;\\n            x/=10;\\n        }\\n        return rev;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1338197,
                "title": "1ms-100-faster-35-8-mb-less-than-94-47-java-solution-without-long",
                "content": "This is a java solution without long, which is prohibited by the instructions: \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\n\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        int sol = 0; \\n        \\n        while (x != 0) {\\n            sol += x % 10;\\n            int checker = sol;\\n            \\n            x /= 10;\\n            \\n            if (x != 0) {\\n                sol *= 10;\\n                if (sol / 10 != checker) {\\n                    return 0;\\n                }\\n            }\\n        }\\n        \\n        return sol;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        int sol = 0; \\n        \\n        while (x != 0) {\\n            sol += x % 10;\\n            int checker = sol;\\n            \\n            x /= 10;\\n            \\n            if (x != 0) {\\n                sol *= 10;\\n                if (sol / 10 != checker) {\\n                    return 0;\\n                }\\n            }\\n        }\\n        \\n        return sol;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1565456,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1566465,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1564940,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565934,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1566466,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1564731,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565424,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1566364,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1569557,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565732,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565456,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1566465,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1564940,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565934,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1566466,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1564731,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565424,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1566364,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1569557,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565732,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1564912,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1567480,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1565734,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1566299,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1567159,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1566584,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1567319,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1567306,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1567158,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 2003427,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1568442,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1568197,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1568807,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1686033,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1575363,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1568270,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1567792,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1570991,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1869416,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1576738,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1570337,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1570191,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1574368,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1573450,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1569430,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1569297,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1568805,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1568806,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1568809,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1568097,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 2041312,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 2009771,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 2007901,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1963925,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1962215,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1956737,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1895125,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1870649,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1867233,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1576798,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1576528,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1575531,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573876,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573566,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573487,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573412,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573365,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573210,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573197,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573116,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1572949,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572813,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572564,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572388,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572378,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572168,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572161,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572109,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1570986,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1570988,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1570989,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1570990,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1568808,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1568135,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1575198,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1572253,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1571969,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1570985,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1570987,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 2065543,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 2061131,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2055107,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2053511,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2050593,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2049949,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2047916,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2046426,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2045962,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2044537,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2042631,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2042607,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2039263,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2037810,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2033106,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2031324,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2022840,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2020389,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2016306,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2009440,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2006980,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2003907,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 2003804,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1998328,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1996494,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1990676,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1986514,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1986379,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1974361,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1972646,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1971402,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1971364,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1968168,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1965922,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1963789,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1960319,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1949609,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1948106,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1931033,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1930015,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1922606,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1920061,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1919704,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1918444,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1911154,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1905931,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1898120,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1886424,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1884849,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1881591,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1880049,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1879558,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1875856,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1875499,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1872011,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1857628,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1855965,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1855725,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1853694,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1852448,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1852091,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1837880,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1836752,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1835813,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1833078,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1829545,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1829500,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1829151,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1827461,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1824308,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1822965,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1821502,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1820681,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1819847,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1810516,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1809460,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1808397,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1808275,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1807193,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1804116,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1803000,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1798199,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1795875,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1795001,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1792821,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1792447,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1789523,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1789458,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1786388,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1784878,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1783688,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1781312,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1780626,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1778034,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1777454,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1776354,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1775284,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1774984,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1774238,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1774036,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1771176,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1769424,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1768198,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1767328,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1765166,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1764967,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1762304,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1760470,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1759522,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1759310,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1756425,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1753654,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1752539,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1751277,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1750047,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1749815,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1741754,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1740747,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1740384,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1739757,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1738380,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1735658,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1734289,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1733512,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1732033,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1731961,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1731778,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1730326,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1730201,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1729311,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1728503,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1727337,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1726624,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1724808,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1723476,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1722605,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1722530,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1720476,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1717332,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1715229,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1714075,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1713786,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1711637,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1710953,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1710287,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1708780,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1708548,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1708328,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1707529,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1703567,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1702333,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1701910,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1701202,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1700123,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1699961,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1697929,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1691882,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1690787,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1689540,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1689251,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1688341,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1687230,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1686810,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1685869,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1678577,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1676769,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1673876,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1671818,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1671233,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1659166,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1648487,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            }
        ]
    },
    {
        "title": "Binary Tree Level Order Traversal II",
        "question_content": "<p>Given the <code>root</code> of a binary tree, return <em>the bottom-up level order traversal of its nodes&#39; values</em>. (i.e., from left to right, level by level from leaf to root).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [[15,7],[9,20],[3]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 34981,
                "title": "my-dfs-and-bfs-java-solution",
                "content": "DFS solution:\\n\\n    public class Solution {\\n        public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n            Queue<TreeNode> queue = new LinkedList<TreeNode>();\\n            List<List<Integer>> wrapList = new LinkedList<List<Integer>>();\\n            \\n            if(root == null) return wrapList;\\n            \\n            queue.offer(root);\\n            while(!queue.isEmpty()){\\n                int levelNum = queue.size();\\n                List<Integer> subList = new LinkedList<Integer>();\\n                for(int i=0; i<levelNum; i++) {\\n                    if(queue.peek().left != null) queue.offer(queue.peek().left);\\n                    if(queue.peek().right != null) queue.offer(queue.peek().right);\\n                    subList.add(queue.poll().val);\\n                }\\n                wrapList.add(0, subList);\\n            }\\n            return wrapList;\\n        }\\n    }\\n\\nBFS solution:\\n\\n    public class Solution {\\n            public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n                List<List<Integer>> wrapList = new LinkedList<List<Integer>>();\\n                levelMaker(wrapList, root, 0);\\n                return wrapList;\\n            }\\n            \\n            public void levelMaker(List<List<Integer>> list, TreeNode root, int level) {\\n                if(root == null) return;\\n                if(level >= list.size()) {\\n                    list.add(0, new LinkedList<Integer>());\\n                }\\n                levelMaker(list, root.left, level+1);\\n                levelMaker(list, root.right, level+1);\\n                list.get(list.size()-level-1).add(root.val);\\n            }\\n        }",
                "solutionTags": [
                    "Java",
                    "Queue"
                ],
                "code": "class Solution {\\n        public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n            Queue<TreeNode> queue = new LinkedList<TreeNode>();\\n            List<List<Integer>> wrapList = new LinkedList<List<Integer>>();\\n            \\n            if(root == null) return wrapList;\\n            \\n            queue.offer(root);\\n            while(!queue.isEmpty()){\\n                int levelNum = queue.size();\\n                List<Integer> subList = new LinkedList<Integer>();\\n                for(int i=0; i<levelNum; i++) {\\n                    if(queue.peek().left != null) queue.offer(queue.peek().left);\\n                    if(queue.peek().right != null) queue.offer(queue.peek().right);\\n                    subList.add(queue.poll().val);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 34970,
                "title": "is-there-any-better-idea-than-doing-regular-level-order-traversal-and-reverse-the-result",
                "content": "The way I see this problem is that it is EXACTLY the same as \"Level-Order Traversal I\" except that we need to reverse the final container for output, which is trivial. Is there a better idea that fits this problem specifically?\\n\\nThe attached is my current recursive solution. In each function call, we pass in the current node and its level. If this level does not yet exist in the output container, then we should add a new empty level. Then, we add the current node to the end of the current level, and recursively call the function passing the two children of the current node at the next level. This algorithm is really a DFS, but it saves the level information for each node and produces the same result as BFS would.\\n\\n    vector<vector<int> > res;\\n\\n    void DFS(TreeNode* root, int level)\\n    {\\n        if (root == NULL) return;\\n        if (level == res.size()) // The level does not exist in output\\n        {\\n            res.push_back(vector<int>()); // Create a new level\\n        }\\n        \\n        res[level].push_back(root->val); // Add the current value to its level\\n        DFS(root->left, level+1); // Go to the next level\\n        DFS(root->right,level+1);\\n    }\\n    \\n    vector<vector<int> > levelOrderBottom(TreeNode *root) {\\n        DFS(root, 0);\\n        return vector<vector<int> > (res.rbegin(), res.rend());\\n    }",
                "solutionTags": [],
                "code": "The way I see this problem is that it is EXACTLY the same as \"Level-Order Traversal I\" except that we need to reverse the final container for output, which is trivial. Is there a better idea that fits this problem specifically?\\n\\nThe attached is my current recursive solution. In each function call, we pass in the current node and its level. If this level does not yet exist in the output container, then we should add a new empty level. Then, we add the current node to the end of the current level, and recursively call the function passing the two children of the current node at the next level. This algorithm is really a DFS, but it saves the level information for each node and produces the same result as BFS would.\\n\\n    vector<vector<int> > res;\\n\\n    void DFS(TreeNode* root, int level)\\n    {\\n        if (root == NULL) return;\\n        if (level == res.size()) // The level does not exist in output\\n        {\\n            res.push_back(vector<int>()); // Create a new level\\n        }\\n        \\n        res[level].push_back(root->val); // Add the current value to its level\\n        DFS(root->left, level+1); // Go to the next level\\n        DFS(root->right,level+1);\\n    }\\n    \\n    vector<vector<int> > levelOrderBottom(TreeNode *root) {\\n        DFS(root, 0);\\n        return vector<vector<int> > (res.rbegin(), res.rend());\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 34978,
                "title": "python-solutions-dfs-recursively-dfs-stack-bfs-queue",
                "content": "\\n    # dfs recursively\\n    def levelOrderBottom1(self, root):\\n        res = []\\n        self.dfs(root, 0, res)\\n        return res\\n    \\n    def dfs(self, root, level, res):\\n        if root:\\n            if len(res) < level + 1:\\n                res.insert(0, [])\\n            res[-(level+1)].append(root.val)\\n            self.dfs(root.left, level+1, res)\\n            self.dfs(root.right, level+1, res)\\n            \\n    # dfs + stack\\n    def levelOrderBottom2(self, root):\\n        stack = [(root, 0)]\\n        res = []\\n        while stack:\\n            node, level = stack.pop()\\n            if node:\\n                if len(res) < level+1:\\n                    res.insert(0, [])\\n                res[-(level+1)].append(node.val)\\n                stack.append((node.right, level+1))\\n                stack.append((node.left, level+1))\\n        return res\\n     \\n    # bfs + queue   \\n    def levelOrderBottom(self, root):\\n        queue, res = collections.deque([(root, 0)]), []\\n        while queue:\\n            node, level = queue.popleft()\\n            if node:\\n                if len(res) < level+1:\\n                    res.insert(0, [])\\n                res[-(level+1)].append(node.val)\\n                queue.append((node.left, level+1))\\n                queue.append((node.right, level+1))\\n        return res\\n\\t\\t\\n\\tdef levelOrderBottom(self, root):\\n        deque, ret = collections.deque(), []\\n        if root:\\n            deque.append(root)\\n        while deque:\\n            level, size = [], len(deque)\\n            for _ in range(size):\\n                node = deque.popleft()\\n                level.append(node.val)\\n                if node.left:\\n                    deque.append(node.left)\\n                if node.right:\\n                    deque.append(node.right)\\n            ret.append(level)\\n        return ret[::-1]",
                "solutionTags": [
                    "Python",
                    "Stack",
                    "Depth-First Search",
                    "Breadth-First Search",
                    "Queue"
                ],
                "code": "\\n    # dfs recursively\\n    def levelOrderBottom1(self, root):\\n        res = []\\n        self.dfs(root, 0, res)\\n        return res\\n    \\n    def dfs(self, root, level, res):\\n        if root:\\n            if len(res) < level + 1:\\n                res.insert(0, [])\\n            res[-(level+1)].append(root.val)\\n            self.dfs(root.left, level+1, res)\\n            self.dfs(root.right, level+1, res)\\n            \\n    # dfs + stack\\n    def levelOrderBottom2(self, root):\\n        stack = [(root, 0)]\\n        res = []\\n        while stack:\\n            node, level = stack.pop()\\n            if node:\\n                if len(res) < level+1:\\n                    res.insert(0, [])\\n                res[-(level+1)].append(node.val)\\n                stack.append((node.right, level+1))\\n                stack.append((node.left, level+1))\\n        return res\\n     \\n    # bfs + queue   \\n    def levelOrderBottom(self, root):\\n        queue, res = collections.deque([(root, 0)]), []\\n        while queue:\\n            node, level = queue.popleft()\\n            if node:\\n                if len(res) < level+1:\\n                    res.insert(0, [])\\n                res[-(level+1)].append(node.val)\\n                queue.append((node.left, level+1))\\n                queue.append((node.right, level+1))\\n        return res\\n\\t\\t\\n\\tdef levelOrderBottom(self, root):\\n        deque, ret = collections.deque(), []\\n        if root:\\n            deque.append(root)\\n        while deque:\\n            level, size = [], len(deque)\\n            for _ in range(size):\\n                node = deque.popleft()\\n                level.append(node.val)\\n                if node.left:\\n                    deque.append(node.left)\\n                if node.right:\\n                    deque.append(node.right)\\n            ret.append(level)\\n        return ret[::-1]",
                "codeTag": "Python3"
            },
            {
                "id": 35108,
                "title": "c-4ms-solution",
                "content": "First version costs 8ms:\\n\\n    void levelOrder(vector<vector<int>> &ans, TreeNode *node, int level) {\\n        if (!node) return;\\n        if (level >= ans.size())\\n            ans.push_back({});\\n        ans[level].push_back(node->val);\\n        levelOrder(ans,node->left,level+1);\\n        levelOrder(ans,node->right,level+1);\\n    }\\n\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        levelOrder(ans,root,0);\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n\\n\\n\\nSecond version costs 4ms:\\n\\n    int depth(TreeNode *root) {\\n        if (!root) return 0;\\n        return max(depth(root->left),depth(root->right))+1;\\n    }\\n\\n    void levelOrder(vector<vector<int>> &ans, TreeNode *node, int level) {\\n        if (!node) return;\\n        ans[level].push_back(node->val);\\n        levelOrder(ans,node->left,level-1);\\n        levelOrder(ans,node->right,level-1);\\n    }\\n\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        int d = depth(root);\\n        vector<vector<int>> ans(d,vector<int> {});\\n        levelOrder(ans,root,d-1);\\n        return ans;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "First version costs 8ms:\\n\\n    void levelOrder(vector<vector<int>> &ans, TreeNode *node, int level) {\\n        if (!node) return;\\n        if (level >= ans.size())\\n            ans.push_back({});\\n        ans[level].push_back(node->val);\\n        levelOrder(ans,node->left,level+1);\\n        levelOrder(ans,node->right,level+1);\\n    }\\n\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        levelOrder(ans,root,0);\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n\\n\\n\\nSecond version costs 4ms:\\n\\n    int depth(TreeNode *root) {\\n        if (!root) return 0;\\n        return max(depth(root->left),depth(root->right))+1;\\n    }\\n\\n    void levelOrder(vector<vector<int>> &ans, TreeNode *node, int level) {\\n        if (!node) return;\\n        ans[level].push_back(node->val);\\n        levelOrder(ans,node->left,level-1);\\n        levelOrder(ans,node->right,level-1);\\n    }\\n\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        int d = depth(root);\\n        vector<vector<int>> ans(d,vector<int> {});\\n        levelOrder(ans,root,d-1);\\n        return ans;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 35089,
                "title": "java-solution-using-queue",
                "content": "    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n \\n        List<List<Integer>> result = new ArrayList<List<Integer>>();\\n        if(root==null) return result;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        while(q.size()>0){\\n            List<Integer> list = new ArrayList<>();\\n            int size = q.size();\\n            for(int i=0; i<size; i++){\\n                TreeNode node = q.poll();\\n                list.add(node.val);\\n                if(node.left!=null) q.add(node.left);\\n                if(node.right!=null) q.add(node.right);\\n            }\\n            result.add(0,list);\\n        }\\n        return result;\\n\\n    }",
                "solutionTags": [],
                "code": "    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n \\n        List<List<Integer>> result = new ArrayList<List<Integer>>();\\n        if(root==null) return result;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        while(q.size()>0){\\n            List<Integer> list = new ArrayList<>();\\n            int size = q.size();\\n            for(int i=0; i<size; i++){\\n                TreeNode node = q.poll();\\n                list.add(node.val);\\n                if(node.left!=null) q.add(node.left);\\n                if(node.right!=null) q.add(node.right);\\n            }\\n            result.add(0,list);\\n        }\\n        return result;\\n\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 716751,
                "title": "c-queue-without-using-reverse-8ms",
                "content": "It is actually my first post so any feedback is welcomed.\\n\\n**Its well commented | Easy to Understand | \\nand simple approach with all steps explained within the code itself**\\n\\nMain **CATCH** of this code is that you dont need to reverse the vector in last.\\nWe can smartly just use our depth function to save ourself few fraction of our computation energy.\\n\\nUsed queue and iterative method to do the level order traversal.\\nI calculated depth first to know the level so that we dont need to reverse the vector at the end.\\nRest is a simple code starting from bottom I am inserting vector entries.\\n\\n```\\nclass Solution {\\npublic:\\n    int depth(TreeNode* root){\\n        if(root == NULL)return 0;\\n\\t\\t//return the maximum depth of the tree so to find the levels\\n        return max(depth(root->right),depth(root->left))+1;\\n    }\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n     if(root == NULL)return {};\\n        int d = depth(root);\\n\\t\\t//initialise the empty levels inside a vector\\n        vector<vector<int> > level(d,vector<int>({})); \\n        int i = 0;\\n\\t\\t//use a queue to maintain the tree nodes\\n        queue<TreeNode*> q;\\n\\t\\t//push the root node with one element and decrement the level\\n        q.push(root);\\n        level[d-1].push_back(root->val);\\n        q.push(NULL);\\n        d--;\\n\\n\\t\\t// do work while queue is not empty\\n        while(!q.empty()){\\n\\t\\t\\t// extract the node from the queue and remove it from the queue\\n            TreeNode* temp = q.front();\\n            q.pop();\\n            \\n\\t\\t\\t//if the node exist check its right and left node\\n            if(temp){  \\n\\t\\t\\t\\t// and if the left and right node exist simply push the value to the vector\\n                if(temp->left){\\n                        q.push(temp->left);\\n                        level[d-1].push_back(temp->left->val);\\n                    }    \\n                if(temp->right){\\n                        q.push(temp->right);\\n                        level[d-1].push_back(temp->right->val);\\n                    }\\n            }                 \\n            else {\\n\\t\\t\\t// to handle condition if NULL found at a node\\n                if(q.empty()) break;\\n                d--;\\n                q.push(NULL);\\n            }  \\n        }\\n\\t\\t// now without reversing the vector you can simply return the answer\\n        return level;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Queue"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int depth(TreeNode* root){\\n        if(root == NULL)return 0;\\n\\t\\t//return the maximum depth of the tree so to find the levels\\n        return max(depth(root->right),depth(root->left))+1;\\n    }\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n     if(root == NULL)return {};\\n        int d = depth(root);\\n\\t\\t//initialise the empty levels inside a vector\\n        vector<vector<int> > level(d,vector<int>({})); \\n        int i = 0;\\n\\t\\t//use a queue to maintain the tree nodes\\n        queue<TreeNode*> q;\\n\\t\\t//push the root node with one element and decrement the level\\n        q.push(root);\\n        level[d-1].push_back(root->val);\\n        q.push(NULL);\\n        d--;\\n\\n\\t\\t// do work while queue is not empty\\n        while(!q.empty()){\\n\\t\\t\\t// extract the node from the queue and remove it from the queue\\n            TreeNode* temp = q.front();\\n            q.pop();\\n            \\n\\t\\t\\t//if the node exist check its right and left node\\n            if(temp){  \\n\\t\\t\\t\\t// and if the left and right node exist simply push the value to the vector\\n                if(temp->left){\\n                        q.push(temp->left);\\n                        level[d-1].push_back(temp->left->val);\\n                    }    \\n                if(temp->right){\\n                        q.push(temp->right);\\n                        level[d-1].push_back(temp->right->val);\\n                    }\\n            }                 \\n            else {\\n\\t\\t\\t// to handle condition if NULL found at a node\\n                if(q.empty()) break;\\n                d--;\\n                q.push(NULL);\\n            }  \\n        }\\n\\t\\t// now without reversing the vector you can simply return the answer\\n        return level;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35045,
                "title": "simple-java-solution-with-linkedlist",
                "content": "The addFirst() method of LinkedLinked save us from reverse final result.\\n\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\t\\tLinkedList<List<Integer>> list = new LinkedList<List<Integer>>();\\n\\t\\taddLevel(list, 0, root);\\n\\t\\treturn list;\\n    }\\n\\t\\n\\tprivate void addLevel(LinkedList<List<Integer>> list, int level, TreeNode node) {\\n\\t\\tif (node == null) return;\\n\\t\\tif (list.size()-1 < level) list.addFirst(new LinkedList<Integer>());\\n\\t\\tlist.get(list.size()-1-level).add(node.val);\\n\\t\\taddLevel(list, level+1, node.left);\\n\\t\\taddLevel(list, level+1, node.right);\\n\\t}",
                "solutionTags": [],
                "code": "The addFirst() method of LinkedLinked save us from reverse final result.\\n\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\t\\tLinkedList<List<Integer>> list = new LinkedList<List<Integer>>();\\n\\t\\taddLevel(list, 0, root);\\n\\t\\treturn list;\\n    }\\n\\t\\n\\tprivate void addLevel(LinkedList<List<Integer>> list, int level, TreeNode node) {\\n\\t\\tif (node == null) return;\\n\\t\\tif (list.size()-1 < level) list.addFirst(new LinkedList<Integer>());\\n\\t\\tlist.get(list.size()-1-level).add(node.val);\\n\\t\\taddLevel(list, level+1, node.left);\\n\\t\\taddLevel(list, level+1, node.right);\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 35172,
                "title": "my-8ms-bfs-c-solution",
                "content": "    class Solution {\\n    public:\\n        vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n            vector<vector<int>> ret;\\n            if (root == NULL) return ret;\\n            queue<TreeNode *> q;\\n            q.push(root);\\n            while (!q.empty()) {\\n                int l = q.size();\\n                vector<int> curlayer;\\n                for (int i = 0; i < l; i++) {\\n                    TreeNode *cur = q.front();\\n                    q.pop();\\n                    curlayer.push_back(cur->val);\\n                    if (cur->left != NULL) q.push(cur->left);\\n                    if (cur->right != NULL) q.push(cur->right);\\n                }\\n                ret.push_back(curlayer);\\n            }\\n            reverse(ret.begin(), ret.end());\\n            return ret;\\n        }\\n    };",
                "solutionTags": [
                    "Breadth-First Search"
                ],
                "code": "class Solution {\\n    public:\\n        vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n            vector<vector<int>> ret;\\n            if (root == NULL) return ret;\\n            queue<TreeNode *> q;\\n            q.push(root);\\n            while (!q.empty()) {\\n                int l = q.size();\\n                vector<int> curlayer;\\n                for (int i = 0; i < l; i++) {\\n                    TreeNode *cur = q.front();\\n                    q.pop();\\n                    curlayer.push_back(cur->val);\\n                    if (cur->left != NULL) q.push(cur->left);\\n                    if (cur->right != NULL) q.push(cur->right);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 34976,
                "title": "my-neat-solution-in-c",
                "content": "    vector<vector<int> > levelOrder(TreeNode *root) {\\n    \\tvector<vector<int> > retVal;\\n\\n    \\tlevelOrder(root, retVal, 0);\\n\\n    \\treverse(retVal.begin(), retVal.end());\\n\\n    \\treturn retVal;\\n    }\\n\\n    void levelOrder(TreeNode* root, vector<vector<int> > &v, int currLevel) {\\n    \\tif (root == NULL) {\\n    \\t\\treturn;\\n    \\t}\\n\\n    \\tif (v.empty() || currLevel > (v.size() - 1)) {\\n    \\t\\tv.push_back(vector<int>());\\n    \\t}\\n\\n    \\tv[currLevel].push_back(root->val);\\n\\n    \\tlevelOrder(root->left, v, currLevel + 1);\\n    \\tlevelOrder(root->right, v, currLevel + 1);\\n    }",
                "solutionTags": [],
                "code": "    vector<vector<int> > levelOrder(TreeNode *root) {\\n    \\tvector<vector<int> > retVal;\\n\\n    \\tlevelOrder(root, retVal, 0);\\n\\n    \\treverse(retVal.begin(), retVal.end());\\n\\n    \\treturn retVal;\\n    }\\n\\n    void levelOrder(TreeNode* root, vector<vector<int> > &v, int currLevel) {\\n    \\tif (root == NULL) {\\n    \\t\\treturn;\\n    \\t}\\n\\n    \\tif (v.empty() || currLevel > (v.size() - 1)) {\\n    \\t\\tv.push_back(vector<int>());\\n    \\t}\\n\\n    \\tv[currLevel].push_back(root->val);\\n\\n    \\tlevelOrder(root->left, v, currLevel + 1);\\n    \\tlevelOrder(root->right, v, currLevel + 1);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 715874,
                "title": "python-classical-bfs-level-traversal-with-queue-explained",
                "content": "Not the most optimal way, but for me the most intuitive is to use **bfs** traversal of our graph, put all information into some auxilary list, and then traverse this list and reconstruct output.  Let us consider the following example in more details:\\n\\n![image](https://assets.leetcode.com/users/images/df695acf-e9c8-4554-9790-6dcff54a71ba_1593674131.7202525.png)\\n\\n1. `Out_temp` is temporary list with pairs: first element in pair is value of node and the second is level of this node. We use **bfs** with queue to traverse our tree and in the end we have\\n`Out_temp = [[3, 0], [9, 1], [20, 1], [15, 2], [7, 2]]`.\\n2. The second step is to reconstruct level by level `Out` list: we traverse our `Out_temp` and if level of new element is not the same as previous, we create new sublist.\\n\\n**Complexity** is `O(V)`, where `V` is number of nodes in our tree, because we use bfs traversal and then we have one more `O(V)` postprosessing of our data. Space complexity is also `O(V)`.\\n\\n\\n```\\nclass Solution:\\n    def levelOrderBottom(self, root):\\n        if not root: return []\\n    \\n        Out_temp, deq = [], deque([[root, 0]])\\n    \\n        while deq:\\n            elem = deq.popleft()\\n            Out_temp.append([elem[0].val, elem[1]])\\n            if elem[0].left:\\n                deq.append([elem[0].left, elem[1] + 1])\\n            if elem[0].right:\\n                deq.append([elem[0].right, elem[1] + 1])\\n\\n        Out = [[Out_temp[0][0]]]\\n        for i in range(1, len(Out_temp)):\\n            if Out_temp[i][1] == Out_temp[i-1][1]:\\n                Out[Out_temp[i][1]].append(Out_temp[i][0])\\n            else:\\n                Out.append([Out_temp[i][0]])\\n\\n        return Out[::-1]\\n```\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Solution:\\n    def levelOrderBottom(self, root):\\n        if not root: return []\\n    \\n        Out_temp, deq = [], deque([[root, 0]])\\n    \\n        while deq:\\n            elem = deq.popleft()\\n            Out_temp.append([elem[0].val, elem[1]])\\n            if elem[0].left:\\n                deq.append([elem[0].left, elem[1] + 1])\\n            if elem[0].right:\\n                deq.append([elem[0].right, elem[1] + 1])\\n\\n        Out = [[Out_temp[0][0]]]\\n        for i in range(1, len(Out_temp)):\\n            if Out_temp[i][1] == Out_temp[i-1][1]:\\n                Out[Out_temp[i][1]].append(Out_temp[i][0])\\n            else:\\n                Out.append([Out_temp[i][0]])\\n\\n        return Out[::-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1133018,
                "title": "swift-binary-tree-level-order-traversal-ii",
                "content": "**Make a more abbreviated version and send it to the comments\\nI will be glad to see your solution**\\n\\n```swift\\nclass Solution {\\n    func levelOrderBottom(_ root: TreeNode?) -> [[Int]] {\\n        guard let node = root else { return [] }\\n        var result = [[Int]](), tree = [node]\\n        while !tree.isEmpty {\\n            result.insert(tree.map { $0.val }, at: 0)\\n            tree = tree.flatMap { [$0.left, $0.right] }.compactMap{ $0 }\\n        }\\n        return result\\n    }\\n}\\n```\\n\\n![](https://www.davidseek.com/content/images/2020/06/bstlevelordertraversal.gif)\\n\\n#### Tests\\n\\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let s = Solution()\\n    \\n    func testExample1() {\\n        let tree = TreeNode([3,9,20,nil,nil,15,7])\\n        XCTAssertEqual(s.levelOrderBottom(tree), [[15,7],[9,20],[3]]) // good\\n    }\\n    \\n    func testExample2() {\\n        let tree = TreeNode([1])\\n        XCTAssertEqual(s.levelOrderBottom(tree), [[1]]) // good\\n    }\\n    \\n    func testExample3() {\\n        let tree = TreeNode([])\\n        XCTAssertEqual(s.levelOrderBottom(tree), []) // good\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\\n\\n#### TreeNode Class\\n\\n```swift\\npublic class TreeNode {\\n    public var val: Int\\n    public var left: TreeNode?\\n    public var right: TreeNode?\\n    public init() { self.val = 0; self.left = nil; self.right = nil; }\\n    public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n    public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n    }\\n    \\n    // Making an additional initializer from an array of integers\\n    public init?(_ array: [Int?]) {\\n        var values = array\\n        guard !values.isEmpty, let head = values.removeFirst() else { return nil }\\n        \\n        val = head; left = nil; right = nil\\n        \\n        var queue = [self]\\n        while !queue.isEmpty {\\n            let node = queue.removeFirst()\\n            if !values.isEmpty, let val = values.removeFirst() {\\n                node.left = TreeNode(val)\\n                queue.append(node.left!)\\n            }\\n            if !values.isEmpty, let val = values.removeFirst() {\\n                node.right = TreeNode(val)\\n                queue.append(node.right!)\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func levelOrderBottom(_ root: TreeNode?) -> [[Int]] {\\n        guard let node = root else { return [] }\\n        var result = [[Int]](), tree = [node]\\n        while !tree.isEmpty {\\n            result.insert(tree.map { $0.val }, at: 0)\\n            tree = tree.flatMap { [$0.left, $0.right] }.compactMap{ $0 }\\n        }\\n        return result\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let s = Solution()\\n    \\n    func testExample1() {\\n        let tree = TreeNode([3,9,20,nil,nil,15,7])\\n        XCTAssertEqual(s.levelOrderBottom(tree), [[15,7],[9,20],[3]]) // good\\n    }\\n    \\n    func testExample2() {\\n        let tree = TreeNode([1])\\n        XCTAssertEqual(s.levelOrderBottom(tree), [[1]]) // good\\n    }\\n    \\n    func testExample3() {\\n        let tree = TreeNode([])\\n        XCTAssertEqual(s.levelOrderBottom(tree), []) // good\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\n```swift\\npublic class TreeNode {\\n    public var val: Int\\n    public var left: TreeNode?\\n    public var right: TreeNode?\\n    public init() { self.val = 0; self.left = nil; self.right = nil; }\\n    public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n    public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n    }\\n    \\n    // Making an additional initializer from an array of integers\\n    public init?(_ array: [Int?]) {\\n        var values = array\\n        guard !values.isEmpty, let head = values.removeFirst() else { return nil }\\n        \\n        val = head; left = nil; right = nil\\n        \\n        var queue = [self]\\n        while !queue.isEmpty {\\n            let node = queue.removeFirst()\\n            if !values.isEmpty, let val = values.removeFirst() {\\n                node.left = TreeNode(val)\\n                queue.append(node.left!)\\n            }\\n            if !values.isEmpty, let val = values.removeFirst() {\\n                node.right = TreeNode(val)\\n                queue.append(node.right!)\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35106,
                "title": "java-solution-that-beats-80",
                "content": "    public class Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        \\n        List<List<Integer>> counts = new ArrayList<List<Integer>>();\\n        \\n        visit(root, counts, 0);\\n        Collections.reverse(counts);\\n\\n        return counts;\\n    }\\n    \\n    public void visit(TreeNode node, List<List<Integer>> counts, int level){\\n        if(node == null)\\n            return;\\n        if(counts.size() < level+1)\\n            counts.add(new ArrayList<Integer>());\\n        counts.get(level).add(node.val);\\n        \\n        visit(node.left, counts, level+1);\\n        visit(node.right, counts, level+1);\\n    }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        \\n        List<List<Integer>> counts = new ArrayList<List<Integer>>();\\n        \\n        visit(root, counts, 0);\\n        Collections.reverse(counts);\\n\\n        return counts;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 716103,
                "title": "java-bfs",
                "content": "```\\nimport java.util.ArrayList;\\nimport java.util.Queue;\\nimport java.util.Stack;\\nimport java.util.LinkedList;\\n\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        Queue<TreeNode> nodeQueue = new LinkedList<>();\\n        Stack<List<Integer>> levels = new Stack<>();\\n        if(root != null) {\\n            nodeQueue.offer(root);\\n        }\\n        while(!nodeQueue.isEmpty()) {\\n            int qSize = nodeQueue.size();\\n            List<Integer> level = new ArrayList<>();\\n            for (int i = 0; i < qSize; i++) {\\n                TreeNode curr = nodeQueue.poll();\\n                level.add(curr.val);\\n                if(curr.left != null) nodeQueue.offer(curr.left);\\n                if(curr.right != null) nodeQueue.offer(curr.right);\\n            }\\n            levels.push(level);\\n        }\\n\\n        List<List<Integer>> res = new ArrayList<>();\\n        while(!levels.isEmpty()) {\\n            res.add(levels.pop());\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Breadth-First Search"
                ],
                "code": "```\\nimport java.util.ArrayList;\\nimport java.util.Queue;\\nimport java.util.Stack;\\nimport java.util.LinkedList;\\n\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        Queue<TreeNode> nodeQueue = new LinkedList<>();\\n        Stack<List<Integer>> levels = new Stack<>();\\n        if(root != null) {\\n            nodeQueue.offer(root);\\n        }\\n        while(!nodeQueue.isEmpty()) {\\n            int qSize = nodeQueue.size();\\n            List<Integer> level = new ArrayList<>();\\n            for (int i = 0; i < qSize; i++) {\\n                TreeNode curr = nodeQueue.poll();\\n                level.add(curr.val);\\n                if(curr.left != null) nodeQueue.offer(curr.left);\\n                if(curr.right != null) nodeQueue.offer(curr.right);\\n            }\\n            levels.push(level);\\n        }\\n\\n        List<List<Integer>> res = new ArrayList<>();\\n        while(!levels.isEmpty()) {\\n            res.add(levels.pop());\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35026,
                "title": "java-solution-with-linkedlist",
                "content": "This solution is nearly identical to the traditional 'Level Order traversal' only difference is the DataStructure used to hold the data. Instead of Using an `ArrayList` and appending each level after the other I used a `LinkedList` and added each new level to the `head` of the `LinkedList`.\\n\\n    public class Solution {\\n        public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n            if(root == null) return new LinkedList<List<Integer>>();\\n            List<List<Integer>> levels = new LinkedList<List<Integer>>();\\n            Queue<TreeNode> q = new LinkedList<TreeNode>(); \\n            q.add(root);\\n            \\n            while(!q.isEmpty()){\\n                List<Integer> list = new ArrayList<Integer>(); \\n                int size = q.size();\\n                for(int i = 0; i < size; i++){\\n                    TreeNode node = q.remove();\\n                    list.add(node.val);\\n                    if(node.left != null) q.add(node.left);\\n                    if(node.right != null) q.add(node.right);\\n                }\\n                ((LinkedList)levels).addFirst(list);\\n            }\\n            return levels;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n            if(root == null) return new LinkedList<List<Integer>>();\\n            List<List<Integer>> levels = new LinkedList<List<Integer>>();\\n            Queue<TreeNode> q = new LinkedList<TreeNode>(); \\n            q.add(root);\\n            \\n            while(!q.isEmpty()){\\n                List<Integer> list = new ArrayList<Integer>(); \\n                int size = q.size();\\n                for(int i = 0; i < size; i++){\\n                    TreeNode node = q.remove();\\n                    list.add(node.val);\\n                    if(node.left != null) q.add(node.left);\\n                    if(node.right != null) q.add(node.right);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 35081,
                "title": "python-code-easy-to-understand",
                "content": "    class Solution(object):\\n    def levelOrderBottom(self, root):\\n        \"\"\"\\n        :type root: TreeNode\\n        :rtype: List[List[int]]\\n        \"\"\"\\n        res,data=[],[]\\n        if not root:return res\\n        stack=[]\\n        stack.append(root)\\n        nCount=1#\\u8bb0\\u5f55\\u6bcf\\u5c42\\u8282\\u70b9\\u6570\\n        while stack:\\n            node=stack.pop(0)\\n            data+=[node.val]#\\u4fdd\\u5b58\\u6bcf\\u5c42\\u8282\\u70b9\\u7684\\u503c\\n            nCount-=1\\n            if node.left:\\n                stack.append(node.left)\\n            if node.right:\\n                stack.append(node.right)\\n            if nCount==0:\\n                res=[data]+res\\n                data=[]\\n                nCount=len(stack)\\n        return res",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution(object):\\n    def levelOrderBottom(self, root):\\n        \"\"\"\\n        :type root: TreeNode\\n        :rtype: List[List[int]]\\n        \"\"\"\\n        res,data=[],[]\\n        if not root:return res\\n        stack=[]\\n        stack.append(root)\\n        nCount=1#\\u8bb0\\u5f55\\u6bcf\\u5c42\\u8282\\u70b9\\u6570\\n        while stack:\\n            node=stack.pop(0)\\n            data+=[node.val]#\\u4fdd\\u5b58\\u6bcf\\u5c42\\u8282\\u70b9\\u7684\\u503c\\n            nCount-=1\\n            if node.left:\\n                stack.append(node.left)\\n            if node.right:\\n                stack.append(node.right)\\n            if nCount==0:\\n                res=[data]+res\\n                data=[]\\n                nCount=len(stack)\\n        return res",
                "codeTag": "Java"
            },
            {
                "id": 34993,
                "title": "4ms-c-language-solution",
                "content": "    struct LinkedIntNode\\n    {\\n        int val;\\n        struct LinkedIntNode *next;\\n    };\\n    \\n    struct LinkedInts\\n    {\\n        int count;\\n        struct LinkedIntNode *head;\\n    };\\n    \\n    struct TreeTraversalResult\\n    {\\n        int levelLimit;\\n        struct LinkedInts *levels;\\n    };\\n    \\n    void initTreeResult(struct TreeTraversalResult *r, int level)\\n    {\\n        r->levelLimit = level;\\n        r->levels = malloc(sizeof(struct LinkedInts) * level);\\n        memset(r->levels, 0 , sizeof(struct LinkedInts) * level);\\n    }\\n    \\n    void addTreeNode(struct TreeTraversalResult *r, int val, int level)\\n    {\\n        if(r->levelLimit < level + 1)\\n        {\\n            struct LinkedInts *newLevels = malloc(sizeof(struct LinkedInts) * (level + 10));\\n            memset(newLevels, 0, sizeof(struct LinkedInts) * (level + 10));\\n            memmove(newLevels, r->levels, sizeof(struct LinkedInts) * r->levelLimit);\\n            r->levelLimit = level + 10;\\n            r->levels = newLevels;\\n        }\\n        struct LinkedIntNode *node = malloc(sizeof(struct LinkedIntNode));\\n        node->val = val;\\n        node->next = r->levels[level].head;\\n        r->levels[level].head = node;\\n        r->levels[level].count++;\\n    }\\n    \\n    void traversal(struct TreeNode* node, int curLevel, struct TreeTraversalResult *r)\\n    {\\n    \\taddTreeNode(r, node->val, curLevel);\\n    \\tif (node->left)\\n    \\t{\\n    \\t\\ttraversal(node->left, curLevel + 1, r);\\n    \\t}\\n    \\tif (node->right)\\n    \\t{\\n    \\t\\ttraversal(node->right, curLevel + 1, r);\\n    \\t}\\n    }\\n    int** levelOrderBottom(struct TreeNode* root, int** columnSizes, int* returnSize) {\\n        if(root == NULL) return NULL;\\n        struct TreeTraversalResult result;\\n        initTreeResult(&result, 200);\\n        traversal(root, 0, &result);\\n        int i;\\n        for(i = 0; i < result.levelLimit; ++i)\\n        {\\n            if(result.levels[i].count == 0) break;\\n        }\\n        int **resultArray = malloc(sizeof(int *) * i);\\n        *columnSizes = malloc(sizeof(int) * i);\\n        *returnSize = i;\\n        int tmp;\\n        for(int j = i - 1, n = 0; j >= 0; --j, ++n)\\n        {\\n            (*columnSizes)[n] = tmp = result.levels[j].count;\\n            resultArray[n] = malloc(sizeof(int) * tmp);\\n            struct LinkedIntNode *node = result.levels[j].head;\\n            for(int k = tmp - 1; k >= 0; k--)\\n            {\\n                *(resultArray[n]+k) = node->val;\\n                node = node->next;\\n            }\\n        }\\n        return resultArray;\\n    }",
                "solutionTags": [],
                "code": "    struct LinkedIntNode\\n    {\\n        int val;\\n        struct LinkedIntNode *next;\\n    };\\n    \\n    struct LinkedInts\\n    {\\n        int count;\\n        struct LinkedIntNode *head;\\n    };\\n    \\n    struct TreeTraversalResult\\n    {\\n        int levelLimit;\\n        struct LinkedInts *levels;\\n    };\\n    \\n    void initTreeResult(struct TreeTraversalResult *r, int level)\\n    {\\n        r->levelLimit = level;\\n        r->levels = malloc(sizeof(struct LinkedInts) * level);\\n        memset(r->levels, 0 , sizeof(struct LinkedInts) * level);\\n    }\\n    \\n    void addTreeNode(struct TreeTraversalResult *r, int val, int level)\\n    {\\n        if(r->levelLimit < level + 1)\\n        {\\n            struct LinkedInts *newLevels = malloc(sizeof(struct LinkedInts) * (level + 10));\\n            memset(newLevels, 0, sizeof(struct LinkedInts) * (level + 10));\\n            memmove(newLevels, r->levels, sizeof(struct LinkedInts) * r->levelLimit);\\n            r->levelLimit = level + 10;\\n            r->levels = newLevels;\\n        }\\n        struct LinkedIntNode *node = malloc(sizeof(struct LinkedIntNode));\\n        node->val = val;\\n        node->next = r->levels[level].head;\\n        r->levels[level].head = node;\\n        r->levels[level].count++;\\n    }\\n    \\n    void traversal(struct TreeNode* node, int curLevel, struct TreeTraversalResult *r)\\n    {\\n    \\taddTreeNode(r, node->val, curLevel);\\n    \\tif (node->left)\\n    \\t{\\n    \\t\\ttraversal(node->left, curLevel + 1, r);\\n    \\t}\\n    \\tif (node->right)\\n    \\t{\\n    \\t\\ttraversal(node->right, curLevel + 1, r);\\n    \\t}\\n    }\\n    int** levelOrderBottom(struct TreeNode* root, int** columnSizes, int* returnSize) {\\n        if(root == NULL) return NULL;\\n        struct TreeTraversalResult result;\\n        initTreeResult(&result, 200);\\n        traversal(root, 0, &result);\\n        int i;\\n        for(i = 0; i < result.levelLimit; ++i)\\n        {\\n            if(result.levels[i].count == 0) break;\\n        }\\n        int **resultArray = malloc(sizeof(int *) * i);\\n        *columnSizes = malloc(sizeof(int) * i);\\n        *returnSize = i;\\n        int tmp;\\n        for(int j = i - 1, n = 0; j >= 0; --j, ++n)\\n        {\\n            (*columnSizes)[n] = tmp = result.levels[j].count;\\n            resultArray[n] = malloc(sizeof(int) * tmp);\\n            struct LinkedIntNode *node = result.levels[j].head;\\n            for(int k = tmp - 1; k >= 0; k--)\\n            {\\n                *(resultArray[n]+k) = node->val;\\n                node = node->next;\\n            }\\n        }\\n        return resultArray;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1387102,
                "title": "easy-c-bfs-stack-queue-0ms-100-faster",
                "content": "#### C++\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> answer;\\n        \\n        queue<TreeNode*> q;\\n        if(root==NULL)\\n            return answer;\\n        \\n        q.push(root);\\n        \\n        stack<vector<int>>s;\\n                \\n        while(!q.empty())\\n        {\\n            vector<int>ans;\\n            int len=q.size();\\n            \\n            while(len--)\\n            {\\n                TreeNode* temp=q.front();\\n                q.pop();\\n                ans.push_back(temp->val);\\n                \\n                if(temp->left)\\n                    q.push(temp->left);\\n                if(temp->right)\\n                    q.push(temp->right);                \\n            }\\n            s.push(ans);\\n        }\\n        \\n        while(!s.empty())\\n        {\\n            answer.push_back(s.top());\\n            s.pop();\\n        }\\n        \\n        return answer;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Stack",
                    "Breadth-First Search",
                    "Queue"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> answer;\\n        \\n        queue<TreeNode*> q;\\n        if(root==NULL)\\n            return answer;\\n        \\n        q.push(root);\\n        \\n        stack<vector<int>>s;\\n                \\n        while(!q.empty())\\n        {\\n            vector<int>ans;\\n            int len=q.size();\\n            \\n            while(len--)\\n            {\\n                TreeNode* temp=q.front();\\n                q.pop();\\n                ans.push_back(temp->val);\\n                \\n                if(temp->left)\\n                    q.push(temp->left);\\n                if(temp->right)\\n                    q.push(temp->right);                \\n            }\\n            s.push(ans);\\n        }\\n        \\n        while(!s.empty())\\n        {\\n            answer.push_back(s.top());\\n            s.pop();\\n        }\\n        \\n        return answer;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35162,
                "title": "19-line-c-8ms-solution-very-easy",
                "content": "    class Solution {\\n    protected:\\n        vector<vector<int>> ans;\\n        void dfs(TreeNode *root, int height){\\n            if (root == NULL) \\n                return;\\n            while (ans.size() <= height)\\n                ans.push_back(vector<int>());\\n            ans[height].push_back(root->val);\\n            dfs(root->left, height + 1);\\n            dfs(root->right, height + 1);\\n        }\\n\\n    public:\\n        vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n           dfs(root, 0);\\n           reverse(ans.begin(), ans.end());\\n            return ans;    \\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    protected:\\n        vector<vector<int>> ans;\\n        void dfs(TreeNode *root, int height){\\n            if (root == NULL) \\n                return;\\n            while (ans.size() <= height)\\n                ans.push_back(vector<int>());\\n            ans[height].push_back(root->val);\\n            dfs(root->left, height + 1);\\n            dfs(root->right, height + 1);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 35022,
                "title": "short-python-solution",
                "content": "    # Definition for a binary tree node.\\n    # class TreeNode(object):\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.left = None\\n    #         self.right = None\\n    \\n    class Solution(object):\\n        def levelOrderBottom(self, root):\\n            \"\"\"\\n            :type root: TreeNode\\n            :rtype: List[List[int]]\\n            \"\"\"\\n            answ, L = [], [root]\\n            while L and root:\\n                answ.insert(0,[n.val for n in L])\\n                L = [ C for N in L for C in (N.left,N.right) if C ]\\n            return answ",
                "solutionTags": [],
                "code": "    # Definition for a binary tree node.\\n    # class TreeNode(object):\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.left = None\\n    #         self.right = None\\n    \\n    class Solution(object):\\n        def levelOrderBottom(self, root):\\n            \"\"\"\\n            :type root: TreeNode\\n            :rtype: List[List[int]]\\n            \"\"\"\\n            answ, L = [], [root]\\n            while L and root:\\n                answ.insert(0,[n.val for n in L])\\n                L = [ C for N in L for C in (N.left,N.right) if C ]\\n            return answ",
                "codeTag": "Java"
            },
            {
                "id": 3197524,
                "title": "c-bfs-dfs-all-versions-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimple level order traversal but reversed .\\nWe can just reverse the vector in which our level order is stored or push in reversed order in the vector itself.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(h)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n**BFS APProach by reversing vector**\\n```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>>ans;\\n         if(!root)return ans;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n           int sz=q.size();\\n           vector<int>v;\\n           while(sz--){\\n               TreeNode * f=q.front();\\n               v.push_back(q.front()->val);\\n               q.pop();\\n               if(f->left)q.push(f->left);\\n               if(f->right)q.push(f->right);\\n\\n           }\\n           ans.push_back(v);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n```\\n**BFS Without Reversing Vector**\\n```\\nint Height(TreeNode*root){\\n      if(!root)return 0;\\n      return 1+max(Height(root->left),Height(root->right));\\n  }\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        int d=Height(root);\\n        vector<vector<int>>ans(d);\\n        d--;\\n        if(!root)return ans;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n           int sz=q.size();\\n           vector<int>v;\\n           while(sz--){\\n               TreeNode * f=q.front();\\n               v.push_back(q.front()->val);\\n               q.pop();\\n               if(f->left)q.push(f->left);\\n               if(f->right)q.push(f->right);\\n\\n           }\\n           ans[d--]=v;\\n        }\\n        return ans;\\n    }\\n```\\n**DFS Approach**\\n```\\nclass Solution {\\npublic:\\n  int Height(TreeNode*root){\\n      if(!root)return 0;\\n      return 1+max(Height(root->left),Height(root->right));\\n  }\\n  void dfs(TreeNode * root ,vector<vector<int>>&ans,int d){\\n      if(!root)return;\\n      ans[d].push_back(root->val);\\n      dfs(root->left,ans,d-1);\\n      dfs(root->right,ans,d-1);\\n  }\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        int d=Height(root);\\n        vector<vector<int>>ans(d);\\n        d--;\\n         if(!root)return ans;\\n         dfs(root,ans,d);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>>ans;\\n         if(!root)return ans;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n           int sz=q.size();\\n           vector<int>v;\\n           while(sz--){\\n               TreeNode * f=q.front();\\n               v.push_back(q.front()->val);\\n               q.pop();\\n               if(f->left)q.push(f->left);\\n               if(f->right)q.push(f->right);\\n\\n           }\\n           ans.push_back(v);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n```\n```\\nint Height(TreeNode*root){\\n      if(!root)return 0;\\n      return 1+max(Height(root->left),Height(root->right));\\n  }\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        int d=Height(root);\\n        vector<vector<int>>ans(d);\\n        d--;\\n        if(!root)return ans;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n           int sz=q.size();\\n           vector<int>v;\\n           while(sz--){\\n               TreeNode * f=q.front();\\n               v.push_back(q.front()->val);\\n               q.pop();\\n               if(f->left)q.push(f->left);\\n               if(f->right)q.push(f->right);\\n\\n           }\\n           ans[d--]=v;\\n        }\\n        return ans;\\n    }\\n```\n```\\nclass Solution {\\npublic:\\n  int Height(TreeNode*root){\\n      if(!root)return 0;\\n      return 1+max(Height(root->left),Height(root->right));\\n  }\\n  void dfs(TreeNode * root ,vector<vector<int>>&ans,int d){\\n      if(!root)return;\\n      ans[d].push_back(root->val);\\n      dfs(root->left,ans,d-1);\\n      dfs(root->right,ans,d-1);\\n  }\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        int d=Height(root);\\n        vector<vector<int>>ans(d);\\n        d--;\\n         if(!root)return ans;\\n         dfs(root,ans,d);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1928037,
                "title": "100-fastest-swift-solution-time-o-n-space-o-n",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the number of nodes.\\n    //   - space: O(n), where n is the number of nodes.\\n    \\n    func levelOrderBottom(_ root: TreeNode?) -> [[Int]] {\\n        guard let root = root else { return [] }\\n\\n        var ans = [[Int]]()\\n        var queue = [TreeNode]()\\n        queue.append(root)\\n\\n        while !queue.isEmpty {\\n            var level = [Int]()\\n            for _ in 0..<queue.count {\\n                let node = queue.removeFirst()\\n                level.append(node.val)\\n                if let left = node.left { queue.append(left) }\\n                if let right = node.right { queue.append(right) }\\n            }\\n            ans.insert(level, at: 0)\\n        }\\n\\n        return ans\\n    }\\n\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the number of nodes.\\n    //   - space: O(n), where n is the number of nodes.\\n    \\n    func levelOrderBottom(_ root: TreeNode?) -> [[Int]] {\\n        guard let root = root else { return [] }\\n\\n        var ans = [[Int]]()\\n        var queue = [TreeNode]()\\n        queue.append(root)\\n\\n        while !queue.isEmpty {\\n            var level = [Int]()\\n            for _ in 0..<queue.count {\\n                let node = queue.removeFirst()\\n                level.append(node.val)\\n                if let left = node.left { queue.append(left) }\\n                if let right = node.right { queue.append(right) }\\n            }\\n            ans.insert(level, at: 0)\\n        }\\n\\n        return ans\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1219348,
                "title": "c-clean-short-recursive-and-iterative-solutions-no-reverse-with-without-queue",
                "content": "\\n**First Solution - Recursive, No Queue**\\n```\\nclass Solution {\\npublic:\\n    void rec(TreeNode* root, int level) {\\n        if (!root) return;\\n        res[depth - level - 1].push_back(root->val);\\n        rec(root->left, level+1);\\n        rec(root->right, level+1);\\n    }\\n    \\n    int getDepth(TreeNode* root) {\\n        if (!root) return 0;\\n        return max(getDepth(root->left), getDepth(root->right)) + 1;\\n    }\\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        depth = getDepth(root);\\n        res.assign(depth, {});\\n        rec(root, 0);\\n        return res;\\n    }\\n    \\nprivate:\\n    vector<vector<int>> res;\\n    int depth;\\n};\\n```\\n****\\n**Second Solution - Iterative, Using Queue**\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if (!root) return {};\\n        queue<TreeNode*> q;\\n        vector<vector<int>> res;\\n        vector<int> temp;\\n        int size, i;\\n        TreeNode* curr;\\n        \\n        q.push(root);\\n        \\n        while (!q.empty()) {\\n            temp = {};\\n            size = q.size();\\n            \\n            for (i = 0; i < size; i++) {\\n                \\n                curr = q.front();\\n                q.pop();\\n                \\n                if (curr->left) q.push(curr->left);\\n                if (curr->right) q.push(curr->right);\\n                \\n                temp.push_back(curr->val);\\n            }\\n            \\n            res.insert(res.begin(), temp);\\n        }\\n        \\n        return res;\\n    }\\n};\\n```\\n\\n**Like it? please upvote!\\nHave any comments? I\\'d love to hear!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void rec(TreeNode* root, int level) {\\n        if (!root) return;\\n        res[depth - level - 1].push_back(root->val);\\n        rec(root->left, level+1);\\n        rec(root->right, level+1);\\n    }\\n    \\n    int getDepth(TreeNode* root) {\\n        if (!root) return 0;\\n        return max(getDepth(root->left), getDepth(root->right)) + 1;\\n    }\\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        depth = getDepth(root);\\n        res.assign(depth, {});\\n        rec(root, 0);\\n        return res;\\n    }\\n    \\nprivate:\\n    vector<vector<int>> res;\\n    int depth;\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if (!root) return {};\\n        queue<TreeNode*> q;\\n        vector<vector<int>> res;\\n        vector<int> temp;\\n        int size, i;\\n        TreeNode* curr;\\n        \\n        q.push(root);\\n        \\n        while (!q.empty()) {\\n            temp = {};\\n            size = q.size();\\n            \\n            for (i = 0; i < size; i++) {\\n                \\n                curr = q.front();\\n                q.pop();\\n                \\n                if (curr->left) q.push(curr->left);\\n                if (curr->right) q.push(curr->right);\\n                \\n                temp.push_back(curr->val);\\n            }\\n            \\n            res.insert(res.begin(), temp);\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 715879,
                "title": "c-dfs-easy-with-detailed-explanation",
                "content": "We can use DFS and an array to store the elements with index corresponding to the levels\\n\\n```\\n    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7\\n```\\nFor the tree given above we will perform DFS and we will use an array (ans) where ans[0] = [3] the root, ans[1] = [9,20] , ans[2] = [15,7]. The end result will look like this: ans = [[3],[9,20],[15,7]]. We will reverse the array and return the result. How will we do this? -> Explanation in code.\\n\\n```\\nclass Solution {\\npublic:\\n\\n    // Dfs will have the current node, the current level and the current state of ans array\\n    void dfs(TreeNode* root,int level,vector<vector<int>>& ans){\\n        if(!root) return; // If the node is NULL return\\n        if(level == ans.size()) ans.push_back({});  // if index = level of array is ot present, create empty array at that index\\n        ans[level].push_back(root->val);  // insert the value at index = level\\n        dfs(root->left,level+1,ans);  // Perform dfs on left sub tree increase level by 1\\n        dfs(root->right,level+1,ans);  // Perform dfs on right sub tree increase level by 1\\n    }\\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(!root) return {};  // Return if null\\n        vector<vector<int>>ans;  // We store our ans in this array\\n        dfs(root,0,ans);  // Perform dfs and fill ans array, initial level is 0\\n        reverse(ans.begin(),ans.end()); // reverse array\\n        return ans;\\n    }\\n};\\n```\\n```\\nHow this will take place->\\nans = []\\ndfs(3,0,[])-> ans[0].push_back(3)\\ndfs(9,1,[[3]]) ->ans[1].push_back(9)\\ndfs(20,1,[[3],[9]])\\ndfs(15,2,[[3],[9,20]])\\ndfs(7,2,[[3],[9,20],[15]])->ans[2].push_back(7)\\nans = [[3],[9,20],[15,7]]\\nreverse(ans) => [[15,7],[9,20],[3]]\\n```\\nHope this helps. Thank you!",
                "solutionTags": [],
                "code": "```\\n    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7\\n```\n```\\nclass Solution {\\npublic:\\n\\n    // Dfs will have the current node, the current level and the current state of ans array\\n    void dfs(TreeNode* root,int level,vector<vector<int>>& ans){\\n        if(!root) return; // If the node is NULL return\\n        if(level == ans.size()) ans.push_back({});  // if index = level of array is ot present, create empty array at that index\\n        ans[level].push_back(root->val);  // insert the value at index = level\\n        dfs(root->left,level+1,ans);  // Perform dfs on left sub tree increase level by 1\\n        dfs(root->right,level+1,ans);  // Perform dfs on right sub tree increase level by 1\\n    }\\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(!root) return {};  // Return if null\\n        vector<vector<int>>ans;  // We store our ans in this array\\n        dfs(root,0,ans);  // Perform dfs and fill ans array, initial level is 0\\n        reverse(ans.begin(),ans.end()); // reverse array\\n        return ans;\\n    }\\n};\\n```\n```\\nHow this will take place->\\nans = []\\ndfs(3,0,[])-> ans[0].push_back(3)\\ndfs(9,1,[[3]]) ->ans[1].push_back(9)\\ndfs(20,1,[[3],[9]])\\ndfs(15,2,[[3],[9,20]])\\ndfs(7,2,[[3],[9,20],[15]])->ans[2].push_back(7)\\nans = [[3],[9,20],[15,7]]\\nreverse(ans) => [[15,7],[9,20],[3]]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 180360,
                "title": "javascript",
                "content": "```\nvar levelOrderBottom = function(root) {\n    if (root === null) { return []; }\n    let result = [];\n    let queue = [root];\n    while(queue.length > 0) {\n        let size = queue.length;\n        let current = [];\n        for (let i = 0; i < size; i++) {\n            let head = queue.shift();\n            current.push(head.val);\n            if(head.left !== null) { queue.push(head.left); }\n            if(head.right !== null) { queue.push(head.right); }\n        }\n        result.unshift(current);\n    }\n    return result;\n};\n```",
                "solutionTags": [],
                "code": "```\nvar levelOrderBottom = function(root) {\n    if (root === null) { return []; }\n    let result = [];\n    let queue = [root];\n    while(queue.length > 0) {\n        let size = queue.length;\n        let current = [];\n        for (let i = 0; i < size; i++) {\n            let head = queue.shift();\n            current.push(head.val);\n            if(head.left !== null) { queue.push(head.left); }\n            if(head.right !== null) { queue.push(head.right); }\n        }\n        result.unshift(current);\n    }\n    return result;\n};\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 35150,
                "title": "java-solution-change-only-one-line-from-binary-tree-level-order-traversal-i",
                "content": "The following is my AC solution Binary Tree Level Order Traversal II (II). It is only one difference from Binary Tree Level Order Traversal I (I). Note that for II, we do result.add(0, level), so every time the level is added at the beginning (index 0). For I, we only change this line to result.add(level). Simple!\\n\\n    public class Solution {\\n        public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n            List result = new ArrayList();\\n            if (root == null) {\\n                return result;\\n            }\\n            Queue<TreeNode> queue = new LinkedList<TreeNode>();\\n            queue.offer(root);\\n            \\n            while (!queue.isEmpty()) {\\n                ArrayList<Integer> level = new ArrayList();\\n                int size = queue.size();\\n                for (int i = 0; i < size; i++) {\\n                    TreeNode head = queue.poll();\\n                    level.add(head.val);\\n                    if (head.left != null) {\\n                      queue.offer(head.left);\\n                    }\\n                    if (head.right != null) {\\n                        queue.offer(head.right);\\n                    }\\n                }\\n                result.add(0, level);\\n            }\\n            \\n            return result;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n            List result = new ArrayList();\\n            if (root == null) {\\n                return result;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 715997,
                "title": "bfs-basic-beginner-friendly-using-single-queue-in-bfs",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        if(!root)       // corner case\\n            return {};\\n        \\n        vector<vector<int>> ans;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        \\n        while(q.size())\\n        {\\n            int size = q.size();\\n            vector<int> level;\\n            while(size--)          // traverse to all nodes in this level before moving to next level\\n            {\\n                TreeNode *curr = q.front() ;    q.pop();\\n                level.push_back(curr->val);\\n                \\n                if(curr->left)\\n                    q.push(curr->left);\\n                if(curr->right)\\n                    q.push(curr->right);\\n            }\\n            ans.push_back(level);\\n        }\\n        reverse(ans.begin() , ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        if(!root)       // corner case\\n            return {};\\n        \\n        vector<vector<int>> ans;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        \\n        while(q.size())\\n        {\\n            int size = q.size();\\n            vector<int> level;\\n            while(size--)          // traverse to all nodes in this level before moving to next level\\n            {\\n                TreeNode *curr = q.front() ;    q.pop();\\n                level.push_back(curr->val);\\n                \\n                if(curr->left)\\n                    q.push(curr->left);\\n                if(curr->right)\\n                    q.push(curr->right);\\n            }\\n            ans.push_back(level);\\n        }\\n        reverse(ans.begin() , ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 473719,
                "title": "python-deque-bfs-28ms",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nfrom collections import deque\\n\\n\\nclass Solution:\\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        if not root:\\n            return []\\n        queue = deque()\\n        queue.append(root)\\n        output = []\\n\\n        while queue:\\n            nodes_in_curr_level = []\\n            length = len(queue)\\n            \\n            for _ in range(length):\\n                curr_node = queue.popleft()\\n                nodes_in_curr_level.append(curr_node.val)\\n                \\n                if curr_node.left:\\n                    queue.append(curr_node.left)\\n                \\n                if curr_node.right:\\n                    queue.append(curr_node.right)\\n            \\n            output.append(nodes_in_curr_level)\\n        \\n        return reversed(output)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Breadth-First Search"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nfrom collections import deque\\n\\n\\nclass Solution:\\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        if not root:\\n            return []\\n        queue = deque()\\n        queue.append(root)\\n        output = []\\n\\n        while queue:\\n            nodes_in_curr_level = []\\n            length = len(queue)\\n            \\n            for _ in range(length):\\n                curr_node = queue.popleft()\\n                nodes_in_curr_level.append(curr_node.val)\\n                \\n                if curr_node.left:\\n                    queue.append(curr_node.left)\\n                \\n                if curr_node.right:\\n                    queue.append(curr_node.right)\\n            \\n            output.append(nodes_in_curr_level)\\n        \\n        return reversed(output)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35064,
                "title": "python-solution-using-queue",
                "content": "'''\\nclass Solution(object):\\n\\n        if not root:\\n        \\treturn []\\n\\n        from collections import deque\\n\\n        result = deque()\\n        queue = deque([root])\\n        while(queue):\\n        \\tlevel=[]\\n        \\tfor i in range(len(queue)):\\n        \\t\\tfront=queue.popleft()\\n        \\t\\tlevel.append(front.val)\\n        \\t\\tif front.left:\\n        \\t\\t\\tqueue.append(front.left)\\n        \\t\\tif front.right:\\n        \\t\\t\\tqueue.append(front.right)\\n        \\tresult.appendleft(level)\\n        return list(result)\\n'''",
                "solutionTags": [],
                "code": "'''\\nclass Solution(object):\\n\\n        if not root:\\n        \\treturn []\\n\\n        from collections import deque\\n\\n        result = deque()\\n        queue = deque([root])\\n        while(queue):\\n        \\tlevel=[]\\n        \\tfor i in range(len(queue)):\\n        \\t\\tfront=queue.popleft()\\n        \\t\\tlevel.append(front.val)\\n        \\t\\tif front.left:\\n        \\t\\t\\tqueue.append(front.left)\\n        \\t\\tif front.right:\\n        \\t\\t\\tqueue.append(front.right)\\n        \\tresult.appendleft(level)\\n        return list(result)\\n'''",
                "codeTag": "Java"
            },
            {
                "id": 35071,
                "title": "easy-understanding-beat-96",
                "content": "\\npublic class Solution {\\n\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> result = new ArrayList<>();\\n        travelTree(0, root, result);\\n        List<List<Integer>> reverseRst = new ArrayList<>();\\n        for (int i = 0; i < result.size(); i++) {\\n            reverseRst.add(result.get(result.size() - i - 1));\\n        }\\n        return reverseRst;\\n    }\\n\\n    private void travelTree(int level, TreeNode root, List<List<Integer>> result) {\\n        if (root == null) return;\\n        if (result.size() <= level) result.add(new ArrayList<>());\\n        result.get(level).add(root.val);\\n        travelTree(level + 1, root.left, result);\\n        travelTree(level + 1, root.right, result);\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "class Solution {\\n\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> result = new ArrayList<>();\\n        travelTree(0, root, result);\\n        List<List<Integer>> reverseRst = new ArrayList<>();\\n        for (int i = 0; i < result.size(); i++) {\\n            reverseRst.add(result.get(result.size() - i - 1));\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 35085,
                "title": "java-bfs-and-dfs-solutions",
                "content": "        \\n    // bfs\\n    public List<List<Integer>> levelOrderBottom1(TreeNode root) {\\n        List<List<Integer>> ret = new LinkedList<>();\\n        Queue<TreeNode> queue = new LinkedList<>();\\n        queue.add(root);\\n        while (!queue.isEmpty()) {\\n            int l = queue.size();\\n            List<Integer> level = new ArrayList<>();\\n            for (int i = 0; i < l; i++) {\\n                TreeNode node = queue.poll();\\n                if (node != null) {\\n                    level.add(node.val);\\n                    queue.add(node.left);\\n                    queue.add(node.right);\\n                }\\n            }\\n            if (!level.isEmpty()) {\\n                ret.add(0, level);   \\n            }\\n        }\\n        return ret;\\n     }\\n     \\n     // dfs recursively\\n     public List<List<Integer>> levelOrderBottom2(TreeNode root) {\\n         List<List<Integer>> ret = new ArrayList<>();\\n         helper(root, 0, ret);\\n         Collections.reverse(ret);\\n         return ret;\\n     }\\n     \\n     private void helper(TreeNode root, int level, List<List<Integer>> ret) {\\n         if (root != null) {\\n             if (level == ret.size()) {\\n                 ret.add(new ArrayList<>());\\n             }\\n             ret.get(level).add(root.val);\\n             helper(root.left, level+1, ret);\\n             helper(root.right, level+1, ret);\\n         }\\n     }\\n     \\n     // dfs iteratively\\n     // import javafx.util.Pair;\\n     public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n         List<List<Integer>> ret = new ArrayList<>();\\n         Stack<Pair<TreeNode, Integer>> stack = new Stack<>();\\n         stack.push(new Pair(root, 0));\\n         while (!stack.isEmpty()) {\\n             Pair<TreeNode, Integer> p = stack.pop();\\n             TreeNode node = p.getKey();\\n             int level = p.getValue();\\n             if (node != null) {\\n                 if (level == ret.size()) {\\n                     ret.add(new ArrayList());\\n                 }\\n                 ret.get(level).add(node.val);\\n                 stack.push(new Pair(node.right, level+1));\\n                 stack.push(new Pair(node.left, level+1));\\n             }\\n         }\\n         Collections.reverse(ret);\\n         return ret;\\n     }",
                "solutionTags": [
                    "Java",
                    "Depth-First Search",
                    "Breadth-First Search"
                ],
                "code": "        \\n    // bfs\\n    public List<List<Integer>> levelOrderBottom1(TreeNode root) {\\n        List<List<Integer>> ret = new LinkedList<>();\\n        Queue<TreeNode> queue = new LinkedList<>();\\n        queue.add(root);\\n        while (!queue.isEmpty()) {\\n            int l = queue.size();\\n            List<Integer> level = new ArrayList<>();\\n            for (int i = 0; i < l; i++) {\\n                TreeNode node = queue.poll();\\n                if (node != null) {\\n                    level.add(node.val);\\n                    queue.add(node.left);\\n                    queue.add(node.right);\\n                }\\n            }\\n            if (!level.isEmpty()) {\\n                ret.add(0, level);   \\n            }\\n        }\\n        return ret;\\n     }\\n     \\n     // dfs recursively\\n     public List<List<Integer>> levelOrderBottom2(TreeNode root) {\\n         List<List<Integer>> ret = new ArrayList<>();\\n         helper(root, 0, ret);\\n         Collections.reverse(ret);\\n         return ret;\\n     }\\n     \\n     private void helper(TreeNode root, int level, List<List<Integer>> ret) {\\n         if (root != null) {\\n             if (level == ret.size()) {\\n                 ret.add(new ArrayList<>());\\n             }\\n             ret.get(level).add(root.val);\\n             helper(root.left, level+1, ret);\\n             helper(root.right, level+1, ret);\\n         }\\n     }\\n     \\n     // dfs iteratively\\n     // import javafx.util.Pair;\\n     public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n         List<List<Integer>> ret = new ArrayList<>();\\n         Stack<Pair<TreeNode, Integer>> stack = new Stack<>();\\n         stack.push(new Pair(root, 0));\\n         while (!stack.isEmpty()) {\\n             Pair<TreeNode, Integer> p = stack.pop();\\n             TreeNode node = p.getKey();\\n             int level = p.getValue();\\n             if (node != null) {\\n                 if (level == ret.size()) {\\n                     ret.add(new ArrayList());\\n                 }\\n                 ret.get(level).add(node.val);\\n                 stack.push(new Pair(node.right, level+1));\\n                 stack.push(new Pair(node.left, level+1));\\n             }\\n         }\\n         Collections.reverse(ret);\\n         return ret;\\n     }",
                "codeTag": "Python3"
            },
            {
                "id": 35166,
                "title": "python-super-iterative-simple-solution-68ms",
                "content": "    class Solution:\\n        # @param {TreeNode} root\\n        # @return {integer[][]}\\n        def levelOrderBottom(self, root):\\n            if root is None: return []\\n            levels = [[root]]\\n            results = []\\n            \\n            while levels:\\n                level = levels.pop()\\n                \\n                result_row = [node.val for node in level]\\n                results.insert(0, result_row)\\n                \\n                next_level = []\\n                for node in level:\\n                    if node.left:\\n                        next_level.append(node.left)\\n                    if node.right:\\n                        next_level.append(node.right)\\n    \\n                if len(next_level) > 0:\\n                    levels.append(next_level)\\n    \\n            return results",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n        # @param {TreeNode}",
                "codeTag": "Java"
            },
            {
                "id": 1452057,
                "title": "without-reversing-the-result-c",
                "content": "The idea is same as BFS using queue level order traverse the tree . Just make a stack which will keep the rightmost node at the top of it . Rather then pushing left node first in queue we will push right node first . Then just traverse our stack and store its value in the vector. If we visits a NULL node and our vector size>0 then we know their is a change in level .So push that vector in our desired ans vector.\\n\\n\\n```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }   \\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n        while(!q.empty())\\n        {\\n            TreeNode* temp = q.front();\\n            s.push(temp);\\n            q.pop();\\n            if(temp!=NULL)\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            else if(!q.empty() && temp==NULL)\\n            {\\n                q.push(NULL);\\n            }\\n        }\\n        vector<int> levelval;\\n        while(!s.empty())\\n        {\\n           TreeNode* temp = s.top();\\n           s.pop();\\n           if(temp!=NULL)\\n           { \\n             levelval.push_back(temp->val);\\n           }\\n           else if(temp==NULL && levelval.size()>0)\\n           {\\n              ans.push_back(levelval);\\n              levelval.resize(0);\\n           }\\n         }\\n        ans.push_back(levelval);\\n        return ans;\\n}\\n```",
                "solutionTags": [
                    "Stack",
                    "Breadth-First Search",
                    "Queue"
                ],
                "code": "```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }   \\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n        while(!q.empty())\\n        {\\n            TreeNode* temp = q.front();\\n            s.push(temp);\\n            q.pop();\\n            if(temp!=NULL)\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            else if(!q.empty() && temp==NULL)\\n            {\\n                q.push(NULL);\\n            }\\n        }\\n        vector<int> levelval;\\n        while(!s.empty())\\n        {\\n           TreeNode* temp = s.top();\\n           s.pop();\\n           if(temp!=NULL)\\n           { \\n             levelval.push_back(temp->val);\\n           }\\n           else if(temp==NULL && levelval.size()>0)\\n           {\\n              ans.push_back(levelval);\\n              levelval.resize(0);\\n           }\\n         }\\n        ans.push_back(levelval);\\n        return ans;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 715904,
                "title": "understandable-bfs-solution",
                "content": "```\\ndef levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        if not root:\\n            return []\\n        answer = []\\n\\n        q = deque([root])\\n\\n        while q:\\n            new_q = deque([])\\n            cur_lvl = []\\n            for node in q:\\n                cur_lvl.append(node.val)\\n                if node.left:\\n                    new_q.append(node.left)\\n                if node.right:\\n                    new_q.append(node.right)\\n            q = new_q\\n            answer.append(cur_lvl)\\n\\n        return answer[::-1]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Breadth-First Search"
                ],
                "code": "```\\ndef levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        if not root:\\n            return []\\n        answer = []\\n\\n        q = deque([root])\\n\\n        while q:\\n            new_q = deque([])\\n            cur_lvl = []\\n            for node in q:\\n                cur_lvl.append(node.val)\\n                if node.left:\\n                    new_q.append(node.left)\\n                if node.right:\\n                    new_q.append(node.right)\\n            q = new_q\\n            answer.append(cur_lvl)\\n\\n        return answer[::-1]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 388837,
                "title": "iterative-and-recursive-level-order-traversal-solutions-in-javascript",
                "content": "## Recursive solution\\n``` javascript\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number[][]}\\n */\\nvar levelOrderBottom = function(root) {\\n  let h = height(root); /* get the height using helper fn below */\\n  let results = []; /* init an array to hold final answer */\\n  let depth = 1; /* init depth to 1 since we are using 1-based height */\\n  for (depth; depth <= h; depth++) {\\n    /* iterate from depth to tree height */\\n    results.push(levelOrder(root, depth)); /* push an array of each level\\'s node values to results */\\n  }\\n\\n  return results.reverse();\\n};\\n\\n/*\\n  recursive level-order traversal which collects all nodes\\n  from each level into an array.\\n*/\\nfunction levelOrder(node, d, level = []) {\\n  if (node == null) {\\n    return level;\\n  }\\n  if (d === 1) {\\n    level.push(node.val);\\n  } else if (d > 1) {\\n    levelOrder(node.left, d - 1, level);\\n    levelOrder(node.right, d - 1, level);\\n  }\\n  return level;\\n}\\n\\n/*\\n  computes the largest root-to-leaf path,\\n  using 1-based counting.\\n*/\\nfunction height(node) {\\n  if (node == null) {\\n    /* base case */\\n    return 0;\\n  }\\n  let left = height(node.left);\\n  let right = height(node.right);\\n\\n  return Math.max(left, right) + 1;\\n}\\n```\\n\\n## Iterative solution using a queue\\n```javascript\\nvar levelOrderBottom = function(root) {\\n  if (root == null) {\\n    return [];\\n  }\\n  let queue = [];\\n  let results = [];\\n  queue.push(root);\\n  while (queue.length > 0) {\\n    /* level-order traversal */\\n    let level = []; /* collect node.vals for current level */\\n    let size = queue.length; /* instead of using recursion, we will use a loop bounded by the queue size */\\n    while (size > 0) {\\n      let current = queue.shift(); /* remove and capture next item from queue */\\n      level.push([current.val]); /* add the current val to the current level array */\\n\\n      /* if we have a left or right subtree, explore */\\n      if (current.left != null) {\\n        queue.push(current.left);\\n      }\\n\\n      if (current.right != null) {\\n        queue.push(current.right);\\n      }\\n\\n      size--; /* level complete, decrement size and proceed */\\n    }\\n\\n    results.push(level); /* push the last level\\'s results */\\n  }\\n  return results.reverse(); /* return results, in reverse order */\\n};\\n```\\n\\nThank you for viewing and please add feedback and/or comments.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "``` javascript\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number[][]}\\n */\\nvar levelOrderBottom = function(root) {\\n  let h = height(root); /* get the height using helper fn below */\\n  let results = []; /* init an array to hold final answer */\\n  let depth = 1; /* init depth to 1 since we are using 1-based height */\\n  for (depth; depth <= h; depth++) {\\n    /* iterate from depth to tree height */\\n    results.push(levelOrder(root, depth)); /* push an array of each level\\'s node values to results */\\n  }\\n\\n  return results.reverse();\\n};\\n\\n/*\\n  recursive level-order traversal which collects all nodes\\n  from each level into an array.\\n*/\\nfunction levelOrder(node, d, level = []) {\\n  if (node == null) {\\n    return level;\\n  }\\n  if (d === 1) {\\n    level.push(node.val);\\n  } else if (d > 1) {\\n    levelOrder(node.left, d - 1, level);\\n    levelOrder(node.right, d - 1, level);\\n  }\\n  return level;\\n}\\n\\n/*\\n  computes the largest root-to-leaf path,\\n  using 1-based counting.\\n*/\\nfunction height(node) {\\n  if (node == null) {\\n    /* base case */\\n    return 0;\\n  }\\n  let left = height(node.left);\\n  let right = height(node.right);\\n\\n  return Math.max(left, right) + 1;\\n}\\n```\n```javascript\\nvar levelOrderBottom = function(root) {\\n  if (root == null) {\\n    return [];\\n  }\\n  let queue = [];\\n  let results = [];\\n  queue.push(root);\\n  while (queue.length > 0) {\\n    /* level-order traversal */\\n    let level = []; /* collect node.vals for current level */\\n    let size = queue.length; /* instead of using recursion, we will use a loop bounded by the queue size */\\n    while (size > 0) {\\n      let current = queue.shift(); /* remove and capture next item from queue */\\n      level.push([current.val]); /* add the current val to the current level array */\\n\\n      /* if we have a left or right subtree, explore */\\n      if (current.left != null) {\\n        queue.push(current.left);\\n      }\\n\\n      if (current.right != null) {\\n        queue.push(current.right);\\n      }\\n\\n      size--; /* level complete, decrement size and proceed */\\n    }\\n\\n    results.push(level); /* push the last level\\'s results */\\n  }\\n  return results.reverse(); /* return results, in reverse order */\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 35112,
                "title": "java-1ms-beats-98-using-preorder",
                "content": "     public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> list=new ArrayList();\\n        get(list,root,0);\\n        Collections.reverse(list);\\n        return list;\\n    }\\n    public void get(List<List<Integer>> list,TreeNode root,int lvl){\\n        if(root==null) return;\\n        List<Integer> lvlList;\\n        if(lvl==list.size()){\\n            lvlList=new ArrayList<Integer>();\\n            list.add(lvlList);\\n        }\\n        lvlList=list.get(lvl);\\n        lvlList.add(root.val);\\n        get(list,root.left,lvl+1);\\n        get(list,root.right,lvl+1);\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "     public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> list=new ArrayList();\\n        get(list,root,0);\\n        Collections.reverse(list);\\n        return list;\\n    }\\n    public void get(List<List<Integer>> list,TreeNode root,int lvl){\\n        if(root==null) return;\\n        List<Integer> lvlList;\\n        if(lvl==list.size()){\\n            lvlList=new ArrayList<Integer>();\\n            list.add(lvlList);\\n        }\\n        lvlList=list.get(lvl);\\n        lvlList.add(root.val);\\n        get(list,root.left,lvl+1);\\n        get(list,root.right,lvl+1);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 35006,
                "title": "java-2ms-bfs-solution",
                "content": "    public class Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<TreeNode> toUse = new ArrayList<>();\\n        List<List<Integer>> retValue = new ArrayList<>();\\n        if( root != null)\\n        {\\n        \\ttoUse.add(root);\\n        }\\n        \\n        while (toUse.size() != 0)\\n        {\\n            List<Integer> result  = new ArrayList<>();\\n            List<TreeNode> next = new ArrayList<>();\\n            for (TreeNode node : toUse)\\n            {\\n                result.add(node.val);\\n                \\n                if (node.left != null)\\n                {\\n                    next.add(node.left);\\n                }\\n                \\n                if (node.right != null)\\n                {\\n                    next.add(node.right);\\n                }\\n            }\\n            retValue.add(result);\\n            toUse = next;            \\n        }\\n        Collections.reverse(retValue);\\n        return retValue;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<TreeNode> toUse = new ArrayList<>();\\n        List<List<Integer>> retValue = new ArrayList<>();\\n        if( root != null)\\n        {\\n        \\ttoUse.add(root);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3516675,
                "title": "easiest-c-solution-msd-please-upvote",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        queue<TreeNode*> q;\\n        int c=0;\\n        vector<vector<int>>v;\\n         if(!root)\\n         return {};\\n\\n         q.push(root);\\n         \\n\\n         while(!q.empty()){\\n             vector<int>a;\\n             int size=q.size();\\n\\n             while(size--){\\n                 TreeNode* curr=q.front();\\n                 q.pop();\\n\\n                 \\n\\n                 a.push_back(curr->val);\\n                 if(curr->left)\\n                 q.push(curr->left);\\n\\n                 if(curr->right)\\n                 q.push(curr->right);\\n             }\\n             \\n             v.push_back(a);\\n\\n         }\\n         reverse(v.begin(),v.end());\\n         return v;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Tree",
                    "Breadth-First Search",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        queue<TreeNode*> q;\\n        int c=0;\\n        vector<vector<int>>v;\\n         if(!root)\\n         return {};\\n\\n         q.push(root);\\n         \\n\\n         while(!q.empty()){\\n             vector<int>a;\\n             int size=q.size();\\n\\n             while(size--){\\n                 TreeNode* curr=q.front();\\n                 q.pop();\\n\\n                 \\n\\n                 a.push_back(curr->val);\\n                 if(curr->left)\\n                 q.push(curr->left);\\n\\n                 if(curr->right)\\n                 q.push(curr->right);\\n             }\\n             \\n             v.push_back(a);\\n\\n         }\\n         reverse(v.begin(),v.end());\\n         return v;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3293648,
                "title": "superb-breadth-first-search-python3",
                "content": "\\n# BFS Approach\\n```\\nclass Solution:\\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        list1=[]\\n        q=deque()\\n        q.append(root)\\n        while q:\\n            level=[]\\n            for i in range(len(q)):\\n                poping=q.popleft()\\n                if poping:\\n                    level.append(poping.val)\\n                    q.append(poping.left)\\n                    q.append(poping.right)\\n            if level:\\n                list1.append(level)\\n        return list1[::-1]\\n    #please upvote me it would encourage me alot\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        list1=[]\\n        q=deque()\\n        q.append(root)\\n        while q:\\n            level=[]\\n            for i in range(len(q)):\\n                poping=q.popleft()\\n                if poping:\\n                    level.append(poping.val)\\n                    q.append(poping.left)\\n                    q.append(poping.right)\\n            if level:\\n                list1.append(level)\\n        return list1[::-1]\\n    #please upvote me it would encourage me alot\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 715980,
                "title": "javascript-concise-recursive-solution",
                "content": "We call `traverseNodes()` recursively for every \\'level\\' of nodes in the tree.\\n\\n```\\nvar levelOrderBottom = function(root) {\\n    return root !== null ? traverseNodes([root]) : [];\\n};\\n\\nfunction traverseNodes(nodes) {\\n    if (nodes.length === 0) return [];\\n\\n    let children = nodes.reduce((acc, cur) => {\\n        if (cur.left) acc.push(cur.left);\\n        if (cur.right) acc.push(cur.right);\\n        return acc;\\n    }, []);\\n\\n    return [...traverseNodes(children), nodes.map(({val}) => val)];\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar levelOrderBottom = function(root) {\\n    return root !== null ? traverseNodes([root]) : [];\\n};\\n\\nfunction traverseNodes(nodes) {\\n    if (nodes.length === 0) return [];\\n\\n    let children = nodes.reduce((acc, cur) => {\\n        if (cur.left) acc.push(cur.left);\\n        if (cur.right) acc.push(cur.right);\\n        return acc;\\n    }, []);\\n\\n    return [...traverseNodes(children), nodes.map(({val}) => val)];\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 715839,
                "title": "c-breadth-first-search-using-a-queue-with-detailed-explanation",
                "content": "**Upvote if this helped you**\\nThe way this solution works is as follows:\\nFirst, you push the root into your queue and then we enter the loop; the loop works in the following manner: we start by creating a new vector in which we will be storing the current level, and then based on the **initial** size of the queue (since the size of the queue will change in a second) we create a loop in which we pop the elements at the front of the queue and store them in our extra array but we need to insert the children of any element we pop back into the queue which belong to the next level. After we enter all the elements from this level (indicated by the **initial** size of the queue) we push back the whole vector into our answer array. When the queue becomes empty this means we have covered all levels of the tree and the exterior loop breaks. At this point we have the normal level order traversal (which is the answer to question 102) but since the question requires from the bottom up so we reverse our array and return it.\\n```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(root == NULL) return ans;\\n        vector<int> *extra;\\n        int n;\\n        TreeNode* cursor;\\n        queue<TreeNode*> use;        \\n        use.push(root);\\n        while(!use.empty()) {\\n            extra = new vector<int>;\\n            n = use.size();\\n            for(int i = 0; i < n; i++) {\\n                cursor = use.front();\\n                use.pop();\\n                extra->push_back(cursor->val);\\n                if(cursor->left != NULL) use.push(cursor->left);\\n                if(cursor->right != NULL) use.push(cursor->right);\\n            }\\n            ans.push_back(*extra);\\n            delete extra;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(root == NULL) return ans;\\n        vector<int> *extra;\\n        int n;\\n        TreeNode* cursor;\\n        queue<TreeNode*> use;        \\n        use.push(root);\\n        while(!use.empty()) {\\n            extra = new vector<int>;\\n            n = use.size();\\n            for(int i = 0; i < n; i++) {\\n                cursor = use.front();\\n                use.pop();\\n                extra->push_back(cursor->val);\\n                if(cursor->left != NULL) use.push(cursor->left);\\n                if(cursor->right != NULL) use.push(cursor->right);\\n            }\\n            ans.push_back(*extra);\\n            delete extra;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 521732,
                "title": "python-3-bfs-and-dfs-and-recursive-dfs-beats-97-91",
                "content": "```\\n##  use queue to implement BFS, needs to record level\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        queue = collections.deque()\\n        queue.append((root,0))\\n        res = []\\n        if not root:\\n            return res\\n        while queue:\\n            node,depth = queue.popleft()\\n            if node:\\n                if len(res) <= depth:\\n                    res.insert(0,[])\\n                \\n                res[-(depth+1)].insert(0,node.val)\\n                queue.insert(0,(node.left,depth+1))\\n                queue.insert(0,(node.right,depth+1))\\n            \\n        return res\\n## use stack to implement DFS, record depth\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        res = []\\n        stack = [(root, 0)]\\n        while len(stack) > 0:\\n            node, depth = stack.pop()\\n            if node:\\n                if len(res) <= depth:\\n                    res.insert(0, [])\\n                res[-(depth+1)].append(node.val)\\n                stack.append((node.right, depth+1))\\n                stack.append((node.left, depth+1))\\n        return res\\n## Recursive DFS\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        res = []\\n        self.dfs(root, 0, res)\\n        return res\\n\\n    def dfs(self, root, depth, res):\\n        if root:\\n            if depth >= len(res):\\n                res.insert(0, [])\\n            res[-(depth+1)].append(root.val)\\n            self.dfs(root.left, depth+1, res)\\n            self.dfs(root.right, depth+1, res)\\n\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Depth-First Search",
                    "Breadth-First Search",
                    "Recursion"
                ],
                "code": "```\\n##  use queue to implement BFS, needs to record level\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        queue = collections.deque()\\n        queue.append((root,0))\\n        res = []\\n        if not root:\\n            return res\\n        while queue:\\n            node,depth = queue.popleft()\\n            if node:\\n                if len(res) <= depth:\\n                    res.insert(0,[])\\n                \\n                res[-(depth+1)].insert(0,node.val)\\n                queue.insert(0,(node.left,depth+1))\\n                queue.insert(0,(node.right,depth+1))\\n            \\n        return res\\n## use stack to implement DFS, record depth\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        res = []\\n        stack = [(root, 0)]\\n        while len(stack) > 0:\\n            node, depth = stack.pop()\\n            if node:\\n                if len(res) <= depth:\\n                    res.insert(0, [])\\n                res[-(depth+1)].append(node.val)\\n                stack.append((node.right, depth+1))\\n                stack.append((node.left, depth+1))\\n        return res\\n## Recursive DFS\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        res = []\\n        self.dfs(root, 0, res)\\n        return res\\n\\n    def dfs(self, root, depth, res):\\n        if root:\\n            if depth >= len(res):\\n                res.insert(0, [])\\n            res[-(depth+1)].append(root.val)\\n            self.dfs(root.left, depth+1, res)\\n            self.dfs(root.right, depth+1, res)\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35141,
                "title": "my-java-implementation-using-arraylist",
                "content": "    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> list = new ArrayList<>();\\n        traverse(list, 0 , root);\\n        return list;\\n    }\\n    \\n    private void traverse(List<List<Integer>> list, int level, TreeNode node){\\n        if(node == null) return;\\n        if(list.size() - 1 < level) list.add(0, new ArrayList<Integer>());\\n        list.get(list.size() - level - 1).add(node.val);\\n        traverse(list, level + 1, node.left);\\n        traverse(list, level + 1, node.right);\\n    }",
                "solutionTags": [],
                "code": "    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> list = new ArrayList<>();\\n        traverse(list, 0 , root);\\n        return list;\\n    }\\n    \\n    private void traverse(List<List<Integer>> list, int level, TreeNode node){\\n        if(node == null) return;\\n        if(list.size() - 1 < level) list.add(0, new ArrayList<Integer>());\\n        list.get(list.size() - level - 1).add(node.val);\\n        traverse(list, level + 1, node.left);\\n        traverse(list, level + 1, node.right);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3316784,
                "title": "best-c-solution",
                "content": "# Approach\\nLevel Order Traversal\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector <vector<int>> levelorder; \\n        if (root == NULL)\\n            return levelorder;\\n        queue <TreeNode* > q;\\n        q.push(root);\\n        while (!q.empty()) {\\n            vector <int> level;\\n            int size = q.size();\\n            for (int i = 0; i < size; i++) {\\n                TreeNode* curr = q.front();\\n                q.pop();\\n                level.push_back(curr->val);\\n                if (curr->left != NULL)\\n                    q.push(curr->left);\\n                if (curr->right != NULL)\\n                    q.push(curr->right);    \\n            }\\n            levelorder.push_back(level);\\n        } \\n        reverse (levelorder.begin(), levelorder.end());\\n        return levelorder;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector <vector<int>> levelorder; \\n        if (root == NULL)\\n            return levelorder;\\n        queue <TreeNode* > q;\\n        q.push(root);\\n        while (!q.empty()) {\\n            vector <int> level;\\n            int size = q.size();\\n            for (int i = 0; i < size; i++) {\\n                TreeNode* curr = q.front();\\n                q.pop();\\n                level.push_back(curr->val);\\n                if (curr->left != NULL)\\n                    q.push(curr->left);\\n                if (curr->right != NULL)\\n                    q.push(curr->right);    \\n            }\\n            levelorder.push_back(level);\\n        } \\n        reverse (levelorder.begin(), levelorder.end());\\n        return levelorder;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2520747,
                "title": "python-bfs-easy-queue",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        \\n        res = []\\n        \\n        q = collections.deque()\\n        \\n        q.append(root)\\n        \\n        while q:\\n            \\n            qlen = len(q)\\n            \\n            level = []\\n            \\n            for i in range(qlen):\\n                node = q.popleft()\\n                \\n                if node:\\n                    \\n                    level.append(node.val)\\n                    q.append(node.left)\\n                    q.append(node.right)\\n                    \\n            if level:\\n                res.append(level)\\n                \\n        return res[::-1]        \\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        \\n        res = []\\n        \\n        q = collections.deque()\\n        \\n        q.append(root)\\n        \\n        while q:\\n            \\n            qlen = len(q)\\n            \\n            level = []\\n            \\n            for i in range(qlen):\\n                node = q.popleft()\\n                \\n                if node:\\n                    \\n                    level.append(node.val)\\n                    q.append(node.left)\\n                    q.append(node.right)\\n                    \\n            if level:\\n                res.append(level)\\n                \\n        return res[::-1]        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1536238,
                "title": "c-queue-0ms-faster-than-100-96",
                "content": "![image](https://assets.leetcode.com/users/images/f83dabec-1848-4f76-9262-0dcc8b26086a_1634986345.0274377.png)\\n\\n\\n```\\nclass Solution {\\npublic:\\n    \\n    vector<vector<int>> levelOrder(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        vector<int> add;\\n        if(!root)\\n            return ans;\\n        \\n        queue<TreeNode*> mq;\\n        mq.push(root);\\n\\n        while(mq.size() > 0){\\n            int count = mq.size();\\n            for(int i = 0; i < count; i++){\\n                root = mq.front();\\n                mq.pop();\\n                add.push_back(root->val);\\n\\n                if(root->left != NULL)\\n                    mq.push(root->left);\\n\\n                if(root->right != NULL)\\n                    mq.push(root->right);\\n                }\\n                ans.push_back(add);\\n                add.clear();\\n            }\\n    \\n        return ans;\\n    }\\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans = levelOrder(root);\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```\\n\\nHope you liked it , kindly upvote !!\\n\\nHappy Coding \\uD83E\\uDD17",
                "solutionTags": [
                    "C++",
                    "C",
                    "Breadth-First Search",
                    "Queue",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    vector<vector<int>> levelOrder(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        vector<int> add;\\n        if(!root)\\n            return ans;\\n        \\n        queue<TreeNode*> mq;\\n        mq.push(root);\\n\\n        while(mq.size() > 0){\\n            int count = mq.size();\\n            for(int i = 0; i < count; i++){\\n                root = mq.front();\\n                mq.pop();\\n                add.push_back(root->val);\\n\\n                if(root->left != NULL)\\n                    mq.push(root->left);\\n\\n                if(root->right != NULL)\\n                    mq.push(root->right);\\n                }\\n                ans.push_back(add);\\n                add.clear();\\n            }\\n    \\n        return ans;\\n    }\\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans = levelOrder(root);\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1261661,
                "title": "simple-c-bfs-queue-beats-100-submissions",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>>ans;\\n        if(!root)\\n            return ans;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            int current_level_nodes=q.size();\\n            vector<int>b;\\n            for(int i=0;i<current_level_nodes;i++)\\n            {\\n                TreeNode* c=q.front();\\n                q.pop();\\n                b.push_back(c->val);\\n                \\n                if(c->left)\\n                    q.push(c->left);\\n                if(c->right)\\n                    q.push(c->right);\\n                \\n            }\\n            ans.push_back(b);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Tree",
                    "Breadth-First Search",
                    "Queue",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>>ans;\\n        if(!root)\\n            return ans;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            int current_level_nodes=q.size();\\n            vector<int>b;\\n            for(int i=0;i<current_level_nodes;i++)\\n            {\\n                TreeNode* c=q.front();\\n                q.pop();\\n                b.push_back(c->val);\\n                \\n                if(c->left)\\n                    q.push(c->left);\\n                if(c->right)\\n                    q.push(c->right);\\n                \\n            }\\n            ans.push_back(b);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 717279,
                "title": "solution-with-simple-bfs-with-c-code-0ms-beats-100",
                "content": "**Approach**\\nPerform simple BFS traversal. But to mark the end of a level, insert NULL to the queue.\\n\\n**C++ Code**\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n     vector<vector<int> > ans;\\n     vector<int> temp;\\n     queue<TreeNode*> q;\\n     if(root==NULL)\\n         return ans;\\n     q.push(root);\\n     q.push(NULL);\\n     while(!q.empty())\\n     {\\n         TreeNode* t=q.front();\\n         q.pop();\\n         if(t==NULL)\\n         {\\n             ans.push_back(temp);\\n             temp.clear();\\n             if(q.empty())\\n             {\\n                reverse(ans.begin(),ans.end());\\n                 return ans;\\n             }\\n             else\\n             {\\n                 q.push(NULL);\\n             }\\n            continue;\\n         }\\n         temp.push_back(t->val);\\n         if(t->left!=NULL)\\n             q.push(t->left);\\n         if(t->right!=NULL)\\n             q.push(t->right);\\n     }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n     vector<vector<int> > ans;\\n     vector<int> temp;\\n     queue<TreeNode*> q;\\n     if(root==NULL)\\n         return ans;\\n     q.push(root);\\n     q.push(NULL);\\n     while(!q.empty())\\n     {\\n         TreeNode* t=q.front();\\n         q.pop();\\n         if(t==NULL)\\n         {\\n             ans.push_back(temp);\\n             temp.clear();\\n             if(q.empty())\\n             {\\n                reverse(ans.begin(),ans.end());\\n                 return ans;\\n             }\\n             else\\n             {\\n                 q.push(NULL);\\n             }\\n            continue;\\n         }\\n         temp.push_back(t->val);\\n         if(t->left!=NULL)\\n             q.push(t->left);\\n         if(t->right!=NULL)\\n             q.push(t->right);\\n     }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 715890,
                "title": "no-reverse-linkedlist-bfs",
                "content": "```\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        var res = new LinkedList<List<Integer>>();\\n        if(root == null) return res;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        while(!q.isEmpty()){\\n            int size = q.size();\\n            List<Integer> level = new ArrayList<>();\\n            while(size-- > 0){\\n                TreeNode curr = q.poll();\\n                level.add(curr.val);\\n                if(curr.left !=null) q.offer(curr.left);\\n                if(curr.right !=null) q.offer(curr.right);                \\n            }\\n            res.addFirst(level);\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        var res = new LinkedList<List<Integer>>();\\n        if(root == null) return res;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        while(!q.isEmpty()){\\n            int size = q.size();\\n            List<Integer> level = new ArrayList<>();\\n            while(size-- > 0){\\n                TreeNode curr = q.poll();\\n                level.add(curr.val);\\n                if(curr.left !=null) q.offer(curr.left);\\n                if(curr.right !=null) q.offer(curr.right);                \\n            }\\n            res.addFirst(level);\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 659525,
                "title": "javascript-clean-bfs-solution-8-lines",
                "content": "```javascript\\nvar levelOrderBottom = function(root) {\\n    if(!root) return [];\\n    const result = [];\\n    const queue = [[root, 0]];\\n    \\n    while(queue.length) {\\n        const [node, gen] = queue.shift();\\n        \\n        if(!result[gen]) result[gen] = [node.val];\\n        else result[gen].push(node.val);\\n        \\n        if(node.left) queue.push([node.left, gen+1]);\\n        if(node.right) queue.push([node.right, gen+1]);\\n    }\\n    return result.reverse();\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Breadth-First Search"
                ],
                "code": "```javascript\\nvar levelOrderBottom = function(root) {\\n    if(!root) return [];\\n    const result = [];\\n    const queue = [[root, 0]];\\n    \\n    while(queue.length) {\\n        const [node, gen] = queue.shift();\\n        \\n        if(!result[gen]) result[gen] = [node.val];\\n        else result[gen].push(node.val);\\n        \\n        if(node.left) queue.push([node.left, gen+1]);\\n        if(node.right) queue.push([node.right, gen+1]);\\n    }\\n    return result.reverse();\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 518238,
                "title": "go-0ms",
                "content": "```\\nfunc levelOrderBottom(root *TreeNode) [][]int {\\n    result := [][]int{}\\n    helper([]*TreeNode{root}, &result)\\n    return result[1:]\\n}\\n\\nfunc helper(level []*TreeNode, result *[][]int) {\\n    if len(level) == 0 {\\n        return\\n    }\\n    nextLevel := []*TreeNode{}\\n    for _, v := range level {\\n        if v != nil {\\n            nextLevel = append(nextLevel, v.Left)\\n            nextLevel = append(nextLevel, v.Right)\\n        }\\n    }\\n    helper(nextLevel, result)\\n    list := []int{}\\n    for _, v := range level {\\n        if v != nil {\\n            list = append(list, v.Val)\\n        }\\n    }\\n    *result = append(*result, list)\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc levelOrderBottom(root *TreeNode) [][]int {\\n    result := [][]int{}\\n    helper([]*TreeNode{root}, &result)\\n    return result[1:]\\n}\\n\\nfunc helper(level []*TreeNode, result *[][]int) {\\n    if len(level) == 0 {\\n        return\\n    }\\n    nextLevel := []*TreeNode{}\\n    for _, v := range level {\\n        if v != nil {\\n            nextLevel = append(nextLevel, v.Left)\\n            nextLevel = append(nextLevel, v.Right)\\n        }\\n    }\\n    helper(nextLevel, result)\\n    list := []int{}\\n    for _, v := range level {\\n        if v != nil {\\n            list = append(list, v.Val)\\n        }\\n    }\\n    *result = append(*result, list)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 201266,
                "title": "",
                "content": "\\u9012\\u5F52\\u5462 \\u9700\\u8981\\u4E00\\u4E2Ahelper\\u51FD\\u6570\\uFF0C\\u51FD\\u6570\\u6709\\u4E00\\u4E2A\\u5173\\u952E\\u53C2\\u6570\\u7528\\u6765\\u8868\\u793A\\u5F53\\u524D\\u904D\\u5386\\u5230\\u4E86\\u54EA\\u4E00\\u5C42\\uFF01\\n\\u5BF9\\u4E8E\\u9012\\u5F52\\uFF0C\\u521A\\u5F00\\u59CB\\u89C9\\u5F97\\u96BE\\u4EE5\\u7406\\u89E3\\uFF0C\\u505A\\u591A\\u4E86\\u4E5F\\u5C31\\u90A3\\u4E48\\u56DE\\u4E8B\\uFF01\\u662F\\u4E0D\\uFF0C\\u8001\\u94C1\\uFF01\\n\\n\\u8BDD\\u4E0D\\u591A\\u8BF4\\uFF0C\\u4E0A\\u7801\\uFF01\\n```\\n    /**\\n     * \\u9012\\u5F52\\u89E3\\u51B3  \\u9700\\u8981\\u4E00\\u4E2A\\u5173\\u952E\\u53C2\\u6570currentLevel\\n     */\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        LinkedList<List<Integer>> resultList = new LinkedList<>();\\n\\n        levelOderBottomHelper(root, resultList, 0);\\n\\n        return resultList;\\n    }\\n\\n    public void levelOderBottomHelper(TreeNode root, LinkedList<List<Integer>> resultList, int currentLevel) {\\n        if (root==null){\\n            return;\\n        }\\n\\n        if (resultList.size() == currentLevel) { // \\u5224\\u65AD\\u5F53\\u524Dlevel\\u662F\\u5426\\u521B\\u5EFA\\u4E86\\u96C6\\u5408 \\u6BCF\\u4E00\\u5C42\\u5BF9\\u5E94\\u4E00\\u4E2A\\u96C6\\u5408\\n            // \\u6DFB\\u52A0\\u5230\\u5934\\u90E8 \\u5FC5\\u987B\\u662F\\u5934\\u90E8\\uFF0C\\u56E0\\u4E3A\\u82E5\\u662F\\u672B\\u5C3E\\uFF0C\\u5219\\u6DFB\\u52A0\\u7684\\u6570\\u636E\\u4F1A\\u9519\\u4E71\\n            resultList.addFirst(new ArrayList<>());\\n        }\\n\\n        // \\u5148\\u9012\\u5F52 \\u4ECE\\u5DE6\\u5F80\\u53F3\\n        levelOderBottomHelper(root.left,resultList,currentLevel+1);\\n        levelOderBottomHelper(root.right,resultList,currentLevel+1);\\n\\n        // \\u9012\\u5F52\\u5B8C\\u540E\\u6DFB\\u52A0\\u5F53\\u524D\\u6570\\u636E\\u5230\\u5BF9\\u5E94\\u7684\\u96C6\\u5408\\u4E2D\\uFF0C\\u4E3A\\u5565\\u8981\\u51CF\\u4E00\\u5462\\uFF0C\\u60F3\\u8C61\\u603B\\u51713\\u5C42\\uFF0CcurrentLeve=0,\\u6700\\u540E\\u7684size\\u4E3A3\\uFF0C\\u800C\\u5F53\\u524D\\u5143\\u7D20\\u5E94\\u8BE5\\u6DFB\\u52A0\\u5230\\u6700\\u540E\\u4E00\\u4E2A\\u96C6\\u5408\\u4E2D\\uFF0C\\u53733-0-1=2;\\n\\n        resultList.get(resultList.size()-currentLevel-1).add(root.val);\\n\\n    }\\n\\n```",
                "solutionTags": [],
                "code": "```\\n    /**\\n     * \\u9012\\u5F52\\u89E3\\u51B3  \\u9700\\u8981\\u4E00\\u4E2A\\u5173\\u952E\\u53C2\\u6570currentLevel\\n     */\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        LinkedList<List<Integer>> resultList = new LinkedList<>();\\n\\n        levelOderBottomHelper(root, resultList, 0);\\n\\n        return resultList;\\n    }\\n\\n    public void levelOderBottomHelper(TreeNode root, LinkedList<List<Integer>> resultList, int currentLevel) {\\n        if (root==null){\\n            return;\\n        }\\n\\n        if (resultList.size() == currentLevel) { // \\u5224\\u65AD\\u5F53\\u524Dlevel\\u662F\\u5426\\u521B\\u5EFA\\u4E86\\u96C6\\u5408 \\u6BCF\\u4E00\\u5C42\\u5BF9\\u5E94\\u4E00\\u4E2A\\u96C6\\u5408\\n            // \\u6DFB\\u52A0\\u5230\\u5934\\u90E8 \\u5FC5\\u987B\\u662F\\u5934\\u90E8\\uFF0C\\u56E0\\u4E3A\\u82E5\\u662F\\u672B\\u5C3E\\uFF0C\\u5219\\u6DFB\\u52A0\\u7684\\u6570\\u636E\\u4F1A\\u9519\\u4E71\\n            resultList.addFirst(new ArrayList<>());\\n        }\\n\\n        // \\u5148\\u9012\\u5F52 \\u4ECE\\u5DE6\\u5F80\\u53F3\\n        levelOderBottomHelper(root.left,resultList,currentLevel+1);\\n        levelOderBottomHelper(root.right,resultList,currentLevel+1);\\n\\n        // \\u9012\\u5F52\\u5B8C\\u540E\\u6DFB\\u52A0\\u5F53\\u524D\\u6570\\u636E\\u5230\\u5BF9\\u5E94\\u7684\\u96C6\\u5408\\u4E2D\\uFF0C\\u4E3A\\u5565\\u8981\\u51CF\\u4E00\\u5462\\uFF0C\\u60F3\\u8C61\\u603B\\u51713\\u5C42\\uFF0CcurrentLeve=0,\\u6700\\u540E\\u7684size\\u4E3A3\\uFF0C\\u800C\\u5F53\\u524D\\u5143\\u7D20\\u5E94\\u8BE5\\u6DFB\\u52A0\\u5230\\u6700\\u540E\\u4E00\\u4E2A\\u96C6\\u5408\\u4E2D\\uFF0C\\u53733-0-1=2;\\n\\n        resultList.get(resultList.size()-currentLevel-1).add(root.val);\\n\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 35037,
                "title": "c-recursive-level-order-then-reverse-result",
                "content": "The only way I can think to avoid the reverse before the return would be to do 1 pass to determine the height then use the height initialize the lists with empty lists.  Then begin to fill the lists whose index you can get from the level and the max height determined before the traversal.  But, this is not any better than just reversing the list at the end.  Anyhow, I went with reverse, it seemed more straightforward.  \\n```\\n    public IList<IList<int>> LevelOrderBottom(TreeNode root) \\n    {\\n        IList<IList<int>> lists = new List<IList<int>>();\\n        Level(lists, root, 0);\\n        return lists.Reverse().ToList();\\n    }\\n    \\n    public void Level(IList<IList<int>> lists, TreeNode node, int level)\\n    {\\n        if (node == null)  return;\\n        if (lists.Count == level) lists.Add(new List<int>());\\n        lists[level].Add(node.val);\\n        Level(lists, node.left, level + 1);\\n        Level(lists, node.right, level + 1);\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public IList<IList<int>> LevelOrderBottom(TreeNode root) \\n    {\\n        IList<IList<int>> lists = new List<IList<int>>();\\n        Level(lists, root, 0);\\n        return lists.Reverse().ToList();\\n    }\\n    \\n    public void Level(IList<IList<int>> lists, TreeNode node, int level)\\n    {\\n        if (node == null)  return;\\n        if (lists.Count == level) lists.Add(new List<int>());\\n        lists[level].Add(node.val);\\n        Level(lists, node.left, level + 1);\\n        Level(lists, node.right, level + 1);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 35048,
                "title": "c-solution-using-dfs-and-postfix-traversal-not-reverse",
                "content": "Compare to `Binary Tree Level Order Traversal` which was resovled using prefix traversal, this just the postfix case.\\n\\n(My solution of `Binary Tree Level Order Traversal`: https://discuss.leetcode.com/topic/59106/c-solution-using-dfs)\\n\\nBut, if want to using postfix traversal, we need to know the max depth in advance, so it seems that I have to do an extra traversal to get the max depth\\n\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *columnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\n\\nvoid traverse(struct TreeNode *root, int depth, int ***arr, int **columnSizes, int *returnSize)\\n{\\n    int     idx;\\n    \\n    if (!root) return;\\n\\n    traverse(root->left, depth + 1, arr, columnSizes, returnSize);\\n    traverse(root->right, depth + 1, arr, columnSizes, returnSize);\\n    \\n    idx = *returnSize - depth - 1;\\n    (*arr)[idx] = realloc((*arr)[idx], ((*columnSizes)[idx] + 1) * sizeof(int));\\n    (*arr)[idx][(*columnSizes)[idx]] = root->val;\\n    ++(*columnSizes)[idx];\\n}\\n\\nvoid maxdepth(struct TreeNode *root, int depth, int ***arr, int **columnSizes, int *returnSize)\\n{\\n    if (!root) return;\\n\\n    if (*returnSize < depth + 1) {\\n        *returnSize = depth + 1;\\n        \\n        /*\\n         * Should initialise the one more allocated space to NULL (or 0)\\n         */\\n        *arr = realloc(*arr, (depth + 1) * sizeof(int *));\\n        (*arr)[depth] = NULL;\\n    \\n        *columnSizes = realloc(*columnSizes, (depth + 1) * sizeof(int));\\n        (*columnSizes)[depth] = 0;\\n    }\\n    \\n    maxdepth(root->left, depth + 1, arr, columnSizes, returnSize);\\n    maxdepth(root->right, depth + 1, arr, columnSizes, returnSize);\\n}\\n\\n\\nint** levelOrderBottom(struct TreeNode* root, int** columnSizes, int* returnSize) {\\n    int **arr;\\n    \\n    arr = NULL;\\n    *returnSize = 0;\\n    maxdepth(root, 0, &arr, columnSizes, returnSize);\\n    traverse(root, 0, &arr, columnSizes, returnSize);\\n    \\n    return arr;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *columnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\n\\nvoid traverse(struct TreeNode *root, int depth, int ***arr, int **columnSizes, int *returnSize)\\n{\\n    int     idx;\\n    \\n    if (!root) return;\\n\\n    traverse(root->left, depth + 1, arr, columnSizes, returnSize);\\n    traverse(root->right, depth + 1, arr, columnSizes, returnSize);\\n    \\n    idx = *returnSize - depth - 1;\\n    (*arr)[idx] = realloc((*arr)[idx], ((*columnSizes)[idx] + 1) * sizeof(int));\\n    (*arr)[idx][(*columnSizes)[idx]] = root->val;\\n    ++(*columnSizes)[idx];\\n}\\n\\nvoid maxdepth(struct TreeNode *root, int depth, int ***arr, int **columnSizes, int *returnSize)\\n{\\n    if (!root) return;\\n\\n    if (*returnSize < depth + 1) {\\n        *returnSize = depth + 1;\\n        \\n        /*\\n         * Should initialise the one more allocated space to NULL (or 0)\\n         */\\n        *arr = realloc(*arr, (depth + 1) * sizeof(int *));\\n        (*arr)[depth] = NULL;\\n    \\n        *columnSizes = realloc(*columnSizes, (depth + 1) * sizeof(int));\\n        (*columnSizes)[depth] = 0;\\n    }\\n    \\n    maxdepth(root->left, depth + 1, arr, columnSizes, returnSize);\\n    maxdepth(root->right, depth + 1, arr, columnSizes, returnSize);\\n}\\n\\n\\nint** levelOrderBottom(struct TreeNode* root, int** columnSizes, int* returnSize) {\\n    int **arr;\\n    \\n    arr = NULL;\\n    *returnSize = 0;\\n    maxdepth(root, 0, &arr, columnSizes, returnSize);\\n    traverse(root, 0, &arr, columnSizes, returnSize);\\n    \\n    return arr;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 35066,
                "title": "my-c-code-using-one-queue-and-level-flag",
                "content": "\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> res;\\n        if(!root)\\n            return res;\\n        vector<int> vlevel;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        int level1=1,level2=0;\\n        while(!q.empty()){\\n            TreeNode* front = q.front();\\n            q.pop();\\n            vlevel.push_back(front->val);\\n            if(front->left){\\n                q.push(front->left);\\n                ++level2;\\n            }\\n            if(front->right){\\n                q.push(front->right);\\n                ++level2;\\n            }\\n            \\n            \\n            if(--level1 == 0){//one level is over\\n                res.push_back(vlevel);\\n                level1 = level2;//next level\\n                level2=0;//next next level start\\n                vlevel.clear();\\n            }\\n            \\n        }\\n        reverse(res.begin(),res.end());\\n        return res;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> res;\\n        if(!root)\\n            return res;\\n        vector<int> vlevel;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        int level1=1,level2=0;\\n        while(!q.empty()){\\n            TreeNode* front = q.front();\\n            q.pop();\\n            vlevel.push_back(front->val);\\n            if(front->left){\\n                q.push(front->left);\\n                ++level2;\\n            }\\n            if(front->right){\\n                q.push(front->right);\\n                ++level2;\\n            }\\n            \\n            \\n            if(--level1 == 0){//one level is over\\n                res.push_back(vlevel);\\n                level1 = level2;//next level\\n                level2=0;//next next level start\\n                vlevel.clear();\\n            }\\n            \\n        }\\n        reverse(res.begin(),res.end());\\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 35137,
                "title": "java-bfs-solution-together-with-stack",
                "content": "public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        \\n        List<List<Integer>> level_nodes = new ArrayList<List<Integer>>();\\n        \\n        if(root==null){\\n            return level_nodes;\\n        }\\n        \\n        Stack<List<Integer>> buffer = new Stack<List<Integer>>(); //Because we want a reversed output\\n\\n        Queue<TreeNode> nodes = new LinkedList<TreeNode>();\\n        nodes.add(root);\\n        \\n        while(nodes.size()!=0){\\n\\n            int level_length = nodes.size();\\n            List<Integer> vals = new ArrayList<Integer>();\\n\\n            while(level_length!=0){\\n                TreeNode temp = nodes.poll();\\n\\n                if(temp.left!=null)nodes.add(temp.left);\\n                if(temp.right!=null)nodes.add(temp.right);\\n\\n                vals.add(temp.val);\\n                level_length--;\\n            }\\n\\n            buffer.push(vals);\\n        }\\n        \\n        while(!buffer.empty()){\\n            level_nodes.add(buffer.pop());\\n        }\\n        \\n        return level_nodes;\\n        \\n    }",
                "solutionTags": [
                    "Java",
                    "Stack",
                    "Breadth-First Search"
                ],
                "code": "public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        \\n        List<List<Integer>> level_nodes = new ArrayList<List<Integer>>();\\n        \\n        if(root==null){\\n            return level_nodes;\\n        }\\n        \\n        Stack<List<Integer>> buffer = new Stack<List<Integer>>(); //Because we want a reversed output\\n\\n        Queue<TreeNode> nodes = new LinkedList<TreeNode>();\\n        nodes.add(root);\\n        \\n        while(nodes.size()!=0){\\n\\n            int level_length = nodes.size();\\n            List<Integer> vals = new ArrayList<Integer>();\\n\\n            while(level_length!=0){\\n                TreeNode temp = nodes.poll();\\n\\n                if(temp.left!=null)nodes.add(temp.left);\\n                if(temp.right!=null)nodes.add(temp.right);\\n\\n                vals.add(temp.val);\\n                level_length--;\\n            }\\n\\n            buffer.push(vals);\\n        }\\n        \\n        while(!buffer.empty()){\\n            level_nodes.add(buffer.pop());\\n        }\\n        \\n        return level_nodes;\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 35176,
                "title": "simple-and-small-java-solution-accepted",
                "content": "   \\n\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> result = new ArrayList<List<Integer>>();\\n        if(root == null) {\\n            return result;\\n        }\\n        LinkedList<TreeNode> q = new LinkedList<TreeNode>();\\n        q.add(root);\\n        while(!q.isEmpty()) {\\n            int size = q.size(); //get size of level first\\n            List<Integer> list = new ArrayList<Integer>();\\n            for(int i=0; i < size; i++) { \\n                TreeNode node = q.remove();\\n                list.add(node.val);\\n                if(node.left != null) {\\n                    q.add(node.left);\\n                } \\n                if(node.right != null) {\\n                    q.add(node.right);\\n                }\\n            }\\n            //inserts and reverses the list\\n            result.add(0,list);\\n        }\\n        return result;\\n    }",
                "solutionTags": [],
                "code": "   \\n\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> result = new ArrayList<List<Integer>>();\\n        if(root == null) {\\n            return result;\\n        }\\n        LinkedList<TreeNode> q = new LinkedList<TreeNode>();\\n        q.add(root);\\n        while(!q.isEmpty()) {\\n            int size = q.size(); //get size of level first\\n            List<Integer> list = new ArrayList<Integer>();\\n            for(int i=0; i < size; i++) { \\n                TreeNode node = q.remove();\\n                list.add(node.val);\\n                if(node.left != null) {\\n                    q.add(node.left);\\n                } \\n                if(node.right != null) {\\n                    q.add(node.right);\\n                }\\n            }\\n            //inserts and reverses the list\\n            result.add(0,list);\\n        }\\n        return result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3204840,
                "title": "python3-42ms-easiest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUsing BFS level order traversal we can solve this.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- traverse till last left node and then traverse till last right node.\\n- if current node is not None then add current node\\'s value to answer dictionary according to it\\'s level.\\n- now sort keys of dictionary, reverse it and take values of it.\\n- return answer.\\n\\n# Complexity\\n- Time complexity:O(H+2N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:(2N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        ans = dict()\\n        def bfs(curr = root, level = 0):\\n            nonlocal ans\\n            if curr:\\n                bfs(curr.left, level + 1)\\n                bfs(curr.right, level + 1)\\n                if level not in ans.keys():\\n                    ans[level] = [curr.val]\\n                else:\\n                    ans[level].append(curr.val)\\n            return\\n        bfs()\\n        answer = []\\n        for i in reversed(sorted(ans.keys())):\\n            answer.append(ans[i])\\n        return answer\\n                \\n```\\n# Pleaase like and comment below.\\n# (\\u3063\\uFF3E\\u25BF\\uFF3E)\\u06F6\\uD83C\\uDF78\\uD83C\\uDF1F\\uD83C\\uDF7A\\u0669(\\u02D8\\u25E1\\u02D8 )",
                "solutionTags": [
                    "Python3",
                    "Breadth-First Search",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        ans = dict()\\n        def bfs(curr = root, level = 0):\\n            nonlocal ans\\n            if curr:\\n                bfs(curr.left, level + 1)\\n                bfs(curr.right, level + 1)\\n                if level not in ans.keys():\\n                    ans[level] = [curr.val]\\n                else:\\n                    ans[level].append(curr.val)\\n            return\\n        bfs()\\n        answer = []\\n        for i in reversed(sorted(ans.keys())):\\n            answer.append(ans[i])\\n        return answer\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2250137,
                "title": "bfs-solution-using-queue-java-c",
                "content": "**Code in C++**\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> res;\\n        if(root == NULL) return res;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            int len = q.size();\\n            vector<int> temp;\\n            for(int i=0; i<len; i++){\\n                TreeNode* cur = q.front();\\n                q.pop();\\n                temp.push_back(cur->val);\\n                if(cur->left != NULL) q.push(cur->left);\\n                if(cur->right != NULL) q.push(cur->right);\\n            }\\n            res.insert(res.begin(), temp);\\n        }\\n        return res;\\n    }\\n};\\n```\\n\\n**Code in Java**\\n```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> res = new ArrayList();\\n        if(root == null) return res;\\n        Queue<TreeNode> q = new LinkedList();\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            int len = q.size();\\n            List<Integer> temp = new ArrayList();\\n            for(int i=0; i<len; i++){\\n                TreeNode cur = q.poll();\\n                temp.add(cur.val);\\n                if(cur.left != null) q.add(cur.left);\\n                if(cur.right != null) q.add(cur.right);\\n            }\\n            res.add(0, temp);\\n        }\\n        return res;\\n    }\\n}\\n```\\n\\n**Please upvote if you found the solution helpful**\\n*Feel free to ask any questions in the comment section*",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C",
                    "Breadth-First Search",
                    "Queue"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> res;\\n        if(root == NULL) return res;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            int len = q.size();\\n            vector<int> temp;\\n            for(int i=0; i<len; i++){\\n                TreeNode* cur = q.front();\\n                q.pop();\\n                temp.push_back(cur->val);\\n                if(cur->left != NULL) q.push(cur->left);\\n                if(cur->right != NULL) q.push(cur->right);\\n            }\\n            res.insert(res.begin(), temp);\\n        }\\n        return res;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> res = new ArrayList();\\n        if(root == null) return res;\\n        Queue<TreeNode> q = new LinkedList();\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            int len = q.size();\\n            List<Integer> temp = new ArrayList();\\n            for(int i=0; i<len; i++){\\n                TreeNode cur = q.poll();\\n                temp.add(cur.val);\\n                if(cur.left != null) q.add(cur.left);\\n                if(cur.right != null) q.add(cur.right);\\n            }\\n            res.add(0, temp);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1245906,
                "title": "js-solution",
                "content": "```\\nconst levelOrderBottom = (root) => {\\n  const q = [root];\\n  const res = [];\\n  if (!root) return res;\\n\\n  while (q.length) {\\n    const level = [];\\n    const size = q.length;\\n    for (let i = 0; i < size; i++) {\\n      const node = q.shift(); // dequeue\\n\\n      level.push(node.val);\\n      if (node.left) q.push(node.left);\\n      if (node.right) q.push(node.right);\\n    }\\n    res.unshift(level);\\n  }\\n\\n  return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst levelOrderBottom = (root) => {\\n  const q = [root];\\n  const res = [];\\n  if (!root) return res;\\n\\n  while (q.length) {\\n    const level = [];\\n    const size = q.length;\\n    for (let i = 0; i < size; i++) {\\n      const node = q.shift(); // dequeue\\n\\n      level.push(node.val);\\n      if (node.left) q.push(node.left);\\n      if (node.right) q.push(node.right);\\n    }\\n    res.unshift(level);\\n  }\\n\\n  return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1240854,
                "title": "my-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if (!root) return {};\\n        \\n        queue<TreeNode*> q;\\n        vector<vector<int>> out;\\n            \\n        q.push(root);  \\n        \\n        while (!q.empty()) {\\n            \\n            int sz = q.size();  \\n            vector<int> curr(sz); \\n            \\n            for (int i = 0; i < sz; i++) {\\n                \\n                TreeNode* tmp = q.front();\\n                q.pop();\\n                \\n                curr[i] = tmp->val; \\n                \\n                if (tmp->left) q.push(tmp->left);\\n                if (tmp->right) q.push(tmp->right);\\n            }\\n            out.push_back(curr); \\n        }\\n        reverse(out.begin(),out.end());\\n        return out;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Breadth-First Search",
                    "Queue"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if (!root) return {};\\n        \\n        queue<TreeNode*> q;\\n        vector<vector<int>> out;\\n            \\n        q.push(root);  \\n        \\n        while (!q.empty()) {\\n            \\n            int sz = q.size();  \\n            vector<int> curr(sz); \\n            \\n            for (int i = 0; i < sz; i++) {\\n                \\n                TreeNode* tmp = q.front();\\n                q.pop();\\n                \\n                curr[i] = tmp->val; \\n                \\n                if (tmp->left) q.push(tmp->left);\\n                if (tmp->right) q.push(tmp->right);\\n            }\\n            out.push_back(curr); \\n        }\\n        reverse(out.begin(),out.end());\\n        return out;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1059985,
                "title": "kotlin-jvm-1-6",
                "content": "I tried to solve this one, but there is compile error\\n`error: calls to static methods in Java interfaces are prohibited in JVM target 1.6. Recompile with \\'-jvm-target 1.8\\'`\\n\\nCould I set JVM version as 1.8, not 1.6?\\n\\nMy code follows:\\n```kotlin\\nmap.entries.stream().sorted(Comparator.comparingInt { entry -> entry.key })\\n                .map { entry -> entry.value.toList() }\\n                .collect(Collectors.toList())\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```kotlin\\nmap.entries.stream().sorted(Comparator.comparingInt { entry -> entry.key })\\n                .map { entry -> entry.value.toList() }\\n                .collect(Collectors.toList())\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 359962,
                "title": "python-recursive-and-iterative",
                "content": "# Recursive\\n```python\\nclass Solution:\\n    def helper(self, result, depth, node):\\n        if not node:\\n            return\\n        \\n        if len(result) < depth:\\n            result.append([])\\n            \\n        result[depth-1].append(node.val)\\n        self.helper(result, depth+1, node.left)\\n        self.helper(result, depth+1, node.right)\\n        \\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        if not root:\\n            return []\\n        \\n        result = []\\n        depth = 1\\n        self.helper(result, depth, root)\\n        result.reverse()\\n        return result\\n```\\n\\n# iterative\\n\\n```python\\nfrom collections import deque\\n\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        if not root:\\n            return []\\n        \\n        worklist, num_node_level = deque([root]), 1        \\n        level = []\\n        result = []\\n        while worklist:\\n            node = worklist.popleft()\\n            level.append(node.val)\\n            \\n            if node.left:\\n                worklist.append(node.left)\\n            if node.right:\\n                worklist.append(node.right)\\n            num_node_level -= 1\\n            \\n            if num_node_level == 0:\\n                result.append(level)\\n                level = []\\n                num_node_level = len(worklist)\\n                \\n        result.reverse()\\n        return result\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def helper(self, result, depth, node):\\n        if not node:\\n            return\\n        \\n        if len(result) < depth:\\n            result.append([])\\n            \\n        result[depth-1].append(node.val)\\n        self.helper(result, depth+1, node.left)\\n        self.helper(result, depth+1, node.right)\\n        \\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        if not root:\\n            return []\\n        \\n        result = []\\n        depth = 1\\n        self.helper(result, depth, root)\\n        result.reverse()\\n        return result\\n```\n```python\\nfrom collections import deque\\n\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        if not root:\\n            return []\\n        \\n        worklist, num_node_level = deque([root]), 1        \\n        level = []\\n        result = []\\n        while worklist:\\n            node = worklist.popleft()\\n            level.append(node.val)\\n            \\n            if node.left:\\n                worklist.append(node.left)\\n            if node.right:\\n                worklist.append(node.right)\\n            num_node_level -= 1\\n            \\n            if num_node_level == 0:\\n                result.append(level)\\n                level = []\\n                num_node_level = len(worklist)\\n                \\n        result.reverse()\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 111079,
                "title": "simple-accepted-java-solution",
                "content": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> result = new ArrayList<>();\\n        if(root == null) {\\n            return result;\\n        }\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        q.offer(null);\\n        List<Integer> list = new ArrayList<>();    \\n        while(!q.isEmpty()){\\n            TreeNode temp = q.poll();\\n            if(temp != null){\\n                list.add(temp.val);\\n                if(temp.left != null){\\n                    q.offer(temp.left);\\n                }\\n                if(temp.right != null){\\n                    q.offer(temp.right);\\n                }\\n            } else {\\n                result.add(0, list);\\n                if(!q.isEmpty()){\\n                    q.offer(null);\\n                    list = new ArrayList<>();\\n                } \\n            }\\n        }\\n        return result; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Linked List",
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> result = new ArrayList<>();\\n        if(root == null) {\\n            return result;\\n        }\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        q.offer(null);\\n        List<Integer> list = new ArrayList<>();    \\n        while(!q.isEmpty()){\\n            TreeNode temp = q.poll();\\n            if(temp != null){\\n                list.add(temp.val);\\n                if(temp.left != null){\\n                    q.offer(temp.left);\\n                }\\n                if(temp.right != null){\\n                    q.offer(temp.right);\\n                }\\n            } else {\\n                result.add(0, list);\\n                if(!q.isEmpty()){\\n                    q.offer(null);\\n                    list = new ArrayList<>();\\n                } \\n            }\\n        }\\n        return result; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35136,
                "title": "simple-iterative-python-o-n-solution",
                "content": "\\n\\n        def levelOrderBottom(self, root):\\n            if not root: return []\\n            queue, nodes = [root], []\\n            while queue:\\n                nodes.append([q.val for q in queue])\\n                queue = [q for node in queue for q in (node.left, node.right) if q]\\n            nodes.reverse()\\n            return nodes",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\n\\n        def levelOrderBottom(self, root):\\n            if not root: return []\\n            queue, nodes = [root], []\\n            while queue:\\n                nodes.append([q.val for q in queue])\\n                queue = [q for node in queue for q in (node.left, node.right) if q]\\n            nodes.reverse()\\n            return nodes",
                "codeTag": "Python3"
            },
            {
                "id": 35185,
                "title": "3-kinds-of-python-bfs-solution",
                "content": "Use a List as Queue, then do the BFS iteratively.\\n\\n   \\n    # @param root, a tree node\\n    # @return a list of lists of integers\\n    def levelOrderBottom(self, root):\\n        if root == None:\\n            return []\\n        ans = []\\n        cur = []\\n        q = [root, None]\\n        while len(q) > 0:\\n            node = q.pop(0)\\n            if node == None:\\n                if len(cur) > 0:\\n                    ans.insert(0, cur)\\n                    cur = []\\n                    q.append(None)\\n            else:\\n                cur.append(node.val)\\n                if node.left != None:\\n                    q.append(node.left)\\n                if node.right != None:\\n                    q.append(node.right)\\n        return ans\\n\\nDonot use Queue, use two Lists to keep the current level and next level, the do the BFS iteratively.\\n\\n    # @param root, a tree node\\n    # @return a list of lists of integers\\n    def levelOrderBottom(self, root):\\n        if root == None:\\n            return []\\n        ans = []\\n        cur = [root]\\n        while len(cur) > 0:\\n            vals = []\\n            next = []\\n            for x in cur:\\n                vals.append(x.val)\\n                if x.left != None:\\n                    next.append(x.left)\\n                if x.right != None:\\n                    next.append(x.right)\\n            ans.insert(0, vals)\\n            cur = next\\n        return ans\\n\\nDonot use Queue, use two Lists to keep the current level and next level, the do the BFS recursively.\\n\\n    # @param root, a tree node\\n    # @return a list of lists of integers\\n    def levelOrderBottom(self, root):\\n        if root == None:\\n            return []\\n        ans = []\\n        cur = [root]\\n        self.traverse(ans, cur)\\n        return ans\\n    \\n    \\n    def traverse(self, ans, cur):\\n        if len(cur) == 0:\\n            return\\n        \\n        next = []\\n        for x in cur:\\n            if x.left != None:\\n                next.append(x.left)\\n            if x.right != None:\\n                next.append(x.right)\\n        \\n        self.traverse(ans, next)\\n        \\n        curVal = []\\n        for x in cur:\\n            curVal.append(x.val)\\n        ans.append(curVal)",
                "solutionTags": [
                    "Python",
                    "Breadth-First Search",
                    "Recursion",
                    "Iterator"
                ],
                "code": "Use a List as Queue, then do the BFS iteratively.\\n\\n   \\n    # @param root, a tree node\\n    # @return a list of lists of integers\\n    def levelOrderBottom(self, root):\\n        if root == None:\\n            return []\\n        ans = []\\n        cur = []\\n        q = [root, None]\\n        while len(q) > 0:\\n            node = q.pop(0)\\n            if node == None:\\n                if len(cur) > 0:\\n                    ans.insert(0, cur)\\n                    cur = []\\n                    q.append(None)\\n            else:\\n                cur.append(node.val)\\n                if node.left != None:\\n                    q.append(node.left)\\n                if node.right != None:\\n                    q.append(node.right)\\n        return ans\\n\\nDonot use Queue, use two Lists to keep the current level and next level, the do the BFS iteratively.\\n\\n    # @param root, a tree node\\n    # @return a list of lists of integers\\n    def levelOrderBottom(self, root):\\n        if root == None:\\n            return []\\n        ans = []\\n        cur = [root]\\n        while len(cur) > 0:\\n            vals = []\\n            next = []\\n            for x in cur:\\n                vals.append(x.val)\\n                if x.left != None:\\n                    next.append(x.left)\\n                if x.right != None:\\n                    next.append(x.right)\\n            ans.insert(0, vals)\\n            cur = next\\n        return ans\\n\\nDonot use Queue, use two Lists to keep the current level and next level, the do the BFS recursively.\\n\\n    # @param root, a tree node\\n    # @return a list of lists of integers\\n    def levelOrderBottom(self, root):\\n        if root == None:\\n            return []\\n        ans = []\\n        cur = [root]\\n        self.traverse(ans, cur)\\n        return ans\\n    \\n    \\n    def traverse(self, ans, cur):\\n        if len(cur) == 0:\\n            return\\n        \\n        next = []\\n        for x in cur:\\n            if x.left != None:\\n                next.append(x.left)\\n            if x.right != None:\\n                next.append(x.right)\\n        \\n        self.traverse(ans, next)\\n        \\n        curVal = []\\n        for x in cur:\\n            curVal.append(x.val)\\n        ans.append(curVal)",
                "codeTag": "Python3"
            },
            {
                "id": 35214,
                "title": "wrong-answer-error",
                "content": "    public class Solution {\\n        public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {\\n            //1.bfs and add them to a stack, \\n            //but bfs from right to left, \\n            //and add mark when finish a level\\n            //2.pop stack out and add to list\\n            \\n            if(root==null) return new ArrayList<ArrayList<Integer>>();\\n            //1:\\n            Queue<TreeNode> q=new LinkedList<TreeNode>();\\n            Stack<Integer>  s=new Stack<Integer>();\\n            q.add(root);\\n            TreeNode curr;\\n            s.push(-99);//push first marker\\n            int sc=0;//stack count:number of nodes in stack of this level level\\n            int nc=1;//node count: number of nodes in this level\\n            int nlnc=0;//next level node count:number of nodes in next level\\n            while(!q.isEmpty()){\\n                curr=q.poll();\\n                if(curr.right!=null) {q.add(curr.right); nlnc++;} \\n                if(curr.left!=null)  {q.add(curr.left); nlnc++;}\\n                s.push(curr.val);\\n                sc++;\\n                if(sc==nc){//reach the end of the level\\n                    s.push(-99);//marker\\n                    sc=0;\\n                    nc=nlnc;\\n                    nlnc=0;\\n                }\\n            }\\n            s.pop();//pop the last marker\\n            //2.\\n            ArrayList<ArrayList<Integer>> res=new ArrayList<ArrayList<Integer>>();\\n            ArrayList<Integer> currL=new ArrayList<Integer>();\\n            int c;\\n            while(!s.isEmpty()){\\n                c=s.pop();\\n                if(c!=-99){\\n                    currL.add(c);\\n                }else{\\n                    res.add(currL);\\n                    currL=new ArrayList<Integer>();\\n                }\\n            }\\n            return res;\\n            \\n        }\\n    }\\nI got \"Wrong Answer \" But the answer seems the same with the expected answer.\\nIs there something wrong with my code?\\nThanks",
                "solutionTags": [],
                "code": "class Solution {\\n        public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {\\n            //1.bfs and add them to a stack, \\n            //but bfs from right to left, \\n            //and add mark when finish a level\\n            //2.pop stack out and add to list\\n            \\n            if(root==null) return new ArrayList<ArrayList<Integer>>();\\n            //1:\\n            Queue<TreeNode> q=new LinkedList<TreeNode>();\\n            Stack<Integer>  s=new Stack<Integer>();\\n            q.add(root);\\n            TreeNode curr;\\n            s.push(-99);//push first marker\\n            int sc=0;//stack count:number of nodes in stack of this level level\\n            int nc=1;//node count: number of nodes in this level\\n            int nlnc=0;//next level node count:number of nodes in next level\\n            while(!q.isEmpty()){\\n                curr=q.poll();\\n                if(curr.right!=null) {q.add(curr.right); nlnc++;}",
                "codeTag": "Java"
            },
            {
                "id": 3662773,
                "title": "beats-100-in-c-java-python3-tc-o-n-sc-o-m-medium-but-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe aims to perform a level-order traversal of a binary tree in a bottom-up manner. It means that it traverses the tree level by level, starting from the root and moving downwards. The final result is a list of lists, where each inner list represents the values of the nodes at a particular level in the tree, ordered from the bottom level to the top level.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCreate an empty list called result to store the final result.\\nIf the root of the tree is None, it means the tree is empty, so return the result (which is empty in this case).\\nCreate a queue using a deque data structure and enqueue the root node.\\nWhile the queue is not empty, perform the following steps:\\nGet the length of the queue, which represents the number of nodes at the current level.\\nCreate an empty list called level_values to store the values of the nodes at the current level.\\nIterate len_level times to process each node at the current level:\\nDequeue a node from the front of the queue.\\nAdd the value of the dequeued node to the level_values list.\\nEnqueue the left child of the dequeued node if it exists.\\nEnqueue the right child of the dequeued node if it exists.\\nAfter processing all nodes at the current level, append the level_values list to the result list.\\nThe result list now contains the level-order traversal from top to bottom. To obtain the bottom-up traversal, create an empty list called final_result.\\nIterate over the result list in reverse order and append each sublist to the final_result list.\\nFinally, return the final_result, which represents the level-order traversal in a bottom-up manner.\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this approach is O(N), where N is the number of nodes in the binary tree. This is because we visit each node once during the level-order traversal.\\n\\n- Space complexity: O(M)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(M), where M is the maximum number of nodes at any level in the binary tree. In the worst case, the queue can contain all the nodes at the deepest level of the tree, which is M. Additionally, the result and final_result lists require space to store the node values.\\n\\n# Code\\n```Java []\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> result = new ArrayList<>();\\n        if(root==null) return result;\\n        LinkedList<TreeNode>queue = new LinkedList<>();\\n        queue.add(root);\\n        while(!queue.isEmpty()){\\n            int len = queue.size();\\n            List<Integer>res = new ArrayList<>();\\n            for(int i =0; i<len; i++)\\n            {\\n                TreeNode temp = queue.poll();\\n                res.add(temp.val);\\n                if(temp.left!= null)queue.add(temp.left);\\n                if(temp.right!=null)queue.add(temp.right);\\n            }\\n            result.add(res);\\n        }\\n        List<List<Integer>> finalRes = new ArrayList<>();\\n        for(int i =result.size()-1; i>=0; i--)\\n          finalRes.add(result.get(i));\\n\\n          return finalRes;\\n    }\\n}\\n```\\n```C++ []\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> result; // Stores the final result\\n        if (root == nullptr)\\n            return result; // Empty tree, return empty result\\n        \\n        queue<TreeNode*> queue; // Queue for breadth-first traversal\\n        queue.push(root); // Add the root node to the queue\\n        \\n        while (!queue.empty()) {\\n            int len = queue.size(); // Number of nodes at the current level\\n            vector<int> res; // Stores the values of the nodes at the current level\\n            \\n            for (int i = 0; i < len; i++) {\\n                TreeNode* temp = queue.front(); // Get the first node in the queue\\n                queue.pop(); // Remove the node from the queue\\n                \\n                res.push_back(temp->val); // Add the value of the node to the current level result\\n                \\n                if (temp->left != nullptr)\\n                    queue.push(temp->left); // Add the left child to the queue\\n                \\n                if (temp->right != nullptr)\\n                    queue.push(temp->right); // Add the right child to the queue\\n            }\\n            \\n            result.push_back(res); // Add the current level result to the final result\\n        }\\n        \\n        vector<vector<int>> finalRes; // Stores the final result in bottom-up order\\n        \\n        for (int i = result.size() - 1; i >= 0; i--)\\n            finalRes.push_back(result[i]); // Add each sublist from the result in reverse order\\n        \\n        return finalRes; // Return the final result\\n    }\\n};\\n```\\n```Python3 []\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        result = []  # Stores the final result\\n        if root is None:\\n            return result  # Empty tree, return empty result\\n        \\n        queue = deque()  # Queue for breadth-first traversal\\n        queue.append(root)  # Add the root node to the queue\\n        \\n        while queue:\\n            len_level = len(queue)  # Number of nodes at the current level\\n            level_values = []  # Stores the values of the nodes at the current level\\n            \\n            for _ in range(len_level):\\n                temp = queue.popleft()  # Get the first node in the queue\\n                \\n                level_values.append(temp.val)  # Add the value of the node to the current level result\\n                \\n                if temp.left:\\n                    queue.append(temp.left)  # Add the left child to the queue\\n                \\n                if temp.right:\\n                    queue.append(temp.right)  # Add the right child to the queue\\n            \\n            result.append(level_values)  # Add the current level result to the final result\\n        \\n        final_result = []  # Stores the final result in bottom-up order\\n        \\n        for i in range(len(result) - 1, -1, -1):\\n            final_result.append(result[i])  # Add each sublist from the result in reverse order\\n        \\n        return final_result  # Return the final result\\n```\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Tree",
                    "Binary Indexed Tree"
                ],
                "code": "```Java []\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> result = new ArrayList<>();\\n        if(root==null) return result;\\n        LinkedList<TreeNode>queue = new LinkedList<>();\\n        queue.add(root);\\n        while(!queue.isEmpty()){\\n            int len = queue.size();\\n            List<Integer>res = new ArrayList<>();\\n            for(int i =0; i<len; i++)\\n            {\\n                TreeNode temp = queue.poll();\\n                res.add(temp.val);\\n                if(temp.left!= null)queue.add(temp.left);\\n                if(temp.right!=null)queue.add(temp.right);\\n            }\\n            result.add(res);\\n        }\\n        List<List<Integer>> finalRes = new ArrayList<>();\\n        for(int i =result.size()-1; i>=0; i--)\\n          finalRes.add(result.get(i));\\n\\n          return finalRes;\\n    }\\n}\\n```\n```C++ []\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> result; // Stores the final result\\n        if (root == nullptr)\\n            return result; // Empty tree, return empty result\\n        \\n        queue<TreeNode*> queue; // Queue for breadth-first traversal\\n        queue.push(root); // Add the root node to the queue\\n        \\n        while (!queue.empty()) {\\n            int len = queue.size(); // Number of nodes at the current level\\n            vector<int> res; // Stores the values of the nodes at the current level\\n            \\n            for (int i = 0; i < len; i++) {\\n                TreeNode* temp = queue.front(); // Get the first node in the queue\\n                queue.pop(); // Remove the node from the queue\\n                \\n                res.push_back(temp->val); // Add the value of the node to the current level result\\n                \\n                if (temp->left != nullptr)\\n                    queue.push(temp->left); // Add the left child to the queue\\n                \\n                if (temp->right != nullptr)\\n                    queue.push(temp->right); // Add the right child to the queue\\n            }\\n            \\n            result.push_back(res); // Add the current level result to the final result\\n        }\\n        \\n        vector<vector<int>> finalRes; // Stores the final result in bottom-up order\\n        \\n        for (int i = result.size() - 1; i >= 0; i--)\\n            finalRes.push_back(result[i]); // Add each sublist from the result in reverse order\\n        \\n        return finalRes; // Return the final result\\n    }\\n};\\n```\n```Python3 []\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        result = []  # Stores the final result\\n        if root is None:\\n            return result  # Empty tree, return empty result\\n        \\n        queue = deque()  # Queue for breadth-first traversal\\n        queue.append(root)  # Add the root node to the queue\\n        \\n        while queue:\\n            len_level = len(queue)  # Number of nodes at the current level\\n            level_values = []  # Stores the values of the nodes at the current level\\n            \\n            for _ in range(len_level):\\n                temp = queue.popleft()  # Get the first node in the queue\\n                \\n                level_values.append(temp.val)  # Add the value of the node to the current level result\\n                \\n                if temp.left:\\n                    queue.append(temp.left)  # Add the left child to the queue\\n                \\n                if temp.right:\\n                    queue.append(temp.right)  # Add the right child to the queue\\n            \\n            result.append(level_values)  # Add the current level result to the final result\\n        \\n        final_result = []  # Stores the final result in bottom-up order\\n        \\n        for i in range(len(result) - 1, -1, -1):\\n            final_result.append(result[i])  # Add each sublist from the result in reverse order\\n        \\n        return final_result  # Return the final result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3641667,
                "title": "c-bfs-no-reversing-clean-simple",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if (!root) return {};\\n\\n        int levels = getDepth(root);\\n        vector<vector<int>> result(levels);\\n        queue<TreeNode*> Q; \\n        Q.push(root);\\n        while (!Q.empty()) {\\n            size_t size = Q.size();\\n            vector<int> nodes;\\n            nodes.reserve(size);\\n            for (int i = 0; i < size; i++) {\\n                TreeNode* curr = Q.front();\\n                Q.pop();\\n                nodes.emplace_back(curr->val);\\n                if (curr->left) Q.push(curr->left);\\n                if (curr->right) Q.push(curr->right);\\n            }\\n            result[--levels] = nodes;\\n        }\\n\\n        return result;\\n    }\\n\\nprivate:\\n    int getDepth(TreeNode* root) {\\n        if (!root) return 0; \\n        return 1 + max(getDepth(root->left), getDepth(root->right));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Tree",
                    "Breadth-First Search",
                    "Recursion",
                    "Queue"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if (!root) return {};\\n\\n        int levels = getDepth(root);\\n        vector<vector<int>> result(levels);\\n        queue<TreeNode*> Q; \\n        Q.push(root);\\n        while (!Q.empty()) {\\n            size_t size = Q.size();\\n            vector<int> nodes;\\n            nodes.reserve(size);\\n            for (int i = 0; i < size; i++) {\\n                TreeNode* curr = Q.front();\\n                Q.pop();\\n                nodes.emplace_back(curr->val);\\n                if (curr->left) Q.push(curr->left);\\n                if (curr->right) Q.push(curr->right);\\n            }\\n            result[--levels] = nodes;\\n        }\\n\\n        return result;\\n    }\\n\\nprivate:\\n    int getDepth(TreeNode* root) {\\n        if (!root) return 0; \\n        return 1 + max(getDepth(root->left), getDepth(root->right));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3387105,
                "title": "java-cakewalk-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(N)\\n![Screenshot_20230205_171246.png](https://assets.leetcode.com/users/images/f7b4ca66-1fc9-4ad3-a66b-b38a10dca811_1680798564.3169498.png)\\n\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        \\n        // Initialize an empty list to hold the result\\n        List<List<Integer>> result = new ArrayList<>();\\n\\n        // If the root is null, return an empty list\\n        if (root == null) {\\n            return result;\\n        }\\n\\n        // Initialize a queue to hold the nodes in the current level\\n        Queue<TreeNode> queue = new LinkedList<>();\\n\\n        queue.add(root);\\n\\n        // Traverse the tree level by level\\n        while (!queue.isEmpty()) {\\n            \\n            // Get the number of nodes in the current level\\n            int levelSize = queue.size();\\n\\n            // Initialize a list to hold the nodes in the current level\\n            List<Integer> levelNodes = new ArrayList<>();\\n\\n            // Traverse the nodes in the current level\\n            for (int i = 0; i < levelSize; i++) {\\n                // Get the first node in the queue\\n                TreeNode node = queue.remove();\\n\\n                // Add the node\\'s value to the list of nodes in the current level\\n                levelNodes.add(node.val);\\n\\n                // Add the node\\'s children to the queue for the next level\\n                if (node.left != null) {\\n                    queue.add(node.left);\\n                }\\n                if (node.right != null) {\\n                    queue.add(node.right);\\n                }\\n            }\\n            // Add the list of nodes in the current level to the result\\n            result.add(levelNodes);\\n        }\\n        // Reverse the result list to get the bottom-up order\\n        Collections.reverse(result);\\n\\n    // Return the bottom-up level order traversal of the binary tree\\n    return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Tree",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        \\n        // Initialize an empty list to hold the result\\n        List<List<Integer>> result = new ArrayList<>();\\n\\n        // If the root is null, return an empty list\\n        if (root == null) {\\n            return result;\\n        }\\n\\n        // Initialize a queue to hold the nodes in the current level\\n        Queue<TreeNode> queue = new LinkedList<>();\\n\\n        queue.add(root);\\n\\n        // Traverse the tree level by level\\n        while (!queue.isEmpty()) {\\n            \\n            // Get the number of nodes in the current level\\n            int levelSize = queue.size();\\n\\n            // Initialize a list to hold the nodes in the current level\\n            List<Integer> levelNodes = new ArrayList<>();\\n\\n            // Traverse the nodes in the current level\\n            for (int i = 0; i < levelSize; i++) {\\n                // Get the first node in the queue\\n                TreeNode node = queue.remove();\\n\\n                // Add the node\\'s value to the list of nodes in the current level\\n                levelNodes.add(node.val);\\n\\n                // Add the node\\'s children to the queue for the next level\\n                if (node.left != null) {\\n                    queue.add(node.left);\\n                }\\n                if (node.right != null) {\\n                    queue.add(node.right);\\n                }\\n            }\\n            // Add the list of nodes in the current level to the result\\n            result.add(levelNodes);\\n        }\\n        // Reverse the result list to get the bottom-up order\\n        Collections.reverse(result);\\n\\n    // Return the bottom-up level order traversal of the binary tree\\n    return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3326237,
                "title": "java-very-easy-solution-0ms-beats100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nhere i have used basic concept of binary search and queue\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n         Queue<TreeNode> q=new LinkedList<>();\\n        List<List<Integer>> list1=new LinkedList<List<Integer>>();\\n        if(root==null){\\n            return list1;\\n        }\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            int n=q.size();\\n            List<Integer> list2=new LinkedList<>();\\n            for(int i=0;i<n;i++){\\n                TreeNode currNode=q.remove();\\n                list2.add(currNode.val);\\n                if(currNode.left!=null) q.add(currNode.left);\\n                if(currNode.right!=null) q.add(currNode.right);\\n            }\\n            list1.add(0,list2);\\n        }\\n        return list1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n         Queue<TreeNode> q=new LinkedList<>();\\n        List<List<Integer>> list1=new LinkedList<List<Integer>>();\\n        if(root==null){\\n            return list1;\\n        }\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            int n=q.size();\\n            List<Integer> list2=new LinkedList<>();\\n            for(int i=0;i<n;i++){\\n                TreeNode currNode=q.remove();\\n                list2.add(currNode.val);\\n                if(currNode.left!=null) q.add(currNode.left);\\n                if(currNode.right!=null) q.add(currNode.right);\\n            }\\n            list1.add(0,list2);\\n        }\\n        return list1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3306805,
                "title": "c-short-sweet-easy-to-understand-insert-at-begin-level-order-traversal",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root == NULL)return {};\\n        vector<vector<int>> ans;\\n        vector<int> v;\\n        int n;\\n        queue<TreeNode*> q;\\n        TreeNode* p;\\n        q.push(root);\\n        while(!q.empty()){\\n            n = q.size();\\n            v.clear();\\n            while(n--){\\n                p = q.front();\\n                q.pop();\\n                v.push_back(p->val);\\n                if(p->left){\\n                    q.push(p->left);\\n                }if(p->right){\\n                    q.push(p->right);\\n                }\\n            }\\n            ans.insert(ans.begin(),v);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Tree",
                    "Breadth-First Search",
                    "Queue",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root == NULL)return {};\\n        vector<vector<int>> ans;\\n        vector<int> v;\\n        int n;\\n        queue<TreeNode*> q;\\n        TreeNode* p;\\n        q.push(root);\\n        while(!q.empty()){\\n            n = q.size();\\n            v.clear();\\n            while(n--){\\n                p = q.front();\\n                q.pop();\\n                v.push_back(p->val);\\n                if(p->left){\\n                    q.push(p->left);\\n                }if(p->right){\\n                    q.push(p->right);\\n                }\\n            }\\n            ans.insert(ans.begin(),v);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3151783,
                "title": "short-clean-java",
                "content": "\\n```java []\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> list = new ArrayList<>();\\n        collect(root, list, 0);\\n        Collections.reverse(list);\\n        return list;\\n    }\\n    void collect(TreeNode root, List<List<Integer>> list, int height){\\n        if(root == null)    return;\\n        if(height >= list.size())    list.add(new ArrayList<>());\\n        list.get(height).add(root.val);\\n        collect(root.left,list,height+1);\\n        collect(root.right,list,height+1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> list = new ArrayList<>();\\n        collect(root, list, 0);\\n        Collections.reverse(list);\\n        return list;\\n    }\\n    void collect(TreeNode root, List<List<Integer>> list, int height){\\n        if(root == null)    return;\\n        if(height >= list.size())    list.add(new ArrayList<>());\\n        list.get(height).add(root.val);\\n        collect(root.left,list,height+1);\\n        collect(root.right,list,height+1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086106,
                "title": "simple-level-order-traversal-reversing-0ms-solution-beats-100",
                "content": "\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n     vector<vector<int>> v;\\n        queue<TreeNode*> q;\\n       q.push(root);\\n        if(root==NULL)\\n            return v;\\n        \\n        while(1){\\n            int size=q.size();\\n            \\n            if(size==0)\\n                break;\\n         vector<int> res;\\n            while(size>0){\\n                TreeNode* temp = q.front();\\n          q.pop();\\n                res.push_back(temp->val);\\n                if(temp->left != NULL)\\n                    q.push(temp->left);\\n                \\n                if(temp->right!= NULL)\\n                    q.push(temp->right);\\n                \\n                size--;\\n            }\\n       v.push_back(res);\\n        }\\n        reverse(v.begin(), v.end());\\n     return v;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Tree",
                    "Breadth-First Search",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n     vector<vector<int>> v;\\n        queue<TreeNode*> q;\\n       q.push(root);\\n        if(root==NULL)\\n            return v;\\n        \\n        while(1){\\n            int size=q.size();\\n            \\n            if(size==0)\\n                break;\\n         vector<int> res;\\n            while(size>0){\\n                TreeNode* temp = q.front();\\n          q.pop();\\n                res.push_back(temp->val);\\n                if(temp->left != NULL)\\n                    q.push(temp->left);\\n                \\n                if(temp->right!= NULL)\\n                    q.push(temp->right);\\n                \\n                size--;\\n            }\\n       v.push_back(res);\\n        }\\n        reverse(v.begin(), v.end());\\n     return v;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2759842,
                "title": "bfs-and-dfs-very-easy-solution",
                "content": "***upvote if u like***\\n\\n\\n\\n**BFS solution:**\\n\\n\\t\\t\\tpublic class Solution {\\n\\t\\t\\t\\t\\tpublic List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\t\\t\\t\\t\\t\\tList<List<Integer>> wrapList = new LinkedList<List<Integer>>();\\n\\t\\t\\t\\t\\t\\tlevelMaker(wrapList, root, 0);\\n\\t\\t\\t\\t\\t\\treturn wrapList;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tpublic void levelMaker(List<List<Integer>> list, TreeNode root, int level) {\\n\\t\\t\\t\\t\\t\\tif(root == null) return;\\n\\t\\t\\t\\t\\t\\tif(level >= list.size()) {\\n\\t\\t\\t\\t\\t\\t\\tlist.add(0, new LinkedList<Integer>());\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tlevelMaker(list, root.left, level+1);\\n\\t\\t\\t\\t\\t\\tlevelMaker(list, root.right, level+1);\\n\\t\\t\\t\\t\\t\\tlist.get(list.size()-level-1).add(root.val);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\n**DFS SOLUTION**\\n\\t\\t\\t\\n\\t\\t\\tpublic class Solution {\\n\\t\\t\\t\\tpublic List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\t\\t\\t\\t\\tQueue<TreeNode> queue = new LinkedList<TreeNode>();\\n\\t\\t\\t\\t\\tList<List<Integer>> wrapList = new LinkedList<List<Integer>>();\\n\\n\\t\\t\\t\\t\\tif(root == null) return wrapList;\\n\\n\\t\\t\\t\\t\\tqueue.offer(root);\\n\\t\\t\\t\\t\\twhile(!queue.isEmpty()){\\n\\t\\t\\t\\t\\t\\tint levelNum = queue.size();\\n\\t\\t\\t\\t\\t\\tList<Integer> subList = new LinkedList<Integer>();\\n\\t\\t\\t\\t\\t\\tfor(int i=0; i<levelNum; i++) {\\n\\t\\t\\t\\t\\t\\t\\tif(queue.peek().left != null) queue.offer(queue.peek().left);\\n\\t\\t\\t\\t\\t\\t\\tif(queue.peek().right != null) queue.offer(queue.peek().right);\\n\\t\\t\\t\\t\\t\\t\\tsubList.add(queue.poll().val);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\twrapList.add(0, subList);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn wrapList;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}",
                "solutionTags": [
                    "Java",
                    "Queue"
                ],
                "code": "class Solution {\\n\\t\\t\\t\\t\\tpublic List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\t\\t\\t\\t\\t\\tList<List<Integer>> wrapList = new LinkedList<List<Integer>>();\\n\\t\\t\\t\\t\\t\\tlevelMaker(wrapList, root, 0);\\n\\t\\t\\t\\t\\t\\treturn wrapList;\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2673843,
                "title": "bfs-using-queue-and-stack-no-reversing-java",
                "content": "```\\nclass Solution {\\n   \\n    // trivial method can be doing regular bfs and then using Collecion.reverse to reverse the answer\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        // this queue used to store the nodes for bfs \\n        Queue<TreeNode> queue = new LinkedList<>();\\n        // stack to store the list so, that in the end the last level nodes are achieved first\\n        Stack<List<Integer>> levels = new Stack<>();\\n        if(root == null)\\n            return new ArrayList<>();\\n        \\n            queue.add(root);\\n        // doing regular bfs \\n        while(!queue.isEmpty()) {\\n            int size = queue.size();\\n            List<Integer> level = new ArrayList<>();\\n            for (int i = 0; i < size; i++) {\\n                TreeNode node = queue.poll();\\n                level.add(node.val);\\n                if(node.left != null) queue.add(node.left);\\n                if(node.right != null) queue.add(node.right);\\n            }\\n            levels.push(level);\\n        }\\n        \\n        List<List<Integer>> res = new ArrayList<>();\\n        // here we remove the lists from stack and the last inserted will be added first to the result list of list and we \\n        // get our answer\\n        while(!levels.isEmpty()) {\\n            res.add(levels.pop());\\n        }\\n        return res;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Stack",
                    "Breadth-First Search"
                ],
                "code": "class Solution {\\n   \\n    // trivial method can be doing regular bfs and then using Collecion.reverse to reverse the answer\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        // this queue used to store the nodes for bfs \\n        Queue<TreeNode> queue = new LinkedList<>();\\n        // stack to store the list so, that in the end the last level nodes are achieved first\\n        Stack<List<Integer>> levels = new Stack<>();\\n        if(root == null)\\n            return new ArrayList<>();\\n        \\n            queue.add(root);\\n        // doing regular bfs \\n        while(!queue.isEmpty()) {\\n            int size = queue.size();\\n            List<Integer> level = new ArrayList<>();\\n            for (int i = 0; i < size; i++) {\\n                TreeNode node = queue.poll();\\n                level.add(node.val);\\n                if(node.left != null) queue.add(node.left);\\n                if(node.right != null) queue.add(node.right);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2597126,
                "title": "c-solution-answer-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>>ans;\\n        if(root == NULL) return ans;\\n        \\n        queue<TreeNode*>q;\\n        q.push(root);\\n        \\n        while(!q.empty()){\\n            int size = q.size();\\n            vector<int>level;\\n            for(int i=0;i<size;i++){\\n                TreeNode* node = q.front();\\n                q.pop();\\n                if(node->left != NULL) q.push(node->left);\\n                if(node->right != NULL) q.push(node->right);\\n                level.push_back(node->val);\\n            }\\n            ans.push_back(level);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion",
                    "Queue",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>>ans;\\n        if(root == NULL) return ans;\\n        \\n        queue<TreeNode*>q;\\n        q.push(root);\\n        \\n        while(!q.empty()){\\n            int size = q.size();\\n            vector<int>level;\\n            for(int i=0;i<size;i++){\\n                TreeNode* node = q.front();\\n                q.pop();\\n                if(node->left != NULL) q.push(node->left);\\n                if(node->right != NULL) q.push(node->right);\\n                level.push_back(node->val);\\n            }\\n            ans.push_back(level);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1952855,
                "title": "java-beats-100-00-memory-speed-0ms-april-2022",
                "content": "\\n\\tpublic class Solution {\\n\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n    List<List<Integer>> result = new ArrayList<>();\\n    travelTree(0, root, result);\\n    List<List<Integer>> reverseRst = new ArrayList<>();\\n    for (int i = 0; i < result.size(); i++) {\\n        reverseRst.add(result.get(result.size() - i - 1));\\n    }\\n    return reverseRst;\\n\\t}\\n\\n    private void travelTree(int level, TreeNode root, List<List<Integer>> result) {\\n    if (root == null) return;\\n    if (result.size() <= level) result.add(new ArrayList<>());\\n    result.get(level).add(root.val);\\n    travelTree(level + 1, root.left, result);\\n    travelTree(level + 1, root.right, result);\\n\\t}\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n    List<List<Integer>> result = new ArrayList<>();\\n    travelTree(0, root, result);\\n    List<List<Integer>> reverseRst = new ArrayList<>();\\n    for (int i = 0; i < result.size(); i++) {\\n        reverseRst.add(result.get(result.size() - i - 1));\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1788091,
                "title": "c-100-faster-solution-just-level-order-traverse-and-then-reverse-the-result",
                "content": "Dry run for better understanding\\n```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        if(root == NULL) return ans;\\n        \\n        queue<TreeNode*> q;\\n        q.push(root);\\n        q.push(NULL);\\n        \\n        vector<int> temp2;\\n        \\n        while(!q.empty()){\\n            \\n            TreeNode* temp = q.front(); \\n            q.pop();\\n            \\n            if(temp == NULL){\\n                ans.push_back(temp2);\\n                temp2.clear();\\n                if(!q.empty()) q.push(NULL);\\n            }\\n            else{\\n                cout<<temp->val<<\" \";\\n                temp2.push_back(temp->val);\\n                if(temp->left != NULL) q.push(temp->left);\\n                if(temp->right != NULL) q.push(temp->right);\\n            }\\n        }\\n        \\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n\\t\\t\\n\\t\\t```",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        if(root == NULL) return ans;\\n        \\n        queue<TreeNode*> q;\\n        q.push(root);\\n        q.push(NULL);\\n        \\n        vector<int> temp2;\\n        \\n        while(!q.empty()){\\n            \\n            TreeNode* temp = q.front(); \\n            q.pop();\\n            \\n            if(temp == NULL){\\n                ans.push_back(temp2);\\n                temp2.clear();\\n                if(!q.empty()) q.push(NULL);\\n            }\\n            else{\\n                cout<<temp->val<<\" \";\\n                temp2.push_back(temp->val);\\n                if(temp->left != NULL) q.push(temp->left);\\n                if(temp->right != NULL) q.push(temp->right);\\n            }\\n        }\\n        \\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n\\t\\t\\n\\t\\t```",
                "codeTag": "C++"
            },
            {
                "id": 1664000,
                "title": "c-without-reversing-3-approaches-discussed",
                "content": "1. **BFS (using reverse):**\\n```\\nclass Solution {\\npublic:\\n     \\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n         if(root==NULL)\\n            return {};\\n        vector<vector<int>>ans;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        q.push(NULL);\\n        vector<int>temp;\\n        while(!q.empty())\\n        {\\n            TreeNode*buffer=q.front();\\n            q.pop();\\n            if(!buffer)\\n            {   \\n                ans.push_back(temp);\\n                temp.clear();\\n                if(!q.empty())\\n                    q.push(NULL);\\n                \\n            }\\n            else\\n            {\\n                temp.push_back(buffer->val);\\n                if(buffer->left)\\n                {\\n                    q.push(buffer->left);\\n                }\\n                if(buffer->right)\\n                {\\n                    q.push(buffer->right);\\n                }\\n            }\\n        }\\n    reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```\\n2. **DFS (using reverse):**\\n```\\nclass Solution {\\npublic:\\n     \\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root==NULL)\\n            return{};\\n        vector<vector<int>>ans;\\n         level(root,ans,0);\\n        for(int i=0,j=ans.size()-1;i<j;i++,j--)\\n        {\\n            swap(ans[i],ans[j]);\\n        }\\n        return ans;\\n        \\n    }\\n    private:\\n   void level(TreeNode*root,vector<vector<int>>&ans,int row)\\n    {\\n      if(root==NULL)\\n          return;\\n        if(ans.size()<row+1)\\n            ans.resize(row+1);\\n        ans[row].push_back(root->val);\\n         \\n            level(root->left,ans,row+1);\\n            level(root->right,ans,row+1);\\n    \\n        \\n        \\n    }\\n};\\n```\\n3. **DFS( without reverse):**\\n```\\nclass Solution {\\npublic:\\n     \\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root==NULL)\\n            return{};\\n        int d=depth(root);\\n        vector<vector<int>>ans(d);\\n         level(root,ans,0,d);\\n        \\n        return ans;\\n        \\n    }\\n    private:\\n   void level(TreeNode*root,vector<vector<int>>&ans,int l,int depth)\\n    {\\n      if(root==NULL)\\n          return;\\n        \\n        ans[depth-l-1].push_back(root->val);\\n         \\n            level(root->left,ans,l+1,depth);\\n            level(root->right,ans,l+1,depth);\\n    \\n        \\n        \\n    }\\n    int depth(TreeNode*root)\\n    {\\n        if(root==NULL)\\n            return 0;\\n        return 1+max(depth(root->left),depth(root->right));\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Depth-First Search",
                    "Breadth-First Search",
                    "Binary Search Tree",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n     \\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n         if(root==NULL)\\n            return {};\\n        vector<vector<int>>ans;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        q.push(NULL);\\n        vector<int>temp;\\n        while(!q.empty())\\n        {\\n            TreeNode*buffer=q.front();\\n            q.pop();\\n            if(!buffer)\\n            {   \\n                ans.push_back(temp);\\n                temp.clear();\\n                if(!q.empty())\\n                    q.push(NULL);\\n                \\n            }\\n            else\\n            {\\n                temp.push_back(buffer->val);\\n                if(buffer->left)\\n                {\\n                    q.push(buffer->left);\\n                }\\n                if(buffer->right)\\n                {\\n                    q.push(buffer->right);\\n                }\\n            }\\n        }\\n    reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n     \\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root==NULL)\\n            return{};\\n        vector<vector<int>>ans;\\n         level(root,ans,0);\\n        for(int i=0,j=ans.size()-1;i<j;i++,j--)\\n        {\\n            swap(ans[i],ans[j]);\\n        }\\n        return ans;\\n        \\n    }\\n    private:\\n   void level(TreeNode*root,vector<vector<int>>&ans,int row)\\n    {\\n      if(root==NULL)\\n          return;\\n        if(ans.size()<row+1)\\n            ans.resize(row+1);\\n        ans[row].push_back(root->val);\\n         \\n            level(root->left,ans,row+1);\\n            level(root->right,ans,row+1);\\n    \\n        \\n        \\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n     \\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root==NULL)\\n            return{};\\n        int d=depth(root);\\n        vector<vector<int>>ans(d);\\n         level(root,ans,0,d);\\n        \\n        return ans;\\n        \\n    }\\n    private:\\n   void level(TreeNode*root,vector<vector<int>>&ans,int l,int depth)\\n    {\\n      if(root==NULL)\\n          return;\\n        \\n        ans[depth-l-1].push_back(root->val);\\n         \\n            level(root->left,ans,l+1,depth);\\n            level(root->right,ans,l+1,depth);\\n    \\n        \\n        \\n    }\\n    int depth(TreeNode*root)\\n    {\\n        if(root==NULL)\\n            return 0;\\n        return 1+max(depth(root->left),depth(root->right));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1322080,
                "title": "c-level-order-reverse-4ms-o-n",
                "content": "this solution is simple level order traversal \\nand then reverse the levels sroted in vector<vector< int >>ans so this will give desired ans so time required for this solution is **4ms** aka ```O(n)``` \\n\\nthere is also a socond method in which we first count total level and then initialise  vector<vector< int >>ans \\nand then do recursive level order traversal but that take **12ms** time aka ```2* O(n) = O(n)``` but here we required two time traversal on each node first for countion max-defth and second for doing level order traversal recursively \\n\\n**Sorry for my poor English**\\n\\n**C++ Solution -> Level Order Traversal + Reverse**\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(!root)\\n            return ans;\\n        vector<int>level;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        TreeNode *temp;\\n        while(!q.empty())\\n        {\\n            int size = q.size();\\n            level.clear();\\n            for(int i=0;i<size;i++)\\n            {\\n                temp = q.front();\\n                q.pop();\\n                level.push_back(temp->val);\\n                if(temp->left)\\n                    q.push(temp->left);\\n                if(temp->right)\\n                    q.push(temp->right);\\n            }\\n            ans.push_back(level);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```\\n\\n**If find helpful please upvote it** **:)**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Breadth-First Search",
                    "Recursion",
                    "Queue"
                ],
                "code": "```O(n)```\n```2* O(n) = O(n)```\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(!root)\\n            return ans;\\n        vector<int>level;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        TreeNode *temp;\\n        while(!q.empty())\\n        {\\n            int size = q.size();\\n            level.clear();\\n            for(int i=0;i<size;i++)\\n            {\\n                temp = q.front();\\n                q.pop();\\n                level.push_back(temp->val);\\n                if(temp->left)\\n                    q.push(temp->left);\\n                if(temp->right)\\n                    q.push(temp->right);\\n            }\\n            ans.push_back(level);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1315206,
                "title": "java-simple-approach",
                "content": "Hopefully u will find it useful!\\n```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        Queue<TreeNode> q = new LinkedList();\\n        List<List<Integer>> ans = new ArrayList();\\n        q.add(root);\\n        if (root == null) return ans;\\n        while (! q.isEmpty()) {\\n            List<Integer> level = new ArrayList();\\n            int size = q.size();\\n            for (int i = 0; i < size; i ++) {\\n                TreeNode current = q.poll();\\n                level.add(current.val);\\n                if (current.left != null) {\\n                    q.add(current.left);\\n                }\\n                if (current.right != null) {\\n                    q.add(current.right);\\n                }\\n            }\\n            ans.add(0, level);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        Queue<TreeNode> q = new LinkedList();\\n        List<List<Integer>> ans = new ArrayList();\\n        q.add(root);\\n        if (root == null) return ans;\\n        while (! q.isEmpty()) {\\n            List<Integer> level = new ArrayList();\\n            int size = q.size();\\n            for (int i = 0; i < size; i ++) {\\n                TreeNode current = q.poll();\\n                level.add(current.val);\\n                if (current.left != null) {\\n                    q.add(current.left);\\n                }\\n                if (current.right != null) {\\n                    q.add(current.right);\\n                }\\n            }\\n            ans.add(0, level);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1061841,
                "title": "solution-in-java",
                "content": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> res = new ArrayList<>();\\n        Queue<TreeNode> q=new LinkedList<>();\\n        TreeNode cur=null;\\n        //If root is null\\n        if(root==null)\\n            return res;\\n        //Level order traversal - using queue\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            int temp=q.size();\\n            List<Integer> l=new ArrayList<>();\\n            while(temp-->0){\\n                cur=q.poll();\\n                l.add(cur.val);\\n                if(cur.left!=null) q.add(cur.left);\\n                if(cur.right!=null) q.add(cur.right);\\n            }\\n            //Adding new lists to the front of list - res\\n            res.add(0,l);\\n        }\\n        return res;\\n    }\\n}\\n```\\nPlease **upvote**, if you like the solution:)",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> res = new ArrayList<>();\\n        Queue<TreeNode> q=new LinkedList<>();\\n        TreeNode cur=null;\\n        //If root is null\\n        if(root==null)\\n            return res;\\n        //Level order traversal - using queue\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            int temp=q.size();\\n            List<Integer> l=new ArrayList<>();\\n            while(temp-->0){\\n                cur=q.poll();\\n                l.add(cur.val);\\n                if(cur.left!=null) q.add(cur.left);\\n                if(cur.right!=null) q.add(cur.right);\\n            }\\n            //Adding new lists to the front of list - res\\n            res.add(0,l);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 996436,
                "title": "java-o-n-time-o-n-space-queue-bfs",
                "content": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        if (root == null) {\\n            return Collections.emptyList();\\n        }\\n        \\n        LinkedList<List<Integer>> res = new LinkedList<>();\\n        \\n        Deque<TreeNode> queue = new ArrayDeque<>();\\n        queue.add(root);\\n        \\n        while (!queue.isEmpty()) {\\n            LinkedList<Integer> ll = new LinkedList<>();\\n            int size = queue.size();\\n            while (size > 0) {\\n                size -= 1;\\n                TreeNode child = queue.poll();\\n                ll.add(child.val);\\n                \\n                if (child.left != null) {\\n                    queue.offer(child.left);\\n                }\\n                \\n                if (child.right != null) {\\n                    queue.offer(child.right);\\n                }\\n            }\\n            \\n            res.addFirst(ll);\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Breadth-First Search",
                    "Queue",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        if (root == null) {\\n            return Collections.emptyList();\\n        }\\n        \\n        LinkedList<List<Integer>> res = new LinkedList<>();\\n        \\n        Deque<TreeNode> queue = new ArrayDeque<>();\\n        queue.add(root);\\n        \\n        while (!queue.isEmpty()) {\\n            LinkedList<Integer> ll = new LinkedList<>();\\n            int size = queue.size();\\n            while (size > 0) {\\n                size -= 1;\\n                TreeNode child = queue.poll();\\n                ll.add(child.val);\\n                \\n                if (child.left != null) {\\n                    queue.offer(child.left);\\n                }\\n                \\n                if (child.right != null) {\\n                    queue.offer(child.right);\\n                }\\n            }\\n            \\n            res.addFirst(ll);\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 896140,
                "title": "python3-solution-24-ms-99-faster-only-lists-and-recursion",
                "content": "```\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        \\n        #We\\'ll fill result list in inverse order compare to description, from the highest level\\n        level = 0\\n        result = []\\n        #Start filling result list. O(n) complexity - we\\'ll iterate over all elements of tree\\n        self.append_level(root, result, level)\\n        #return inversed result. It took O(log n) time so it is not necessary\\n        return result[::-1]\\n    \\n    def append_level(self, root, result, level):\\n        #Check if empty tree, if True - not fill result\\n        if not root:\\n            return\\n        #Appending new list for new level\\n        if len(result) < level+1:\\n            result.append([])\\n            \\n        #Always append root value (due to recursion order we\\'ll not be mistaken by order)\\n        result[level].append(root.val)\\n        \\n        #First - left, second - right, as in description\\n        if root.left:\\n            self.append_level(root.left, result, level=level+1)\\n        if root.right:\\n            self.append_level(root.right, result, level=level+1)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        \\n        #We\\'ll fill result list in inverse order compare to description, from the highest level\\n        level = 0\\n        result = []\\n        #Start filling result list. O(n) complexity - we\\'ll iterate over all elements of tree\\n        self.append_level(root, result, level)\\n        #return inversed result. It took O(log n) time so it is not necessary\\n        return result[::-1]\\n    \\n    def append_level(self, root, result, level):\\n        #Check if empty tree, if True - not fill result\\n        if not root:\\n            return\\n        #Appending new list for new level\\n        if len(result) < level+1:\\n            result.append([])\\n            \\n        #Always append root value (due to recursion order we\\'ll not be mistaken by order)\\n        result[level].append(root.val)\\n        \\n        #First - left, second - right, as in description\\n        if root.left:\\n            self.append_level(root.left, result, level=level+1)\\n        if root.right:\\n            self.append_level(root.right, result, level=level+1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 738169,
                "title": "c-bfs-dfs-easy-to-understand",
                "content": "***Runtime: 8 ms, faster than 65.67% of C++ online submissions for Binary Tree Level Order Traversal II.\\nMemory Usage: 12.8 MB, less than 55.73% of C++ online submissions for Binary Tree Level Order Traversal II.***\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(!root)   return {};\\n        vector<vector<int>> result;\\n        vector<int> temp;\\n        TreeNode* current = root;\\n        queue<TreeNode*> q;\\n        int n = 1;\\n        q.push(root);\\n        while(!q.empty()){\\n            n = q.size();\\n            temp.clear();\\n            for(int i=0;i<n;i++){\\n                current = q.front();    q.pop();\\n                if(current->left)   \\n                    q.push(current->left);\\n                if(current->right)  \\n                    q.push(current->right);\\n                temp.push_back(current->val);\\n            }\\n            result.push_back(temp);\\n        }\\n        return vector(result.rbegin(),result.rend());\\n    }\\n};\\n```\\n\\n***Runtime: 4 ms, faster than 93.37% of C++ online submissions for Binary Tree Level Order Traversal II.\\nMemory Usage: 13.7 MB, less than 12.55% of C++ online submissions for Binary Tree Level Order Traversal II.***\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> result;\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        DFS(root, 0);\\n        return vector(result.rbegin(),result.rend());\\n    }\\n    void DFS(TreeNode* root, int level){\\n        if(!root)   return;\\n        if(level == result.size()){\\n            result.push_back({});\\n        }\\n        result[level].push_back(root->val);\\n        DFS(root->left, level+1);\\n        DFS(root->right, level+1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(!root)   return {};\\n        vector<vector<int>> result;\\n        vector<int> temp;\\n        TreeNode* current = root;\\n        queue<TreeNode*> q;\\n        int n = 1;\\n        q.push(root);\\n        while(!q.empty()){\\n            n = q.size();\\n            temp.clear();\\n            for(int i=0;i<n;i++){\\n                current = q.front();    q.pop();\\n                if(current->left)   \\n                    q.push(current->left);\\n                if(current->right)  \\n                    q.push(current->right);\\n                temp.push_back(current->val);\\n            }\\n            result.push_back(temp);\\n        }\\n        return vector(result.rbegin(),result.rend());\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> result;\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        DFS(root, 0);\\n        return vector(result.rbegin(),result.rend());\\n    }\\n    void DFS(TreeNode* root, int level){\\n        if(!root)   return;\\n        if(level == result.size()){\\n            result.push_back({});\\n        }\\n        result[level].push_back(root->val);\\n        DFS(root->left, level+1);\\n        DFS(root->right, level+1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 724091,
                "title": "python3-solution-using-bfs",
                "content": "```\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        if not root:\\n            return None\\n        q = [root]\\n        level = []\\n        res = [[root.val]]\\n        while q:\\n            curr = q.pop(0)\\n            if curr.left:\\n                level.append(curr.left)\\n            if curr.right:\\n                level.append(curr.right)\\n            if not q and level:\\n                res.insert(0,[n.val for n in level])\\n                q = level\\n                level = []\\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        if not root:\\n            return None\\n        q = [root]\\n        level = []\\n        res = [[root.val]]\\n        while q:\\n            curr = q.pop(0)\\n            if curr.left:\\n                level.append(curr.left)\\n            if curr.right:\\n                level.append(curr.right)\\n            if not q and level:\\n                res.insert(0,[n.val for n in level])\\n                q = level\\n                level = []\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 722496,
                "title": "java-runtime-1-ms-faster-than-88-11",
                "content": "```\\npublic List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\tif (root == null) {\\n\\t\\treturn new ArrayList<>();\\n\\t}\\n\\n\\tList<List<Integer>> result = new ArrayList<>();\\n\\tQueue<TreeNode> queue = new LinkedList<>();\\n\\tqueue.offer(root);\\n\\n\\twhile (!queue.isEmpty()) {\\n\\t\\tint n = queue.size();\\n\\t\\tList<Integer> row = new ArrayList<>();\\n\\n\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\tTreeNode cur = queue.poll();\\n\\t\\t\\trow.add(cur.val);\\n\\n\\t\\t\\tif (cur.left != null) {\\n\\t\\t\\t\\tqueue.offer(cur.left);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (cur.right != null) {\\n\\t\\t\\t\\tqueue.offer(cur.right);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tresult.add(0, row);\\n\\t}\\n\\n\\treturn result;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\tif (root == null) {\\n\\t\\treturn new ArrayList<>();\\n\\t}\\n\\n\\tList<List<Integer>> result = new ArrayList<>();\\n\\tQueue<TreeNode> queue = new LinkedList<>();\\n\\tqueue.offer(root);\\n\\n\\twhile (!queue.isEmpty()) {\\n\\t\\tint n = queue.size();\\n\\t\\tList<Integer> row = new ArrayList<>();\\n\\n\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\tTreeNode cur = queue.poll();\\n\\t\\t\\trow.add(cur.val);\\n\\n\\t\\t\\tif (cur.left != null) {\\n\\t\\t\\t\\tqueue.offer(cur.left);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (cur.right != null) {\\n\\t\\t\\t\\tqueue.offer(cur.right);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tresult.add(0, row);\\n\\t}\\n\\n\\treturn result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 717278,
                "title": "concise-c-solution",
                "content": "```\\n\\tint height(TreeNode* root){\\n        if(!root) return 0;\\n        return 1+max(height(root->left),height(root->right));\\n    }\\n    \\n    void helper(vector<vector<int>> &ans, TreeNode *root,int level){\\n        if(!root) return;\\n        ans[level].push_back(root->val);\\n        helper(ans,root->left,level+1);\\n        helper(ans,root->right,level+1);\\n    }\\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans(height(root));\\n        helper(ans,root,0);\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n\\t}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n\\tint height(TreeNode* root){\\n        if(!root) return 0;\\n        return 1+max(height(root->left),height(root->right));\\n    }\\n    \\n    void helper(vector<vector<int>> &ans, TreeNode *root,int level){\\n        if(!root) return;\\n        ans[level].push_back(root->val);\\n        helper(ans,root->left,level+1);\\n        helper(ans,root->right,level+1);\\n    }\\n    \\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans(height(root));\\n        helper(ans,root,0);\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n\\t}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 716613,
                "title": "c-elementary-recursive-dfs-solution",
                "content": "```\\npublic class Solution {\\n    public IList<IList<int>> LevelOrderBottom(TreeNode root) {\\n        List<IList<int>> result = new List<IList<int>>();\\n        LevelOrderBottom(root, 0, result);   \\n        result.Reverse();\\n        return result;\\n    }\\n    \\n    private void LevelOrderBottom(TreeNode node, int level, List<IList<int>> result) {\\n        if (node == null)\\n            return;\\n        \\n        if (level >= result.Count)\\n            result.Add(new List<int>());\\n        \\n        result[level].Add(node.val);\\n        \\n        LevelOrderBottom(node.left, level+1, result);\\n        LevelOrderBottom(node.right, level+1, result);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\npublic class Solution {\\n    public IList<IList<int>> LevelOrderBottom(TreeNode root) {\\n        List<IList<int>> result = new List<IList<int>>();\\n        LevelOrderBottom(root, 0, result);   \\n        result.Reverse();\\n        return result;\\n    }\\n    \\n    private void LevelOrderBottom(TreeNode node, int level, List<IList<int>> result) {\\n        if (node == null)\\n            return;\\n        \\n        if (level >= result.Count)\\n            result.Add(new List<int>());\\n        \\n        result[level].Add(node.val);\\n        \\n        LevelOrderBottom(node.left, level+1, result);\\n        LevelOrderBottom(node.right, level+1, result);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 716197,
                "title": "bfs-and-dfs-solution-c-easy-to-understand-comments-included",
                "content": "# DFS Solution\\n```\\n    int maxDepth(TreeNode* root){\\n        if(root==NULL) return -1;\\n        return max(1 + maxDepth(root->left), 1+ maxDepth(root->right));\\n    }\\n    void dfs(TreeNode* root, vector<vector<int>> &ans, int level){\\n        if(root==NULL){\\n            return ;\\n        }\\n        ans[level].push_back(root->val);\\n        dfs(root->left, ans, level + 1);\\n        dfs(root->right, ans, level + 1);\\n    }\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(root==NULL)\\n            return ans;\\n        int depth = maxDepth(root);   //maxDepth function will find number of levels present in the binary tree\\n        ans.resize(1 + depth);\\n        dfs(root, ans, 0);\\n        reverse(ans.begin(),ans.end()); //Reversing the array to make it bottom up traversal\\n        return ans;\\n    }\\n\\n```\\n\\n# BFS Solution\\n\\n```\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(root==NULL) return ans;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        map<TreeNode*,int> level;\\n        level[root] = 0;\\n        while(!q.empty()){\\n            TreeNode* temp = q.front();\\n            q.pop();\\n            if(temp->left!=NULL){\\n                level[temp->left] = level[temp] + 1;\\n                q.push(temp->left);\\n            }\\n            if(temp->right!=NULL){\\n                level[temp->right] = level[temp] + 1;\\n                q.push(temp->right);\\n            }\\n        }\\n        vector<int> tempArray;    // Temporary Array\\n        int cnt = 0;\\n        for(auto i:level){               //Traversing through map\\n            if(cnt==i.second)\\n                tempArray.push_back(i.first->val);\\n            else{\\n                cnt++;\\n                ans.push_back(tempArray);\\n                tempArray.clear();\\n                tempArray.push_back(i.first->val);\\n            }\\n        }\\n        ans.push_back(tempArray);\\n        reverse(ans.begin(),ans.end());        //Reversing the order to make it bottom up traversal\\n        return ans;\\n    }\\n\\n```\\nFeel free to ask any doubts in the **comment** section.\\nIf you like this solution, please **UPVOTE.**\\nHappy Coding :)",
                "solutionTags": [
                    "C++",
                    "C",
                    "Depth-First Search",
                    "Breadth-First Search",
                    "Recursion",
                    "Queue",
                    "Iterator"
                ],
                "code": "```\\n    int maxDepth(TreeNode* root){\\n        if(root==NULL) return -1;\\n        return max(1 + maxDepth(root->left), 1+ maxDepth(root->right));\\n    }\\n    void dfs(TreeNode* root, vector<vector<int>> &ans, int level){\\n        if(root==NULL){\\n            return ;\\n        }\\n        ans[level].push_back(root->val);\\n        dfs(root->left, ans, level + 1);\\n        dfs(root->right, ans, level + 1);\\n    }\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(root==NULL)\\n            return ans;\\n        int depth = maxDepth(root);   //maxDepth function will find number of levels present in the binary tree\\n        ans.resize(1 + depth);\\n        dfs(root, ans, 0);\\n        reverse(ans.begin(),ans.end()); //Reversing the array to make it bottom up traversal\\n        return ans;\\n    }\\n\\n```\n```\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(root==NULL) return ans;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        map<TreeNode*,int> level;\\n        level[root] = 0;\\n        while(!q.empty()){\\n            TreeNode* temp = q.front();\\n            q.pop();\\n            if(temp->left!=NULL){\\n                level[temp->left] = level[temp] + 1;\\n                q.push(temp->left);\\n            }\\n            if(temp->right!=NULL){\\n                level[temp->right] = level[temp] + 1;\\n                q.push(temp->right);\\n            }\\n        }\\n        vector<int> tempArray;    // Temporary Array\\n        int cnt = 0;\\n        for(auto i:level){               //Traversing through map\\n            if(cnt==i.second)\\n                tempArray.push_back(i.first->val);\\n            else{\\n                cnt++;\\n                ans.push_back(tempArray);\\n                tempArray.clear();\\n                tempArray.push_back(i.first->val);\\n            }\\n        }\\n        ans.push_back(tempArray);\\n        reverse(ans.begin(),ans.end());        //Reversing the order to make it bottom up traversal\\n        return ans;\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 716157,
                "title": "java-accepted-easy-to-understand-simple-iterative-solution-0-ms",
                "content": "**intuition**-it looks like a normal level order traversal  , but the catch is that the lowest level is printed at first then the second last level ....continuing till the first level.\\n\\nso we we will traverse from top to bottom(root to leaf) level order traversal  and at each level store the values in a list and then add this list to the answer.\\nbut while adding the list to the answer  we add the current list at the \\'0\\'  index of answer list. this way we maintain the reverse order traversal asked by the question.\\n\\n```\\n\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n         List<List<Integer>> answer =new  ArrayList<>();\\n        if(root==null)\\n            return answer;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        while(!q.isEmpty())\\n        {\\n            int size=q.size();\\n            List<Integer> l   =new ArrayList<>();  // intermediate list containing current level nodes values\\n            while(size--  >  0 )\\n            {\\n                TreeNode curr = q.poll();\\n                l.add(curr.val);\\n                if(curr.left!=null)\\n                    q.offer(curr.left);\\n                if(curr.right!=null)\\n                    q.offer(curr.right);\\n                \\n            }\\n        answer.add(0,l); // this is the trick to maintain the reverse level order traversal\\n        }\\n        return answer;\\n    }\\n}\\n```\\nplease upvote if it helped you and let me know if you have any other approach!\\nthanks.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n         List<List<Integer>> answer =new  ArrayList<>();\\n        if(root==null)\\n            return answer;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        while(!q.isEmpty())\\n        {\\n            int size=q.size();\\n            List<Integer> l   =new ArrayList<>();  // intermediate list containing current level nodes values\\n            while(size--  >  0 )\\n            {\\n                TreeNode curr = q.poll();\\n                l.add(curr.val);\\n                if(curr.left!=null)\\n                    q.offer(curr.left);\\n                if(curr.right!=null)\\n                    q.offer(curr.right);\\n                \\n            }\\n        answer.add(0,l); // this is the trick to maintain the reverse level order traversal\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 716058,
                "title": "easy-bfs-python-solution",
                "content": "```\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        if not root:\\n            return []\\n        queue = [root]\\n        answer = [[root.val]]\\n        while queue:\\n            child = []\\n            for node in queue:\\n                if node.left:\\n                    child.append(node.left)\\n                if node.right:\\n                    child.append(node.right)\\n            if not child: #last level of tree.\\n                break\\n            queue = child #assigning this level to queue.\\n            answer.append([node.val for node in queue])\\n\\t\\t\\t\\n        return answer[::-1]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        if not root:\\n            return []\\n        queue = [root]\\n        answer = [[root.val]]\\n        while queue:\\n            child = []\\n            for node in queue:\\n                if node.left:\\n                    child.append(node.left)\\n                if node.right:\\n                    child.append(node.right)\\n            if not child: #last level of tree.\\n                break\\n            queue = child #assigning this level to queue.\\n            answer.append([node.val for node in queue])\\n\\t\\t\\t\\n        return answer[::-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 716009,
                "title": "java-two-solutions-with-bfs-and-dfs",
                "content": "Solution 1. Do classic BFS on each level and reverse the result to get final final answer -\\nNote: We don\\'t even need to do reverse - \\n         i. We can simply add the bfs result in 0th index of ans list - i.e. ans.add(0, aList)\\n\\t\\t ii. If we use LinkedList type instead of generic List addFirst method will result in              same - i.e. LinkedList<List<Integer>> ans = new LinkedList(); and doing ans.addFirst(aList)\\n```\\nclass Solution {\\n    \\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> ans = new ArrayList();\\n        Queue<TreeNode> queue = new LinkedList();\\n        queue.add(root);\\n        queue.add(null);\\n        \\n        while(queue.peek() != null){\\n          List<Integer> aList = new ArrayList();\\n          while(queue.peek() != null){\\n            TreeNode node = queue.poll();\\n            aList.add(node.val);\\n            if(node.left != null) queue.add(node.left);\\n            if(node.right != null) queue.add(node.right);\\n          }\\n          ans.add(aList);\\n          queue.poll();\\n          queue.add(null);\\n        }\\n      \\n        Collections.reverse(ans);\\n        return ans;\\n    }\\n}\\n```\\n\\nSolution 2. Do DFS by level and once call stack ceases store the node values in ans list -\\n```\\nclass Solution {\\n    List<List<Integer>> ans = new ArrayList();\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        if(root != null)\\n            lot(Arrays.asList(root));\\n        return ans;\\n    }\\n    \\n    void lot(List<TreeNode> nodes){\\n       if(nodes.size() > 0){\\n           List<TreeNode> new_nodes = new ArrayList();\\n           for(TreeNode node : nodes){\\n               if(node.left != null) new_nodes.add(node.left); \\n               if(node.right != null) new_nodes.add(node.right);\\n           }\\n           lot(new_nodes);\\n           ans.add(nodes.stream().map(n -> n.val).collect(Collectors.toList()));\\n       }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    \\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> ans = new ArrayList();\\n        Queue<TreeNode> queue = new LinkedList();\\n        queue.add(root);\\n        queue.add(null);\\n        \\n        while(queue.peek() != null){\\n          List<Integer> aList = new ArrayList();\\n          while(queue.peek() != null){\\n            TreeNode node = queue.poll();\\n            aList.add(node.val);\\n            if(node.left != null) queue.add(node.left);\\n            if(node.right != null) queue.add(node.right);\\n          }\\n          ans.add(aList);\\n          queue.poll();\\n          queue.add(null);\\n        }\\n      \\n        Collections.reverse(ans);\\n        return ans;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    List<List<Integer>> ans = new ArrayList();\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        if(root != null)\\n            lot(Arrays.asList(root));\\n        return ans;\\n    }\\n    \\n    void lot(List<TreeNode> nodes){\\n       if(nodes.size() > 0){\\n           List<TreeNode> new_nodes = new ArrayList();\\n           for(TreeNode node : nodes){\\n               if(node.left != null) new_nodes.add(node.left); \\n               if(node.right != null) new_nodes.add(node.right);\\n           }\\n           lot(new_nodes);\\n           ans.add(nodes.stream().map(n -> n.val).collect(Collectors.toList()));\\n       }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 652469,
                "title": "java-simple-short-100-faster",
                "content": "```\\nclass Solution {\\n    List<List<Integer>> results = new ArrayList<>();\\n    \\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        levelOrderBottom(root, 0);\\n        return results;\\n    }\\n    \\n    public void levelOrderBottom(TreeNode root, int level){\\n        if (root == null) return; \\n        if (level >= results.size()) results.add(0, new ArrayList<>());\\n        \\n        results.get(results.size() - 1 - level).add(root.val);\\n        levelOrderBottom(root.left, level+1);\\n        levelOrderBottom(root.right, level+1);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    List<List<Integer>> results = new ArrayList<>();\\n    \\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        levelOrderBottom(root, 0);\\n        return results;\\n    }\\n    \\n    public void levelOrderBottom(TreeNode root, int level){\\n        if (root == null) return; \\n        if (level >= results.size()) results.add(0, new ArrayList<>());\\n        \\n        results.get(results.size() - 1 - level).add(root.val);\\n        levelOrderBottom(root.left, level+1);\\n        levelOrderBottom(root.right, level+1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 619250,
                "title": "19-lines-0ms-100-faster-100-less-memory",
                "content": "Language: Go\\nSpeed: 0ms\\nSpace: O(1)\\n```\\nfunc levelOrderBottom(root *TreeNode) (res [][]int) {\\n\\tres = [][]int{}\\n\\tif root == nil {\\n\\t\\treturn\\n\\t}\\n\\tq := []*TreeNode{root}\\n\\tfor len(q) > 0 {\\n\\t\\tlevel := []int{}\\n\\t\\tfor _, x := range q {\\n\\t\\t\\tq = q[1:]\\n\\t\\t\\tif x.Left != nil {\\n\\t\\t\\t\\tq = append(q, x.Left)\\n\\t\\t\\t}\\n\\t\\t\\tif x.Right != nil {\\n\\t\\t\\t\\tq = append(q, x.Right)\\n\\t\\t\\t}\\n\\t\\t\\tlevel = append(level, x.Val)\\n\\t\\t}\\n\\t\\tres = append(res, level)\\n\\t}\\n\\tfor l, r := 0, len(res)-1; l < r; {\\n\\t\\tres[l], res[r] = res[r], res[l]\\n\\t\\tl++\\n\\t\\tr--\\n\\t}\\n\\treturn\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc levelOrderBottom(root *TreeNode) (res [][]int) {\\n\\tres = [][]int{}\\n\\tif root == nil {\\n\\t\\treturn\\n\\t}\\n\\tq := []*TreeNode{root}\\n\\tfor len(q) > 0 {\\n\\t\\tlevel := []int{}\\n\\t\\tfor _, x := range q {\\n\\t\\t\\tq = q[1:]\\n\\t\\t\\tif x.Left != nil {\\n\\t\\t\\t\\tq = append(q, x.Left)\\n\\t\\t\\t}\\n\\t\\t\\tif x.Right != nil {\\n\\t\\t\\t\\tq = append(q, x.Right)\\n\\t\\t\\t}\\n\\t\\t\\tlevel = append(level, x.Val)\\n\\t\\t}\\n\\t\\tres = append(res, level)\\n\\t}\\n\\tfor l, r := 0, len(res)-1; l < r; {\\n\\t\\tres[l], res[r] = res[r], res[l]\\n\\t\\tl++\\n\\t\\tr--\\n\\t}\\n\\treturn\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 364903,
                "title": "python3-level-order-traversal",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\nfrom collections import deque\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        if root == None: return []\\n        q = deque([(root,0)])\\n        res = []\\n        while q:\\n            n,l = q.popleft()\\n            if len(res) < l+1:\\n                res.append([])\\n            res[l].append(n.val)\\n            if n.left:\\n                q.append((n.left,l+1))\\n            if n.right:\\n                q.append((n.right,l+1))\\n        return res[::-1]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Breadth-First Search"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\nfrom collections import deque\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        if root == None: return []\\n        q = deque([(root,0)])\\n        res = []\\n        while q:\\n            n,l = q.popleft()\\n            if len(res) < l+1:\\n                res.append([])\\n            res[l].append(n.val)\\n            if n.left:\\n                q.append((n.left,l+1))\\n            if n.right:\\n                q.append((n.right,l+1))\\n        return res[::-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 286180,
                "title": "c-queue",
                "content": "```\\npublic class Solution {\\n    public IList<IList<int>> LevelOrderBottom(TreeNode root) {\\n        var result = new List<IList<int>>();\\n        if (root == null) return result;\\n\\n        var queue = new Queue<TreeNode>();\\n        queue.Enqueue(root);\\n\\n        while (queue.Any()) {\\n            var size = queue.Count;\\n            var oneResult = new List<int>();\\n            for (int s = 0; s < size; s++) {\\n                var cur = queue.Dequeue();\\n                oneResult.Add(cur.val);\\n\\n                if (cur.left != null) {\\n                    queue.Enqueue(cur.left);\\n                }\\n\\n                if (cur.right != null) {\\n                    queue.Enqueue(cur.right);\\n                }\\n            }\\n            result.Add(oneResult);\\n        }\\n        \\n        result.Reverse();\\n\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public IList<IList<int>> LevelOrderBottom(TreeNode root) {\\n        var result = new List<IList<int>>();\\n        if (root == null) return result;\\n\\n        var queue = new Queue<TreeNode>();\\n        queue.Enqueue(root);\\n\\n        while (queue.Any()) {\\n            var size = queue.Count;\\n            var oneResult = new List<int>();\\n            for (int s = 0; s < size; s++) {\\n                var cur = queue.Dequeue();\\n                oneResult.Add(cur.val);\\n\\n                if (cur.left != null) {\\n                    queue.Enqueue(cur.left);\\n                }\\n\\n                if (cur.right != null) {\\n                    queue.Enqueue(cur.right);\\n                }\\n            }\\n            result.Add(oneResult);\\n        }\\n        \\n        result.Reverse();\\n\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 168173,
                "title": "my-python-solution-100",
                "content": "```\\ndef levelOrderBottom(self, root):\\n    if root is None:\\n        return []\\n    Order = []\\n    each_level = [root]\\n    while each_level:\\n        Order.insert(0, [item.val for item in each_level])\\n        tmp = []\\n        for item in each_level:\\n            if item.left is not None:\\n                tmp.append(item.left)\\n            if item.right is not None:\\n                tmp.append(item.right)\\n        each_level = tmp\\n    return Order\\n```",
                "solutionTags": [],
                "code": "```\\ndef levelOrderBottom(self, root):\\n    if root is None:\\n        return []\\n    Order = []\\n    each_level = [root]\\n    while each_level:\\n        Order.insert(0, [item.val for item in each_level])\\n        tmp = []\\n        for item in each_level:\\n            if item.left is not None:\\n                tmp.append(item.left)\\n            if item.right is not None:\\n                tmp.append(item.right)\\n        each_level = tmp\\n    return Order\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 35117,
                "title": "share-my-c-solution-using-queue-and-stack-easy-to-understand",
                "content": "    class Solution {\\n    public:\\n        vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n            vector<vector<int>> ret;\\n            int curLevelCount = 0;\\n            queue<TreeNode *> q;\\n            stack<vector<int>> s;\\n            TreeNode *temp = NULL;\\n            \\n            if (root == NULL) return ret;\\n            \\n            q.push(root);\\n            while (!q.empty())\\n            {\\n                curLevelCount = q.size();\\n                vector<int> level;\\n                while (curLevelCount--)\\n                {\\n                    temp = q.front();\\n                    level.push_back(temp->val);\\n                    if (temp->left != NULL)\\n                        q.push(temp->left);\\n                    if (temp->right != NULL)\\n                        q.push(temp->right);\\n                    q.pop();\\n                }\\n                s.push(level);\\n            }\\n            while (!s.empty())\\n            {\\n                ret.push_back(s.top());\\n                s.pop();\\n            }\\n            \\n            return ret;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n            vector<vector<int>> ret;\\n            int curLevelCount = 0;\\n            queue<TreeNode *> q;\\n            stack<vector<int>> s;\\n            TreeNode *temp = NULL;\\n            \\n            if (root == NULL) return ret;\\n            \\n            q.push(root);\\n            while (!q.empty())\\n            {\\n                curLevelCount = q.size();\\n                vector<int> level;\\n                while (curLevelCount--)\\n                {\\n                    temp = q.front();\\n                    level.push_back(temp->val);\\n                    if (temp->left != NULL)\\n                        q.push(temp->left);\\n                    if (temp->right != NULL)\\n                        q.push(temp->right);\\n                    q.pop();\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 35125,
                "title": "1ms-java-clean-solution-with-arraylist",
                "content": "public class Solution {\\n\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> list = new ArrayList<>();\\n        List<List<Integer>> list2 = new ArrayList<>();\\n    \\tif (root == null) return list;\\n    \\ttraversal(list, root, 1);\\n    \\tfor (int i = list.size()-1; i >= 0; i--){\\n    \\t\\tlist2.add(list.get(i));\\n    \\t}\\n    \\treturn list2;\\n    }\\n\\n\\tprivate void traversal(List<List<Integer>> list, TreeNode node, int depth) {\\n\\t\\tif (node == null) return;\\n\\t\\tif (list.size() == depth-1){\\n\\t\\t\\tList<Integer> l1 = new ArrayList<>();\\n\\t\\t\\tl1.add(node.val);\\n\\t\\t\\tlist.add(l1);\\n\\t\\t}\\n\\t\\telse if (list.size() >= depth){\\n\\t\\t\\tList<Integer> l2 = list.get(depth-1);\\n\\t\\t\\tl2.add(node.val);\\n\\t\\t}\\n\\t\\ttraversal(list, node.left, depth + 1 );\\n\\t\\ttraversal(list, node.right, depth + 1 );\\n\\t}\\n}",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> list = new ArrayList<>();\\n        List<List<Integer>> list2 = new ArrayList<>();\\n    \\tif (root == null) return list;\\n    \\ttraversal(list, root, 1);\\n    \\tfor (int i = list.size()-1; i >= 0; i--){\\n    \\t\\tlist2.add(list.get(i));\\n    \\t}",
                "codeTag": "Java"
            },
            {
                "id": 35196,
                "title": "recursive-python-solution-without-reversing",
                "content": "    class Solution:\\n        # @param root, a tree node\\n        # @return a list of lists of integers\\n        def levelOrderBottom(self, root):\\n            #not allowed to reverse the list\\n            result = []\\n            if root == None:\\n                return result\\n            def bfsbottomup(result, prev):\\n                if prev == []:\\n                    return\\n                temp = []\\n                cur = []\\n                for node in prev:\\n                    temp.append(node.val)\\n                    if node.left != None:\\n                        cur.append(node.left)\\n                    if node.right != None:\\n                        cur.append(node.right)\\n                bfsbottomup(result, cur)\\n                result.append(temp)\\n            bfsbottomup(result, [root])\\n            return result",
                "solutionTags": [],
                "code": "    class Solution:\\n        # @param root, a tree node\\n        # @return a list of lists of integers\\n        def levelOrderBottom(self, root):\\n            #not allowed to reverse the list\\n            result = []\\n            if root == None:\\n                return result\\n            def bfsbottomup(result, prev):\\n                if prev == []:\\n                    return\\n                temp = []\\n                cur = []\\n                for node in prev:\\n                    temp.append(node.val)\\n                    if node.left != None:\\n                        cur.append(node.left)\\n                    if node.right != None:\\n                        cur.append(node.right)\\n                bfsbottomup(result, cur)\\n                result.append(temp)\\n            bfsbottomup(result, [root])\\n            return result",
                "codeTag": "Java"
            },
            {
                "id": 3789413,
                "title": "binary-tree-level-order-traversal-ii",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n![image.png](https://assets.leetcode.com/users/images/0e8ca253-d195-4fb9-b708-41f35e9c367d_1689794170.4630532.png)\\n\\n# Code\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        l=defaultdict(list)\\n        def dfs(node,h):\\n            if node is None:\\n                return\\n            l[h].append(node.val)\\n            dfs(node.left,h+1)\\n            dfs(node.right,h+1)\\n        dfs(root,0)\\n        l=dict(sorted(l.items(),key=lambda x:x[0],reverse=True))\\n        return l.values()\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        l=defaultdict(list)\\n        def dfs(node,h):\\n            if node is None:\\n                return\\n            l[h].append(node.val)\\n            dfs(node.left,h+1)\\n            dfs(node.right,h+1)\\n        dfs(root,0)\\n        l=dict(sorted(l.items(),key=lambda x:x[0],reverse=True))\\n        return l.values()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3717480,
                "title": "c-100-fastest-easy-bfs-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(root==NULL) return ans;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            int ls=q.size();\\n             vector<int> level;\\n            for(int i=0;i<ls;i++)\\n            {\\n                TreeNode* temp=q.front();\\n               q.pop();\\n               level.push_back(temp->val);\\n               if(temp->left){q.push(temp->left);}\\n               if(temp->right){q.push(temp->right);}\\n            }\\n            ans.push_back(level);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Breadth-First Search",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(root==NULL) return ans;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            int ls=q.size();\\n             vector<int> level;\\n            for(int i=0;i<ls;i++)\\n            {\\n                TreeNode* temp=q.front();\\n               q.pop();\\n               level.push_back(temp->val);\\n               if(temp->left){q.push(temp->left);}\\n               if(temp->right){q.push(temp->right);}\\n            }\\n            ans.push_back(level);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3638272,
                "title": "simple-java-solution-using-bfs",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSimilar to Level order traversal.\\nThe main objective of the approach isto store the same level nodes in a Queue and traverse them to find the child nodes.\\nFinally,reverse the two dimensional list.\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        Queue<TreeNode> q=new LinkedList<TreeNode>();\\n        if(root==null) return new ArrayList<List<Integer>>();\\n        List<Integer> l=new ArrayList<Integer>();\\n        List<List<Integer>> ml=new ArrayList<List<Integer>>();\\n        q.add(root);\\n        l.add(root.val);\\n        ml.add(new ArrayList<Integer>(l));\\n        while(q.size()!=0){\\n            int n=q.size();\\n            List<Integer> nl=new ArrayList<Integer>();\\n            for(int i=0;i<n;i++){\\n                TreeNode r=q.poll();\\n                if(r.left!=null){\\n                    nl.add(r.left.val);\\n                    q.add(r.left);\\n                }\\n                if(r.right!=null){\\n                    nl.add(r.right.val);\\n                    q.add(r.right);\\n                }\\n            }\\n            if(nl.size()!=0) ml.add(new ArrayList<Integer>(nl));\\n        }\\n        Collections.reverse(ml);\\n        return ml;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        Queue<TreeNode> q=new LinkedList<TreeNode>();\\n        if(root==null) return new ArrayList<List<Integer>>();\\n        List<Integer> l=new ArrayList<Integer>();\\n        List<List<Integer>> ml=new ArrayList<List<Integer>>();\\n        q.add(root);\\n        l.add(root.val);\\n        ml.add(new ArrayList<Integer>(l));\\n        while(q.size()!=0){\\n            int n=q.size();\\n            List<Integer> nl=new ArrayList<Integer>();\\n            for(int i=0;i<n;i++){\\n                TreeNode r=q.poll();\\n                if(r.left!=null){\\n                    nl.add(r.left.val);\\n                    q.add(r.left);\\n                }\\n                if(r.right!=null){\\n                    nl.add(r.right.val);\\n                    q.add(r.right);\\n                }\\n            }\\n            if(nl.size()!=0) ml.add(new ArrayList<Integer>(nl));\\n        }\\n        Collections.reverse(ml);\\n        return ml;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3601291,
                "title": "c-easy-implementation-using-queue-stack-vectors",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        //int i=0;\\n        vector<vector<int>> v;\\n         if(root==NULL) return v;\\n        queue<TreeNode*>q;\\n       \\n        q.push(root);\\n        q.push(NULL);\\n        vector<int>v1;\\n        while(!q.empty()){\\n            TreeNode *cur=q.front();\\n            q.pop();\\n            \\n            if(cur==NULL){\\n                v.push_back(v1);\\n                v1.resize(0);\\n                if (q.size() > 0) {\\n                    q.push(NULL);\\n                }\\n            }else{\\n                    v1.push_back(cur->val);\\n            if(cur->left!=NULL)q.push(cur->left);\\n            if(cur->right!=NULL)q.push(cur->right);\\n            }\\n            \\n            \\n        }\\n        stack<vector<int>>s;\\n        int n=v.size();\\n        for(int i=0;i<n;i++){\\n            s.push(v[i]);\\n        }\\n        vector<vector<int>> ans;\\n        while(!s.empty()){\\n            ans.push_back(s.top());\\n            s.pop();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Queue"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        //int i=0;\\n        vector<vector<int>> v;\\n         if(root==NULL) return v;\\n        queue<TreeNode*>q;\\n       \\n        q.push(root);\\n        q.push(NULL);\\n        vector<int>v1;\\n        while(!q.empty()){\\n            TreeNode *cur=q.front();\\n            q.pop();\\n            \\n            if(cur==NULL){\\n                v.push_back(v1);\\n                v1.resize(0);\\n                if (q.size() > 0) {\\n                    q.push(NULL);\\n                }\\n            }else{\\n                    v1.push_back(cur->val);\\n            if(cur->left!=NULL)q.push(cur->left);\\n            if(cur->right!=NULL)q.push(cur->right);\\n            }\\n            \\n            \\n        }\\n        stack<vector<int>>s;\\n        int n=v.size();\\n        for(int i=0;i<n;i++){\\n            s.push(v[i]);\\n        }\\n        vector<vector<int>> ans;\\n        while(!s.empty()){\\n            ans.push_back(s.top());\\n            s.pop();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3582729,
                "title": "one-of-the-easiest-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n           \\n        vector<vector<int>> output;\\n        if(root==nullptr){\\n            return output;\\n        }\\n        stack<vector<int>> s;\\n        queue<TreeNode*> pq;\\n        pq.push(root);\\n        while(!pq.empty()){\\n           \\n            int n=pq.size();\\n            vector<int> temp(n,0);\\n            for(int i=0;i<n;i++){\\n                 auto curr=pq.front();\\n                if(curr->left) pq.push(curr->left);\\n                if(curr->right) pq.push(curr->right);\\n                temp[i]=curr->val;\\n                pq.pop();\\n            }\\n            s.push(temp);\\n           // temp.erase();\\n        }\\n  while(!s.empty()){\\n      output.push_back(s.top());\\n      s.pop();\\n  }\\n        return output;\\n    \\n        \\n    }\\n};\\n\\n\\n     \\n```",
                "solutionTags": [
                    "C++",
                    "Stack",
                    "Breadth-First Search"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n           \\n        vector<vector<int>> output;\\n        if(root==nullptr){\\n            return output;\\n        }\\n        stack<vector<int>> s;\\n        queue<TreeNode*> pq;\\n        pq.push(root);\\n        while(!pq.empty()){\\n           \\n            int n=pq.size();\\n            vector<int> temp(n,0);\\n            for(int i=0;i<n;i++){\\n                 auto curr=pq.front();\\n                if(curr->left) pq.push(curr->left);\\n                if(curr->right) pq.push(curr->right);\\n                temp[i]=curr->val;\\n                pq.pop();\\n            }\\n            s.push(temp);\\n           // temp.erase();\\n        }\\n  while(!s.empty()){\\n      output.push_back(s.top());\\n      s.pop();\\n  }\\n        return output;\\n    \\n        \\n    }\\n};\\n\\n\\n     \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3429842,
                "title": "using-bfs-linkedlist-as-stack-easy-o-n-1ms-multiple-languages",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```java []\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        \\n        List<List<Integer>> stack = new LinkedList<>();\\n        \\n        Queue<TreeNode> queue = new LinkedList<>();\\n        \\n        if(root!=null){\\n            queue.offer(root);\\n        }\\n        \\n        while(!queue.isEmpty()){\\n            int levelSize = queue.size();\\n            List<Integer> level = new ArrayList<>();\\n            for(int i=0;i<levelSize;i++){\\n                TreeNode node = queue.poll();\\n                level.add(node.val);\\n                \\n                if(node.left!=null) queue.offer(node.left);\\n                if(node.right!=null) queue.offer(node.right);\\n            }\\n            stack.add(0,level);\\n        }\\n        return stack;  \\n    }\\n}\\n```\\n```cpp []\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> stack;\\n        queue<TreeNode*> queue;\\n        \\n        if (root != nullptr) {\\n            queue.push(root);\\n        }\\n        \\n        while (!queue.empty()) {\\n            int levelSize = queue.size();\\n            vector<int> level;\\n            for (int i = 0; i < levelSize; i++) {\\n                TreeNode* node = queue.front();\\n                queue.pop();\\n                \\n                level.push_back(node->val);\\n                \\n                if (node->left != nullptr) {\\n                    queue.push(node->left);\\n                }\\n                if (node->right != nullptr) {\\n                    queue.push(node->right);\\n                }\\n            }\\n            stack.insert(stack.begin(), level);\\n        }\\n        \\n        return stack;\\n    }\\n};\\n```\\n```python []\\nfrom collections import deque\\n\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        stack = []\\n        queue = deque()\\n        \\n        if root:\\n            queue.append(root)\\n        \\n        while queue:\\n            level_size = len(queue)\\n            level = []\\n            for _ in range(level_size):\\n                node = queue.popleft()\\n                level.append(node.val)\\n                \\n                if node.left:\\n                    queue.append(node.left)\\n                if node.right:\\n                    queue.append(node.right)\\n            \\n            stack.insert(0, level)\\n        \\n        return stack\\n```\\n```javascript []\\nclass Solution {\\n    levelOrderBottom(root) {\\n        let stack = [];\\n        let queue = [];\\n        \\n        if (root) {\\n            queue.push(root);\\n        }\\n        \\n        while (queue.length > 0) {\\n            let levelSize = queue.length;\\n            let level = [];\\n            \\n            for (let i = 0; i < levelSize; i++) {\\n                let node = queue.shift();\\n                level.push(node.val);\\n                \\n                if (node.left) {\\n                    queue.push(node.left);\\n                }\\n                if (node.right) {\\n                    queue.push(node.right);\\n                }\\n            }\\n            \\n            stack.unshift(level);\\n        }\\n        \\n        return stack;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Linked List",
                    "Breadth-First Search"
                ],
                "code": "```java []\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        \\n        List<List<Integer>> stack = new LinkedList<>();\\n        \\n        Queue<TreeNode> queue = new LinkedList<>();\\n        \\n        if(root!=null){\\n            queue.offer(root);\\n        }\\n        \\n        while(!queue.isEmpty()){\\n            int levelSize = queue.size();\\n            List<Integer> level = new ArrayList<>();\\n            for(int i=0;i<levelSize;i++){\\n                TreeNode node = queue.poll();\\n                level.add(node.val);\\n                \\n                if(node.left!=null) queue.offer(node.left);\\n                if(node.right!=null) queue.offer(node.right);\\n            }\\n            stack.add(0,level);\\n        }\\n        return stack;  \\n    }\\n}\\n```\n```cpp []\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> stack;\\n        queue<TreeNode*> queue;\\n        \\n        if (root != nullptr) {\\n            queue.push(root);\\n        }\\n        \\n        while (!queue.empty()) {\\n            int levelSize = queue.size();\\n            vector<int> level;\\n            for (int i = 0; i < levelSize; i++) {\\n                TreeNode* node = queue.front();\\n                queue.pop();\\n                \\n                level.push_back(node->val);\\n                \\n                if (node->left != nullptr) {\\n                    queue.push(node->left);\\n                }\\n                if (node->right != nullptr) {\\n                    queue.push(node->right);\\n                }\\n            }\\n            stack.insert(stack.begin(), level);\\n        }\\n        \\n        return stack;\\n    }\\n};\\n```\n```python []\\nfrom collections import deque\\n\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        stack = []\\n        queue = deque()\\n        \\n        if root:\\n            queue.append(root)\\n        \\n        while queue:\\n            level_size = len(queue)\\n            level = []\\n            for _ in range(level_size):\\n                node = queue.popleft()\\n                level.append(node.val)\\n                \\n                if node.left:\\n                    queue.append(node.left)\\n                if node.right:\\n                    queue.append(node.right)\\n            \\n            stack.insert(0, level)\\n        \\n        return stack\\n```\n```javascript []\\nclass Solution {\\n    levelOrderBottom(root) {\\n        let stack = [];\\n        let queue = [];\\n        \\n        if (root) {\\n            queue.push(root);\\n        }\\n        \\n        while (queue.length > 0) {\\n            let levelSize = queue.length;\\n            let level = [];\\n            \\n            for (let i = 0; i < levelSize; i++) {\\n                let node = queue.shift();\\n                level.push(node.val);\\n                \\n                if (node.left) {\\n                    queue.push(node.left);\\n                }\\n                if (node.right) {\\n                    queue.push(node.right);\\n                }\\n            }\\n            \\n            stack.unshift(level);\\n        }\\n        \\n        return stack;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3422984,
                "title": "using-stack-and-queue-runtime-1ms",
                "content": "\\n\\n# Approach\\nWe were making use of a queue in Level-order traversal top-down approach but for this bottom-up approach, we can simply do a breadth first search and as elements are being added to the queue level-wise, we can remove those elements and store it in a stack, level by level. The resultant list is obtained by popping elements from the stack. \\n\\n\\n\\n- # Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> result = new ArrayList<>();\\n        Queue<TreeNode> q = new LinkedList<>();\\n        \\n        Stack<List<Integer>> stack =new Stack();\\n\\n        if(root==null)\\n        return result;\\n\\n        q.add(root);\\n        \\n        while(!q.isEmpty())\\n        {\\n            int size = q.size();\\n            List<Integer> list = new ArrayList<>();\\n            for(int i=0;i<size;i++)\\n            {   \\n                TreeNode node = q.remove();\\n                list.add(node.val);\\n\\n                if(node.left!=null)\\n                q.add(node.left);\\n\\n                if(node.right!=null)\\n                q.add(node.right);\\n            }\\n            stack.push(list);\\n\\n        }\\n        while(!stack.isEmpty())\\n        result.add(stack.pop());\\n\\n        return result;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Stack",
                    "Queue"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> result = new ArrayList<>();\\n        Queue<TreeNode> q = new LinkedList<>();\\n        \\n        Stack<List<Integer>> stack =new Stack();\\n\\n        if(root==null)\\n        return result;\\n\\n        q.add(root);\\n        \\n        while(!q.isEmpty())\\n        {\\n            int size = q.size();\\n            List<Integer> list = new ArrayList<>();\\n            for(int i=0;i<size;i++)\\n            {   \\n                TreeNode node = q.remove();\\n                list.add(node.val);\\n\\n                if(node.left!=null)\\n                q.add(node.left);\\n\\n                if(node.right!=null)\\n                q.add(node.right);\\n            }\\n            stack.push(list);\\n\\n        }\\n        while(!stack.isEmpty())\\n        result.add(stack.pop());\\n\\n        return result;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3328371,
                "title": "easy-c-code-100-beats-must-read-best-explanation",
                "content": "# Intuition\\nThe level order traversal II is same as that of level order traversal I i.e [https://leetcode.com/problems/binary-tree-level-order-traversal/]()\\nonly the difference is that we have to return the final vector by just reversing it.\\n\\n# Approach\\nThis problem can be solved using queue. \\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n      vector<vector<int>> ans;\\n      if(root==NULL) return ans;\\n      queue<TreeNode* > q;\\n      q.push(root);\\n      while(!q.empty()){\\n          int a= q.size();\\n          vector<int> v;\\n          for(int i=0;i<a;i++){\\n              TreeNode* node= q.front();\\n              q.pop();\\n              v.push_back(node->val);\\n              if(node->left!= NULL)\\n              q.push(node->left);\\n               if(node->right!= NULL)\\n              q.push(node->right);\\n              \\n          }\\n          ans.push_back(v);\\n      }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Tree",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n      vector<vector<int>> ans;\\n      if(root==NULL) return ans;\\n      queue<TreeNode* > q;\\n      q.push(root);\\n      while(!q.empty()){\\n          int a= q.size();\\n          vector<int> v;\\n          for(int i=0;i<a;i++){\\n              TreeNode* node= q.front();\\n              q.pop();\\n              v.push_back(node->val);\\n              if(node->left!= NULL)\\n              q.push(node->left);\\n               if(node->right!= NULL)\\n              q.push(node->right);\\n              \\n          }\\n          ans.push_back(v);\\n      }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3206079,
                "title": "easy-c-solution-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root==NULL)\\n        return {};\\n        vector<vector<int>>res;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n       \\n        while(q.empty()==false)\\n        {\\n           int count=q.size();\\n            vector<int>v;\\n           for(int i=0;i<count;i++)\\n           {\\n           TreeNode *curr=q.front();\\n            q.pop();\\n           //res.push_back(curr);\\n            \\n           if(curr->left!=NULL)\\n           q.push(curr->left);\\n           if(curr->right!=NULL)\\n           q.push(curr->right);\\n           v.push_back(curr->val);\\n           }\\n         res.push_back(v);\\n        }\\n        reverse(res.begin(),res.end());\\n        return res;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root==NULL)\\n        return {};\\n        vector<vector<int>>res;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n       \\n        while(q.empty()==false)\\n        {\\n           int count=q.size();\\n            vector<int>v;\\n           for(int i=0;i<count;i++)\\n           {\\n           TreeNode *curr=q.front();\\n            q.pop();\\n           //res.push_back(curr);\\n            \\n           if(curr->left!=NULL)\\n           q.push(curr->left);\\n           if(curr->right!=NULL)\\n           q.push(curr->right);\\n           v.push_back(curr->val);\\n           }\\n         res.push_back(v);\\n        }\\n        reverse(res.begin(),res.end());\\n        return res;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3200755,
                "title": "c-best-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void rec(TreeNode* root, int level) {\\n        if (!root) return;\\n        res[depth - level - 1].push_back(root->val);\\n        rec(root->left, level+1);\\n        rec(root->right, level+1);\\n    }\\n    int getDepth(TreeNode* root) {\\n        if (!root) return 0;\\n        return max(getDepth(root->left), getDepth(root->right)) + 1;\\n    }\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        depth = getDepth(root);\\n        res.assign(depth, {});\\n        rec(root, 0);\\n        return res;\\n    }\\nprivate:\\n    vector<vector<int>> res;\\n    int depth;\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void rec(TreeNode* root, int level) {\\n        if (!root) return;\\n        res[depth - level - 1].push_back(root->val);\\n        rec(root->left, level+1);\\n        rec(root->right, level+1);\\n    }\\n    int getDepth(TreeNode* root) {\\n        if (!root) return 0;\\n        return max(getDepth(root->left), getDepth(root->right)) + 1;\\n    }\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        depth = getDepth(root);\\n        res.assign(depth, {});\\n        rec(root, 0);\\n        return res;\\n    }\\nprivate:\\n    vector<vector<int>> res;\\n    int depth;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3191996,
                "title": "easy-to-understand-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n       vector<vector<int>> ans;\\n        if(root == NULL) return ans;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            int size = q.size();\\n            vector<int> v(size);\\n            for(int i =0;i<size;i++)\\n            {\\n                TreeNode* frontNode = q.front();\\n                q.pop();\\n                v[i] = frontNode->val;\\n                if(frontNode->left) q.push(frontNode->left);\\n                if(frontNode->right) q.push(frontNode->right);\\n            } \\n            ans.push_back(v);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Queue"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n       vector<vector<int>> ans;\\n        if(root == NULL) return ans;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            int size = q.size();\\n            vector<int> v(size);\\n            for(int i =0;i<size;i++)\\n            {\\n                TreeNode* frontNode = q.front();\\n                q.pop();\\n                v[i] = frontNode->val;\\n                if(frontNode->left) q.push(frontNode->left);\\n                if(frontNode->right) q.push(frontNode->right);\\n            } \\n            ans.push_back(v);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3191870,
                "title": "binary-tree-level-order-traversal-ii-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThis solution also uses a queue to process the tree level by level, and the final result is returned in reversed order. It has the same time and space complexity as the previous solution.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n  def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n    if not root:\\n        return []\\n    \\n    queue = [root]\\n    result = []\\n    \\n    while queue:\\n        level_size = len(queue)\\n        current_level = []\\n        \\n        for i in range(level_size):\\n            current_node = queue.pop(0)\\n            current_level.append(current_node.val)\\n            \\n            if current_node.left:\\n                queue.append(current_node.left)\\n            if current_node.right:\\n                queue.append(current_node.right)\\n        \\n        result.append(current_level)\\n    \\n    return result[::-1]\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Tree",
                    "Breadth-First Search",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n  def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n    if not root:\\n        return []\\n    \\n    queue = [root]\\n    result = []\\n    \\n    while queue:\\n        level_size = len(queue)\\n        current_level = []\\n        \\n        for i in range(level_size):\\n            current_node = queue.pop(0)\\n            current_level.append(current_node.val)\\n            \\n            if current_node.left:\\n                queue.append(current_node.left)\\n            if current_node.right:\\n                queue.append(current_node.right)\\n        \\n        result.append(current_level)\\n    \\n    return result[::-1]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3150543,
                "title": "100-faster-using-queue-c-easy-sol",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tvector<int> ans;\\n\\n\\t\\tvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n\\t\\t\\tvector<vector<int>>v;\\n\\t\\t\\tqueue<TreeNode*> q;\\n\\t\\t\\tif(root==NULL){\\n\\t\\t\\t\\treturn v;\\n\\t\\t\\t}\\n\\t\\t\\tq.push(root);\\n\\t\\t\\tq.push(NULL);\\n\\t\\t\\tv.push_back({root->val});\\n\\t\\t\\twhile(q.size()>0){\\n\\t\\t\\t\\tTreeNode*temp=q.front();\\n\\t\\t\\t\\tq.pop();\\n\\t\\t\\t\\tif(!temp){\\n\\t\\t\\t\\t\\tif(ans.size()>0){\\n\\t\\t\\t\\t\\t\\tv.push_back(ans);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tans.clear();\\n\\t\\t\\t\\t\\tif(q.size()>0){\\n\\t\\t\\t\\t\\t\\tq.push(NULL);\\n\\t\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tif(temp->left){\\n\\t\\t\\t\\t\\t\\tq.push(temp->left);\\n\\t\\t\\t\\t\\t\\tif(temp->left!=NULL){\\n\\t\\t\\t\\t\\t\\t\\tans.push_back(temp->left->val);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif(temp->right){\\n\\t\\t\\t\\t\\t\\tq.push(temp->right);\\n\\t\\t\\t\\t\\t\\tif(temp->right!=NULL){\\n\\t\\t\\t\\t\\t\\t\\tans.push_back(temp->right->val);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\treverse(v.begin(),v.end());\\n\\t\\t\\treturn v;\\n\\t\\t}\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tvector<int> ans;\\n\\n\\t\\tvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n\\t\\t\\tvector<vector<int>>v;\\n\\t\\t\\tqueue<TreeNode*> q;\\n\\t\\t\\tif(root==NULL){\\n\\t\\t\\t\\treturn v;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2974269,
                "title": "java-treemap-dfs-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        Map<Integer, List<Integer>> map = new TreeMap<>(Collections.reverseOrder());\\n        traverseBST(root, map, 0);\\n        List<List<Integer>> result = new ArrayList<>();\\n        for (int key : map.keySet()) result.add(map.get(key));\\n        return result;\\n    }\\n\\n    private void traverseBST(TreeNode node, Map<Integer, List<Integer>> map, int lvl) {\\n        if (node == null) return;\\n\\n        lvl++;\\n\\n        traverseBST(node.left, map, lvl);\\n\\n        if (map.containsKey(lvl)) {\\n            map.get(lvl).add(node.val);\\n        } else {\\n            List<Integer> list = new ArrayList<>();\\n            list.add(node.val);\\n            map.put(lvl, list);\\n        }\\n\\n        traverseBST(node.right, map, lvl);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Tree"
                ],
                "code": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        Map<Integer, List<Integer>> map = new TreeMap<>(Collections.reverseOrder());\\n        traverseBST(root, map, 0);\\n        List<List<Integer>> result = new ArrayList<>();\\n        for (int key : map.keySet()) result.add(map.get(key));\\n        return result;\\n    }\\n\\n    private void traverseBST(TreeNode node, Map<Integer, List<Integer>> map, int lvl) {\\n        if (node == null) return;\\n\\n        lvl++;\\n\\n        traverseBST(node.left, map, lvl);\\n\\n        if (map.containsKey(lvl)) {\\n            map.get(lvl).add(node.val);\\n        } else {\\n            List<Integer> list = new ArrayList<>();\\n            list.add(node.val);\\n            map.put(lvl, list);\\n        }\\n\\n        traverseBST(node.right, map, lvl);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2930983,
                "title": "c-level-order-traversal-with-bfs-faster-than-75-clean-concise-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n\\n       vector<vector<int>>LevelOrder;\\n\\n       if(root==NULL) return {};\\n\\n       queue<TreeNode*>q;\\n       q.push(root);\\n\\n       while(!q.empty())\\n       {\\n\\n           int n = q.size();\\n\\n           vector<int>level;\\n        \\n           for(int i = 0; i < n; ++i)\\n           {\\n               auto temp = q.front();\\n               q.pop();\\n\\n               if(temp->left!=NULL) q.push(temp->left);\\n\\n               if(temp->right!=NULL) q.push(temp->right);\\n              \\n\\n               level.push_back(temp->val);\\n\\n           }\\n\\n           LevelOrder.push_back(level);\\n\\n       }\\n       \\n       reverse(LevelOrder.begin(),LevelOrder.end());\\n\\n       return LevelOrder;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n\\n       vector<vector<int>>LevelOrder;\\n\\n       if(root==NULL) return {};\\n\\n       queue<TreeNode*>q;\\n       q.push(root);\\n\\n       while(!q.empty())\\n       {\\n\\n           int n = q.size();\\n\\n           vector<int>level;\\n        \\n           for(int i = 0; i < n; ++i)\\n           {\\n               auto temp = q.front();\\n               q.pop();\\n\\n               if(temp->left!=NULL) q.push(temp->left);\\n\\n               if(temp->right!=NULL) q.push(temp->right);\\n              \\n\\n               level.push_back(temp->val);\\n\\n           }\\n\\n           LevelOrder.push_back(level);\\n\\n       }\\n       \\n       reverse(LevelOrder.begin(),LevelOrder.end());\\n\\n       return LevelOrder;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2901665,
                "title": "c-bfs-easy-approach",
                "content": "Here is my c++ code for this problem\\n# Complexity\\n- Time complexity:O(E * logV)\\n\\n- Space complexity:O(E + V)\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>>ans;\\n        if(!root){return {};}\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            int l=q.size();\\n            vector<int>temp;\\n            for(int i=0; i<l; i++){  \\n                root=q.front();\\n                q.pop();\\n                temp.push_back(root->val);\\n                if(root->left){q.push(root->left);}\\n                if(root->right){q.push(root->right);}\\n            }\\n            ans.push_back(temp);\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Tree",
                    "Breadth-First Search",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>>ans;\\n        if(!root){return {};}\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            int l=q.size();\\n            vector<int>temp;\\n            for(int i=0; i<l; i++){  \\n                root=q.front();\\n                q.pop();\\n                temp.push_back(root->val);\\n                if(root->left){q.push(root->left);}\\n                if(root->right){q.push(root->right);}\\n            }\\n            ans.push_back(temp);\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2714515,
                "title": "python-bfs-simple",
                "content": "# Code\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        def checkReverse(ans):\\n            l,r = 0,len(ans)-1\\n            while l<=r:\\n                ans[l],ans[r] = ans[r],ans[l]\\n                l+=1\\n                r-=1\\n            return ans\\n\\n        if not root: return None\\n        q,ans = [root],[]\\n        while q:\\n            n,l = len(q),[]\\n            for i in range(n):\\n                curr = q.pop(0)\\n                l.append(curr.val)\\n                if curr.left:\\n                    q.append(curr.left)\\n                if curr.right:\\n                    q.append(curr.right)\\n            ans.append(l)\\n        return checkReverse(ans)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        def checkReverse(ans):\\n            l,r = 0,len(ans)-1\\n            while l<=r:\\n                ans[l],ans[r] = ans[r],ans[l]\\n                l+=1\\n                r-=1\\n            return ans\\n\\n        if not root: return None\\n        q,ans = [root],[]\\n        while q:\\n            n,l = len(q),[]\\n            for i in range(n):\\n                curr = q.pop(0)\\n                l.append(curr.val)\\n                if curr.left:\\n                    q.append(curr.left)\\n                if curr.right:\\n                    q.append(curr.right)\\n            ans.append(l)\\n        return checkReverse(ans)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2622477,
                "title": "4ms-c-solution-post-order-dfs-solution-using-height-of-tree-to-make-levels",
                "content": "The idea is simple.\\nFirst, find the height/depth of binary tree using this function:\\n\\n```\\nint depth(TreeNode* root){\\n        if(root==nullptr) return 0;\\n        int l=depth(root->left);\\n        int r=depth(root->right);\\n        return max(l,r)+1;\\n    }\\n```\\n\\nin the main function declare a `vector<vector<int> ret(d);` where **d is the height/depth** of tree. We will fill this vector with levels of the tree.\\n\\nret[0] will contain the vector of last level.\\nret[1] will contain the vector of 2nd last level\\n.\\n.\\nret[d-1] will contain the vector of first level.\\n\\nwe will use a void type function **helper()** to fill the *ret* vector.\\n\\nThe helper function is defined below:\\n```\\nvoid helper(TreeNode* root,vector<vector<int>> &vec,int d,int it){\\n        if(root==nullptr) return;\\n        \\n        helper(root->left,vec,d,it+1);\\n        helper(root->right,vec,d,it+1);\\n        vec[d-it].push_back(root->val);\\n    }\\n```\\n\\nThis functions takes the following parameters:\\n1. *root* of binary tree.\\n2. `vector<vector<int>>` as reference (so that *ret* in main() is modified too).\\n3. **depth of tree-1;** (minus 1 to avoid segmentation fault for vector).\\n4. `int it` which tells the current level we are at (starting from 0 to d-1).\\n\\nEverytime we encounter a leaf node, we push it\\'s value to the *vec* at the **correct index** according to it\\'s level in the tree.\\nThe correct index will be **d - it**.\\nsuppose the depth of tree is 3. therefore helper function will recieve d=2.\\nIf we are at the leaf node of the second level (i.e it=1, since it starts from 0), root->val should be pushed on with second level values. i.e at index 1 of *vec*. which d - it = 2 -1 = 1;\\n\\nthe main function will be:\\n```\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root==nullptr) return {};\\n        int d=depth(root);\\n        vector<vector<int>> ret(d);\\n        helper(root,ret,d-1,0);\\n        return ret;\\n    }\\n```\\n\\nIf you have any trouble understanding the solution feel free to comment your doubt.\\n\\nDon\\'t forget to upvote the solution if you liked it :)\\n\\n",
                "solutionTags": [
                    "C",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\nint depth(TreeNode* root){\\n        if(root==nullptr) return 0;\\n        int l=depth(root->left);\\n        int r=depth(root->right);\\n        return max(l,r)+1;\\n    }\\n```\n```\\nvoid helper(TreeNode* root,vector<vector<int>> &vec,int d,int it){\\n        if(root==nullptr) return;\\n        \\n        helper(root->left,vec,d,it+1);\\n        helper(root->right,vec,d,it+1);\\n        vec[d-it].push_back(root->val);\\n    }\\n```\n```\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root==nullptr) return {};\\n        int d=depth(root);\\n        vector<vector<int>> ret(d);\\n        helper(root,ret,d-1,0);\\n        return ret;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2587591,
                "title": "java-bfs-solution",
                "content": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> nm=new ArrayList<>();\\n        if(root==null)\\n        {\\n            return nm;\\n        }\\n        Queue<TreeNode> kk=new LinkedList<>();\\n        kk.offer(root);\\n        int n=0;\\n        while(!kk.isEmpty())\\n        {\\n            int p=kk.size();\\n            List<Integer> k=new ArrayList<>();\\n            for(int i=1;i<=p;i++)\\n            {\\n                if(kk.peek().left!=null)\\n                {\\n                    kk.offer(kk.peek().left);\\n                }\\n                if(kk.peek().right!=null)\\n                {\\n                    kk.offer(kk.peek().right);\\n                }\\n                k.add(kk.poll().val);\\n            }\\n            nm.add(0,k); // new list is always added to the beginning of the list\\n        }\\n        return nm;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Breadth-First Search"
                ],
                "code": "class Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> nm=new ArrayList<>();\\n        if(root==null)\\n        {\\n            return nm;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2583528,
                "title": "java-easy-solution",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> res = new ArrayList<>();\\n        if(root==null){\\n            return res;\\n        }\\n        Queue<TreeNode> q = new LinkedList<TreeNode>();\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            List<Integer> cur = new ArrayList<Integer>();\\n            int size = q.size();\\n            for (int i=0; i<size; i++){\\n                TreeNode temp = q.poll();\\n                cur.add(temp.val);\\n                if(temp.left!=null){\\n                    q.add(temp.left);\\n                }\\n                if(temp.right!=null){\\n                    q.add(temp.right);\\n                }\\n            }\\n            res.add(cur);\\n        }\\n        Collections.reverse(res);\\n        return res;\\n    }\\n}\\n```\\n# upvote if u found it useful",
                "solutionTags": [
                    "Java",
                    "Breadth-First Search"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        List<List<Integer>> res = new ArrayList<>();\\n        if(root==null){\\n            return res;\\n        }\\n        Queue<TreeNode> q = new LinkedList<TreeNode>();\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            List<Integer> cur = new ArrayList<Integer>();\\n            int size = q.size();\\n            for (int i=0; i<size; i++){\\n                TreeNode temp = q.poll();\\n                cur.add(temp.val);\\n                if(temp.left!=null){\\n                    q.add(temp.left);\\n                }\\n                if(temp.right!=null){\\n                    q.add(temp.right);\\n                }\\n            }\\n            res.add(cur);\\n        }\\n        Collections.reverse(res);\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2276465,
                "title": "c-using-queue-without-reverse",
                "content": "calculate height of tree\\nand result vector of height size\\n```\\nclass Solution {\\nprivate:\\n    int height(TreeNode* root){\\n        if(root == NULL) return 0;\\n        \\n        return 1 + max(height(root->right), height(root->left));\\n    }\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root == NULL) return {};\\n        \\n        queue<TreeNode*> q;\\n        q.push(root);\\n        \\n        \\n        int h = height(root);\\n        cout<<h;\\n        \\n        vector<vector<int>> res(h);\\n        \\n        while(!q.empty()){\\n            int n = q.size();\\n            \\n            vector<int> v;\\n            \\n            for(int i =0;i<n;i++){\\n                auto node = q.front();\\n                q.pop();\\n                v.push_back(node->val);\\n                \\n                if(node->left) q.push(node->left);\\n                if(node->right) q.push(node->right);\\n            }\\n            res[--h] = v;\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Queue"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    int height(TreeNode* root){\\n        if(root == NULL) return 0;\\n        \\n        return 1 + max(height(root->right), height(root->left));\\n    }\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root == NULL) return {};\\n        \\n        queue<TreeNode*> q;\\n        q.push(root);\\n        \\n        \\n        int h = height(root);\\n        cout<<h;\\n        \\n        vector<vector<int>> res(h);\\n        \\n        while(!q.empty()){\\n            int n = q.size();\\n            \\n            vector<int> v;\\n            \\n            for(int i =0;i<n;i++){\\n                auto node = q.front();\\n                q.pop();\\n                v.push_back(node->val);\\n                \\n                if(node->left) q.push(node->left);\\n                if(node->right) q.push(node->right);\\n            }\\n            res[--h] = v;\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2228926,
                "title": "solution-using-stack-and-queue-without-reverse-function",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(root==NULL){\\n            return ans;\\n        }\\n        stack<vector<int>> st;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            int n=q.size();\\n            vector<int> l;\\n            for(int i=0;i<n;i++){\\n                TreeNode* node=q.front();\\n                q.pop();\\n                l.push_back(node->val);\\n                if(node->left!=NULL){\\n                    q.push(node->left);\\n                }\\n                if(node->right!=NULL){\\n                    q.push(node->right);\\n                }\\n            }\\n            st.push(l);\\n        }\\n        while(!st.empty()){\\n            ans.push_back(st.top());\\n            st.pop();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Stack",
                    "Queue",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> ans;\\n        if(root==NULL){\\n            return ans;\\n        }\\n        stack<vector<int>> st;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            int n=q.size();\\n            vector<int> l;\\n            for(int i=0;i<n;i++){\\n                TreeNode* node=q.front();\\n                q.pop();\\n                l.push_back(node->val);\\n                if(node->left!=NULL){\\n                    q.push(node->left);\\n                }\\n                if(node->right!=NULL){\\n                    q.push(node->right);\\n                }\\n            }\\n            st.push(l);\\n        }\\n        while(!st.empty()){\\n            ans.push_back(st.top());\\n            st.pop();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2223062,
                "title": "c-recursive-approach",
                "content": "```\\nclass Solution {\\n    vector<vector<int>>ans;\\npublic:\\n    void visit(TreeNode* root, int level){\\n        if(!root) return;\\n        if(level == ans.size()){\\n            ans.push_back({});\\n        }\\n        ans[level].push_back(root->val);\\n        visit(root->left,level+1);\\n        visit(root->right,level+1);\\n    }\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        visit(root,0);\\n        std::reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```\\n_Happy Coding!_ \\uD83C\\uDF89\\uD83E\\uDD42\\nIf you like the solution, don\\'t forget to upvote! :) \\u2B06\\uFE0F",
                "solutionTags": [
                    "C",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    vector<vector<int>>ans;\\npublic:\\n    void visit(TreeNode* root, int level){\\n        if(!root) return;\\n        if(level == ans.size()){\\n            ans.push_back({});\\n        }\\n        ans[level].push_back(root->val);\\n        visit(root->left,level+1);\\n        visit(root->right,level+1);\\n    }\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        visit(root,0);\\n        std::reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2200813,
                "title": "go-bfs-readable",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc levelOrderBottom(root *TreeNode) [][]int {\\n    var res [][]int\\n    \\n    if root == nil {\\n        return res\\n    }\\n    \\n    var queue []*TreeNode\\n    enqueue(&queue, root)\\n    \\n    for len(queue) > 0 {\\n        queueSize := len(queue)\\n        var level []int\\n        \\n        for i := queueSize - 1; i > -1; i-- {\\n            dequeuedElement := dequeue(&queue)        \\n            level = append(level, dequeuedElement.Val)\\n                    \\n            if dequeuedElement.Left != nil {\\n                enqueue(&queue, dequeuedElement.Left)\\n            }   \\n            \\n            if dequeuedElement.Right != nil {\\n                enqueue(&queue, dequeuedElement.Right)\\n            }\\n        }\\n        \\n        res = append(res, level)\\n    }\\n\\n    l, r := 0, len(res) - 1 \\n    \\n    for l < r {\\n        res[l], res[r] = res[r], res[l]\\n        l++\\n        r--\\n    }\\n    \\n    return res\\n}\\n\\nfunc enqueue(queue *[]*TreeNode, item *TreeNode) {\\n    if queue == nil {\\n        panic(\"nil pointer\")\\n    }\\n    \\n    *queue = append(*queue, item)\\n} \\n\\nfunc dequeue(queue *[]*TreeNode) *TreeNode {\\n    if queue == nil {\\n        panic(\"nil pointer\")\\n    }\\n    \\n    if len(*queue) == 0 {\\n        panic(\"empty queue\")\\n    }\\n    \\n    dequeuedElement := (*queue)[0]\\n    *queue = (*queue)[1:]\\n    \\n    return dequeuedElement\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc levelOrderBottom(root *TreeNode) [][]int {\\n    var res [][]int\\n    \\n    if root == nil {\\n        return res\\n    }\\n    \\n    var queue []*TreeNode\\n    enqueue(&queue, root)\\n    \\n    for len(queue) > 0 {\\n        queueSize := len(queue)\\n        var level []int\\n        \\n        for i := queueSize - 1; i > -1; i-- {\\n            dequeuedElement := dequeue(&queue)        \\n            level = append(level, dequeuedElement.Val)\\n                    \\n            if dequeuedElement.Left != nil {\\n                enqueue(&queue, dequeuedElement.Left)\\n            }   \\n            \\n            if dequeuedElement.Right != nil {\\n                enqueue(&queue, dequeuedElement.Right)\\n            }\\n        }\\n        \\n        res = append(res, level)\\n    }\\n\\n    l, r := 0, len(res) - 1 \\n    \\n    for l < r {\\n        res[l], res[r] = res[r], res[l]\\n        l++\\n        r--\\n    }\\n    \\n    return res\\n}\\n\\nfunc enqueue(queue *[]*TreeNode, item *TreeNode) {\\n    if queue == nil {\\n        panic(\"nil pointer\")\\n    }\\n    \\n    *queue = append(*queue, item)\\n} \\n\\nfunc dequeue(queue *[]*TreeNode) *TreeNode {\\n    if queue == nil {\\n        panic(\"nil pointer\")\\n    }\\n    \\n    if len(*queue) == 0 {\\n        panic(\"empty queue\")\\n    }\\n    \\n    dequeuedElement := (*queue)[0]\\n    *queue = (*queue)[1:]\\n    \\n    return dequeuedElement\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2174062,
                "title": "very-easy-solution-c-solution",
                "content": "**Please upvote :)**\\n\\n```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> res;\\n        vector<int>v;\\n        \\n        if(!root){\\n            return res;\\n        }\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        \\n        while(!q.empty())\\n        {\\n            int n = q.size();\\n            for(int i=0;i<n;i++){\\n                TreeNode* temp = q.front();\\n                q.pop();\\n                \\n                v.push_back(temp->val);\\n                \\n                if(temp->left){\\n                    q.push(temp->left);\\n                }\\n                if(temp->right){\\n                    q.push(temp->right);\\n                }\\n                \\n            }\\n            res.push_back(v); \\n            v.clear();\\n        }\\n        \\n        reverse(res.begin(), res.end());\\n        return res;\\n```",
                "solutionTags": [
                    "C",
                    "Breadth-First Search"
                ],
                "code": "```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> res;\\n        vector<int>v;\\n        \\n        if(!root){\\n            return res;\\n        }\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        \\n        while(!q.empty())\\n        {\\n            int n = q.size();\\n            for(int i=0;i<n;i++){\\n                TreeNode* temp = q.front();\\n                q.pop();\\n                \\n                v.push_back(temp->val);\\n                \\n                if(temp->left){\\n                    q.push(temp->left);\\n                }\\n                if(temp->right){\\n                    q.push(temp->right);\\n                }\\n                \\n            }\\n            res.push_back(v); \\n            v.clear();\\n        }\\n        \\n        reverse(res.begin(), res.end());\\n        return res;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1819267,
                "title": "bfs-simple-solution",
                "content": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        \\n        List<List<Integer>> ans=new ArrayList<>();\\n        \\n        if(root==null)\\n        {\\n            return ans;\\n        }\\n        \\n        Queue<TreeNode> q=new LinkedList<>();\\n        q.add(root);\\n        \\n        while(q.size()!=0)\\n        {\\n            int size=q.size();\\n            List<Integer> list=new ArrayList<>();\\n            \\n            while(size-->0)\\n            {\\n                TreeNode node=q.poll();\\n                list.add(node.val);\\n                if(node.left!=null)\\n                {\\n                    q.add(node.left);\\n                }\\n                if(node.right!=null)\\n                {\\n                    q.add(node.right);\\n                }   \\n            }\\n            ans.add(list);\\n        }\\n        Collections.reverse(ans);  //reverse of level order traversal\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        \\n        List<List<Integer>> ans=new ArrayList<>();\\n        \\n        if(root==null)\\n        {\\n            return ans;\\n        }\\n        \\n        Queue<TreeNode> q=new LinkedList<>();\\n        q.add(root);\\n        \\n        while(q.size()!=0)\\n        {\\n            int size=q.size();\\n            List<Integer> list=new ArrayList<>();\\n            \\n            while(size-->0)\\n            {\\n                TreeNode node=q.poll();\\n                list.add(node.val);\\n                if(node.left!=null)\\n                {\\n                    q.add(node.left);\\n                }\\n                if(node.right!=null)\\n                {\\n                    q.add(node.right);\\n                }   \\n            }\\n            ans.add(list);\\n        }\\n        Collections.reverse(ans);  //reverse of level order traversal\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1777926,
                "title": "binary-tree-level-order-traversal-ii-solution-java",
                "content": "class Solution {\\n  public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n    if (root == null)\\n      return new ArrayList<>();\\n\\n    List<List<Integer>> ans = new ArrayList<>();\\n    Queue<TreeNode> q = new LinkedList<>(Arrays.asList(root));\\n\\n    while (!q.isEmpty()) {\\n      List<Integer> currLevel = new ArrayList<>();\\n      for (int size = q.size(); size > 0; --size) {\\n        TreeNode node = q.poll();\\n        currLevel.add(node.val);\\n        if (node.left != null)\\n          q.offer(node.left);\\n        if (node.right != null)\\n          q.offer(node.right);\\n      }\\n      ans.add(currLevel);\\n    }\\n\\n    Collections.reverse(ans);\\n    return ans;\\n  }\\n}\\n",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "class Solution {\\n  public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n    if (root == null)\\n      return new ArrayList<>();\\n\\n    List<List<Integer>> ans = new ArrayList<>();\\n    Queue<TreeNode> q = new LinkedList<>(Arrays.asList(root));\\n\\n    while (!q.isEmpty()) {\\n      List<Integer> currLevel = new ArrayList<>();\\n      for (int size = q.size(); size > 0; --size) {\\n        TreeNode node = q.poll();\\n        currLevel.add(node.val);\\n        if (node.left != null)\\n          q.offer(node.left);\\n        if (node.right != null)\\n          q.offer(node.right);\\n      }",
                "codeTag": "Java"
            },
            {
                "id": 1761120,
                "title": "using-queue-and-stack",
                "content": "**Used Stack to reverse the order**\\n\\n```\\n    vector<vector<int>> levelOrderBottom(TreeNode *root)\\n    {\\n        vector<vector<int>> ans;\\n        if (!root)\\n            return ans;\\n        queue<TreeNode *> queue;\\n        stack<pair<int, int>> st;\\n        queue.push(root);\\n        int lvl = 0;\\n        while (!queue.empty())\\n        {\\n            int qlen = queue.size();\\n            for (int i = 0; i < qlen; i++)\\n            {\\n                TreeNode *curr = queue.front();\\n                queue.pop();\\n                st.push({curr->val, lvl});\\n                if (curr->right)\\n                    queue.push(curr->right);\\n                if (curr->left)\\n                    queue.push(curr->left);\\n            }\\n            lvl++;\\n        }\\n\\n        lvl--;\\n        vector<int> row;\\n\\n        while (st.empty() == false)\\n        {\\n            if (st.top().second != lvl)\\n            {\\n                ans.push_back(row);\\n                row.clear();\\n                lvl--;\\n            }\\n\\n            row.push_back(st.top().first);\\n            st.pop();\\n        }\\n        ans.push_back(row);\\n\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Stack",
                    "Breadth-First Search",
                    "Queue"
                ],
                "code": "```\\n    vector<vector<int>> levelOrderBottom(TreeNode *root)\\n    {\\n        vector<vector<int>> ans;\\n        if (!root)\\n            return ans;\\n        queue<TreeNode *> queue;\\n        stack<pair<int, int>> st;\\n        queue.push(root);\\n        int lvl = 0;\\n        while (!queue.empty())\\n        {\\n            int qlen = queue.size();\\n            for (int i = 0; i < qlen; i++)\\n            {\\n                TreeNode *curr = queue.front();\\n                queue.pop();\\n                st.push({curr->val, lvl});\\n                if (curr->right)\\n                    queue.push(curr->right);\\n                if (curr->left)\\n                    queue.push(curr->left);\\n            }\\n            lvl++;\\n        }\\n\\n        lvl--;\\n        vector<int> row;\\n\\n        while (st.empty() == false)\\n        {\\n            if (st.top().second != lvl)\\n            {\\n                ans.push_back(row);\\n                row.clear();\\n                lvl--;\\n            }\\n\\n            row.push_back(st.top().first);\\n            st.pop();\\n        }\\n        ans.push_back(row);\\n\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1691412,
                "title": "cpp-easy-solution-100-faster-97-less-space",
                "content": "```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> v;\\n        if(root==NULL) return v;\\n        \\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            vector<int> vi;\\n            int n=q.size();\\n            for(int i=0;i<n;i++){\\n                TreeNode* temp=q.front();\\n                q.pop();\\n                // if(temp==NULL) continue;\\n                vi.push_back(temp->val);\\n                if(temp->left) q.push(temp->left);\\n                if(temp->right) q.push(temp->right);\\n            }\\n            v.push_back(vi);\\n        }\\n        reverse(v.begin(),v.end());\\n        return v;\\n        \\n    }\\n",
                "solutionTags": [],
                "code": "```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> v;\\n        if(root==NULL) return v;\\n        \\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            vector<int> vi;\\n            int n=q.size();\\n            for(int i=0;i<n;i++){\\n                TreeNode* temp=q.front();\\n                q.pop();\\n                // if(temp==NULL) continue;\\n                vi.push_back(temp->val);\\n                if(temp->left) q.push(temp->left);\\n                if(temp->right) q.push(temp->right);\\n            }\\n            v.push_back(vi);\\n        }\\n        reverse(v.begin(),v.end());\\n        return v;\\n        \\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1637494,
                "title": "110-optimal-java-solution",
                "content": "class Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\t\\t\\t\\tif(root == null) return new ArrayList<>();\\n\\n        ArrayDeque<TreeNode> queue = new ArrayDeque<>();\\n        queue.offerLast(root);\\n        List<List<Integer>> ansList=new ArrayList<>();\\n\\n        while(!queue.isEmpty()){\\n            int layerSize = queue.size();\\n            List<Integer> ans = new ArrayList<>();\\n            for(int nodeNo = 0; nodeNo < layerSize; nodeNo++){\\n                TreeNode curr = queue.pollFirst();\\n                ans.add(curr.val);\\n                if(curr.left != null) queue.offerLast(curr.left);\\n                if(curr.right != null) queue.offerLast(curr.right);\\n            }\\n            ansList.add(ans);\\n        }\\n        Collections.reverse(ansList);\\n        return ansList;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\t\\t\\t\\tif(root == null) return new ArrayList<>();\\n\\n        ArrayDeque<TreeNode> queue = new ArrayDeque<>();\\n        queue.offerLast(root);\\n        List<List<Integer>> ansList=new ArrayList<>();\\n\\n        while(!queue.isEmpty()){\\n            int layerSize = queue.size();\\n            List<Integer> ans = new ArrayList<>();\\n            for(int nodeNo = 0; nodeNo < layerSize; nodeNo++){\\n                TreeNode curr = queue.pollFirst();\\n                ans.add(curr.val);\\n                if(curr.left != null) queue.offerLast(curr.left);\\n                if(curr.right != null) queue.offerLast(curr.right);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1590044,
                "title": "c-solution-8ms",
                "content": "```\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> result;\\n        if(!root) return {};\\n        queue<TreeNode *> queue;\\n        \\n        queue.push(root);\\n        \\n        while(!queue.empty())\\n        {\\n            auto size = queue.size();\\n            \\n            vector<int> temp;\\n            \\n            for(int i = 0 ; i <size; i++)\\n            {\\n                auto node = queue.front();\\n                queue.pop();\\n                \\n                temp.push_back(node->val);\\n                \\n                if(node->left) queue.push(node->left);\\n                if(node->right) queue.push(node->right);\\n                \\n            }\\n            \\n            result.push_back(temp);\\n        }\\n        \\n        reverse(result.begin(), result.end());\\n        \\n        return result;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> result;\\n        if(!root) return {};\\n        queue<TreeNode *> queue;\\n        \\n        queue.push(root);\\n        \\n        while(!queue.empty())\\n        {\\n            auto size = queue.size();\\n            \\n            vector<int> temp;\\n            \\n            for(int i = 0 ; i <size; i++)\\n            {\\n                auto node = queue.front();\\n                queue.pop();\\n                \\n                temp.push_back(node->val);\\n                \\n                if(node->left) queue.push(node->left);\\n                if(node->right) queue.push(node->right);\\n                \\n            }\\n            \\n            result.push_back(temp);\\n        }\\n        \\n        reverse(result.begin(), result.end());\\n        \\n        return result;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1532197,
                "title": "simple-to-understand-2-ways-recursion-with-comments",
                "content": "**Thumbs up if you find this helpful** \\uD83D\\uDC4D\\n\\nThe following is 2 different solutions\\n\\n* Keeping Track Of Max Depth\\n* Reversing Result List\\n\\n**1. Keep Track Of Max Depth**\\n\\nThe idea of this solution is to have a result list which keeps track of the items found on each level.\\n\\nA variable is also used to keep track of the maximum depth levels in the tree.\\n\\nThe max depth level is used to insert node values into their appropriate result list slot.\\n\\n```\\npublic class Solution {\\n    private List<IList<int>> result = new List<IList<int>>();\\n    private int maxDepth = 0;\\n    \\n    public IList<IList<int>> LevelOrderBottom(TreeNode root) {                \\n        Traverse(root, 0);\\n        return result;\\n    }\\n    \\n    private void Traverse(TreeNode node, int depth) {\\n        if (node == null) {\\n            return;\\n        }\\n\\n        // Keep track of max depth level\\n        if (depth > maxDepth) {\\n            maxDepth = depth;\\n        }\\n                \\n        // Determine if new depth level should be added to the result list\\n        // Add the new level to the start of the result list\\n        if (result.Count == depth) {             \\n            result.Insert(0, new List<int>());\\n        }  \\n        \\n        // Add the current node value to the corresponding result level index\\n        result[maxDepth - depth].Add(node.val);        \\n        \\n        // Keep exploring left and right nodes\\n        Traverse(node.left, depth + 1);\\n        Traverse(node.right, depth + 1);      \\n    }\\n}\\n```\\n\\n**2. Reverse result list**\\n\\nThis solution is similar to the one above, except instead of keeping track of the maximum depth level of the tree, we simply add node values at each level to the result list, and then reverse the list once all values at each level has been found.\\n\\n```\\npublic class Solution {\\n    private List<IList<int>> result = new List<IList<int>>();\\n    \\n    public IList<IList<int>> LevelOrderBottom(TreeNode root) {\\n        Traverse(root, 0);\\n\\n        // Reverse the result list\\n        result.Reverse();\\n        return result;\\n    }\\n    \\n    private void Traverse(TreeNode node, int depth) {\\n        if (node == null) {\\n            return;\\n        }\\n\\n        // Determine if new depth level should be added to the result list\\n        if (result.Count == depth) {\\n            result.Add(new List<int>());\\n        }\\n\\n        // Add the current node value to the corresponding result level index\\n        result[depth].Add(node.val);      \\n        \\n        // Keep exploring left and right nodes\\n        Traverse(node.left, depth + 1);\\n        Traverse(node.right, depth + 1);        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    private List<IList<int>> result = new List<IList<int>>();\\n    private int maxDepth = 0;\\n    \\n    public IList<IList<int>> LevelOrderBottom(TreeNode root) {                \\n        Traverse(root, 0);\\n        return result;\\n    }\\n    \\n    private void Traverse(TreeNode node, int depth) {\\n        if (node == null) {\\n            return;\\n        }\\n\\n        // Keep track of max depth level\\n        if (depth > maxDepth) {\\n            maxDepth = depth;\\n        }\\n                \\n        // Determine if new depth level should be added to the result list\\n        // Add the new level to the start of the result list\\n        if (result.Count == depth) {             \\n            result.Insert(0, new List<int>());\\n        }  \\n        \\n        // Add the current node value to the corresponding result level index\\n        result[maxDepth - depth].Add(node.val);        \\n        \\n        // Keep exploring left and right nodes\\n        Traverse(node.left, depth + 1);\\n        Traverse(node.right, depth + 1);      \\n    }\\n}\\n```\n```\\npublic class Solution {\\n    private List<IList<int>> result = new List<IList<int>>();\\n    \\n    public IList<IList<int>> LevelOrderBottom(TreeNode root) {\\n        Traverse(root, 0);\\n\\n        // Reverse the result list\\n        result.Reverse();\\n        return result;\\n    }\\n    \\n    private void Traverse(TreeNode node, int depth) {\\n        if (node == null) {\\n            return;\\n        }\\n\\n        // Determine if new depth level should be added to the result list\\n        if (result.Count == depth) {\\n            result.Add(new List<int>());\\n        }\\n\\n        // Add the current node value to the corresponding result level index\\n        result[depth].Add(node.val);      \\n        \\n        // Keep exploring left and right nodes\\n        Traverse(node.left, depth + 1);\\n        Traverse(node.right, depth + 1);        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1358205,
                "title": "python-bfs-the-most-standard-answer-template-for-bfs",
                "content": "```\\nfrom collections import deque\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n\\t\\n        # exclude the empty case of root\\n        if not root:\\n            return []\\n        \\n        # define queue to record elements\\n        queue = deque()\\n        queue.append(root)\\n        \\n        # define a new list to receive the result\\n        result = []\\n        \\n        # start BFS\\n        # traverse every level from top to bottom\\n        while queue:\\n            # define a list to receive the result for every level\\n            level_result = []\\n            # traverse the elements in one level    \\n            for _ in range(len(queue)):\\n                # find the 1st element\\n                node = queue.popleft()\\n                \\n                # find the neighbor\\n                if node.left:\\n                    # put the neighbor back to the queue\\n                    queue.append(node.left)\\n                # find the neighbor\\n                if node.right:\\n                    # put the neighbor back to the queue\\n                    queue.append(node.right)\\n                \\n                # when one level finishes the traversal \\n                # put the node value into the level result\\n                level_result.append(node.val)\\n            \\n            # when finish one level traversal \\n            # put the level result into the result outside the traversal\\n            result.append(level_result)\\n        \\n        # to obtain the final result, we reverse the result above\\n        result.reverse()\\n        return result\\n```",
                "solutionTags": [
                    "Python",
                    "Breadth-First Search"
                ],
                "code": "```\\nfrom collections import deque\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n\\t\\n        # exclude the empty case of root\\n        if not root:\\n            return []\\n        \\n        # define queue to record elements\\n        queue = deque()\\n        queue.append(root)\\n        \\n        # define a new list to receive the result\\n        result = []\\n        \\n        # start BFS\\n        # traverse every level from top to bottom\\n        while queue:\\n            # define a list to receive the result for every level\\n            level_result = []\\n            # traverse the elements in one level    \\n            for _ in range(len(queue)):\\n                # find the 1st element\\n                node = queue.popleft()\\n                \\n                # find the neighbor\\n                if node.left:\\n                    # put the neighbor back to the queue\\n                    queue.append(node.left)\\n                # find the neighbor\\n                if node.right:\\n                    # put the neighbor back to the queue\\n                    queue.append(node.right)\\n                \\n                # when one level finishes the traversal \\n                # put the node value into the level result\\n                level_result.append(node.val)\\n            \\n            # when finish one level traversal \\n            # put the level result into the result outside the traversal\\n            result.append(level_result)\\n        \\n        # to obtain the final result, we reverse the result above\\n        result.reverse()\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1306409,
                "title": "cpp-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n      vector<vector<int>> ans;\\n        if(!root) return ans;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        \\n        while(!q.empty())\\n        {\\n            int sz=q.size();\\n            vector<int> temp;\\n            while(sz--)\\n            {\\n                TreeNode *frnt=q.front();\\n                if(frnt->left)\\n                    q.push(frnt->left);\\n                if(frnt->right)\\n                    q.push(frnt->right);\\n                q.pop();\\n                temp.push_back(frnt->val);\\n                \\n            }\\n            ans.push_back(temp);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n      vector<vector<int>> ans;\\n        if(!root) return ans;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        \\n        while(!q.empty())\\n        {\\n            int sz=q.size();\\n            vector<int> temp;\\n            while(sz--)\\n            {\\n                TreeNode *frnt=q.front();\\n                if(frnt->left)\\n                    q.push(frnt->left);\\n                if(frnt->right)\\n                    q.push(frnt->right);\\n                q.pop();\\n                temp.push_back(frnt->val);\\n                \\n            }\\n            ans.push_back(temp);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1231219,
                "title": "python-24ms-easy-to-understand-dfs",
                "content": "```\\nclass Solution:\\n    def height(self,root):\\n        if root is None:\\n            return 0\\n        return 1 + max(self.height(root.left),self.height(root.right))\\n    \\n    def dfs(self,root,index,arr):\\n        if root:\\n            self.dfs(root.left,index-1,arr)\\n            arr[index].append(root.val)\\n            self.dfs(root.right,index-1,arr)\\n    \\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        h=self.height(root)\\n        arr=[[] for _ in range(h)]\\n        self.dfs(root,h-1,arr)\\n        return arr\\n```",
                "solutionTags": [
                    "Python",
                    "Depth-First Search"
                ],
                "code": "```\\nclass Solution:\\n    def height(self,root):\\n        if root is None:\\n            return 0\\n        return 1 + max(self.height(root.left),self.height(root.right))\\n    \\n    def dfs(self,root,index,arr):\\n        if root:\\n            self.dfs(root.left,index-1,arr)\\n            arr[index].append(root.val)\\n            self.dfs(root.right,index-1,arr)\\n    \\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        h=self.height(root)\\n        arr=[[] for _ in range(h)]\\n        self.dfs(root,h-1,arr)\\n        return arr\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1228419,
                "title": "easy-java-beats-99-solutions-queue-bfs",
                "content": "```\\nclass Solution {\\n    List<List<Integer>> result = new ArrayList<>();\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        if(root == null) return result;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            int size = q.size();\\n            List<Integer> currLevel = new ArrayList();\\n            while(size-- >0){\\n                TreeNode curr = q.remove();\\n                currLevel.add(curr.val);\\n                if(curr.left != null) q.add(curr.left);\\n                if(curr.right != null) q.add(curr.right);\\n            }\\n            result.add(0, currLevel);\\n        }\\n        return result;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    List<List<Integer>> result = new ArrayList<>();\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        if(root == null) return result;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            int size = q.size();\\n            List<Integer> currLevel = new ArrayList();\\n            while(size-- >0){\\n                TreeNode curr = q.remove();\\n                currLevel.add(curr.val);\\n                if(curr.left != null) q.add(curr.left);\\n                if(curr.right != null) q.add(curr.right);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1182076,
                "title": "easy-level-order-traversal",
                "content": "```\\nclass Solution {\\nprivate:\\n    vector<vector<int>> result;\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root==NULL) \\n            return result;\\n        TreeNode* tmp;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            vector<int> level;\\n            int cnt=q.size();\\n            for(int i=0;i<cnt;i++){\\n                tmp=q.front();\\n                q.pop();\\n                level.push_back(tmp->val);\\n                if(tmp->left)  q.push(tmp->left);\\n                if(tmp->right) q.push(tmp->right);     \\n            }\\n            result.push_back(level);\\n            \\n        }\\n        reverse(result.begin(),result.end());\\n        return result;\\n    }\\n};\\n```\\n***Please upvote if you found it helpful***",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\nprivate:\\n    vector<vector<int>> result;\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(root==NULL) \\n            return result;\\n        TreeNode* tmp;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            vector<int> level;\\n            int cnt=q.size();\\n            for(int i=0;i<cnt;i++){\\n                tmp=q.front();\\n                q.pop();\\n                level.push_back(tmp->val);\\n                if(tmp->left)  q.push(tmp->left);\\n                if(tmp->right) q.push(tmp->right);     \\n            }\\n            result.push_back(level);\\n            \\n        }\\n        reverse(result.begin(),result.end());\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1095711,
                "title": "python-python3-binary-tree-level-order-traversal-ll",
                "content": "***Shameless-Self-Promotion***: My other leetcode [solutions](https://leetcode.com/discuss/general-discussion/1112952/Collection-of-my-leetcode-solution-posts) to various questions can be found [here](https://leetcode.com/discuss/general-discussion/1112952/Collection-of-my-leetcode-solution-posts)\\n\\nInstead of \\n```\\nans.reverse()\\nreturn ans\\n```\\nwe can also replace that with:\\n```\\nreturn reversed(ans)\\n```\\n\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        \\n        if not root: return []\\n        \\n        ans = []\\n        level = [root]\\n        \\n        while level:\\n            ans.append([node.val for node in level])\\n            level = [child for node in level for child in (node.left, node.right) if child]\\n        \\n\\t\\t\\n\\t\\tans.reverse()\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nans.reverse()\\nreturn ans\\n```\n```\\nreturn reversed(ans)\\n```\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        \\n        if not root: return []\\n        \\n        ans = []\\n        level = [root]\\n        \\n        while level:\\n            ans.append([node.val for node in level])\\n            level = [child for node in level for child in (node.left, node.right) if child]\\n        \\n\\t\\t\\n\\t\\tans.reverse()\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1082838,
                "title": "javascript-simple-and-explained-solution-dfs-using-map-bfs",
                "content": "```\\n#DFS\\n\\nvar levelOrderBottom = function(root) {\\n    var map= new Map;\\n    var x=0;\\n    var res=[];\\n\\n    var lorder=function(root,x){\\n        if(!root)\\n            return;\\n    //track the depth and node value using Map in {key,value} pair. example: {0:[3],1:[9,20], 2:[15,7]}\\n        if(!map.has(x))\\n            map.set(x,[root.val]); \\n        else\\n            map.get(x).push(root.val);\\n            \\n        lorder(root.left,x+1);\\n        lorder(root.right,x+1);\\n    }\\n    \\n    lorder(root,x);\\n    \\n    //get the values in an array named res\\n    map.forEach((v,k)=>{\\n        res.push(v);\\n    })\\n    \\n    //reverse using two pointer, you can use reverse() function too. the algorithm is same. so I done manually.\\n    let i=0;\\n    let j=res.length-1;\\n    while(i<j){\\n        let swap=res[i];\\n        res[i]=res[j];\\n        res[j]=swap;\\n        i++;\\n        j--;\\n    }\\n    \\n    return res;\\n};\\n\\n\\n#BFS\\n\\nvar levelOrderBottom = function(root) {\\n    if(!root) return [];\\n    \\n    var res=[];\\n    var queue=[[0,root]];\\n    \\n    while(queue.length>0){\\n        const[depth,node]=queue.shift();        \\n        if(!res[depth]) \\n            res[depth]=[node.val];\\n        else \\n            res[depth].push(node.val);\\n        \\n        if(node.left) queue.push([depth+1,node.left]);\\n        if(node.right) queue.push([depth+1,node.right]);\\n    }\\n    \\n    //reverse using two pointer, you can use reverse() function too. the algorithm is same. so I done manually.\\n    let i=0;\\n    let j=res.length-1;\\n    while(i<j){\\n        let swap=res[i];\\n        res[i]=res[j];\\n        res[j]=swap;\\n        i++;\\n        j--;\\n    }\\n    \\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers",
                    "Depth-First Search",
                    "Breadth-First Search"
                ],
                "code": "```\\n#DFS\\n\\nvar levelOrderBottom = function(root) {\\n    var map= new Map;\\n    var x=0;\\n    var res=[];\\n\\n    var lorder=function(root,x){\\n        if(!root)\\n            return;\\n    //track the depth and node value using Map in {key,value} pair. example: {0:[3],1:[9,20], 2:[15,7]}\\n        if(!map.has(x))\\n            map.set(x,[root.val]); \\n        else\\n            map.get(x).push(root.val);\\n            \\n        lorder(root.left,x+1);\\n        lorder(root.right,x+1);\\n    }\\n    \\n    lorder(root,x);\\n    \\n    //get the values in an array named res\\n    map.forEach((v,k)=>{\\n        res.push(v);\\n    })\\n    \\n    //reverse using two pointer, you can use reverse() function too. the algorithm is same. so I done manually.\\n    let i=0;\\n    let j=res.length-1;\\n    while(i<j){\\n        let swap=res[i];\\n        res[i]=res[j];\\n        res[j]=swap;\\n        i++;\\n        j--;\\n    }\\n    \\n    return res;\\n};\\n\\n\\n#BFS\\n\\nvar levelOrderBottom = function(root) {\\n    if(!root) return [];\\n    \\n    var res=[];\\n    var queue=[[0,root]];\\n    \\n    while(queue.length>0){\\n        const[depth,node]=queue.shift();        \\n        if(!res[depth]) \\n            res[depth]=[node.val];\\n        else \\n            res[depth].push(node.val);\\n        \\n        if(node.left) queue.push([depth+1,node.left]);\\n        if(node.right) queue.push([depth+1,node.right]);\\n    }\\n    \\n    //reverse using two pointer, you can use reverse() function too. the algorithm is same. so I done manually.\\n    let i=0;\\n    let j=res.length-1;\\n    while(i<j){\\n        let swap=res[i];\\n        res[i]=res[j];\\n        res[j]=swap;\\n        i++;\\n        j--;\\n    }\\n    \\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1082609,
                "title": "c-bfs-0ms",
                "content": "BFS the tree while adding elements level wise to the vector and then reverse the vector in the end.\\n```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> result;\\n        \\n        queue<TreeNode*> q;\\n        q.push(root);\\n        \\n        while (!q.empty())\\n        {\\n            int n = q.size();\\n            \\n            vector<int> crtLevel; \\n            crtLevel.reserve(n);\\n            \\n            for (int i = 0; i < n; i++)\\n            {\\n                TreeNode* p = q.front(); q.pop();\\n                if(p)\\n                {\\n                    crtLevel.push_back(p->val);\\n                    q.push(p->left);\\n                    q.push(p->right);\\n                }\\n            }\\n            \\n            if(crtLevel.size()>0) \\n                result.push_back(move(crtLevel));\\n        }\\n        \\n        reverse(result.begin(), result.end());\\n        return result;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> result;\\n        \\n        queue<TreeNode*> q;\\n        q.push(root);\\n        \\n        while (!q.empty())\\n        {\\n            int n = q.size();\\n            \\n            vector<int> crtLevel; \\n            crtLevel.reserve(n);\\n            \\n            for (int i = 0; i < n; i++)\\n            {\\n                TreeNode* p = q.front(); q.pop();\\n                if(p)\\n                {\\n                    crtLevel.push_back(p->val);\\n                    q.push(p->left);\\n                    q.push(p->right);\\n                }\\n            }\\n            \\n            if(crtLevel.size()>0) \\n                result.push_back(move(crtLevel));\\n        }\\n        \\n        reverse(result.begin(), result.end());\\n        return result;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 996457,
                "title": "java-solution-using-queue",
                "content": "```\\nclass Solution {\\n    LinkedList ans = new LinkedList();\\n    Queue<TreeNode> q = new ArrayDeque();\\n    \\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        \\n        if(root == null) return ans;\\n        \\n        q.offer(root);\\n        while(!q.isEmpty()){\\n            \\n            List <Integer>tmp = new ArrayList();\\n            \\n            int size = q.size();\\n            for(int i = 0 ; i < size; i++){\\n                \\n                TreeNode node = q.poll();\\n                tmp.add(node.val);\\n                \\n                if(node.left != null){\\n                    q.add(node.left);   \\n                }\\n                if(node.right != null){\\n                    q.add(node.right);\\n                }\\n            }\\n            ans.addFirst(tmp);\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    LinkedList ans = new LinkedList();\\n    Queue<TreeNode> q = new ArrayDeque();\\n    \\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        \\n        if(root == null) return ans;\\n        \\n        q.offer(root);\\n        while(!q.isEmpty()){\\n            \\n            List <Integer>tmp = new ArrayList();\\n            \\n            int size = q.size();\\n            for(int i = 0 ; i < size; i++){\\n                \\n                TreeNode node = q.poll();\\n                tmp.add(node.val);\\n                \\n                if(node.left != null){\\n                    q.add(node.left);   \\n                }\\n                if(node.right != null){\\n                    q.add(node.right);\\n                }\\n            }\\n            ans.addFirst(tmp);\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 959809,
                "title": "my-best-c-solution-beats-100",
                "content": "```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(!root)return {};\\n        vector<vector<int>> res;\\n        vector<int> levelarr;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            int size = q.size();\\n            while(size--){\\n                TreeNode *temp = q.front();\\n                q.pop();\\n                levelarr.push_back(temp->val);\\n                if(temp->left)q.push(temp->left);\\n                if(temp->right)q.push(temp->right);\\n            }\\n            res.push_back(levelarr);\\n            levelarr.clear();\\n        }\\n        reverse(res.begin(),res.end());\\n        return res;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nvector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        if(!root)return {};\\n        vector<vector<int>> res;\\n        vector<int> levelarr;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            int size = q.size();\\n            while(size--){\\n                TreeNode *temp = q.front();\\n                q.pop();\\n                levelarr.push_back(temp->val);\\n                if(temp->left)q.push(temp->left);\\n                if(temp->right)q.push(temp->right);\\n            }\\n            res.push_back(levelarr);\\n            levelarr.clear();\\n        }\\n        reverse(res.begin(),res.end());\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 930017,
                "title": "bfs-c-using-reverse-100",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> res;\\n        if (!root) return res;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while (!q.empty()) {\\n            vector<int> level;\\n            int size = q.size();\\n            for (int i =0;i<size; i++) {\\n                TreeNode *node= q.front();\\n                q.pop();\\n                level.push_back(node->val);\\n                if (node->left) q.push(node->left);\\n                if (node->right) q.push(node->right);\\n            }\\n            res.push_back(level);\\n        }\\n        reverse(res.begin(), res.end());\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        vector<vector<int>> res;\\n        if (!root) return res;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while (!q.empty()) {\\n            vector<int> level;\\n            int size = q.size();\\n            for (int i =0;i<size; i++) {\\n                TreeNode *node= q.front();\\n                q.pop();\\n                level.push_back(node->val);\\n                if (node->left) q.push(node->left);\\n                if (node->right) q.push(node->right);\\n            }\\n            res.push_back(level);\\n        }\\n        reverse(res.begin(), res.end());\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 902102,
                "title": "morris-traversal-o-n-time-o-1-space",
                "content": "\\n ```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        LinkedList<List<Integer>> values = new LinkedList<>();\\n        TreeNode prev = null;\\n        TreeNode current = root;\\n        int currentLevel = 0;\\n        while(current != null){\\n            if(current.left == null){\\n                if(values.size() == currentLevel){\\n                    values.add(new LinkedList<>());\\n                }\\n                values.get(currentLevel).add(current.val);\\n                currentLevel++;\\n                current = current.right;\\n            }else{\\n                int delta = 1;\\n                prev = current.left;\\n                while(prev.right != null && prev.right != current){\\n                    prev = prev.right;\\n                    delta++;\\n                }\\n                if(prev.right == null){\\n                    if(values.size() == currentLevel){\\n                        values.add(new LinkedList<>());\\n                    }\\n                    values.get(currentLevel).add(current.val);\\n                    currentLevel++;\\n                    prev.right = current;\\n                    current = current.left;\\n                }else{\\n                    prev.right =null;\\n                    current = current.right;\\n                    currentLevel -= delta;\\n                }\\n            }\\n        }\\n        Collections.reverse(values);\\n        return values;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\\n        LinkedList<List<Integer>> values = new LinkedList<>();\\n        TreeNode prev = null;\\n        TreeNode current = root;\\n        int currentLevel = 0;\\n        while(current != null){\\n            if(current.left == null){\\n                if(values.size() == currentLevel){\\n                    values.add(new LinkedList<>());\\n                }\\n                values.get(currentLevel).add(current.val);\\n                currentLevel++;\\n                current = current.right;\\n            }else{\\n                int delta = 1;\\n                prev = current.left;\\n                while(prev.right != null && prev.right != current){\\n                    prev = prev.right;\\n                    delta++;\\n                }\\n                if(prev.right == null){\\n                    if(values.size() == currentLevel){\\n                        values.add(new LinkedList<>());\\n                    }\\n                    values.get(currentLevel).add(current.val);\\n                    currentLevel++;\\n                    prev.right = current;\\n                    current = current.left;\\n                }else{\\n                    prev.right =null;\\n                    current = current.right;\\n                    currentLevel -= delta;\\n                }\\n            }\\n        }\\n        Collections.reverse(values);\\n        return values;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 863166,
                "title": "simple-bfs-with-swapping-4ms-solution",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {  \\n        vector<vector<int>> result;  \\n        if(root == NULL) { \\n            return result;\\n        }\\n        queue<TreeNode *> q; \\n        q.push(root);  \\n        \\n        while(!q.empty()) { \\n            vector<int> temp;    \\n            int n = q.size();\\n            for(int i = 0; i < n; i++) { \\n                if(q.front()->left != NULL) { \\n                    q.push(q.front()->left); \\n                } \\n                if(q.front()->right != NULL) { \\n                    q.push(q.front()->right);\\n                }  \\n                 temp.push_back(q.front()->val);    \\n                 q.pop(); \\n            } \\n            result.push_back(temp);                     \\n        } \\n        int l = 0,r = result.size()-1; \\n        while(l < r) { \\n            vector<int> aux = result[l]; \\n            result[l] = result[r]; \\n            result[r] = aux; \\n            l++; r--;\\n        }\\n        return result;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Breadth-First Search"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {  \\n        vector<vector<int>> result;  \\n        if(root == NULL) { \\n            return result;\\n        }\\n        queue<TreeNode *> q; \\n        q.push(root);  \\n        \\n        while(!q.empty()) { \\n            vector<int> temp;    \\n            int n = q.size();\\n            for(int i = 0; i < n; i++) { \\n                if(q.front()->left != NULL) { \\n                    q.push(q.front()->left); \\n                } \\n                if(q.front()->right != NULL) { \\n                    q.push(q.front()->right);\\n                }  \\n                 temp.push_back(q.front()->val);    \\n                 q.pop(); \\n            } \\n            result.push_back(temp);                     \\n        } \\n        int l = 0,r = result.size()-1; \\n        while(l < r) { \\n            vector<int> aux = result[l]; \\n            result[l] = result[r]; \\n            result[r] = aux; \\n            l++; r--;\\n        }\\n        return result;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 845761,
                "title": "java-simple-solution-beats-100-run-time-and-96-memory",
                "content": "\\tclass Solution {\\n\\t\\tpublic List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\t\\t\\tList<List<Integer>> list = new ArrayList<>();\\n\\t\\t\\tpopulateList(root, 0, list);\\n\\t\\t\\tCollections.reverse(list);\\n\\t\\t\\treturn list;\\n\\t\\t}\\n\\n\\t\\tpublic void populateList(TreeNode root, int height, List<List<Integer>> list)\\n\\t\\t{\\n\\t\\t\\tif(root==null)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif(height >= list.size())\\n\\t\\t\\t{\\n\\t\\t\\t\\tlist.add(new ArrayList<Integer>());            \\n\\t\\t\\t}\\n\\t\\t\\tList<Integer> t = list.get(height);\\n\\t\\t\\tt.add(root.val);\\n\\n\\t\\t\\tpopulateList(root.left, height+1, list);\\n\\t\\t\\tpopulateList(root.right, height+1, list);\\n\\t\\t}\\n\\t}",
                "solutionTags": [],
                "code": "class Solution {\\n\\t\\tpublic List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\t\\t\\tList<List<Integer>> list = new ArrayList<>();\\n\\t\\t\\tpopulateList(root, 0, list);\\n\\t\\t\\tCollections.reverse(list);\\n\\t\\t\\treturn list;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 775294,
                "title": "java-100-without-using-queue-through-recursion",
                "content": "Simple recursive solution that gets 100% speed and does not require a queue or anything fancy.\\n\\nSolution:\\n\\n\\tclass Solution {\\n\\n\\t\\tpublic List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\t\\t\\tList<List<Integer>> levelTraversal = new ArrayList<List<Integer>>();\\n\\t\\t\\ttraverse(root, levelTraversal, 0);\\n\\t\\t\\tCollections.reverse(levelTraversal);\\n\\t\\t\\treturn levelTraversal;\\n\\t\\t}\\n\\n\\t\\tpublic void traverse(TreeNode node, List<List<Integer>> levelTraversal, int level) {\\n\\t\\t\\tif (node == null){\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\twhile (levelTraversal.size() <= level){\\n\\t\\t\\t\\tlevelTraversal.add(new ArrayList<Integer>());\\n\\t\\t\\t}\\n\\t\\t\\tlevelTraversal.get(level).add(node.val);\\n\\t\\t\\ttraverse(node.left, levelTraversal, level + 1);\\n\\t\\t\\ttraverse(node.right, levelTraversal, level + 1);\\n\\t\\t}\\n\\t}\\n",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "class Solution {\\n\\n\\t\\tpublic List<List<Integer>> levelOrderBottom(TreeNode root) {\\n\\t\\t\\tList<List<Integer>> levelTraversal = new ArrayList<List<Integer>>();\\n\\t\\t\\ttraverse(root, levelTraversal, 0);\\n\\t\\t\\tCollections.reverse(levelTraversal);\\n\\t\\t\\treturn levelTraversal;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 762351,
                "title": "python-easy-to-understand-solution-explained-video-code",
                "content": "https://youtu.be/rCPpficf9vw\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        \\n        if root == None:\\n            return []\\n        \\n        queue = [root]\\n        result = []\\n        \\n        while len(queue) != 0:\\n            layer = []\\n            for i in range(len(queue)):\\n                temp = queue.pop(0)\\n                layer.append(temp.val)\\n                if temp.left != None: \\n                    queue.append(temp.left)\\n                if temp.right != None:\\n                    queue.append(temp.right)\\n            result.insert(0, layer)\\n            \\n        return result\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        \\n        if root == None:\\n            return []\\n        \\n        queue = [root]\\n        result = []\\n        \\n        while len(queue) != 0:\\n            layer = []\\n            for i in range(len(queue)):\\n                temp = queue.pop(0)\\n                layer.append(temp.val)\\n                if temp.left != None: \\n                    queue.append(temp.left)\\n                if temp.right != None:\\n                    queue.append(temp.right)\\n            result.insert(0, layer)\\n            \\n        return result\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 744619,
                "title": "python3-level-order-easy-to-understand-beats-91",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        order = []\\n        if root is None:\\n            return order\\n        level = [root]\\n        \\n        while level:\\n            order.append([n.val for n in level])\\n            \\n            p = level\\n            level = []\\n            for c in p:\\n                if c.left:\\n                    level.append(c.left)\\n                if c.right:\\n                    level.append(c.right)\\n        return order[::-1]",
                "solutionTags": [],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\\n        order = []\\n        if root is None:\\n            return order\\n        level = [root]\\n        \\n        while level:\\n            order.append([n.val for n in level])\\n            \\n            p = level\\n            level = []\\n            for c in p:\\n                if c.left:\\n                    level.append(c.left)\\n                if c.right:\\n                    level.append(c.right)\\n        return order[::-1]",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1573638,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1567340,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1861506,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1574551,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1865248,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1840085,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 2042401,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1996129,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1857259,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1854848,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1573638,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1567340,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1861506,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1574551,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1865248,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1840085,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 2042401,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1996129,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1857259,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            },
            {
                "id": 1854848,
                "content": [
                    {
                        "username": "zeeqy",
                        "content": "There is a 102. Binary Tree Level Order Traversal problem. Adding a [::-1] would solve this one. I would say these two are the same problems."
                    },
                    {
                        "username": "500LCQ",
                        "content": "[@user1748GJ](/user1748GJ) \\nactually we just need to add the new level list to the front of final answer list. so we just need to change a line maybe to make this question look exactly same as 102"
                    },
                    {
                        "username": "user1748GJ",
                        "content": "It might be the same in Python, but in other languages you need to do some extra works so I think it is still pretty nice to have this question"
                    },
                    {
                        "username": "Djbdjbdjb123",
                        "content": "Curious to know why this one is listed as \"easy\" while this one is med?\nhttps://leetcode.com/problems/binary-tree-level-order-traversal/description/\n"
                    },
                    {
                        "username": "oops_moment",
                        "content": "[@Om_Verma_03](/Om_Verma_03) He commented 5 years back yar, leetcode keeps updating XD\\n"
                    },
                    {
                        "username": "Verma_03",
                        "content": "This One is also Medium Bro"
                    },
                    {
                        "username": "aftab0711",
                        "content": "same as leetcode 102\\njust reverse the answer of 102 ."
                    },
                    {
                        "username": "ilnarag",
                        "content": "It\\'s obvious that this problem could be easily solved using `LinkedList<T>`. \\nThe problem is in C# `LinkedList<T>` does not implement `IList<T>`, which means you have to create `List<T>` anyway.\\nI think it should be possible for C# solutions to return `ICollection<T>` or `IEnumerable<T>`."
                    },
                    {
                        "username": "Adi-07",
                        "content": "Will a collections.reverse() yield better space complexity than using a stack? "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "yes"
                    },
                    {
                        "username": "Shubhangigr8",
                        "content": "just normal breadth first search /level order traversal with collections.reverse(result) thing.   similar like #[102](102) leetcode problem "
                    },
                    {
                        "username": "ThisIsDPS08",
                        "content": "If you have solved the first part of this question using recursion & queue, then its easy for you. If you know, how we print a singly linked list in reverse, the same logic applies here.\\nIn my solution of the first part of this problem, I pushed the 1D vector in the 2D answer vector before the recursive call where as in this problem I copied the same code, and placed the pushing 1D vector in 2D answer vector line code after the recursive call & It worked!"
                    },
                    {
                        "username": "as2014",
                        "content": "Quick Tip:\\n\\n- Use the same code of the Level Order Traversal \\n- While adding it in the vector just use insert function to insert at the beginning of the vector.\\n"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "Why my code\\'s giving TLE:- HELP\\n\\n vector<vector<int>> levelOrderBottom(TreeNode* root) {\\n        \\n        vector<vector<int>> ans;\\n        vector<int> output;\\n\\n        if(root==NULL)\\n        {\\n            return ans;\\n        }\\n\\n        queue<TreeNode*> q;\\n        stack<TreeNode*> s;\\n        q.push(root);\\n        q.push(NULL);\\n\\n        while(!q.empty())\\n        {\\n            TreeNode* temp=q.front();\\n            q.pop();\\n            s.push(temp);\\n\\n            if(temp==NULL)\\n            {\\n                ans.push_back(output);\\n                output.clear();\\n\\n                while(!q.empty())\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n            else\\n            {\\n                if(temp->right)\\n                {\\n                    q.push(temp->right);\\n                }\\n                if(temp->left)\\n                {\\n                    q.push(temp->left);\\n                }\\n            }\\n            \\n        }\\n        while(!s.empty())\\n        {\\n            TreeNode* temp=s.top();\\n            output.push_back(temp->val);\\n            s.pop();\\n        }\\n\\n        return ans;\\n    }\\n\\n"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "if(!root) return {};  \\nAdd this edge case , as because of this \"test case []\" your code is running in infinite loop. Because there will be always a NULL value in queue if the first value pushed  is NULL;"
                    },
                    {
                        "username": "The_Shubham_Soni",
                        "content": "[@vs_27](/vs_27) okay"
                    },
                    {
                        "username": "vs_27",
                        "content": "Adding NULL to the queue seems to be the issue which adds NULL to the queue infinitely, just do a level order traversal instead by maintaining the size of the queue i.e. the number of nodes at the current level. "
                    },
                    {
                        "username": "Kishan_K_Pathak",
                        "content": "May we can think of the solution using stack ."
                    }
                ]
            }
        ]
    }
]