[
    {
        "title": "Guess Number Higher or Lower",
        "question_content": "We are playing the Guess Game. The game is as follows:\nI pick a number from 1 to n. You have to guess which number I picked.\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\nYou call a pre-defined API int guess(int num), which returns three possible results:\n\n\t-1: Your guess is higher than the number I picked (i.e. num > pick).\n\t1: Your guess is lower than the number I picked (i.e. num < pick).\n\t0: your guess is equal to the number I picked (i.e. num == pick).\n\nReturn the number that I picked.\n&nbsp;\nExample 1:\n\nInput: n = 10, pick = 6\nOutput: 6\n\nExample 2:\n\nInput: n = 1, pick = 1\nOutput: 1\n\nExample 3:\n\nInput: n = 2, pick = 1\nOutput: 1\n\n&nbsp;\nConstraints:\n\n\t1 <= n <= 231 - 1\n\t1 <= pick <= n",
        "solutions": [
            {
                "id": 84677,
                "title": "2-lines-as-usual-1-line-in-2022",
                "content": "Update April 2022, now that we have the `key` parameter:\\n\\n    def guessNumber(self, n: int) -> int:\\n        return bisect_left(range(n), 0, key=lambda num: -guess(num))\\n\\t\\t\\nUsing binary search to find the smallest number that\\'s not too small.\\n\\n```\\n    def guessNumber(self, n):\\n        class C: __getitem__ = lambda _, i: -guess(i)\\n        return bisect.bisect(C(), -1, 1, n)\\n```\\n\\nAlternatively, without using the library:\\n\\n```\\n    def guessNumber(self, n):\\n        lo, hi = 1, n\\n        while lo < hi:\\n            mid = (lo + hi) / 2\\n            if guess(mid) == 1:\\n                lo = mid + 1\\n            else:\\n                hi = mid\\n        return lo\\n```\\n\\nFunny variation:\\n\\n```\\n    def guessNumber(self, n):\\n        lo, hi = 1, n\\n        while lo < hi:\\n            mid = (lo + hi) / 2\\n            lo, hi = ((mid, mid), (mid+1, hi), (lo, mid-1))[guess(mid)]\\n        return lo\\n```",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\n    def guessNumber(self, n):\\n        class C: __getitem__ = lambda _, i: -guess(i)\\n        return bisect.bisect(C(), -1, 1, n)\\n```\n```\\n    def guessNumber(self, n):\\n        lo, hi = 1, n\\n        while lo < hi:\\n            mid = (lo + hi) / 2\\n            if guess(mid) == 1:\\n                lo = mid + 1\\n            else:\\n                hi = mid\\n        return lo\\n```\n```\\n    def guessNumber(self, n):\\n        lo, hi = 1, n\\n        while lo < hi:\\n            mid = (lo + hi) / 2\\n            lo, hi = ((mid, mid), (mid+1, hi), (lo, mid-1))[guess(mid)]\\n        return lo\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2818874,
                "title": "python-c-java-rust-binary-search-to-halve-your-ignorance-bonus-o-0-one-liner-explained",
                "content": "**\\u2705 IF YOU LIKE THIS SOLUTION, PLEASE UPVOTE.**\\n****\\nThis solution employs binary search to halve the interval of ignorance on each iteration. Time complexity is logarithmic: **O(logN)**. Space complexity is constant: **O(1)**.\\n****\\n**Comment.** Brute-force solution (i.e., guessing each number from `1` to `n` iteratively) is highly inefficient. Conveniently, the `guess` function provides us a way to query ranges, i.e., by calling `guess(m)` we are basically asking 3 questions simultaneously:\\n1. Is `m` the unknown number?\\n2. Does the unknown number lie on the interval `[1, m)`?\\n3. Does the unknown number lie on the interval `(m, n]`?\\n\\nOne of them will return a positive answer, thus, allowing us to either return the unknown number or update the interval of ignorance. It is known from the theory that halving the interval of ignorance is the best way to go, thus, we take a middle point on each iteration.\\n\\n**Python #1.** The full iterative algorithm. In Python, there is no overflow, so `(n + s) // 2` is safe.\\n```\\nclass Solution:\\n    def guessNumber(self, n, s=1):\\n        \\n        while s <= n:\\n            m = (n + s) // 2          # [1] Take the middle point...\\n            g = guess(m)              # [2] ...and guess!\\n            if g == 0 : return m      # [3] Yay, we found the number!\\n            if g < 0  : n = m - 1     # [4] Nope, it\\'s smaller...\\n            if g > 0  : s = m + 1     # [5] ...or larger.\\n```\\n\\n**Python #2.** There is also a recursive version of this solution. Note the math way to update the interval `[s,n]`. \\n```\\nclass Solution:\\n    def guessNumber(self, n, s=1):\\n        m = (s + n) // 2\\n        g = guess(m)\\n        n -= (n - m + 1)*g*(g-1)//2     # in these two lines, g-1 and g+1 act as binary flags\\n        s += (m - s + 1)*g*(g+1)//2     # for performing or not performing the change\\n        return m if not g else self.guessNumber(n, s)\\n```\\n\\n**Python #3.** We can kindly ask Python to peform binary search for us with a built-in *bisect_left* function. Note that `range(n)` is a generator, thus, uses **O(1)** space. (And no, it\\'s not the mentioned **BONUS** one-liner, see below)\\n```\\nclass Solution:\\n    def guessNumber(self, n):\\n        \\n        return bisect_left(range(n), 0, key=lambda m: -guess(m))\\n```\\n\\nI also provide the iterative solution in other languages. Note the `long` trick to account for possible `int` overflow. One can also use `m = s + (n-s) / 2`.\\n\\n<iframe src=\"https://leetcode.com/playground/CCrSc4QQ/shared\" frameBorder=\"0\" width=\"800\" height=\"350\"></iframe>\\n\\n**\\u2705 YOU MADE IT TILL THE BONUS SECTION... YOUR GREAT EFFORT DESERVES UPVOTING THIS POST!**\\n\\n**Python #X.** Ok, now it\\'s time for a highly classified X-files secret solution, namely, for an **O(1)** (or should I call it **O(0)**???) one-liner.\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        return __pick__\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n, s=1):\\n        \\n        while s <= n:\\n            m = (n + s) // 2          # [1] Take the middle point...\\n            g = guess(m)              # [2] ...and guess!\\n            if g == 0 : return m      # [3] Yay, we found the number!\\n            if g < 0  : n = m - 1     # [4] Nope, it\\'s smaller...\\n            if g > 0  : s = m + 1     # [5] ...or larger.\\n```\n```\\nclass Solution:\\n    def guessNumber(self, n, s=1):\\n        m = (s + n) // 2\\n        g = guess(m)\\n        n -= (n - m + 1)*g*(g-1)//2     # in these two lines, g-1 and g+1 act as binary flags\\n        s += (m - s + 1)*g*(g+1)//2     # for performing or not performing the change\\n        return m if not g else self.guessNumber(n, s)\\n```\n```\\nclass Solution:\\n    def guessNumber(self, n):\\n        \\n        return bisect_left(range(n), 0, key=lambda m: -guess(m))\\n```\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        return __pick__\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84664,
                "title": "0ms-c-binary-search",
                "content": "```\\nint guessNumber(int n) {\\n        int maxNumber = n, minNumber = 1;\\n        while (true) {\\n            int meanNumber = (maxNumber - minNumber) / 2 + minNumber;\\n            // Do NOT use (maxNumber+minNumber)/2 in case of over flow\\n            int res = guess(meanNumber);\\n            if (res == 0) { \\n                return meanNumber;\\n            } else if (res == 1) {\\n                minNumber = meanNumber + 1;\\n            } else {\\n                maxNumber = meanNumber - 1;\\n            }\\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint guessNumber(int n) {\\n        int maxNumber = n, minNumber = 1;\\n        while (true) {\\n            int meanNumber = (maxNumber - minNumber) / 2 + minNumber;\\n            // Do NOT use (maxNumber+minNumber)/2 in case of over flow\\n            int res = guess(meanNumber);\\n            if (res == 0) { \\n                return meanNumber;\\n            } else if (res == 1) {\\n                minNumber = meanNumber + 1;\\n            } else {\\n                maxNumber = meanNumber - 1;\\n            }\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 84662,
                "title": "what-is-the-difference-between-low-high-2-and-low-high-low-2",
                "content": "To do binary search, sometimes I see people use\\n```\\nmid = (low + high) / 2;\\n```\\nSometimes I see\\n```\\nmid = low + (high - low) / 2;\\n```\\n\\n*mid* will at most diff 1. What is the difference between these two approaches?\\n\\nHere is my code, it works with \"low + (high - low)\" but TLE with (low + high) / 2.\\n\\n```\\n    public int guessNumber(int n) {\\n        int low = 1, high = n;\\n        int result = low + (high - low) / 2;\\n        int guess = 0;\\n        while ((guess = (guess(result))) != 0) {\\n            if (guess > 0) {\\n                low = result + 1;\\n            } else {\\n                high = result - 1;\\n            }\\n            result = low + (high - low) / 2;\\n        }\\n        return result;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nmid = (low + high) / 2;\\n```\n```\\nmid = low + (high - low) / 2;\\n```\n```\\n    public int guessNumber(int n) {\\n        int low = 1, high = n;\\n        int result = low + (high - low) / 2;\\n        int guess = 0;\\n        while ((guess = (guess(result))) != 0) {\\n            if (guess > 0) {\\n                low = result + 1;\\n            } else {\\n                high = result - 1;\\n            }\\n            result = low + (high - low) / 2;\\n        }\\n        return result;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1001510,
                "title": "python-beats-99-solutions-o-log-n-w-comments-and-using-walrus-operator",
                "content": "```\\ndef guessNumber(self, n: int) -> int:\\n\\tlowerBound, upperBound = 1, n\\n\\t# Binary division faster than (lowerBound + upperBound) //2\\n\\tmyGuess = (lowerBound+upperBound) >> 1\\n\\t# walrus operator \\':=\\' - assigns value of the function to the variable \\'res\\'\\n\\t# and then compare res with 0\\n\\twhile (res := guess(myGuess)) != 0:\\n\\t\\tif res == 1:\\n\\t\\t\\tlowerBound = myGuess+1\\n\\t\\telse:\\n\\t\\t\\tupperBound = myGuess-1\\n\\t\\tmyGuess = (lowerBound+upperBound) >> 1\\n\\n\\treturn myGuess\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "```\\ndef guessNumber(self, n: int) -> int:\\n\\tlowerBound, upperBound = 1, n\\n\\t# Binary division faster than (lowerBound + upperBound) //2\\n\\tmyGuess = (lowerBound+upperBound) >> 1\\n\\t# walrus operator \\':=\\' - assigns value of the function to the variable \\'res\\'\\n\\t# and then compare res with 0\\n\\twhile (res := guess(myGuess)) != 0:\\n\\t\\tif res == 1:\\n\\t\\t\\tlowerBound = myGuess+1\\n\\t\\telse:\\n\\t\\t\\tupperBound = myGuess-1\\n\\t\\tmyGuess = (lowerBound+upperBound) >> 1\\n\\n\\treturn myGuess\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2818868,
                "title": "python3-ultimate-binary-search-template-works-for-many-problems",
                "content": "This is a classical binary search problem with the checking function given named \"guess\".\\n\\n**Solution to the problem** O(log n)\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        s = 1\\n        e = n+1\\n        while s+1<e:\\n            mid = (s+e)//2\\n            if guess(mid)>=0:\\n                s = mid\\n            else:\\n                e = mid\\n        return s\\n```\\n\\n**Binary Search Template with explanations**\\n\\nI was looking for an **intuitive binary search template** for a while and eventually found the following one that I really like. With this template, you won\\'t be confused with which index to return (start or end).\\nLet\\'s reformat the problem to use array and index for better understanding. **Problem**: Given an sorted array and a number target, return the index of target in the array. If target is not in array, return -1.\\n```python\\n\\ndef check(mid, target):\\n\\treturn target >= arr[mid]\\n\\ndef binarySearch(arr, target):\\n    start = 0               ### The smallest valid index\\n    end = len(arr)  \\t\\t### The largest valid index +1 (an invalid index, because 0-indexed)\\n    \\n    while start+1 < end:\\n\\n    \\t### the middle point between start and end\\n        mid = (start+end)//2\\n        \\n        ### In a binary search problem, we will need a check fundtion\\n        ### to check if mid is meeting the condition or not.\\n        ### In this case, we check if arr[mid] >= target.\\n        ### In the original problem, this function is given named \"guess\"\\n        \\n        ### when we check mid, there are three conditions:\\n        #   (1) target > mid, \\tmove start to mid\\n        #   (2) target < mid,\\tmove end to mid\\n        #   (3) target == mid, \\twe found it!\\n        ### let\\'s merge (1) and (3) together, then we have the following:\\n        \\n        ### The reason I have a check function here even though it just comparing two numbers\\n        ### is that in many other problems, the check function can go though an entire array or tree or other things.\\n        ### With this template, designing the correct check function is critical in solving other questions.\\n        if check(mid, target):\\n            start = mid\\n        else:\\n            end = mid\\n\\t\\t\\n\\t\\t### Note that, since (1) and (3) are merged, if there is a solution, it has to be start!\\n\\t\\t### Also remember start is a valid index at the beginning where end is an invalid index,\\n\\t\\t### and we make sure start is always valid during the process, so again if there is a \\n\\t\\t### solution, it has to be start\\n\\n\\t### Finally, remember to check if start meets the condition or not.\\n    return start if check(start) else -1\\n```\\n\\nThe advantage of this template is that we don\\'t need to think too much about the indices (e.g., +1, -1, odd, even, etc.) because we know that ```start``` will always be valid and meets the condition, so it should be the result at the end (if result exists). Note that, sometimes, depending on the problem, we may want to make ```end``` to be the result, and in that case, we will assign ```start``` to -1 (0-indexed) and let ```end``` be len(something)-1 at the beginning, and make sure ```end``` is always valid and meets the condition during the search.\\n\\n**Template with out comments:**\\n```python\\n\\ndef check(mid, target):\\n\\treturn target >= arr[mid]\\n\\ndef binarySearch(arr, target):\\n    start = 0\\n    end = len(arr)\\n    while start+1 < end:\\n        mid = (start+end)//2\\n        if check(mid, target):\\n            start = mid\\n        else:\\n            end = mid\\n    return start if check(start) else -1\\n```\\n\\n**Try this template on some medium questions!** remember to think about the check function!\\n[Koko Eating Bananas](https://leetcode.com/problems/koko-eating-bananas/)\\n[Find the Smallest Divisor Given a Threshold](https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/)\\n[Minimum Number of Days to Make m Bouquets](https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/)\\n[Capacity To Ship Packages Within D Days](https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/)\\n\\n**Upvote** if you like this post.\\n\\n**Connect with me on [LinkedIn](https://www.linkedin.com/in/meida-chen-938a265b/)** if you\\'d like to discuss other related topics\\n\\nJust in case if you are working on **ML/DL 3D data-related projects** or are interested in the topic, please check out our project **[HERE](https://github.com/meidachen/STPLS3D)**",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        s = 1\\n        e = n+1\\n        while s+1<e:\\n            mid = (s+e)//2\\n            if guess(mid)>=0:\\n                s = mid\\n            else:\\n                e = mid\\n        return s\\n```\n```python\\n\\ndef check(mid, target):\\n\\treturn target >= arr[mid]\\n\\ndef binarySearch(arr, target):\\n    start = 0               ### The smallest valid index\\n    end = len(arr)  \\t\\t### The largest valid index +1 (an invalid index, because 0-indexed)\\n    \\n    while start+1 < end:\\n\\n    \\t### the middle point between start and end\\n        mid = (start+end)//2\\n        \\n        ### In a binary search problem, we will need a check fundtion\\n        ### to check if mid is meeting the condition or not.\\n        ### In this case, we check if arr[mid] >= target.\\n        ### In the original problem, this function is given named \"guess\"\\n        \\n        ### when we check mid, there are three conditions:\\n        #   (1) target > mid, \\tmove start to mid\\n        #   (2) target < mid,\\tmove end to mid\\n        #   (3) target == mid, \\twe found it!\\n        ### let\\'s merge (1) and (3) together, then we have the following:\\n        \\n        ### The reason I have a check function here even though it just comparing two numbers\\n        ### is that in many other problems, the check function can go though an entire array or tree or other things.\\n        ### With this template, designing the correct check function is critical in solving other questions.\\n        if check(mid, target):\\n            start = mid\\n        else:\\n            end = mid\\n\\t\\t\\n\\t\\t### Note that, since (1) and (3) are merged, if there is a solution, it has to be start!\\n\\t\\t### Also remember start is a valid index at the beginning where end is an invalid index,\\n\\t\\t### and we make sure start is always valid during the process, so again if there is a \\n\\t\\t### solution, it has to be start\\n\\n\\t### Finally, remember to check if start meets the condition or not.\\n    return start if check(start) else -1\\n```\n```start```\n```end```\n```start```\n```end```\n```end```\n```python\\n\\ndef check(mid, target):\\n\\treturn target >= arr[mid]\\n\\ndef binarySearch(arr, target):\\n    start = 0\\n    end = len(arr)\\n    while start+1 < end:\\n        mid = (start+end)//2\\n        if check(mid, target):\\n            start = mid\\n        else:\\n            end = mid\\n    return start if check(start) else -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84668,
                "title": "short-java-code-using-binary-search",
                "content": "This problem is a binary search problem has an O(logn) complexity.\\n\\n    public int guessNumber(int n) {\\n        int i = 1, j = n;\\n        while(i < j) {\\n            int mid = i + (j - i) / 2;\\n            if(guess(mid) == 0) {\\n                return mid;\\n            } else if(guess(mid) == 1) {\\n                i = mid + 1;\\n            } else {\\n                j = mid;\\n            }\\n        }\\n        return i;\\n    }",
                "solutionTags": [],
                "code": "This problem is a binary search problem has an O(logn) complexity.\\n\\n    public int guessNumber(int n) {\\n        int i = 1, j = n;\\n        while(i < j) {\\n            int mid = i + (j - i) / 2;\\n            if(guess(mid) == 0) {\\n                return mid;\\n            } else if(guess(mid) == 1) {\\n                i = mid + 1;\\n            } else {\\n                j = mid;\\n            }\\n        }\\n        return i;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2819657,
                "title": "c-faster-than-binary-search-repost",
                "content": "# Approach 1: just know the answer ;)\\n\\nWhy use binary search if you can just know the answer? This is just for your entertainmaint. :) I hope this doesn\\'t violate any LC ToS.\\n\\n```cpp\\n// USE AT YOUR OWN RISK.\\n//\\n// We need this stub so the code compiles.\\nclass Solution {\\npublic:\\n    static int guessNumber(const int n) {\\n        assert(false);        \\n        return -1;\\n    }\\n};\\n\\n// Our own main() replacing the one provided by leetcode.\\nint main(int argc, char* argv[]) {\\n    // For faster IO.\\n    std::ios::sync_with_stdio(false);\\n    cin.tie(nullptr);\\n    cout.tie(nullptr);\\n  \\n    // \"user.out\" is where the leetcode framework expects the result.\\n    ofstream fuserout(\"user.out\");\\n    \\n    // Reading STDIN and write out the answer.\\n    int n;\\n    int a;\\n    while (cin >> n >> a) {\\n        fuserout << a << \"\\\\n\";\\n    }\\n    \\n    return 0;\\n}\\n\\n// Move the leetcode standard main() out of the way.\\n#define main old_main\\n```\\n\\n**Complexity Analsysis**\\n  * Time Complexity: $$O(1)$$\\n  * Space Complexity: $$O(1)$$\\n\\n# Approach 2: binary search\\nI assume that\\'s the approach we are expected to use.\\n\\n```cpp\\n    static int guessNumber(const int n) {\\n        int lo = 1;\\n        int hi = n;\\n        while (lo <= hi) {\\n            const int mid = lo + (hi - lo) / 2;\\n            const int g = guess(mid);\\n            if (g == 0) {\\n                return mid;\\n            } else if (g == -1) {\\n                hi = mid - 1;\\n            } else {\\n                lo = mid + 1;\\n            }\\n        }\\n        // unreachable\\n        assert(false);\\n        return -1;\\n    }\\n```\\n\\n**Complexity Analysis**\\n  * Time Complexity: $$O(\\\\log n)$$\\n  * Space Complexity: $$O(1)$$\\n\\nI am not sure why [my original post](https://leetcode.com/problems/guess-number-higher-or-lower/solutions/2818891/C++-oror-mind-reading:-just-know-the-answer-in-O(1)-time/) isn\\'t accesssible any more, but I reposted it.\\n\\n_As always: Feedback, questions, and comments are welcome. Leaving an up-vote sparks joy! :)_\\n\\n**p.s. Join us on the [LeetCode The Hard Way Discord Server](https://discord.gg/hFUyVyWy2E)!**\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\n// USE AT YOUR OWN RISK.\\n//\\n// We need this stub so the code compiles.\\nclass Solution {\\npublic:\\n    static int guessNumber(const int n) {\\n        assert(false);        \\n        return -1;\\n    }\\n};\\n\\n// Our own main() replacing the one provided by leetcode.\\nint main(int argc, char* argv[]) {\\n    // For faster IO.\\n    std::ios::sync_with_stdio(false);\\n    cin.tie(nullptr);\\n    cout.tie(nullptr);\\n  \\n    // \"user.out\" is where the leetcode framework expects the result.\\n    ofstream fuserout(\"user.out\");\\n    \\n    // Reading STDIN and write out the answer.\\n    int n;\\n    int a;\\n    while (cin >> n >> a) {\\n        fuserout << a << \"\\\\n\";\\n    }\\n    \\n    return 0;\\n}\\n\\n// Move the leetcode standard main() out of the way.\\n#define main old_main\\n```\n```cpp\\n    static int guessNumber(const int n) {\\n        int lo = 1;\\n        int hi = n;\\n        while (lo <= hi) {\\n            const int mid = lo + (hi - lo) / 2;\\n            const int g = guess(mid);\\n            if (g == 0) {\\n                return mid;\\n            } else if (g == -1) {\\n                hi = mid - 1;\\n            } else {\\n                lo = mid + 1;\\n            }\\n        }\\n        // unreachable\\n        assert(false);\\n        return -1;\\n    }\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1518509,
                "title": "python-binary-search-solution",
                "content": "**Python :**\\n\\n```\\ndef guessNumber(self, n: int) -> int:\\n\\tlow = 0\\n\\thigh = n\\n\\twhile low <= high:\\n\\t\\tmid = (low + high ) // 2\\n\\t\\tres = guess(mid)\\n\\t\\tif res < 0:\\n\\t\\t\\thigh = mid - 1\\n\\n\\t\\telif res > 0:\\n\\t\\t\\tlow = mid + 1\\n\\n\\t\\telse:\\n\\t\\t\\treturn mid\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Tree"
                ],
                "code": "```\\ndef guessNumber(self, n: int) -> int:\\n\\tlow = 0\\n\\thigh = n\\n\\twhile low <= high:\\n\\t\\tmid = (low + high ) // 2\\n\\t\\tres = guess(mid)\\n\\t\\tif res < 0:\\n\\t\\t\\thigh = mid - 1\\n\\n\\t\\telif res > 0:\\n\\t\\t\\tlow = mid + 1\\n\\n\\t\\telse:\\n\\t\\t\\treturn mid\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2818894,
                "title": "will-never-ever-use-mid-start-end-2",
                "content": "using (start + end)/2 instead of mid= start+(end-start)/2 will lead to overflows(beg + end > Integer.MAX_VALUE) or change all the int variable to the long variables \\n\\n\\n\\n**Extended Explanation**\\nthe variable mid exceeds the limit and becomes negative:- int can take values upto -2^31 to (2^31)-1\\nie, 01111111111111111111111111111111 to 10000000000000000000000000000000\\nso if we add 1 to 01111111111111111111111111111111 we get 010000000000000000000000000000000 but since our int can\\'t store all the bits\\nit just stores 10000000000000000000000000000000 and that is negative so our binary search just keeps oscillating and ends up in an infinite loop\\n\\n# Code\\n```\\n\\n    public int guessNumber(int n) {\\n\\n\\n        int start=1, end=n, mid;\\n\\n        while( start<=end){\\n            \\n            mid= start+(end- start)/2;\\n\\n            if( guess(mid)==0) return mid;\\n            else if( guess(mid)==1) start=mid+1;\\n            else end=mid-1; \\n        }\\n\\n        return -1;\\n}\\n```\\n\\nchanging all the int variable to the long type variables\\n\\n```\\n\\n    public int guessNumber(int n) {\\n\\n\\n        long start=1, end=n, mid;\\n        while( start<=end){\\n            \\n            mid= (start+end)/2;\\n\\n            if( guess((int)mid)==0) return (int)mid;\\n            else if( guess((int)mid)==1) start=mid+1;\\n            else end=mid-1; \\n        }\\n\\n        return -1;\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\n    public int guessNumber(int n) {\\n\\n\\n        int start=1, end=n, mid;\\n\\n        while( start<=end){\\n            \\n            mid= start+(end- start)/2;\\n\\n            if( guess(mid)==0) return mid;\\n            else if( guess(mid)==1) start=mid+1;\\n            else end=mid-1; \\n        }\\n\\n        return -1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3212562,
                "title": "c-binary-search-easiest-beginner-friendly-sol",
                "content": "# Intuition of this Problem:\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**NOTE - PLEASE READ APPROACH FIRST THEN SEE THE CODE. YOU WILL DEFINITELY UNDERSTAND THE CODE LINE BY LINE AFTER SEEING THE APPROACH.**\\n\\n# Approach for this Problem:\\n1. Initialize first to 1 and last to n.\\n2. While first is less than or equal to last, do the following:\\n    a. Compute mid as first + (last - first) / 2.\\n    b. If guess(mid) returns 0, return mid.\\n    c. If guess(mid) returns -1, update last to mid - 1.\\n    d. If guess(mid) returns 1, update first to mid + 1.\\n3. Return -1.\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Humble Request:\\n- If my solution is helpful to you then please **UPVOTE** my solution, your **UPVOTE** motivates me to post such kind of solution.\\n- Please let me know in comments if there is need to do any improvement in my approach, code....anything.\\n- **Let\\'s connect on** https://www.linkedin.com/in/abhinash-singh-1b851b188\\n\\n![57jfh9.jpg](https://assets.leetcode.com/users/images/c2826b72-fb1c-464c-9f95-d9e578abcaf3_1674104075.4732099.jpeg)\\n\\n# Code:\\n```C++ []\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int first = 1, last = n;\\n        while (first <= last) {\\n            int mid = first + (last - first) / 2;\\n            if (guess(mid) == 0)\\n                return mid;\\n            else if (guess(mid) == -1)\\n                last = mid - 1;\\n            else\\n                first = mid + 1;\\n        }\\n        return -1;\\n    }\\n};\\n```\\n```Java []\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int first = 1, last = n;\\n        while (first <= last) {\\n            int mid = first + (last - first) / 2;\\n            int res = guess(mid);\\n            if (res == 0) {\\n                return mid;\\n            } else if (res == -1) {\\n                last = mid - 1;\\n            } else {\\n                first = mid + 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n\\n```\\n```Python []\\nclass Solution(GuessGame):\\n    def guessNumber(self, n: int) -> int:\\n        first, last = 1, n\\n        while first <= last:\\n            mid = first + (last - first) // 2\\n            res = self.guess(mid)\\n            if res == 0:\\n                return mid\\n            elif res == -1:\\n                last = mid - 1\\n            else:\\n                first = mid + 1\\n        return -1\\n\\n```\\n\\n# Time Complexity and Space Complexity:\\n- Time complexity: **O(logn)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(1)**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Binary Search"
                ],
                "code": "```C++ []\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int first = 1, last = n;\\n        while (first <= last) {\\n            int mid = first + (last - first) / 2;\\n            if (guess(mid) == 0)\\n                return mid;\\n            else if (guess(mid) == -1)\\n                last = mid - 1;\\n            else\\n                first = mid + 1;\\n        }\\n        return -1;\\n    }\\n};\\n```\n```Java []\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int first = 1, last = n;\\n        while (first <= last) {\\n            int mid = first + (last - first) / 2;\\n            int res = guess(mid);\\n            if (res == 0) {\\n                return mid;\\n            } else if (res == -1) {\\n                last = mid - 1;\\n            } else {\\n                first = mid + 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n\\n```\n```Python []\\nclass Solution(GuessGame):\\n    def guessNumber(self, n: int) -> int:\\n        first, last = 1, n\\n        while first <= last:\\n            mid = first + (last - first) // 2\\n            res = self.guess(mid)\\n            if res == 0:\\n                return mid\\n            elif res == -1:\\n                last = mid - 1\\n            else:\\n                first = mid + 1\\n        return -1\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1804814,
                "title": "c-0-ms-binary-search-easy-to-understand",
                "content": "\\t\\t//using binary search\\n\\n\\t\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\tint guessNumber(int n) \\n\\t\\t\\t{\\n\\t\\t\\t\\tlong l=1;   //low\\n\\t\\t\\t\\tlong h=n;   //high\\n\\t\\t\\t\\tlong mid;\\n\\t\\t\\t\\twhile(l<=h)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tmid= (l+h)/2;\\n\\t\\t\\t\\t\\tif(guess(mid)==1)           //guess API\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tl=mid+1;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse if(guess(mid)==-1)         //guess API\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\th=mid-1;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\treturn mid;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn l;\\n\\t\\t\\t}\\n\\t\\t}; \\n\\n",
                "solutionTags": [
                    "C",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\tint guessNumber(int n) \\n\\t\\t\\t{\\n\\t\\t\\t\\tlong l=1;   //low\\n\\t\\t\\t\\tlong h=n;   //high\\n\\t\\t\\t\\tlong mid;\\n\\t\\t\\t\\twhile(l<=h)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tmid= (l+h)/2;\\n\\t\\t\\t\\t\\tif(guess(mid)==1)           //guess API\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tl=mid+1;\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1593834,
                "title": "log-n-java-solution-0ms-100-faster",
                "content": "**Upvote if you LIKE** \\uD83D\\uDE42\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n\\n        int l = 1, r = n;\\n        while(l<=r){\\n            int mid = l+(r-l)/2;\\n            if(guess(mid) == 0)\\n                return mid;\\n            else if(guess(mid) == 1)\\n                l = mid+1;\\n            else\\n                r = mid-1;\\n        }\\n        \\n        return -1;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n\\n        int l = 1, r = n;\\n        while(l<=r){\\n            int mid = l+(r-l)/2;\\n            if(guess(mid) == 0)\\n                return mid;\\n            else if(guess(mid) == 1)\\n                l = mid+1;\\n            else\\n                r = mid-1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 84719,
                "title": "python-solution-using-binary-search",
                "content": "```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\\n# def guess(num):\\n\\nclass Solution(object):\\n    def guessNumber(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        low = 1\\n        high = n\\n        while low <= high:\\n            mid = (low + high)//2\\n            res =  guess(mid)\\n            if res == 0 :\\n                return mid\\n            elif res == -1:\\n                high = mid - 1\\n            else:\\n                low = mid + 1\\n                \\n```",
                "solutionTags": [],
                "code": "```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\\n# def guess(num):\\n\\nclass Solution(object):\\n    def guessNumber(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        low = 1\\n        high = n\\n        while low <= high:\\n            mid = (low + high)//2\\n            res =  guess(mid)\\n            if res == 0 :\\n                return mid\\n            elif res == -1:\\n                high = mid - 1\\n            else:\\n                low = mid + 1\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2820550,
                "title": "java-faster-than-100-binary-search",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int start=0,end=n;\\n        while(start<=end){\\n            int mid=start+(end-start)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)==-1)\\n                end=mid-1;\\n            else\\n                start=mid+1;\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search",
                    "Interactive"
                ],
                "code": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int start=0,end=n;\\n        while(start<=end){\\n            int mid=start+(end-start)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)==-1)\\n                end=mid-1;\\n            else\\n                start=mid+1;\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2717871,
                "title": "dont-try-this-code-one-line-python-code",
                "content": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        return __pick__\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        return __pick__\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1975666,
                "title": "binary-search-100-faster-solution",
                "content": "Binary Search\\n```\\n    private static int guessNumber(int n) {\\n        return guess(n) == 0 ? n : guessNumberSearch(0, n);\\n    }\\n\\t\\n\\tprivate static int guessNumberSearch(int l, int r) {\\n        int mid = l + (r - l) / 2;\\n        if (guess(mid) == 0) {\\n            return mid;\\n        }\\n        if (guess(mid) == -1) {\\n            return guessNumberSearch(l, mid - 1);\\n        }else {\\n            return guessNumberSearch(mid + 1, r);\\n        }\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\n    private static int guessNumber(int n) {\\n        return guess(n) == 0 ? n : guessNumberSearch(0, n);\\n    }\\n\\t\\n\\tprivate static int guessNumberSearch(int l, int r) {\\n        int mid = l + (r - l) / 2;\\n        if (guess(mid) == 0) {\\n            return mid;\\n        }\\n        if (guess(mid) == -1) {\\n            return guessNumberSearch(l, mid - 1);\\n        }else {\\n            return guessNumberSearch(mid + 1, r);\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1517483,
                "title": "python-binary-search-explained",
                "content": "If you ever played this game in real life like I did, it is pretty straightforward: you need to use binary search. Imagine that our range is `[1, 100]`. Then in the first question you ask information about number `50`. Depending on answer you either win or have interavals `[1, 49]` or `[51, 100]` and you continue in the same manner.\\n\\n####  Complexity\\nIt is `O(log n)` for time and `O(1)` for space.\\n\\n#### Code\\n```python\\nclass Solution:\\n    def guessNumber(self, n):\\n        beg, end = 1, n\\n        while beg <= end:\\n            mid = (beg + end)//2\\n            t = guess(mid)\\n            if t == 0: return mid\\n            if t == -1: end = mid - 1\\n            if t == 1:  beg = mid + 1\\n```\\n\\nIf you have any questoins, feel free to ask. If you like the solution and explanation, please **upvote!**",
                "solutionTags": [
                    "Binary Search"
                ],
                "code": "```python\\nclass Solution:\\n    def guessNumber(self, n):\\n        beg, end = 1, n\\n        while beg <= end:\\n            mid = (beg + end)//2\\n            t = guess(mid)\\n            if t == 0: return mid\\n            if t == -1: end = mid - 1\\n            if t == 1:  beg = mid + 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3250471,
                "title": "374-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. We initialize two variables left and right with 1 and n respectively, which represent the start and end points of our search range.\\n\\n2. We use a while loop to perform the binary search until we guess the correct number.\\n\\n3. In each iteration, we calculate the middle point of the search range using (left + right) // 2.\\n\\n4. We then use the guess function to check if the middle point is the correct number or not. If it is the correct number, we return it.\\n\\n5. If the guess is greater than the picked number, we update our search range to the left half by setting right = mid - 1.\\n\\n6. If the guess is smaller than the picked number, we update our search range to the right half by setting left = mid + 1.\\n\\n7. If we exhaust our search range and still haven\\'t found the correct number, we return -1.\\n\\nNote: The guess function is not defined in the solution code because it is a pre-defined API function provided by the question prompt. We can assume that it takes an integer as input and returns 0 if the integer is the correct number, 1 if it is lower than the correct number, and -1 if it is greater than the correct number.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        left, right = 1, n\\n        \\n        while left <= right:\\n            mid = (left + right) // 2\\n            res = guess(mid)\\n            \\n            if res == 0:\\n                return mid\\n            elif res < 0:\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        \\n        return -1\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Search",
                    "Interactive"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        left, right = 1, n\\n        \\n        while left <= right:\\n            mid = (left + right) // 2\\n            res = guess(mid)\\n            \\n            if res == 0:\\n                return mid\\n            elif res < 0:\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        \\n        return -1\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819865,
                "title": "c-ternary-search-modification-of-binary-search",
                "content": "# Intuition\\nDivide the RANGE INTO 3 PARTS INSTEAD OF 2\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nInstead of doing Binary search we are dividing the range into 3 parts , which will minimise the fuction calls . \\nwe have two mid points m1 and m2 . and we obtain the result by using them (See the code) .\\n\\n\\n# Complexity\\n- Time complexity: log(N) base 3 \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l=1,r=n ;\\n        while(l<=r)\\n        {\\n            int m= l+ (r-l)/2;\\n            int m1= l+(m-l)/2 , m2=m+(r-m)/2;\\n            int k1=guess(m1) , k2=guess(m2);\\n            if(k1==0) return m1;\\n            else if(k2==0) return m2;\\n            else if(k1==-1) r=m1-1;\\n            else if(k2==1) l=m2+1;\\n            else \\n            {\\n                l=m1+1;\\n                r=m2-1;\\n            }\\n\\n        }\\n        return -1;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l=1,r=n ;\\n        while(l<=r)\\n        {\\n            int m= l+ (r-l)/2;\\n            int m1= l+(m-l)/2 , m2=m+(r-m)/2;\\n            int k1=guess(m1) , k2=guess(m2);\\n            if(k1==0) return m1;\\n            else if(k2==0) return m2;\\n            else if(k1==-1) r=m1-1;\\n            else if(k2==1) l=m2+1;\\n            else \\n            {\\n                l=m1+1;\\n                r=m2-1;\\n            }\\n\\n        }\\n        return -1;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819126,
                "title": "python-3-7-lines-binary-search-w-explanation-and-example-t-m-99-8-42",
                "content": "The problem is a binary search, in which \" m < target\" is equivalent to guess(m) == 1 and \" m > target\" is equivalent to guess(m) == -1.\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n\\n        l, r= 1, n                          #     Ex: n = 20  pick = 8\\n                                            #\\n        while r >= l:                       #       l     r     m   guess(m)  \\n                                            #      \\u2013\\u2013\\u2013   \\u2013\\u2013\\u2013   \\u2013\\u2013\\u2013    \\u2013\\u2013\\u2013\\u2013\\n            m = (l + r)//2                  #       1     20    10     -1\\n            query =  guess(m)\\t\\t        #       1     10     5     -1\\n                                            #       6     10     8      0\\n            if query ==  1: l = m+1         #                    |       \\n            elif query == -1: r = m         #                  answer\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    \\n            else: return m\\n```\\n[https://leetcode.com/submissions/detail/595048857/](http://)",
                "solutionTags": [
                    "Python",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n\\n        l, r= 1, n                          #     Ex: n = 20  pick = 8\\n                                            #\\n        while r >= l:                       #       l     r     m   guess(m)  \\n                                            #      \\u2013\\u2013\\u2013   \\u2013\\u2013\\u2013   \\u2013\\u2013\\u2013    \\u2013\\u2013\\u2013\\u2013\\n            m = (l + r)//2                  #       1     20    10     -1\\n            query =  guess(m)\\t\\t        #       1     10     5     -1\\n                                            #       6     10     8      0\\n            if query ==  1: l = m+1         #                    |       \\n            elif query == -1: r = m         #                  answer\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    \\n            else: return m\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2818891,
                "title": "c-faster-than-binary-search",
                "content": "[ looks like this post is visible again, in the meantime I [reposted](https://leetcode.com/problems/guess-number-higher-or-lower/discuss/2819657/C%2B%2B-oror-faster-than-binary-search-(repost)) it. ]\\n\\n# Approach 1: just know the answer ;)\\n\\nWhy use binary search if you can just know the answer? This is just for your entertainmaint. :)\\n\\n```cpp\\n// USE AT YOUR OWN RISK.\\n//\\n// We need this stub so the code compiles.\\nclass Solution {\\npublic:\\n    static int guessNumber(const int n) {\\n        assert(false);        \\n        return -1;\\n    }\\n};\\n\\n// Our own main() replacing the one provided by leetcode.\\nint main(int argc, char* argv[]) {\\n    // For faster IO.\\n    std::ios::sync_with_stdio(false);\\n    cin.tie(nullptr);\\n    cout.tie(nullptr);\\n  \\n    // \"user.out\" is where the leetcode framework expects the result.\\n    ofstream fuserout(\"user.out\");\\n    \\n    // Reading STDIN and write out the answer.\\n    int n;\\n    int a;\\n    while (cin >> n >> a) {\\n        fuserout << a << \"\\\\n\";\\n    }\\n    \\n    return 0;\\n}\\n\\n// Move the leetcode standard main() out of the way.\\n#define main old_main\\n```\\n\\n**Complexity Analsysis**\\n  * Time Complexity: $$O(1)$$\\n  * Space Complexity: $$O(1)$$\\n\\n\\n# Approach 2: binary search\\nI assume that\\'s the approach we are expected to use.\\n\\n```cpp\\n    static int guessNumber(const int n) {\\n        int lo = 1;\\n        int hi = n;\\n        while (lo <= hi) {\\n            const int mid = lo + (hi - lo) / 2;\\n            const int g = guess(mid);\\n            if (g == 0) {\\n                return mid;\\n            } else if (g == -1) {\\n                hi = mid - 1;\\n            } else {\\n                lo = mid + 1;\\n            }\\n        }\\n        // unreachable\\n        assert(false);\\n        return -1;\\n    }\\n```\\n\\n**Complexity Analysis**\\n  * Time Complexity: $$O(\\\\log n)$$\\n  * Space Complexity: $$O(1)$$\\n\\n_As always: Feedback, questions, and comments are welcome. Leaving an up-vote sparks joy! :)_\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\n// USE AT YOUR OWN RISK.\\n//\\n// We need this stub so the code compiles.\\nclass Solution {\\npublic:\\n    static int guessNumber(const int n) {\\n        assert(false);        \\n        return -1;\\n    }\\n};\\n\\n// Our own main() replacing the one provided by leetcode.\\nint main(int argc, char* argv[]) {\\n    // For faster IO.\\n    std::ios::sync_with_stdio(false);\\n    cin.tie(nullptr);\\n    cout.tie(nullptr);\\n  \\n    // \"user.out\" is where the leetcode framework expects the result.\\n    ofstream fuserout(\"user.out\");\\n    \\n    // Reading STDIN and write out the answer.\\n    int n;\\n    int a;\\n    while (cin >> n >> a) {\\n        fuserout << a << \"\\\\n\";\\n    }\\n    \\n    return 0;\\n}\\n\\n// Move the leetcode standard main() out of the way.\\n#define main old_main\\n```\n```cpp\\n    static int guessNumber(const int n) {\\n        int lo = 1;\\n        int hi = n;\\n        while (lo <= hi) {\\n            const int mid = lo + (hi - lo) / 2;\\n            const int g = guess(mid);\\n            if (g == 0) {\\n                return mid;\\n            } else if (g == -1) {\\n                hi = mid - 1;\\n            } else {\\n                lo = mid + 1;\\n            }\\n        }\\n        // unreachable\\n        assert(false);\\n        return -1;\\n    }\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1517494,
                "title": "c-super-simple-and-short-binary-search-solution-0ms-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int lo = 1, hi = n, mid, result;\\n        \\n        while (lo <= hi) {\\n            mid = lo + (hi - lo) / 2;\\n            result = guess(mid);\\n            \\n            if (result == 0) return mid;\\n            if (result < 0) hi = mid - 1;\\n            else lo = mid + 1;\\n        }\\n        \\n        return lo;\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int lo = 1, hi = n, mid, result;\\n        \\n        while (lo <= hi) {\\n            mid = lo + (hi - lo) / 2;\\n            result = guess(mid);\\n            \\n            if (result == 0) return mid;\\n            if (result < 0) hi = mid - 1;\\n            else lo = mid + 1;\\n        }\\n        \\n        return lo;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84687,
                "title": "2ms-java",
                "content": "A typical binary search problem. `(l & r) + ((l ^ r) >> 1)` avoids the overflow (a much easier alternative is `l + (r - l) / 2`).\\n```\\n/* The guess API is defined in the parent class GuessGame.\\n   @param num, your guess\\n   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\\n      int guess(int num); */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 0, r = n;\\n        while (l < r) {\\n            int m = (l & r) + ((l ^ r) >> 1);\\n            if (guess(m) == 0) return m;\\n            else if (guess(m) == 1) l = m + 1;\\n            else r = m - 1;\\n        }\\n        return l;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/* The guess API is defined in the parent class GuessGame.\\n   @param num, your guess\\n   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\\n      int guess(int num); */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 0, r = n;\\n        while (l < r) {\\n            int m = (l & r) + ((l ^ r) >> 1);\\n            if (guess(m) == 0) return m;\\n            else if (guess(m) == 1) l = m + 1;\\n            else r = m - 1;\\n        }\\n        return l;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3973625,
                "title": "java-1000-beats-easy-binary-search",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUPVOTE ME\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. --!>\\n\\n Time complexity:0(log(n))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n      int low = 1 , high = n;\\n      while(low < high){\\n        int mid = low +(high - low)/2;\\n        if(guess(mid)==0) return mid;   \\n        else if(guess(mid)==1) low=mid+1;\\n        else high=mid;  \\n      }\\n    return low;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "Binary Search"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n      int low = 1 , high = n;\\n      while(low < high){\\n        int mid = low +(high - low)/2;\\n        if(guess(mid)==0) return mid;   \\n        else if(guess(mid)==1) low=mid+1;\\n        else high=mid;  \\n      }\\n    return low;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2820236,
                "title": "c-binary-search-saves-the-day-see-how",
                "content": "# Thought Process:\\nHint for binary search: - We have a sorted array of numbers *(From 1 to n)*.\\n\\nSo fellas, we have been provided with a sorted array and we have to decide which number is being picked by the test case.\\n\\nBut How binary search saves the day?\\n\\nFor example:-\\n```\\nn = 10, pick = 7\\n```\\n\\nSay, ```i = 1``` and ```j = n```.\\n\\n**1st iteration**\\n```\\nmid = (10+1)/2 = 11/2 = 5\\nguess(5) = 1\\n\\nThis proves that the answer lies in range [6,10]. Therefore i = 6, j = 10.\\n```\\n\\n**2nd iteration**\\n```\\nmid = (6+10)/2 = 16/2 = 8\\nguess (8) = -1\\n\\nThis proves that the answer lies in the range [6,7]. Therefore i = 6, j = 7.\\n```\\n\\n**3rd iteration**\\n```\\nmid = (6+7) = 13/2 = 6\\nguess(6) = 1\\n\\nThis proves that the answer lies in the range [7,7]. Therefore i = 7, j = 7.\\n```\\n\\n**4th iteration**\\n```\\nmid = (7+7)/2 = 14/2 = 7\\nguess(7) = 0\\n\\nSince guess(7) = 0, return 7.\\n```\\n\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        \\n        int front = 1, end = n;\\n        \\n        while (front <= end){\\n            int mid = ((unsigned int)front + (unsigned int)end) >> 1;\\n            if (guess (mid) == -1){\\n                end = mid - 1;\\n            }\\n            \\n            else if (guess (mid) == 1){\\n                front = mid + 1;\\n            }\\n            \\n            else {\\n                return mid;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```\\n\\n# Complexities:\\n**TC:** O(logn)\\n**SC:** O(1)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nn = 10, pick = 7\\n```\n```i = 1```\n```j = n```\n```\\nmid = (10+1)/2 = 11/2 = 5\\nguess(5) = 1\\n\\nThis proves that the answer lies in range [6,10]. Therefore i = 6, j = 10.\\n```\n```\\nmid = (6+10)/2 = 16/2 = 8\\nguess (8) = -1\\n\\nThis proves that the answer lies in the range [6,7]. Therefore i = 6, j = 7.\\n```\n```\\nmid = (6+7) = 13/2 = 6\\nguess(6) = 1\\n\\nThis proves that the answer lies in the range [7,7]. Therefore i = 7, j = 7.\\n```\n```\\nmid = (7+7)/2 = 14/2 = 7\\nguess(7) = 0\\n\\nSince guess(7) = 0, return 7.\\n```\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        \\n        int front = 1, end = n;\\n        \\n        while (front <= end){\\n            int mid = ((unsigned int)front + (unsigned int)end) >> 1;\\n            if (guess (mid) == -1){\\n                end = mid - 1;\\n            }\\n            \\n            else if (guess (mid) == 1){\\n                front = mid + 1;\\n            }\\n            \\n            else {\\n                return mid;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819364,
                "title": "100-faster-java-solution-using-both-recursion-and-iteration",
                "content": "# Recursive Approach\\n```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n\\t  return binarySearch(1,n);\\n    }\\n    public int binarySearch(int low,int high){\\n        int mid=low+(high-low)/2;\\n        if(guess(mid)==0){\\n            return mid;\\n        }\\n        if(guess(mid)==1){\\n            return binarySearch(mid+1,high);\\n        }\\n        else{\\n            return binarySearch(low,mid-1);\\n        }\\n    }\\n    \\n}\\n```\\n# Iterative Approach\\n```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low=1,high=n,mid=n;\\n      while(guess(mid)!=0){\\n          mid=low+(high-low)/2;\\n          if(guess(mid)==1){\\n             low=mid+1;\\n          }\\n          else{\\n              high=mid-1;\\n          }\\n      }\\n      return mid;  \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree",
                    "Iterator"
                ],
                "code": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n\\t  return binarySearch(1,n);\\n    }\\n    public int binarySearch(int low,int high){\\n        int mid=low+(high-low)/2;\\n        if(guess(mid)==0){\\n            return mid;\\n        }\\n        if(guess(mid)==1){\\n            return binarySearch(mid+1,high);\\n        }\\n        else{\\n            return binarySearch(low,mid-1);\\n        }\\n    }\\n    \\n}\\n```\n```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low=1,high=n,mid=n;\\n      while(guess(mid)!=0){\\n          mid=low+(high-low)/2;\\n          if(guess(mid)==1){\\n             low=mid+1;\\n          }\\n          else{\\n              high=mid-1;\\n          }\\n      }\\n      return mid;  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1517333,
                "title": "c-java-easy-binary-search-faster-than-100",
                "content": "**[Github Repo Link](https://github.com/bhaumikmaan/Competitve-Programming-Solutions/tree/main/LeetCode)** - *Do star the repo :)*\\n**IDEA**\\nIf your output from `guess()` is: \\n```\\n-1 : Your number is lower -> Change Right = mid - 1.\\n1 : Your number is higher. -> Change Left = mid + 1.\\n0 : Number Found! -> Return that number\\n```\\nSo we use binary search for this problem!\\n**NOTE:** Use `mid = l + (r - l)/2` so integer does not overflow\\n\\n**SOLUTION**\\n`IN C++`\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l = 1 , r = n ;\\n        while(l <= r) \\n        {\\n            int m = l + (r-l)/2 ;\\n            if(guess(m) == 0) \\n                return m ;\\n            if(guess(m) < 0) \\n                r = m - 1 ;\\n            else \\n                l = m + 1 ;\\n        }\\n        return 0;\\n    }\\n};\\n```\\n`IN JAVA`\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1 , r = n ;\\n        while(l <= r) \\n        {\\n            int m = l + (r-l)/2 ;\\n            if(guess(m) == 0) \\n                return m ;\\n            if(guess(m) < 0) \\n                r = m - 1 ;\\n            else \\n                l = m + 1 ;\\n        }\\n        return 0;\\n    }\\n}\\n```\\nIf you liked it, don\\'t forget to upvote :)",
                "solutionTags": [],
                "code": "```\\n-1 : Your number is lower -> Change Right = mid - 1.\\n1 : Your number is higher. -> Change Left = mid + 1.\\n0 : Number Found! -> Return that number\\n```\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l = 1 , r = n ;\\n        while(l <= r) \\n        {\\n            int m = l + (r-l)/2 ;\\n            if(guess(m) == 0) \\n                return m ;\\n            if(guess(m) < 0) \\n                r = m - 1 ;\\n            else \\n                l = m + 1 ;\\n        }\\n        return 0;\\n    }\\n};\\n```\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1 , r = n ;\\n        while(l <= r) \\n        {\\n            int m = l + (r-l)/2 ;\\n            if(guess(m) == 0) \\n                return m ;\\n            if(guess(m) < 0) \\n                r = m - 1 ;\\n            else \\n                l = m + 1 ;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1517295,
                "title": "javascript-solution-beats-99",
                "content": "```\\nvar guessNumber = function(n) {\\n    let l = 0, r = n-1;\\n    while(l  <= r ){\\n        let mid = Math.floor((l+r)/2);\\n        let res = guess(mid);\\n        if(res == 0) return mid;\\n        else if (res == 1) l = mid+1;\\n        else r = mid-1;\\n    }\\n    return l;    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar guessNumber = function(n) {\\n    let l = 0, r = n-1;\\n    while(l  <= r ){\\n        let mid = Math.floor((l+r)/2);\\n        let res = guess(mid);\\n        if(res == 0) return mid;\\n        else if (res == 1) l = mid+1;\\n        else r = mid-1;\\n    }\\n    return l;    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2819307,
                "title": "c-easy-understanding-binary-search-video-solution",
                "content": "**C++ Clear Explaination ,Please support if you find it usefull. Can give me feedback in comment for improvement.,will be very thankfull.**\\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/XSwfObGK_g0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\\n\\n\\n\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n\\n        int left = 1;\\n        int right = n;\\n\\n        while(left<=right){\\n            // calculate mid .\\n            int mid = left + (right-left)/2;\\n\\n            // get result for mid.\\n            int val = guess(mid);\\n\\n            if(val == 0) return mid;\\n            else if(val == -1 ) right = mid-1;\\n            else left = mid+1;\\n        }\\n        return -1;\\n\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n\\n        int left = 1;\\n        int right = n;\\n\\n        while(left<=right){\\n            // calculate mid .\\n            int mid = left + (right-left)/2;\\n\\n            // get result for mid.\\n            int val = guess(mid);\\n\\n            if(val == 0) return mid;\\n            else if(val == -1 ) right = mid-1;\\n            else left = mid+1;\\n        }\\n        return -1;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819274,
                "title": "most-easy-c-solution-100-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n       int i=1, mid=n/2, k, l=0;\\n       if(guess(mid)==0)\\n       return mid;\\n       else if(guess(mid)==-1)\\n       k=mid, l=0;\\n       else\\n       k=n, l=mid;\\n       for(i=l;i<k;i++)\\n       {\\n           if(guess(i)==0)\\n           break;\\n         \\n        }\\n        return i;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n       int i=1, mid=n/2, k, l=0;\\n       if(guess(mid)==0)\\n       return mid;\\n       else if(guess(mid)==-1)\\n       k=mid, l=0;\\n       else\\n       k=n, l=mid;\\n       for(i=l;i<k;i++)\\n       {\\n           if(guess(i)==0)\\n           break;\\n         \\n        }\\n        return i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2593798,
                "title": "python-o-1-cheese",
                "content": "Don\\'t try this at home kids haha!\\n\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        return __pick__\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        return __pick__\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1955883,
                "title": "easy-to-understand-java",
                "content": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int start = 1, end = n;\\n        while(start <= end){\\n            int mid = start+(end-start)/2;     \\n            if(guess(mid) == 0) return mid;\\n            else if(guess(mid) == -1) end = mid-1;\\n            else\\n                start = mid+1;\\n        }\\n        return -1;\\n    }\\n}\\n```\\n\\n**NOTE**\\nif you write **mid = (start+end)/2** will give **TLE** for\\n2126753390\\n1702766719\\n\\ndue to **Integer Overflow**\\n\\nIf you have any **doubts**, feel **free to ask**...\\nIf you understand the **concept**. Don\\'t Forget to **upvote**\\n\\n\\n",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int start = 1, end = n;\\n        while(start <= end){\\n            int mid = start+(end-start)/2;     \\n            if(guess(mid) == 0) return mid;\\n            else if(guess(mid) == -1) end = mid-1;\\n            else\\n                start = mid+1;\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1517535,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    unsafe fn guessNumber(n: i32) -> i32 {\\n        let (mut low, mut high) = (1, n);\\n        loop {\\n            let mid = low + (high - low) / 2;\\n            match guess(mid) {\\n                0 => break mid,\\n                -1 => high = mid - 1,\\n                _ => low = mid + 1,\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Binary Tree"
                ],
                "code": "```\\nimpl Solution {\\n    unsafe fn guessNumber(n: i32) -> i32 {\\n        let (mut low, mut high) = (1, n);\\n        loop {\\n            let mid = low + (high - low) / 2;\\n            match guess(mid) {\\n                0 => break mid,\\n                -1 => high = mid - 1,\\n                _ => low = mid + 1,\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1517080,
                "title": "javascript-easy-to-understand-loop-or-recursive",
                "content": "It\\'s a standard binary search problem. So, we just write the code.\\n\\n# LOOP\\n\\n```js\\nconst guessNumber = (right) => {\\n  let left = 1;\\n  while (true) {\\n    const mid = ((left + right) / 2) << 0;\\n    const result = guess(mid);\\n    if (result === 0) return mid;\\n    result === 1 ? left = mid + 1 : right = mid - 1;\\n  }\\n};\\n```\\n\\n# RECURSIVE\\n\\n```js\\nconst guessNumber = (right, left = 1) => {\\n  const mid = ((left + right) / 2) << 0;\\n  switch(guess(mid)) {\\n    case 0:\\n      return mid;\\n    case -1:\\n      return guessNumber(mid - 1, left);\\n    case 1:\\n      return guessNumber(right, mid + 1);\\n  }\\n};\\n```\\n\\nor maybe you\\'d like to put all situations in a map:\\n\\n```js\\nconst next = {\\n  0: (mid, left, right) => mid,\\n  \"-1\": (mid, left, right) => guessNumber(mid - 1, left),\\n  1: (mid, left, right) => guessNumber(right, mid + 1),\\n};\\nconst guessNumber = (right, left = 1, mid = ((left + right) / 2) << 0) => next[guess(mid)](mid, left, right);\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst guessNumber = (right) => {\\n  let left = 1;\\n  while (true) {\\n    const mid = ((left + right) / 2) << 0;\\n    const result = guess(mid);\\n    if (result === 0) return mid;\\n    result === 1 ? left = mid + 1 : right = mid - 1;\\n  }\\n};\\n```\n```js\\nconst guessNumber = (right, left = 1) => {\\n  const mid = ((left + right) / 2) << 0;\\n  switch(guess(mid)) {\\n    case 0:\\n      return mid;\\n    case -1:\\n      return guessNumber(mid - 1, left);\\n    case 1:\\n      return guessNumber(right, mid + 1);\\n  }\\n};\\n```\n```js\\nconst next = {\\n  0: (mid, left, right) => mid,\\n  \"-1\": (mid, left, right) => guessNumber(mid - 1, left),\\n  1: (mid, left, right) => guessNumber(right, mid + 1),\\n};\\nconst guessNumber = (right, left = 1, mid = ((left + right) / 2) << 0) => next[guess(mid)](mid, left, right);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 542169,
                "title": "classic-binary-and-some-pitfalls",
                "content": "mid = low + (high - low) / 2; right side is inclusive, say high = n, does not handle overflow, say high = Integer.MAX_VALUE;\\nmid = (high + low) / 2; right side is exclusive, say high = n + 1, handles overflow.\\n\\n```\\n    public int guessNumber(int n) {\\n        int l = 1, r = n;\\n        while( l < r) {\\n            int mid = l + (r - l) / 2;\\n            int g = guess(mid);\\n            if (g == 0) return mid;\\n            else if (g == -1) r = mid - 1;\\n            else l = mid + 1;\\n        }\\n        return l;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int guessNumber(int n) {\\n        int l = 1, r = n;\\n        while( l < r) {\\n            int mid = l + (r - l) / 2;\\n            int g = guess(mid);\\n            if (g == 0) return mid;\\n            else if (g == -1) r = mid - 1;\\n            else l = mid + 1;\\n        }\\n        return l;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3227308,
                "title": "c-using-binary-search",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(log n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int start = 0 ; \\n        int end = n ; \\n        while (start <= end)\\n        {\\n            int mid = start + (end - start)/2 ;\\n            int g = guess(mid) ;\\n            if (g == 0)\\n            {\\n                return mid ;\\n            }\\n            else if (g < 0)\\n            {\\n                end = mid - 1 ;\\n            }\\n            else\\n            {\\n                start = mid + 1 ; \\n            }\\n        }\\n        return -1 ; \\n    }\\n};\\n```\\n![815a317f-9cdf-46e2-a397-af8869dafa2e_1673498197.3721023.png](https://assets.leetcode.com/users/images/1d986e16-1e5e-4f2e-bd07-98377d89f29c_1677299708.3109589.png)\\n",
                "solutionTags": [
                    "C++",
                    "Binary Search",
                    "Interactive"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int start = 0 ; \\n        int end = n ; \\n        while (start <= end)\\n        {\\n            int mid = start + (end - start)/2 ;\\n            int g = guess(mid) ;\\n            if (g == 0)\\n            {\\n                return mid ;\\n            }\\n            else if (g < 0)\\n            {\\n                end = mid - 1 ;\\n            }\\n            else\\n            {\\n                start = mid + 1 ; \\n            }\\n        }\\n        return -1 ; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819740,
                "title": "python-easy-binary-search-solution-o-log-n",
                "content": "def guessNumber(self, n: int) -> int:\\n        r=n+1\\n        l=1\\n        while(r>=l):\\n            mid=l+(r-l)//2\\n            if guess(mid)==0:\\n                return mid\\n            elif guess(mid)==-1:\\n                r=mid-1\\n            else:\\n                l=mid+1",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "def guessNumber(self, n: int) -> int:\\n        r=n+1\\n        l=1\\n        while(r>=l):\\n            mid=l+(r-l)//2\\n            if guess(mid)==0:\\n                return mid\\n            elif guess(mid)==-1:\\n                r=mid-1\\n            else:\\n                l=mid+1",
                "codeTag": "Python3"
            },
            {
                "id": 2164730,
                "title": "python3-extension-of-binary-search",
                "content": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        low = 1\\n        high = n\\n        \\n        while low<=high:\\n            mid = (low+high)//2\\n            gussed = guess(mid)\\n            \\n            if gussed == 0:\\n                return mid\\n            if gussed<0:\\n                high = mid-1\\n            else:\\n                low = mid+1\\n        \\n        return low\\n```",
                "solutionTags": [
                    "Python3",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        low = 1\\n        high = n\\n        \\n        while low<=high:\\n            mid = (low+high)//2\\n            gussed = guess(mid)\\n            \\n            if gussed == 0:\\n                return mid\\n            if gussed<0:\\n                high = mid-1\\n            else:\\n                low = mid+1\\n        \\n        return low\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1585096,
                "title": "java-binary-search-explained-with-comments-100-fast",
                "content": "\\'\\'\\'\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        \\n        //As we are talking about a range 1 to n and have comparisons in regard with\\n        //greater than target, less than target, or equal to target\\n        \\n        //Using BINARY SEARCH\\n        \\n        int start = 1;\\n        int end = n;\\n        \\n        while(start<=end)\\n        {\\n            int mid = start + (end-start)/2;\\n            \\n            if(guess(mid) == -1)        //greater then picked number\\n            {\\n                end = mid - 1;\\n            }\\n            else if(guess(mid) == 1)    //lesser than picked number\\n            {\\n                start = mid + 1;\\n            }\\n            else if(guess(mid) == 0)    //equal to the picked number\\n            {\\n                return mid;\\n            }\\n        }\\n        \\n        return -1;\\n    }\\n}\\n\\'\\'\\'",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        \\n        //As we are talking about a range 1 to n and have comparisons in regard with\\n        //greater than target, less than target, or equal to target\\n        \\n        //Using BINARY SEARCH\\n        \\n        int start = 1;\\n        int end = n;\\n        \\n        while(start<=end)\\n        {\\n            int mid = start + (end-start)/2;\\n            \\n            if(guess(mid) == -1)        //greater then picked number\\n            {\\n                end = mid - 1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1579071,
                "title": "python3-cheating-solution",
                "content": "```\\nclass Solution:\\n    def guessNumber(self,n):\\n        return __pick__\\n```\\npick is where the variable is stored (found with inspect.getsource), so simply return pick!",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def guessNumber(self,n):\\n        return __pick__\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1477950,
                "title": "java-clean-100-faster-easy-to-understand-binary-search-solution",
                "content": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        \\n       int start = 1, end = n;\\n        while(start<=end){\\n            int mid = start + (end-start)/2;\\n            \\n            if(guess(mid)==0){\\n                return mid;\\n            }\\n            else if(guess(mid)==1){\\n                start = mid+1;\\n            }\\n            else{\\n                end = mid - 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```\\nPlease do upvote if you find the solution useful.",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        \\n       int start = 1, end = n;\\n        while(start<=end){\\n            int mid = start + (end-start)/2;\\n            \\n            if(guess(mid)==0){\\n                return mid;\\n            }\\n            else if(guess(mid)==1){\\n                start = mid+1;\\n            }\\n            else{\\n                end = mid - 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84739,
                "title": "c-binary-search",
                "content": "Declare res to equal the API call to only have 1 API call/iteration\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        //simple binary search : low = 1; high = n\\n        int low = 1;\\n        while(low <= n){\\n            int mid = low + (n-low) / 2;\\n            int res = guess(mid);\\n            if(res == 0)\\n                return mid;\\n            else if(res == -1)\\n                n = mid - 1;\\n            else\\n                low = mid + 1;\\n        }\\n        return -1;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int guessNumber(int n) {\\n        //simple binary search : low = 1; high = n\\n        int low = 1;\\n        while(low <= n){\\n            int mid = low + (n-low) / 2;\\n            int res = guess(mid);\\n            if(res == 0)\\n                return mid;\\n            else if(res == -1)\\n                n = mid - 1;\\n            else\\n                low = mid + 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3065767,
                "title": "easiest-solution-c-with-0ms-beats-100-of-solutions",
                "content": "# Intuition\\nI had never done a binary search alogirthem before, and I noticed it looked like I could easily do it with one.\\nThat\\'s about it.\\n\\n# Complexity\\n- Time complexity\\nO(Log(N))\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        return recursiveFunction(1,n);\\n    }\\n    int recursiveFunction(unsigned int low, unsigned int high){\\n        unsigned int mid {((low+high)/2)};\\n        int help {guess(mid)};\\n        if(help==0) return mid;\\n        if(help==1) return recursiveFunction(mid+1,high);\\n        else return recursiveFunction(low,mid-1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Search",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        return recursiveFunction(1,n);\\n    }\\n    int recursiveFunction(unsigned int low, unsigned int high){\\n        unsigned int mid {((low+high)/2)};\\n        int help {guess(mid)};\\n        if(help==0) return mid;\\n        if(help==1) return recursiveFunction(mid+1,high);\\n        else return recursiveFunction(low,mid-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819430,
                "title": "simple-java-solution-using-binary-search",
                "content": "```\\n// will use the binary search\\n\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1;\\n        int r=n;\\n        while(r>=l){\\n            int mid = l+(r-l)/2;\\n            if(guess(mid)==0){\\n                return mid;\\n            }\\n            else if(guess(mid)==-1){\\n                r=mid-1;\\n            }\\n            else{\\n                l=mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\n// will use the binary search\\n\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1;\\n        int r=n;\\n        while(r>=l){\\n            int mid = l+(r-l)/2;\\n            if(guess(mid)==0){\\n                return mid;\\n            }\\n            else if(guess(mid)==-1){\\n                r=mid-1;\\n            }\\n            else{\\n                l=mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819396,
                "title": "c-binary-search-faster-easy-to-understand",
                "content": "* ***Using Binary Search***\\n\\n* ***Time Complexity :- O(logN)***\\n\\n* ***Space Complexity :- O(1)***\\n\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        \\n        // apply binary search\\n        \\n        int low = 1;\\n        \\n        int high = n;\\n        \\n        while(low <= high)\\n        {\\n            int mid = low + (high - low) / 2;\\n            \\n            int mid_val = guess(mid);\\n            \\n            if(mid_val == 0)\\n            {\\n                return mid;\\n            }\\n            else if(mid_val == -1)\\n            {\\n                high = mid - 1;\\n            }\\n            else\\n            {\\n                low = mid + 1;\\n            }\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        \\n        // apply binary search\\n        \\n        int low = 1;\\n        \\n        int high = n;\\n        \\n        while(low <= high)\\n        {\\n            int mid = low + (high - low) / 2;\\n            \\n            int mid_val = guess(mid);\\n            \\n            if(mid_val == 0)\\n            {\\n                return mid;\\n            }\\n            else if(mid_val == -1)\\n            {\\n                high = mid - 1;\\n            }\\n            else\\n            {\\n                low = mid + 1;\\n            }\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819214,
                "title": "easy-python-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        low = 1\\n        high = n\\n        while low <= high:\\n            mid = (low + high)//2\\n            res =  guess(mid)\\n            if res == 0 :\\n                return mid\\n            elif res == -1:\\n                high = mid - 1\\n            else:\\n                low = mid + 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        low = 1\\n        high = n\\n        while low <= high:\\n            mid = (low + high)//2\\n            res =  guess(mid)\\n            if res == 0 :\\n                return mid\\n            elif res == -1:\\n                high = mid - 1\\n            else:\\n                low = mid + 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2818922,
                "title": "javascript-solution-49ms-99-71-faster-binary-search",
                "content": "```\\nconst guessNumber = function(n) {\\n    let l = 1;\\n    let r = n;\\n    let pick = Math.floor((r+l)/2);\\n    let g = guess(pick);\\n    while(l <= r) {\\n        if(g > 0) {\\n            l = pick+1;\\n            pick = Math.floor((r+l)/2);\\n            g = guess(pick);\\n        }\\n        else if(g < 0) {\\n            r = pick-1;\\n            pick = Math.floor((r+l)/2);\\n            g = guess(pick);\\n        }\\n        else {\\n            return pick;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Binary Tree"
                ],
                "code": "```\\nconst guessNumber = function(n) {\\n    let l = 1;\\n    let r = n;\\n    let pick = Math.floor((r+l)/2);\\n    let g = guess(pick);\\n    while(l <= r) {\\n        if(g > 0) {\\n            l = pick+1;\\n            pick = Math.floor((r+l)/2);\\n            g = guess(pick);\\n        }\\n        else if(g < 0) {\\n            r = pick-1;\\n            pick = Math.floor((r+l)/2);\\n            g = guess(pick);\\n        }\\n        else {\\n            return pick;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2426200,
                "title": "python-c-java-beginner-level-as-simple-as-u-think-100-faster-simple-short-solution",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome*.**\\n___________________\\n_________________\\n***Q374. Guess Number Higher or Lower***\\n\\nWe are playing the Guess Game. The game is as follows:\\n\\nI pick a number from `1` to `n`. You have to guess which number I picked.\\n\\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\\n\\nYou call a pre-defined API `int guess(int num)`, which returns three possible results:\\nYou call a pre-defined API int guess(int num), which returns three possible results:\\n\\n```\\n-1: Your guess is higher than the number I picked (i.e. num > pick).\\n1: Your guess is lower than the number I picked (i.e. num < pick).\\n0: your guess is equal to the number I picked (i.e. num == pick).\\n```\\nReturn the number that I picked.\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **Java Code** :\\n**Runtime**: 0 ms, faster than 100.00% of Java online submissions for Guess Number Higher or Lower.\\n```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int left=1,right=n;\\n        while(left<=right)\\n        {\\n            int mid=left+(right-left)/2;\\n            int guess=guess(mid);\\n            if(guess==0)\\n                return mid;\\n            else if(guess==-1)\\n                right=mid-1;\\n            else \\n                left=mid+1;\\n        }\\n            return -1; \\n    }\\n}\\n```\\n**Runtime:**  0ms\\n**Memory Usage:**  41.2 MB\\n\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **Python  Code** :\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        lowerBound, upperBound = 1, n\\n        myGuess= (lowerBound+upperBound)>>1\\n        while (res := guess(myGuess)) != 0:\\n            if res == 1:\\n                lowerBound = myGuess+1\\n            else:\\n                upperBound = myGuess-1\\n            myGuess = (lowerBound+upperBound) >> 1\\n\\n        return myGuess\\n```\\n**Runtime:**  47ms\\n**Memory Usage:**  13.7 MB\\n\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **C++  Code** :\\n\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l=1,r=n;\\n        int mid;\\n        while(r>=l)\\n        {\\n            mid=l+(r-l)/2;\\n            if(guess(mid)==-1)\\n                r=mid-1;\\n            if(guess(mid)==1)\\n                l=mid+1;\\n            if(guess(mid)==0)\\n                break;\\n        }\\n        return mid;\\n    }\\n};\\n```\\n**Runtime:**  4s\\n**Memory Usage:**  5.9MB\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\n-1: Your guess is higher than the number I picked (i.e. num > pick).\\n1: Your guess is lower than the number I picked (i.e. num < pick).\\n0: your guess is equal to the number I picked (i.e. num == pick).\\n```\n```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int left=1,right=n;\\n        while(left<=right)\\n        {\\n            int mid=left+(right-left)/2;\\n            int guess=guess(mid);\\n            if(guess==0)\\n                return mid;\\n            else if(guess==-1)\\n                right=mid-1;\\n            else \\n                left=mid+1;\\n        }\\n            return -1; \\n    }\\n}\\n```\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        lowerBound, upperBound = 1, n\\n        myGuess= (lowerBound+upperBound)>>1\\n        while (res := guess(myGuess)) != 0:\\n            if res == 1:\\n                lowerBound = myGuess+1\\n            else:\\n                upperBound = myGuess-1\\n            myGuess = (lowerBound+upperBound) >> 1\\n\\n        return myGuess\\n```\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l=1,r=n;\\n        int mid;\\n        while(r>=l)\\n        {\\n            mid=l+(r-l)/2;\\n            if(guess(mid)==-1)\\n                r=mid-1;\\n            if(guess(mid)==1)\\n                l=mid+1;\\n            if(guess(mid)==0)\\n                break;\\n        }\\n        return mid;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1938166,
                "title": "python-8ms-beats-99-39-binary-search-solution",
                "content": "We use an algorithm called [binary search](https://www.programiz.com/dsa/binary-search#:~:text=Binary%20Search%20is%20a%20searching,need%20to%20sort%20them%20first): this way, instead of having linear time, we can decrease the time complexity to O(log n). Why is this? Binary search only searches the part of the list/range that inside of the range that we search for. In guess the number, it will tell you if your guess was high or low. If your guess was too high, you won\\'t guess anything that\\'s higher than your original guess, right? If you use linear for/while loop, the given information is tossed aside and the program continues to search the entire list/range. Binary search each times makes a smaller and smaller range of numbers for the program to search, making it a lot faster.\\n\\nTime complextiy: O(log n)\\nSpace complexity: O(1)\\n\\n```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num):\\n\\nclass Solution(object):\\n    def guessNumber(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        left = 0\\n        right = n\\n       \\n        while left <= right:\\n            mid = left+(right-left)//2\\n            if guess(mid) == -1:\\n                right = mid-1\\n            elif guess(mid) == 1:\\n                left = mid + 1\\n            elif guess(mid) == 0:\\n                return mid\\n```\\n\\t   \\n**If you liked this, please upvote to support me!**",
                "solutionTags": [
                    "Python",
                    "Binary Search Tree"
                ],
                "code": "```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num):\\n\\nclass Solution(object):\\n    def guessNumber(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        left = 0\\n        right = n\\n       \\n        while left <= right:\\n            mid = left+(right-left)//2\\n            if guess(mid) == -1:\\n                right = mid-1\\n            elif guess(mid) == 1:\\n                left = mid + 1\\n            elif guess(mid) == 0:\\n                return mid\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1518554,
                "title": "c-iterative-vs-recursive-bs-solution-explained-100-time-50-space",
                "content": "Handbook example of binary search, here.\\n\\nTo solve this problem, we would just proceed as we would with a phonebook or a dictionary, adjusting our search to the left (`l`) or to the right (`r`) of where we stand currently (the middle, `m`).\\n\\n`r` is already provided as our input and we know from the specs that we will always start from `1`, so we can set our support variables to be:\\n* `l`, initialised to `1` as mentioned above;\\n* `m`, where we will store our middle at each loop;\\n* `g` is where we will store the result of our call to the hidden helper function.\\n\\nWe will then loop as long as `l <= r` and:\\n* compute `m` as the average of `l` and `r` (notice that I use a formula that will prevent overflows);\\n* compute `g` as the result of calling `guess` with the freshly calculated `m`;\\n* then we will have 3 choices:\\n\\t* if `g == -1`, then we are going too high and need to reduce `r` to be `m - 1`;\\n\\t* if `g == 1`, then we are going too low, so we need to raise `l` to be `m + 1`;\\n\\t* if `g == 0`, we are done and can break out of the loop.\\n\\nOnce done, we can just `return` `m` and be done :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int guessNumber(int r) {\\n        // support variables\\n        int l = 0, m, g;\\n        while (l <= r) {\\n            // updating loop variables\\n            m = l + ((r - l) >> 1), g = guess(m);\\n            // first case: m < answer\\n            if (g == -1) r = m - 1;\\n            // second case: m < answer\\n            else if (g) l = m + 1;\\n            // third case: m == answer\\n            else break;\\n        }\\n        return m;\\n    }\\n};\\n```\\n\\nSame idea, patched together as a recursive solution:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int guessNumber(int r, int l = 1) {\\n        // support variables\\n        int m, g;\\n        // updating recursive calls variables\\n        m = l + ((r - l) >> 1), g = guess(m);\\n        return \\n            // first case: m < answer\\n            g == -1 ? guessNumber(m - 1, l) :\\n            // second case: m < answer\\n            g ? guessNumber(r, m + 1) :\\n            // third case: m == answer\\n            m;\\n    }\\n};\\n```\\n\\nOr, even better, turned into a one-liner for the sake of LOLZ:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int guessNumber(int r, int l = 1, int m = 0, int g = 0) {\\n        return (m = l + ((r - l) >> 1), g = guess(m)) == -1 ? guessNumber(m - 1, l) : g ? guessNumber(r, m + 1) : m;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Search",
                    "Recursion",
                    "Binary Tree",
                    "Iterator"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int guessNumber(int r) {\\n        // support variables\\n        int l = 0, m, g;\\n        while (l <= r) {\\n            // updating loop variables\\n            m = l + ((r - l) >> 1), g = guess(m);\\n            // first case: m < answer\\n            if (g == -1) r = m - 1;\\n            // second case: m < answer\\n            else if (g) l = m + 1;\\n            // third case: m == answer\\n            else break;\\n        }\\n        return m;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int guessNumber(int r, int l = 1) {\\n        // support variables\\n        int m, g;\\n        // updating recursive calls variables\\n        m = l + ((r - l) >> 1), g = guess(m);\\n        return \\n            // first case: m < answer\\n            g == -1 ? guessNumber(m - 1, l) :\\n            // second case: m < answer\\n            g ? guessNumber(r, m + 1) :\\n            // third case: m == answer\\n            m;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int guessNumber(int r, int l = 1, int m = 0, int g = 0) {\\n        return (m = l + ((r - l) >> 1), g = guess(m)) == -1 ? guessNumber(m - 1, l) : g ? guessNumber(r, m + 1) : m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1427746,
                "title": "c-binary-search-easy-solution",
                "content": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int start = 1 , end = n;\\n        while(start <= end){\\n            int mid = start + (end - start) / 2;\\n            int ans = guess(mid);\\n            if(ans == 0)\\n                return mid;\\n            else if( ans == 1)\\n                start = mid + 1;\\n            else \\n                end = mid ;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int start = 1 , end = n;\\n        while(start <= end){\\n            int mid = start + (end - start) / 2;\\n            int ans = guess(mid);\\n            if(ans == 0)\\n                return mid;\\n            else if( ans == 1)\\n                start = mid + 1;\\n            else \\n                end = mid ;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3765436,
                "title": "c-direct-bruteforce-intuitive-approach-faster-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimple and very easy approach by applying Binary Search, calculating middle element, guessing the number, comparing it and returning the answer.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. mark the flag called left and right\\n2. left = 1 // first integer\\n3. right = n //end integer\\n4. by using binary approach calculate middle\\n5. pass it to the function guess(int middle ) which will calculate on the basis of following:- -1: Your guess is higher than the number you picked (i.e. num > pick).\\n1: Your guess is lower than the number you picked (i.e. num < pick).\\n0: Your guess is equal to the number you picked (i.e. num == pick). \\n6. then simply compare and use the approach of binary which will return mid at last or -1 if loops end without returning middle.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(logn)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int left = 1;\\n        int right = n;\\n\\n        // int middle = right + (left - right)/2;\\n        while(left <= right)\\n        {\\n            int middle = left + (right - left)/2;\\n            int guessing = guess(middle);\\n            if(guessing == 0){\\n                return middle;\\n            }\\n            else if(guessing == -1){\\n                right = middle - 1;\\n            }\\n            else{\\n                left = middle + 1;\\n            }\\n            \\n\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int left = 1;\\n        int right = n;\\n\\n        // int middle = right + (left - right)/2;\\n        while(left <= right)\\n        {\\n            int middle = left + (right - left)/2;\\n            int guessing = guess(middle);\\n            if(guessing == 0){\\n                return middle;\\n            }\\n            else if(guessing == -1){\\n                right = middle - 1;\\n            }\\n            else{\\n                left = middle + 1;\\n            }\\n            \\n\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3762560,
                "title": "java-solution-beats-100-0ms-tc-o-log-n",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nThe problem asks us to guess a target number within a range using the guess API, which tells us if our guess is higher, lower, or equal to the target. We want to minimize the number of guesses to find the target.\\n\\n# Approach\\nTo solve the problem efficiently, we\\'ll use a technique called binary search. Here\\'s how it works:\\n\\n1. We start with the entire range of numbers, from 0 to n-1, where n is the maximum possible target number.\\n1. First, we check if the largest number in the range, n, is the target by calling guess(n). If it returns 0, we found the target, so we return n as the answer.\\n1. If the target is not n, we proceed with a binary search.\\n1. In each iteration of the binary search, we calculate the middle number between the current range\\'s start and end. This middle number is obtained by adding the start and end and then dividing by 2.\\n1. We then call guess(mid) to get feedback on whether the target is higher, lower, or equal to the middle number.\\n1. If guess(mid) returns 1, it means the target is higher than our guess. So, we update our search range by moving the start to mid + 1. This is because the target cannot be in the lower half of the range anymore.\\n1. If guess(mid) returns 0, it means we found the target, and we return the middle number as the answer.\\n1. If guess(mid) returns -1, it means the target is lower than our guess. So, we update our search range by moving the end to mid - 1. This is because the target cannot be in the upper half of the range anymore.\\n1. We repeat steps 4-8 until we find the target or the search range becomes invalid (start > end). If we exit the loop without finding the target, we return the last middle number as our best guess.\\n\\n# Complexity\\n\\n- Time complexity:\\nThe binary search algorithm has a time complexity of $$O(log n)$$. It quickly reduces the search space by half at each step. In this problem, the search space decreases by half until we find the target or the search range becomes invalid. As a result, the time it takes to find the target is logarithmic to the maximum possible target number.\\n\\n- Space complexity:\\nThe space complexity of our solution is $$O(1)$$, which means it uses a constant amount of extra space. Regardless of the size of the input, we only need a few variables to keep track of the search range and the middle number. Therefore, the space used remains constant.\\n\\n# Code\\n```java []\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n\\n        int start = 0; // Initialize the start of the search range to 0\\n        int end = n - 1; // Initialize the end of the search range to n-1\\n\\n        int mid = -1; // Variable to store the middle number\\n\\n        if (guess(n) == 0)\\n            return n; // Check if the largest number is the target, return it if true\\n\\n        while (start <= end) {\\n            mid = start + (end - start) / 2; // Calculate the middle number using start and end\\n\\n            if (guess(mid) == 1) {\\n                start = mid + 1; // If the target is higher than the middle number, update the start to search in the higher half\\n            } else if (guess(mid) == 0) {\\n                return mid; // If the middle number is the target, return it as the answer\\n            } else {\\n                end = mid - 1; // If the target is lower than the middle number, update the end to search in the lower half\\n            }\\n        }\\n\\n        return mid; // Return the best guess if the target was not found\\n    }\\n}\\n\\n```\\n## ***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/75e07d52-3f8e-497b-8169-993d5b4840d6_1689275854.8740258.jpeg)\\n\\n",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Binary Search",
                    "Interactive"
                ],
                "code": "```java []\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n\\n        int start = 0; // Initialize the start of the search range to 0\\n        int end = n - 1; // Initialize the end of the search range to n-1\\n\\n        int mid = -1; // Variable to store the middle number\\n\\n        if (guess(n) == 0)\\n            return n; // Check if the largest number is the target, return it if true\\n\\n        while (start <= end) {\\n            mid = start + (end - start) / 2; // Calculate the middle number using start and end\\n\\n            if (guess(mid) == 1) {\\n                start = mid + 1; // If the target is higher than the middle number, update the start to search in the higher half\\n            } else if (guess(mid) == 0) {\\n                return mid; // If the middle number is the target, return it as the answer\\n            } else {\\n                end = mid - 1; // If the target is lower than the middle number, update the end to search in the lower half\\n            }\\n        }\\n\\n        return mid; // Return the best guess if the target was not found\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3689587,
                "title": "easy-cpp-solution-along-with-explanation-stepwise-binary-search",
                "content": "# Intuition\\nBy looking at numbers in continuous ascending order, I thought for binary search and it worked.\\n\\n# Approach\\n- Apply binary search\\n- make a start variable initiate with 1 and end variable initiate with n\\n- iterate till start<=end\\n  - inside the loop make a mid variable start+(end-start)/2;\\n  - now save the guess(mid) in x\\n  - check if x==-1, means the mid is higher hence end=mid-1\\n  - check if x==1, means the mid is lower hence start=mid+1 \\n  - else return mid;\\n  - outside the loop return -1(if not found) \\n\\n# Complexity\\n- Time complexity:\\n O(log n)\\n\\n- Space complexity:\\n O(1)\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n         int start=1;\\n         int end=n;\\n           while(start<=end)\\n            {\\n                int mid=start+(end-start)/2;\\n                int x=guess(mid);\\n                if(x==-1){end=mid-1;}\\n                else if(x==1){start=mid+1;}\\n                else return mid; \\n            }\\n        return -1;\\n    }\\n};\\n```\\n\\n# Please Upvote for better reach.",
                "solutionTags": [
                    "C++",
                    "Binary Search"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n         int start=1;\\n         int end=n;\\n           while(start<=end)\\n            {\\n                int mid=start+(end-start)/2;\\n                int x=guess(mid);\\n                if(x==-1){end=mid-1;}\\n                else if(x==1){start=mid+1;}\\n                else return mid; \\n            }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3303132,
                "title": "binary-search-o-log-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        left,right=0,n+1\\n        while left<=right:\\n            mid=left+(right-left)//2\\n            if guess(mid)==0:\\n                return mid\\n            if guess(mid)==1:\\n                left=mid+1\\n            else:\\n                right=mid-1\\n    //please upvote me it would encourage me alot\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        left,right=0,n+1\\n        while left<=right:\\n            mid=left+(right-left)//2\\n            if guess(mid)==0:\\n                return mid\\n            if guess(mid)==1:\\n                left=mid+1\\n            else:\\n                right=mid-1\\n    //please upvote me it would encourage me alot\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3103631,
                "title": "javascript-solution-with-explanation-o-log-n",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nit has O(log n) time complexity \\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nit has O(1) space complexity\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param {number} num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * var guess = function(num) {}\\n */\\n\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar guessNumber = function(n) {\\n    let lo = 0,\\n        hi = n;\\n        //Initializes \"lo\" and \"hi\" to 0 and n respectively\\n    while(lo<=hi){\\n        //Within a while loop that runs as long as \"lo\" <= \"hi\"\\n\\n       let mid = Math.floor(lo + (hi - lo) / 2);\\n       //It defines a variable \"mid\" as floor value of average of \"lo\" and \"hi\"\\n\\n       let result = guess(mid);\\n       //It calls the function \"guess\" with the value of mid\\n        \\n        if(result == 0){\\n            return mid;\\n        }\\n        //If the result of the \"guess\" function is 0, returns mid\\n\\n        else if (result < 0){\\n          hi = mid-1; \\n        }\\n        //If the result of the \"guess\" function is less than 0, sets hi = mid - 1\\n\\n        else{\\n            lo = mid+1; \\n        }\\n        //If the result of the \"guess\" function is greater than 0, sets lo = mid + 1\\n        \\n      }\\n    return -1;\\n    //If the while loop ends and no number is found, returns -1\\n    \\n};\\n```\\n# heading\\nIf it is helpfull, Please Upvote...\\uD83D\\uDC4D",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param {number} num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * var guess = function(num) {}\\n */\\n\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar guessNumber = function(n) {\\n    let lo = 0,\\n        hi = n;\\n        //Initializes \"lo\" and \"hi\" to 0 and n respectively\\n    while(lo<=hi){\\n        //Within a while loop that runs as long as \"lo\" <= \"hi\"\\n\\n       let mid = Math.floor(lo + (hi - lo) / 2);\\n       //It defines a variable \"mid\" as floor value of average of \"lo\" and \"hi\"\\n\\n       let result = guess(mid);\\n       //It calls the function \"guess\" with the value of mid\\n        \\n        if(result == 0){\\n            return mid;\\n        }\\n        //If the result of the \"guess\" function is 0, returns mid\\n\\n        else if (result < 0){\\n          hi = mid-1; \\n        }\\n        //If the result of the \"guess\" function is less than 0, sets hi = mid - 1\\n\\n        else{\\n            lo = mid+1; \\n        }\\n        //If the result of the \"guess\" function is greater than 0, sets lo = mid + 1\\n        \\n      }\\n    return -1;\\n    //If the while loop ends and no number is found, returns -1\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2930761,
                "title": "simple-brute-force-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int start=0;\\n        int end=n;\\n        while(start<=end){\\n            int mid=start+(end-start)/2;\\n            int num = guess(mid);\\n            if(num == 0){\\n                return mid;\\n            }else if(num == -1){\\n                end = mid-1;\\n            }else{\\n                start=mid+1;\\n            }\\n        }   \\n        return start;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int start=0;\\n        int end=n;\\n        while(start<=end){\\n            int mid=start+(end-start)/2;\\n            int num = guess(mid);\\n            if(num == 0){\\n                return mid;\\n            }else if(num == -1){\\n                end = mid-1;\\n            }else{\\n                start=mid+1;\\n            }\\n        }   \\n        return start;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2930735,
                "title": "best-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int start=0;\\n        int end=n;\\n        while(start<=end){\\n            int mid=start+(end-start)/2;\\n            int num = guess(mid);\\n            if(num == 0){\\n                return mid;\\n            }else if(num == -1){\\n                end = mid-1;\\n            }else{\\n                start=mid+1;\\n            }\\n        }   \\n        return start;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int start=0;\\n        int end=n;\\n        while(start<=end){\\n            int mid=start+(end-start)/2;\\n            int num = guess(mid);\\n            if(num == 0){\\n                return mid;\\n            }else if(num == -1){\\n                end = mid-1;\\n            }else{\\n                start=mid+1;\\n            }\\n        }   \\n        return start;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2821597,
                "title": "c-100-faster-easy-binary-search",
                "content": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int s = 1;\\n        int e = n;\\n        while(s <= e) {\\n            int mid = s + (e-s)/2;\\n            if(guess(mid) == 0) return mid;\\n            if(guess(mid) == -1) e = mid - 1;\\n            else s = mid + 1;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Search",
                    "Interactive"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int s = 1;\\n        int e = n;\\n        while(s <= e) {\\n            int mid = s + (e-s)/2;\\n            if(guess(mid) == 0) return mid;\\n            if(guess(mid) == -1) e = mid - 1;\\n            else s = mid + 1;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819986,
                "title": "python-log-n-simple-solution",
                "content": "# Intuition\\n\\nIt is a very basic `binary search` case. The only trick we need to do in order to eliminate redundant search is check whether or not initial borders (i.e. `1` and `n`) are not an answer.\\n\\n# Approach\\n\\n1. Check left border\\n2. Check right border\\n3. Do binary search\\n\\n# Complexity\\n\\n- Time complexity: log(n)\\n- Space complexity: O(n)\\n\\n# Code\\n```\\n    def guessNumber(self, n: int) -> int:\\n\\n        l = 1\\n        res = guess(l)\\n        if res == 0: return l\\n        \\n        r = n\\n        res = guess(r)\\n        if res == 0: return r\\n\\n        for _ in range(int(math.sqrt(n))):\\n            rn = (r+l) // 2\\n            res = guess(rn)\\n            if res == 0:\\n                return rn\\n            elif res < 0:\\n                r = rn\\n            else:\\n                l = rn\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Binary Search"
                ],
                "code": "```\\n    def guessNumber(self, n: int) -> int:\\n\\n        l = 1\\n        res = guess(l)\\n        if res == 0: return l\\n        \\n        r = n\\n        res = guess(r)\\n        if res == 0: return r\\n\\n        for _ in range(int(math.sqrt(n))):\\n            rn = (r+l) // 2\\n            res = guess(rn)\\n            if res == 0:\\n                return rn\\n            elif res < 0:\\n                r = rn\\n            else:\\n                l = rn\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2819936,
                "title": "java-easiest-solution-possible",
                "content": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int left = 1, right = n;\\n        while (left < right) {\\n            int mid = (left + right) >>> 1;\\n            if (guess(mid) <= 0) {\\n                right = mid;\\n            } else {\\n                left = mid + 1;\\n            }\\n        }\\n        return left;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int left = 1, right = n;\\n        while (left < right) {\\n            int mid = (left + right) >>> 1;\\n            if (guess(mid) <= 0) {\\n                right = mid;\\n            } else {\\n                left = mid + 1;\\n            }\\n        }\\n        return left;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819839,
                "title": "simple-and-easy-java-code-100-faster-binary-search",
                "content": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int s= 1;\\n        int e = n;\\n        while(s<=e){\\n            int mid = s + (e-s)/2;\\n            if(guess(mid)==0) return mid;\\n            else if(guess(mid)==1){\\n                s= mid+1;\\n            }else {\\n                e = mid-1;\\n            }\\n        }\\n        return -1;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int s= 1;\\n        int e = n;\\n        while(s<=e){\\n            int mid = s + (e-s)/2;\\n            if(guess(mid)==0) return mid;\\n            else if(guess(mid)==1){\\n                s= mid+1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2819215,
                "title": "c-100-faster-solution-w-explanation",
                "content": "# Intuition\\nAs per given 3 conditions we can, return 1, -1, or the guessed number.\\n\\n# Approach\\n1. We will have l (lower / left side number) and r (right side / higher number), by default l =1, r = n (as per given constraint: 1 <= pick <= n).\\n2. Loop through while l <= 2.\\n3. Take m = l + (r-1)/2.\\n4. if(guess(m) == 0), return m; if(guess(m) < 0>), return r = m-1; else l = m+1;\\n5. Return 0 at the end.\\n\\n# Complexity\\n- Time complexity:\\n**Beats 100%**\\n\\n**Please upvote** if you like the solution.\\nComments to improve the solution are welcome.\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n, long p = 1) {\\n        int l = 1, r = n;\\n        while(l <= r)\\n        {\\n            int m = l + (r-l)/2;\\n            if(guess(m) == 0)\\n                return m;\\n            if(guess(m) < 0)\\n                r = m-1;\\n            else\\n                l = m+1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n, long p = 1) {\\n        int l = 1, r = n;\\n        while(l <= r)\\n        {\\n            int m = l + (r-l)/2;\\n            if(guess(m) == 0)\\n                return m;\\n            if(guess(m) < 0)\\n                r = m-1;\\n            else\\n                l = m+1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819150,
                "title": "leetcode-the-hard-way-binary-search-in-rust",
                "content": "\\uD83D\\uDD34 Check out [LeetCode The Hard Way](https://wingkwong.github.io/leetcode-the-hard-way/) for more solution explanations and tutorials. \\n\\uD83D\\uDFE0 Check out our [Discord](https://discord.gg/Nqm4jJcyBf) for live discussion.\\n\\uD83D\\uDFE2 Give a star on [Github Repository](https://github.com/wingkwong/leetcode-the-hard-way) and upvote this post if you like it.\\n\\n---\\n\\nJust a standard binary search\\n\\n```rs\\nimpl Solution {\\n    unsafe fn guessNumber(n: i32) -> i32 {\\n        let mut l = 1;\\n        let mut r = n;\\n        while l < r {\\n            let m = l + (r - l) / 2;\\n            let x = guess(m);\\n            if x == 1 {\\n                l = m + 1;\\n            } else {\\n                r = m;\\n            }\\n        }\\n        l\\n    }\\n}\\n```\\n\\n\\n```rs\\nimpl Solution {\\n    unsafe fn guessNumber(n: i32) -> i32 {\\n        let mut l = 1;\\n        let mut r = n;\\n        loop {\\n            let m = l + (r - l) / 2;\\n            match guess(m) {\\n                -1 => r = m - 1,\\n                1 => l = m + 1,\\n                _ => return m\\n                \\n            };\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Binary Tree"
                ],
                "code": "```rs\\nimpl Solution {\\n    unsafe fn guessNumber(n: i32) -> i32 {\\n        let mut l = 1;\\n        let mut r = n;\\n        while l < r {\\n            let m = l + (r - l) / 2;\\n            let x = guess(m);\\n            if x == 1 {\\n                l = m + 1;\\n            } else {\\n                r = m;\\n            }\\n        }\\n        l\\n    }\\n}\\n```\n```rs\\nimpl Solution {\\n    unsafe fn guessNumber(n: i32) -> i32 {\\n        let mut l = 1;\\n        let mut r = n;\\n        loop {\\n            let m = l + (r - l) / 2;\\n            match guess(m) {\\n                -1 => r = m - 1,\\n                1 => l = m + 1,\\n                _ => return m\\n                \\n            };\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2818972,
                "title": "easy-c-solution-binary-search",
                "content": "\\tint guessNumber(int n) \\n\\t{\\n        int start = 1;\\n        int end = n;\\n        \\n        int mid = start+(end-start)/2; \\n        int num;\\n        while(start<=end)\\n        {\\n            num = guess(mid);\\n            if(num == 0)\\n            {\\n                num = mid;\\n                break;\\n            }\\n            else if(num==-1) end = mid - 1;\\n            else if(num==1)  start = mid + 1;\\n                \\n            mid = start+(end-start)/2; \\n        }\\n        return num;\\n        \\n    }",
                "solutionTags": [
                    "C",
                    "Two Pointers",
                    "Binary Tree"
                ],
                "code": "\\tint guessNumber(int n) \\n\\t{\\n        int start = 1;\\n        int end = n;\\n        \\n        int mid = start+(end-start)/2; \\n        int num;\\n        while(start<=end)\\n        {\\n            num = guess(mid);\\n            if(num == 0)\\n            {\\n                num = mid;\\n                break;\\n            }\\n            else if(num==-1) end = mid - 1;\\n            else if(num==1)  start = mid + 1;\\n                \\n            mid = start+(end-start)/2; \\n        }\\n        return num;\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2818879,
                "title": "python-and-golang",
                "content": "```python\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l, r, m = 1, n, 0\\n        while l <= r:\\n            g = guess(m := (l + r) >> 1)\\n            if g == -1: r = m - 1\\n            elif g == 1: l = m + 1\\n            else: break\\n        return m\\n```\\n```go\\nfunc guessNumber(n int) int {\\n    l, r, m := 1, n, 0\\n    for l <= r {\\n        m = (l + r) >> 1\\n        if g := guess(m); g == -1 {\\n            r = m - 1\\n        } else if g == 1 {\\n            l = m + 1\\n        } else {\\n            break\\n        }\\n    }\\n    return m\\n}\\n```",
                "solutionTags": [
                    "Python",
                    "Go"
                ],
                "code": "```python\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l, r, m = 1, n, 0\\n        while l <= r:\\n            g = guess(m := (l + r) >> 1)\\n            if g == -1: r = m - 1\\n            elif g == 1: l = m + 1\\n            else: break\\n        return m\\n```\n```go\\nfunc guessNumber(n int) int {\\n    l, r, m := 1, n, 0\\n    for l <= r {\\n        m = (l + r) >> 1\\n        if g := guess(m); g == -1 {\\n            r = m - 1\\n        } else if g == 1 {\\n            l = m + 1\\n        } else {\\n            break\\n        }\\n    }\\n    return m\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2818861,
                "title": "daily-leetcoding-challenge-november-day-16",
                "content": "This problem is the Daily LeetCoding Challenge for November, Day 16.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/guess-number-higher-or-lower/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Using Binary Search\n\n  \n**Approach 3:** Ternary Search\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/guess-number-higher-or-lower/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 2738121,
                "title": "binary-search-c-solution",
                "content": "Solution using binary search in C++\\n\\n``` C++ []\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int left{1}, right{n};\\n\\n        while (left<=right) {\\n            int middle = left+(right-left)/2;\\n            int soln = guess(middle);\\n            if (!soln) return middle;\\n            if (soln<0) {\\n                right = middle-1;\\n            } else {\\n                left = middle+1;\\n            }\\n        }\\n\\n        return -1;\\n    }\\n};\\n```\\n\\n*Upvote solution if it helped you!*",
                "solutionTags": [
                    "C++",
                    "Binary Search"
                ],
                "code": "``` C++ []\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int left{1}, right{n};\\n\\n        while (left<=right) {\\n            int middle = left+(right-left)/2;\\n            int soln = guess(middle);\\n            if (!soln) return middle;\\n            if (soln<0) {\\n                right = middle-1;\\n            } else {\\n                left = middle+1;\\n            }\\n        }\\n\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2628468,
                "title": "c-0ms-binary-search-with-comments",
                "content": "C++ Solution :\\nTime Complexity : O(log n)\\nSpace Complexity : O(1)\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) \\n    {\\n        int lo=1,hi=n;\\n        while(true)\\n        {\\n            int mid=lo+(hi-lo)/2;  // Do NOT use (maxNumber+minNumber)/2 in case of over flow\\n            int res=guess(mid);\\n            if(res==0) \\n                return mid;\\n            else if(res==1)\\n                lo=mid+1;\\n            else\\n                hi=mid-1;\\n        }\\n    }\\n};\\n```\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**\\n\\n",
                "solutionTags": [
                    "C",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) \\n    {\\n        int lo=1,hi=n;\\n        while(true)\\n        {\\n            int mid=lo+(hi-lo)/2;  // Do NOT use (maxNumber+minNumber)/2 in case of over flow\\n            int res=guess(mid);\\n            if(res==0) \\n                return mid;\\n            else if(res==1)\\n                lo=mid+1;\\n            else\\n                hi=mid-1;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2562529,
                "title": "javascript-binary-search",
                "content": "```\\nvar guessNumber = function(n) {\\n    let left=1,right=n\\n    while(left<right){\\n        let mid=left+Math.floor((right-left)/2)\\n        if(guess(mid)<=0) right=mid\\n        else left=mid+1\\n    }\\n    return left\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Binary Tree"
                ],
                "code": "```\\nvar guessNumber = function(n) {\\n    let left=1,right=n\\n    while(left<right){\\n        let mid=left+Math.floor((right-left)/2)\\n        if(guess(mid)<=0) right=mid\\n        else left=mid+1\\n    }\\n    return left\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2447230,
                "title": "javascript-simple-solution-with-recursion-100",
                "content": "```\\nvar guessNumber = function(n) {\\n    const findNumber = (start, end) => {\\n        const mid = Math.floor((end + start)/2);\\n        \\n        if (guess(mid) === 0) return mid;\\n        if (guess(mid) === -1) return findNumber(start, mid - 1);\\n        if (guess(mid) === 1) return findNumber(mid + 1, end);\\n    }\\n    \\n    return findNumber(0, n);\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar guessNumber = function(n) {\\n    const findNumber = (start, end) => {\\n        const mid = Math.floor((end + start)/2);\\n        \\n        if (guess(mid) === 0) return mid;\\n        if (guess(mid) === -1) return findNumber(start, mid - 1);\\n        if (guess(mid) === 1) return findNumber(mid + 1, end);\\n    }\\n    \\n    return findNumber(0, n);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2067280,
                "title": "c-just-a-simple-binary-search-100-faster",
                "content": "\\n\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\t\\tint guessNumber(int n) {\\n\\t\\t\\t\\t\\tlong long  l=1 ;  // use long long for avoiding runtime error\\n\\t\\t\\t\\t\\tlong long  h=n;\\n\\t\\t\\t\\t\\tint mid=1;\\n\\t\\t\\t\\t\\twhile(l<=h)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tmid=(l+h)/2;\\n\\t\\t\\t\\t\\t\\tif(guess(mid) == -1)h=mid-1;\\n\\t\\t\\t\\t\\t\\telse if(guess(mid) == 1)l=mid+1;\\n\\t\\t\\t\\t\\t\\telse if(guess(mid) == 0)return mid;\\n\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn -1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t};",
                "solutionTags": [
                    "C",
                    "Binary Tree",
                    "Iterator"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\t\\tint guessNumber(int n) {\\n\\t\\t\\t\\t\\tlong long  l=1 ;  // use long long for avoiding runtime error\\n\\t\\t\\t\\t\\tlong long  h=n;\\n\\t\\t\\t\\t\\tint mid=1;\\n\\t\\t\\t\\t\\twhile(l<=h)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tmid=(l+h)/2;\\n\\t\\t\\t\\t\\t\\tif(guess(mid) == -1)h=mid-1;\\n\\t\\t\\t\\t\\t\\telse if(guess(mid) == 1)l=mid+1;\\n\\t\\t\\t\\t\\t\\telse if(guess(mid) == 0)return mid;\\n\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2031175,
                "title": "hint-wanna-do-it-yourself-any-language",
                "content": "**Hint 1:**\\nint guessNumber(int n) --->*here, n is the upper limit, i.e. from 1 to n*\\nint guess(int num);--------->*another pre-defined function provided to you, \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t where num is your guess no. from 1-n.*\\nExample:\\nn=10, ok......so I have to guess from 1 to 10\\nLet User pick no.=8\\n\\nTRY1 : num=6, *and let me guess....is it 6 ???*\\n           NO...*my bad, I\\'ve recieved 1, that means maybe I\\'ve guessed a lower no.*\\n\\t\\t   \\nTRY2 : num=9, *and let me guess....is it 9 ???*\\n           NO...*my bad, I\\'ve recieved -1, that means maybe I\\'ve guessed a bigger no.*\\n\\t\\t   \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n**Hint 2:** \\nYou can use guess(int num) within your function guessNumber(int n)\\n\\n**Hint 3:**\\nO(n) or O(log n) ??\\n1)Should I use guess(int num) function hint (-1,0,1) to my benefit\\n2)Or should I go by random guess like a child, 1,2,3,4.........\\n**Lets check out both.................................................................................................................**",
                "solutionTags": [],
                "code": "**Hint 1:**\\nint guessNumber(int n) --->*here, n is the upper limit, i.e. from 1 to n*\\nint guess(int num);--------->*another pre-defined function provided to you, \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t where num is your guess no. from 1-n.*\\nExample:\\nn=10, ok......so I have to guess from 1 to 10\\nLet User pick no.=8\\n\\nTRY1 : num=6, *and let me guess....is it 6 ???*\\n           NO...*my bad, I\\'ve recieved 1, that means maybe I\\'ve guessed a lower no.*\\n\\t\\t   \\nTRY2 : num=9, *and let me guess....is it 9 ???*\\n           NO...*my bad, I\\'ve recieved -1, that means maybe I\\'ve guessed a bigger no.*\\n\\t\\t   \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n**Hint 2:** \\nYou can use guess(int num) within your function guessNumber(int n)\\n\\n**Hint 3:**\\nO(n) or O(log n) ??\\n1)Should I use guess(int num) function hint (-1,0,1) to my benefit\\n2)Or should I go by random guess like a child, 1,2,3,4.........\\n**Lets check out both.................................................................................................................**",
                "codeTag": "Unknown"
            },
            {
                "id": 1934823,
                "title": "my-java-o-n-code-better-than-100-submissions",
                "content": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int first = 1;\\n        int last = n;\\n        while (first <= last) {\\n            int mid = first + (last - first) / 2;\\n            int guess = guess(mid);\\n            if (guess == 0) {\\n                return mid;\\n            } else if (guess == 1) {\\n                first = mid + 1;\\n            } else {\\n                last = mid - 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int first = 1;\\n        int last = n;\\n        while (first <= last) {\\n            int mid = first + (last - first) / 2;\\n            int guess = guess(mid);\\n            if (guess == 0) {\\n                return mid;\\n            } else if (guess == 1) {\\n                first = mid + 1;\\n            } else {\\n                last = mid - 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1912729,
                "title": "c-100-easy-sol",
                "content": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n       int left=0;\\n        int right=n;\\n        while(left<=right){\\n            int mid=left+(right-left)/2;\\n            if(guess(mid)==0){\\n                return mid;\\n            }\\n            else if(guess(mid)==1){\\n                left=mid+1;\\n            }\\n            else if(guess(mid)==-1){\\n                right=mid-1;\\n            }\\n        }\\n        return 0;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n       int left=0;\\n        int right=n;\\n        while(left<=right){\\n            int mid=left+(right-left)/2;\\n            if(guess(mid)==0){\\n                return mid;\\n            }\\n            else if(guess(mid)==1){\\n                left=mid+1;\\n            }\\n            else if(guess(mid)==-1){\\n                right=mid-1;\\n            }\\n        }\\n        return 0;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1750774,
                "title": "c-o-log-n-100-faster-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        long long int beg,last,middle;\\n        beg = 1 , last = n;\\n        long int pos = 1;\\n        while(beg<=last){\\n            middle = beg + (last-beg)/2;\\n            int x = guess(middle);\\n            pos = middle;\\n            if(x == -1){\\n                last = middle-1;\\n            }\\n            else if(x == 1)\\n                beg = middle+1;\\n            else if(x == 0)\\n                break;\\n        }\\n        return pos;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        long long int beg,last,middle;\\n        beg = 1 , last = n;\\n        long int pos = 1;\\n        while(beg<=last){\\n            middle = beg + (last-beg)/2;\\n            int x = guess(middle);\\n            pos = middle;\\n            if(x == -1){\\n                last = middle-1;\\n            }\\n            else if(x == 1)\\n                beg = middle+1;\\n            else if(x == 0)\\n                break;\\n        }\\n        return pos;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1518432,
                "title": "2-go-solutions-using-builtin-and-custom-binary-search",
                "content": "Using builtin `sort.Search` function\\n```\\nfunc guessNumber(n int) int {\\n\\treturn sort.Search(n, func(i int) bool {\\n\\t\\treturn guess(i+1) == -1\\n\\t})\\n}\\n```\\n\\nCustom binary search:\\n```\\nfunc guessNumber(n int) int {\\n\\tstart, end := 1, n\\n\\tfor start <= end {\\n\\t\\tmid := (start + end) / 2\\n\\t\\tswitch guess(mid) {\\n\\t\\tcase -1:\\n\\t\\t\\tend = mid - 1\\n\\t\\tcase 1:\\n\\t\\t\\tstart = mid + 1\\n\\t\\tdefault:\\n\\t\\t\\treturn mid\\n\\t\\t}\\n\\t}\\n\\treturn 0\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Binary Tree"
                ],
                "code": "```\\nfunc guessNumber(n int) int {\\n\\treturn sort.Search(n, func(i int) bool {\\n\\t\\treturn guess(i+1) == -1\\n\\t})\\n}\\n```\n```\\nfunc guessNumber(n int) int {\\n\\tstart, end := 1, n\\n\\tfor start <= end {\\n\\t\\tmid := (start + end) / 2\\n\\t\\tswitch guess(mid) {\\n\\t\\tcase -1:\\n\\t\\t\\tend = mid - 1\\n\\t\\tcase 1:\\n\\t\\t\\tstart = mid + 1\\n\\t\\tdefault:\\n\\t\\t\\treturn mid\\n\\t\\t}\\n\\t}\\n\\treturn 0\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1448931,
                "title": "c-solution-100-faster-use-less-than-90-memory-easy-binary-search-solution",
                "content": "class Solution {\\npublic:\\n    int guessNumber(int n) \\n    {\\n        long long low = 1 , high = n , mid;\\n        while(low <= high)\\n        {\\n            mid = (low+high)/2;\\n            if(guess(mid) == 0)\\n            {\\n                return mid;\\n            }\\n            else if(guess(mid) == -1)\\n            {******\\n                high = mid -1;\\n            }\\n            else\\n            {\\n                low = mid +1;\\n            }\\n        }\\n        return -1;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int guessNumber(int n) \\n    {\\n        long long low = 1 , high = n , mid;\\n        while(low <= high)\\n        {\\n            mid = (low+high)/2;\\n            if(guess(mid) == 0)\\n            {\\n                return mid;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1324464,
                "title": "c-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int low = 1;\\n        long int high = n;\\n        while(high>=low){\\n            int mid = (low+high)/2;\\n            if(guess(mid)==-1) high = mid-1;\\n            else if(guess(mid)==0) return mid;\\n            else low = mid+1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int low = 1;\\n        long int high = n;\\n        while(high>=low){\\n            int mid = (low+high)/2;\\n            if(guess(mid)==-1) high = mid-1;\\n            else if(guess(mid)==0) return mid;\\n            else low = mid+1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 990593,
                "title": "simple-easy-solution-by-python-3",
                "content": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        pick_range = [1, n]\\n        while True:\\n            pick = sum(pick_range) // 2\\n            result = guess(pick)\\n            if result > 0:\\n                pick_range[0] = pick + 1\\n            elif result < 0:\\n                pick_range[1] = pick - 1\\n            else:\\n                return pick\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        pick_range = [1, n]\\n        while True:\\n            pick = sum(pick_range) // 2\\n            result = guess(pick)\\n            if result > 0:\\n                pick_range[0] = pick + 1\\n            elif result < 0:\\n                pick_range[1] = pick - 1\\n            else:\\n                return pick\\n```",
                "codeTag": "Java"
            },
            {
                "id": 603953,
                "title": "clean-solution-in-rust",
                "content": "Don\\'t know why guess() function is considered \"unsafe\", would be interesting to know.\\n```rust\\nunsafe fn guessNumber(n: i32) -> i32 {\\n    let (mut left, mut right) = (1, n);\\n    loop {\\n        let mid = left + (right - left) / 2;\\n        match guess(mid) {\\n           -1 => { right = mid - 1; },\\n            1 => { left  = mid + 1; },\\n            _ => { return mid; },\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nunsafe fn guessNumber(n: i32) -> i32 {\\n    let (mut left, mut right) = (1, n);\\n    loop {\\n        let mid = left + (right - left) / 2;\\n        match guess(mid) {\\n           -1 => { right = mid - 1; },\\n            1 => { left  = mid + 1; },\\n            _ => { return mid; },\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 205658,
                "title": "swift-o-1-what-are-you-doing-leetcode",
                "content": "```Swift\\nclass Solution {\\n    func guessNumber(_ n: Int, _ pick: Int) -> Int {\\n        return pick\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```Swift\\nclass Solution {\\n    func guessNumber(_ n: Int, _ pick: Int) -> Int {\\n        return pick\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84681,
                "title": "my-c-solution-using-result-of-guess",
                "content": "    int guessNumber(int n) {\\n        int cur = (1 + n) >> 1;\\n        int t;\\n        int step = cur;\\n        do{\\n            t = guess(cur);\\n            step = step >> 1 ? step  >> 1 : 1;\\n            cur += t*step;\\n        } while(t != 0);\\n        \\n        return cur;\\n    }",
                "solutionTags": [],
                "code": "    int guessNumber(int n) {\\n        int cur = (1 + n) >> 1;\\n        int t;\\n        int step = cur;\\n        do{\\n            t = guess(cur);\\n            step = step >> 1 ? step  >> 1 : 1;\\n            cur += t*step;\\n        } while(t != 0);\\n        \\n        return cur;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 84730,
                "title": "one-binarysearch-template-to-ac-all-the-related-problem",
                "content": "I used to use the following template to solve the binary search problem, but failed many problems. It is a little bit hard to cover all the corner cases with the below binary search template !\\n\\nHere is the template I used to post, I will keep [left, right)  **left close right open field and keep this property always**\\n\\n```\\n        int start=-1, end=n-1;\\n        while(end-start>1){\\n            int mid=(start+end)/2;\\n            if(nums[mid]>=target) end=mid;\\n            else start=mid;\\n        }\\n```\\nBut I do find this template is not good enough to pass all the problem related to binary search !!! So where is the general template ?\\n\\nWith the help from my classmates, we finish it !\\n\\nIt should be like this, there are 3 key points to remember !!!\\n\\n\\n* **[left, right]** left close right close , so your left = left_most_possible value so with right\\n\\n* **while (left < right)**  the loop should end when left == right\\n\\n*  **mid = left + (right - left) /2**  in this case the middle value is closer to left, so we need to move the left one step while keeping the right = mid in other case. So We can infer the conditions when the left will move one step !!! **This is the most import parts, you should ensure that once the condition is satisfied, the left can move one step.** \\n\\n***In summary, I have use this template to solve all the binary search problem set in leetcode !***\\n\\n```\\n    int guessNumber(int n) {\\n        int left = 1, right = n;\\n        while (right > left) {\\n            int mid = left + (right - left) / 2;\\n            int ans = guess(mid);\\n            if (ans == 1) {\\n                left = mid + 1;\\n            }\\n            else {\\n                right = mid;\\n            }\\n        }\\n        return left;\\n    }\\n\\n ```\\n\\nFor the purpose you can understand it better, I post the solution to 2 other typical problem :aerial_tramway: \\n\\n**Problem Find Minimum in Rotated Sorted Array II**\\n```\\nclass Solution {\\npublic:\\n    int findMin(vector<int>& nums) {\\n        int left = 0, right = nums.size() - 1;\\n        while (left < right) {\\n            int mid = (left + right) / 2;\\n            if (nums[mid] > nums[right]) left = mid + 1;\\n            else if (nums[mid] < nums[right]) right = mid;\\n            else right--;\\n        }\\n        return nums[left];\\n    }\\n};\\n\\n```\\n\\n**Problem 34. Search for a Range**\\nFor this problem, you should deal with the right cases differently as you want your value always closer to right, so you need to ensure your right variable updating !!!\\n```\\n\\nclass Solution {\\npublic:\\n    vector<int> searchRange(vector<int>& nums, int target) {\\n        int left = searchLeft(nums, target);\\n        int right = searchRight(nums, target);\\n        vector<int> result;\\n        result.push_back(left);\\n        result.push_back(right);\\n        return result;\\n    }\\n    \\n    int searchLeft(vector<int>& nums, int target) {\\n        int start = 0, end = nums.size() - 1;\\n        while (end > start) {\\n            int mid = start + (end - start) / 2;\\n            if (nums[mid] < target) start = mid + 1;\\n            else end = mid;\\n        }\\n        if (nums[start] == target)\\n            return start;\\n        else \\n            return -1;\\n    }\\n    \\n    int searchRight(vector<int>& nums, int target) {\\n        int start = 0, end = nums.size() - 1;\\n        while (end > start) {\\n            int mid = start + (end - start) / 2 + 1;\\n            if (nums[mid] > target) end = mid - 1;\\n            else start = mid;\\n        }\\n        if (nums[start] == target)\\n            return start;\\n        else\\n            return -1;\\n    }\\n};\\n```\\n\\nMay the power with you !!!",
                "solutionTags": [],
                "code": "```\\n        int start=-1, end=n-1;\\n        while(end-start>1){\\n            int mid=(start+end)/2;\\n            if(nums[mid]>=target) end=mid;\\n            else start=mid;\\n        }\\n```\n```\\n    int guessNumber(int n) {\\n        int left = 1, right = n;\\n        while (right > left) {\\n            int mid = left + (right - left) / 2;\\n            int ans = guess(mid);\\n            if (ans == 1) {\\n                left = mid + 1;\\n            }\\n            else {\\n                right = mid;\\n            }\\n        }\\n        return left;\\n    }\\n\\n ```\n```\\nclass Solution {\\npublic:\\n    int findMin(vector<int>& nums) {\\n        int left = 0, right = nums.size() - 1;\\n        while (left < right) {\\n            int mid = (left + right) / 2;\\n            if (nums[mid] > nums[right]) left = mid + 1;\\n            else if (nums[mid] < nums[right]) right = mid;\\n            else right--;\\n        }\\n        return nums[left];\\n    }\\n};\\n\\n```\n```\\n\\nclass Solution {\\npublic:\\n    vector<int> searchRange(vector<int>& nums, int target) {\\n        int left = searchLeft(nums, target);\\n        int right = searchRight(nums, target);\\n        vector<int> result;\\n        result.push_back(left);\\n        result.push_back(right);\\n        return result;\\n    }\\n    \\n    int searchLeft(vector<int>& nums, int target) {\\n        int start = 0, end = nums.size() - 1;\\n        while (end > start) {\\n            int mid = start + (end - start) / 2;\\n            if (nums[mid] < target) start = mid + 1;\\n            else end = mid;\\n        }\\n        if (nums[start] == target)\\n            return start;\\n        else \\n            return -1;\\n    }\\n    \\n    int searchRight(vector<int>& nums, int target) {\\n        int start = 0, end = nums.size() - 1;\\n        while (end > start) {\\n            int mid = start + (end - start) / 2 + 1;\\n            if (nums[mid] > target) end = mid - 1;\\n            else start = mid;\\n        }\\n        if (nums[start] == target)\\n            return start;\\n        else\\n            return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4007031,
                "title": "guess-number-higher-or-lower",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int low=0;\\n        int high=n;\\n        while (low<=high)\\n        {\\n            int m=low+(high-low)/2;\\n            int x=guess(m);\\n            if (x==0) return m;\\n            else if (x==-1) high=m-1;\\n            else low=m+1; \\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int low=0;\\n        int high=n;\\n        while (low<=high)\\n        {\\n            int m=low+(high-low)/2;\\n            int x=guess(m);\\n            if (x==0) return m;\\n            else if (x==-1) high=m-1;\\n            else low=m+1; \\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3924190,
                "title": "easy-c-solution-binary-search-beats-100-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int low=0;\\n        int high=n;\\n        while(low<=high)\\n        {\\n            int mid=low + (high - low) / 2;\\n            if(guess(mid)==0)\\n            {\\n                return mid;\\n            }\\n           if(guess(mid)==-1)\\n            {\\n                high=mid-1;\\n            } \\n            if(guess(mid)==1)\\n            {\\n                low=mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int low=0;\\n        int high=n;\\n        while(low<=high)\\n        {\\n            int mid=low + (high - low) / 2;\\n            if(guess(mid)==0)\\n            {\\n                return mid;\\n            }\\n           if(guess(mid)==-1)\\n            {\\n                high=mid-1;\\n            } \\n            if(guess(mid)==1)\\n            {\\n                low=mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3886052,
                "title": "python-easy-solution-100-binary-search",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(logn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num: int) -> int:\\n\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l=0\\n        r=n\\n        while l<=r:\\n            m=(l+r)>>1\\n            if guess(m)==0:\\n                return m\\n            elif guess(m)==-1:\\n                r=m-1\\n            else:\\n                l=m+1\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Search",
                    "Interactive"
                ],
                "code": "```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num: int) -> int:\\n\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l=0\\n        r=n\\n        while l<=r:\\n            m=(l+r)>>1\\n            if guess(m)==0:\\n                return m\\n            elif guess(m)==-1:\\n                r=m-1\\n            else:\\n                l=m+1\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3872930,
                "title": "easy-java-solution-beats-100-using-binary-search-explained",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe are going till 1 to n so its sorted we can apply binary search\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\njust use the binary search and replace target part with \\nthe guesss value and one more thing if you think\\n why mid is not (s+e)/2 take the lcm of the formula\\ni have written it is it is just handling large number\\nif you use s+e/2 it will give you tle\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    o(log n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    o(1)\\n\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n       int start=0;\\n       int end=n;\\n       while(start<=end)\\n       {\\n           int mid=start+(end-start)/2;\\n           int target=guess(mid);\\n           if (target==0)\\n           {\\n                return mid;\\n           }\\n           else  if (target==1)\\n           {\\n               start=mid+1;\\n           }\\n           else{\\n               end=mid-1;\\n           }\\n       }\\n       return -1; \\n}\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n       int start=0;\\n       int end=n;\\n       while(start<=end)\\n       {\\n           int mid=start+(end-start)/2;\\n           int target=guess(mid);\\n           if (target==0)\\n           {\\n                return mid;\\n           }\\n           else  if (target==1)\\n           {\\n               start=mid+1;\\n           }\\n           else{\\n               end=mid-1;\\n           }\\n       }\\n       return -1; \\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3798089,
                "title": "easiest-approach-for-all-languages-beats-100-runtime-in-java",
                "content": "# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low=0,high=n;\\n        while(low<=high)\\n        {\\n            int mid=low+(high-low)/2;\\n            int x= guess(mid);\\n            if(x==0) \\n            {\\n                return mid;\\n            }\\n            else if(x==-1)\\n            {\\n                high=mid-1;\\n            }\\n            else\\n            {\\n                low = mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low=0,high=n;\\n        while(low<=high)\\n        {\\n            int mid=low+(high-low)/2;\\n            int x= guess(mid);\\n            if(x==0) \\n            {\\n                return mid;\\n            }\\n            else if(x==-1)\\n            {\\n                high=mid-1;\\n            }\\n            else\\n            {\\n                low = mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3686427,
                "title": "binary-search-o-logn-simple",
                "content": "# Intuition\\nJust use the given API function *guess*() and using the return values do a regular binary search in the initial range of 1-n\\n\\n\\n# Complexity\\n- Time complexity:$$O(logn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l = 1, r = n;\\n        int md = 0;\\n\\n        while(l <= r){\\n            md = l + (r-l)/2;\\n            if(guess(md) == 0){\\n                return md;\\n            }\\n            else if(guess(md) > 0){\\n                l = md + 1;\\n            }\\n            else{\\n                r = md - 1;\\n            }\\n        }\\n\\n        return 1;\\n    }\\n};\\n```\\n\\n\\nIF YOU LIKED THIS APPROACH PLEASE PLEASE UPVOTE, IT REALLY MOTIVATES A LOT :)\\n\\n\\n![bird2.gif](https://assets.leetcode.com/users/images/2e427c6d-958a-4d6c-9af5-f10685977961_1687806046.1965888.gif)\\n",
                "solutionTags": [
                    "C++",
                    "Binary Search",
                    "Interactive"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l = 1, r = n;\\n        int md = 0;\\n\\n        while(l <= r){\\n            md = l + (r-l)/2;\\n            if(guess(md) == 0){\\n                return md;\\n            }\\n            else if(guess(md) > 0){\\n                l = md + 1;\\n            }\\n            else{\\n                r = md - 1;\\n            }\\n        }\\n\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3645749,
                "title": "easiest-c-solution-100-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code is implementing the \"Guess Number Higher or Lower\" problem, where the task is to guess a target number between a given range using the guess() API. The API provides feedback on whether the guessed number is higher, lower, or equal to the target number. The code aims to find the target number by performing a binary search within the given range.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe code initializes the search range using two variables, k and l. Initially, k is set to n, the upper bound of the range, and l is set to 0, the lower bound of the range. The variable mid is set to n/2 as the initial guess.\\n\\nIf the initial guess mid returns 0 (equal to the target number), it directly returns mid as the result. If the guess returns -1 (higher than the target number), k is updated to mid, indicating that the target number is within the lower half of the range. Otherwise, if the guess returns 1 (lower than the target number), l is updated to mid, indicating that the target number is within the upper half of the range.\\n\\nNext, a loop is executed from l to k to perform a linear search within the narrowed range. For each iteration, the guess() API is called with the current number i. If the guess returns 0, indicating that i is equal to the target number, the loop is broken. Finally, the result is returned as i, which represents the guessed target number.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe code has a time complexity of O(n) in the worst case because it performs a linear search within the range from l to k. However, if the guess() API provides accurate feedback, the number of iterations can be reduced significantly, leading to an improved average case time complexity.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe code has a space complexity of O(1) as it uses a fixed amount of extra space to store variables and intermediate results.\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n       int i=1, mid=n/2, k, l=0;\\n       if(guess(mid)==0)\\n       return mid;\\n       else if(guess(mid)==-1)\\n       k=mid, l=0;\\n       else\\n       k=n, l=mid;\\n       for(i=l;i<k;i++)\\n       {\\n           if(guess(i)==0)\\n           break;\\n         \\n        }\\n        return i;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n       int i=1, mid=n/2, k, l=0;\\n       if(guess(mid)==0)\\n       return mid;\\n       else if(guess(mid)==-1)\\n       k=mid, l=0;\\n       else\\n       k=n, l=mid;\\n       for(i=l;i<k;i++)\\n       {\\n           if(guess(i)==0)\\n           break;\\n         \\n        }\\n        return i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3453805,
                "title": "solve-using-bs-according-to-question-100-easy",
                "content": "# Intuition\\nguess(num) will tell whether the number u have sent is match or not\\naccording to that u will binary search in your number\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int s = 0 ; \\n        int e = n ; \\n        while(s <= e){\\n            int mid = s + (e-s)/2;\\n            int g = guess(mid);\\n            if(g == 0){\\n                return mid ;\\n            }\\n            else if ( g  == -1 ){\\n                e = mid - 1 ;  \\n            }\\n            else if (g == 1) {\\n                s = mid + 1; \\n            }\\n        }\\n        return -1 ; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int s = 0 ; \\n        int e = n ; \\n        while(s <= e){\\n            int mid = s + (e-s)/2;\\n            int g = guess(mid);\\n            if(g == 0){\\n                return mid ;\\n            }\\n            else if ( g  == -1 ){\\n                e = mid - 1 ;  \\n            }\\n            else if (g == 1) {\\n                s = mid + 1; \\n            }\\n        }\\n        return -1 ; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3453026,
                "title": "binary-search-approach-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(log(n))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low =1;\\n        int high=n;\\n        int ans=0;\\n        while(low<=high){\\n            int mid = low+(high-low)/2;\\n            if(guess(mid)==0){\\n                return mid;\\n            }\\n            else if(guess(mid)==-1){\\n                high=mid-1;\\n            }\\n            else{\\n                low=mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low =1;\\n        int high=n;\\n        int ans=0;\\n        while(low<=high){\\n            int mid = low+(high-low)/2;\\n            if(guess(mid)==0){\\n                return mid;\\n            }\\n            else if(guess(mid)==-1){\\n                high=mid-1;\\n            }\\n            else{\\n                low=mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3392689,
                "title": "easy-c-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\nlong long int l=1;\\n    int guessNumber(int n) {\\n        while(l<=n)\\n        {\\n            int mid=(l+n)/2;\\n            int k=guess(mid);\\n            if(k==0) return mid;\\n            if(k==-1) n=mid-1;\\n            if(k==1) l=mid+1;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\nlong long int l=1;\\n    int guessNumber(int n) {\\n        while(l<=n)\\n        {\\n            int mid=(l+n)/2;\\n            int k=guess(mid);\\n            if(k==0) return mid;\\n            if(k==-1) n=mid-1;\\n            if(k==1) l=mid+1;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3391036,
                "title": "python3-easy-understanding-binary-search",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(log n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        left, right = 1, n\\n        while left < right:\\n            mid = (left + right) // 2\\n            if guess(mid) < 1: right = mid\\n            else: left = mid + 1\\n        return left\\n```",
                "solutionTags": [
                    "Python3",
                    "Binary Search",
                    "Interactive"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        left, right = 1, n\\n        while left < right:\\n            mid = (left + right) // 2\\n            if guess(mid) < 1: right = mid\\n            else: left = mid + 1\\n        return left\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3382507,
                "title": "java-binary-search-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSet low to 0; high to n,then calculate mid .\\nNow , if guess(mid)==0,means we found the target ,so return ans.\\nIf guess(mid)==-1,then high = mid-1.(element at mid is greater than pick)\\nIf guess(mid)==1,then low=mid+1;(element at mid is lesser than pick)\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nApply binary search.\\n\\n# Complexity\\n- Time complexity:O(log(n))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low =1;\\n        int high =n;\\n        int ans=0;\\n        while(low<=high){\\n            int mid = low+(high-low)/2;\\n            if(guess(mid)==0){\\n                return mid;\\n            }\\n            else if(guess(mid)==-1){\\n                high=mid-1;\\n            }\\n            else{\\n                low=mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low =1;\\n        int high =n;\\n        int ans=0;\\n        while(low<=high){\\n            int mid = low+(high-low)/2;\\n            if(guess(mid)==0){\\n                return mid;\\n            }\\n            else if(guess(mid)==-1){\\n                high=mid-1;\\n            }\\n            else{\\n                low=mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3334726,
                "title": "simple-c-code-using-binary-search-with-good-explanation",
                "content": "# Intuition\\n<!-- Initially it was difficult for me as well to understand the question, but then I realised after reading it around twice, that the guess api would already be returning values such as -1, 0 and 1 based on the guesses. Therefore, the binary search would need to be performed taking the results of guess api as an indicator towards the target, because we don\\'t know the target. -->\\n\\n# Approach\\n<!-- If the guess api is returning value ==1, it means the number is lower than the picked number. So, we would perform the binary search on the right side of the mid element. Similarly it would happen for others as well. -->\\n\\n# Complexity \\n- Time complexity:\\n<!-- Since performing Binary Search===O(log n) -->\\n\\n- Space complexity:\\n<!--  Space complexity of Binary Search===O(1)-->\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        \\n       long long int l = 1;\\n        long long int h = n;\\n\\n        while(l<=h){\\n            long long int mid = (l+h)>>1;\\n\\n            if(guess(mid)==1) l = mid+1;\\n\\n            else if(guess(mid)==-1) h = mid-1;\\n\\n            else return mid;\\n        }\\n        return l;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        \\n       long long int l = 1;\\n        long long int h = n;\\n\\n        while(l<=h){\\n            long long int mid = (l+h)>>1;\\n\\n            if(guess(mid)==1) l = mid+1;\\n\\n            else if(guess(mid)==-1) h = mid-1;\\n\\n            else return mid;\\n        }\\n        return l;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3326668,
                "title": "binary-search-most-efficient-solution-beats-100",
                "content": "# Intuition\\nsince the value are in the range of 1 to n we can easily apply binary search in this solution \\n\\n# Approach\\nGiven API retuns if the choosen no is greater,smaller or equal to the required no. .We can use Binary Search and search in the range.If the number is greater than the required no then reduce the upper bound of the search to mid-1.If the required is greater than the picked no then increase the lower bound to mid+1.\\n# Complexity\\n- Time complexity:\\nO(log N)\\n- Space complexity:\\n- O(1)\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int s=1,e=n,m,result;\\n        while(s<=e){\\n            m=s+((e-s)/2);\\n            \\n            if(guess(m)==0)\\n                  return m;\\n            else if(guess(m)== -1)\\n                  e=m-1;\\n            else\\n                  s=m+1;\\n        }\\n        return -1;\\n    }\\n}\\nPlease upvote :\\n![plsupvote.jpg](https://assets.leetcode.com/users/images/1f319a1c-2b89-4600-ae03-cfd42aa6f020_1679446380.6596467.jpeg)\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int s=1,e=n,m,result;\\n        while(s<=e){\\n            m=s+((e-s)/2);\\n            \\n            if(guess(m)==0)\\n                  return m;\\n            else if(guess(m)== -1)\\n                  e=m-1;\\n            else\\n                  s=m+1;\\n        }\\n        return -1;\\n    }\\n}\\nPlease upvote :\\n![plsupvote.jpg](https://assets.leetcode.com/users/images/1f319a1c-2b89-4600-ae03-cfd42aa6f020_1679446380.6596467.jpeg)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312816,
                "title": "c-python-o-logn-easy-solution",
                "content": "\\n# Approach: Binary Search\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(logn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# c++\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int s = 1, e = n;\\n        while (s <= e) {\\n            int mid = s + (e-s)/2;\\n            if(guess(mid) == 0) return mid;\\n            else if (guess(mid) == -1) e = mid - 1;\\n            else s = mid + 1;\\n        }\\n        return -1;\\n    }\\n};\\n```\\n\\n# Python/Python3\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        s, e = 0, n\\n        while s <= e:\\n            mid = s + (e-s)//2\\n            if guess(mid) == 0:\\n                return mid\\n            elif guess(mid) == -1:\\n                e = mid - 1\\n            else:\\n                s = mid + 1\\n        return -1\\n```",
                "solutionTags": [
                    "C++",
                    "Python",
                    "Python3",
                    "Binary Search",
                    "Interactive"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int s = 1, e = n;\\n        while (s <= e) {\\n            int mid = s + (e-s)/2;\\n            if(guess(mid) == 0) return mid;\\n            else if (guess(mid) == -1) e = mid - 1;\\n            else s = mid + 1;\\n        }\\n        return -1;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        s, e = 0, n\\n        while s <= e:\\n            mid = s + (e-s)//2\\n            if guess(mid) == 0:\\n                return mid\\n            elif guess(mid) == -1:\\n                e = mid - 1\\n            else:\\n                s = mid + 1\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3256724,
                "title": "cpp-beats-100-o-log-n-binary-search",
                "content": "\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int lo = 1;\\n        int hi = n;\\n        while(lo <= hi){\\n            int mid = lo + (hi - lo) / 2;\\n            if(guess(mid) == -1){\\n                hi = mid - 1;\\n            }else if(guess(mid) == 1){\\n                lo = mid + 1;\\n            }else{\\n                return mid;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int lo = 1;\\n        int hi = n;\\n        while(lo <= hi){\\n            int mid = lo + (hi - lo) / 2;\\n            if(guess(mid) == -1){\\n                hi = mid - 1;\\n            }else if(guess(mid) == 1){\\n                lo = mid + 1;\\n            }else{\\n                return mid;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3092088,
                "title": "kotlin-binary-search-without-low-and-high",
                "content": "\\n# Code\\n```\\nclass Solution:GuessGame() {\\n     override fun guessNumber(n:Int):Int {\\n        var step = n / 2\\n        var num = step\\n\\n        while (true) {\\n            var result = guess(num)\\n\\n            step = step / 2\\n            if (step == 0) step = 1\\n\\n            if (result == 0)\\n                return num\\n            else if (result == 1)\\n                num = num + step\\n            else\\n               num = num - step\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution:GuessGame() {\\n     override fun guessNumber(n:Int):Int {\\n        var step = n / 2\\n        var num = step\\n\\n        while (true) {\\n            var result = guess(num)\\n\\n            step = step / 2\\n            if (step == 0) step = 1\\n\\n            if (result == 0)\\n                return num\\n            else if (result == 1)\\n                num = num + step\\n            else\\n               num = num - step\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3051193,
                "title": "binary-search-solution-on-swift",
                "content": "\\n# Code\\n```\\nfunc guessNumber(_ n: Int) -> Int {\\n    var low = 0\\n    var high = n\\n    while low <= high {\\n        let mid = (low+high) / 2\\n        if guess(mid) == 0 {\\n            return mid\\n        }\\n        if guess(mid) == 1 {\\n            low = mid + 1                \\n        } else if guess(mid) == -1 {\\n            high = mid - 1\\n        }\\n    }\\n    return -1\\n}\\n```\\n### Please upvote if the solution was useful!",
                "solutionTags": [
                    "Swift",
                    "Binary Search"
                ],
                "code": "```\\nfunc guessNumber(_ n: Int) -> Int {\\n    var low = 0\\n    var high = n\\n    while low <= high {\\n        let mid = (low+high) / 2\\n        if guess(mid) == 0 {\\n            return mid\\n        }\\n        if guess(mid) == 1 {\\n            low = mid + 1                \\n        } else if guess(mid) == -1 {\\n            high = mid - 1\\n        }\\n    }\\n    return -1\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2880728,
                "title": "java-easy-0-ms-fast-solution",
                "content": "\\n        int l = 1, h = n, m;\\n        \\n        while (l <= h) {\\n            m = l + (h - l) / 2;\\n            if (guess(m) == 0)  return m;\\n            else if (guess(m) == 1) l = m + 1;\\n            else h = m - 1;\\n       }\\n        return - 1;      // Just for warnings for this solution\\n    \\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\n        int l = 1, h = n, m;\\n        \\n        while (l <= h) {\\n            m = l + (h - l) / 2;\\n            if (guess(m) == 0)  return m;\\n            else if (guess(m) == 1) l = m + 1;\\n            else h = m - 1;\\n       }\\n        return - 1;      // Just for warnings for this solution\\n    \\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2830207,
                "title": "python-pen-n-paper-explanation-easy-solution",
                "content": "# Let\\'s Dry Run a example:\\n\\n# Where n=4 ,Picked item=1\\n\\n\\n![tempImageA6yNbn.jpg](https://assets.leetcode.com/users/images/5f94c1ed-6de3-41ee-a4b2-b74e6374b921_1668865191.623506.jpeg)\\n\\n![tempImageR5cKvU.jpg](https://assets.leetcode.com/users/images/dc514a1c-c280-499d-94ed-a1e04f8715c6_1668865291.6340785.jpeg)\\n\\n\\n\\n# Code\\n```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num: int) -> int:\\n\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        low=1\\n        while low<=n:\\n            mid=(low+n)//2\\n            if guess(mid)==-1:\\n                n=mid-1\\n            elif guess(mid)==1:\\n                low=mid+1\\n            else:\\n                return mid\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num: int) -> int:\\n\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        low=1\\n        while low<=n:\\n            mid=(low+n)//2\\n            if guess(mid)==-1:\\n                n=mid-1\\n            elif guess(mid)==1:\\n                low=mid+1\\n            else:\\n                return mid\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2822925,
                "title": "c-binary-search-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\'\\'\\'\\n\\n\\t/** \\n\\t * Forward declaration of guess API.\\n\\t * @param  num   your guess\\n\\t * @return \\t     -1 if num is higher than the picked number\\n\\t *\\t\\t\\t      1 if num is lower than the picked number\\n\\t *               otherwise return 0\\n\\t * int guess(int num);\\n\\t */\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint guessNumber(int n) {\\n\\t\\t\\tint i=1, j=n; \\n\\t\\t\\twhile(i<=j){\\n\\t\\t\\t\\tint mid=i+(j-i)/2;\\n\\t\\t\\t\\tif(guess(mid)==0){return mid;}\\n\\t\\t\\t\\telse if(guess(mid)==1){i=mid+1;}\\n\\t\\t\\t\\telse if(guess(mid)==-1){j=mid-1;}\\n\\t\\t\\t}\\n\\t\\t\\treturn i;\\n\\t\\t}\\n\\t};\\n\\'\\'\\'",
                "solutionTags": [
                    "C",
                    "Binary Search"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint guessNumber(int n) {\\n\\t\\t\\tint i=1, j=n; \\n\\t\\t\\twhile(i<=j){\\n\\t\\t\\t\\tint mid=i+(j-i)/2;\\n\\t\\t\\t\\tif(guess(mid)==0){return mid;}",
                "codeTag": "Java"
            },
            {
                "id": 2822141,
                "title": "java-easy-o-log-n-approach",
                "content": "***Please do upvote, if you find it helpful***\\uD83D\\uDE0A\\n\\n```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int lo = 1, hi = n;\\n        while(lo<=hi){\\n            int mid = lo+(hi-lo)/2;\\n            \\n            if(guess(mid) == 0)\\n                return mid;\\n            else if(guess(mid) == 1) \\n                lo = mid+1;\\n            else            // if(guess(mid)==-1)\\n                hi = mid-1;\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int lo = 1, hi = n;\\n        while(lo<=hi){\\n            int mid = lo+(hi-lo)/2;\\n            \\n            if(guess(mid) == 0)\\n                return mid;\\n            else if(guess(mid) == 1) \\n                lo = mid+1;\\n            else            // if(guess(mid)==-1)\\n                hi = mid-1;\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2821911,
                "title": "0ms-solution-beats-100-time-complexity-beats-99-34-space-complexity-c",
                "content": "# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) \\n    {  \\n        // 1 to n \\n        unsigned int i = 1;\\n        unsigned int j = n;\\n        //binary search\\n        while (i <= j)\\n        {\\n            int mid = (i + j) >> 1;\\n            if (guess (mid) == -1)\\n            {\\n                j = mid - 1;\\n            }\\n            \\n            else if (guess (mid) == 1)\\n            {\\n                i = mid + 1;\\n            }\\n            else \\n            {\\n                return mid;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) \\n    {  \\n        // 1 to n \\n        unsigned int i = 1;\\n        unsigned int j = n;\\n        //binary search\\n        while (i <= j)\\n        {\\n            int mid = (i + j) >> 1;\\n            if (guess (mid) == -1)\\n            {\\n                j = mid - 1;\\n            }\\n            \\n            else if (guess (mid) == 1)\\n            {\\n                i = mid + 1;\\n            }\\n            else \\n            {\\n                return mid;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2820874,
                "title": "easy-c-solution-binary-search-o-log-n",
                "content": "\\n\\n**Solution:**\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n\\n        // As the guessed number is between 1 to n\\n        int low = 1;\\n        int high = n;\\n\\n        while(low <= high)\\n        {\\n            \\n            // find the mid\\n\\n            int mid = low + (high - low)/2;\\n\\n            int test = guess(mid);\\n\\n            // Move the low and high pointer based on the condition.\\n            if(test == 0)\\n                return mid;\\n            else if(test == -1)\\n                high = mid-1;\\n            else\\n                low = mid +1;    \\n        }\\n        return -1;\\n    }\\n};\\n```\\n\\n---\\n\\nNote : We considered guess() function takes O(1)  ---> time\\n\\n**Analysis:**\\n\\n**Time Complexity**: ```O(log n)```  ---> As we apply the binary search\\n\\n**Space Complexity**: ```O(1)```   \\u2014> constant Space\\n\\n----\\n\\n\\nIf this solution helps you, then please ```upvote```.\\n**Till then keep Learning, keep Growing!!!!**\\n\\n\\n$$Thank YOU !$$",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n\\n        // As the guessed number is between 1 to n\\n        int low = 1;\\n        int high = n;\\n\\n        while(low <= high)\\n        {\\n            \\n            // find the mid\\n\\n            int mid = low + (high - low)/2;\\n\\n            int test = guess(mid);\\n\\n            // Move the low and high pointer based on the condition.\\n            if(test == 0)\\n                return mid;\\n            else if(test == -1)\\n                high = mid-1;\\n            else\\n                low = mid +1;    \\n        }\\n        return -1;\\n    }\\n};\\n```\n```O(log n)```\n```O(1)```\n```upvote```",
                "codeTag": "Java"
            },
            {
                "id": 2820807,
                "title": "c-python-java-videos-of-binary-search-by-experts-easy-to-understand-binary-search",
                "content": "If you don\\'t know binary search checkout a video you can checkout videos of experts like:\\n1. Abdul Bari ~ https://www.youtube.com/watch?v=C2apEw9pgtw \\n2. Kunal Kushwaha ~ https://youtube.com/watch?v=W9QJ8HaRvJQ\\n\\nHere binary-search is used it has time complexity of **O(log n)** and space complexity of **O(1)**.\\nGuess is an inbuilt function(*Given by Leetcode*) so it\\'s time complexity **O(1)**. \\nThat\\'s it Enjoy\\uD83D\\uDE4C\\u270C\\uFE0F\\n\\nCPP\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int low=0,high=n;\\n        \\n        while(low<=high){\\n            int mid = low + (high-low)/2;\\n            int guessed = guess(mid);\\n            if(guessed == 0) return mid;\\n            if(guessed == -1) high=mid-1;\\n            else low = mid+1;\\n        } \\n        return -1;\\n    }\\n};\\n```\\n\\nJAVA\\n```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low=0, high=n, mid;\\n        while(low<=high){\\n            mid=low+(high-low)/2;\\n            if(guess((int)mid)==0) return (int)mid;\\n            else if(guess((int)mid)==1) low=mid+1;\\n            else high=mid-1; \\n        }\\n        return -1;\\n    }\\n}\\n```\\n\\nPython3\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        low = 0\\n        high = n\\n\\t\\t\\n        while low<=high:\\n\\t\\t\\n            mid = low+(high-low)//2\\n            num = guess(mid)\\n\\t\\t\\t\\n            if num == 0:\\n                return mid\\n            elif num == -1:\\n                high = mid-1\\n            else:\\n                low = mid+1\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int low=0,high=n;\\n        \\n        while(low<=high){\\n            int mid = low + (high-low)/2;\\n            int guessed = guess(mid);\\n            if(guessed == 0) return mid;\\n            if(guessed == -1) high=mid-1;\\n            else low = mid+1;\\n        } \\n        return -1;\\n    }\\n};\\n```\n```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low=0, high=n, mid;\\n        while(low<=high){\\n            mid=low+(high-low)/2;\\n            if(guess((int)mid)==0) return (int)mid;\\n            else if(guess((int)mid)==1) low=mid+1;\\n            else high=mid-1; \\n        }\\n        return -1;\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        low = 0\\n        high = n\\n\\t\\t\\n        while low<=high:\\n\\t\\t\\n            mid = low+(high-low)//2\\n            num = guess(mid)\\n\\t\\t\\t\\n            if num == 0:\\n                return mid\\n            elif num == -1:\\n                high = mid-1\\n            else:\\n                low = mid+1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2820483,
                "title": "java-runtime-0-ms-faster-than-100-00-of-java-online-submissions",
                "content": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int leftValue = 1;\\n        while (leftValue <= n) {\\n            int midValue = leftValue + (n - leftValue) / 2;\\n            int g = guess(midValue);\\n            if (g == 0) return midValue; \\n            else if (g == 1) \\n                leftValue = midValue + 1;\\n            else \\n                n = midValue - 1;\\n        }\\n        return 0;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int leftValue = 1;\\n        while (leftValue <= n) {\\n            int midValue = leftValue + (n - leftValue) / 2;\\n            int g = guess(midValue);\\n            if (g == 0) return midValue; \\n            else if (g == 1) \\n                leftValue = midValue + 1;\\n            else \\n                n = midValue - 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2820365,
                "title": "c-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n  Binary Search\\n\\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l = 1, r = n;\\n        while(l <= r) {\\n            int mid = (r - l) / 2 + l;\\n            int ans = guess(mid);\\n            if(ans == 0) return mid;\\n            else if(ans > 0) l = mid + 1;\\n            else r = mid - 1;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l = 1, r = n;\\n        while(l <= r) {\\n            int mid = (r - l) / 2 + l;\\n            int ans = guess(mid);\\n            if(ans == 0) return mid;\\n            else if(ans > 0) l = mid + 1;\\n            else r = mid - 1;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2820202,
                "title": "golang-solution-with-link-on-go-playground",
                "content": "playground https://go.dev/play/p/lSnWB9mV7tj\\n\\nTime Complexity - O(log(n))\\nSpace Complexity - O(1)\\n\\nSolution:\\n```\\nfunc guessNumber(n int) int {\\n\\treturn binarySearch(0, n)\\n}\\n\\nfunc binarySearch(start, finish int) int {\\n\\tif start > finish {\\n\\t\\treturn -1\\n\\t}\\n\\tdot := (finish-start)/2 + start\\n\\n\\tswitch guess(dot) {\\n\\tcase -1:\\n\\t\\treturn binarySearch(start, dot-1)\\n\\tcase 1:\\n\\t\\treturn binarySearch(dot+1, finish)\\n\\tdefault:\\n\\t\\treturn dot\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc guessNumber(n int) int {\\n\\treturn binarySearch(0, n)\\n}\\n\\nfunc binarySearch(start, finish int) int {\\n\\tif start > finish {\\n\\t\\treturn -1\\n\\t}\\n\\tdot := (finish-start)/2 + start\\n\\n\\tswitch guess(dot) {\\n\\tcase -1:\\n\\t\\treturn binarySearch(start, dot-1)\\n\\tcase 1:\\n\\t\\treturn binarySearch(dot+1, finish)\\n\\tdefault:\\n\\t\\treturn dot\\n\\t}\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2820174,
                "title": "simple-java-solution-0ms-complexity",
                "content": "\\n```\\n\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n            long s=0;\\n            long e=n;\\n            long mid=(s+e)/2;\\n            while(s<=e){\\n                  mid=(s+e)/2;\\n                  int temp=guess((int)mid);\\n                  if(temp==0)\\n                    return (int)mid;\\n                  else if(temp==1)\\n                     s=mid+1;\\n                  else \\n                     e =mid-1;             \\n            }  \\n            return (int)mid;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n            long s=0;\\n            long e=n;\\n            long mid=(s+e)/2;\\n            while(s<=e){\\n                  mid=(s+e)/2;\\n                  int temp=guess((int)mid);\\n                  if(temp==0)\\n                    return (int)mid;\\n                  else if(temp==1)\\n                     s=mid+1;\\n                  else \\n                     e =mid-1;             \\n            }  \\n            return (int)mid;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819776,
                "title": "binary-search-javascript-solution",
                "content": "\\n```\\nvar guessNumber = function(n) {\\n    var low = 1;\\n    var high = n;\\n    while (low <= high) {\\n        var mid = Math.ceil(low + (high - low) / 2);\\n        var res = guess(mid)\\n        if (res == 0) return mid;\\n        else if (res < 0) high = mid - 1;\\n        else low = mid + 1;\\n    }\\n    return -1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Binary Tree"
                ],
                "code": "```\\nvar guessNumber = function(n) {\\n    var low = 1;\\n    var high = n;\\n    while (low <= high) {\\n        var mid = Math.ceil(low + (high - low) / 2);\\n        var res = guess(mid)\\n        if (res == 0) return mid;\\n        else if (res < 0) high = mid - 1;\\n        else low = mid + 1;\\n    }\\n    return -1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2819717,
                "title": "c-1-line-pure-recursion-without-binary-search",
                "content": "\\n# Code \\n\\uD83D\\uDE4FPlease do upvote if solution is helpful\\uD83D\\uDE4F\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n    return (guess(n) == 0) ? n : (guess(n) == -1) ? guessNumber(n-1) : guessNumber(n+1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n    return (guess(n) == 0) ? n : (guess(n) == -1) ? guessNumber(n-1) : guessNumber(n+1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819629,
                "title": "python-classic-binary-search-problem-with-explaination-99-faster-fastest-solution",
                "content": "**\\uD83D\\uDD3C IF YOU FIND THIS POST HELPFUL PLEASE UPVOTE \\uD83D\\uDC4D**\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        left, right = 0, n\\n\\t\\t\\n        while left<=right:\\n\\t\\t\\n            mid = (left+right)//2\\n            num = guess(mid)\\n\\t\\t\\t\\n            if num == 0:\\n                return mid\\n            elif num == -1:\\n                right = mid-1\\n            else:\\n                left = mid+1\\n```\\n**For Detail Explaination Refer this Blog:\\nhttps://www.python-techs.com/2022/11/program-to-guess-number-higher-or-lower.html\\n(Please open this link in new tab)**\\n\\nThank you for reading! \\uD83D\\uDE04 Comment if you have any questions or feedback.",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        left, right = 0, n\\n\\t\\t\\n        while left<=right:\\n\\t\\t\\n            mid = (left+right)//2\\n            num = guess(mid)\\n\\t\\t\\t\\n            if num == 0:\\n                return mid\\n            elif num == -1:\\n                right = mid-1\\n            else:\\n                left = mid+1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819624,
                "title": "99-04-faster-python-binary-search-easiest-approach-o-log-n",
                "content": "You can drop your apporach or suggestions :)\\n\\n![image](https://assets.leetcode.com/users/images/e7b344f0-c6bc-450d-a580-1037d15e1c02_1668578875.88876.png)\\n\\n\\n```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l = 1\\n        r = n\\n        while l<=r:\\n            mid = l + (r-l)//2\\n            result = guess(mid)\\n            if result == 0:\\n                return mid\\n            elif result == -1:\\n                r = mid -1\\n            elif result == 1:\\n                l = mid + 1\\n        return mid\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l = 1\\n        r = n\\n        while l<=r:\\n            mid = l + (r-l)//2\\n            result = guess(mid)\\n            if result == 0:\\n                return mid\\n            elif result == -1:\\n                r = mid -1\\n            elif result == 1:\\n                l = mid + 1\\n        return mid\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819548,
                "title": "python-97-15-faster-binary-search-o-log-n-solution",
                "content": "```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num: int) -> int:\\n\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l,h=1,n\\n        m=(l+h)>>1\\n        while l<=h:\\n            x=guess(m)\\n            if x==0:\\n                return m\\n            elif x<0:\\n                h=m-1\\n            else:\\n                l=m+1\\n            m=(l+h)>>1    \\n```\\n\\n**Upvote if you like the solution or ask if there is any query**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num: int) -> int:\\n\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l,h=1,n\\n        m=(l+h)>>1\\n        while l<=h:\\n            x=guess(m)\\n            if x==0:\\n                return m\\n            elif x<0:\\n                h=m-1\\n            else:\\n                l=m+1\\n            m=(l+h)>>1    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819506,
                "title": "100-efficient-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int m=n/2;\\n        int start=0,end=n;\\n        while(start<=end)\\n        {\\n            m=  start+(end-start)/2;\\n            if(guess(m)==0)\\n            {\\n                return m;\\n                break;\\n            }\\n            else if(guess(m)==-1)\\n                end=m-1;\\n            else if(guess(m)==1)\\n                start=m+1;\\n        }\\n        return m;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int m=n/2;\\n        int start=0,end=n;\\n        while(start<=end)\\n        {\\n            m=  start+(end-start)/2;\\n            if(guess(m)==0)\\n            {\\n                return m;\\n                break;\\n            }\\n            else if(guess(m)==-1)\\n                end=m-1;\\n            else if(guess(m)==1)\\n                start=m+1;\\n        }\\n        return m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2818945,
                "title": "python-using-binary-search-faster-than-90",
                "content": "\\n```\\n        left=0\\n        right=n\\n        while left<=right:\\n            mid=(left+right)//2\\n            g=guess(mid)\\n            if g==0:return mid\\n            elif g==1:left=mid+1\\n            elif g==-1:right=mid-1\\n        return -1\\n```\\n\\n![image](https://assets.leetcode.com/users/images/1fca9d4f-5c3f-44f8-bc5d-382161be469e_1668560738.9396384.png)\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Search"
                ],
                "code": "```\\n        left=0\\n        right=n\\n        while left<=right:\\n            mid=(left+right)//2\\n            g=guess(mid)\\n            if g==0:return mid\\n            elif g==1:left=mid+1\\n            elif g==-1:right=mid-1\\n        return -1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2730640,
                "title": "c-solution-100-time-99-31-space-binary-search",
                "content": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n);\\n};\\n/*****************************************************************************/\\nint Solution::guessNumber(int n) {\\n    int left{1}, right{n}, middle=n/2, ret;\\n    while ((ret=guess(middle)) != 0) { \\n        (ret == -1) ? right = middle-1 : left = middle+1;\\n        middle = left + (right-left)/2;\\n    }\\n    return middle;\\n}\\n/*****************************************************************************/\\n```",
                "solutionTags": [],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n);\\n};\\n/*****************************************************************************/\\nint Solution::guessNumber(int n) {\\n    int left{1}, right{n}, middle=n/2, ret;\\n    while ((ret=guess(middle)) != 0) { \\n        (ret == -1) ? right = middle-1 : left = middle+1;\\n        middle = left + (right-left)/2;\\n    }\\n    return middle;\\n}\\n/*****************************************************************************/\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2730042,
                "title": "java-binary-search-100-faster-easy-to-understand",
                "content": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low = 1;\\n        int high = n;\\n        \\n        while(low <= high){\\n            int mid = low + (high - low) / 2;\\n            \\n            int g = guess(mid);\\n            if(g == 1) low = mid + 1;\\n            else if(g == -1) high = mid - 1;\\n            else return mid;\\n        }\\n        return 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low = 1;\\n        int high = n;\\n        \\n        while(low <= high){\\n            int mid = low + (high - low) / 2;\\n            \\n            int g = guess(mid);\\n            if(g == 1) low = mid + 1;\\n            else if(g == -1) high = mid - 1;\\n            else return mid;\\n        }\\n        return 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2662608,
                "title": "easy-solution-for-beginner-o-log-n-binary-search-c-java-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n    Simple Binary Search\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    First do Binary search if the guess of mid is 0 then mid is the guess number if guess of mid is equal to 1 then the guess number is greater than the mid number so we change the starting pointer to mid+1 and if the guess of mid is equla to -1 then the guess number is less than the mid number in that case we have to set the last pointer(j) as mid-1.\\nNow repeat this step till then last pointer is equal to the first pointer and if this condition is failed and we haven\\'t got our guessed number then in that case we would return -1 (which would indicate that the guess number is not present).\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(log n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n# Code\\nSolution in Java\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(long long n) {\\n        long long i=0, j=n;\\n        while(i<=j){\\n            long long mid=(i+j)/2;\\n            if(guess(mid)==0)\\n            return mid;\\n            else if(guess(mid)==1)\\n            i=mid+1;\\n            else \\n            j=mid-1;\\n        }\\n        return -1;\\n    }\\n};\\n```\\nSolution in C++\\n```\\nclass Solution {\\n    public int searchInsert(int[] nums, int target) {\\n        int i=0;int j=nums.length-1;\\n        while(i<=j){\\n            int mid=(i+j)/2;\\n            if(nums[mid]==target)\\n            return mid;\\n            else if(nums[mid]>target)\\n                j=mid-1;\\n            else \\n                i=mid+1;\\n        }\\n        return i;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Two Pointers",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(long long n) {\\n        long long i=0, j=n;\\n        while(i<=j){\\n            long long mid=(i+j)/2;\\n            if(guess(mid)==0)\\n            return mid;\\n            else if(guess(mid)==1)\\n            i=mid+1;\\n            else \\n            j=mid-1;\\n        }\\n        return -1;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public int searchInsert(int[] nums, int target) {\\n        int i=0;int j=nums.length-1;\\n        while(i<=j){\\n            int mid=(i+j)/2;\\n            if(nums[mid]==target)\\n            return mid;\\n            else if(nums[mid]>target)\\n                j=mid-1;\\n            else \\n                i=mid+1;\\n        }\\n        return i;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2579627,
                "title": "java-100-faster-solution-100-less-memory-usage",
                "content": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n       int start = 1;\\n        int end = n;\\n        while(start<=end){\\n           int mid = start + (end-start)/2;\\n            int picked = guess(mid);\\n            if (picked==-1){\\n                end = mid-1;\\n            }\\n            else if(picked==1){\\n                start = mid+1;\\n            }\\n            else\\n                return mid;\\n        }\\n        return -1; \\n    }\\n}\\n```\\n\\nPlease give an upvote if you find this helpful",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n       int start = 1;\\n        int end = n;\\n        while(start<=end){\\n           int mid = start + (end-start)/2;\\n            int picked = guess(mid);\\n            if (picked==-1){\\n                end = mid-1;\\n            }\\n            else if(picked==1){\\n                start = mid+1;\\n            }\\n            else\\n                return mid;\\n        }\\n        return -1; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2379593,
                "title": "python-fast-solution",
                "content": "```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num: int) -> int:\\n\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        beg = 1 \\n        end = n\\n        while beg <= end:\\n            num = (beg+end)//2\\n            pick = guess(num)\\n            if pick == 0:\\n                return num\\n            elif pick == 1:\\n                beg = num+1\\n            else:\\n                end = num\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num: int) -> int:\\n\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        beg = 1 \\n        end = n\\n        while beg <= end:\\n            num = (beg+end)//2\\n            pick = guess(num)\\n            if pick == 0:\\n                return num\\n            elif pick == 1:\\n                beg = num+1\\n            else:\\n                end = num\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2016276,
                "title": "0-ms-simple-implementation-using-binary-search-in-c-with-detailed-explanation",
                "content": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        //store the minimum number first into a variable \"minNumber\"\\n        int minNumber = 1;\\n        //store the maximum number into a variable \"maxNumber\" \\n        int maxNumber = n;\\n        \\n        //now the value picked should be between maxNumber and minNumber\\n        \\n        while(true){\\n            //making our guess and storing into a variable \"midNumber\"\\n            int midNumber = (maxNumber - minNumber) / 2 + minNumber;\\n            \\n            //putting our guess into a variable \"result\" by using the predefined API given above already\\n            int result = guess(midNumber);\\n            \\n            //after that use three possible results returned by predefined API and apply binary search simply \\n            if(result == 0)\\n                return midNumber;\\n            else if(result==1)\\n                minNumber = midNumber+1;\\n            else\\n                maxNumber = midNumber-1;\\n        }\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Binary Search"
                ],
                "code": "class Solution {\\npublic:\\n    int guessNumber(int n) {\\n        //store the minimum number first into a variable \"minNumber\"\\n        int minNumber = 1;\\n        //store the maximum number into a variable \"maxNumber\" \\n        int maxNumber = n;\\n        \\n        //now the value picked should be between maxNumber and minNumber\\n        \\n        while(true){\\n            //making our guess and storing into a variable \"midNumber\"\\n            int midNumber = (maxNumber - minNumber) / 2 + minNumber;\\n            \\n            //putting our guess into a variable \"result\" by using the predefined API given above already\\n            int result = guess(midNumber);\\n            \\n            //after that use three possible results returned by predefined API and apply binary search simply \\n            if(result == 0)\\n                return midNumber;\\n            else if(result==1)\\n                minNumber = midNumber+1;\\n            else\\n                maxNumber = midNumber-1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1982833,
                "title": "java-faster-than-100-solutions",
                "content": "Make sure you use mid = low +(hi -low)/2 else it will throw TLE\\n```\\npublic class Solution extends GuessGame {\\n  public int guessNumber(int n) {\\n        int low= 0;\\n        int hi = n;\\n        \\n        while (low < hi) {\\n            int mid = low + (hi-low)/2;\\n            \\n            if (guess(mid) == 1) {\\n                low = mid + 1;\\n            } else if (guess(mid) ==-1) {\\n                hi = mid - 1;\\n            } else {\\n                return mid;\\n            }\\n        }\\n        \\n        return hi;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution extends GuessGame {\\n  public int guessNumber(int n) {\\n        int low= 0;\\n        int hi = n;\\n        \\n        while (low < hi) {\\n            int mid = low + (hi-low)/2;\\n            \\n            if (guess(mid) == 1) {\\n                low = mid + 1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1937950,
                "title": "c-faster-than-100-binary-search-easy-to-understand",
                "content": "**//PLEASE UPVOTE IF IT IS HELPFUL**\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int end=n;\\n        int start=1;\\n        while(start<=end){\\n            int mid = start + (end-start)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)==-1)\\n                end = mid-1;\\n            else\\n                start = mid +1;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Binary Search"
                ],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int end=n;\\n        int start=1;\\n        while(start<=end){\\n            int mid = start + (end-start)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)==-1)\\n                end = mid-1;\\n            else\\n                start = mid +1;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1916772,
                "title": "easy-100-runtime-c-sol",
                "content": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        long long int l = 1, r = n, m = 0;\\n        while(l <= r){\\n            m = (l+r)/2;\\n            if (guess(m) == 0) return m;\\n            else if(guess(m) == 1) l = m+1;\\n            else r = m-1;\\n        }\\n        return 0;\\n    }\\n};\\n```\\n*If you found this helpful, please upvote* :)\\n**Thanks!**",
                "solutionTags": [
                    "C++",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        long long int l = 1, r = n, m = 0;\\n        while(l <= r){\\n            m = (l+r)/2;\\n            if (guess(m) == 0) return m;\\n            else if(guess(m) == 1) l = m+1;\\n            else r = m-1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1902494,
                "title": "c-binary-search-simple",
                "content": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n         int low = 1;\\n        int high = n;\\n        while(low<=high)\\n        {\\n            // int mid = (low + high)>>1;\\n            int mid = low + (high - low)/2;\\n            int res = guess(mid);\\n            if(res == 0)\\n                return mid;\\n            else if(res < 0)\\n                high = mid - 1;\\n            else\\n                low = mid + 1;\\n        }\\n        return -1;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "class Solution {\\npublic:\\n    int guessNumber(int n) {\\n         int low = 1;\\n        int high = n;\\n        while(low<=high)\\n        {\\n            // int mid = (low + high)>>1;\\n            int mid = low + (high - low)/2;\\n            int res = guess(mid);\\n            if(res == 0)\\n                return mid;\\n            else if(res < 0)\\n                high = mid - 1;\\n            else\\n                low = mid + 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1901719,
                "title": "python-binary-search-faster-than-85",
                "content": "```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num: int) -> int:\\n\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        low = 1\\n        high = n\\n        while low <= high:\\n            mid = (low + high) // 2\\n            if guess(mid) == 0:\\n                return mid\\n            elif guess(mid) == 1:\\n                low = mid + 1\\n            else:\\n                high = mid - 1",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "```\\n# The guess API is already defined for you.\\n# @param num, your guess\\n# @return -1 if num is higher than the picked number\\n#          1 if num is lower than the picked number\\n#          otherwise return 0\\n# def guess(num: int) -> int:\\n\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        low = 1\\n        high = n\\n        while low <= high:\\n            mid = (low + high) // 2\\n            if guess(mid) == 0:\\n                return mid\\n            elif guess(mid) == 1:\\n                low = mid + 1\\n            else:\\n                high = mid - 1",
                "codeTag": "Java"
            },
            {
                "id": 1791134,
                "title": "guess-number-higher-or-lower-solution-java",
                "content": "/**\\n * Forward declaration of guess API.\\n * (The problem description is not clear, so I translate it into follows.)\\n *\\n * @param traget num\\n *        guess num\\n *\\n * @return -1 if guess num >  target num\\n *          0 if guess num == target num\\n *          1 if guess num <  target num\\n */\\n\\npublic class Solution extends GuessGame {\\n  public int guessNumber(int n) {\\n    int l = 1;\\n    int r = n;\\n\\n    // find the first guess num that >= target num\\n    while (l < r) {\\n      final int m = l + (r - l) / 2;\\n      if (guess(m) <= 0) // -1, 0\\n        r = m;\\n      else\\n        l = m + 1;\\n    }\\n\\n    return l;\\n  }\\n}\\n",
                "solutionTags": [
                    "Binary Search"
                ],
                "code": "class Solution extends GuessGame {\\n  public int guessNumber(int n) {\\n    int l = 1;\\n    int r = n;\\n\\n    // find the first guess num that >= target num\\n    while (l < r) {\\n      final int m = l + (r - l) / 2;\\n      if (guess(m) <= 0) // -1, 0\\n        r = m;\\n      else\\n        l = m + 1;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1755462,
                "title": "java-solution-beats-100",
                "content": "public class Solution extends GuessGame {\\n    int result;\\n    public int guessNumber(int n) { \\n      if(guess(n) == 0) return n;  \\n      checkGuess(n, 1, n);  \\n      return this.result;\\n    }\\n    public void checkGuess(int guessed, int low, int high) {\\n        int value = Math.abs((high/2)+(low/2)+((high%2)+(low%2))/2);\\n        int guess = guess(value);\\n        if(guess == 0) {\\n           this.result = value;\\n           return; \\n        }\\n        else if(guess == -1) {\\n            high = value;\\n            checkGuess(value, low, high);\\n        } else if(guess == 1) {\\n            low = value;\\n            checkGuess(value, low, high);\\n        }\\n    }\\n}",
                "solutionTags": [
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "class Solution extends GuessGame {\\n    int result;\\n    public int guessNumber(int n) { \\n      if(guess(n) == 0) return n;  \\n      checkGuess(n, 1, n);  \\n      return this.result;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1687735,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n     long long search(long f,long l)\\n    {\\n         if(l>=f) \\n          {\\n             long long mid=(l+f)/2;\\n             int ans=guess(mid);\\n             if(ans==0) return mid;\\n        \\n             if(ans==1) return search(mid+1,l);\\n      \\n            return search(f,mid-1);\\n         }\\n         return -1;   \\n            \\n    }\\n    int guessNumber(int n) {\\n        return search(0,n);\\n         \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n     long long search(long f,long l)\\n    {\\n         if(l>=f) \\n          {\\n             long long mid=(l+f)/2;\\n             int ans=guess(mid);\\n             if(ans==0) return mid;\\n        \\n             if(ans==1) return search(mid+1,l);\\n      \\n            return search(f,mid-1);\\n         }\\n         return -1;   \\n            \\n    }\\n    int guessNumber(int n) {\\n        return search(0,n);\\n         \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1687273,
                "title": "easiest-way-to-solve-this-problem-using-c",
                "content": "class Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l = 1 , h = n ; \\n        \\n        while(l <= h)\\n        {\\n            int m = l + (h-l)/2;\\n            int ans = guess(m);\\n            if(ans == 0 )\\n                return m;\\n            else if(ans == 1)\\n                l = m+1;\\n            else \\n                h= m-1;\\n        }\\n        \\n        return l;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l = 1 , h = n ; \\n        \\n        while(l <= h)\\n        {\\n            int m = l + (h-l)/2;\\n            int ans = guess(m);\\n            if(ans == 0 )\\n                return m;\\n            else if(ans == 1)\\n                l = m+1;\\n            else \\n                h= m-1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1687111,
                "title": "binary-search-just-understand-api-carefully",
                "content": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int start = 1 ;\\n        int end = n ;                     \\n        while(start<=end){\\n            int mid = start + (end-start)/2 ;  \\n            if(guess(mid)==0)return mid ;\\n            else if(guess(mid)==-1){\\n                end = mid - 1 ;   \\n            }\\n            else start = mid+1 ;   \\n        }\\n        return -1 ;\\n    }\\n    // public int guessNumber(int n) {\\n    //     int start = 1 ;\\n    //     int end = n ;                      //10\\n    //     while(start<=end){\\n    //         int mid = (start+end)/2 ;  //5\\n    //         if(guess(mid)==0)return mid ;\\n    //         else if(guess(mid)==-1){\\n    //             start = mid + 1 ;   //6\\n    //         }\\n    //         else end = mid-1 ;   //7\\n    //     }\\n    //     return -1 ;\\n    // }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int start = 1 ;\\n        int end = n ;                     \\n        while(start<=end){\\n            int mid = start + (end-start)/2 ;  \\n            if(guess(mid)==0)return mid ;\\n            else if(guess(mid)==-1){\\n                end = mid - 1 ;   \\n            }\\n            else start = mid+1 ;   \\n        }\\n        return -1 ;\\n    }\\n    // public int guessNumber(int n) {\\n    //     int start = 1 ;\\n    //     int end = n ;                      //10\\n    //     while(start<=end){\\n    //         int mid = (start+end)/2 ;  //5\\n    //         if(guess(mid)==0)return mid ;\\n    //         else if(guess(mid)==-1){\\n    //             start = mid + 1 ;   //6\\n    //         }\\n    //         else end = mid-1 ;   //7\\n    //     }\\n    //     return -1 ;\\n    // }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1653166,
                "title": "3-lines-easy-and-clean-c-solutions",
                "content": "**Recursion:**\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n){\\n        if(guess(n)==-1)n-=2;\\n        else if(guess(n)==1)n++;\\n        else return n;\\n        return guessNumber(n);\\n    }\\n};\\n```\\n**If you like this solutions please upvote for me \\nany doubt---> comment\\nThank you.**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n){\\n        if(guess(n)==-1)n-=2;\\n        else if(guess(n)==1)n++;\\n        else return n;\\n        return guessNumber(n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1518387,
                "title": "c-faster-than-100-binary-search",
                "content": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int low = 1, high = n;\\n        while(low <= high) {\\n            int mid = low + (high - low) / 2;\\n            int res = guess(mid);\\n            if(res < 0) {\\n                high = mid - 1;\\n            } else if(res > 0) {\\n                low = mid + 1;\\n            } else {\\n                return mid;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int low = 1, high = n;\\n        while(low <= high) {\\n            int mid = low + (high - low) / 2;\\n            int res = guess(mid);\\n            if(res < 0) {\\n                high = mid - 1;\\n            } else if(res > 0) {\\n                low = mid + 1;\\n            } else {\\n                return mid;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1518096,
                "title": "java-binary-search",
                "content": "\\t/** \\n\\t * Forward declaration of guess API.\\n\\t * @param  num   your guess\\n\\t * @return \\t     -1 if num is lower than the guess number\\n\\t *\\t\\t\\t      1 if num is higher than the guess number\\n\\t *               otherwise return 0\\n\\t * int guess(int num);\\n\\t */\\n\\n\\tpublic class Solution extends GuessGame {\\n\\t\\tpublic int guessNumber(int n) {\\n\\t\\t\\tint left = 0;\\n\\t\\t\\tint right = n;\\n\\t\\t\\twhile (left <= right) {\\n\\t\\t\\t\\tint c = right - ((right - left) >> 1); // we would never get overflow\\n\\t\\t\\t\\tint val = guess(c);\\n\\t\\t\\t\\tif (0 == val) return c;\\n\\t\\t\\t\\tif (1 == val) left = c + 1;\\n\\t\\t\\t\\telse right = c - 1;\\n\\t\\t\\t}\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "class Solution extends GuessGame {\\n\\t\\tpublic int guessNumber(int n) {\\n\\t\\t\\tint left = 0;\\n\\t\\t\\tint right = n;\\n\\t\\t\\twhile (left <= right) {\\n\\t\\t\\t\\tint c = right - ((right - left) >> 1); // we would never get overflow\\n\\t\\t\\t\\tint val = guess(c);\\n\\t\\t\\t\\tif (0 == val) return c;\\n\\t\\t\\t\\tif (1 == val) left = c + 1;\\n\\t\\t\\t\\telse right = c - 1;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1517617,
                "title": "c-simple-binary-search-faster-than-100",
                "content": "We do a simple binary search.\\nFirst we create two variables:-\\n- high\\n- low\\n\\nThen do a simple binary search, where we calculate the middle element of our range from high to low. And then we pass this middle to the guess API which is pre-implemented in the code. Then there are three possibilities:\\n\\n**1st Possibility:** guess(mid)==0\\nThis is the case when our mid is the choosen number. So, we directly return the mid.\\n\\n**2nd Possibility:** guess(mid)<0\\nThis is the case when our mid is greater than the choosen number. So, we change our high to mid-1.\\n\\n**3rd Possibility:** guess(mid)>0\\nThis is the case when our mid is smaller than the choosen number. So, we change our low to mid+1.\\n\\n```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int high=n, low=1;\\n        while(low<=high){\\n            int mid= low+(high-low)/2;\\n            if(guess(mid)==0){\\n                return mid;\\n            }\\n            else if(guess(mid)<0){\\n                high= mid-1;\\n            }\\n            else{\\n                low= mid+1;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int high=n, low=1;\\n        while(low<=high){\\n            int mid= low+(high-low)/2;\\n            if(guess(mid)==0){\\n                return mid;\\n            }\\n            else if(guess(mid)<0){\\n                high= mid-1;\\n            }\\n            else{\\n                low= mid+1;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1517505,
                "title": "c-binary-search-100-faster",
                "content": "```\\nclass Solution\\n{\\npublic:\\n    int guessNumber(int n)\\n    {\\n        int low = 1;\\n        int high = n;\\n        while (low <= high)\\n        {\\n            int mid = (high - low) / 2 + low;\\n            int gus = guess(mid);\\n            if (gus == 0)\\n            {\\n                return mid;\\n            }\\n            else if (gus == 1)\\n            {\\n                low = mid + 1;\\n            }\\n            else\\n            {\\n                high = mid - 1;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int guessNumber(int n)\\n    {\\n        int low = 1;\\n        int high = n;\\n        while (low <= high)\\n        {\\n            int mid = (high - low) / 2 + low;\\n            int gus = guess(mid);\\n            if (gus == 0)\\n            {\\n                return mid;\\n            }\\n            else if (gus == 1)\\n            {\\n                low = mid + 1;\\n            }\\n            else\\n            {\\n                high = mid - 1;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1517117,
                "title": "easy-java-solution-0ms-binary-search",
                "content": "```\\n// Space Complexity: O(1)\\n// Time Complexity: O(log(n))\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int left = 1, right = n;\\n        while(left <= right) {\\n            int mid = left + (right - left) / 2;\\n            int guess = guess(mid);\\n            if(guess == 0) return mid;\\n            else if(guess == -1) right = mid - 1;\\n            else left = mid + 1;\\n        }\\n        \\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\n// Space Complexity: O(1)\\n// Time Complexity: O(log(n))\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int left = 1, right = n;\\n        while(left <= right) {\\n            int mid = left + (right - left) / 2;\\n            int guess = guess(mid);\\n            if(guess == 0) return mid;\\n            else if(guess == -1) right = mid - 1;\\n            else left = mid + 1;\\n        }\\n        \\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1481984,
                "title": "unreadable-solution-in-rust",
                "content": "```\\nunsafe fn guessNumber(n: i32) -> i32 {\\n    let (mut v, c) = ([1, 0, n], |[l, _, r]: [_; 3]| (r - l >> 1) + l);\\n    while v[1] == 0 { v[(1 - guess(c(v))) as usize] = c(v) + guess(c(v)); }\\n    v[1]\\n}\\n```\\nim sorry",
                "solutionTags": [],
                "code": "```\\nunsafe fn guessNumber(n: i32) -> i32 {\\n    let (mut v, c) = ([1, 0, n], |[l, _, r]: [_; 3]| (r - l >> 1) + l);\\n    while v[1] == 0 { v[(1 - guess(c(v))) as usize] = c(v) + guess(c(v)); }\\n    v[1]\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1259722,
                "title": "python3-olution-memory-99-87",
                "content": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l, h = 1, n+1\\n        while True:\\n            m = int((l+h)/2)\\n            if guess(m) == 0:\\n                return m\\n            elif guess(m) == -1:\\n                h = m\\n            else:\\n                l = m\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l, h = 1, n+1\\n        while True:\\n            m = int((l+h)/2)\\n            if guess(m) == 0:\\n                return m\\n            elif guess(m) == -1:\\n                h = m\\n            else:\\n                l = m\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1241261,
                "title": "python3-simple-solution-using-binary-search",
                "content": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l,h = 1,n\\n        mid = (l + h)//2\\n        while True:\\n            if guess(mid) < 0:\\n                h = mid-1\\n                mid = (l + h)//2\\n            elif guess(mid) > 0:\\n                l = mid+1\\n                mid = (l + h)//2\\n            else:\\n                return mid\\n```\\n**If you like this solution, please upvote for this**",
                "solutionTags": [
                    "Python3",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l,h = 1,n\\n        mid = (l + h)//2\\n        while True:\\n            if guess(mid) < 0:\\n                h = mid-1\\n                mid = (l + h)//2\\n            elif guess(mid) > 0:\\n                l = mid+1\\n                mid = (l + h)//2\\n            else:\\n                return mid\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1184931,
                "title": "c-binary-search-easy-approach-100-faster-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l = 1;\\n        int r = n;\\n        while (l < r) {\\n            int num = l + (r-l)/2;\\n            if (guess(num) == 0) return num;\\n            if (guess(num) == 1) {\\n                l = num + 1;\\n            } else {\\n                r = num - 1;\\n            }\\n        }\\n        \\n        return l;\\n    }\\n};\\n```\\nTime: O(logn)\\nSpace: O(1)",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l = 1;\\n        int r = n;\\n        while (l < r) {\\n            int num = l + (r-l)/2;\\n            if (guess(num) == 0) return num;\\n            if (guess(num) == 1) {\\n                l = num + 1;\\n            } else {\\n                r = num - 1;\\n            }\\n        }\\n        \\n        return l;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1092080,
                "title": "simple-c-solution-using-binary-search-100-fast",
                "content": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l=1;\\n        int r=n;\\n        int mid;\\n        while(r>=l)\\n        {\\n            mid=l+(r-l)/2;\\n            if(guess(mid)==-1)\\n                r=mid-1;\\n            if(guess(mid)==1)\\n                l=mid+1;\\n            if(guess(mid)==0)\\n                break;\\n        }\\n        return mid;\\n    }\\n};\\n```\\nPlease consider upvoting.",
                "solutionTags": [],
                "code": "```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is lower than the guess number\\n *\\t\\t\\t      1 if num is higher than the guess number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\nclass Solution {\\npublic:\\n    int guessNumber(int n) {\\n        int l=1;\\n        int r=n;\\n        int mid;\\n        while(r>=l)\\n        {\\n            mid=l+(r-l)/2;\\n            if(guess(mid)==-1)\\n                r=mid-1;\\n            if(guess(mid)==1)\\n                l=mid+1;\\n            if(guess(mid)==0)\\n                break;\\n        }\\n        return mid;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1077988,
                "title": "easy-python-o-logn-solution",
                "content": "\\n        l=1\\n        r=n\\n        while l<=r:\\n            mid=(l+r)//2 \\n            if guess(mid)==-1:\\n                r=mid-1\\n            elif  guess(mid)==1:\\n                l=mid+1\\n            else:\\n                return mid",
                "solutionTags": [],
                "code": "\\n        l=1\\n        r=n\\n        while l<=r:\\n            mid=(l+r)//2 \\n            if guess(mid)==-1:\\n                r=mid-1\\n            elif  guess(mid)==1:\\n                l=mid+1\\n            else:\\n                return mid",
                "codeTag": "Unknown"
            },
            {
                "id": 860449,
                "title": "python-binary-search-clean-easy",
                "content": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l, r = 0, n\\n        while l <= r:\\n            m = (l + r)//2\\n            if guess(m) == 0: return m\\n            elif guess(m) == -1:\\n                r = m - 1\\n            else:\\n                l = m + 1\\n        return l\\n```",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def guessNumber(self, n: int) -> int:\\n        l, r = 0, n\\n        while l <= r:\\n            m = (l + r)//2\\n            if guess(m) == 0: return m\\n            elif guess(m) == -1:\\n                r = m - 1\\n            else:\\n                l = m + 1\\n        return l\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1686138,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1564585,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1686003,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1685699,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1976455,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1571646,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1686052,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1574842,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1809409,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1639664,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1686138,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1564585,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1686003,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1685699,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1976455,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1571646,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1686052,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1574842,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1809409,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1639664,
                "content": [
                    {
                        "username": "Mridulcse",
                        "content": " i did not understand the question properly,can any one help to understand this question?\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The question asks you to find the value of a number x. But the only information you have is 1 <= x <= n, and you can choose a parameter y yourself, and call another function guess(y), and get told whether x > y,  x < y or x == y."
                    },
                    {
                        "username": "Nakanu",
                        "content": "-1 : My number is lower\\n 1 : My number is higher\\n 0 : Congrats! You got it!\\n\\nHere \"My\" means the number which is given for you to guess not the number you put into      **guess(int num).**"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "I believer the phrasing of the problem description could be better. It feels exactly the opposite of what the problem intends actually."
                    },
                    {
                        "username": "alpharomeo99",
                        "content": "In case its confusing, as it was for me intially :-\\n\\nYou are given a function ```guessNumber()``` that you are to complete. Given  a upper bound ```n``` this function should guess the correct number picked between ```1``` and ```n```.\\n\\nTo help you with the guessing you are provided with an API ```guess()```. You pass in the value that you have <i>guessed</i> and this function will return 3 values depending upon whether the guess is right or wrong :\\n```-1``` if the number guessed is higher than the picked number\\n```1``` if the number guessed is lower than the picked number\\notherwise return ```0``` when the number guessed  is equal to picked number.\\n\\nBased upon this you\\'re to formulate  a strategy so that you can zero in on the picked number.\\n\\nHappy leetcoding :)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nHint :- try binary search maybe?"
                    },
                    {
                        "username": "kanbme",
                        "content": "Thank you. In the way they described it, the question is harder to understand that it is to solve it."
                    },
                    {
                        "username": "skatkar",
                        "content": "Thanks for explaining it nicely."
                    },
                    {
                        "username": "sopheary",
                        "content": "This question is difficult to understand than solving. \\uD83D\\uDE02"
                    },
                    {
                        "username": "martian0x80",
                        "content": "fr\\n"
                    },
                    {
                        "username": "jichmi",
                        "content": "It must be said , there is a trap in the question. A description used is difficult to understand. It said: <h6>'return -1 if my number is lower, 1 if my number is higher, otherwise return 0'</h6>\\nAt frist ,I thought it means if the target num is 10 ,guess(3) would return -1 \\uff0cbut it got wrong result ,then I found it return 1 actually.<br/>So the description is said by the dealer ,we are players.<br/><del>It almost  wasted half of this night.I hope I can help somebody to save a little time</del>"
                    },
                    {
                        "username": "zouzax",
                        "content": "thank you for this - I had made the same mistake."
                    },
                    {
                        "username": "gnaaruag",
                        "content": "[@vdas53073](/vdas53073) it happens mate, when you skim read the question you miss some intricacies"
                    },
                    {
                        "username": "vdas53073",
                        "content": "It is already written clearly in bracket if (num < pick) then 1 and pick here means the number he choosed which is mentioned in the que itself."
                    },
                    {
                        "username": "Be__Happy",
                        "content": "I was calling `guessNumber` intead of `guess` function so please do not repeate same mistake again "
                    },
                    {
                        "username": "hengzhou",
                        "content": "Any body feel the guess() function logic is reversed?"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Yes. Took me a while to understand that \"my\" means Leetcode\\'s guess \\uD83D\\uDE05"
                    },
                    {
                        "username": "underdogsourav",
                        "content": "i tried to understand the question again and again but feels like something is missing , plss help me to understand the question\\n"
                    },
                    {
                        "username": "paraswaghela777",
                        "content": "u have to search target number by using Given Function which return ur guess is exact higher or lower than ans\\n"
                    },
                    {
                        "username": "akashthemosh",
                        "content": "I realized I was using unnecessary space O(n) by creating a list for the number when all I had to do was return the mid which is calculated from the binary search, since the index on the list is same as mid."
                    },
                    {
                        "username": "coreyshort",
                        "content": "Thanks. Believe I am doing something similar to get memory exceeded when submitting code"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1686406,
                "content": [
                    {
                        "username": "riyan372828",
                        "content": "\\n**Watch this video for the better explanation of the code.**\\nhttps://www.youtube.com/watch?v=mrarZFTe4BE\\n\\n\\n\\n\\nAlso you can SUBSCRIBE \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.\\n\\n\\n\\n\\n\\n\\n\\nhttps://t.me/dsacoder \\u2B05\\u2B05 Telegram link to discuss leetcode daily questions and other dsa problems\\n**If you find my solution helpful please upvote it.**"
                    },
                    {
                        "username": "L1999N",
                        "content": "why isn\\'t this working for n = 2147483647\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1;\\n        int r = n + 1;\\n        while(l < r){\\n            int mid = l + (r - l) / 2 ;\\n            int result = guess(mid);\\n            if (result == 0){\\n                return mid;\\n            }\\n            else if (result == -1){\\n                r = mid;\\n            }\\n            else if (result == 1){\\n                l = mid + 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}"
                    },
                    {
                        "username": "muskan23",
                        "content": "2 mistakes\\nwhile(l<h) //while(l<=h)\\n.\\n.\\nh=mid //h=mid-1"
                    },
                    {
                        "username": "stridemann",
                        "content": "I\\'m getting time limit exceeded on 2126753390 using binary search, wtf.\\n\\npublic int GuessNumber(int n)\\n{\\n    var left = 1;\\n    var right = n;\\n    while (left <= right)\\n    {\\n        var middle = (left + right) / 2;\\n        var num = guess(middle);\\n        if (num > 0)\\n            left = middle + 1;\\n        else if (num < 0)\\n            right = middle - 1;\\n        else\\n            return middle;\\n    }\\n    return left;\\n}"
                    },
                    {
                        "username": "ShrivastavVinit",
                        "content": "\\n first mistake\\nelse if (result == -1){\\nr = mid;        // r==mid-1;  \\n\\nsecond mistake\\nreturn -1;   //return l;\\n\\nhope this works"
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "what the hell is this question...\\n"
                    },
                    {
                        "username": "NatureSage",
                        "content": "Exactly"
                    },
                    {
                        "username": "zhangyan985211",
                        "content": "use `mid = (h + l ) >>> 1` `mid = (l+h)/2`"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem in binary search approach?\\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \\nys .\\n\\nTo be more clear \\'>>>\\' (called unsigned right shift operator in java) in java is used to right shifting for +ve integers & \\'>>\\'(called signed right shift operator in java) used to right shifting -ve integers to preserve sign.\\n\\n\\'>>\\' in c++ is used for right shifting for +ve integers. \\ni think it cannot be used with -ve number (limited knowlege in c++) \\n\\n"
                    },
                    {
                        "username": "sandeeprawat4",
                        "content": "[@spell_bound](/spell_bound) That\\'s right"
                    },
                    {
                        "username": "spell_bound",
                        "content": "[@jithinbp](/jithinbp)  I think this('>>>') called right shift operator .\nin C++ we can use it like '>>'  \nam i right?\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \nWays to reduce overflow when using  mid = (start + end) / 2\noverflow occurs if start and end are of higher values that can be stored as integer.\n1:\n \">>>\" is shifting operator (performs in bit) it essentially divides the left part of the operator with power of 2, the power is determined by the right part of the operator.\n\neg;\n5 >>> 1 means  5 / (2^1)  ie, 5/2\n6 >>> 3  means 6 /(2 ^ 3) ie, 6/8\n\nThis operation is performed bitwise.\n2:\n\nmid = start + (end - start) / 2;\n\n(end - start) reduces the size of the value and we divide it by 2\nso we are adding a smaller value to start.\ninstead a big size end directly added with a big size start.\n\nin this way we can avoid overflow.\n\nHope this helps 😊"
                    },
                    {
                        "username": "spell_bound",
                        "content": "can you explain it"
                    },
                    {
                        "username": "rahuldoc98",
                        "content": "My approach is correct in that I am searching half the space by rejecting the other half, but doing it recursively. Not sure why the compiler is giving a time limit exceeded error."
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "Here every time we call a api guess and inside guess we pass mid value every time."
                    },
                    {
                        "username": "i_am_guts",
                        "content": "yes, thanks for the idea, it actually worked"
                    },
                    {
                        "username": "_aavash_",
                        "content": "Misleading problem statement. Needs to be fixed asap!"
                    },
                    {
                        "username": "kaushalkishoresharma07",
                        "content": "THE general mistake of this question is to use mid formula correctly .\\nmid =left+(right-left)/2;\\nThank you . and have a wonderfull coding journey."
                    },
                    {
                        "username": "mylo_ms",
                        "content": "it seems so. Could you explain to me why (l+r)/ 2 returns TLE though the vales are equal? Thanks!!"
                    },
                    {
                        "username": "Aldino1997",
                        "content": "The problem is poor explained. "
                    },
                    {
                        "username": "rajender7",
                        "content": "This question should be marked HARD considering the phrasing of the problem description."
                    }
                ]
            },
            {
                "id": 1865105,
                "content": [
                    {
                        "username": "riyan372828",
                        "content": "\\n**Watch this video for the better explanation of the code.**\\nhttps://www.youtube.com/watch?v=mrarZFTe4BE\\n\\n\\n\\n\\nAlso you can SUBSCRIBE \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.\\n\\n\\n\\n\\n\\n\\n\\nhttps://t.me/dsacoder \\u2B05\\u2B05 Telegram link to discuss leetcode daily questions and other dsa problems\\n**If you find my solution helpful please upvote it.**"
                    },
                    {
                        "username": "L1999N",
                        "content": "why isn\\'t this working for n = 2147483647\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1;\\n        int r = n + 1;\\n        while(l < r){\\n            int mid = l + (r - l) / 2 ;\\n            int result = guess(mid);\\n            if (result == 0){\\n                return mid;\\n            }\\n            else if (result == -1){\\n                r = mid;\\n            }\\n            else if (result == 1){\\n                l = mid + 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}"
                    },
                    {
                        "username": "muskan23",
                        "content": "2 mistakes\\nwhile(l<h) //while(l<=h)\\n.\\n.\\nh=mid //h=mid-1"
                    },
                    {
                        "username": "stridemann",
                        "content": "I\\'m getting time limit exceeded on 2126753390 using binary search, wtf.\\n\\npublic int GuessNumber(int n)\\n{\\n    var left = 1;\\n    var right = n;\\n    while (left <= right)\\n    {\\n        var middle = (left + right) / 2;\\n        var num = guess(middle);\\n        if (num > 0)\\n            left = middle + 1;\\n        else if (num < 0)\\n            right = middle - 1;\\n        else\\n            return middle;\\n    }\\n    return left;\\n}"
                    },
                    {
                        "username": "ShrivastavVinit",
                        "content": "\\n first mistake\\nelse if (result == -1){\\nr = mid;        // r==mid-1;  \\n\\nsecond mistake\\nreturn -1;   //return l;\\n\\nhope this works"
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "what the hell is this question...\\n"
                    },
                    {
                        "username": "NatureSage",
                        "content": "Exactly"
                    },
                    {
                        "username": "zhangyan985211",
                        "content": "use `mid = (h + l ) >>> 1` `mid = (l+h)/2`"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem in binary search approach?\\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \\nys .\\n\\nTo be more clear \\'>>>\\' (called unsigned right shift operator in java) in java is used to right shifting for +ve integers & \\'>>\\'(called signed right shift operator in java) used to right shifting -ve integers to preserve sign.\\n\\n\\'>>\\' in c++ is used for right shifting for +ve integers. \\ni think it cannot be used with -ve number (limited knowlege in c++) \\n\\n"
                    },
                    {
                        "username": "sandeeprawat4",
                        "content": "[@spell_bound](/spell_bound) That\\'s right"
                    },
                    {
                        "username": "spell_bound",
                        "content": "[@jithinbp](/jithinbp)  I think this('>>>') called right shift operator .\nin C++ we can use it like '>>'  \nam i right?\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \nWays to reduce overflow when using  mid = (start + end) / 2\noverflow occurs if start and end are of higher values that can be stored as integer.\n1:\n \">>>\" is shifting operator (performs in bit) it essentially divides the left part of the operator with power of 2, the power is determined by the right part of the operator.\n\neg;\n5 >>> 1 means  5 / (2^1)  ie, 5/2\n6 >>> 3  means 6 /(2 ^ 3) ie, 6/8\n\nThis operation is performed bitwise.\n2:\n\nmid = start + (end - start) / 2;\n\n(end - start) reduces the size of the value and we divide it by 2\nso we are adding a smaller value to start.\ninstead a big size end directly added with a big size start.\n\nin this way we can avoid overflow.\n\nHope this helps 😊"
                    },
                    {
                        "username": "spell_bound",
                        "content": "can you explain it"
                    },
                    {
                        "username": "rahuldoc98",
                        "content": "My approach is correct in that I am searching half the space by rejecting the other half, but doing it recursively. Not sure why the compiler is giving a time limit exceeded error."
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "Here every time we call a api guess and inside guess we pass mid value every time."
                    },
                    {
                        "username": "i_am_guts",
                        "content": "yes, thanks for the idea, it actually worked"
                    },
                    {
                        "username": "_aavash_",
                        "content": "Misleading problem statement. Needs to be fixed asap!"
                    },
                    {
                        "username": "kaushalkishoresharma07",
                        "content": "THE general mistake of this question is to use mid formula correctly .\\nmid =left+(right-left)/2;\\nThank you . and have a wonderfull coding journey."
                    },
                    {
                        "username": "mylo_ms",
                        "content": "it seems so. Could you explain to me why (l+r)/ 2 returns TLE though the vales are equal? Thanks!!"
                    },
                    {
                        "username": "Aldino1997",
                        "content": "The problem is poor explained. "
                    },
                    {
                        "username": "rajender7",
                        "content": "This question should be marked HARD considering the phrasing of the problem description."
                    }
                ]
            },
            {
                "id": 1849838,
                "content": [
                    {
                        "username": "riyan372828",
                        "content": "\\n**Watch this video for the better explanation of the code.**\\nhttps://www.youtube.com/watch?v=mrarZFTe4BE\\n\\n\\n\\n\\nAlso you can SUBSCRIBE \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.\\n\\n\\n\\n\\n\\n\\n\\nhttps://t.me/dsacoder \\u2B05\\u2B05 Telegram link to discuss leetcode daily questions and other dsa problems\\n**If you find my solution helpful please upvote it.**"
                    },
                    {
                        "username": "L1999N",
                        "content": "why isn\\'t this working for n = 2147483647\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1;\\n        int r = n + 1;\\n        while(l < r){\\n            int mid = l + (r - l) / 2 ;\\n            int result = guess(mid);\\n            if (result == 0){\\n                return mid;\\n            }\\n            else if (result == -1){\\n                r = mid;\\n            }\\n            else if (result == 1){\\n                l = mid + 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}"
                    },
                    {
                        "username": "muskan23",
                        "content": "2 mistakes\\nwhile(l<h) //while(l<=h)\\n.\\n.\\nh=mid //h=mid-1"
                    },
                    {
                        "username": "stridemann",
                        "content": "I\\'m getting time limit exceeded on 2126753390 using binary search, wtf.\\n\\npublic int GuessNumber(int n)\\n{\\n    var left = 1;\\n    var right = n;\\n    while (left <= right)\\n    {\\n        var middle = (left + right) / 2;\\n        var num = guess(middle);\\n        if (num > 0)\\n            left = middle + 1;\\n        else if (num < 0)\\n            right = middle - 1;\\n        else\\n            return middle;\\n    }\\n    return left;\\n}"
                    },
                    {
                        "username": "ShrivastavVinit",
                        "content": "\\n first mistake\\nelse if (result == -1){\\nr = mid;        // r==mid-1;  \\n\\nsecond mistake\\nreturn -1;   //return l;\\n\\nhope this works"
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "what the hell is this question...\\n"
                    },
                    {
                        "username": "NatureSage",
                        "content": "Exactly"
                    },
                    {
                        "username": "zhangyan985211",
                        "content": "use `mid = (h + l ) >>> 1` `mid = (l+h)/2`"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem in binary search approach?\\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \\nys .\\n\\nTo be more clear \\'>>>\\' (called unsigned right shift operator in java) in java is used to right shifting for +ve integers & \\'>>\\'(called signed right shift operator in java) used to right shifting -ve integers to preserve sign.\\n\\n\\'>>\\' in c++ is used for right shifting for +ve integers. \\ni think it cannot be used with -ve number (limited knowlege in c++) \\n\\n"
                    },
                    {
                        "username": "sandeeprawat4",
                        "content": "[@spell_bound](/spell_bound) That\\'s right"
                    },
                    {
                        "username": "spell_bound",
                        "content": "[@jithinbp](/jithinbp)  I think this('>>>') called right shift operator .\nin C++ we can use it like '>>'  \nam i right?\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \nWays to reduce overflow when using  mid = (start + end) / 2\noverflow occurs if start and end are of higher values that can be stored as integer.\n1:\n \">>>\" is shifting operator (performs in bit) it essentially divides the left part of the operator with power of 2, the power is determined by the right part of the operator.\n\neg;\n5 >>> 1 means  5 / (2^1)  ie, 5/2\n6 >>> 3  means 6 /(2 ^ 3) ie, 6/8\n\nThis operation is performed bitwise.\n2:\n\nmid = start + (end - start) / 2;\n\n(end - start) reduces the size of the value and we divide it by 2\nso we are adding a smaller value to start.\ninstead a big size end directly added with a big size start.\n\nin this way we can avoid overflow.\n\nHope this helps 😊"
                    },
                    {
                        "username": "spell_bound",
                        "content": "can you explain it"
                    },
                    {
                        "username": "rahuldoc98",
                        "content": "My approach is correct in that I am searching half the space by rejecting the other half, but doing it recursively. Not sure why the compiler is giving a time limit exceeded error."
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "Here every time we call a api guess and inside guess we pass mid value every time."
                    },
                    {
                        "username": "i_am_guts",
                        "content": "yes, thanks for the idea, it actually worked"
                    },
                    {
                        "username": "_aavash_",
                        "content": "Misleading problem statement. Needs to be fixed asap!"
                    },
                    {
                        "username": "kaushalkishoresharma07",
                        "content": "THE general mistake of this question is to use mid formula correctly .\\nmid =left+(right-left)/2;\\nThank you . and have a wonderfull coding journey."
                    },
                    {
                        "username": "mylo_ms",
                        "content": "it seems so. Could you explain to me why (l+r)/ 2 returns TLE though the vales are equal? Thanks!!"
                    },
                    {
                        "username": "Aldino1997",
                        "content": "The problem is poor explained. "
                    },
                    {
                        "username": "rajender7",
                        "content": "This question should be marked HARD considering the phrasing of the problem description."
                    }
                ]
            },
            {
                "id": 1571909,
                "content": [
                    {
                        "username": "riyan372828",
                        "content": "\\n**Watch this video for the better explanation of the code.**\\nhttps://www.youtube.com/watch?v=mrarZFTe4BE\\n\\n\\n\\n\\nAlso you can SUBSCRIBE \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.\\n\\n\\n\\n\\n\\n\\n\\nhttps://t.me/dsacoder \\u2B05\\u2B05 Telegram link to discuss leetcode daily questions and other dsa problems\\n**If you find my solution helpful please upvote it.**"
                    },
                    {
                        "username": "L1999N",
                        "content": "why isn\\'t this working for n = 2147483647\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1;\\n        int r = n + 1;\\n        while(l < r){\\n            int mid = l + (r - l) / 2 ;\\n            int result = guess(mid);\\n            if (result == 0){\\n                return mid;\\n            }\\n            else if (result == -1){\\n                r = mid;\\n            }\\n            else if (result == 1){\\n                l = mid + 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}"
                    },
                    {
                        "username": "muskan23",
                        "content": "2 mistakes\\nwhile(l<h) //while(l<=h)\\n.\\n.\\nh=mid //h=mid-1"
                    },
                    {
                        "username": "stridemann",
                        "content": "I\\'m getting time limit exceeded on 2126753390 using binary search, wtf.\\n\\npublic int GuessNumber(int n)\\n{\\n    var left = 1;\\n    var right = n;\\n    while (left <= right)\\n    {\\n        var middle = (left + right) / 2;\\n        var num = guess(middle);\\n        if (num > 0)\\n            left = middle + 1;\\n        else if (num < 0)\\n            right = middle - 1;\\n        else\\n            return middle;\\n    }\\n    return left;\\n}"
                    },
                    {
                        "username": "ShrivastavVinit",
                        "content": "\\n first mistake\\nelse if (result == -1){\\nr = mid;        // r==mid-1;  \\n\\nsecond mistake\\nreturn -1;   //return l;\\n\\nhope this works"
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "what the hell is this question...\\n"
                    },
                    {
                        "username": "NatureSage",
                        "content": "Exactly"
                    },
                    {
                        "username": "zhangyan985211",
                        "content": "use `mid = (h + l ) >>> 1` `mid = (l+h)/2`"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem in binary search approach?\\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \\nys .\\n\\nTo be more clear \\'>>>\\' (called unsigned right shift operator in java) in java is used to right shifting for +ve integers & \\'>>\\'(called signed right shift operator in java) used to right shifting -ve integers to preserve sign.\\n\\n\\'>>\\' in c++ is used for right shifting for +ve integers. \\ni think it cannot be used with -ve number (limited knowlege in c++) \\n\\n"
                    },
                    {
                        "username": "sandeeprawat4",
                        "content": "[@spell_bound](/spell_bound) That\\'s right"
                    },
                    {
                        "username": "spell_bound",
                        "content": "[@jithinbp](/jithinbp)  I think this('>>>') called right shift operator .\nin C++ we can use it like '>>'  \nam i right?\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \nWays to reduce overflow when using  mid = (start + end) / 2\noverflow occurs if start and end are of higher values that can be stored as integer.\n1:\n \">>>\" is shifting operator (performs in bit) it essentially divides the left part of the operator with power of 2, the power is determined by the right part of the operator.\n\neg;\n5 >>> 1 means  5 / (2^1)  ie, 5/2\n6 >>> 3  means 6 /(2 ^ 3) ie, 6/8\n\nThis operation is performed bitwise.\n2:\n\nmid = start + (end - start) / 2;\n\n(end - start) reduces the size of the value and we divide it by 2\nso we are adding a smaller value to start.\ninstead a big size end directly added with a big size start.\n\nin this way we can avoid overflow.\n\nHope this helps 😊"
                    },
                    {
                        "username": "spell_bound",
                        "content": "can you explain it"
                    },
                    {
                        "username": "rahuldoc98",
                        "content": "My approach is correct in that I am searching half the space by rejecting the other half, but doing it recursively. Not sure why the compiler is giving a time limit exceeded error."
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "Here every time we call a api guess and inside guess we pass mid value every time."
                    },
                    {
                        "username": "i_am_guts",
                        "content": "yes, thanks for the idea, it actually worked"
                    },
                    {
                        "username": "_aavash_",
                        "content": "Misleading problem statement. Needs to be fixed asap!"
                    },
                    {
                        "username": "kaushalkishoresharma07",
                        "content": "THE general mistake of this question is to use mid formula correctly .\\nmid =left+(right-left)/2;\\nThank you . and have a wonderfull coding journey."
                    },
                    {
                        "username": "mylo_ms",
                        "content": "it seems so. Could you explain to me why (l+r)/ 2 returns TLE though the vales are equal? Thanks!!"
                    },
                    {
                        "username": "Aldino1997",
                        "content": "The problem is poor explained. "
                    },
                    {
                        "username": "rajender7",
                        "content": "This question should be marked HARD considering the phrasing of the problem description."
                    }
                ]
            },
            {
                "id": 2048825,
                "content": [
                    {
                        "username": "riyan372828",
                        "content": "\\n**Watch this video for the better explanation of the code.**\\nhttps://www.youtube.com/watch?v=mrarZFTe4BE\\n\\n\\n\\n\\nAlso you can SUBSCRIBE \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.\\n\\n\\n\\n\\n\\n\\n\\nhttps://t.me/dsacoder \\u2B05\\u2B05 Telegram link to discuss leetcode daily questions and other dsa problems\\n**If you find my solution helpful please upvote it.**"
                    },
                    {
                        "username": "L1999N",
                        "content": "why isn\\'t this working for n = 2147483647\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1;\\n        int r = n + 1;\\n        while(l < r){\\n            int mid = l + (r - l) / 2 ;\\n            int result = guess(mid);\\n            if (result == 0){\\n                return mid;\\n            }\\n            else if (result == -1){\\n                r = mid;\\n            }\\n            else if (result == 1){\\n                l = mid + 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}"
                    },
                    {
                        "username": "muskan23",
                        "content": "2 mistakes\\nwhile(l<h) //while(l<=h)\\n.\\n.\\nh=mid //h=mid-1"
                    },
                    {
                        "username": "stridemann",
                        "content": "I\\'m getting time limit exceeded on 2126753390 using binary search, wtf.\\n\\npublic int GuessNumber(int n)\\n{\\n    var left = 1;\\n    var right = n;\\n    while (left <= right)\\n    {\\n        var middle = (left + right) / 2;\\n        var num = guess(middle);\\n        if (num > 0)\\n            left = middle + 1;\\n        else if (num < 0)\\n            right = middle - 1;\\n        else\\n            return middle;\\n    }\\n    return left;\\n}"
                    },
                    {
                        "username": "ShrivastavVinit",
                        "content": "\\n first mistake\\nelse if (result == -1){\\nr = mid;        // r==mid-1;  \\n\\nsecond mistake\\nreturn -1;   //return l;\\n\\nhope this works"
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "what the hell is this question...\\n"
                    },
                    {
                        "username": "NatureSage",
                        "content": "Exactly"
                    },
                    {
                        "username": "zhangyan985211",
                        "content": "use `mid = (h + l ) >>> 1` `mid = (l+h)/2`"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem in binary search approach?\\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \\nys .\\n\\nTo be more clear \\'>>>\\' (called unsigned right shift operator in java) in java is used to right shifting for +ve integers & \\'>>\\'(called signed right shift operator in java) used to right shifting -ve integers to preserve sign.\\n\\n\\'>>\\' in c++ is used for right shifting for +ve integers. \\ni think it cannot be used with -ve number (limited knowlege in c++) \\n\\n"
                    },
                    {
                        "username": "sandeeprawat4",
                        "content": "[@spell_bound](/spell_bound) That\\'s right"
                    },
                    {
                        "username": "spell_bound",
                        "content": "[@jithinbp](/jithinbp)  I think this('>>>') called right shift operator .\nin C++ we can use it like '>>'  \nam i right?\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \nWays to reduce overflow when using  mid = (start + end) / 2\noverflow occurs if start and end are of higher values that can be stored as integer.\n1:\n \">>>\" is shifting operator (performs in bit) it essentially divides the left part of the operator with power of 2, the power is determined by the right part of the operator.\n\neg;\n5 >>> 1 means  5 / (2^1)  ie, 5/2\n6 >>> 3  means 6 /(2 ^ 3) ie, 6/8\n\nThis operation is performed bitwise.\n2:\n\nmid = start + (end - start) / 2;\n\n(end - start) reduces the size of the value and we divide it by 2\nso we are adding a smaller value to start.\ninstead a big size end directly added with a big size start.\n\nin this way we can avoid overflow.\n\nHope this helps 😊"
                    },
                    {
                        "username": "spell_bound",
                        "content": "can you explain it"
                    },
                    {
                        "username": "rahuldoc98",
                        "content": "My approach is correct in that I am searching half the space by rejecting the other half, but doing it recursively. Not sure why the compiler is giving a time limit exceeded error."
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "Here every time we call a api guess and inside guess we pass mid value every time."
                    },
                    {
                        "username": "i_am_guts",
                        "content": "yes, thanks for the idea, it actually worked"
                    },
                    {
                        "username": "_aavash_",
                        "content": "Misleading problem statement. Needs to be fixed asap!"
                    },
                    {
                        "username": "kaushalkishoresharma07",
                        "content": "THE general mistake of this question is to use mid formula correctly .\\nmid =left+(right-left)/2;\\nThank you . and have a wonderfull coding journey."
                    },
                    {
                        "username": "mylo_ms",
                        "content": "it seems so. Could you explain to me why (l+r)/ 2 returns TLE though the vales are equal? Thanks!!"
                    },
                    {
                        "username": "Aldino1997",
                        "content": "The problem is poor explained. "
                    },
                    {
                        "username": "rajender7",
                        "content": "This question should be marked HARD considering the phrasing of the problem description."
                    }
                ]
            },
            {
                "id": 1983327,
                "content": [
                    {
                        "username": "riyan372828",
                        "content": "\\n**Watch this video for the better explanation of the code.**\\nhttps://www.youtube.com/watch?v=mrarZFTe4BE\\n\\n\\n\\n\\nAlso you can SUBSCRIBE \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.\\n\\n\\n\\n\\n\\n\\n\\nhttps://t.me/dsacoder \\u2B05\\u2B05 Telegram link to discuss leetcode daily questions and other dsa problems\\n**If you find my solution helpful please upvote it.**"
                    },
                    {
                        "username": "L1999N",
                        "content": "why isn\\'t this working for n = 2147483647\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1;\\n        int r = n + 1;\\n        while(l < r){\\n            int mid = l + (r - l) / 2 ;\\n            int result = guess(mid);\\n            if (result == 0){\\n                return mid;\\n            }\\n            else if (result == -1){\\n                r = mid;\\n            }\\n            else if (result == 1){\\n                l = mid + 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}"
                    },
                    {
                        "username": "muskan23",
                        "content": "2 mistakes\\nwhile(l<h) //while(l<=h)\\n.\\n.\\nh=mid //h=mid-1"
                    },
                    {
                        "username": "stridemann",
                        "content": "I\\'m getting time limit exceeded on 2126753390 using binary search, wtf.\\n\\npublic int GuessNumber(int n)\\n{\\n    var left = 1;\\n    var right = n;\\n    while (left <= right)\\n    {\\n        var middle = (left + right) / 2;\\n        var num = guess(middle);\\n        if (num > 0)\\n            left = middle + 1;\\n        else if (num < 0)\\n            right = middle - 1;\\n        else\\n            return middle;\\n    }\\n    return left;\\n}"
                    },
                    {
                        "username": "ShrivastavVinit",
                        "content": "\\n first mistake\\nelse if (result == -1){\\nr = mid;        // r==mid-1;  \\n\\nsecond mistake\\nreturn -1;   //return l;\\n\\nhope this works"
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "what the hell is this question...\\n"
                    },
                    {
                        "username": "NatureSage",
                        "content": "Exactly"
                    },
                    {
                        "username": "zhangyan985211",
                        "content": "use `mid = (h + l ) >>> 1` `mid = (l+h)/2`"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem in binary search approach?\\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \\nys .\\n\\nTo be more clear \\'>>>\\' (called unsigned right shift operator in java) in java is used to right shifting for +ve integers & \\'>>\\'(called signed right shift operator in java) used to right shifting -ve integers to preserve sign.\\n\\n\\'>>\\' in c++ is used for right shifting for +ve integers. \\ni think it cannot be used with -ve number (limited knowlege in c++) \\n\\n"
                    },
                    {
                        "username": "sandeeprawat4",
                        "content": "[@spell_bound](/spell_bound) That\\'s right"
                    },
                    {
                        "username": "spell_bound",
                        "content": "[@jithinbp](/jithinbp)  I think this('>>>') called right shift operator .\nin C++ we can use it like '>>'  \nam i right?\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \nWays to reduce overflow when using  mid = (start + end) / 2\noverflow occurs if start and end are of higher values that can be stored as integer.\n1:\n \">>>\" is shifting operator (performs in bit) it essentially divides the left part of the operator with power of 2, the power is determined by the right part of the operator.\n\neg;\n5 >>> 1 means  5 / (2^1)  ie, 5/2\n6 >>> 3  means 6 /(2 ^ 3) ie, 6/8\n\nThis operation is performed bitwise.\n2:\n\nmid = start + (end - start) / 2;\n\n(end - start) reduces the size of the value and we divide it by 2\nso we are adding a smaller value to start.\ninstead a big size end directly added with a big size start.\n\nin this way we can avoid overflow.\n\nHope this helps 😊"
                    },
                    {
                        "username": "spell_bound",
                        "content": "can you explain it"
                    },
                    {
                        "username": "rahuldoc98",
                        "content": "My approach is correct in that I am searching half the space by rejecting the other half, but doing it recursively. Not sure why the compiler is giving a time limit exceeded error."
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "Here every time we call a api guess and inside guess we pass mid value every time."
                    },
                    {
                        "username": "i_am_guts",
                        "content": "yes, thanks for the idea, it actually worked"
                    },
                    {
                        "username": "_aavash_",
                        "content": "Misleading problem statement. Needs to be fixed asap!"
                    },
                    {
                        "username": "kaushalkishoresharma07",
                        "content": "THE general mistake of this question is to use mid formula correctly .\\nmid =left+(right-left)/2;\\nThank you . and have a wonderfull coding journey."
                    },
                    {
                        "username": "mylo_ms",
                        "content": "it seems so. Could you explain to me why (l+r)/ 2 returns TLE though the vales are equal? Thanks!!"
                    },
                    {
                        "username": "Aldino1997",
                        "content": "The problem is poor explained. "
                    },
                    {
                        "username": "rajender7",
                        "content": "This question should be marked HARD considering the phrasing of the problem description."
                    }
                ]
            },
            {
                "id": 1935175,
                "content": [
                    {
                        "username": "riyan372828",
                        "content": "\\n**Watch this video for the better explanation of the code.**\\nhttps://www.youtube.com/watch?v=mrarZFTe4BE\\n\\n\\n\\n\\nAlso you can SUBSCRIBE \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.\\n\\n\\n\\n\\n\\n\\n\\nhttps://t.me/dsacoder \\u2B05\\u2B05 Telegram link to discuss leetcode daily questions and other dsa problems\\n**If you find my solution helpful please upvote it.**"
                    },
                    {
                        "username": "L1999N",
                        "content": "why isn\\'t this working for n = 2147483647\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1;\\n        int r = n + 1;\\n        while(l < r){\\n            int mid = l + (r - l) / 2 ;\\n            int result = guess(mid);\\n            if (result == 0){\\n                return mid;\\n            }\\n            else if (result == -1){\\n                r = mid;\\n            }\\n            else if (result == 1){\\n                l = mid + 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}"
                    },
                    {
                        "username": "muskan23",
                        "content": "2 mistakes\\nwhile(l<h) //while(l<=h)\\n.\\n.\\nh=mid //h=mid-1"
                    },
                    {
                        "username": "stridemann",
                        "content": "I\\'m getting time limit exceeded on 2126753390 using binary search, wtf.\\n\\npublic int GuessNumber(int n)\\n{\\n    var left = 1;\\n    var right = n;\\n    while (left <= right)\\n    {\\n        var middle = (left + right) / 2;\\n        var num = guess(middle);\\n        if (num > 0)\\n            left = middle + 1;\\n        else if (num < 0)\\n            right = middle - 1;\\n        else\\n            return middle;\\n    }\\n    return left;\\n}"
                    },
                    {
                        "username": "ShrivastavVinit",
                        "content": "\\n first mistake\\nelse if (result == -1){\\nr = mid;        // r==mid-1;  \\n\\nsecond mistake\\nreturn -1;   //return l;\\n\\nhope this works"
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "what the hell is this question...\\n"
                    },
                    {
                        "username": "NatureSage",
                        "content": "Exactly"
                    },
                    {
                        "username": "zhangyan985211",
                        "content": "use `mid = (h + l ) >>> 1` `mid = (l+h)/2`"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem in binary search approach?\\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \\nys .\\n\\nTo be more clear \\'>>>\\' (called unsigned right shift operator in java) in java is used to right shifting for +ve integers & \\'>>\\'(called signed right shift operator in java) used to right shifting -ve integers to preserve sign.\\n\\n\\'>>\\' in c++ is used for right shifting for +ve integers. \\ni think it cannot be used with -ve number (limited knowlege in c++) \\n\\n"
                    },
                    {
                        "username": "sandeeprawat4",
                        "content": "[@spell_bound](/spell_bound) That\\'s right"
                    },
                    {
                        "username": "spell_bound",
                        "content": "[@jithinbp](/jithinbp)  I think this('>>>') called right shift operator .\nin C++ we can use it like '>>'  \nam i right?\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \nWays to reduce overflow when using  mid = (start + end) / 2\noverflow occurs if start and end are of higher values that can be stored as integer.\n1:\n \">>>\" is shifting operator (performs in bit) it essentially divides the left part of the operator with power of 2, the power is determined by the right part of the operator.\n\neg;\n5 >>> 1 means  5 / (2^1)  ie, 5/2\n6 >>> 3  means 6 /(2 ^ 3) ie, 6/8\n\nThis operation is performed bitwise.\n2:\n\nmid = start + (end - start) / 2;\n\n(end - start) reduces the size of the value and we divide it by 2\nso we are adding a smaller value to start.\ninstead a big size end directly added with a big size start.\n\nin this way we can avoid overflow.\n\nHope this helps 😊"
                    },
                    {
                        "username": "spell_bound",
                        "content": "can you explain it"
                    },
                    {
                        "username": "rahuldoc98",
                        "content": "My approach is correct in that I am searching half the space by rejecting the other half, but doing it recursively. Not sure why the compiler is giving a time limit exceeded error."
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "Here every time we call a api guess and inside guess we pass mid value every time."
                    },
                    {
                        "username": "i_am_guts",
                        "content": "yes, thanks for the idea, it actually worked"
                    },
                    {
                        "username": "_aavash_",
                        "content": "Misleading problem statement. Needs to be fixed asap!"
                    },
                    {
                        "username": "kaushalkishoresharma07",
                        "content": "THE general mistake of this question is to use mid formula correctly .\\nmid =left+(right-left)/2;\\nThank you . and have a wonderfull coding journey."
                    },
                    {
                        "username": "mylo_ms",
                        "content": "it seems so. Could you explain to me why (l+r)/ 2 returns TLE though the vales are equal? Thanks!!"
                    },
                    {
                        "username": "Aldino1997",
                        "content": "The problem is poor explained. "
                    },
                    {
                        "username": "rajender7",
                        "content": "This question should be marked HARD considering the phrasing of the problem description."
                    }
                ]
            },
            {
                "id": 1827506,
                "content": [
                    {
                        "username": "riyan372828",
                        "content": "\\n**Watch this video for the better explanation of the code.**\\nhttps://www.youtube.com/watch?v=mrarZFTe4BE\\n\\n\\n\\n\\nAlso you can SUBSCRIBE \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.\\n\\n\\n\\n\\n\\n\\n\\nhttps://t.me/dsacoder \\u2B05\\u2B05 Telegram link to discuss leetcode daily questions and other dsa problems\\n**If you find my solution helpful please upvote it.**"
                    },
                    {
                        "username": "L1999N",
                        "content": "why isn\\'t this working for n = 2147483647\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1;\\n        int r = n + 1;\\n        while(l < r){\\n            int mid = l + (r - l) / 2 ;\\n            int result = guess(mid);\\n            if (result == 0){\\n                return mid;\\n            }\\n            else if (result == -1){\\n                r = mid;\\n            }\\n            else if (result == 1){\\n                l = mid + 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}"
                    },
                    {
                        "username": "muskan23",
                        "content": "2 mistakes\\nwhile(l<h) //while(l<=h)\\n.\\n.\\nh=mid //h=mid-1"
                    },
                    {
                        "username": "stridemann",
                        "content": "I\\'m getting time limit exceeded on 2126753390 using binary search, wtf.\\n\\npublic int GuessNumber(int n)\\n{\\n    var left = 1;\\n    var right = n;\\n    while (left <= right)\\n    {\\n        var middle = (left + right) / 2;\\n        var num = guess(middle);\\n        if (num > 0)\\n            left = middle + 1;\\n        else if (num < 0)\\n            right = middle - 1;\\n        else\\n            return middle;\\n    }\\n    return left;\\n}"
                    },
                    {
                        "username": "ShrivastavVinit",
                        "content": "\\n first mistake\\nelse if (result == -1){\\nr = mid;        // r==mid-1;  \\n\\nsecond mistake\\nreturn -1;   //return l;\\n\\nhope this works"
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "what the hell is this question...\\n"
                    },
                    {
                        "username": "NatureSage",
                        "content": "Exactly"
                    },
                    {
                        "username": "zhangyan985211",
                        "content": "use `mid = (h + l ) >>> 1` `mid = (l+h)/2`"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem in binary search approach?\\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \\nys .\\n\\nTo be more clear \\'>>>\\' (called unsigned right shift operator in java) in java is used to right shifting for +ve integers & \\'>>\\'(called signed right shift operator in java) used to right shifting -ve integers to preserve sign.\\n\\n\\'>>\\' in c++ is used for right shifting for +ve integers. \\ni think it cannot be used with -ve number (limited knowlege in c++) \\n\\n"
                    },
                    {
                        "username": "sandeeprawat4",
                        "content": "[@spell_bound](/spell_bound) That\\'s right"
                    },
                    {
                        "username": "spell_bound",
                        "content": "[@jithinbp](/jithinbp)  I think this('>>>') called right shift operator .\nin C++ we can use it like '>>'  \nam i right?\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \nWays to reduce overflow when using  mid = (start + end) / 2\noverflow occurs if start and end are of higher values that can be stored as integer.\n1:\n \">>>\" is shifting operator (performs in bit) it essentially divides the left part of the operator with power of 2, the power is determined by the right part of the operator.\n\neg;\n5 >>> 1 means  5 / (2^1)  ie, 5/2\n6 >>> 3  means 6 /(2 ^ 3) ie, 6/8\n\nThis operation is performed bitwise.\n2:\n\nmid = start + (end - start) / 2;\n\n(end - start) reduces the size of the value and we divide it by 2\nso we are adding a smaller value to start.\ninstead a big size end directly added with a big size start.\n\nin this way we can avoid overflow.\n\nHope this helps 😊"
                    },
                    {
                        "username": "spell_bound",
                        "content": "can you explain it"
                    },
                    {
                        "username": "rahuldoc98",
                        "content": "My approach is correct in that I am searching half the space by rejecting the other half, but doing it recursively. Not sure why the compiler is giving a time limit exceeded error."
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "Here every time we call a api guess and inside guess we pass mid value every time."
                    },
                    {
                        "username": "i_am_guts",
                        "content": "yes, thanks for the idea, it actually worked"
                    },
                    {
                        "username": "_aavash_",
                        "content": "Misleading problem statement. Needs to be fixed asap!"
                    },
                    {
                        "username": "kaushalkishoresharma07",
                        "content": "THE general mistake of this question is to use mid formula correctly .\\nmid =left+(right-left)/2;\\nThank you . and have a wonderfull coding journey."
                    },
                    {
                        "username": "mylo_ms",
                        "content": "it seems so. Could you explain to me why (l+r)/ 2 returns TLE though the vales are equal? Thanks!!"
                    },
                    {
                        "username": "Aldino1997",
                        "content": "The problem is poor explained. "
                    },
                    {
                        "username": "rajender7",
                        "content": "This question should be marked HARD considering the phrasing of the problem description."
                    }
                ]
            },
            {
                "id": 2065674,
                "content": [
                    {
                        "username": "riyan372828",
                        "content": "\\n**Watch this video for the better explanation of the code.**\\nhttps://www.youtube.com/watch?v=mrarZFTe4BE\\n\\n\\n\\n\\nAlso you can SUBSCRIBE \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.\\n\\n\\n\\n\\n\\n\\n\\nhttps://t.me/dsacoder \\u2B05\\u2B05 Telegram link to discuss leetcode daily questions and other dsa problems\\n**If you find my solution helpful please upvote it.**"
                    },
                    {
                        "username": "L1999N",
                        "content": "why isn\\'t this working for n = 2147483647\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1;\\n        int r = n + 1;\\n        while(l < r){\\n            int mid = l + (r - l) / 2 ;\\n            int result = guess(mid);\\n            if (result == 0){\\n                return mid;\\n            }\\n            else if (result == -1){\\n                r = mid;\\n            }\\n            else if (result == 1){\\n                l = mid + 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}"
                    },
                    {
                        "username": "muskan23",
                        "content": "2 mistakes\\nwhile(l<h) //while(l<=h)\\n.\\n.\\nh=mid //h=mid-1"
                    },
                    {
                        "username": "stridemann",
                        "content": "I\\'m getting time limit exceeded on 2126753390 using binary search, wtf.\\n\\npublic int GuessNumber(int n)\\n{\\n    var left = 1;\\n    var right = n;\\n    while (left <= right)\\n    {\\n        var middle = (left + right) / 2;\\n        var num = guess(middle);\\n        if (num > 0)\\n            left = middle + 1;\\n        else if (num < 0)\\n            right = middle - 1;\\n        else\\n            return middle;\\n    }\\n    return left;\\n}"
                    },
                    {
                        "username": "ShrivastavVinit",
                        "content": "\\n first mistake\\nelse if (result == -1){\\nr = mid;        // r==mid-1;  \\n\\nsecond mistake\\nreturn -1;   //return l;\\n\\nhope this works"
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "what the hell is this question...\\n"
                    },
                    {
                        "username": "NatureSage",
                        "content": "Exactly"
                    },
                    {
                        "username": "zhangyan985211",
                        "content": "use `mid = (h + l ) >>> 1` `mid = (l+h)/2`"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem in binary search approach?\\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \\nys .\\n\\nTo be more clear \\'>>>\\' (called unsigned right shift operator in java) in java is used to right shifting for +ve integers & \\'>>\\'(called signed right shift operator in java) used to right shifting -ve integers to preserve sign.\\n\\n\\'>>\\' in c++ is used for right shifting for +ve integers. \\ni think it cannot be used with -ve number (limited knowlege in c++) \\n\\n"
                    },
                    {
                        "username": "sandeeprawat4",
                        "content": "[@spell_bound](/spell_bound) That\\'s right"
                    },
                    {
                        "username": "spell_bound",
                        "content": "[@jithinbp](/jithinbp)  I think this('>>>') called right shift operator .\nin C++ we can use it like '>>'  \nam i right?\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \nWays to reduce overflow when using  mid = (start + end) / 2\noverflow occurs if start and end are of higher values that can be stored as integer.\n1:\n \">>>\" is shifting operator (performs in bit) it essentially divides the left part of the operator with power of 2, the power is determined by the right part of the operator.\n\neg;\n5 >>> 1 means  5 / (2^1)  ie, 5/2\n6 >>> 3  means 6 /(2 ^ 3) ie, 6/8\n\nThis operation is performed bitwise.\n2:\n\nmid = start + (end - start) / 2;\n\n(end - start) reduces the size of the value and we divide it by 2\nso we are adding a smaller value to start.\ninstead a big size end directly added with a big size start.\n\nin this way we can avoid overflow.\n\nHope this helps 😊"
                    },
                    {
                        "username": "spell_bound",
                        "content": "can you explain it"
                    },
                    {
                        "username": "rahuldoc98",
                        "content": "My approach is correct in that I am searching half the space by rejecting the other half, but doing it recursively. Not sure why the compiler is giving a time limit exceeded error."
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "Here every time we call a api guess and inside guess we pass mid value every time."
                    },
                    {
                        "username": "i_am_guts",
                        "content": "yes, thanks for the idea, it actually worked"
                    },
                    {
                        "username": "_aavash_",
                        "content": "Misleading problem statement. Needs to be fixed asap!"
                    },
                    {
                        "username": "kaushalkishoresharma07",
                        "content": "THE general mistake of this question is to use mid formula correctly .\\nmid =left+(right-left)/2;\\nThank you . and have a wonderfull coding journey."
                    },
                    {
                        "username": "mylo_ms",
                        "content": "it seems so. Could you explain to me why (l+r)/ 2 returns TLE though the vales are equal? Thanks!!"
                    },
                    {
                        "username": "Aldino1997",
                        "content": "The problem is poor explained. "
                    },
                    {
                        "username": "rajender7",
                        "content": "This question should be marked HARD considering the phrasing of the problem description."
                    }
                ]
            },
            {
                "id": 2058289,
                "content": [
                    {
                        "username": "riyan372828",
                        "content": "\\n**Watch this video for the better explanation of the code.**\\nhttps://www.youtube.com/watch?v=mrarZFTe4BE\\n\\n\\n\\n\\nAlso you can SUBSCRIBE \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.\\n\\n\\n\\n\\n\\n\\n\\nhttps://t.me/dsacoder \\u2B05\\u2B05 Telegram link to discuss leetcode daily questions and other dsa problems\\n**If you find my solution helpful please upvote it.**"
                    },
                    {
                        "username": "L1999N",
                        "content": "why isn\\'t this working for n = 2147483647\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int l = 1;\\n        int r = n + 1;\\n        while(l < r){\\n            int mid = l + (r - l) / 2 ;\\n            int result = guess(mid);\\n            if (result == 0){\\n                return mid;\\n            }\\n            else if (result == -1){\\n                r = mid;\\n            }\\n            else if (result == 1){\\n                l = mid + 1;\\n            }\\n        }\\n        return -1;\\n    }\\n}"
                    },
                    {
                        "username": "muskan23",
                        "content": "2 mistakes\\nwhile(l<h) //while(l<=h)\\n.\\n.\\nh=mid //h=mid-1"
                    },
                    {
                        "username": "stridemann",
                        "content": "I\\'m getting time limit exceeded on 2126753390 using binary search, wtf.\\n\\npublic int GuessNumber(int n)\\n{\\n    var left = 1;\\n    var right = n;\\n    while (left <= right)\\n    {\\n        var middle = (left + right) / 2;\\n        var num = guess(middle);\\n        if (num > 0)\\n            left = middle + 1;\\n        else if (num < 0)\\n            right = middle - 1;\\n        else\\n            return middle;\\n    }\\n    return left;\\n}"
                    },
                    {
                        "username": "ShrivastavVinit",
                        "content": "\\n first mistake\\nelse if (result == -1){\\nr = mid;        // r==mid-1;  \\n\\nsecond mistake\\nreturn -1;   //return l;\\n\\nhope this works"
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "what the hell is this question...\\n"
                    },
                    {
                        "username": "NatureSage",
                        "content": "Exactly"
                    },
                    {
                        "username": "zhangyan985211",
                        "content": "use `mid = (h + l ) >>> 1` `mid = (l+h)/2`"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem in binary search approach?\\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \\nys .\\n\\nTo be more clear \\'>>>\\' (called unsigned right shift operator in java) in java is used to right shifting for +ve integers & \\'>>\\'(called signed right shift operator in java) used to right shifting -ve integers to preserve sign.\\n\\n\\'>>\\' in c++ is used for right shifting for +ve integers. \\ni think it cannot be used with -ve number (limited knowlege in c++) \\n\\n"
                    },
                    {
                        "username": "sandeeprawat4",
                        "content": "[@spell_bound](/spell_bound) That\\'s right"
                    },
                    {
                        "username": "spell_bound",
                        "content": "[@jithinbp](/jithinbp)  I think this('>>>') called right shift operator .\nin C++ we can use it like '>>'  \nam i right?\n"
                    },
                    {
                        "username": "jithinbp",
                        "content": "[@spell_bound](/spell_bound)  \nWays to reduce overflow when using  mid = (start + end) / 2\noverflow occurs if start and end are of higher values that can be stored as integer.\n1:\n \">>>\" is shifting operator (performs in bit) it essentially divides the left part of the operator with power of 2, the power is determined by the right part of the operator.\n\neg;\n5 >>> 1 means  5 / (2^1)  ie, 5/2\n6 >>> 3  means 6 /(2 ^ 3) ie, 6/8\n\nThis operation is performed bitwise.\n2:\n\nmid = start + (end - start) / 2;\n\n(end - start) reduces the size of the value and we divide it by 2\nso we are adding a smaller value to start.\ninstead a big size end directly added with a big size start.\n\nin this way we can avoid overflow.\n\nHope this helps 😊"
                    },
                    {
                        "username": "spell_bound",
                        "content": "can you explain it"
                    },
                    {
                        "username": "rahuldoc98",
                        "content": "My approach is correct in that I am searching half the space by rejecting the other half, but doing it recursively. Not sure why the compiler is giving a time limit exceeded error."
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "Here every time we call a api guess and inside guess we pass mid value every time."
                    },
                    {
                        "username": "i_am_guts",
                        "content": "yes, thanks for the idea, it actually worked"
                    },
                    {
                        "username": "_aavash_",
                        "content": "Misleading problem statement. Needs to be fixed asap!"
                    },
                    {
                        "username": "kaushalkishoresharma07",
                        "content": "THE general mistake of this question is to use mid formula correctly .\\nmid =left+(right-left)/2;\\nThank you . and have a wonderfull coding journey."
                    },
                    {
                        "username": "mylo_ms",
                        "content": "it seems so. Could you explain to me why (l+r)/ 2 returns TLE though the vales are equal? Thanks!!"
                    },
                    {
                        "username": "Aldino1997",
                        "content": "The problem is poor explained. "
                    },
                    {
                        "username": "rajender7",
                        "content": "This question should be marked HARD considering the phrasing of the problem description."
                    }
                ]
            },
            {
                "id": 2041477,
                "content": [
                    {
                        "username": "towardsbackwards",
                        "content": "I wrote the code that implements a binary search, BUT. It NEVER can find a pick if the guess is smaller. For example: the pick number is 6, my first guess is 5 - guessNumber will return \"-1\". Same for pick number 33 and first guess in range 1-32. Has anyone else encountered this problem? I think this is not entirely normal (or am I wrong?)"
                    },
                    {
                        "username": "ercanK",
                        "content": "If `your guess` < `pick`, then the provided `guess` function (not the `guessNumber` function that we have to implement) returns 1. In that case, you have to increase lower bound by 1. If `your guess` > `pick`, then `guess` function returns -1 and you have decrease upper bound by 1."
                    },
                    {
                        "username": "arkasusue099",
                        "content": "The question is confusing lol"
                    },
                    {
                        "username": "shivx_444",
                        "content": "same as binary approach but in if-else condition use guess(num)==0 or -1 or 1\\n0 -> pick number found \\n1 -> pick is greater than num \\n-1 -> pick is lower than num"
                    },
                    {
                        "username": "shivansh5551",
                        "content": "As a begineer how to start solve these types of problem ? "
                    },
                    {
                        "username": "TERNION2205",
                        "content": "friend you can check out the related topics that are demanded by the problem setter to solve the problem. You can learn those topics, and then start to implement them in actual questions, from easy ones, and slowly progressing towards the hard ones."
                    },
                    {
                        "username": "SiddheshKukade",
                        "content": "# What\\'s wrong with int overflow\\n\\n```cpp\\n    int guessNumber(int n) {\\n        int s=1, end =n;\\n        // binary search\\n\\n        while(s<=end){\\n            long long  mid = (s+end)/2;\\n            int res = guess(mid);\\n            if(res == 0){ return mid;}\\n            else if (res == -1){ end = mid-1;}\\n            else{ s = mid+1;}\\n        }\\n        return 0 ;\\n\\n```"
                    },
                    {
                        "username": "ewiltshi",
                        "content": "I think you want to use `mid = s + (end - s)/2;` instead, to avoid overflow."
                    },
                    {
                        "username": "pyush98",
                        "content": "this is a really easy problem but why on earth does -1 mean that the guess is too high and +1 that the guess is too low? Rofl."
                    },
                    {
                        "username": "JaspreetKaur_leetcode",
                        "content": "Anyone want to leetcode together EST time zone. Please comment.\\nI have done 100 questions + Aditya Verma Series for some topics.\\nSo anyone interested to join?"
                    },
                    {
                        "username": "code_voyager",
                        "content": "Aditya verma series ! Ca you share link of that playlist"
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "Why isn't this working?\n`     def guessNumber(self, n: int) -> int:\n        y = n//2\n        answer = guess(y)\n        while answer != 0:\n            # guess was higher\n            if answer == -1:\n                y = y//2\n                answer = guess(y)\n            elif answer == 1:\n                y = y+(y//2)\n                answer = guess(y)\n        return y\n`"
                    },
                    {
                        "username": "sarthaksharma465",
                        "content": "Once you understand that what we\\'ll pass into guess function it is just simple binary search algorithm after that."
                    },
                    {
                        "username": "Akhilesh_132",
                        "content": "here is the solution for c++  `your inline code...your inline code...` int guessNumber(int n) {\\n        int picked_ans = 0;\\n\\n        for(int i=n;i>0;i--){\\n            int ans = guess(i);\\n            if(ans==0) {picked_ans =  i;\\n            break;\\n            }\\n        };\\n        return picked_ans;\\n    }"
                    }
                ]
            },
            {
                "id": 2022290,
                "content": [
                    {
                        "username": "towardsbackwards",
                        "content": "I wrote the code that implements a binary search, BUT. It NEVER can find a pick if the guess is smaller. For example: the pick number is 6, my first guess is 5 - guessNumber will return \"-1\". Same for pick number 33 and first guess in range 1-32. Has anyone else encountered this problem? I think this is not entirely normal (or am I wrong?)"
                    },
                    {
                        "username": "ercanK",
                        "content": "If `your guess` < `pick`, then the provided `guess` function (not the `guessNumber` function that we have to implement) returns 1. In that case, you have to increase lower bound by 1. If `your guess` > `pick`, then `guess` function returns -1 and you have decrease upper bound by 1."
                    },
                    {
                        "username": "arkasusue099",
                        "content": "The question is confusing lol"
                    },
                    {
                        "username": "shivx_444",
                        "content": "same as binary approach but in if-else condition use guess(num)==0 or -1 or 1\\n0 -> pick number found \\n1 -> pick is greater than num \\n-1 -> pick is lower than num"
                    },
                    {
                        "username": "shivansh5551",
                        "content": "As a begineer how to start solve these types of problem ? "
                    },
                    {
                        "username": "TERNION2205",
                        "content": "friend you can check out the related topics that are demanded by the problem setter to solve the problem. You can learn those topics, and then start to implement them in actual questions, from easy ones, and slowly progressing towards the hard ones."
                    },
                    {
                        "username": "SiddheshKukade",
                        "content": "# What\\'s wrong with int overflow\\n\\n```cpp\\n    int guessNumber(int n) {\\n        int s=1, end =n;\\n        // binary search\\n\\n        while(s<=end){\\n            long long  mid = (s+end)/2;\\n            int res = guess(mid);\\n            if(res == 0){ return mid;}\\n            else if (res == -1){ end = mid-1;}\\n            else{ s = mid+1;}\\n        }\\n        return 0 ;\\n\\n```"
                    },
                    {
                        "username": "ewiltshi",
                        "content": "I think you want to use `mid = s + (end - s)/2;` instead, to avoid overflow."
                    },
                    {
                        "username": "pyush98",
                        "content": "this is a really easy problem but why on earth does -1 mean that the guess is too high and +1 that the guess is too low? Rofl."
                    },
                    {
                        "username": "JaspreetKaur_leetcode",
                        "content": "Anyone want to leetcode together EST time zone. Please comment.\\nI have done 100 questions + Aditya Verma Series for some topics.\\nSo anyone interested to join?"
                    },
                    {
                        "username": "code_voyager",
                        "content": "Aditya verma series ! Ca you share link of that playlist"
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "Why isn't this working?\n`     def guessNumber(self, n: int) -> int:\n        y = n//2\n        answer = guess(y)\n        while answer != 0:\n            # guess was higher\n            if answer == -1:\n                y = y//2\n                answer = guess(y)\n            elif answer == 1:\n                y = y+(y//2)\n                answer = guess(y)\n        return y\n`"
                    },
                    {
                        "username": "sarthaksharma465",
                        "content": "Once you understand that what we\\'ll pass into guess function it is just simple binary search algorithm after that."
                    },
                    {
                        "username": "Akhilesh_132",
                        "content": "here is the solution for c++  `your inline code...your inline code...` int guessNumber(int n) {\\n        int picked_ans = 0;\\n\\n        for(int i=n;i>0;i--){\\n            int ans = guess(i);\\n            if(ans==0) {picked_ans =  i;\\n            break;\\n            }\\n        };\\n        return picked_ans;\\n    }"
                    }
                ]
            },
            {
                "id": 2015692,
                "content": [
                    {
                        "username": "towardsbackwards",
                        "content": "I wrote the code that implements a binary search, BUT. It NEVER can find a pick if the guess is smaller. For example: the pick number is 6, my first guess is 5 - guessNumber will return \"-1\". Same for pick number 33 and first guess in range 1-32. Has anyone else encountered this problem? I think this is not entirely normal (or am I wrong?)"
                    },
                    {
                        "username": "ercanK",
                        "content": "If `your guess` < `pick`, then the provided `guess` function (not the `guessNumber` function that we have to implement) returns 1. In that case, you have to increase lower bound by 1. If `your guess` > `pick`, then `guess` function returns -1 and you have decrease upper bound by 1."
                    },
                    {
                        "username": "arkasusue099",
                        "content": "The question is confusing lol"
                    },
                    {
                        "username": "shivx_444",
                        "content": "same as binary approach but in if-else condition use guess(num)==0 or -1 or 1\\n0 -> pick number found \\n1 -> pick is greater than num \\n-1 -> pick is lower than num"
                    },
                    {
                        "username": "shivansh5551",
                        "content": "As a begineer how to start solve these types of problem ? "
                    },
                    {
                        "username": "TERNION2205",
                        "content": "friend you can check out the related topics that are demanded by the problem setter to solve the problem. You can learn those topics, and then start to implement them in actual questions, from easy ones, and slowly progressing towards the hard ones."
                    },
                    {
                        "username": "SiddheshKukade",
                        "content": "# What\\'s wrong with int overflow\\n\\n```cpp\\n    int guessNumber(int n) {\\n        int s=1, end =n;\\n        // binary search\\n\\n        while(s<=end){\\n            long long  mid = (s+end)/2;\\n            int res = guess(mid);\\n            if(res == 0){ return mid;}\\n            else if (res == -1){ end = mid-1;}\\n            else{ s = mid+1;}\\n        }\\n        return 0 ;\\n\\n```"
                    },
                    {
                        "username": "ewiltshi",
                        "content": "I think you want to use `mid = s + (end - s)/2;` instead, to avoid overflow."
                    },
                    {
                        "username": "pyush98",
                        "content": "this is a really easy problem but why on earth does -1 mean that the guess is too high and +1 that the guess is too low? Rofl."
                    },
                    {
                        "username": "JaspreetKaur_leetcode",
                        "content": "Anyone want to leetcode together EST time zone. Please comment.\\nI have done 100 questions + Aditya Verma Series for some topics.\\nSo anyone interested to join?"
                    },
                    {
                        "username": "code_voyager",
                        "content": "Aditya verma series ! Ca you share link of that playlist"
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "Why isn't this working?\n`     def guessNumber(self, n: int) -> int:\n        y = n//2\n        answer = guess(y)\n        while answer != 0:\n            # guess was higher\n            if answer == -1:\n                y = y//2\n                answer = guess(y)\n            elif answer == 1:\n                y = y+(y//2)\n                answer = guess(y)\n        return y\n`"
                    },
                    {
                        "username": "sarthaksharma465",
                        "content": "Once you understand that what we\\'ll pass into guess function it is just simple binary search algorithm after that."
                    },
                    {
                        "username": "Akhilesh_132",
                        "content": "here is the solution for c++  `your inline code...your inline code...` int guessNumber(int n) {\\n        int picked_ans = 0;\\n\\n        for(int i=n;i>0;i--){\\n            int ans = guess(i);\\n            if(ans==0) {picked_ans =  i;\\n            break;\\n            }\\n        };\\n        return picked_ans;\\n    }"
                    }
                ]
            },
            {
                "id": 1951307,
                "content": [
                    {
                        "username": "towardsbackwards",
                        "content": "I wrote the code that implements a binary search, BUT. It NEVER can find a pick if the guess is smaller. For example: the pick number is 6, my first guess is 5 - guessNumber will return \"-1\". Same for pick number 33 and first guess in range 1-32. Has anyone else encountered this problem? I think this is not entirely normal (or am I wrong?)"
                    },
                    {
                        "username": "ercanK",
                        "content": "If `your guess` < `pick`, then the provided `guess` function (not the `guessNumber` function that we have to implement) returns 1. In that case, you have to increase lower bound by 1. If `your guess` > `pick`, then `guess` function returns -1 and you have decrease upper bound by 1."
                    },
                    {
                        "username": "arkasusue099",
                        "content": "The question is confusing lol"
                    },
                    {
                        "username": "shivx_444",
                        "content": "same as binary approach but in if-else condition use guess(num)==0 or -1 or 1\\n0 -> pick number found \\n1 -> pick is greater than num \\n-1 -> pick is lower than num"
                    },
                    {
                        "username": "shivansh5551",
                        "content": "As a begineer how to start solve these types of problem ? "
                    },
                    {
                        "username": "TERNION2205",
                        "content": "friend you can check out the related topics that are demanded by the problem setter to solve the problem. You can learn those topics, and then start to implement them in actual questions, from easy ones, and slowly progressing towards the hard ones."
                    },
                    {
                        "username": "SiddheshKukade",
                        "content": "# What\\'s wrong with int overflow\\n\\n```cpp\\n    int guessNumber(int n) {\\n        int s=1, end =n;\\n        // binary search\\n\\n        while(s<=end){\\n            long long  mid = (s+end)/2;\\n            int res = guess(mid);\\n            if(res == 0){ return mid;}\\n            else if (res == -1){ end = mid-1;}\\n            else{ s = mid+1;}\\n        }\\n        return 0 ;\\n\\n```"
                    },
                    {
                        "username": "ewiltshi",
                        "content": "I think you want to use `mid = s + (end - s)/2;` instead, to avoid overflow."
                    },
                    {
                        "username": "pyush98",
                        "content": "this is a really easy problem but why on earth does -1 mean that the guess is too high and +1 that the guess is too low? Rofl."
                    },
                    {
                        "username": "JaspreetKaur_leetcode",
                        "content": "Anyone want to leetcode together EST time zone. Please comment.\\nI have done 100 questions + Aditya Verma Series for some topics.\\nSo anyone interested to join?"
                    },
                    {
                        "username": "code_voyager",
                        "content": "Aditya verma series ! Ca you share link of that playlist"
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "Why isn't this working?\n`     def guessNumber(self, n: int) -> int:\n        y = n//2\n        answer = guess(y)\n        while answer != 0:\n            # guess was higher\n            if answer == -1:\n                y = y//2\n                answer = guess(y)\n            elif answer == 1:\n                y = y+(y//2)\n                answer = guess(y)\n        return y\n`"
                    },
                    {
                        "username": "sarthaksharma465",
                        "content": "Once you understand that what we\\'ll pass into guess function it is just simple binary search algorithm after that."
                    },
                    {
                        "username": "Akhilesh_132",
                        "content": "here is the solution for c++  `your inline code...your inline code...` int guessNumber(int n) {\\n        int picked_ans = 0;\\n\\n        for(int i=n;i>0;i--){\\n            int ans = guess(i);\\n            if(ans==0) {picked_ans =  i;\\n            break;\\n            }\\n        };\\n        return picked_ans;\\n    }"
                    }
                ]
            },
            {
                "id": 1941594,
                "content": [
                    {
                        "username": "towardsbackwards",
                        "content": "I wrote the code that implements a binary search, BUT. It NEVER can find a pick if the guess is smaller. For example: the pick number is 6, my first guess is 5 - guessNumber will return \"-1\". Same for pick number 33 and first guess in range 1-32. Has anyone else encountered this problem? I think this is not entirely normal (or am I wrong?)"
                    },
                    {
                        "username": "ercanK",
                        "content": "If `your guess` < `pick`, then the provided `guess` function (not the `guessNumber` function that we have to implement) returns 1. In that case, you have to increase lower bound by 1. If `your guess` > `pick`, then `guess` function returns -1 and you have decrease upper bound by 1."
                    },
                    {
                        "username": "arkasusue099",
                        "content": "The question is confusing lol"
                    },
                    {
                        "username": "shivx_444",
                        "content": "same as binary approach but in if-else condition use guess(num)==0 or -1 or 1\\n0 -> pick number found \\n1 -> pick is greater than num \\n-1 -> pick is lower than num"
                    },
                    {
                        "username": "shivansh5551",
                        "content": "As a begineer how to start solve these types of problem ? "
                    },
                    {
                        "username": "TERNION2205",
                        "content": "friend you can check out the related topics that are demanded by the problem setter to solve the problem. You can learn those topics, and then start to implement them in actual questions, from easy ones, and slowly progressing towards the hard ones."
                    },
                    {
                        "username": "SiddheshKukade",
                        "content": "# What\\'s wrong with int overflow\\n\\n```cpp\\n    int guessNumber(int n) {\\n        int s=1, end =n;\\n        // binary search\\n\\n        while(s<=end){\\n            long long  mid = (s+end)/2;\\n            int res = guess(mid);\\n            if(res == 0){ return mid;}\\n            else if (res == -1){ end = mid-1;}\\n            else{ s = mid+1;}\\n        }\\n        return 0 ;\\n\\n```"
                    },
                    {
                        "username": "ewiltshi",
                        "content": "I think you want to use `mid = s + (end - s)/2;` instead, to avoid overflow."
                    },
                    {
                        "username": "pyush98",
                        "content": "this is a really easy problem but why on earth does -1 mean that the guess is too high and +1 that the guess is too low? Rofl."
                    },
                    {
                        "username": "JaspreetKaur_leetcode",
                        "content": "Anyone want to leetcode together EST time zone. Please comment.\\nI have done 100 questions + Aditya Verma Series for some topics.\\nSo anyone interested to join?"
                    },
                    {
                        "username": "code_voyager",
                        "content": "Aditya verma series ! Ca you share link of that playlist"
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "Why isn't this working?\n`     def guessNumber(self, n: int) -> int:\n        y = n//2\n        answer = guess(y)\n        while answer != 0:\n            # guess was higher\n            if answer == -1:\n                y = y//2\n                answer = guess(y)\n            elif answer == 1:\n                y = y+(y//2)\n                answer = guess(y)\n        return y\n`"
                    },
                    {
                        "username": "sarthaksharma465",
                        "content": "Once you understand that what we\\'ll pass into guess function it is just simple binary search algorithm after that."
                    },
                    {
                        "username": "Akhilesh_132",
                        "content": "here is the solution for c++  `your inline code...your inline code...` int guessNumber(int n) {\\n        int picked_ans = 0;\\n\\n        for(int i=n;i>0;i--){\\n            int ans = guess(i);\\n            if(ans==0) {picked_ans =  i;\\n            break;\\n            }\\n        };\\n        return picked_ans;\\n    }"
                    }
                ]
            },
            {
                "id": 1935640,
                "content": [
                    {
                        "username": "towardsbackwards",
                        "content": "I wrote the code that implements a binary search, BUT. It NEVER can find a pick if the guess is smaller. For example: the pick number is 6, my first guess is 5 - guessNumber will return \"-1\". Same for pick number 33 and first guess in range 1-32. Has anyone else encountered this problem? I think this is not entirely normal (or am I wrong?)"
                    },
                    {
                        "username": "ercanK",
                        "content": "If `your guess` < `pick`, then the provided `guess` function (not the `guessNumber` function that we have to implement) returns 1. In that case, you have to increase lower bound by 1. If `your guess` > `pick`, then `guess` function returns -1 and you have decrease upper bound by 1."
                    },
                    {
                        "username": "arkasusue099",
                        "content": "The question is confusing lol"
                    },
                    {
                        "username": "shivx_444",
                        "content": "same as binary approach but in if-else condition use guess(num)==0 or -1 or 1\\n0 -> pick number found \\n1 -> pick is greater than num \\n-1 -> pick is lower than num"
                    },
                    {
                        "username": "shivansh5551",
                        "content": "As a begineer how to start solve these types of problem ? "
                    },
                    {
                        "username": "TERNION2205",
                        "content": "friend you can check out the related topics that are demanded by the problem setter to solve the problem. You can learn those topics, and then start to implement them in actual questions, from easy ones, and slowly progressing towards the hard ones."
                    },
                    {
                        "username": "SiddheshKukade",
                        "content": "# What\\'s wrong with int overflow\\n\\n```cpp\\n    int guessNumber(int n) {\\n        int s=1, end =n;\\n        // binary search\\n\\n        while(s<=end){\\n            long long  mid = (s+end)/2;\\n            int res = guess(mid);\\n            if(res == 0){ return mid;}\\n            else if (res == -1){ end = mid-1;}\\n            else{ s = mid+1;}\\n        }\\n        return 0 ;\\n\\n```"
                    },
                    {
                        "username": "ewiltshi",
                        "content": "I think you want to use `mid = s + (end - s)/2;` instead, to avoid overflow."
                    },
                    {
                        "username": "pyush98",
                        "content": "this is a really easy problem but why on earth does -1 mean that the guess is too high and +1 that the guess is too low? Rofl."
                    },
                    {
                        "username": "JaspreetKaur_leetcode",
                        "content": "Anyone want to leetcode together EST time zone. Please comment.\\nI have done 100 questions + Aditya Verma Series for some topics.\\nSo anyone interested to join?"
                    },
                    {
                        "username": "code_voyager",
                        "content": "Aditya verma series ! Ca you share link of that playlist"
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "Why isn't this working?\n`     def guessNumber(self, n: int) -> int:\n        y = n//2\n        answer = guess(y)\n        while answer != 0:\n            # guess was higher\n            if answer == -1:\n                y = y//2\n                answer = guess(y)\n            elif answer == 1:\n                y = y+(y//2)\n                answer = guess(y)\n        return y\n`"
                    },
                    {
                        "username": "sarthaksharma465",
                        "content": "Once you understand that what we\\'ll pass into guess function it is just simple binary search algorithm after that."
                    },
                    {
                        "username": "Akhilesh_132",
                        "content": "here is the solution for c++  `your inline code...your inline code...` int guessNumber(int n) {\\n        int picked_ans = 0;\\n\\n        for(int i=n;i>0;i--){\\n            int ans = guess(i);\\n            if(ans==0) {picked_ans =  i;\\n            break;\\n            }\\n        };\\n        return picked_ans;\\n    }"
                    }
                ]
            },
            {
                "id": 1929813,
                "content": [
                    {
                        "username": "towardsbackwards",
                        "content": "I wrote the code that implements a binary search, BUT. It NEVER can find a pick if the guess is smaller. For example: the pick number is 6, my first guess is 5 - guessNumber will return \"-1\". Same for pick number 33 and first guess in range 1-32. Has anyone else encountered this problem? I think this is not entirely normal (or am I wrong?)"
                    },
                    {
                        "username": "ercanK",
                        "content": "If `your guess` < `pick`, then the provided `guess` function (not the `guessNumber` function that we have to implement) returns 1. In that case, you have to increase lower bound by 1. If `your guess` > `pick`, then `guess` function returns -1 and you have decrease upper bound by 1."
                    },
                    {
                        "username": "arkasusue099",
                        "content": "The question is confusing lol"
                    },
                    {
                        "username": "shivx_444",
                        "content": "same as binary approach but in if-else condition use guess(num)==0 or -1 or 1\\n0 -> pick number found \\n1 -> pick is greater than num \\n-1 -> pick is lower than num"
                    },
                    {
                        "username": "shivansh5551",
                        "content": "As a begineer how to start solve these types of problem ? "
                    },
                    {
                        "username": "TERNION2205",
                        "content": "friend you can check out the related topics that are demanded by the problem setter to solve the problem. You can learn those topics, and then start to implement them in actual questions, from easy ones, and slowly progressing towards the hard ones."
                    },
                    {
                        "username": "SiddheshKukade",
                        "content": "# What\\'s wrong with int overflow\\n\\n```cpp\\n    int guessNumber(int n) {\\n        int s=1, end =n;\\n        // binary search\\n\\n        while(s<=end){\\n            long long  mid = (s+end)/2;\\n            int res = guess(mid);\\n            if(res == 0){ return mid;}\\n            else if (res == -1){ end = mid-1;}\\n            else{ s = mid+1;}\\n        }\\n        return 0 ;\\n\\n```"
                    },
                    {
                        "username": "ewiltshi",
                        "content": "I think you want to use `mid = s + (end - s)/2;` instead, to avoid overflow."
                    },
                    {
                        "username": "pyush98",
                        "content": "this is a really easy problem but why on earth does -1 mean that the guess is too high and +1 that the guess is too low? Rofl."
                    },
                    {
                        "username": "JaspreetKaur_leetcode",
                        "content": "Anyone want to leetcode together EST time zone. Please comment.\\nI have done 100 questions + Aditya Verma Series for some topics.\\nSo anyone interested to join?"
                    },
                    {
                        "username": "code_voyager",
                        "content": "Aditya verma series ! Ca you share link of that playlist"
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "Why isn't this working?\n`     def guessNumber(self, n: int) -> int:\n        y = n//2\n        answer = guess(y)\n        while answer != 0:\n            # guess was higher\n            if answer == -1:\n                y = y//2\n                answer = guess(y)\n            elif answer == 1:\n                y = y+(y//2)\n                answer = guess(y)\n        return y\n`"
                    },
                    {
                        "username": "sarthaksharma465",
                        "content": "Once you understand that what we\\'ll pass into guess function it is just simple binary search algorithm after that."
                    },
                    {
                        "username": "Akhilesh_132",
                        "content": "here is the solution for c++  `your inline code...your inline code...` int guessNumber(int n) {\\n        int picked_ans = 0;\\n\\n        for(int i=n;i>0;i--){\\n            int ans = guess(i);\\n            if(ans==0) {picked_ans =  i;\\n            break;\\n            }\\n        };\\n        return picked_ans;\\n    }"
                    }
                ]
            },
            {
                "id": 1926956,
                "content": [
                    {
                        "username": "towardsbackwards",
                        "content": "I wrote the code that implements a binary search, BUT. It NEVER can find a pick if the guess is smaller. For example: the pick number is 6, my first guess is 5 - guessNumber will return \"-1\". Same for pick number 33 and first guess in range 1-32. Has anyone else encountered this problem? I think this is not entirely normal (or am I wrong?)"
                    },
                    {
                        "username": "ercanK",
                        "content": "If `your guess` < `pick`, then the provided `guess` function (not the `guessNumber` function that we have to implement) returns 1. In that case, you have to increase lower bound by 1. If `your guess` > `pick`, then `guess` function returns -1 and you have decrease upper bound by 1."
                    },
                    {
                        "username": "arkasusue099",
                        "content": "The question is confusing lol"
                    },
                    {
                        "username": "shivx_444",
                        "content": "same as binary approach but in if-else condition use guess(num)==0 or -1 or 1\\n0 -> pick number found \\n1 -> pick is greater than num \\n-1 -> pick is lower than num"
                    },
                    {
                        "username": "shivansh5551",
                        "content": "As a begineer how to start solve these types of problem ? "
                    },
                    {
                        "username": "TERNION2205",
                        "content": "friend you can check out the related topics that are demanded by the problem setter to solve the problem. You can learn those topics, and then start to implement them in actual questions, from easy ones, and slowly progressing towards the hard ones."
                    },
                    {
                        "username": "SiddheshKukade",
                        "content": "# What\\'s wrong with int overflow\\n\\n```cpp\\n    int guessNumber(int n) {\\n        int s=1, end =n;\\n        // binary search\\n\\n        while(s<=end){\\n            long long  mid = (s+end)/2;\\n            int res = guess(mid);\\n            if(res == 0){ return mid;}\\n            else if (res == -1){ end = mid-1;}\\n            else{ s = mid+1;}\\n        }\\n        return 0 ;\\n\\n```"
                    },
                    {
                        "username": "ewiltshi",
                        "content": "I think you want to use `mid = s + (end - s)/2;` instead, to avoid overflow."
                    },
                    {
                        "username": "pyush98",
                        "content": "this is a really easy problem but why on earth does -1 mean that the guess is too high and +1 that the guess is too low? Rofl."
                    },
                    {
                        "username": "JaspreetKaur_leetcode",
                        "content": "Anyone want to leetcode together EST time zone. Please comment.\\nI have done 100 questions + Aditya Verma Series for some topics.\\nSo anyone interested to join?"
                    },
                    {
                        "username": "code_voyager",
                        "content": "Aditya verma series ! Ca you share link of that playlist"
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "Why isn't this working?\n`     def guessNumber(self, n: int) -> int:\n        y = n//2\n        answer = guess(y)\n        while answer != 0:\n            # guess was higher\n            if answer == -1:\n                y = y//2\n                answer = guess(y)\n            elif answer == 1:\n                y = y+(y//2)\n                answer = guess(y)\n        return y\n`"
                    },
                    {
                        "username": "sarthaksharma465",
                        "content": "Once you understand that what we\\'ll pass into guess function it is just simple binary search algorithm after that."
                    },
                    {
                        "username": "Akhilesh_132",
                        "content": "here is the solution for c++  `your inline code...your inline code...` int guessNumber(int n) {\\n        int picked_ans = 0;\\n\\n        for(int i=n;i>0;i--){\\n            int ans = guess(i);\\n            if(ans==0) {picked_ans =  i;\\n            break;\\n            }\\n        };\\n        return picked_ans;\\n    }"
                    }
                ]
            },
            {
                "id": 1899423,
                "content": [
                    {
                        "username": "towardsbackwards",
                        "content": "I wrote the code that implements a binary search, BUT. It NEVER can find a pick if the guess is smaller. For example: the pick number is 6, my first guess is 5 - guessNumber will return \"-1\". Same for pick number 33 and first guess in range 1-32. Has anyone else encountered this problem? I think this is not entirely normal (or am I wrong?)"
                    },
                    {
                        "username": "ercanK",
                        "content": "If `your guess` < `pick`, then the provided `guess` function (not the `guessNumber` function that we have to implement) returns 1. In that case, you have to increase lower bound by 1. If `your guess` > `pick`, then `guess` function returns -1 and you have decrease upper bound by 1."
                    },
                    {
                        "username": "arkasusue099",
                        "content": "The question is confusing lol"
                    },
                    {
                        "username": "shivx_444",
                        "content": "same as binary approach but in if-else condition use guess(num)==0 or -1 or 1\\n0 -> pick number found \\n1 -> pick is greater than num \\n-1 -> pick is lower than num"
                    },
                    {
                        "username": "shivansh5551",
                        "content": "As a begineer how to start solve these types of problem ? "
                    },
                    {
                        "username": "TERNION2205",
                        "content": "friend you can check out the related topics that are demanded by the problem setter to solve the problem. You can learn those topics, and then start to implement them in actual questions, from easy ones, and slowly progressing towards the hard ones."
                    },
                    {
                        "username": "SiddheshKukade",
                        "content": "# What\\'s wrong with int overflow\\n\\n```cpp\\n    int guessNumber(int n) {\\n        int s=1, end =n;\\n        // binary search\\n\\n        while(s<=end){\\n            long long  mid = (s+end)/2;\\n            int res = guess(mid);\\n            if(res == 0){ return mid;}\\n            else if (res == -1){ end = mid-1;}\\n            else{ s = mid+1;}\\n        }\\n        return 0 ;\\n\\n```"
                    },
                    {
                        "username": "ewiltshi",
                        "content": "I think you want to use `mid = s + (end - s)/2;` instead, to avoid overflow."
                    },
                    {
                        "username": "pyush98",
                        "content": "this is a really easy problem but why on earth does -1 mean that the guess is too high and +1 that the guess is too low? Rofl."
                    },
                    {
                        "username": "JaspreetKaur_leetcode",
                        "content": "Anyone want to leetcode together EST time zone. Please comment.\\nI have done 100 questions + Aditya Verma Series for some topics.\\nSo anyone interested to join?"
                    },
                    {
                        "username": "code_voyager",
                        "content": "Aditya verma series ! Ca you share link of that playlist"
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "Why isn't this working?\n`     def guessNumber(self, n: int) -> int:\n        y = n//2\n        answer = guess(y)\n        while answer != 0:\n            # guess was higher\n            if answer == -1:\n                y = y//2\n                answer = guess(y)\n            elif answer == 1:\n                y = y+(y//2)\n                answer = guess(y)\n        return y\n`"
                    },
                    {
                        "username": "sarthaksharma465",
                        "content": "Once you understand that what we\\'ll pass into guess function it is just simple binary search algorithm after that."
                    },
                    {
                        "username": "Akhilesh_132",
                        "content": "here is the solution for c++  `your inline code...your inline code...` int guessNumber(int n) {\\n        int picked_ans = 0;\\n\\n        for(int i=n;i>0;i--){\\n            int ans = guess(i);\\n            if(ans==0) {picked_ans =  i;\\n            break;\\n            }\\n        };\\n        return picked_ans;\\n    }"
                    }
                ]
            },
            {
                "id": 1893028,
                "content": [
                    {
                        "username": "towardsbackwards",
                        "content": "I wrote the code that implements a binary search, BUT. It NEVER can find a pick if the guess is smaller. For example: the pick number is 6, my first guess is 5 - guessNumber will return \"-1\". Same for pick number 33 and first guess in range 1-32. Has anyone else encountered this problem? I think this is not entirely normal (or am I wrong?)"
                    },
                    {
                        "username": "ercanK",
                        "content": "If `your guess` < `pick`, then the provided `guess` function (not the `guessNumber` function that we have to implement) returns 1. In that case, you have to increase lower bound by 1. If `your guess` > `pick`, then `guess` function returns -1 and you have decrease upper bound by 1."
                    },
                    {
                        "username": "arkasusue099",
                        "content": "The question is confusing lol"
                    },
                    {
                        "username": "shivx_444",
                        "content": "same as binary approach but in if-else condition use guess(num)==0 or -1 or 1\\n0 -> pick number found \\n1 -> pick is greater than num \\n-1 -> pick is lower than num"
                    },
                    {
                        "username": "shivansh5551",
                        "content": "As a begineer how to start solve these types of problem ? "
                    },
                    {
                        "username": "TERNION2205",
                        "content": "friend you can check out the related topics that are demanded by the problem setter to solve the problem. You can learn those topics, and then start to implement them in actual questions, from easy ones, and slowly progressing towards the hard ones."
                    },
                    {
                        "username": "SiddheshKukade",
                        "content": "# What\\'s wrong with int overflow\\n\\n```cpp\\n    int guessNumber(int n) {\\n        int s=1, end =n;\\n        // binary search\\n\\n        while(s<=end){\\n            long long  mid = (s+end)/2;\\n            int res = guess(mid);\\n            if(res == 0){ return mid;}\\n            else if (res == -1){ end = mid-1;}\\n            else{ s = mid+1;}\\n        }\\n        return 0 ;\\n\\n```"
                    },
                    {
                        "username": "ewiltshi",
                        "content": "I think you want to use `mid = s + (end - s)/2;` instead, to avoid overflow."
                    },
                    {
                        "username": "pyush98",
                        "content": "this is a really easy problem but why on earth does -1 mean that the guess is too high and +1 that the guess is too low? Rofl."
                    },
                    {
                        "username": "JaspreetKaur_leetcode",
                        "content": "Anyone want to leetcode together EST time zone. Please comment.\\nI have done 100 questions + Aditya Verma Series for some topics.\\nSo anyone interested to join?"
                    },
                    {
                        "username": "code_voyager",
                        "content": "Aditya verma series ! Ca you share link of that playlist"
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "Why isn't this working?\n`     def guessNumber(self, n: int) -> int:\n        y = n//2\n        answer = guess(y)\n        while answer != 0:\n            # guess was higher\n            if answer == -1:\n                y = y//2\n                answer = guess(y)\n            elif answer == 1:\n                y = y+(y//2)\n                answer = guess(y)\n        return y\n`"
                    },
                    {
                        "username": "sarthaksharma465",
                        "content": "Once you understand that what we\\'ll pass into guess function it is just simple binary search algorithm after that."
                    },
                    {
                        "username": "Akhilesh_132",
                        "content": "here is the solution for c++  `your inline code...your inline code...` int guessNumber(int n) {\\n        int picked_ans = 0;\\n\\n        for(int i=n;i>0;i--){\\n            int ans = guess(i);\\n            if(ans==0) {picked_ans =  i;\\n            break;\\n            }\\n        };\\n        return picked_ans;\\n    }"
                    }
                ]
            },
            {
                "id": 1865804,
                "content": [
                    {
                        "username": "tokeeffe9",
                        "content": "Am I right in saying the n can never be higher than pick? "
                    },
                    {
                        "username": "_dakshinraja_",
                        "content": "This is a guess game:\\n where a pre-defined function guess is already declared for us. which will guess the number for us.\\n when the function return 0 it means we\\'ve found the number,\\n when the function returns -1 it means we\\'ve guessed a value higher than the number,\\n when the function return 1 it means we\\'ve guessed a value lower than the number.\\n\\nNow using binary search we have to guess and find the number.\\n\\n"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem is in binary search concept?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "In a nutshell, you binary-search the number that I picked in the range of [1,n]. In action, let your min to be 1, and your max to be n. You begin with the midpoint (max+min)/2 rounded to the nearest integer. If the midpoint is greater than the number I picked, you know you should reduce your max to midpoint - 1, etc. This is the typical process of binary search."
                    },
                    {
                        "username": "stacksagar",
                        "content": "### Behind the scenes, guess() function:\\n \\n```\\nfunction guess(num) {\\n  let pick = 3;\\n  if (pick === num) return 0;\\n  else if (pick > num) return 1;\\n  else return -1;\\n}\\n```"
                    },
                    {
                        "username": "stacksagar",
                        "content": "Did not understand the question properly,\\nCan any one explain me shortly?"
                    },
                    {
                        "username": "le-chat",
                        "content": "Hello!\nI don't understand, why this solution doesn't work?\n\n    public int guessNumber(int n) {\n        if (n == 1)\n            return 1;\n        int pick = n / 2;\n        int sol = guess(pick);\n        int i = 3;\n        while (sol != 0) {\n            if (sol < 0)\n                pick = pick + n / i;\n            if (sol > 0)\n                pick = pick - n / i;\n            sol = guess(pick);\n            i++;\n        }\n        return pick;\n    }\n\nError: \"Time Limit Exceeded\""
                    },
                    {
                        "username": "code_voyager",
                        "content": "Simple java solution using Binary search\\npublic int guessNumber(int n) {\\n        int high=n;\\n        int low=1;\\n        while(high>=low){\\n            int mid=low+(high-low)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)<0)\\n                high=mid-1;\\n            else\\n                low=mid+1;\\n        }\\n        return -1;\\n    }"
                    },
                    {
                        "username": "Jishnu_69",
                        "content": "btw this is a google question.\n\nUnder the company tag it's showing Google."
                    },
                    {
                        "username": "qiushile",
                        "content": "error: cannot find symbol\\n            guess(mid);\\n            ^\\n  symbol:   method guess(int)\\n  location: class Solution"
                    },
                    {
                        "username": "gulfaraj18",
                        "content": "guess have a return value!"
                    },
                    {
                        "username": "fishbody0418",
                        "content": "Hello, I am new coding. Can i ask why my solution is \"Time Limit Exceeded\"? I uses binary search method.\n\nclass Solution:\n\n            \n       def guessNumber(self, n: int) -> int:\n        start = 1\n        end = n\n        while start + 1 < end:\n            mid = start + (end-start)//2\n            res = guess(mid)\n            if res<0:\n                end = mid\n            elif res>0:\n                start == mid\n        if guess(start)==0:\n            return start\n        if guess(end)==0:\n            return end"
                    }
                ]
            },
            {
                "id": 1844034,
                "content": [
                    {
                        "username": "tokeeffe9",
                        "content": "Am I right in saying the n can never be higher than pick? "
                    },
                    {
                        "username": "_dakshinraja_",
                        "content": "This is a guess game:\\n where a pre-defined function guess is already declared for us. which will guess the number for us.\\n when the function return 0 it means we\\'ve found the number,\\n when the function returns -1 it means we\\'ve guessed a value higher than the number,\\n when the function return 1 it means we\\'ve guessed a value lower than the number.\\n\\nNow using binary search we have to guess and find the number.\\n\\n"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem is in binary search concept?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "In a nutshell, you binary-search the number that I picked in the range of [1,n]. In action, let your min to be 1, and your max to be n. You begin with the midpoint (max+min)/2 rounded to the nearest integer. If the midpoint is greater than the number I picked, you know you should reduce your max to midpoint - 1, etc. This is the typical process of binary search."
                    },
                    {
                        "username": "stacksagar",
                        "content": "### Behind the scenes, guess() function:\\n \\n```\\nfunction guess(num) {\\n  let pick = 3;\\n  if (pick === num) return 0;\\n  else if (pick > num) return 1;\\n  else return -1;\\n}\\n```"
                    },
                    {
                        "username": "stacksagar",
                        "content": "Did not understand the question properly,\\nCan any one explain me shortly?"
                    },
                    {
                        "username": "le-chat",
                        "content": "Hello!\nI don't understand, why this solution doesn't work?\n\n    public int guessNumber(int n) {\n        if (n == 1)\n            return 1;\n        int pick = n / 2;\n        int sol = guess(pick);\n        int i = 3;\n        while (sol != 0) {\n            if (sol < 0)\n                pick = pick + n / i;\n            if (sol > 0)\n                pick = pick - n / i;\n            sol = guess(pick);\n            i++;\n        }\n        return pick;\n    }\n\nError: \"Time Limit Exceeded\""
                    },
                    {
                        "username": "code_voyager",
                        "content": "Simple java solution using Binary search\\npublic int guessNumber(int n) {\\n        int high=n;\\n        int low=1;\\n        while(high>=low){\\n            int mid=low+(high-low)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)<0)\\n                high=mid-1;\\n            else\\n                low=mid+1;\\n        }\\n        return -1;\\n    }"
                    },
                    {
                        "username": "Jishnu_69",
                        "content": "btw this is a google question.\n\nUnder the company tag it's showing Google."
                    },
                    {
                        "username": "qiushile",
                        "content": "error: cannot find symbol\\n            guess(mid);\\n            ^\\n  symbol:   method guess(int)\\n  location: class Solution"
                    },
                    {
                        "username": "gulfaraj18",
                        "content": "guess have a return value!"
                    },
                    {
                        "username": "fishbody0418",
                        "content": "Hello, I am new coding. Can i ask why my solution is \"Time Limit Exceeded\"? I uses binary search method.\n\nclass Solution:\n\n            \n       def guessNumber(self, n: int) -> int:\n        start = 1\n        end = n\n        while start + 1 < end:\n            mid = start + (end-start)//2\n            res = guess(mid)\n            if res<0:\n                end = mid\n            elif res>0:\n                start == mid\n        if guess(start)==0:\n            return start\n        if guess(end)==0:\n            return end"
                    }
                ]
            },
            {
                "id": 1834311,
                "content": [
                    {
                        "username": "tokeeffe9",
                        "content": "Am I right in saying the n can never be higher than pick? "
                    },
                    {
                        "username": "_dakshinraja_",
                        "content": "This is a guess game:\\n where a pre-defined function guess is already declared for us. which will guess the number for us.\\n when the function return 0 it means we\\'ve found the number,\\n when the function returns -1 it means we\\'ve guessed a value higher than the number,\\n when the function return 1 it means we\\'ve guessed a value lower than the number.\\n\\nNow using binary search we have to guess and find the number.\\n\\n"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem is in binary search concept?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "In a nutshell, you binary-search the number that I picked in the range of [1,n]. In action, let your min to be 1, and your max to be n. You begin with the midpoint (max+min)/2 rounded to the nearest integer. If the midpoint is greater than the number I picked, you know you should reduce your max to midpoint - 1, etc. This is the typical process of binary search."
                    },
                    {
                        "username": "stacksagar",
                        "content": "### Behind the scenes, guess() function:\\n \\n```\\nfunction guess(num) {\\n  let pick = 3;\\n  if (pick === num) return 0;\\n  else if (pick > num) return 1;\\n  else return -1;\\n}\\n```"
                    },
                    {
                        "username": "stacksagar",
                        "content": "Did not understand the question properly,\\nCan any one explain me shortly?"
                    },
                    {
                        "username": "le-chat",
                        "content": "Hello!\nI don't understand, why this solution doesn't work?\n\n    public int guessNumber(int n) {\n        if (n == 1)\n            return 1;\n        int pick = n / 2;\n        int sol = guess(pick);\n        int i = 3;\n        while (sol != 0) {\n            if (sol < 0)\n                pick = pick + n / i;\n            if (sol > 0)\n                pick = pick - n / i;\n            sol = guess(pick);\n            i++;\n        }\n        return pick;\n    }\n\nError: \"Time Limit Exceeded\""
                    },
                    {
                        "username": "code_voyager",
                        "content": "Simple java solution using Binary search\\npublic int guessNumber(int n) {\\n        int high=n;\\n        int low=1;\\n        while(high>=low){\\n            int mid=low+(high-low)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)<0)\\n                high=mid-1;\\n            else\\n                low=mid+1;\\n        }\\n        return -1;\\n    }"
                    },
                    {
                        "username": "Jishnu_69",
                        "content": "btw this is a google question.\n\nUnder the company tag it's showing Google."
                    },
                    {
                        "username": "qiushile",
                        "content": "error: cannot find symbol\\n            guess(mid);\\n            ^\\n  symbol:   method guess(int)\\n  location: class Solution"
                    },
                    {
                        "username": "gulfaraj18",
                        "content": "guess have a return value!"
                    },
                    {
                        "username": "fishbody0418",
                        "content": "Hello, I am new coding. Can i ask why my solution is \"Time Limit Exceeded\"? I uses binary search method.\n\nclass Solution:\n\n            \n       def guessNumber(self, n: int) -> int:\n        start = 1\n        end = n\n        while start + 1 < end:\n            mid = start + (end-start)//2\n            res = guess(mid)\n            if res<0:\n                end = mid\n            elif res>0:\n                start == mid\n        if guess(start)==0:\n            return start\n        if guess(end)==0:\n            return end"
                    }
                ]
            },
            {
                "id": 1823703,
                "content": [
                    {
                        "username": "tokeeffe9",
                        "content": "Am I right in saying the n can never be higher than pick? "
                    },
                    {
                        "username": "_dakshinraja_",
                        "content": "This is a guess game:\\n where a pre-defined function guess is already declared for us. which will guess the number for us.\\n when the function return 0 it means we\\'ve found the number,\\n when the function returns -1 it means we\\'ve guessed a value higher than the number,\\n when the function return 1 it means we\\'ve guessed a value lower than the number.\\n\\nNow using binary search we have to guess and find the number.\\n\\n"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem is in binary search concept?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "In a nutshell, you binary-search the number that I picked in the range of [1,n]. In action, let your min to be 1, and your max to be n. You begin with the midpoint (max+min)/2 rounded to the nearest integer. If the midpoint is greater than the number I picked, you know you should reduce your max to midpoint - 1, etc. This is the typical process of binary search."
                    },
                    {
                        "username": "stacksagar",
                        "content": "### Behind the scenes, guess() function:\\n \\n```\\nfunction guess(num) {\\n  let pick = 3;\\n  if (pick === num) return 0;\\n  else if (pick > num) return 1;\\n  else return -1;\\n}\\n```"
                    },
                    {
                        "username": "stacksagar",
                        "content": "Did not understand the question properly,\\nCan any one explain me shortly?"
                    },
                    {
                        "username": "le-chat",
                        "content": "Hello!\nI don't understand, why this solution doesn't work?\n\n    public int guessNumber(int n) {\n        if (n == 1)\n            return 1;\n        int pick = n / 2;\n        int sol = guess(pick);\n        int i = 3;\n        while (sol != 0) {\n            if (sol < 0)\n                pick = pick + n / i;\n            if (sol > 0)\n                pick = pick - n / i;\n            sol = guess(pick);\n            i++;\n        }\n        return pick;\n    }\n\nError: \"Time Limit Exceeded\""
                    },
                    {
                        "username": "code_voyager",
                        "content": "Simple java solution using Binary search\\npublic int guessNumber(int n) {\\n        int high=n;\\n        int low=1;\\n        while(high>=low){\\n            int mid=low+(high-low)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)<0)\\n                high=mid-1;\\n            else\\n                low=mid+1;\\n        }\\n        return -1;\\n    }"
                    },
                    {
                        "username": "Jishnu_69",
                        "content": "btw this is a google question.\n\nUnder the company tag it's showing Google."
                    },
                    {
                        "username": "qiushile",
                        "content": "error: cannot find symbol\\n            guess(mid);\\n            ^\\n  symbol:   method guess(int)\\n  location: class Solution"
                    },
                    {
                        "username": "gulfaraj18",
                        "content": "guess have a return value!"
                    },
                    {
                        "username": "fishbody0418",
                        "content": "Hello, I am new coding. Can i ask why my solution is \"Time Limit Exceeded\"? I uses binary search method.\n\nclass Solution:\n\n            \n       def guessNumber(self, n: int) -> int:\n        start = 1\n        end = n\n        while start + 1 < end:\n            mid = start + (end-start)//2\n            res = guess(mid)\n            if res<0:\n                end = mid\n            elif res>0:\n                start == mid\n        if guess(start)==0:\n            return start\n        if guess(end)==0:\n            return end"
                    }
                ]
            },
            {
                "id": 1823642,
                "content": [
                    {
                        "username": "tokeeffe9",
                        "content": "Am I right in saying the n can never be higher than pick? "
                    },
                    {
                        "username": "_dakshinraja_",
                        "content": "This is a guess game:\\n where a pre-defined function guess is already declared for us. which will guess the number for us.\\n when the function return 0 it means we\\'ve found the number,\\n when the function returns -1 it means we\\'ve guessed a value higher than the number,\\n when the function return 1 it means we\\'ve guessed a value lower than the number.\\n\\nNow using binary search we have to guess and find the number.\\n\\n"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem is in binary search concept?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "In a nutshell, you binary-search the number that I picked in the range of [1,n]. In action, let your min to be 1, and your max to be n. You begin with the midpoint (max+min)/2 rounded to the nearest integer. If the midpoint is greater than the number I picked, you know you should reduce your max to midpoint - 1, etc. This is the typical process of binary search."
                    },
                    {
                        "username": "stacksagar",
                        "content": "### Behind the scenes, guess() function:\\n \\n```\\nfunction guess(num) {\\n  let pick = 3;\\n  if (pick === num) return 0;\\n  else if (pick > num) return 1;\\n  else return -1;\\n}\\n```"
                    },
                    {
                        "username": "stacksagar",
                        "content": "Did not understand the question properly,\\nCan any one explain me shortly?"
                    },
                    {
                        "username": "le-chat",
                        "content": "Hello!\nI don't understand, why this solution doesn't work?\n\n    public int guessNumber(int n) {\n        if (n == 1)\n            return 1;\n        int pick = n / 2;\n        int sol = guess(pick);\n        int i = 3;\n        while (sol != 0) {\n            if (sol < 0)\n                pick = pick + n / i;\n            if (sol > 0)\n                pick = pick - n / i;\n            sol = guess(pick);\n            i++;\n        }\n        return pick;\n    }\n\nError: \"Time Limit Exceeded\""
                    },
                    {
                        "username": "code_voyager",
                        "content": "Simple java solution using Binary search\\npublic int guessNumber(int n) {\\n        int high=n;\\n        int low=1;\\n        while(high>=low){\\n            int mid=low+(high-low)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)<0)\\n                high=mid-1;\\n            else\\n                low=mid+1;\\n        }\\n        return -1;\\n    }"
                    },
                    {
                        "username": "Jishnu_69",
                        "content": "btw this is a google question.\n\nUnder the company tag it's showing Google."
                    },
                    {
                        "username": "qiushile",
                        "content": "error: cannot find symbol\\n            guess(mid);\\n            ^\\n  symbol:   method guess(int)\\n  location: class Solution"
                    },
                    {
                        "username": "gulfaraj18",
                        "content": "guess have a return value!"
                    },
                    {
                        "username": "fishbody0418",
                        "content": "Hello, I am new coding. Can i ask why my solution is \"Time Limit Exceeded\"? I uses binary search method.\n\nclass Solution:\n\n            \n       def guessNumber(self, n: int) -> int:\n        start = 1\n        end = n\n        while start + 1 < end:\n            mid = start + (end-start)//2\n            res = guess(mid)\n            if res<0:\n                end = mid\n            elif res>0:\n                start == mid\n        if guess(start)==0:\n            return start\n        if guess(end)==0:\n            return end"
                    }
                ]
            },
            {
                "id": 1795539,
                "content": [
                    {
                        "username": "tokeeffe9",
                        "content": "Am I right in saying the n can never be higher than pick? "
                    },
                    {
                        "username": "_dakshinraja_",
                        "content": "This is a guess game:\\n where a pre-defined function guess is already declared for us. which will guess the number for us.\\n when the function return 0 it means we\\'ve found the number,\\n when the function returns -1 it means we\\'ve guessed a value higher than the number,\\n when the function return 1 it means we\\'ve guessed a value lower than the number.\\n\\nNow using binary search we have to guess and find the number.\\n\\n"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem is in binary search concept?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "In a nutshell, you binary-search the number that I picked in the range of [1,n]. In action, let your min to be 1, and your max to be n. You begin with the midpoint (max+min)/2 rounded to the nearest integer. If the midpoint is greater than the number I picked, you know you should reduce your max to midpoint - 1, etc. This is the typical process of binary search."
                    },
                    {
                        "username": "stacksagar",
                        "content": "### Behind the scenes, guess() function:\\n \\n```\\nfunction guess(num) {\\n  let pick = 3;\\n  if (pick === num) return 0;\\n  else if (pick > num) return 1;\\n  else return -1;\\n}\\n```"
                    },
                    {
                        "username": "stacksagar",
                        "content": "Did not understand the question properly,\\nCan any one explain me shortly?"
                    },
                    {
                        "username": "le-chat",
                        "content": "Hello!\nI don't understand, why this solution doesn't work?\n\n    public int guessNumber(int n) {\n        if (n == 1)\n            return 1;\n        int pick = n / 2;\n        int sol = guess(pick);\n        int i = 3;\n        while (sol != 0) {\n            if (sol < 0)\n                pick = pick + n / i;\n            if (sol > 0)\n                pick = pick - n / i;\n            sol = guess(pick);\n            i++;\n        }\n        return pick;\n    }\n\nError: \"Time Limit Exceeded\""
                    },
                    {
                        "username": "code_voyager",
                        "content": "Simple java solution using Binary search\\npublic int guessNumber(int n) {\\n        int high=n;\\n        int low=1;\\n        while(high>=low){\\n            int mid=low+(high-low)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)<0)\\n                high=mid-1;\\n            else\\n                low=mid+1;\\n        }\\n        return -1;\\n    }"
                    },
                    {
                        "username": "Jishnu_69",
                        "content": "btw this is a google question.\n\nUnder the company tag it's showing Google."
                    },
                    {
                        "username": "qiushile",
                        "content": "error: cannot find symbol\\n            guess(mid);\\n            ^\\n  symbol:   method guess(int)\\n  location: class Solution"
                    },
                    {
                        "username": "gulfaraj18",
                        "content": "guess have a return value!"
                    },
                    {
                        "username": "fishbody0418",
                        "content": "Hello, I am new coding. Can i ask why my solution is \"Time Limit Exceeded\"? I uses binary search method.\n\nclass Solution:\n\n            \n       def guessNumber(self, n: int) -> int:\n        start = 1\n        end = n\n        while start + 1 < end:\n            mid = start + (end-start)//2\n            res = guess(mid)\n            if res<0:\n                end = mid\n            elif res>0:\n                start == mid\n        if guess(start)==0:\n            return start\n        if guess(end)==0:\n            return end"
                    }
                ]
            },
            {
                "id": 1791479,
                "content": [
                    {
                        "username": "tokeeffe9",
                        "content": "Am I right in saying the n can never be higher than pick? "
                    },
                    {
                        "username": "_dakshinraja_",
                        "content": "This is a guess game:\\n where a pre-defined function guess is already declared for us. which will guess the number for us.\\n when the function return 0 it means we\\'ve found the number,\\n when the function returns -1 it means we\\'ve guessed a value higher than the number,\\n when the function return 1 it means we\\'ve guessed a value lower than the number.\\n\\nNow using binary search we have to guess and find the number.\\n\\n"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem is in binary search concept?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "In a nutshell, you binary-search the number that I picked in the range of [1,n]. In action, let your min to be 1, and your max to be n. You begin with the midpoint (max+min)/2 rounded to the nearest integer. If the midpoint is greater than the number I picked, you know you should reduce your max to midpoint - 1, etc. This is the typical process of binary search."
                    },
                    {
                        "username": "stacksagar",
                        "content": "### Behind the scenes, guess() function:\\n \\n```\\nfunction guess(num) {\\n  let pick = 3;\\n  if (pick === num) return 0;\\n  else if (pick > num) return 1;\\n  else return -1;\\n}\\n```"
                    },
                    {
                        "username": "stacksagar",
                        "content": "Did not understand the question properly,\\nCan any one explain me shortly?"
                    },
                    {
                        "username": "le-chat",
                        "content": "Hello!\nI don't understand, why this solution doesn't work?\n\n    public int guessNumber(int n) {\n        if (n == 1)\n            return 1;\n        int pick = n / 2;\n        int sol = guess(pick);\n        int i = 3;\n        while (sol != 0) {\n            if (sol < 0)\n                pick = pick + n / i;\n            if (sol > 0)\n                pick = pick - n / i;\n            sol = guess(pick);\n            i++;\n        }\n        return pick;\n    }\n\nError: \"Time Limit Exceeded\""
                    },
                    {
                        "username": "code_voyager",
                        "content": "Simple java solution using Binary search\\npublic int guessNumber(int n) {\\n        int high=n;\\n        int low=1;\\n        while(high>=low){\\n            int mid=low+(high-low)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)<0)\\n                high=mid-1;\\n            else\\n                low=mid+1;\\n        }\\n        return -1;\\n    }"
                    },
                    {
                        "username": "Jishnu_69",
                        "content": "btw this is a google question.\n\nUnder the company tag it's showing Google."
                    },
                    {
                        "username": "qiushile",
                        "content": "error: cannot find symbol\\n            guess(mid);\\n            ^\\n  symbol:   method guess(int)\\n  location: class Solution"
                    },
                    {
                        "username": "gulfaraj18",
                        "content": "guess have a return value!"
                    },
                    {
                        "username": "fishbody0418",
                        "content": "Hello, I am new coding. Can i ask why my solution is \"Time Limit Exceeded\"? I uses binary search method.\n\nclass Solution:\n\n            \n       def guessNumber(self, n: int) -> int:\n        start = 1\n        end = n\n        while start + 1 < end:\n            mid = start + (end-start)//2\n            res = guess(mid)\n            if res<0:\n                end = mid\n            elif res>0:\n                start == mid\n        if guess(start)==0:\n            return start\n        if guess(end)==0:\n            return end"
                    }
                ]
            },
            {
                "id": 1787193,
                "content": [
                    {
                        "username": "tokeeffe9",
                        "content": "Am I right in saying the n can never be higher than pick? "
                    },
                    {
                        "username": "_dakshinraja_",
                        "content": "This is a guess game:\\n where a pre-defined function guess is already declared for us. which will guess the number for us.\\n when the function return 0 it means we\\'ve found the number,\\n when the function returns -1 it means we\\'ve guessed a value higher than the number,\\n when the function return 1 it means we\\'ve guessed a value lower than the number.\\n\\nNow using binary search we have to guess and find the number.\\n\\n"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem is in binary search concept?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "In a nutshell, you binary-search the number that I picked in the range of [1,n]. In action, let your min to be 1, and your max to be n. You begin with the midpoint (max+min)/2 rounded to the nearest integer. If the midpoint is greater than the number I picked, you know you should reduce your max to midpoint - 1, etc. This is the typical process of binary search."
                    },
                    {
                        "username": "stacksagar",
                        "content": "### Behind the scenes, guess() function:\\n \\n```\\nfunction guess(num) {\\n  let pick = 3;\\n  if (pick === num) return 0;\\n  else if (pick > num) return 1;\\n  else return -1;\\n}\\n```"
                    },
                    {
                        "username": "stacksagar",
                        "content": "Did not understand the question properly,\\nCan any one explain me shortly?"
                    },
                    {
                        "username": "le-chat",
                        "content": "Hello!\nI don't understand, why this solution doesn't work?\n\n    public int guessNumber(int n) {\n        if (n == 1)\n            return 1;\n        int pick = n / 2;\n        int sol = guess(pick);\n        int i = 3;\n        while (sol != 0) {\n            if (sol < 0)\n                pick = pick + n / i;\n            if (sol > 0)\n                pick = pick - n / i;\n            sol = guess(pick);\n            i++;\n        }\n        return pick;\n    }\n\nError: \"Time Limit Exceeded\""
                    },
                    {
                        "username": "code_voyager",
                        "content": "Simple java solution using Binary search\\npublic int guessNumber(int n) {\\n        int high=n;\\n        int low=1;\\n        while(high>=low){\\n            int mid=low+(high-low)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)<0)\\n                high=mid-1;\\n            else\\n                low=mid+1;\\n        }\\n        return -1;\\n    }"
                    },
                    {
                        "username": "Jishnu_69",
                        "content": "btw this is a google question.\n\nUnder the company tag it's showing Google."
                    },
                    {
                        "username": "qiushile",
                        "content": "error: cannot find symbol\\n            guess(mid);\\n            ^\\n  symbol:   method guess(int)\\n  location: class Solution"
                    },
                    {
                        "username": "gulfaraj18",
                        "content": "guess have a return value!"
                    },
                    {
                        "username": "fishbody0418",
                        "content": "Hello, I am new coding. Can i ask why my solution is \"Time Limit Exceeded\"? I uses binary search method.\n\nclass Solution:\n\n            \n       def guessNumber(self, n: int) -> int:\n        start = 1\n        end = n\n        while start + 1 < end:\n            mid = start + (end-start)//2\n            res = guess(mid)\n            if res<0:\n                end = mid\n            elif res>0:\n                start == mid\n        if guess(start)==0:\n            return start\n        if guess(end)==0:\n            return end"
                    }
                ]
            },
            {
                "id": 1775449,
                "content": [
                    {
                        "username": "tokeeffe9",
                        "content": "Am I right in saying the n can never be higher than pick? "
                    },
                    {
                        "username": "_dakshinraja_",
                        "content": "This is a guess game:\\n where a pre-defined function guess is already declared for us. which will guess the number for us.\\n when the function return 0 it means we\\'ve found the number,\\n when the function returns -1 it means we\\'ve guessed a value higher than the number,\\n when the function return 1 it means we\\'ve guessed a value lower than the number.\\n\\nNow using binary search we have to guess and find the number.\\n\\n"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem is in binary search concept?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "In a nutshell, you binary-search the number that I picked in the range of [1,n]. In action, let your min to be 1, and your max to be n. You begin with the midpoint (max+min)/2 rounded to the nearest integer. If the midpoint is greater than the number I picked, you know you should reduce your max to midpoint - 1, etc. This is the typical process of binary search."
                    },
                    {
                        "username": "stacksagar",
                        "content": "### Behind the scenes, guess() function:\\n \\n```\\nfunction guess(num) {\\n  let pick = 3;\\n  if (pick === num) return 0;\\n  else if (pick > num) return 1;\\n  else return -1;\\n}\\n```"
                    },
                    {
                        "username": "stacksagar",
                        "content": "Did not understand the question properly,\\nCan any one explain me shortly?"
                    },
                    {
                        "username": "le-chat",
                        "content": "Hello!\nI don't understand, why this solution doesn't work?\n\n    public int guessNumber(int n) {\n        if (n == 1)\n            return 1;\n        int pick = n / 2;\n        int sol = guess(pick);\n        int i = 3;\n        while (sol != 0) {\n            if (sol < 0)\n                pick = pick + n / i;\n            if (sol > 0)\n                pick = pick - n / i;\n            sol = guess(pick);\n            i++;\n        }\n        return pick;\n    }\n\nError: \"Time Limit Exceeded\""
                    },
                    {
                        "username": "code_voyager",
                        "content": "Simple java solution using Binary search\\npublic int guessNumber(int n) {\\n        int high=n;\\n        int low=1;\\n        while(high>=low){\\n            int mid=low+(high-low)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)<0)\\n                high=mid-1;\\n            else\\n                low=mid+1;\\n        }\\n        return -1;\\n    }"
                    },
                    {
                        "username": "Jishnu_69",
                        "content": "btw this is a google question.\n\nUnder the company tag it's showing Google."
                    },
                    {
                        "username": "qiushile",
                        "content": "error: cannot find symbol\\n            guess(mid);\\n            ^\\n  symbol:   method guess(int)\\n  location: class Solution"
                    },
                    {
                        "username": "gulfaraj18",
                        "content": "guess have a return value!"
                    },
                    {
                        "username": "fishbody0418",
                        "content": "Hello, I am new coding. Can i ask why my solution is \"Time Limit Exceeded\"? I uses binary search method.\n\nclass Solution:\n\n            \n       def guessNumber(self, n: int) -> int:\n        start = 1\n        end = n\n        while start + 1 < end:\n            mid = start + (end-start)//2\n            res = guess(mid)\n            if res<0:\n                end = mid\n            elif res>0:\n                start == mid\n        if guess(start)==0:\n            return start\n        if guess(end)==0:\n            return end"
                    }
                ]
            },
            {
                "id": 1774457,
                "content": [
                    {
                        "username": "tokeeffe9",
                        "content": "Am I right in saying the n can never be higher than pick? "
                    },
                    {
                        "username": "_dakshinraja_",
                        "content": "This is a guess game:\\n where a pre-defined function guess is already declared for us. which will guess the number for us.\\n when the function return 0 it means we\\'ve found the number,\\n when the function returns -1 it means we\\'ve guessed a value higher than the number,\\n when the function return 1 it means we\\'ve guessed a value lower than the number.\\n\\nNow using binary search we have to guess and find the number.\\n\\n"
                    },
                    {
                        "username": "jeevaathecoder",
                        "content": "How to find this problem is in binary search concept?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "In a nutshell, you binary-search the number that I picked in the range of [1,n]. In action, let your min to be 1, and your max to be n. You begin with the midpoint (max+min)/2 rounded to the nearest integer. If the midpoint is greater than the number I picked, you know you should reduce your max to midpoint - 1, etc. This is the typical process of binary search."
                    },
                    {
                        "username": "stacksagar",
                        "content": "### Behind the scenes, guess() function:\\n \\n```\\nfunction guess(num) {\\n  let pick = 3;\\n  if (pick === num) return 0;\\n  else if (pick > num) return 1;\\n  else return -1;\\n}\\n```"
                    },
                    {
                        "username": "stacksagar",
                        "content": "Did not understand the question properly,\\nCan any one explain me shortly?"
                    },
                    {
                        "username": "le-chat",
                        "content": "Hello!\nI don't understand, why this solution doesn't work?\n\n    public int guessNumber(int n) {\n        if (n == 1)\n            return 1;\n        int pick = n / 2;\n        int sol = guess(pick);\n        int i = 3;\n        while (sol != 0) {\n            if (sol < 0)\n                pick = pick + n / i;\n            if (sol > 0)\n                pick = pick - n / i;\n            sol = guess(pick);\n            i++;\n        }\n        return pick;\n    }\n\nError: \"Time Limit Exceeded\""
                    },
                    {
                        "username": "code_voyager",
                        "content": "Simple java solution using Binary search\\npublic int guessNumber(int n) {\\n        int high=n;\\n        int low=1;\\n        while(high>=low){\\n            int mid=low+(high-low)/2;\\n            if(guess(mid)==0)\\n                return mid;\\n            else if(guess(mid)<0)\\n                high=mid-1;\\n            else\\n                low=mid+1;\\n        }\\n        return -1;\\n    }"
                    },
                    {
                        "username": "Jishnu_69",
                        "content": "btw this is a google question.\n\nUnder the company tag it's showing Google."
                    },
                    {
                        "username": "qiushile",
                        "content": "error: cannot find symbol\\n            guess(mid);\\n            ^\\n  symbol:   method guess(int)\\n  location: class Solution"
                    },
                    {
                        "username": "gulfaraj18",
                        "content": "guess have a return value!"
                    },
                    {
                        "username": "fishbody0418",
                        "content": "Hello, I am new coding. Can i ask why my solution is \"Time Limit Exceeded\"? I uses binary search method.\n\nclass Solution:\n\n            \n       def guessNumber(self, n: int) -> int:\n        start = 1\n        end = n\n        while start + 1 < end:\n            mid = start + (end-start)//2\n            res = guess(mid)\n            if res<0:\n                end = mid\n            elif res>0:\n                start == mid\n        if guess(start)==0:\n            return start\n        if guess(end)==0:\n            return end"
                    }
                ]
            },
            {
                "id": 1772357,
                "content": [
                    {
                        "username": "Lucky_Dev",
                        "content": "The problem is not described clearly"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "class Solution:\\n    def guessNumber(self, n: int) -> int:\\n        # return a num btw 1,..,n\\n        \\n        low = 1\\n        high = n\\n        \\n        while True:\\n            mid = low + (high - low) // 2\\n            myGuess = guess(mid)\\n            if myGuess == 1:\\n                low = mid + 1\\n            elif myGuess == -1:\\n                high = mid - 1\\n            else:\\n                return mid\\n"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "i don\\'t understand this question properly. the problem should be more intuitive as this is a simple problem from binary search."
                    },
                    {
                        "username": "sharkzz",
                        "content": "\\n\\n\\n int guessNumber(int n) {\\n        int s=1;\\n        int e=n;\\n        while(s<=e)\\n        {\\n            int mid=(e+s)/2;\\n\\n            // int v=guess(mid);\\n            \\n            if(guess(mid)==0)\\n            {\\n                return mid;\\n            }\\n            else if(guess(mid)==-1)\\n            {\\n                s=mid+1;\\n            }\\n            else \\n            {\\n                e=mid-1;\\n            }\\n        }\\n        return -1;\\nwhat is the mistake here first test case isn\\'t getting passed `your inline code...your inline code...`"
                    },
                    {
                        "username": "osalinasv",
                        "content": "The function `guess(int num`  might return the opposite of what you\\'d intuitively expect:\\n- It returns -1 when the number you guessed is **LARGER** than the expected answer, be careful to not think to guess lower because of the minus\\n\\nHint: Depending on your language\\'s max value for `n`\\'s data type you could run into an overflow while trying to choose a new guess number. Think of a way to avoid this, otherwise your range bounds could go to the negatives."
                    },
                    {
                        "username": "deleted_user",
                        "content": "i dont understand. "
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "Ultron03",
                        "content": "i am getting this type of error ,can someone please resolve it >>>>... \\n#this is the error for a test case 2126753390\\nand pick is 1702766719\\n\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==34==ERROR: AddressSanitizer: stack-overflow on address 0x7ffcc09d1b58 (pc 0x000000343ae5 bp 0x7ffebbabd5d0 sp 0x7ffcc09d1b60 T0)\\n    #2 0x7f47de4db0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==ABORTING\\n\\n\\n\\n"
                    },
                    {
                        "username": "sakshi0806",
                        "content": "you should use int mid=start+(end-start)/2 if not using\\n"
                    },
                    {
                        "username": "nkb02",
                        "content": "question statement isn\\'t that clear. it is a simple question but they made it confusing "
                    },
                    {
                        "username": "noneal",
                        "content": "I think something is wrong with the website. My solution gets the right answer, but keeps running instead of returning. Where should I go to report this? EDIT: nevermind, found the feedback section"
                    }
                ]
            },
            {
                "id": 1756881,
                "content": [
                    {
                        "username": "Lucky_Dev",
                        "content": "The problem is not described clearly"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "class Solution:\\n    def guessNumber(self, n: int) -> int:\\n        # return a num btw 1,..,n\\n        \\n        low = 1\\n        high = n\\n        \\n        while True:\\n            mid = low + (high - low) // 2\\n            myGuess = guess(mid)\\n            if myGuess == 1:\\n                low = mid + 1\\n            elif myGuess == -1:\\n                high = mid - 1\\n            else:\\n                return mid\\n"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "i don\\'t understand this question properly. the problem should be more intuitive as this is a simple problem from binary search."
                    },
                    {
                        "username": "sharkzz",
                        "content": "\\n\\n\\n int guessNumber(int n) {\\n        int s=1;\\n        int e=n;\\n        while(s<=e)\\n        {\\n            int mid=(e+s)/2;\\n\\n            // int v=guess(mid);\\n            \\n            if(guess(mid)==0)\\n            {\\n                return mid;\\n            }\\n            else if(guess(mid)==-1)\\n            {\\n                s=mid+1;\\n            }\\n            else \\n            {\\n                e=mid-1;\\n            }\\n        }\\n        return -1;\\nwhat is the mistake here first test case isn\\'t getting passed `your inline code...your inline code...`"
                    },
                    {
                        "username": "osalinasv",
                        "content": "The function `guess(int num`  might return the opposite of what you\\'d intuitively expect:\\n- It returns -1 when the number you guessed is **LARGER** than the expected answer, be careful to not think to guess lower because of the minus\\n\\nHint: Depending on your language\\'s max value for `n`\\'s data type you could run into an overflow while trying to choose a new guess number. Think of a way to avoid this, otherwise your range bounds could go to the negatives."
                    },
                    {
                        "username": "deleted_user",
                        "content": "i dont understand. "
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "Ultron03",
                        "content": "i am getting this type of error ,can someone please resolve it >>>>... \\n#this is the error for a test case 2126753390\\nand pick is 1702766719\\n\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==34==ERROR: AddressSanitizer: stack-overflow on address 0x7ffcc09d1b58 (pc 0x000000343ae5 bp 0x7ffebbabd5d0 sp 0x7ffcc09d1b60 T0)\\n    #2 0x7f47de4db0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==ABORTING\\n\\n\\n\\n"
                    },
                    {
                        "username": "sakshi0806",
                        "content": "you should use int mid=start+(end-start)/2 if not using\\n"
                    },
                    {
                        "username": "nkb02",
                        "content": "question statement isn\\'t that clear. it is a simple question but they made it confusing "
                    },
                    {
                        "username": "noneal",
                        "content": "I think something is wrong with the website. My solution gets the right answer, but keeps running instead of returning. Where should I go to report this? EDIT: nevermind, found the feedback section"
                    }
                ]
            },
            {
                "id": 1755841,
                "content": [
                    {
                        "username": "Lucky_Dev",
                        "content": "The problem is not described clearly"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "class Solution:\\n    def guessNumber(self, n: int) -> int:\\n        # return a num btw 1,..,n\\n        \\n        low = 1\\n        high = n\\n        \\n        while True:\\n            mid = low + (high - low) // 2\\n            myGuess = guess(mid)\\n            if myGuess == 1:\\n                low = mid + 1\\n            elif myGuess == -1:\\n                high = mid - 1\\n            else:\\n                return mid\\n"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "i don\\'t understand this question properly. the problem should be more intuitive as this is a simple problem from binary search."
                    },
                    {
                        "username": "sharkzz",
                        "content": "\\n\\n\\n int guessNumber(int n) {\\n        int s=1;\\n        int e=n;\\n        while(s<=e)\\n        {\\n            int mid=(e+s)/2;\\n\\n            // int v=guess(mid);\\n            \\n            if(guess(mid)==0)\\n            {\\n                return mid;\\n            }\\n            else if(guess(mid)==-1)\\n            {\\n                s=mid+1;\\n            }\\n            else \\n            {\\n                e=mid-1;\\n            }\\n        }\\n        return -1;\\nwhat is the mistake here first test case isn\\'t getting passed `your inline code...your inline code...`"
                    },
                    {
                        "username": "osalinasv",
                        "content": "The function `guess(int num`  might return the opposite of what you\\'d intuitively expect:\\n- It returns -1 when the number you guessed is **LARGER** than the expected answer, be careful to not think to guess lower because of the minus\\n\\nHint: Depending on your language\\'s max value for `n`\\'s data type you could run into an overflow while trying to choose a new guess number. Think of a way to avoid this, otherwise your range bounds could go to the negatives."
                    },
                    {
                        "username": "deleted_user",
                        "content": "i dont understand. "
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "Ultron03",
                        "content": "i am getting this type of error ,can someone please resolve it >>>>... \\n#this is the error for a test case 2126753390\\nand pick is 1702766719\\n\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==34==ERROR: AddressSanitizer: stack-overflow on address 0x7ffcc09d1b58 (pc 0x000000343ae5 bp 0x7ffebbabd5d0 sp 0x7ffcc09d1b60 T0)\\n    #2 0x7f47de4db0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==ABORTING\\n\\n\\n\\n"
                    },
                    {
                        "username": "sakshi0806",
                        "content": "you should use int mid=start+(end-start)/2 if not using\\n"
                    },
                    {
                        "username": "nkb02",
                        "content": "question statement isn\\'t that clear. it is a simple question but they made it confusing "
                    },
                    {
                        "username": "noneal",
                        "content": "I think something is wrong with the website. My solution gets the right answer, but keeps running instead of returning. Where should I go to report this? EDIT: nevermind, found the feedback section"
                    }
                ]
            },
            {
                "id": 1753542,
                "content": [
                    {
                        "username": "Lucky_Dev",
                        "content": "The problem is not described clearly"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "class Solution:\\n    def guessNumber(self, n: int) -> int:\\n        # return a num btw 1,..,n\\n        \\n        low = 1\\n        high = n\\n        \\n        while True:\\n            mid = low + (high - low) // 2\\n            myGuess = guess(mid)\\n            if myGuess == 1:\\n                low = mid + 1\\n            elif myGuess == -1:\\n                high = mid - 1\\n            else:\\n                return mid\\n"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "i don\\'t understand this question properly. the problem should be more intuitive as this is a simple problem from binary search."
                    },
                    {
                        "username": "sharkzz",
                        "content": "\\n\\n\\n int guessNumber(int n) {\\n        int s=1;\\n        int e=n;\\n        while(s<=e)\\n        {\\n            int mid=(e+s)/2;\\n\\n            // int v=guess(mid);\\n            \\n            if(guess(mid)==0)\\n            {\\n                return mid;\\n            }\\n            else if(guess(mid)==-1)\\n            {\\n                s=mid+1;\\n            }\\n            else \\n            {\\n                e=mid-1;\\n            }\\n        }\\n        return -1;\\nwhat is the mistake here first test case isn\\'t getting passed `your inline code...your inline code...`"
                    },
                    {
                        "username": "osalinasv",
                        "content": "The function `guess(int num`  might return the opposite of what you\\'d intuitively expect:\\n- It returns -1 when the number you guessed is **LARGER** than the expected answer, be careful to not think to guess lower because of the minus\\n\\nHint: Depending on your language\\'s max value for `n`\\'s data type you could run into an overflow while trying to choose a new guess number. Think of a way to avoid this, otherwise your range bounds could go to the negatives."
                    },
                    {
                        "username": "deleted_user",
                        "content": "i dont understand. "
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "Ultron03",
                        "content": "i am getting this type of error ,can someone please resolve it >>>>... \\n#this is the error for a test case 2126753390\\nand pick is 1702766719\\n\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==34==ERROR: AddressSanitizer: stack-overflow on address 0x7ffcc09d1b58 (pc 0x000000343ae5 bp 0x7ffebbabd5d0 sp 0x7ffcc09d1b60 T0)\\n    #2 0x7f47de4db0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==ABORTING\\n\\n\\n\\n"
                    },
                    {
                        "username": "sakshi0806",
                        "content": "you should use int mid=start+(end-start)/2 if not using\\n"
                    },
                    {
                        "username": "nkb02",
                        "content": "question statement isn\\'t that clear. it is a simple question but they made it confusing "
                    },
                    {
                        "username": "noneal",
                        "content": "I think something is wrong with the website. My solution gets the right answer, but keeps running instead of returning. Where should I go to report this? EDIT: nevermind, found the feedback section"
                    }
                ]
            },
            {
                "id": 1740669,
                "content": [
                    {
                        "username": "Lucky_Dev",
                        "content": "The problem is not described clearly"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "class Solution:\\n    def guessNumber(self, n: int) -> int:\\n        # return a num btw 1,..,n\\n        \\n        low = 1\\n        high = n\\n        \\n        while True:\\n            mid = low + (high - low) // 2\\n            myGuess = guess(mid)\\n            if myGuess == 1:\\n                low = mid + 1\\n            elif myGuess == -1:\\n                high = mid - 1\\n            else:\\n                return mid\\n"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "i don\\'t understand this question properly. the problem should be more intuitive as this is a simple problem from binary search."
                    },
                    {
                        "username": "sharkzz",
                        "content": "\\n\\n\\n int guessNumber(int n) {\\n        int s=1;\\n        int e=n;\\n        while(s<=e)\\n        {\\n            int mid=(e+s)/2;\\n\\n            // int v=guess(mid);\\n            \\n            if(guess(mid)==0)\\n            {\\n                return mid;\\n            }\\n            else if(guess(mid)==-1)\\n            {\\n                s=mid+1;\\n            }\\n            else \\n            {\\n                e=mid-1;\\n            }\\n        }\\n        return -1;\\nwhat is the mistake here first test case isn\\'t getting passed `your inline code...your inline code...`"
                    },
                    {
                        "username": "osalinasv",
                        "content": "The function `guess(int num`  might return the opposite of what you\\'d intuitively expect:\\n- It returns -1 when the number you guessed is **LARGER** than the expected answer, be careful to not think to guess lower because of the minus\\n\\nHint: Depending on your language\\'s max value for `n`\\'s data type you could run into an overflow while trying to choose a new guess number. Think of a way to avoid this, otherwise your range bounds could go to the negatives."
                    },
                    {
                        "username": "deleted_user",
                        "content": "i dont understand. "
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "Ultron03",
                        "content": "i am getting this type of error ,can someone please resolve it >>>>... \\n#this is the error for a test case 2126753390\\nand pick is 1702766719\\n\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==34==ERROR: AddressSanitizer: stack-overflow on address 0x7ffcc09d1b58 (pc 0x000000343ae5 bp 0x7ffebbabd5d0 sp 0x7ffcc09d1b60 T0)\\n    #2 0x7f47de4db0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==ABORTING\\n\\n\\n\\n"
                    },
                    {
                        "username": "sakshi0806",
                        "content": "you should use int mid=start+(end-start)/2 if not using\\n"
                    },
                    {
                        "username": "nkb02",
                        "content": "question statement isn\\'t that clear. it is a simple question but they made it confusing "
                    },
                    {
                        "username": "noneal",
                        "content": "I think something is wrong with the website. My solution gets the right answer, but keeps running instead of returning. Where should I go to report this? EDIT: nevermind, found the feedback section"
                    }
                ]
            },
            {
                "id": 1733920,
                "content": [
                    {
                        "username": "Lucky_Dev",
                        "content": "The problem is not described clearly"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "class Solution:\\n    def guessNumber(self, n: int) -> int:\\n        # return a num btw 1,..,n\\n        \\n        low = 1\\n        high = n\\n        \\n        while True:\\n            mid = low + (high - low) // 2\\n            myGuess = guess(mid)\\n            if myGuess == 1:\\n                low = mid + 1\\n            elif myGuess == -1:\\n                high = mid - 1\\n            else:\\n                return mid\\n"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "i don\\'t understand this question properly. the problem should be more intuitive as this is a simple problem from binary search."
                    },
                    {
                        "username": "sharkzz",
                        "content": "\\n\\n\\n int guessNumber(int n) {\\n        int s=1;\\n        int e=n;\\n        while(s<=e)\\n        {\\n            int mid=(e+s)/2;\\n\\n            // int v=guess(mid);\\n            \\n            if(guess(mid)==0)\\n            {\\n                return mid;\\n            }\\n            else if(guess(mid)==-1)\\n            {\\n                s=mid+1;\\n            }\\n            else \\n            {\\n                e=mid-1;\\n            }\\n        }\\n        return -1;\\nwhat is the mistake here first test case isn\\'t getting passed `your inline code...your inline code...`"
                    },
                    {
                        "username": "osalinasv",
                        "content": "The function `guess(int num`  might return the opposite of what you\\'d intuitively expect:\\n- It returns -1 when the number you guessed is **LARGER** than the expected answer, be careful to not think to guess lower because of the minus\\n\\nHint: Depending on your language\\'s max value for `n`\\'s data type you could run into an overflow while trying to choose a new guess number. Think of a way to avoid this, otherwise your range bounds could go to the negatives."
                    },
                    {
                        "username": "deleted_user",
                        "content": "i dont understand. "
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "Ultron03",
                        "content": "i am getting this type of error ,can someone please resolve it >>>>... \\n#this is the error for a test case 2126753390\\nand pick is 1702766719\\n\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==34==ERROR: AddressSanitizer: stack-overflow on address 0x7ffcc09d1b58 (pc 0x000000343ae5 bp 0x7ffebbabd5d0 sp 0x7ffcc09d1b60 T0)\\n    #2 0x7f47de4db0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==ABORTING\\n\\n\\n\\n"
                    },
                    {
                        "username": "sakshi0806",
                        "content": "you should use int mid=start+(end-start)/2 if not using\\n"
                    },
                    {
                        "username": "nkb02",
                        "content": "question statement isn\\'t that clear. it is a simple question but they made it confusing "
                    },
                    {
                        "username": "noneal",
                        "content": "I think something is wrong with the website. My solution gets the right answer, but keeps running instead of returning. Where should I go to report this? EDIT: nevermind, found the feedback section"
                    }
                ]
            },
            {
                "id": 1733566,
                "content": [
                    {
                        "username": "Lucky_Dev",
                        "content": "The problem is not described clearly"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "class Solution:\\n    def guessNumber(self, n: int) -> int:\\n        # return a num btw 1,..,n\\n        \\n        low = 1\\n        high = n\\n        \\n        while True:\\n            mid = low + (high - low) // 2\\n            myGuess = guess(mid)\\n            if myGuess == 1:\\n                low = mid + 1\\n            elif myGuess == -1:\\n                high = mid - 1\\n            else:\\n                return mid\\n"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "i don\\'t understand this question properly. the problem should be more intuitive as this is a simple problem from binary search."
                    },
                    {
                        "username": "sharkzz",
                        "content": "\\n\\n\\n int guessNumber(int n) {\\n        int s=1;\\n        int e=n;\\n        while(s<=e)\\n        {\\n            int mid=(e+s)/2;\\n\\n            // int v=guess(mid);\\n            \\n            if(guess(mid)==0)\\n            {\\n                return mid;\\n            }\\n            else if(guess(mid)==-1)\\n            {\\n                s=mid+1;\\n            }\\n            else \\n            {\\n                e=mid-1;\\n            }\\n        }\\n        return -1;\\nwhat is the mistake here first test case isn\\'t getting passed `your inline code...your inline code...`"
                    },
                    {
                        "username": "osalinasv",
                        "content": "The function `guess(int num`  might return the opposite of what you\\'d intuitively expect:\\n- It returns -1 when the number you guessed is **LARGER** than the expected answer, be careful to not think to guess lower because of the minus\\n\\nHint: Depending on your language\\'s max value for `n`\\'s data type you could run into an overflow while trying to choose a new guess number. Think of a way to avoid this, otherwise your range bounds could go to the negatives."
                    },
                    {
                        "username": "deleted_user",
                        "content": "i dont understand. "
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "Ultron03",
                        "content": "i am getting this type of error ,can someone please resolve it >>>>... \\n#this is the error for a test case 2126753390\\nand pick is 1702766719\\n\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==34==ERROR: AddressSanitizer: stack-overflow on address 0x7ffcc09d1b58 (pc 0x000000343ae5 bp 0x7ffebbabd5d0 sp 0x7ffcc09d1b60 T0)\\n    #2 0x7f47de4db0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==ABORTING\\n\\n\\n\\n"
                    },
                    {
                        "username": "sakshi0806",
                        "content": "you should use int mid=start+(end-start)/2 if not using\\n"
                    },
                    {
                        "username": "nkb02",
                        "content": "question statement isn\\'t that clear. it is a simple question but they made it confusing "
                    },
                    {
                        "username": "noneal",
                        "content": "I think something is wrong with the website. My solution gets the right answer, but keeps running instead of returning. Where should I go to report this? EDIT: nevermind, found the feedback section"
                    }
                ]
            },
            {
                "id": 1725347,
                "content": [
                    {
                        "username": "Lucky_Dev",
                        "content": "The problem is not described clearly"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "class Solution:\\n    def guessNumber(self, n: int) -> int:\\n        # return a num btw 1,..,n\\n        \\n        low = 1\\n        high = n\\n        \\n        while True:\\n            mid = low + (high - low) // 2\\n            myGuess = guess(mid)\\n            if myGuess == 1:\\n                low = mid + 1\\n            elif myGuess == -1:\\n                high = mid - 1\\n            else:\\n                return mid\\n"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "i don\\'t understand this question properly. the problem should be more intuitive as this is a simple problem from binary search."
                    },
                    {
                        "username": "sharkzz",
                        "content": "\\n\\n\\n int guessNumber(int n) {\\n        int s=1;\\n        int e=n;\\n        while(s<=e)\\n        {\\n            int mid=(e+s)/2;\\n\\n            // int v=guess(mid);\\n            \\n            if(guess(mid)==0)\\n            {\\n                return mid;\\n            }\\n            else if(guess(mid)==-1)\\n            {\\n                s=mid+1;\\n            }\\n            else \\n            {\\n                e=mid-1;\\n            }\\n        }\\n        return -1;\\nwhat is the mistake here first test case isn\\'t getting passed `your inline code...your inline code...`"
                    },
                    {
                        "username": "osalinasv",
                        "content": "The function `guess(int num`  might return the opposite of what you\\'d intuitively expect:\\n- It returns -1 when the number you guessed is **LARGER** than the expected answer, be careful to not think to guess lower because of the minus\\n\\nHint: Depending on your language\\'s max value for `n`\\'s data type you could run into an overflow while trying to choose a new guess number. Think of a way to avoid this, otherwise your range bounds could go to the negatives."
                    },
                    {
                        "username": "deleted_user",
                        "content": "i dont understand. "
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "Ultron03",
                        "content": "i am getting this type of error ,can someone please resolve it >>>>... \\n#this is the error for a test case 2126753390\\nand pick is 1702766719\\n\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==34==ERROR: AddressSanitizer: stack-overflow on address 0x7ffcc09d1b58 (pc 0x000000343ae5 bp 0x7ffebbabd5d0 sp 0x7ffcc09d1b60 T0)\\n    #2 0x7f47de4db0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==ABORTING\\n\\n\\n\\n"
                    },
                    {
                        "username": "sakshi0806",
                        "content": "you should use int mid=start+(end-start)/2 if not using\\n"
                    },
                    {
                        "username": "nkb02",
                        "content": "question statement isn\\'t that clear. it is a simple question but they made it confusing "
                    },
                    {
                        "username": "noneal",
                        "content": "I think something is wrong with the website. My solution gets the right answer, but keeps running instead of returning. Where should I go to report this? EDIT: nevermind, found the feedback section"
                    }
                ]
            },
            {
                "id": 1723370,
                "content": [
                    {
                        "username": "Lucky_Dev",
                        "content": "The problem is not described clearly"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "class Solution:\\n    def guessNumber(self, n: int) -> int:\\n        # return a num btw 1,..,n\\n        \\n        low = 1\\n        high = n\\n        \\n        while True:\\n            mid = low + (high - low) // 2\\n            myGuess = guess(mid)\\n            if myGuess == 1:\\n                low = mid + 1\\n            elif myGuess == -1:\\n                high = mid - 1\\n            else:\\n                return mid\\n"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "i don\\'t understand this question properly. the problem should be more intuitive as this is a simple problem from binary search."
                    },
                    {
                        "username": "sharkzz",
                        "content": "\\n\\n\\n int guessNumber(int n) {\\n        int s=1;\\n        int e=n;\\n        while(s<=e)\\n        {\\n            int mid=(e+s)/2;\\n\\n            // int v=guess(mid);\\n            \\n            if(guess(mid)==0)\\n            {\\n                return mid;\\n            }\\n            else if(guess(mid)==-1)\\n            {\\n                s=mid+1;\\n            }\\n            else \\n            {\\n                e=mid-1;\\n            }\\n        }\\n        return -1;\\nwhat is the mistake here first test case isn\\'t getting passed `your inline code...your inline code...`"
                    },
                    {
                        "username": "osalinasv",
                        "content": "The function `guess(int num`  might return the opposite of what you\\'d intuitively expect:\\n- It returns -1 when the number you guessed is **LARGER** than the expected answer, be careful to not think to guess lower because of the minus\\n\\nHint: Depending on your language\\'s max value for `n`\\'s data type you could run into an overflow while trying to choose a new guess number. Think of a way to avoid this, otherwise your range bounds could go to the negatives."
                    },
                    {
                        "username": "deleted_user",
                        "content": "i dont understand. "
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "Ultron03",
                        "content": "i am getting this type of error ,can someone please resolve it >>>>... \\n#this is the error for a test case 2126753390\\nand pick is 1702766719\\n\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==34==ERROR: AddressSanitizer: stack-overflow on address 0x7ffcc09d1b58 (pc 0x000000343ae5 bp 0x7ffebbabd5d0 sp 0x7ffcc09d1b60 T0)\\n    #2 0x7f47de4db0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==ABORTING\\n\\n\\n\\n"
                    },
                    {
                        "username": "sakshi0806",
                        "content": "you should use int mid=start+(end-start)/2 if not using\\n"
                    },
                    {
                        "username": "nkb02",
                        "content": "question statement isn\\'t that clear. it is a simple question but they made it confusing "
                    },
                    {
                        "username": "noneal",
                        "content": "I think something is wrong with the website. My solution gets the right answer, but keeps running instead of returning. Where should I go to report this? EDIT: nevermind, found the feedback section"
                    }
                ]
            },
            {
                "id": 1697195,
                "content": [
                    {
                        "username": "Lucky_Dev",
                        "content": "The problem is not described clearly"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "class Solution:\\n    def guessNumber(self, n: int) -> int:\\n        # return a num btw 1,..,n\\n        \\n        low = 1\\n        high = n\\n        \\n        while True:\\n            mid = low + (high - low) // 2\\n            myGuess = guess(mid)\\n            if myGuess == 1:\\n                low = mid + 1\\n            elif myGuess == -1:\\n                high = mid - 1\\n            else:\\n                return mid\\n"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "i don\\'t understand this question properly. the problem should be more intuitive as this is a simple problem from binary search."
                    },
                    {
                        "username": "sharkzz",
                        "content": "\\n\\n\\n int guessNumber(int n) {\\n        int s=1;\\n        int e=n;\\n        while(s<=e)\\n        {\\n            int mid=(e+s)/2;\\n\\n            // int v=guess(mid);\\n            \\n            if(guess(mid)==0)\\n            {\\n                return mid;\\n            }\\n            else if(guess(mid)==-1)\\n            {\\n                s=mid+1;\\n            }\\n            else \\n            {\\n                e=mid-1;\\n            }\\n        }\\n        return -1;\\nwhat is the mistake here first test case isn\\'t getting passed `your inline code...your inline code...`"
                    },
                    {
                        "username": "osalinasv",
                        "content": "The function `guess(int num`  might return the opposite of what you\\'d intuitively expect:\\n- It returns -1 when the number you guessed is **LARGER** than the expected answer, be careful to not think to guess lower because of the minus\\n\\nHint: Depending on your language\\'s max value for `n`\\'s data type you could run into an overflow while trying to choose a new guess number. Think of a way to avoid this, otherwise your range bounds could go to the negatives."
                    },
                    {
                        "username": "deleted_user",
                        "content": "i dont understand. "
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "Best Explanation:\\nhttps://youtu.be/zx-c48gtCsc"
                    },
                    {
                        "username": "Ultron03",
                        "content": "i am getting this type of error ,can someone please resolve it >>>>... \\n#this is the error for a test case 2126753390\\nand pick is 1702766719\\n\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==34==ERROR: AddressSanitizer: stack-overflow on address 0x7ffcc09d1b58 (pc 0x000000343ae5 bp 0x7ffebbabd5d0 sp 0x7ffcc09d1b60 T0)\\n    #2 0x7f47de4db0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==34==ABORTING\\n\\n\\n\\n"
                    },
                    {
                        "username": "sakshi0806",
                        "content": "you should use int mid=start+(end-start)/2 if not using\\n"
                    },
                    {
                        "username": "nkb02",
                        "content": "question statement isn\\'t that clear. it is a simple question but they made it confusing "
                    },
                    {
                        "username": "noneal",
                        "content": "I think something is wrong with the website. My solution gets the right answer, but keeps running instead of returning. Where should I go to report this? EDIT: nevermind, found the feedback section"
                    }
                ]
            },
            {
                "id": 1686301,
                "content": [
                    {
                        "username": "akash102",
                        "content": "Can anyone help me explain the question with the help of first test case i.e., n = 10 and pick = 6 and o/p is 6. How???"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "n = 10 means you have a range from 1 to 10. And the computer chooses a number from this range. You have to guess it and then return it if it is the correct number that computer chose. Output of 6 means that the number computer chose was 6."
                    },
                    {
                        "username": "santosh_00",
                        "content": "Try thinking of binary search in an optimized way;\\nmid=l+(h-l)/2"
                    },
                    {
                        "username": "ercanK",
                        "content": "[@Saik77](/Saik77) \n`mid=(l+h)/2 ` may cause an overflow depending on the types and values of `l` and `h`. For example, if l = 1 and h = 2147483647, then `(l+h)/2 = -1073741824` (because in this case l + h != 2147483648 but it is -2147483648), whereas `l+(h-l)/2 = 1073741824`"
                    },
                    {
                        "username": "Saik77",
                        "content": "what is the difference between \\nmid=(l+h)/2 and mid=l+(h-l)/2;"
                    },
                    {
                        "username": "xsqkv",
                        "content": "The solution must be $$n(log$$ $$n)$$.\nInstead you will getting \"Time Limit Exceeded\" Error."
                    },
                    {
                        "username": "Panda_2397",
                        "content": "[@Panda2397](/Panda2397) in case we use binary search\\n"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "should be O(logn)? \\n"
                    },
                    {
                        "username": "saklanishubham15",
                        "content": "Use binary search from 1 to n."
                    },
                    {
                        "username": "user0706D",
                        "content": "just a simple binary search will do the work!\\nif guess(mid)== -1(mid >key) then then your end becomes mid-1\\nif guess(mid)== 1(mid <key) then then your start becomes mid+ \\n"
                    },
                    {
                        "username": "mandliyarajendra11",
                        "content": "low=1 high=n\\nbinary search -\\nguess(mid)==0 return mid ,guess(mid)==1 low=mid+1 ,guess(mid)==-1 high=mid-1"
                    },
                    {
                        "username": "im3dabasia",
                        "content": "I was using `guessNumber` to make the API call. Don't the same mistake.\ninstead use `guess(num)`.\n"
                    },
                    {
                        "username": "euthiago",
                        "content": "Damn... I solved the solution for numbers between 1 and MAX_INTEGER haha\\nThey only want guesses from 1 to n..."
                    },
                    {
                        "username": "thakursaabhay",
                        "content": "A simple binary search program just don\\'t get confused with 1 and -1."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1686230,
                "content": [
                    {
                        "username": "akash102",
                        "content": "Can anyone help me explain the question with the help of first test case i.e., n = 10 and pick = 6 and o/p is 6. How???"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "n = 10 means you have a range from 1 to 10. And the computer chooses a number from this range. You have to guess it and then return it if it is the correct number that computer chose. Output of 6 means that the number computer chose was 6."
                    },
                    {
                        "username": "santosh_00",
                        "content": "Try thinking of binary search in an optimized way;\\nmid=l+(h-l)/2"
                    },
                    {
                        "username": "ercanK",
                        "content": "[@Saik77](/Saik77) \n`mid=(l+h)/2 ` may cause an overflow depending on the types and values of `l` and `h`. For example, if l = 1 and h = 2147483647, then `(l+h)/2 = -1073741824` (because in this case l + h != 2147483648 but it is -2147483648), whereas `l+(h-l)/2 = 1073741824`"
                    },
                    {
                        "username": "Saik77",
                        "content": "what is the difference between \\nmid=(l+h)/2 and mid=l+(h-l)/2;"
                    },
                    {
                        "username": "xsqkv",
                        "content": "The solution must be $$n(log$$ $$n)$$.\nInstead you will getting \"Time Limit Exceeded\" Error."
                    },
                    {
                        "username": "Panda_2397",
                        "content": "[@Panda2397](/Panda2397) in case we use binary search\\n"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "should be O(logn)? \\n"
                    },
                    {
                        "username": "saklanishubham15",
                        "content": "Use binary search from 1 to n."
                    },
                    {
                        "username": "user0706D",
                        "content": "just a simple binary search will do the work!\\nif guess(mid)== -1(mid >key) then then your end becomes mid-1\\nif guess(mid)== 1(mid <key) then then your start becomes mid+ \\n"
                    },
                    {
                        "username": "mandliyarajendra11",
                        "content": "low=1 high=n\\nbinary search -\\nguess(mid)==0 return mid ,guess(mid)==1 low=mid+1 ,guess(mid)==-1 high=mid-1"
                    },
                    {
                        "username": "im3dabasia",
                        "content": "I was using `guessNumber` to make the API call. Don't the same mistake.\ninstead use `guess(num)`.\n"
                    },
                    {
                        "username": "euthiago",
                        "content": "Damn... I solved the solution for numbers between 1 and MAX_INTEGER haha\\nThey only want guesses from 1 to n..."
                    },
                    {
                        "username": "thakursaabhay",
                        "content": "A simple binary search program just don\\'t get confused with 1 and -1."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1686074,
                "content": [
                    {
                        "username": "akash102",
                        "content": "Can anyone help me explain the question with the help of first test case i.e., n = 10 and pick = 6 and o/p is 6. How???"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "n = 10 means you have a range from 1 to 10. And the computer chooses a number from this range. You have to guess it and then return it if it is the correct number that computer chose. Output of 6 means that the number computer chose was 6."
                    },
                    {
                        "username": "santosh_00",
                        "content": "Try thinking of binary search in an optimized way;\\nmid=l+(h-l)/2"
                    },
                    {
                        "username": "ercanK",
                        "content": "[@Saik77](/Saik77) \n`mid=(l+h)/2 ` may cause an overflow depending on the types and values of `l` and `h`. For example, if l = 1 and h = 2147483647, then `(l+h)/2 = -1073741824` (because in this case l + h != 2147483648 but it is -2147483648), whereas `l+(h-l)/2 = 1073741824`"
                    },
                    {
                        "username": "Saik77",
                        "content": "what is the difference between \\nmid=(l+h)/2 and mid=l+(h-l)/2;"
                    },
                    {
                        "username": "xsqkv",
                        "content": "The solution must be $$n(log$$ $$n)$$.\nInstead you will getting \"Time Limit Exceeded\" Error."
                    },
                    {
                        "username": "Panda_2397",
                        "content": "[@Panda2397](/Panda2397) in case we use binary search\\n"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "should be O(logn)? \\n"
                    },
                    {
                        "username": "saklanishubham15",
                        "content": "Use binary search from 1 to n."
                    },
                    {
                        "username": "user0706D",
                        "content": "just a simple binary search will do the work!\\nif guess(mid)== -1(mid >key) then then your end becomes mid-1\\nif guess(mid)== 1(mid <key) then then your start becomes mid+ \\n"
                    },
                    {
                        "username": "mandliyarajendra11",
                        "content": "low=1 high=n\\nbinary search -\\nguess(mid)==0 return mid ,guess(mid)==1 low=mid+1 ,guess(mid)==-1 high=mid-1"
                    },
                    {
                        "username": "im3dabasia",
                        "content": "I was using `guessNumber` to make the API call. Don't the same mistake.\ninstead use `guess(num)`.\n"
                    },
                    {
                        "username": "euthiago",
                        "content": "Damn... I solved the solution for numbers between 1 and MAX_INTEGER haha\\nThey only want guesses from 1 to n..."
                    },
                    {
                        "username": "thakursaabhay",
                        "content": "A simple binary search program just don\\'t get confused with 1 and -1."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1685999,
                "content": [
                    {
                        "username": "akash102",
                        "content": "Can anyone help me explain the question with the help of first test case i.e., n = 10 and pick = 6 and o/p is 6. How???"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "n = 10 means you have a range from 1 to 10. And the computer chooses a number from this range. You have to guess it and then return it if it is the correct number that computer chose. Output of 6 means that the number computer chose was 6."
                    },
                    {
                        "username": "santosh_00",
                        "content": "Try thinking of binary search in an optimized way;\\nmid=l+(h-l)/2"
                    },
                    {
                        "username": "ercanK",
                        "content": "[@Saik77](/Saik77) \n`mid=(l+h)/2 ` may cause an overflow depending on the types and values of `l` and `h`. For example, if l = 1 and h = 2147483647, then `(l+h)/2 = -1073741824` (because in this case l + h != 2147483648 but it is -2147483648), whereas `l+(h-l)/2 = 1073741824`"
                    },
                    {
                        "username": "Saik77",
                        "content": "what is the difference between \\nmid=(l+h)/2 and mid=l+(h-l)/2;"
                    },
                    {
                        "username": "xsqkv",
                        "content": "The solution must be $$n(log$$ $$n)$$.\nInstead you will getting \"Time Limit Exceeded\" Error."
                    },
                    {
                        "username": "Panda_2397",
                        "content": "[@Panda2397](/Panda2397) in case we use binary search\\n"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "should be O(logn)? \\n"
                    },
                    {
                        "username": "saklanishubham15",
                        "content": "Use binary search from 1 to n."
                    },
                    {
                        "username": "user0706D",
                        "content": "just a simple binary search will do the work!\\nif guess(mid)== -1(mid >key) then then your end becomes mid-1\\nif guess(mid)== 1(mid <key) then then your start becomes mid+ \\n"
                    },
                    {
                        "username": "mandliyarajendra11",
                        "content": "low=1 high=n\\nbinary search -\\nguess(mid)==0 return mid ,guess(mid)==1 low=mid+1 ,guess(mid)==-1 high=mid-1"
                    },
                    {
                        "username": "im3dabasia",
                        "content": "I was using `guessNumber` to make the API call. Don't the same mistake.\ninstead use `guess(num)`.\n"
                    },
                    {
                        "username": "euthiago",
                        "content": "Damn... I solved the solution for numbers between 1 and MAX_INTEGER haha\\nThey only want guesses from 1 to n..."
                    },
                    {
                        "username": "thakursaabhay",
                        "content": "A simple binary search program just don\\'t get confused with 1 and -1."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1685949,
                "content": [
                    {
                        "username": "akash102",
                        "content": "Can anyone help me explain the question with the help of first test case i.e., n = 10 and pick = 6 and o/p is 6. How???"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "n = 10 means you have a range from 1 to 10. And the computer chooses a number from this range. You have to guess it and then return it if it is the correct number that computer chose. Output of 6 means that the number computer chose was 6."
                    },
                    {
                        "username": "santosh_00",
                        "content": "Try thinking of binary search in an optimized way;\\nmid=l+(h-l)/2"
                    },
                    {
                        "username": "ercanK",
                        "content": "[@Saik77](/Saik77) \n`mid=(l+h)/2 ` may cause an overflow depending on the types and values of `l` and `h`. For example, if l = 1 and h = 2147483647, then `(l+h)/2 = -1073741824` (because in this case l + h != 2147483648 but it is -2147483648), whereas `l+(h-l)/2 = 1073741824`"
                    },
                    {
                        "username": "Saik77",
                        "content": "what is the difference between \\nmid=(l+h)/2 and mid=l+(h-l)/2;"
                    },
                    {
                        "username": "xsqkv",
                        "content": "The solution must be $$n(log$$ $$n)$$.\nInstead you will getting \"Time Limit Exceeded\" Error."
                    },
                    {
                        "username": "Panda_2397",
                        "content": "[@Panda2397](/Panda2397) in case we use binary search\\n"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "should be O(logn)? \\n"
                    },
                    {
                        "username": "saklanishubham15",
                        "content": "Use binary search from 1 to n."
                    },
                    {
                        "username": "user0706D",
                        "content": "just a simple binary search will do the work!\\nif guess(mid)== -1(mid >key) then then your end becomes mid-1\\nif guess(mid)== 1(mid <key) then then your start becomes mid+ \\n"
                    },
                    {
                        "username": "mandliyarajendra11",
                        "content": "low=1 high=n\\nbinary search -\\nguess(mid)==0 return mid ,guess(mid)==1 low=mid+1 ,guess(mid)==-1 high=mid-1"
                    },
                    {
                        "username": "im3dabasia",
                        "content": "I was using `guessNumber` to make the API call. Don't the same mistake.\ninstead use `guess(num)`.\n"
                    },
                    {
                        "username": "euthiago",
                        "content": "Damn... I solved the solution for numbers between 1 and MAX_INTEGER haha\\nThey only want guesses from 1 to n..."
                    },
                    {
                        "username": "thakursaabhay",
                        "content": "A simple binary search program just don\\'t get confused with 1 and -1."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1685819,
                "content": [
                    {
                        "username": "akash102",
                        "content": "Can anyone help me explain the question with the help of first test case i.e., n = 10 and pick = 6 and o/p is 6. How???"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "n = 10 means you have a range from 1 to 10. And the computer chooses a number from this range. You have to guess it and then return it if it is the correct number that computer chose. Output of 6 means that the number computer chose was 6."
                    },
                    {
                        "username": "santosh_00",
                        "content": "Try thinking of binary search in an optimized way;\\nmid=l+(h-l)/2"
                    },
                    {
                        "username": "ercanK",
                        "content": "[@Saik77](/Saik77) \n`mid=(l+h)/2 ` may cause an overflow depending on the types and values of `l` and `h`. For example, if l = 1 and h = 2147483647, then `(l+h)/2 = -1073741824` (because in this case l + h != 2147483648 but it is -2147483648), whereas `l+(h-l)/2 = 1073741824`"
                    },
                    {
                        "username": "Saik77",
                        "content": "what is the difference between \\nmid=(l+h)/2 and mid=l+(h-l)/2;"
                    },
                    {
                        "username": "xsqkv",
                        "content": "The solution must be $$n(log$$ $$n)$$.\nInstead you will getting \"Time Limit Exceeded\" Error."
                    },
                    {
                        "username": "Panda_2397",
                        "content": "[@Panda2397](/Panda2397) in case we use binary search\\n"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "should be O(logn)? \\n"
                    },
                    {
                        "username": "saklanishubham15",
                        "content": "Use binary search from 1 to n."
                    },
                    {
                        "username": "user0706D",
                        "content": "just a simple binary search will do the work!\\nif guess(mid)== -1(mid >key) then then your end becomes mid-1\\nif guess(mid)== 1(mid <key) then then your start becomes mid+ \\n"
                    },
                    {
                        "username": "mandliyarajendra11",
                        "content": "low=1 high=n\\nbinary search -\\nguess(mid)==0 return mid ,guess(mid)==1 low=mid+1 ,guess(mid)==-1 high=mid-1"
                    },
                    {
                        "username": "im3dabasia",
                        "content": "I was using `guessNumber` to make the API call. Don't the same mistake.\ninstead use `guess(num)`.\n"
                    },
                    {
                        "username": "euthiago",
                        "content": "Damn... I solved the solution for numbers between 1 and MAX_INTEGER haha\\nThey only want guesses from 1 to n..."
                    },
                    {
                        "username": "thakursaabhay",
                        "content": "A simple binary search program just don\\'t get confused with 1 and -1."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1685793,
                "content": [
                    {
                        "username": "akash102",
                        "content": "Can anyone help me explain the question with the help of first test case i.e., n = 10 and pick = 6 and o/p is 6. How???"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "n = 10 means you have a range from 1 to 10. And the computer chooses a number from this range. You have to guess it and then return it if it is the correct number that computer chose. Output of 6 means that the number computer chose was 6."
                    },
                    {
                        "username": "santosh_00",
                        "content": "Try thinking of binary search in an optimized way;\\nmid=l+(h-l)/2"
                    },
                    {
                        "username": "ercanK",
                        "content": "[@Saik77](/Saik77) \n`mid=(l+h)/2 ` may cause an overflow depending on the types and values of `l` and `h`. For example, if l = 1 and h = 2147483647, then `(l+h)/2 = -1073741824` (because in this case l + h != 2147483648 but it is -2147483648), whereas `l+(h-l)/2 = 1073741824`"
                    },
                    {
                        "username": "Saik77",
                        "content": "what is the difference between \\nmid=(l+h)/2 and mid=l+(h-l)/2;"
                    },
                    {
                        "username": "xsqkv",
                        "content": "The solution must be $$n(log$$ $$n)$$.\nInstead you will getting \"Time Limit Exceeded\" Error."
                    },
                    {
                        "username": "Panda_2397",
                        "content": "[@Panda2397](/Panda2397) in case we use binary search\\n"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "should be O(logn)? \\n"
                    },
                    {
                        "username": "saklanishubham15",
                        "content": "Use binary search from 1 to n."
                    },
                    {
                        "username": "user0706D",
                        "content": "just a simple binary search will do the work!\\nif guess(mid)== -1(mid >key) then then your end becomes mid-1\\nif guess(mid)== 1(mid <key) then then your start becomes mid+ \\n"
                    },
                    {
                        "username": "mandliyarajendra11",
                        "content": "low=1 high=n\\nbinary search -\\nguess(mid)==0 return mid ,guess(mid)==1 low=mid+1 ,guess(mid)==-1 high=mid-1"
                    },
                    {
                        "username": "im3dabasia",
                        "content": "I was using `guessNumber` to make the API call. Don't the same mistake.\ninstead use `guess(num)`.\n"
                    },
                    {
                        "username": "euthiago",
                        "content": "Damn... I solved the solution for numbers between 1 and MAX_INTEGER haha\\nThey only want guesses from 1 to n..."
                    },
                    {
                        "username": "thakursaabhay",
                        "content": "A simple binary search program just don\\'t get confused with 1 and -1."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1685747,
                "content": [
                    {
                        "username": "akash102",
                        "content": "Can anyone help me explain the question with the help of first test case i.e., n = 10 and pick = 6 and o/p is 6. How???"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "n = 10 means you have a range from 1 to 10. And the computer chooses a number from this range. You have to guess it and then return it if it is the correct number that computer chose. Output of 6 means that the number computer chose was 6."
                    },
                    {
                        "username": "santosh_00",
                        "content": "Try thinking of binary search in an optimized way;\\nmid=l+(h-l)/2"
                    },
                    {
                        "username": "ercanK",
                        "content": "[@Saik77](/Saik77) \n`mid=(l+h)/2 ` may cause an overflow depending on the types and values of `l` and `h`. For example, if l = 1 and h = 2147483647, then `(l+h)/2 = -1073741824` (because in this case l + h != 2147483648 but it is -2147483648), whereas `l+(h-l)/2 = 1073741824`"
                    },
                    {
                        "username": "Saik77",
                        "content": "what is the difference between \\nmid=(l+h)/2 and mid=l+(h-l)/2;"
                    },
                    {
                        "username": "xsqkv",
                        "content": "The solution must be $$n(log$$ $$n)$$.\nInstead you will getting \"Time Limit Exceeded\" Error."
                    },
                    {
                        "username": "Panda_2397",
                        "content": "[@Panda2397](/Panda2397) in case we use binary search\\n"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "should be O(logn)? \\n"
                    },
                    {
                        "username": "saklanishubham15",
                        "content": "Use binary search from 1 to n."
                    },
                    {
                        "username": "user0706D",
                        "content": "just a simple binary search will do the work!\\nif guess(mid)== -1(mid >key) then then your end becomes mid-1\\nif guess(mid)== 1(mid <key) then then your start becomes mid+ \\n"
                    },
                    {
                        "username": "mandliyarajendra11",
                        "content": "low=1 high=n\\nbinary search -\\nguess(mid)==0 return mid ,guess(mid)==1 low=mid+1 ,guess(mid)==-1 high=mid-1"
                    },
                    {
                        "username": "im3dabasia",
                        "content": "I was using `guessNumber` to make the API call. Don't the same mistake.\ninstead use `guess(num)`.\n"
                    },
                    {
                        "username": "euthiago",
                        "content": "Damn... I solved the solution for numbers between 1 and MAX_INTEGER haha\\nThey only want guesses from 1 to n..."
                    },
                    {
                        "username": "thakursaabhay",
                        "content": "A simple binary search program just don\\'t get confused with 1 and -1."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1685712,
                "content": [
                    {
                        "username": "akash102",
                        "content": "Can anyone help me explain the question with the help of first test case i.e., n = 10 and pick = 6 and o/p is 6. How???"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "n = 10 means you have a range from 1 to 10. And the computer chooses a number from this range. You have to guess it and then return it if it is the correct number that computer chose. Output of 6 means that the number computer chose was 6."
                    },
                    {
                        "username": "santosh_00",
                        "content": "Try thinking of binary search in an optimized way;\\nmid=l+(h-l)/2"
                    },
                    {
                        "username": "ercanK",
                        "content": "[@Saik77](/Saik77) \n`mid=(l+h)/2 ` may cause an overflow depending on the types and values of `l` and `h`. For example, if l = 1 and h = 2147483647, then `(l+h)/2 = -1073741824` (because in this case l + h != 2147483648 but it is -2147483648), whereas `l+(h-l)/2 = 1073741824`"
                    },
                    {
                        "username": "Saik77",
                        "content": "what is the difference between \\nmid=(l+h)/2 and mid=l+(h-l)/2;"
                    },
                    {
                        "username": "xsqkv",
                        "content": "The solution must be $$n(log$$ $$n)$$.\nInstead you will getting \"Time Limit Exceeded\" Error."
                    },
                    {
                        "username": "Panda_2397",
                        "content": "[@Panda2397](/Panda2397) in case we use binary search\\n"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "should be O(logn)? \\n"
                    },
                    {
                        "username": "saklanishubham15",
                        "content": "Use binary search from 1 to n."
                    },
                    {
                        "username": "user0706D",
                        "content": "just a simple binary search will do the work!\\nif guess(mid)== -1(mid >key) then then your end becomes mid-1\\nif guess(mid)== 1(mid <key) then then your start becomes mid+ \\n"
                    },
                    {
                        "username": "mandliyarajendra11",
                        "content": "low=1 high=n\\nbinary search -\\nguess(mid)==0 return mid ,guess(mid)==1 low=mid+1 ,guess(mid)==-1 high=mid-1"
                    },
                    {
                        "username": "im3dabasia",
                        "content": "I was using `guessNumber` to make the API call. Don't the same mistake.\ninstead use `guess(num)`.\n"
                    },
                    {
                        "username": "euthiago",
                        "content": "Damn... I solved the solution for numbers between 1 and MAX_INTEGER haha\\nThey only want guesses from 1 to n..."
                    },
                    {
                        "username": "thakursaabhay",
                        "content": "A simple binary search program just don\\'t get confused with 1 and -1."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            },
            {
                "id": 1683464,
                "content": [
                    {
                        "username": "akash102",
                        "content": "Can anyone help me explain the question with the help of first test case i.e., n = 10 and pick = 6 and o/p is 6. How???"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "n = 10 means you have a range from 1 to 10. And the computer chooses a number from this range. You have to guess it and then return it if it is the correct number that computer chose. Output of 6 means that the number computer chose was 6."
                    },
                    {
                        "username": "santosh_00",
                        "content": "Try thinking of binary search in an optimized way;\\nmid=l+(h-l)/2"
                    },
                    {
                        "username": "ercanK",
                        "content": "[@Saik77](/Saik77) \n`mid=(l+h)/2 ` may cause an overflow depending on the types and values of `l` and `h`. For example, if l = 1 and h = 2147483647, then `(l+h)/2 = -1073741824` (because in this case l + h != 2147483648 but it is -2147483648), whereas `l+(h-l)/2 = 1073741824`"
                    },
                    {
                        "username": "Saik77",
                        "content": "what is the difference between \\nmid=(l+h)/2 and mid=l+(h-l)/2;"
                    },
                    {
                        "username": "xsqkv",
                        "content": "The solution must be $$n(log$$ $$n)$$.\nInstead you will getting \"Time Limit Exceeded\" Error."
                    },
                    {
                        "username": "Panda_2397",
                        "content": "[@Panda2397](/Panda2397) in case we use binary search\\n"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "should be O(logn)? \\n"
                    },
                    {
                        "username": "saklanishubham15",
                        "content": "Use binary search from 1 to n."
                    },
                    {
                        "username": "user0706D",
                        "content": "just a simple binary search will do the work!\\nif guess(mid)== -1(mid >key) then then your end becomes mid-1\\nif guess(mid)== 1(mid <key) then then your start becomes mid+ \\n"
                    },
                    {
                        "username": "mandliyarajendra11",
                        "content": "low=1 high=n\\nbinary search -\\nguess(mid)==0 return mid ,guess(mid)==1 low=mid+1 ,guess(mid)==-1 high=mid-1"
                    },
                    {
                        "username": "im3dabasia",
                        "content": "I was using `guessNumber` to make the API call. Don't the same mistake.\ninstead use `guess(num)`.\n"
                    },
                    {
                        "username": "euthiago",
                        "content": "Damn... I solved the solution for numbers between 1 and MAX_INTEGER haha\\nThey only want guesses from 1 to n..."
                    },
                    {
                        "username": "thakursaabhay",
                        "content": "A simple binary search program just don\\'t get confused with 1 and -1."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2728EASIEST C++ SOLUTION EZ TO UNDERSTAND | CLEAN CODE | OPTIMAL\\uD83D\\uDCA5\\nhttps://leetcode.com/problems/guess-number-higher-or-lower/solutions/2248583/easiest-c-solution-ez-to-understand-clean-code-optimal/"
                    }
                ]
            }
        ]
    }
]