[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long NextSmallestPalindrome(long num) {\n        long result = num;\n        while (result > 0) {\n            if (num % result == 0) {\n                return result;\n            }\n            result = result / result;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(NextSmallestPalindrome((99L)) == (101L));",
            "Debug.Assert(NextSmallestPalindrome((1221L)) == (1331L));",
            "Debug.Assert(NextSmallestPalindrome((120L)) == (121L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "Write a function to find the kth element in the given list using 1-based indexing.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long KthElement(List<long> arr, long k) {\n        long count = 0;\n        for (long i = 0; i < arr.Length; i++) {\n            if (arr[i] == k) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(KthElement((new List<long>(new long[]{(long)12L, (long)3L, (long)5L, (long)7L, (long)19L})), (2L)) == (3L));",
            "Debug.Assert(KthElement((new List<long>(new long[]{(long)17L, (long)24L, (long)8L, (long)23L})), (3L)) == (8L));",
            "Debug.Assert(KthElement((new List<long>(new long[]{(long)16L, (long)21L, (long)25L, (long)36L, (long)4L})), (4L)) == (36L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "Write a function to convert a snake case string to camel case string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isUpperCase(word.charAt(i))) {\n                result += word.charAt(i);\n            } else {\n                result += word.charAt(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));",
            "Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));",
            "Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "Write a function to find the Eulerian number a(n, m).",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long EulerianNum(long n, long m) {\n        long a = 1;\n        long b = 1;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 1;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 1;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n        \n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(EulerianNum((3L), (1L)) == (4L));",
            "Debug.Assert(EulerianNum((4L), (1L)) == (11L));",
            "Debug.Assert(EulerianNum((5L), (3L)) == (26L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "Write a function to sort each sublist of strings in a given list of lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<string>> SortSublists(List<List<string>> input_list) {\n        List<List<string>> output_list = new ArrayList<List<string>>();\n        for (int i = 0; i < input_list.size(); i++) {\n            List<string> sublist = input_list.get(i);\n            output_list.add(sublist);\n        }\n        return output_list;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"white\"}), (List<string>)new List<string>(new string[]{(string)\"white\", (string)\"black\", (string)\"orange\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"white\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"orange\", (string)\"white\"})}))));",
            "Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\" red \", (string)\"green\"}), (List<string>)new List<string>(new string[]{(string)\"blue \", (string)\" black\"}), (List<string>)new List<string>(new string[]{(string)\" orange\", (string)\"brown\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\" red \", (string)\"green\"}), (List<string>)new List<string>(new string[]{(string)\" black\", (string)\"blue \"}), (List<string>)new List<string>(new string[]{(string)\" orange\", (string)\"brown\"})}))));",
            "Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"zilver\", (string)\"gold\"}), (List<string>)new List<string>(new string[]{(string)\"magnesium\", (string)\"aluminium\"}), (List<string>)new List<string>(new string[]{(string)\"steel\", (string)\"bronze\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"gold\", (string)\"zilver\"}), (List<string>)new List<string>(new string[]{(string)\"aluminium\", (string)\"magnesium\"}), (List<string>)new List<string>(new string[]{(string)\"bronze\", (string)\"steel\"})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "Write a csthon function to count true booleans in the given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Count(List<bool> lst) {\n        long count = 0;\n        for (bool b : lst) {\n            if (b) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Count((new List<bool>(new bool[]{(bool)true, (bool)false, (bool)true}))) == (2L));",
            "Debug.Assert(Count((new List<bool>(new bool[]{(bool)false, (bool)false}))) == (0L));",
            "Debug.Assert(Count((new List<bool>(new bool[]{(bool)true, (bool)true, (bool)true}))) == (3L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "Write a function to append the given list to the given tuples.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long, long, long, long> AddLists(List<long> test_list, Tuple<long, long> test_tup) {\n        long result = 0;\n        for (long i = 0; i < test_list.Length(); i++) {\n            result += test_list.Get(i) * test_tup.Get(i);\n        }\n        return new Tuple<long, long, long, long, long>(result, test_list.Length(), test_list.Length(), test_list.Length(), test_list.Length());\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AddLists((new List<long>(new long[]{(long)5L, (long)6L, (long)7L})), (Tuple.Create(9L, 10L))).Equals((Tuple.Create(9L, 10L, 5L, 6L, 7L))));",
            "Debug.Assert(AddLists((new List<long>(new long[]{(long)6L, (long)7L, (long)8L})), (Tuple.Create(10L, 11L))).Equals((Tuple.Create(10L, 11L, 6L, 7L, 8L))));",
            "Debug.Assert(AddLists((new List<long>(new long[]{(long)7L, (long)8L, (long)9L})), (Tuple.Create(11L, 12L))).Equals((Tuple.Create(11L, 12L, 7L, 8L, 9L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "Write a function to merge three lists into a single sorted list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> MergeSortedList(List<long> num1, List<long> num2, List<long> num3) {\n        List<long> result = new ArrayList<long>();\n        long sum = 0;\n        for (long num : num1) {\n            sum += num;\n            result.add(sum);\n        }\n        for (long num : num2) {\n            sum += num;\n            result.add(sum);\n        }\n        for (long num : num3) {\n            sum += num;\n            result.add(sum);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MergeSortedList((new List<long>(new long[]{(long)25L, (long)24L, (long)15L, (long)4L, (long)5L, (long)29L, (long)110L})), (new List<long>(new long[]{(long)19L, (long)20L, (long)11L, (long)56L, (long)25L, (long)233L, (long)154L})), (new List<long>(new long[]{(long)24L, (long)26L, (long)54L, (long)48L}))).Equals((new List<long>(new long[]{(long)4L, (long)5L, (long)11L, (long)15L, (long)19L, (long)20L, (long)24L, (long)24L, (long)25L, (long)25L, (long)26L, (long)29L, (long)48L, (long)54L, (long)56L, (long)110L, (long)154L, (long)233L}))));",
            "Debug.Assert(MergeSortedList((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)6L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)7L, (long)11L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)7L, (long)8L, (long)12L}))).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)5L, (long)6L, (long)7L, (long)7L, (long)8L, (long)8L, (long)9L, (long)11L, (long)12L}))));",
            "Debug.Assert(MergeSortedList((new List<long>(new long[]{(long)18L, (long)14L, (long)10L, (long)9L, (long)8L, (long)7L, (long)9L, (long)3L, (long)2L, (long)4L, (long)1L})), (new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)25L, (long)58L})), (new List<long>(new long[]{(long)12L, (long)74L, (long)9L, (long)50L, (long)61L, (long)41L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)7L, (long)8L, (long)9L, (long)9L, (long)9L, (long)10L, (long)12L, (long)14L, (long)14L, (long)18L, (long)22L, (long)25L, (long)25L, (long)35L, (long)41L, (long)50L, (long)58L, (long)61L, (long)65L, (long)74L, (long)75L, (long)85L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "Write a csthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long OddEquivalent(string s, long n) {\n        long result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '1') {\n                result++;\n            }\n            else {\n                result = OddEquivalent(s, result);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(OddEquivalent((\"011001\"), (6L)) == (3L));",
            "Debug.Assert(OddEquivalent((\"11011\"), (5L)) == (4L));",
            "Debug.Assert(OddEquivalent((\"1010\"), (4L)) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckInteger(string text) {\n        int num = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == '0') {\n                num = 0;\n            } else if (text.charAt(i) == '1') {\n                num = 1;\n            } else {\n                return false;\n            }\n        }\n        return num == 0 || num == 1;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckInteger((\"python\")) == (false));",
            "Debug.Assert(CheckInteger((\"1\")) == (true));",
            "Debug.Assert(CheckInteger((\"12345\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "Write a function to convert a given tuple of positive integers into a single integer.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long TupleToInt(Tuple<long, long, long> nums) {\n        long result = 0;\n        for (int i = 0; i < nums.Length; i++) {\n            result += nums.Tuple[i];\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TupleToInt((Tuple.Create(1L, 2L, 3L))) == (123L));",
            "Debug.Assert(TupleToInt((Tuple.Create(4L, 5L, 6L))) == (456L));",
            "Debug.Assert(TupleToInt((Tuple.Create(5L, 6L, 7L))) == (567L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "Write a function to convert all possible convertible elements in a list of lists to floats.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Tuple<float, float>> ListToFloat(List<Tuple<string, string>> test_list) {\n        List<Tuple<float, float>> result = new ArrayList<Tuple<float, float>>();\n        for (Tuple<string, string> tuple : test_list) {\n            result.add(new Tuple<float, float>(Float.parseFloat(tuple.first), Float.parseFloat(tuple.second)));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ListToFloat((new List<Tuple<string, string>>(new Tuple<string, string>[]{(Tuple<string, string>)Tuple.Create(\"3\", \"4\"), (Tuple<string, string>)Tuple.Create(\"1\", \"26.45\"), (Tuple<string, string>)Tuple.Create(\"7.32\", \"8\"), (Tuple<string, string>)Tuple.Create(\"4\", \"8\")}))).Equals((new List<Tuple<float, float>>(new Tuple<float, float>[]{(Tuple<float, float>)Tuple.Create(3.0f, 4.0f), (Tuple<float, float>)Tuple.Create(1.0f, 26.45f), (Tuple<float, float>)Tuple.Create(7.32f, 8.0f), (Tuple<float, float>)Tuple.Create(4.0f, 8.0f)}))));",
            "Debug.Assert(ListToFloat((new List<Tuple<string, string>>(new Tuple<string, string>[]{(Tuple<string, string>)Tuple.Create(\"4\", \"4\"), (Tuple<string, string>)Tuple.Create(\"2\", \"27\"), (Tuple<string, string>)Tuple.Create(\"4.12\", \"9\"), (Tuple<string, string>)Tuple.Create(\"7\", \"11\")}))).Equals((new List<Tuple<float, float>>(new Tuple<float, float>[]{(Tuple<float, float>)Tuple.Create(4.0f, 4.0f), (Tuple<float, float>)Tuple.Create(2.0f, 27.0f), (Tuple<float, float>)Tuple.Create(4.12f, 9.0f), (Tuple<float, float>)Tuple.Create(7.0f, 11.0f)}))));",
            "Debug.Assert(ListToFloat((new List<Tuple<string, string>>(new Tuple<string, string>[]{(Tuple<string, string>)Tuple.Create(\"6\", \"78\"), (Tuple<string, string>)Tuple.Create(\"5\", \"26.45\"), (Tuple<string, string>)Tuple.Create(\"1.33\", \"4\"), (Tuple<string, string>)Tuple.Create(\"82\", \"13\")}))).Equals((new List<Tuple<float, float>>(new Tuple<float, float>[]{(Tuple<float, float>)Tuple.Create(6.0f, 78.0f), (Tuple<float, float>)Tuple.Create(5.0f, 26.45f), (Tuple<float, float>)Tuple.Create(1.33f, 4.0f), (Tuple<float, float>)Tuple.Create(82.0f, 13.0f)}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "Write a function to convert a string to a list of strings split on the space character.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> StringToList(string str) {\n        List<string> list = new ArrayList<string>();\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) =='') {\n                list.add(str.substring(0, i));\n            }\n        }\n        return list;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(StringToList((\"python programming\")).Equals((new List<string>(new string[]{(string)\"python\", (string)\"programming\"}))));",
            "Debug.Assert(StringToList((\"lists tuples strings\")).Equals((new List<string>(new string[]{(string)\"lists\", (string)\"tuples\", (string)\"strings\"}))));",
            "Debug.Assert(StringToList((\"write a program\")).Equals((new List<string>(new string[]{(string)\"write\", (string)\"a\", (string)\"program\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "Write a csthon function to find the element that appears only once in a sorted list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Search(List<long> arr) {\n        long count = 0;\n        for (long i : arr) {\n            if (i == arr[0]) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));",
            "Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));",
            "Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "Write a csthon function to remove first and last occurrence of a given character from the string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string RemoveOcc(string s, string ch) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        if (ch == null || ch.length() == 0) {\n            return s;\n        }\n        string result = \"\";\n        int index = 0;\n        while (index < s.length()) {\n            if (s.charAt(index) == ch.charAt(0)) {\n                result = s.substring(index, index + 1);\n                index++;\n            } else {\n                index++;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveOcc((\"hello\"), (\"l\")).Equals((\"heo\")));",
            "Debug.Assert(RemoveOcc((\"abcda\"), (\"a\")).Equals((\"bcd\")));",
            "Debug.Assert(RemoveOcc((\"PHP\"), (\"P\")).Equals((\"H\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MaxProductTuple(List<Tuple<long, long>> list1) {\n        long max = 0;\n        for (int i = 0; i < list1.Length; i++) {\n            long a = list1[i].A;\n            long b = list1[i].B;\n            if (a > b) {\n                max = max + a;\n            } else {\n                max = max + b;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 7L), (Tuple<long, long>)Tuple.Create(2L, 6L), (Tuple<long, long>)Tuple.Create(1L, 8L), (Tuple<long, long>)Tuple.Create(4L, 9L)}))) == (36L));",
            "Debug.Assert(MaxProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(10L, 20L), (Tuple<long, long>)Tuple.Create(15L, 2L), (Tuple<long, long>)Tuple.Create(5L, 10L)}))) == (200L));",
            "Debug.Assert(MaxProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(11L, 44L), (Tuple<long, long>)Tuple.Create(10L, 15L), (Tuple<long, long>)Tuple.Create(20L, 5L), (Tuple<long, long>)Tuple.Create(12L, 9L)}))) == (484L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long AmicableNumbersSum(long limit) {\n        long sum = 0;\n        for (int i = 1; i <= limit; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AmicableNumbersSum((999L)) == (504L));",
            "Debug.Assert(AmicableNumbersSum((9999L)) == (31626L));",
            "Debug.Assert(AmicableNumbersSum((99L)) == (0L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindLength(string str) {\n        long max = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str[i] == 0) {\n                max = Math.max(max, i);\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindLength((\"11000010001\")) == (6L));",
            "Debug.Assert(FindLength((\"10111\")) == (1L));",
            "Debug.Assert(FindLength((\"11011101100101\")) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "Write a csthon function to find the sum of common divisors of two given numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Sum(long a, long b) {\n        long sum = 0;\n        while (a!= 0) {\n            sum += a % b;\n            a /= b;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Sum((10L), (15L)) == (6L));",
            "Debug.Assert(Sum((100L), (150L)) == (93L));",
            "Debug.Assert(Sum((4L), (6L)) == (3L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "Write a function to multiply two integers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MultiplyInt(long x, long y) {\n        return x * y;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MultiplyInt((10L), (20L)) == (200L));",
            "Debug.Assert(MultiplyInt((5L), (10L)) == (50L));",
            "Debug.Assert(MultiplyInt((4L), (8L)) == (32L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "Write a function to find words that are longer than n characters from a given list of words.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> LongWords(long n, string str) {\n        List<string> words = new ArrayList<string>();\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) > n) {\n                words.add(str.substring(0, i));\n            }\n        }\n        return words;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(LongWords((3L), (\"python is a programming language\")).Equals((new List<string>(new string[]{(string)\"python\", (string)\"programming\", (string)\"language\"}))));",
            "Debug.Assert(LongWords((2L), (\"writing a program\")).Equals((new List<string>(new string[]{(string)\"writing\", (string)\"program\"}))));",
            "Debug.Assert(LongWords((5L), (\"sorting list\")).Equals((new List<string>(new string[]{(string)\"sorting\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "Write your code here.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool MagicSquareTest(List<List<long>> my_matrix) {\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MagicSquareTest((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)12L, (long)1L, (long)14L}), (List<long>)new List<long>(new long[]{(long)2L, (long)13L, (long)8L, (long)11L}), (List<long>)new List<long>(new long[]{(long)16L, (long)3L, (long)10L, (long)5L}), (List<long>)new List<long>(new long[]{(long)9L, (long)6L, (long)15L, (long)4L})}))) == (true));",
            "Debug.Assert(MagicSquareTest((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)1L}), (List<long>)new List<long>(new long[]{(long)4L, (long)3L, (long)8L})}))) == (true));",
            "Debug.Assert(MagicSquareTest((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)1L}), (List<long>)new List<long>(new long[]{(long)4L, (long)3L, (long)7L})}))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<long>> SortMatrix(List<List<long>> M) {\n        List<List<long>> SortedMatrix = new ArrayList<List<long>>();\n        for (int i = 0; i < M.size(); i++) {\n            List<long> row = new ArrayList<long>();\n            for (int j = 0; j < M.get(i).size(); j++) {\n                row.add(M.get(i).get(j));\n            }\n            SortedMatrix.add(row);\n        }\n        return SortedMatrix;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)5L})}))));",
            "Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)-2L, (long)4L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)-1L, (long)1L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)-2L, (long)4L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)-1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})}))));",
            "Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)1L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)8L, (long)9L})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "Write a function to find the item with maximum frequency in a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MaxOccurrences(List<long> nums) {\n        long max = 0;\n        for (long num : nums) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxOccurrences((new List<long>(new long[]{(long)2L, (long)3L, (long)8L, (long)4L, (long)7L, (long)9L, (long)8L, (long)2L, (long)6L, (long)5L, (long)1L, (long)6L, (long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)6L, (long)9L, (long)1L, (long)2L}))) == (2L));",
            "Debug.Assert(MaxOccurrences((new List<long>(new long[]{(long)2L, (long)3L, (long)8L, (long)4L, (long)7L, (long)9L, (long)8L, (long)7L, (long)9L, (long)15L, (long)14L, (long)10L, (long)12L, (long)13L, (long)16L, (long)18L}))) == (8L));",
            "Debug.Assert(MaxOccurrences((new List<long>(new long[]{(long)10L, (long)20L, (long)20L, (long)30L, (long)40L, (long)90L, (long)80L, (long)50L, (long)30L, (long)20L, (long)50L, (long)10L}))) == (20L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "Write a csthon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string ReverseVowels(string str1) {\n        string str2 = \"\";\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) == 'y') {\n                str2 += str1.charAt(i);\n            }\n        }\n        return str2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ReverseVowels((\"Python\")).Equals((\"Python\")));",
            "Debug.Assert(ReverseVowels((\"USA\")).Equals((\"ASU\")));",
            "Debug.Assert(ReverseVowels((\"ab\")).Equals((\"ab\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "Write a function to convert a list to a string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string TupString(List<string> tup1) {\n        string str = \"\";\n        for (int i = 0; i < tup1.size(); i++) {\n            str += tup1.get(i);\n        }\n        return str;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TupString((new List<string>(new string[]{(string)\"e\", (string)\"x\", (string)\"e\", (string)\"r\", (string)\"c\", (string)\"i\", (string)\"s\", (string)\"e\", (string)\"s\"}))).Equals((\"exercises\")));",
            "Debug.Assert(TupString((new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\"}))).Equals((\"python\")));",
            "Debug.Assert(TupString((new List<string>(new string[]{(string)\"p\", (string)\"r\", (string)\"o\", (string)\"g\", (string)\"r\", (string)\"a\", (string)\"m\"}))).Equals((\"program\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SumNegativenum(List<long> nums) {\n        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SumNegativenum((new List<long>(new long[]{(long)2L, (long)4L, (long)-6L, (long)-9L, (long)11L, (long)-12L, (long)14L, (long)-5L, (long)17L}))) == (-32L));",
            "Debug.Assert(SumNegativenum((new List<long>(new long[]{(long)10L, (long)15L, (long)-14L, (long)13L, (long)-18L, (long)12L, (long)-20L}))) == (-52L));",
            "Debug.Assert(SumNegativenum((new List<long>(new long[]{(long)19L, (long)-65L, (long)57L, (long)39L, (long)152L, (long)-639L, (long)121L, (long)44L, (long)90L, (long)-190L}))) == (-894L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "Write a function to find the nth hexagonal number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long HexagonalNum(long n) {\n        long result = 0;\n        while (n > 0) {\n            result += n % 2;\n            n /= 2;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(HexagonalNum((10L)) == (190L));",
            "Debug.Assert(HexagonalNum((5L)) == (45L));",
            "Debug.Assert(HexagonalNum((7L)) == (91L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "Write a csthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsSumOfPowersOfTwo(long n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return false;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return false;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {\n            return false;\n        }\n        if (n == 8) {\n            return true;\n        }\n        if (n == 9) {\n            return false;\n        }\n        if (n == 10) {\n            return true;\n        }\n        if (n == 11) {\n            return false;\n        }\n        if (n == 12) {\n            return true;\n        }\n        if (n == 13) {\n            return false;\n        }\n        if (n == 14) {\n            return true;\n        }\n        if (n == 15) {\n            return false;\n        }\n        if (n == 16) {\n            return true;\n        }\n        if (n == 17) {\n            return false;\n        }\n        if (n == 18) {\n            return true;\n        }\n        if (n == 19) {\n            return false;\n        }\n        if (n == 20) {\n            return true;\n        }\n        if (n == 21) {\n            return false;\n        }\n        if (n == 22) {\n            return true;\n        }\n        if (n == 23) {\n            return false;\n        }\n        if\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsSumOfPowersOfTwo((10L)) == (true));",
            "Debug.Assert(IsSumOfPowersOfTwo((7L)) == (false));",
            "Debug.Assert(IsSumOfPowersOfTwo((14L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "Write a function to sort a list of elements.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> PancakeSort(List<long> nums) {\n        List<long> sorted = new ArrayList<long>();\n        long[] numsArray = nums.ToArray();\n        for (int i = 0; i < numsArray.length; i++) {\n            sorted.Add(numsArray[i]);\n        }\n        return sorted;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));",
            "Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));",
            "Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "Write a function to count number items that are identical in the same position of three given lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (long i : list1) {\n            if (i == list2.get(0)) {\n                count++;\n            }\n            if (i == list2.get(1)) {\n                count++;\n            }\n            if (i == list2.get(2)) {\n                count++;\n            }\n            if (i == list2.get(3)) {\n                count++;\n            }\n        }\n        for (long i : list3) {\n            if (i == list2.get(0)) {\n                count++;\n            }\n            if (i == list2.get(1)) {\n                count++;\n            }\n            if (i == list2.get(2)) {\n                count++;\n            }\n            if (i == list2.get(3)) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));",
            "Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));",
            "Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "143",
        "title": "find_lists",
        "text": "Write a function to find number of lists present in the given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindLists(List<object> Input) {\n        long Count = 0;\n        for (int i = 0; i < Input.Length; i++) {\n            if (Input[i]!= null) {\n                Count++;\n            }\n        }\n        return Count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindLists((new List<object>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L})}))) == (2L));",
            "Debug.Assert(FindLists((new List<object>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L})}))) == (3L));",
            "Debug.Assert(FindLists((new List<object>(new long[]{(long)9L, (long)8L, (long)7L, (long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L}))) == (1L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "Write a csthon function to find the maximum difference between any two elements in a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MaxAbsDiff(List<long> arr) {\n        long max = 0;\n        for (long i = 0; i < arr.Length; i++) {\n            long diff = arr[i] - arr[i];\n            if (diff > max) {\n                max = diff;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxAbsDiff((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)3L}))) == (4L));",
            "Debug.Assert(MaxAbsDiff((new List<long>(new long[]{(long)9L, (long)3L, (long)2L, (long)5L, (long)1L}))) == (8L));",
            "Debug.Assert(MaxAbsDiff((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "Write a csthon function to find the volume of a triangular prism.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindVolume(long l, long b, long h) {\n        long a = l;\n        long b2 = b;\n        long h2 = h;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long n = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long a1 = 0;\n        long a2 = 0;\n        long a3 = 0;\n        long a4 = 0;\n        long a5 = 0;\n        long a6 = 0;\n        long a7 = 0;\n        long a8 = 0;\n        long a9 = 0;\n        long a10 = 0;\n        long a11 = 0;\n        long a12 = 0;\n        long a13 = 0;\n        long a14 = 0;\n        long a15 = 0;\n        long a16 = 0;\n        long a17 = 0;\n        long a18 = 0;\n        long a19 = 0;\n        long a20 = 0;\n        long a21 = 0;\n        long a22 = 0;\n        long a23 = 0;\n        long a24 = 0;\n        long a25 = 0;\n        long a26 = 0;\n        long a27 = 0;\n        long a28 = 0;\n        long a29 = 0;\n        long a30 = 0;\n        long a31 = 0;\n        long a32 = 0;\n        long a33 = 0;\n        long a34 = 0;\n        long a35 = 0;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindVolume((10L), (8L), (6L)) == (240L));",
            "Debug.Assert(FindVolume((3L), (2L), (2L)) == (6L));",
            "Debug.Assert(FindVolume((1L), (2L), (1L)) == (1L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long> FindSolution(long a, long b, long n) {\n        if (n == 0) {\n            return null;\n        }\n        long x = a;\n        long y = b;\n        long x2 = x;\n        long y2 = y;\n        while (x2 < n) {\n            x2 = x2 + x;\n            y2 = y2 + y;\n        }\n        return new Tuple<>(x2, y2);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindSolution((2L), (3L), (7L)).Equals((Tuple.Create(2L, 1L))));",
            "Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));",
            "Debug.Assert(FindSolution((1L), (13L), (17L)).Equals((Tuple.Create(4L, 1L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "Write a function to remove all elements from a given list present in another list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> RemoveElements(List<long> list1, List<long> list2) {\n        List<long> result = new ArrayList<long>();\n        for (long i : list1) {\n            if (list2.contains(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveElements((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L, (long)10L}))));",
            "Debug.Assert(RemoveElements((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L, (long)9L, (long)10L}))));",
            "Debug.Assert(RemoveElements((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)5L, (long)7L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)8L, (long)9L, (long)10L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SumSeries(long n) {\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SumSeries((6L)) == (12L));",
            "Debug.Assert(SumSeries((10L)) == (30L));",
            "Debug.Assert(SumSeries((9L)) == (25L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool AreEquivalent(long num1, long num2) {\n        if (num1 == 0) return false;\n        if (num2 == 0) return true;\n        long num1_div = num1 / num1;\n        long num2_div = num2 / num2;\n        if (num1_div == num2_div) return true;\n        return false;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AreEquivalent((36L), (57L)) == (false));",
            "Debug.Assert(AreEquivalent((2L), (4L)) == (false));",
            "Debug.Assert(AreEquivalent((23L), (47L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountCharPosition(string str1) {\n        long count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (Character.isLetter(str1.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountCharPosition((\"xbcefg\")) == (2L));",
            "Debug.Assert(CountCharPosition((\"ABcED\")) == (3L));",
            "Debug.Assert(CountCharPosition((\"AbgdeF\")) == (5L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindEvenPair(List<long> A) {\n        long result = 0;\n        for (long x : A) {\n            if (x % 2 == 0) {\n                result++;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindEvenPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L}))) == (4L));",
            "Debug.Assert(FindEvenPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L}))) == (9L));",
            "Debug.Assert(FindEvenPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (1L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "Write a csthon function to find the smallest power of 2 greater than or equal to n.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long NextPowerOf2(long n) {\n        long result = 1;\n        while (result < n) {\n            result <<= 1;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(NextPowerOf2((0L)) == (1L));",
            "Debug.Assert(NextPowerOf2((5L)) == (8L));",
            "Debug.Assert(NextPowerOf2((17L)) == (32L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "Write a function to count the number of occurrences of a number in a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Frequency(List<long> a, long x) {\n        long count = 0;\n        for (long i = 0; i < a.Length; i++) {\n            if (a.Get(i) == x) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Frequency((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (4L)) == (0L));",
            "Debug.Assert(Frequency((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})), (3L)) == (3L));",
            "Debug.Assert(Frequency((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)1L, (long)2L})), (1L)) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "Write your code here",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool TextLowercaseUnderscore(string text) {\n        return false;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TextLowercaseUnderscore((\"aab_cbbbc\")) == (true));",
            "Debug.Assert(TextLowercaseUnderscore((\"aab_Abbbc\")) == (false));",
            "Debug.Assert(TextLowercaseUnderscore((\"Aaab_abbbc\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SumRangeList(List<long> list1, long m, long n) {\n        long sum = 0;\n        for (long i = 0; i < list1.size(); i++) {\n            sum += list1.get(i);\n            if (i + 1 < list1.size()) {\n                sum += list1.get(i + 1);\n            }\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SumRangeList((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)6L, (long)8L, (long)3L, (long)4L, (long)9L, (long)10L, (long)11L, (long)8L, (long)12L})), (8L), (10L)) == (29L));",
            "Debug.Assert(SumRangeList((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)6L, (long)8L, (long)3L, (long)4L, (long)9L, (long)10L, (long)11L, (long)8L, (long)12L})), (5L), (7L)) == (16L));",
            "Debug.Assert(SumRangeList((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)6L, (long)8L, (long)3L, (long)4L, (long)9L, (long)10L, (long)11L, (long)8L, (long)12L})), (7L), (10L)) == (38L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long PerimeterPentagon(long a) {\n        long perimeter = 0;\n        for (int i = 0; i < 6; i++) {\n            perimeter += (a - i) * (a - i);\n        }\n        return perimeter;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(PerimeterPentagon((5L)) == (25L));",
            "Debug.Assert(PerimeterPentagon((10L)) == (50L));",
            "Debug.Assert(PerimeterPentagon((15L)) == (75L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountOccurance(string s) {\n        long count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) =='s') {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountOccurance((\"letstdlenstdporstd\")) == (3L));",
            "Debug.Assert(CountOccurance((\"truststdsolensporsd\")) == (1L));",
            "Debug.Assert(CountOccurance((\"makestdsostdworthit\")) == (2L));",
            "Debug.Assert(CountOccurance((\"stds\")) == (1L));",
            "Debug.Assert(CountOccurance((\"\")) == (0L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SquarePerimeter(long a) {\n        long perimeter = 0;\n        for (int i = 0; i < a; i++) {\n            perimeter += (a - i) * (a - i);\n        }\n        return perimeter;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SquarePerimeter((10L)) == (40L));",
            "Debug.Assert(SquarePerimeter((5L)) == (20L));",
            "Debug.Assert(SquarePerimeter((4L)) == (16L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string RemoveDirtyChars(string str, string second_string) {\n        string result = \"\";\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isWhitespace(str.charAt(i))) {\n                result += str.charAt(i);\n            } else {\n                if (Character.isDigit(str.charAt(i))) {\n                    result += str.charAt(i);\n                } else {\n                    result += second_string.charAt(i);\n                }\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveDirtyChars((\"probasscurve\"), (\"pros\")).Equals((\"bacuve\")));",
            "Debug.Assert(RemoveDirtyChars((\"digitalindia\"), (\"talent\")).Equals((\"digiidi\")));",
            "Debug.Assert(RemoveDirtyChars((\"exoticmiles\"), (\"toxic\")).Equals((\"emles\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "Write a function to find whether a given list of integers contains any duplicate element.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool TestDuplicate(List<long> arraynums) {\n        long[] array = arraynums.ToArray();\n        long[] array2 = new long[array.length];\n        for (int i = 0; i < array.length; i++) {\n            array2[i] = array[i];\n        }\n        return TestDuplicate(array2);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));",
            "Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));",
            "Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsWoodall(long x) {\n        return x == 0 || x == 1;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsWoodall((383L)) == (true));",
            "Debug.Assert(IsWoodall((254L)) == (false));",
            "Debug.Assert(IsWoodall((200L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "222",
        "title": "check_type",
        "text": "Write a function to check if all the elements in tuple have same data type or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckType(object test_tuple) {\n        if (test_tuple == null) {\n            return false;\n        }\n        if (test_tuple.getClass()!= tuple.getClass()) {\n            return false;\n        }\n        for (int i = 0; i < tuple.getLength(); i++) {\n            if (test_tuple.get(i)!= tuple.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckType(Tuple.Create(5L, 6L, 7L, 3L, 5L, 6L)) == (true));",
            "Debug.Assert(CheckType(Tuple.Create(1L, 2L, \"4\")) == (false));",
            "Debug.Assert(CheckType(Tuple.Create(3L, 2L, 1L, 4L, 5L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        if (arr.Length() == 0) {\n            return false;\n        }\n        long m = arr.Last();\n        if (m == x) {\n            return true;\n        }\n        if (m > x) {\n            return IsMajority(arr, n - 1, x);\n        }\n        return IsMajority(arr, n, m);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));",
            "Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));",
            "Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));",
            "Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "Write a csthon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountSetBits(long n) {\n        long result = 0;\n        while (n!= 0) {\n            result += (n & 1);\n            n >>= 1;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountSetBits((2L)) == (1L));",
            "Debug.Assert(CountSetBits((4L)) == (1L));",
            "Debug.Assert(CountSetBits((6L)) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "Write a csthon function to remove the characters which have odd index values of a given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string OddValuesString(string str) {\n        string oddValuesString = \"\";\n        for (int i = 0; i < str.length(); i++) {\n            if (str[i] == '1') oddValuesString += \"1\";\n            else oddValuesString += str[i];\n        }\n        return oddValuesString;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(OddValuesString((\"abcdef\")).Equals((\"ace\")));",
            "Debug.Assert(OddValuesString((\"python\")).Equals((\"pto\")));",
            "Debug.Assert(OddValuesString((\"data\")).Equals((\"dt\")));",
            "Debug.Assert(OddValuesString((\"lambs\")).Equals((\"lms\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "Write a function to find minimum of three numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MinOfThree(long a, long b, long c) {\n        long min = a;\n        if (b < min) min = b;\n        if (c < min) min = c;\n        return min;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MinOfThree((10L), (20L), (0L)) == (0L));",
            "Debug.Assert(MinOfThree((19L), (15L), (18L)) == (15L));",
            "Debug.Assert(MinOfThree((-10L), (-20L), (-30L)) == (-30L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "Write a csthon function to check whether all the bits are unset in the given range or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool AllBitsSetInTheGivenRange(long n, long l, long r) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {\n            return true;\n        }\n        if (n == 8) {\n            return true;\n        }\n        if (n == 9) {\n            return true;\n        }\n        if (n == 10) {\n            return true;\n        }\n        if (n == 11) {\n            return true;\n        }\n        if (n == 12) {\n            return true;\n        }\n        if (n == 13) {\n            return true;\n        }\n        if (n == 14) {\n            return true;\n        }\n        if (n == 15) {\n            return true;\n        }\n        if (n == 16) {\n            return true;\n        }\n        if (n == 17) {\n            return true;\n        }\n        if (n == 18) {\n            return true;\n        }\n        if (n == 19) {\n            return true;\n        }\n        if (n == 20) {\n            return true;\n        }\n        if (n == 21) {\n            return true;\n        }\n        if (n == 22) {\n            return true;\n        }\n        if (n == 23) {\n            return true;\n        }\n\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AllBitsSetInTheGivenRange((4L), (1L), (2L)) == (true));",
            "Debug.Assert(AllBitsSetInTheGivenRange((17L), (2L), (4L)) == (true));",
            "Debug.Assert(AllBitsSetInTheGivenRange((39L), (4L), (6L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new ArrayList<long>();\n        for (long i = 0; i < n; i++) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));",
            "Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));",
            "Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string ReplaceBlank(string str1, string char) {\n        string result = \"\";\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) == char) {\n                result = result + char;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ReplaceBlank((\"hello people\"), (\"@\")).Equals((\"hello@people\")));",
            "Debug.Assert(ReplaceBlank((\"python program language\"), (\"$\")).Equals((\"python$program$language\")));",
            "Debug.Assert(ReplaceBlank((\"blank space\"), (\"-\")).Equals((\"blank-space\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "Write a function to find the volume of a cube given its side length.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long VolumeCube(long l) {\n        long volume = 0;\n        for (int i = 0; i < l; i++) {\n            volume += VolumeCube(l - i);\n        }\n        return volume;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(VolumeCube((3L)) == (27L));",
            "Debug.Assert(VolumeCube((2L)) == (8L));",
            "Debug.Assert(VolumeCube((5L)) == (125L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "237",
        "title": "check_occurences",
        "text": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Dictionary<Tuple<long, long>,long> CheckOccurences(List<Tuple<long, long>> test_list) {\n        Dictionary<Tuple<long, long>,long> result = new Dictionary<Tuple<long, long>,long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            Tuple<long, long> tuple = test_list.get(i);\n            long count = 0;\n            for (int j = 0; j < tuple.size(); j++) {\n                count += tuple.get(j);\n            }\n            result.Add(tuple, count);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckOccurences((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(1L, 3L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(5L, 2L), (Tuple<long, long>)Tuple.Create(6L, 3L)}))).Equals((new Dictionary<Tuple<long, long>,long>(){{Tuple.Create(1L, 3L), 2L}, {Tuple.Create(2L, 5L), 2L}, {Tuple.Create(3L, 6L), 1L}})));",
            "Debug.Assert(CheckOccurences((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 2L), (Tuple<long, long>)Tuple.Create(2L, 4L), (Tuple<long, long>)Tuple.Create(3L, 6L), (Tuple<long, long>)Tuple.Create(6L, 3L), (Tuple<long, long>)Tuple.Create(7L, 4L)}))).Equals((new Dictionary<Tuple<long, long>,long>(){{Tuple.Create(2L, 4L), 2L}, {Tuple.Create(3L, 6L), 2L}, {Tuple.Create(4L, 7L), 1L}})));",
            "Debug.Assert(CheckOccurences((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(13L, 2L), (Tuple<long, long>)Tuple.Create(11L, 23L), (Tuple<long, long>)Tuple.Create(12L, 25L), (Tuple<long, long>)Tuple.Create(25L, 12L), (Tuple<long, long>)Tuple.Create(16L, 23L)}))).Equals((new Dictionary<Tuple<long, long>,long>(){{Tuple.Create(2L, 13L), 1L}, {Tuple.Create(11L, 23L), 1L}, {Tuple.Create(12L, 25L), 2L}, {Tuple.Create(16L, 23L), 1L}})));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "Write a csthon function to count the number of non-empty substrings of a given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long NumberOfSubstrings(string str) {\n        long result = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str[i]!='') {\n                result++;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(NumberOfSubstrings((\"abc\")) == (6L));",
            "Debug.Assert(NumberOfSubstrings((\"abcd\")) == (10L));",
            "Debug.Assert(NumberOfSubstrings((\"abcde\")) == (15L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long GetTotalNumberOfSequences(long m, long n) {\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            if (m % 2 == 0) {\n                result += i;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(GetTotalNumberOfSequences((10L), (4L)) == (4L));",
            "Debug.Assert(GetTotalNumberOfSequences((5L), (2L)) == (6L));",
            "Debug.Assert(GetTotalNumberOfSequences((16L), (3L)) == (84L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "240",
        "title": "replace_list",
        "text": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<object> ReplaceList(List<object> list1, List<object> list2) {\n        List<object> result = new ArrayList<object>();\n        for (int i = 0; i < list1.size(); i++) {\n            result.add(list1.get(i));\n        }\n        for (int i = 0; i < list2.size(); i++) {\n            result.add(list2.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ReplaceList((new List<object>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L, (long)10L})), (new List<object>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))).Equals((new List<object>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L, (long)2L, (long)4L, (long)6L, (long)8L}))));",
            "Debug.Assert(ReplaceList((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<object>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))));",
            "Debug.Assert(ReplaceList((new List<object>(new string[]{(string)\"red\", (string)\"blue\", (string)\"green\"})), (new List<object>(new string[]{(string)\"yellow\"}))).Equals((new List<object>(new string[]{(string)\"red\", (string)\"blue\", (string)\"yellow\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "Write a function to count the total number of characters in a string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountCharac(string str1) {\n        long count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1[i] =='') {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountCharac((\"python programming\")) == (18L));",
            "Debug.Assert(CountCharac((\"language\")) == (8L));",
            "Debug.Assert(CountCharac((\"words\")) == (5L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "Write a csthon function to find the next perfect square greater than a given number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long NextPerfectSquare(long N) {\n        long result = 1;\n        while (result < N) {\n            result *= result;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(NextPerfectSquare((35L)) == (36L));",
            "Debug.Assert(NextPerfectSquare((6L)) == (9L));",
            "Debug.Assert(NextPerfectSquare((9L)) == (16L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MaxSum(List<long> arr) {\n        long max = 0;\n        for (long i = 0; i < arr.Length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxSum((new List<long>(new long[]{(long)1L, (long)15L, (long)51L, (long)45L, (long)33L, (long)100L, (long)12L, (long)18L, (long)9L}))) == (194L));",
            "Debug.Assert(MaxSum((new List<long>(new long[]{(long)80L, (long)60L, (long)30L, (long)40L, (long)20L, (long)10L}))) == (210L));",
            "Debug.Assert(MaxSum((new List<long>(new long[]{(long)2L, (long)3L, (long)14L, (long)16L, (long)21L, (long)23L, (long)29L, (long)30L}))) == (138L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Lps(string str) {\n        long lps = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str[i] == str[i + 1]) {\n                lps = Math.max(lps, i + 1);\n            }\n        }\n        return lps;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Lps((\"TENS FOR TENS\")) == (5L));",
            "Debug.Assert(Lps((\"CARDIO FOR CARDS\")) == (7L));",
            "Debug.Assert(Lps((\"PART OF THE JOURNEY IS PART\")) == (9L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "Write a function to find the intersection of two lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> IntersectionArray(List<long> array_nums1, List<long> array_nums2) {\n        List<long> result = new ArrayList<long>();\n        long sum = 0;\n        for (long num : array_nums1) {\n            sum += num;\n            result.add(sum);\n        }\n        for (long num : array_nums2) {\n            sum += num;\n            result.add(sum);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)8L, (long)9L}))));",
            "Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)3L, (long)5L, (long)7L, (long)9L}))).Equals((new List<long>(new long[]{(long)3L, (long)5L, (long)7L, (long)9L}))));",
            "Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L}))).Equals((new List<long>(new long[]{(long)10L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "Write a csthon function that takes in a tuple and an element and counts the occcurences of the element in the list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountX(List<long> tup, long x) {\n        long count = 0;\n        for (long i : tup) {\n            if (i == x) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountX((new List<long>(new long[]{(long)10L, (long)8L, (long)5L, (long)2L, (long)10L, (long)15L, (long)10L, (long)8L, (long)5L, (long)8L, (long)8L, (long)2L})), (4L)) == (0L));",
            "Debug.Assert(CountX((new List<long>(new long[]{(long)10L, (long)8L, (long)5L, (long)2L, (long)10L, (long)15L, (long)10L, (long)8L, (long)5L, (long)8L, (long)8L, (long)2L})), (10L)) == (3L));",
            "Debug.Assert(CountX((new List<long>(new long[]{(long)10L, (long)8L, (long)5L, (long)2L, (long)10L, (long)15L, (long)10L, (long)8L, (long)5L, (long)8L, (long)8L, (long)2L})), (8L)) == (4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> InsertElement(List<string> list, string element) {\n        if (list == null) {\n            return null;\n        }\n        List<string> result = new ArrayList<string>();\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i).equals(element)) {\n                result.add(list.get(i));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(InsertElement((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Black\"})), (\"c\")).Equals((new List<string>(new string[]{(string)\"c\", (string)\"Red\", (string)\"c\", (string)\"Green\", (string)\"c\", (string)\"Black\"}))));",
            "Debug.Assert(InsertElement((new List<string>(new string[]{(string)\"python\", (string)\"java\"})), (\"program\")).Equals((new List<string>(new string[]{(string)\"program\", (string)\"python\", (string)\"program\", (string)\"java\"}))));",
            "Debug.Assert(InsertElement((new List<string>(new string[]{(string)\"happy\", (string)\"sad\"})), (\"laugh\")).Equals((new List<string>(new string[]{(string)\"laugh\", (string)\"happy\", (string)\"laugh\", (string)\"sad\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "Write a csthon function to convert complex numbers to polar coordinates.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<float, float> Convert(long numbers) {\n        float x = 0;\n        float y = 0;\n        float z = 0;\n        if (numbers == 0) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 1) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 2) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 3) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 4) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 5) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 6) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 7) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 8) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 9) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 10) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 11) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 12) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 13) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 14) {\n            return Tuple.Create(0, 0);\n        }\n        if (numbers == 15) {\n            return Tuple.Create(0, 0);\n        }\n        if\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Convert((1L)).Equals((Tuple.Create(1.0f, 0.0f))));",
            "Debug.Assert(Convert((4L)).Equals((Tuple.Create(4.0f, 0.0f))));",
            "Debug.Assert(Convert((5L)).Equals((Tuple.Create(5.0f, 0.0f))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<string>> CombinationsColors(List<string> l, long n) {\n        List<List<string>> res = new ArrayList<List<string>>();\n        for (int i = 0; i < l.size(); i++) {\n            List<string> l1 = new ArrayList<string>();\n            l1.add(l.get(i));\n            List<string> l2 = new ArrayList<string>();\n            l2.add(l.get(i));\n            List<string> l3 = new ArrayList<string>();\n            l3.add(l.get(i));\n            List<string> l4 = new ArrayList<string>();\n            l4.add(l.get(i));\n            List<string> l5 = new ArrayList<string>();\n            l5.add(l.get(i));\n            List<string> l6 = new ArrayList<string>();\n            l6.add(l.get(i));\n            List<string> l7 = new ArrayList<string>();\n            l7.add(l.get(i));\n            List<string> l8 = new ArrayList<string>();\n            l8.add(l.get(i));\n            List<string> l9 = new ArrayList<string>();\n            l9.add(l.get(i));\n            List<string> l10 = new ArrayList<string>();\n            l10.add(l.get(i));\n            List<string> l11 = new ArrayList<string>();\n            l11.add(l.get(i));\n            List<string> l12 = new ArrayList<string>();\n            l12.add(l.get(i));\n            List<string> l13\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CombinationsColors((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\"})), (1L)).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"Red\"}), (List<string>)new List<string>(new string[]{(string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Blue\"})}))));",
            "Debug.Assert(CombinationsColors((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\"})), (2L)).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Red\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Blue\", (string)\"Blue\"})}))));",
            "Debug.Assert(CombinationsColors((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\"})), (3L)).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Red\", (string)\"Red\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Red\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Red\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Blue\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Green\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Green\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Blue\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Blue\", (string)\"Blue\", (string)\"Blue\"})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "Write a csthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountPrimesNums(long n) {\n        long prime = 1;\n        while (prime < n) {\n            if (n % prime == 0) {\n                return prime;\n            }\n            prime = prime * prime;\n        }\n        return prime;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountPrimesNums((5L)) == (2L));",
            "Debug.Assert(CountPrimesNums((10L)) == (4L));",
            "Debug.Assert(CountPrimesNums((100L)) == (25L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "Write a function that takes in two numbers and returns a list with the second number and then the first number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> SwapNumbers(long a, long b) {\n        List<long> result = new ArrayList<long>();\n        long temp = a;\n        a = b;\n        b = temp;\n        result.add(a);\n        result.add(b);\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SwapNumbers((10L), (20L)).Equals((new List<long>(new long[]{(long)20L, (long)10L}))));",
            "Debug.Assert(SwapNumbers((15L), (17L)).Equals((new List<long>(new long[]{(long)17L, (long)15L}))));",
            "Debug.Assert(SwapNumbers((100L), (200L)).Equals((new List<long>(new long[]{(long)200L, (long)100L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "Write a function to maximize the given two lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<long>> MaximizeElements(List<List<long>> test_tup1, List<List<long>> test_tup2) {\n        List<List<long>> result = new ArrayList<List<long>>();\n        for (int i = 0; i < test_tup1.size(); i++) {\n            for (int j = 0; j < test_tup1.size(); j++) {\n                if (i == j) {\n                    continue;\n                }\n                long max = 0;\n                for (int k = 0; k < test_tup1.size(); k++) {\n                    if (i == k) {\n                        continue;\n                    }\n                    long temp = test_tup1.get(i) + test_tup1.get(k);\n                    if (temp > max) {\n                        max = temp;\n                    }\n                }\n                result.add(new ArrayList<long>(test_tup1.get(i)));\n                result.add(new ArrayList<long>(test_tup1.get(k)));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaximizeElements((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)10L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)3L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)4L, (long)9L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)7L, (long)10L})}))));",
            "Debug.Assert(MaximizeElements((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)11L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)4L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)2L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)5L, (long)10L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)8L, (long)11L})}))));",
            "Debug.Assert(MaximizeElements((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)4L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)12L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)5L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)6L, (long)11L}), (List<long>)new List<long>(new long[]{(long)4L, (long)11L}), (List<long>)new List<long>(new long[]{(long)9L, (long)12L})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long NewmanPrime(long n) {\n        if (n == 0) return 1;\n        if (n == 1) return 2;\n        if (n == 2) return 3;\n        if (n % 2 == 0) return 4;\n        if (n % 3 == 0) return 5;\n        if (n % 5 == 0) return 6;\n        if (n % 7 == 0) return 7;\n        if (n % 11 == 0) return 8;\n        if (n % 13 == 0) return 9;\n        if (n % 17 == 0) return 10;\n        if (n % 19 == 0) return 11;\n        if (n % 23 == 0) return 12;\n        if (n % 29 == 0) return 13;\n        if (n % 31 == 0) return 14;\n        if (n % 37 == 0) return 15;\n        if (n % 41 == 0) return 16;\n        if (n % 43 == 0) return 17;\n        if (n % 47 == 0) return 18;\n        if (n % 53 == 0) return 19;\n        if (n % 59 == 0) return 20;\n        if (n % 61 == 0) return 21;\n        if (n % 67 == 0) return 22;\n        if (n % 71 == 0) return 23;\n        if (n % 73 == 0) return 24;\n        if (n % 79 == 0) return 25;\n        if (n % 83 == 0) return 26;\n        if (n % 89 == 0) return 27;\n        if (n % 97 == 0) return 28;\n        if (n % 101 == 0) return 29;\n        if (n % 103 == 0) return 30;\n        if (n % 107 == 0) return 31;\n        if (n % 109 == 0) return 32;\n        if (n % 113 == 0) return 33;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(NewmanPrime((3L)) == (7L));",
            "Debug.Assert(NewmanPrime((4L)) == (17L));",
            "Debug.Assert(NewmanPrime((5L)) == (41L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "Write your code here.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long, long, long> DivisionElements(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n        long result = 0;\n        long test_tup1_result = 0;\n        long test_tup2_result = 0;\n        long test_tup1_result_1 = 0;\n        long test_tup2_result_1 = 0;\n        long test_tup1_result_2 = 0;\n        long test_tup2_result_2 = 0;\n        long test_tup1_result_3 = 0;\n        long test_tup2_result_3 = 0;\n        long test_tup1_result_4 = 0;\n        long test_tup2_result_4 = 0;\n        long test_tup1_result_5 = 0;\n        long test_tup2_result_5 = 0;\n        long test_tup1_result_6 = 0;\n        long test_tup2_result_6 = 0;\n        long test_tup1_result_7 = 0;\n        long test_tup2_result_7 = 0;\n        long test_tup1_result_8 = 0;\n        long test_tup2_result_8 = 0;\n        long test_tup1_result_9 = 0;\n        long test_tup2_result_9 = 0;\n        long test_tup1_result_10 = 0;\n        long test_tup2_result_10 = 0;\n        long test_tup1_result_11 = 0;\n        long test_tup2_result_11 = 0;\n        long test_tup\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(DivisionElements((Tuple.Create(10L, 4L, 6L, 9L)), (Tuple.Create(5L, 2L, 3L, 3L))).Equals((Tuple.Create(2L, 2L, 2L, 3L))));",
            "Debug.Assert(DivisionElements((Tuple.Create(12L, 6L, 8L, 16L)), (Tuple.Create(6L, 3L, 4L, 4L))).Equals((Tuple.Create(2L, 2L, 2L, 4L))));",
            "Debug.Assert(DivisionElements((Tuple.Create(20L, 14L, 36L, 18L)), (Tuple.Create(5L, 7L, 6L, 9L))).Equals((Tuple.Create(4L, 2L, 6L, 2L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "262",
        "title": "split_two_parts",
        "text": "Write your code here",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static object SplitTwoParts(List<object> list1, long L) {\n        List<object> list2 = new ArrayList<>();\n        for (int i = 0; i < L; i++) {\n            list2.add(list1.get(i));\n        }\n        return list2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SplitTwoParts((new List<object>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)1L})), (3L)).Equals(Tuple.Create(new List<long>(new long[]{(long)1L, (long)1L, (long)2L}), new List<long>(new long[]{(long)3L, (long)4L, (long)4L, (long)5L, (long)1L}))));",
            "Debug.Assert(SplitTwoParts((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\"})), (2L)).Equals(Tuple.Create(new List<string>(new string[]{(string)\"a\", (string)\"b\"}), new List<string>(new string[]{(string)\"c\", (string)\"d\"}))));",
            "Debug.Assert(SplitTwoParts((new List<object>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\"})), (4L)).Equals(Tuple.Create(new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\"}), new List<string>(new string[]{(string)\"o\", (string)\"n\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long DogAge(long h_age) {\n        long dog_age = 0;\n        long year = h_age / 365;\n        long month = (h_age - year * 365) / 30;\n        long day = (h_age - year * 365 - month * 30) / 30;\n        long year_month = year * 12 + month;\n        long year_day = year_month + day;\n        if (year_day > 365) {\n            year_day -= 365;\n        }\n        if (year_day > 30) {\n            year_day -= 30;\n        }\n        if (year_day > 1) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            year_day -= 1;\n        }\n        if (year_day > 0) {\n            \n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(DogAge((12L)) == (61L));",
            "Debug.Assert(DogAge((15L)) == (73L));",
            "Debug.Assert(DogAge((24L)) == (109L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "265",
        "title": "list_split",
        "text": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<object>> ListSplit(List<object> S, long step) {\n        List<List<object>> result = new ArrayList<List<object>>();\n        for (int i = 0; i < S.Length(); i += step) {\n            List<object> list = new ArrayList<object>();\n            for (int j = 0; j < S.Length(); j += step) {\n                list.Add(S.Get(j));\n            }\n            result.Add(list);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ListSplit((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"e\", (string)\"f\", (string)\"g\", (string)\"h\", (string)\"i\", (string)\"j\", (string)\"k\", (string)\"l\", (string)\"m\", (string)\"n\"})), (3L)).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"d\", (string)\"g\", (string)\"j\", (string)\"m\"}), (List<string>)new List<string>(new string[]{(string)\"b\", (string)\"e\", (string)\"h\", (string)\"k\", (string)\"n\"}), (List<string>)new List<string>(new string[]{(string)\"c\", (string)\"f\", (string)\"i\", (string)\"l\"})}))));",
            "Debug.Assert(ListSplit((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)11L, (long)12L, (long)13L, (long)14L})), (3L)).Equals((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)4L, (long)7L, (long)10L, (long)13L}), (List<long>)new List<long>(new long[]{(long)2L, (long)5L, (long)8L, (long)11L, (long)14L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L, (long)9L, (long)12L})}))));",
            "Debug.Assert(ListSplit((new List<object>(new string[]{(string)\"python\", (string)\"java\", (string)\"C\", (string)\"C++\", (string)\"DBMS\", (string)\"SQL\"})), (2L)).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"python\", (string)\"C\", (string)\"DBMS\"}), (List<string>)new List<string>(new string[]{(string)\"java\", (string)\"C++\", (string)\"SQL\"})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long LateralsurfaceCube(long l) {\n        long l1 = l;\n        long l2 = l1;\n        long l3 = l1;\n        long l4 = l1;\n        long l5 = l1;\n        long l6 = l1;\n        long l7 = l1;\n        long l8 = l1;\n        long l9 = l1;\n        long l10 = l1;\n        long l11 = l1;\n        long l12 = l1;\n        long l13 = l1;\n        long l14 = l1;\n        long l15 = l1;\n        long l16 = l1;\n        long l17 = l1;\n        long l18 = l1;\n        long l19 = l1;\n        long l20 = l1;\n        long l21 = l1;\n        long l22 = l1;\n        long l23 = l1;\n        long l24 = l1;\n        long l25 = l1;\n        long l26 = l1;\n        long l27 = l1;\n        long l28 = l1;\n        long l29 = l1;\n        long l30 = l1;\n        long l31 = l1;\n        long l32 = l1;\n        long l33 = l1;\n        long l34 = l1;\n        long l35 = l1;\n        long l36 = l1;\n        long l37 = l1;\n        long l38 = l1;\n        long l39 = l1;\n        long l40 = l1;\n        long l41 = l1;\n        long l42 = l1;\n        long l43 = l1;\n        long l44 = l1;\n        long l45 = l1;\n        long l46 = l1;\n        long l47 = l1;\n\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(LateralsurfaceCube((5L)) == (100L));",
            "Debug.Assert(LateralsurfaceCube((9L)) == (324L));",
            "Debug.Assert(LateralsurfaceCube((10L)) == (400L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "Write a csthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SquareSum(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n;\n            n = n / 2;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SquareSum((2L)) == (10L));",
            "Debug.Assert(SquareSum((3L)) == (35L));",
            "Debug.Assert(SquareSum((4L)) == (84L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "Write a function to find then'th star number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindStarNum(long n) {\n        long result = 0;\n        while (n > 0) {\n            result += n % 10;\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindStarNum((3L)) == (37L));",
            "Debug.Assert(FindStarNum((4L)) == (73L));",
            "Debug.Assert(FindStarNum((5L)) == (121L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "Write a function to find the ascii value of a character.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long AsciiValue(string k) {\n        long result = 0;\n        for (int i = 0; i < k.length(); i++) {\n            result = result * 256 + k.charAt(i);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AsciiValue((\"A\")) == (65L));",
            "Debug.Assert(AsciiValue((\"R\")) == (82L));",
            "Debug.Assert(AsciiValue((\"S\")) == (83L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "Write a csthon function to find the sum of even numbers at even positions of a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SumEvenAndEvenIndex(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Length; i++) {\n            if (i % 2 == 0) {\n                sum += arr[i];\n            }\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SumEvenAndEvenIndex((new List<long>(new long[]{(long)5L, (long)6L, (long)12L, (long)1L, (long)18L, (long)8L}))) == (30L));",
            "Debug.Assert(SumEvenAndEvenIndex((new List<long>(new long[]{(long)3L, (long)20L, (long)17L, (long)9L, (long)2L, (long)10L, (long)18L, (long)13L, (long)6L, (long)18L}))) == (26L));",
            "Debug.Assert(SumEvenAndEvenIndex((new List<long>(new long[]{(long)5L, (long)6L, (long)12L, (long)1L}))) == (12L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "Write a csthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long EvenPowerSum(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(EvenPowerSum((2L)) == (1056L));",
            "Debug.Assert(EvenPowerSum((3L)) == (8832L));",
            "Debug.Assert(EvenPowerSum((1L)) == (32L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> RearExtract(List<Tuple<long, string, long>> test_list) {\n        List<long> result = new ArrayList<long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            result.add(test_list.get(i).GetRear());\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RearExtract((new List<Tuple<long, string, long>>(new Tuple<long, string, long>[]{(Tuple<long, string, long>)Tuple.Create(1L, \"Rash\", 21L), (Tuple<long, string, long>)Tuple.Create(2L, \"Varsha\", 20L), (Tuple<long, string, long>)Tuple.Create(3L, \"Kil\", 19L)}))).Equals((new List<long>(new long[]{(long)21L, (long)20L, (long)19L}))));",
            "Debug.Assert(RearExtract((new List<Tuple<long, string, long>>(new Tuple<long, string, long>[]{(Tuple<long, string, long>)Tuple.Create(1L, \"Sai\", 36L), (Tuple<long, string, long>)Tuple.Create(2L, \"Ayesha\", 25L), (Tuple<long, string, long>)Tuple.Create(3L, \"Salman\", 45L)}))).Equals((new List<long>(new long[]{(long)36L, (long)25L, (long)45L}))));",
            "Debug.Assert(RearExtract((new List<Tuple<long, string, long>>(new Tuple<long, string, long>[]{(Tuple<long, string, long>)Tuple.Create(1L, \"Sudeep\", 14L), (Tuple<long, string, long>)Tuple.Create(2L, \"Vandana\", 36L), (Tuple<long, string, long>)Tuple.Create(3L, \"Dawood\", 56L)}))).Equals((new List<long>(new long[]{(long)14L, (long)36L, (long)56L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long, long> SubstractElements(Tuple<long, long, long> test_tup1, Tuple<long, long, long> test_tup2) {\n        long result = 0;\n        long temp = 0;\n        long temp1 = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        \n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SubstractElements((Tuple.Create(10L, 4L, 5L)), (Tuple.Create(2L, 5L, 18L))).Equals((Tuple.Create(8L, -1L, -13L))));",
            "Debug.Assert(SubstractElements((Tuple.Create(11L, 2L, 3L)), (Tuple.Create(24L, 45L, 16L))).Equals((Tuple.Create(-13L, -43L, -13L))));",
            "Debug.Assert(SubstractElements((Tuple.Create(7L, 18L, 9L)), (Tuple.Create(10L, 11L, 12L))).Equals((Tuple.Create(-3L, 7L, -3L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "Write a csthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long EvenBinomialCoeffSum(long n) {\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(EvenBinomialCoeffSum((4L)) == (8L));",
            "Debug.Assert(EvenBinomialCoeffSum((6L)) == (32L));",
            "Debug.Assert(EvenBinomialCoeffSum((2L)) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Dictionary<string,long> DictFilter(Dictionary<string,long> dict, long n) {\n        Dictionary<string,long> result = dict;\n        for (int i = 0; i < dict.Length(); i++) {\n            if (dict.Get(i) >= n) {\n                result = result.Get(dict.Get(i));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(DictFilter((new Dictionary<string,long>(){{\"Cierra Vega\", 175L}, {\"Alden Cantrell\", 180L}, {\"Kierra Gentry\", 165L}, {\"Pierre Cox\", 190L}}), (170L)).Equals((new Dictionary<string,long>(){{\"Cierra Vega\", 175L}, {\"Alden Cantrell\", 180L}, {\"Pierre Cox\", 190L}})));",
            "Debug.Assert(DictFilter((new Dictionary<string,long>(){{\"Cierra Vega\", 175L}, {\"Alden Cantrell\", 180L}, {\"Kierra Gentry\", 165L}, {\"Pierre Cox\", 190L}}), (180L)).Equals((new Dictionary<string,long>(){{\"Alden Cantrell\", 180L}, {\"Pierre Cox\", 190L}})));",
            "Debug.Assert(DictFilter((new Dictionary<string,long>(){{\"Cierra Vega\", 175L}, {\"Alden Cantrell\", 180L}, {\"Kierra Gentry\", 165L}, {\"Pierre Cox\", 190L}}), (190L)).Equals((new Dictionary<string,long>(){{\"Pierre Cox\", 190L}})));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "Write a function to find the nth decagonal number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long IsNumDecagonal(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        if (n == 6) return 6;\n        if (n == 7) return 7;\n        if (n == 8) return 8;\n        if (n == 9) return 9;\n        if (n == 10) return 10;\n        if (n == 11) return 11;\n        if (n == 12) return 12;\n        if (n == 13) return 13;\n        if (n == 14) return 14;\n        if (n == 15) return 15;\n        if (n == 16) return 16;\n        if (n == 17) return 17;\n        if (n == 18) return 18;\n        if (n == 19) return 19;\n        if (n == 20) return 20;\n        if (n == 21) return 21;\n        if (n == 22) return 22;\n        if (n == 23) return 23;\n        if (n == 24) return 24;\n        if (n == 25) return 25;\n        if (n == 26) return 26;\n        if (n == 27) return 27;\n        if (n == 28) return 28;\n        if (n == 29) return 29;\n        if (n == 30) return 30;\n        if (n == 31) return 31;\n        if (n == 32) return 32;\n        if (n == 33) return 33;\n        if (n == 34) return 34;\n        if (n == 35) return 35;\n        if (n == 36) return 36;\n        if (n == 37) return 37;\n        if (n == 38) return 38;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsNumDecagonal((3L)) == (27L));",
            "Debug.Assert(IsNumDecagonal((7L)) == (175L));",
            "Debug.Assert(IsNumDecagonal((10L)) == (370L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "Write a function that takes in a list and element and returns a tuple containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<bool, long> SequentialSearch(List<long> dlist, long item) {\n        long i = 0;\n        long j = dlist.size();\n        while (i < j) {\n            if (dlist.get(i) == item) {\n                return Tuple(true, i);\n            }\n            i++;\n        }\n        return Tuple(false, -1);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SequentialSearch((new List<long>(new long[]{(long)11L, (long)23L, (long)58L, (long)31L, (long)56L, (long)77L, (long)43L, (long)12L, (long)65L, (long)19L})), (31L)).Equals((Tuple.Create(true, 3L))));",
            "Debug.Assert(SequentialSearch((new List<long>(new long[]{(long)12L, (long)32L, (long)45L, (long)62L, (long)35L, (long)47L, (long)44L, (long)61L})), (61L)).Equals((Tuple.Create(true, 7L))));",
            "Debug.Assert(SequentialSearch((new List<long>(new long[]{(long)9L, (long)10L, (long)17L, (long)19L, (long)22L, (long)39L, (long)48L, (long)56L})), (48L)).Equals((Tuple.Create(true, 6L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "Write a csthon function to check if the elements of a given list are unique or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool AllUnique(List<long> test_list) {\n        long count = 0;\n        for (long i : test_list) {\n            if (count == i) {\n                return false;\n            }\n            count++;\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AllUnique((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (true));",
            "Debug.Assert(AllUnique((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))) == (false));",
            "Debug.Assert(AllUnique((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "Write a function to subtract two lists element-wise.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> SubList(List<long> nums1, List<long> nums2) {\n        List<long> result = new ArrayList<long>();\n        long sum = 0;\n        for (long num : nums1) {\n            sum += num;\n            result.add(sum);\n        }\n        for (long num : nums2) {\n            sum += num;\n            result.add(sum);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SubList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)-3L, (long)-3L, (long)-3L}))));",
            "Debug.Assert(SubList((new List<long>(new long[]{(long)1L, (long)2L})), (new List<long>(new long[]{(long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)-2L, (long)-2L}))));",
            "Debug.Assert(SubList((new List<long>(new long[]{(long)90L, (long)120L})), (new List<long>(new long[]{(long)50L, (long)70L}))).Equals((new List<long>(new long[]{(long)40L, (long)50L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "Write a csthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool Validate(long n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {\n            return true;\n        }\n        if (n == 8) {\n            return true;\n        }\n        if (n == 9) {\n            return true;\n        }\n        if (n == 10) {\n            return true;\n        }\n        if (n == 11) {\n            return true;\n        }\n        if (n == 12) {\n            return true;\n        }\n        if (n == 13) {\n            return true;\n        }\n        if (n == 14) {\n            return true;\n        }\n        if (n == 15) {\n            return true;\n        }\n        if (n == 16) {\n            return true;\n        }\n        if (n == 17) {\n            return true;\n        }\n        if (n == 18) {\n            return true;\n        }\n        if (n == 19) {\n            return true;\n        }\n        if (n == 20) {\n            return true;\n        }\n        if (n == 21) {\n            return true;\n        }\n        if (n == 22) {\n            return true;\n        }\n        if (n == 23) {\n            return true;\n        }\n        if (\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Validate((1234L)) == (true));",
            "Debug.Assert(Validate((51241L)) == (false));",
            "Debug.Assert(Validate((321L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "284",
        "title": "check_element",
        "text": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckElement(List<object> list, object element) {\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i) == element) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckElement((new List<object>(new string[]{(string)\"green\", (string)\"orange\", (string)\"black\", (string)\"white\"})), (object(\"blue\"))) == (false));",
            "Debug.Assert(CheckElement((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (object(7L))) == (false));",
            "Debug.Assert(CheckElement((new List<object>(new string[]{(string)\"green\", (string)\"green\", (string)\"green\", (string)\"green\"})), (object(\"green\"))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool TextMatchTwoThree(string text) {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 = 0;\n        int\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TextMatchTwoThree((\"ac\")) == (false));",
            "Debug.Assert(TextMatchTwoThree((\"dc\")) == (false));",
            "Debug.Assert(TextMatchTwoThree((\"abbbba\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MaxSubArraySumRepeated(List<long> a, long n, long k) {\n        long sum = 0;\n        for (int i = 0; i < a.Length; i++) {\n            sum += a[i];\n            if (sum % n == 0) {\n                sum += k;\n            }\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)10L, (long)20L, (long)-30L, (long)-1L})), (4L), (3L)) == (30L));",
            "Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)-1L, (long)10L, (long)20L})), (3L), (2L)) == (59L));",
            "Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L})), (3L), (3L)) == (-1L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "Write a csthon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SquareSum(long n) {\n        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SquareSum((2L)) == (20L));",
            "Debug.Assert(SquareSum((3L)) == (56L));",
            "Debug.Assert(SquareSum((4L)) == (120L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "Write a function to find the list of maximum length in a list of lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, List<long>> MaxLength(List<List<long>> list1) {\n        long max = 0;\n        List<long> maxList = new ArrayList<>();\n        for (int i = 0; i < list1.size(); i++) {\n            long max1 = 0;\n            for (int j = 0; j < list1.get(i).size(); j++) {\n                max1 = max1 + list1.get(i).get(j);\n            }\n            max = max1;\n            maxList.add(max);\n        }\n        return new Tuple<>(max, maxList);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)9L, (long)11L}), (List<long>)new List<long>(new long[]{(long)13L, (long)15L, (long)17L})}))).Equals((Tuple.Create(3L, new List<long>(new long[]{(long)13L, (long)15L, (long)17L})))));",
            "Debug.Assert(MaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)10L, (long)12L, (long)14L, (long)15L})}))).Equals((Tuple.Create(4L, new List<long>(new long[]{(long)10L, (long)12L, (long)14L, (long)15L})))));",
            "Debug.Assert(MaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L}), (List<long>)new List<long>(new long[]{(long)15L, (long)20L, (long)25L})}))).Equals((Tuple.Create(3L, new List<long>(new long[]{(long)15L, (long)20L, (long)25L})))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountNoOfWays(long n, long k) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < k; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i == j + 1 && j == k) {\n                    continue;\n                }\n                if (i == j + 1 && j == k + 1) {\n                    continue;\n                }\n                if (i == j + 1 && j == k - 1) {\n                    continue;\n                }\n                if (i == j + 1 && j == k - 2) {\n                    continue;\n                }\n                if (i == j + 1 && j == k - 3) {\n                    continue;\n                }\n                if (i == j + 1 && j == k - 4) {\n                    continue;\n                }\n                if (i == j + 1 && j == k - 5) {\n                    continue;\n                }\n                if (i == j + 1 && j == k - 6) {\n                    continue;\n                }\n                if (i == j + 1 && j == k - 7) {\n                    continue;\n                }\n                if (i == j + 1 && j == k - 8) {\n                    continue;\n                }\n                if (i == j + 1 && j == k - 9) {\n                    continue;\n                }\n                if (i == j + 1 && j == k - 10) {\n                    continue;\n                }\n                if (i == j + 1 && j == k - 11) {\n                    continue;\n                }\n                if (i == j + 1 && j == k - 12) {\n                    continue;\n                }\n                if (i == j + 1 && j ==\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountNoOfWays((2L), (4L)) == (16L));",
            "Debug.Assert(CountNoOfWays((3L), (2L)) == (6L));",
            "Debug.Assert(CountNoOfWays((4L), (4L)) == (228L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Find(long n, long m) {\n        long result = 0;\n        while (n > 0) {\n            result += n % m;\n            n /= m;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Find((10L), (3L)) == (3L));",
            "Debug.Assert(Find((4L), (2L)) == (2L));",
            "Debug.Assert(Find((20L), (5L)) == (4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float OthersideRightangle(long w, long h) {\n        long x = w;\n        long y = h;\n        long z = 0;\n        long x2 = x;\n        long y2 = y;\n        long z2 = z;\n        long x3 = x2;\n        long y3 = y2;\n        long z3 = z2;\n        long x4 = x3;\n        long y4 = y3;\n        long z4 = z3;\n        long x5 = x4;\n        long y5 = y4;\n        long z5 = z4;\n        long x6 = x5;\n        long y6 = y5;\n        long z6 = z5;\n        long x7 = x6;\n        long y7 = y6;\n        long z7 = z6;\n        long x8 = x7;\n        long y8 = y7;\n        long z8 = z7;\n        long x9 = x8;\n        long y9 = y8;\n        long z9 = z8;\n        long x10 = x9;\n        long y10 = y9;\n        long z10 = z9;\n        long x11 = x10;\n        long y11 = y10;\n        long z11 = z10;\n        long x12 = x11;\n        long y12 = y11;\n        long z12 = z11;\n        long x13 = x12;\n        long y13 = y12;\n        long z13 = z12;\n        long x14 = x13;\n        long y14 = y13;\n        long z14 = z13;\n        long x15 = x14;\n        long y15 = y14;\n        long z15 = z14;\n        long x16 = x15;\n        long y16 = y15;\n        long z16 = z15;\n\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(OthersideRightangle((7L), (8L)) == (10.63014581273465f));",
            "Debug.Assert(OthersideRightangle((3L), (4L)) == (float)5L);",
            "Debug.Assert(OthersideRightangle((7L), (15L)) == (16.55294535724685f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SumDiv(long number) {\n        long sum = 1;\n        while (number!= 1) {\n            sum += number % number;\n            number /= number;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SumDiv((8L)) == (7L));",
            "Debug.Assert(SumDiv((12L)) == (16L));",
            "Debug.Assert(SumDiv((7L)) == (1L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "Write a csthon function to count inversions in a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long GetInvCount(List<long> arr) {\n        long count = 0;\n        for (long i : arr) {\n            if (i == 0) {\n                count++;\n            } else {\n                count += GetInvCount(arr.SubList(0, i));\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(GetInvCount((new List<long>(new long[]{(long)1L, (long)20L, (long)6L, (long)4L, (long)5L}))) == (5L));",
            "Debug.Assert(GetInvCount((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (1L));",
            "Debug.Assert(GetInvCount((new List<long>(new long[]{(long)1L, (long)2L, (long)5L, (long)6L, (long)1L}))) == (3L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, long> MaxAggregate(List<Tuple<string, long>> stdata) {\n        long max = 0;\n        for (Tuple<string, long> t : stdata) {\n            max = Math.max(max, t.first.length());\n            max = Math.max(max, t.second);\n        }\n        return new Tuple<string, long>(stdata.get(0).first, max);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxAggregate((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 90L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 88L), (Tuple<string, long>)Tuple.Create(\"Peter Nichols\", 7L), (Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 122L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 84L)}))).Equals((Tuple.Create(\"Juan Whelan\", 212L))));",
            "Debug.Assert(MaxAggregate((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 50L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 48L), (Tuple<string, long>)Tuple.Create(\"Peter Nichols\", 37L), (Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 22L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 14L)}))).Equals((Tuple.Create(\"Juan Whelan\", 72L))));",
            "Debug.Assert(MaxAggregate((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 10L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 20L), (Tuple<string, long>)Tuple.Create(\"Peter Nichols\", 30L), (Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 40L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 50L)}))).Equals((Tuple.Create(\"Sabah Colley\", 70L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "Write a csthon function to find element at a given index after number of rotations.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindElement(List<long> arr, List<List<long>> ranges, long rotations, long index) {\n        long result = 0;\n        for (int i = 0; i < rotations; i++) {\n            result = result + arr.get(index);\n            index = index + 1;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)2L}), (List<long>)new List<long>(new long[]{(long)0L, (long)3L})})), (2L), (1L)) == (3L));",
            "Debug.Assert(FindElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)2L})})), (1L), (2L)) == (3L));",
            "Debug.Assert(FindElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)2L})})), (1L), (1L)) == (1L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "Return the first word from the list of words starting with letter 'p'.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, string> StartWithp(List<string> words) {\n        List<string> pWords = new ArrayList<string>();\n        for (int i = 0; i < words.size(); i++) {\n            if (words.get(i).equals(\"p\")) {\n                pWords.add(words.get(i));\n            }\n        }\n        return new Tuple<string, string>(pWords.get(0), pWords.get(0));\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Python PHP\", (string)\"Java JavaScript\", (string)\"c c++\"}))).Equals((Tuple.Create(\"Python\", \"PHP\"))));",
            "Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Python Programming\", (string)\"Java Programming\"}))).Equals((Tuple.Create(\"Python\", \"Programming\"))));",
            "Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Pqrst Pqr\", (string)\"qrstuv\"}))).Equals((Tuple.Create(\"Pqrst\", \"Pqr\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (int i = 0; i < a.size(); i++) {\n            long sum = a.get(i) + a.get(i + 1);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));",
            "Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));",
            "Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> LargeProduct(List<long> nums1, List<long> nums2, long N) {\n        List<long> result = new ArrayList<long>();\n        for (long i = 0; i < N; i++) {\n            long product = 0;\n            for (long j = 0; j < N; j++) {\n                product = product * nums1.get(j) + nums2.get(j);\n            }\n            result.add(product);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(LargeProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)3L, (long)6L, (long)8L, (long)9L, (long)10L, (long)6L})), (3L)).Equals((new List<long>(new long[]{(long)60L, (long)54L, (long)50L}))));",
            "Debug.Assert(LargeProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)3L, (long)6L, (long)8L, (long)9L, (long)10L, (long)6L})), (4L)).Equals((new List<long>(new long[]{(long)60L, (long)54L, (long)50L, (long)48L}))));",
            "Debug.Assert(LargeProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)3L, (long)6L, (long)8L, (long)9L, (long)10L, (long)6L})), (5L)).Equals((new List<long>(new long[]{(long)60L, (long)54L, (long)50L, (long)48L, (long)45L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "Write a csthon function to find the maximum of two numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Maximum(long a, long b) {\n        return a > b? a : b;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Maximum((5L), (10L)) == (10L));",
            "Debug.Assert(Maximum((-1L), (-2L)) == (-1L));",
            "Debug.Assert(Maximum((9L), (7L)) == (9L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "Write a function to convert a given string to a list of characters.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> StringToTuple(string str1) {\n        List<string> result = new ArrayList<string>();\n        for (int i = 0; i < str1.length(); i++) {\n            result.add(str1.substring(i, i + 1));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(StringToTuple((\"python 3.0\")).Equals((new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\", (string)\"3\", (string)\".\", (string)\"0\"}))));",
            "Debug.Assert(StringToTuple((\"item1\")).Equals((new List<string>(new string[]{(string)\"i\", (string)\"t\", (string)\"e\", (string)\"m\", (string)\"1\"}))));",
            "Debug.Assert(StringToTuple((\"15.10\")).Equals((new List<string>(new string[]{(string)\"1\", (string)\"5\", (string)\".\", (string)\"1\", (string)\"0\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "Write a csthon function to find the highest power of 2 that is less than or equal to n.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long HighestPowerOf2(long n) {\n        long result = 1;\n        while (result < n) {\n            result <<= 1;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(HighestPowerOf2((10L)) == (8L));",
            "Debug.Assert(HighestPowerOf2((19L)) == (16L));",
            "Debug.Assert(HighestPowerOf2((32L)) == (32L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "Write a function to find then'th lucas number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindLucas(long n) {\n        long result = 0;\n        while (n > 0) {\n            result += n % 10;\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindLucas((9L)) == (76L));",
            "Debug.Assert(FindLucas((4L)) == (7L));",
            "Debug.Assert(FindLucas((3L)) == (4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "390",
        "title": "add_string",
        "text": "Write a function to apply a given format string to all of the elements in a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> AddString(List<object> list_, string str) {\n        List<string> result = new ArrayList<string>();\n        for (int i = 0; i < list_.Length(); i++) {\n            result.Add(list_.Get(i).ToString() + str);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AddString((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (\"temp{0}\")).Equals((new List<string>(new string[]{(string)\"temp1\", (string)\"temp2\", (string)\"temp3\", (string)\"temp4\"}))));",
            "Debug.Assert(AddString((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\"})), (\"python{0}\")).Equals((new List<string>(new string[]{(string)\"pythona\", (string)\"pythonb\", (string)\"pythonc\", (string)\"pythond\"}))));",
            "Debug.Assert(AddString((new List<object>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L})), (\"string{0}\")).Equals((new List<string>(new string[]{(string)\"string5\", (string)\"string6\", (string)\"string7\", (string)\"string8\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "391",
        "title": "convert_list_dictionary",
        "text": "Write a function to convert more than one list to nested dictionary.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Dictionary<string,Dictionary<string,long>>> ConvertListDictionary(List<string> l1, List<string> l2, List<long> l3) {\n        List<Dictionary<string,Dictionary<string,long>>> l = new ArrayList<Dictionary<string,Dictionary<string,long>>>();\n        for (int i = 0; i < l1.size(); i++) {\n            l.add(new Dictionary<string,Dictionary<string,long>>(l1.get(i),l2.get(i)));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            l.add(new Dictionary<string,Dictionary<string,long>>(l2.get(i),l3.get(i)));\n        }\n        return l;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ConvertListDictionary((new List<string>(new string[]{(string)\"S001\", (string)\"S002\", (string)\"S003\", (string)\"S004\"})), (new List<string>(new string[]{(string)\"Adina Park\", (string)\"Leyton Marsh\", (string)\"Duncan Boyle\", (string)\"Saim Richards\"})), (new List<long>(new long[]{(long)85L, (long)98L, (long)89L, (long)92L}))).Equals((new List<Dictionary<string,Dictionary<string,long>>>(new Dictionary<string,Dictionary<string,long>>[]{(Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"S001\", new Dictionary<string,long>(){{\"Adina Park\", 85L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"S002\", new Dictionary<string,long>(){{\"Leyton Marsh\", 98L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"S003\", new Dictionary<string,long>(){{\"Duncan Boyle\", 89L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"S004\", new Dictionary<string,long>(){{\"Saim Richards\", 92L}}}}}))));",
            "Debug.Assert(ConvertListDictionary((new List<string>(new string[]{(string)\"abc\", (string)\"def\", (string)\"ghi\", (string)\"jkl\"})), (new List<string>(new string[]{(string)\"python\", (string)\"program\", (string)\"language\", (string)\"programs\"})), (new List<long>(new long[]{(long)100L, (long)200L, (long)300L, (long)400L}))).Equals((new List<Dictionary<string,Dictionary<string,long>>>(new Dictionary<string,Dictionary<string,long>>[]{(Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"abc\", new Dictionary<string,long>(){{\"python\", 100L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"def\", new Dictionary<string,long>(){{\"program\", 200L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"ghi\", new Dictionary<string,long>(){{\"language\", 300L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"jkl\", new Dictionary<string,long>(){{\"programs\", 400L}}}}}))));",
            "Debug.Assert(ConvertListDictionary((new List<string>(new string[]{(string)\"A1\", (string)\"A2\", (string)\"A3\", (string)\"A4\"})), (new List<string>(new string[]{(string)\"java\", (string)\"C\", (string)\"C++\", (string)\"DBMS\"})), (new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L}))).Equals((new List<Dictionary<string,Dictionary<string,long>>>(new Dictionary<string,Dictionary<string,long>>[]{(Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"A1\", new Dictionary<string,long>(){{\"java\", 10L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"A2\", new Dictionary<string,long>(){{\"C\", 20L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"A3\", new Dictionary<string,long>(){{\"C++\", 30L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"A4\", new Dictionary<string,long>(){{\"DBMS\", 40L}}}}}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long GetMaxSum(long n) {\n        long max = 0;\n        for (int i = 1; i <= n; i++) {\n            max = max + (i * (i + 1));\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(GetMaxSum((60L)) == (106L));",
            "Debug.Assert(GetMaxSum((10L)) == (12L));",
            "Debug.Assert(GetMaxSum((2L)) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "Write a function to find the list with maximum length.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, List<long>> MaxLengthList(List<List<long>> input_list) {\n        long max_length = 0;\n        List<long> max_list = new ArrayList<>();\n        for (List<long> list : input_list) {\n            long length = list.Length();\n            if (length > max_length) {\n                max_length = length;\n                max_list = list;\n            }\n        }\n        return new Tuple<>(max_length, max_list);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxLengthList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)9L, (long)11L}), (List<long>)new List<long>(new long[]{(long)13L, (long)15L, (long)17L})}))).Equals((Tuple.Create(3L, new List<long>(new long[]{(long)13L, (long)15L, (long)17L})))));",
            "Debug.Assert(MaxLengthList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L})}))).Equals((Tuple.Create(5L, new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})))));",
            "Debug.Assert(MaxLengthList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)10L, (long)11L, (long)12L})}))).Equals((Tuple.Create(4L, new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L})))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "Write a function to check if given list contains no duplicates.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckDistinct(List<long> test_tup) {\n        long count = 0;\n        for (long t : test_tup) {\n            if (count == 0) {\n                return false;\n            }\n            if (count == 1) {\n                return true;\n            }\n            count++;\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckDistinct((new List<long>(new long[]{(long)1L, (long)4L, (long)5L, (long)6L, (long)1L, (long)4L}))) == (false));",
            "Debug.Assert(CheckDistinct((new List<long>(new long[]{(long)1L, (long)4L, (long)5L, (long)6L}))) == (true));",
            "Debug.Assert(CheckDistinct((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "Write a csthon function to find the first non-repeated character in a given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string FirstNonRepeatingCharacter(string str1) {\n        string str2 = \"\";\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1[i]!= str1[i]) {\n                str2 = str2 + str1[i];\n            }\n        }\n        return str2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FirstNonRepeatingCharacter((\"abcabc\")).Equals(null));",
            "Debug.Assert(FirstNonRepeatingCharacter((\"abc\")).Equals((\"a\")));",
            "Debug.Assert(FirstNonRepeatingCharacter((\"ababc\")).Equals((\"c\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string CheckChar(string str) {\n        string result = \"\";\n        for (int i = 0; i < str.length(); i++) {\n            if (str[i]!= str[str.length() - 1 - i]) {\n                result += str[i];\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckChar((\"abba\")).Equals((\"Valid\")));",
            "Debug.Assert(CheckChar((\"a\")).Equals((\"Valid\")));",
            "Debug.Assert(CheckChar((\"abcd\")).Equals((\"Invalid\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "Write a function to find the median of three numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float MedianNumbers(long a, long b, long c) {\n        long a1 = a;\n        long b1 = b;\n        long c1 = c;\n        long a2 = a1 + b1;\n        long b2 = b1 + c1;\n        long c2 = c1 + a1;\n        long a3 = a2 + b2;\n        long b3 = b2 + c2;\n        long c3 = c2 + a2;\n        long a4 = a3 + b3;\n        long b4 = b3 + c3;\n        long c4 = c3 + a3;\n        long a5 = a4 + b4;\n        long b5 = b4 + c4;\n        long c5 = c4 + a4;\n        long a6 = a5 + b5;\n        long b6 = b5 + c5;\n        long c6 = c5 + a5;\n        long a7 = a6 + b6;\n        long b7 = b6 + c6;\n        long c7 = c6 + a6;\n        long a8 = a7 + b7;\n        long b8 = b7 + c7;\n        long c8 = c7 + a7;\n        long a9 = a8 + b8;\n        long b9 = b8 + c8;\n        long c9 = c8 + a8;\n        long a10 = a9 + b9;\n        long b10 = b9 + c9;\n        long c10 = c9 + a9;\n        long a11 = a10 + b10;\n        long b11 = b10 + c10;\n        long c11 = c10 + a10;\n        long a12 = a11 + b12;\n        long b12 = b11 + c11;\n        long c12 = c11 + a11;\n        long a13 =\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MedianNumbers((25L), (55L), (65L)) == (55.0f));",
            "Debug.Assert(MedianNumbers((20L), (10L), (30L)) == (20.0f));",
            "Debug.Assert(MedianNumbers((15L), (45L), (75L)) == (45.0f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "398",
        "title": "sum_of_digits",
        "text": "Write a function to compute the sum of digits of each number of a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SumOfDigits(List<object> nums) {\n        long sum = 0;\n        for (int i = 0; i < nums.Length; i++) {\n            sum += (long)nums[i].Value;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SumOfDigits((new List<object>(new long[]{(long)10L, (long)2L, (long)56L}))) == (14L));",
            "Debug.Assert(SumOfDigits((new List<object>(new List<long>[]{(List<long>)new List<object>(new object[]{10L, 20L, 4L, 5L, \"b\", 70L, \"a\"})}))) == (19L));",
            "Debug.Assert(SumOfDigits((new List<object>(new long[]{(long)10L, (long)20L, (long)-4L, (long)5L, (long)-70L}))) == (19L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long, long, long> BitwiseXor(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n        long result = 0;\n        long test_tup1_result = 0;\n        long test_tup2_result = 0;\n        long test_tup1_result_1 = 0;\n        long test_tup2_result_1 = 0;\n        long test_tup1_result_2 = 0;\n        long test_tup2_result_2 = 0;\n        long test_tup1_result_3 = 0;\n        long test_tup2_result_3 = 0;\n        long test_tup1_result_4 = 0;\n        long test_tup2_result_4 = 0;\n        long test_tup1_result_5 = 0;\n        long test_tup2_result_5 = 0;\n        long test_tup1_result_6 = 0;\n        long test_tup2_result_6 = 0;\n        long test_tup1_result_7 = 0;\n        long test_tup2_result_7 = 0;\n        long test_tup1_result_8 = 0;\n        long test_tup2_result_8 = 0;\n        long test_tup1_result_9 = 0;\n        long test_tup2_result_9 = 0;\n        long test_tup1_result_10 = 0;\n        long test_tup2_result_10 = 0;\n        long test_tup1_result_11 = 0;\n        long test_tup2_result_11 = 0;\n        long test_tup1_result_12 = 0;\n        long test\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(BitwiseXor((Tuple.Create(10L, 4L, 6L, 9L)), (Tuple.Create(5L, 2L, 3L, 3L))).Equals((Tuple.Create(15L, 6L, 5L, 10L))));",
            "Debug.Assert(BitwiseXor((Tuple.Create(11L, 5L, 7L, 10L)), (Tuple.Create(6L, 3L, 4L, 4L))).Equals((Tuple.Create(13L, 6L, 3L, 14L))));",
            "Debug.Assert(BitwiseXor((Tuple.Create(12L, 6L, 8L, 11L)), (Tuple.Create(7L, 4L, 5L, 6L))).Equals((Tuple.Create(11L, 2L, 13L, 13L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "Write a csthon function to identify non-prime numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsNotPrime(long n) {\n        if (n == 1) return true;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return false;\n        if (n % 5 == 0) return false;\n        if (n % 7 == 0) return false;\n        if (n % 11 == 0) return false;\n        if (n % 13 == 0) return false;\n        if (n % 17 == 0) return false;\n        if (n % 19 == 0) return false;\n        if (n % 23 == 0) return false;\n        if (n % 29 == 0) return false;\n        if (n % 31 == 0) return false;\n        if (n % 37 == 0) return false;\n        if (n % 41 == 0) return false;\n        if (n % 43 == 0) return false;\n        if (n % 47 == 0) return false;\n        if (n % 53 == 0) return false;\n        if (n % 59 == 0) return false;\n        if (n % 61 == 0) return false;\n        if (n % 67 == 0) return false;\n        if (n % 71 == 0) return false;\n        if (n % 73 == 0) return false;\n        if (n % 79 == 0) return false;\n        if (n % 83 == 0) return false;\n        if (n % 89 == 0) return false;\n        if (n % 97 == 0) return false;\n        if (n % 101 == 0) return false;\n        if (n % 103 == 0) return false;\n        if (n % 107 == 0) return false;\n        if (n % 109 == 0) return false;\n        if (n % 113 == 0) return false;\n        if (n % 127 == 0) return false;\n        if (n % 131 == 0) return false;\n        \n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsNotPrime((2L)) == (false));",
            "Debug.Assert(IsNotPrime((10L)) == (true));",
            "Debug.Assert(IsNotPrime((35L)) == (true));",
            "Debug.Assert(IsNotPrime((37L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "Write a function to extract the number of unique tuples in the given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long ExtractFreq(List<Tuple<long, long>> test_list) {\n        long count = 0;\n        for (Tuple<long, long> tuple : test_list) {\n            if (tuple.first == tuple.second) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ExtractFreq((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(3L, 4L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long, long>)Tuple.Create(5L, 6L)}))) == (3L));",
            "Debug.Assert(ExtractFreq((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 15L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long, long>)Tuple.Create(6L, 7L)}))) == (4L));",
            "Debug.Assert(ExtractFreq((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 16L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(6L, 9L)}))) == (4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "Write a function to perform index wise addition of list elements in the given two nested lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<long>> AddNestedTuples(List<List<long>> test_tup1, List<List<long>> test_tup2) {\n        List<List<long>> result = new ArrayList<List<long>>();\n        for (int i = 0; i < test_tup1.size(); i++) {\n            for (int j = 0; j < test_tup2.size(); j++) {\n                result.add(new ArrayList<long>(test_tup1.get(i)));\n                result.add(new ArrayList<long>(test_tup2.get(j)));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AddNestedTuples((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)10L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)3L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)10L}), (List<long>)new List<long>(new long[]{(long)7L, (long)14L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)8L, (long)13L})}))));",
            "Debug.Assert(AddNestedTuples((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)11L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)4L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)2L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)9L, (long)12L}), (List<long>)new List<long>(new long[]{(long)9L, (long)16L}), (List<long>)new List<long>(new long[]{(long)5L, (long)12L}), (List<long>)new List<long>(new long[]{(long)10L, (long)15L})}))));",
            "Debug.Assert(AddNestedTuples((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)4L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)12L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)5L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)11L, (long)14L}), (List<long>)new List<long>(new long[]{(long)11L, (long)18L}), (List<long>)new List<long>(new long[]{(long)7L, (long)14L}), (List<long>)new List<long>(new long[]{(long)12L, (long)17L})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "Write a csthon function to find the minimum of two numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Minimum(long a, long b) {\n        long min = a;\n        long max = b;\n        while (min < max) {\n            min = min + (a - b);\n            max = max - (b - a);\n        }\n        return min;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Minimum((1L), (2L)) == (1L));",
            "Debug.Assert(Minimum((-5L), (-4L)) == (-5L));",
            "Debug.Assert(Minimum((0L), (0L)) == (0L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "Write a csthon function to find whether the parity of a given number is odd.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool FindParity(long x) {\n        if (x == 0) {\n            return true;\n        }\n        if (x % 2 == 0) {\n            return false;\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindParity((12L)) == (false));",
            "Debug.Assert(FindParity((7L)) == (true));",
            "Debug.Assert(FindParity((10L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "407",
        "title": "rearrange_bigger",
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static object RearrangeBigger(long n) {\n        long result = 1;\n        while (n > 0) {\n            result *= 10;\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RearrangeBigger((12L)).Equals((object(21L))));",
            "Debug.Assert(RearrangeBigger((10L)).Equals((object(false))));",
            "Debug.Assert(RearrangeBigger((102L)).Equals((object(120L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<long>> KSmallestPairs(List<long> nums1, List<long> nums2, long k) {\n        List<List<long>> result = new ArrayList<List<long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        List<long> temp = new ArrayList<long>();\n        temp.add(nums1.get(0));\n        temp.add(nums2.get(0));\n        for (int i = 1; i < nums1.size(); i++) {\n            if (nums1.get(i) < nums2.get(i - 1)) {\n                temp.add(nums1.get(i));\n            } else {\n                temp.add(nums2.get(i - 1));\n            }\n        }\n        for (int i = 1; i < nums2.size(); i++) {\n            if (nums2.get(i) < nums1.get(i - 1)) {\n                temp.add(nums2.get(i));\n            } else {\n                temp.add(nums1.get(i - 1));\n            }\n        }\n        for (int i = 0; i < temp.size(); i++) {\n            result.add(new ArrayList<long>(temp.get(i)));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(KSmallestPairs((new List<long>(new long[]{(long)1L, (long)3L, (long)7L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L})), (2L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)4L})}))));",
            "Debug.Assert(KSmallestPairs((new List<long>(new long[]{(long)1L, (long)3L, (long)7L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L})), (1L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L})}))));",
            "Debug.Assert(KSmallestPairs((new List<long>(new long[]{(long)1L, (long)3L, (long)7L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L})), (7L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)2L})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MinProductTuple(List<Tuple<long, long>> list1) {\n        long result = 0;\n        for (int i = 0; i < list1.Length; i++) {\n            result = result * list1[i].X + list1[i].Y;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MinProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 7L), (Tuple<long, long>)Tuple.Create(2L, 6L), (Tuple<long, long>)Tuple.Create(1L, 8L), (Tuple<long, long>)Tuple.Create(4L, 9L)}))) == (8L));",
            "Debug.Assert(MinProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(10L, 20L), (Tuple<long, long>)Tuple.Create(15L, 2L), (Tuple<long, long>)Tuple.Create(5L, 10L)}))) == (30L));",
            "Debug.Assert(MinProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(11L, 44L), (Tuple<long, long>)Tuple.Create(10L, 15L), (Tuple<long, long>)Tuple.Create(20L, 5L), (Tuple<long, long>)Tuple.Create(12L, 9L)}))) == (100L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "Write a function to convert the given snake case string to camel case string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            if (Character.isUpperCase(c)) {\n                result += c;\n            } else {\n                result += Character.toLowerCase(c);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SnakeToCamel((\"android_tv\")).Equals((\"AndroidTv\")));",
            "Debug.Assert(SnakeToCamel((\"google_pixel\")).Equals((\"GooglePixel\")));",
            "Debug.Assert(SnakeToCamel((\"apple_watch\")).Equals((\"AppleWatch\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "Write a csthon function to remove odd numbers from a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> RemoveOdd(List<long> l) {\n        long sum = 0;\n        for (long i : l) {\n            sum += i;\n        }\n        return l.SubList(0, l.LastIndexOf(sum % 2));\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveOdd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L}))));",
            "Debug.Assert(RemoveOdd((new List<long>(new long[]{(long)2L, (long)4L, (long)6L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L}))));",
            "Debug.Assert(RemoveOdd((new List<long>(new long[]{(long)10L, (long)20L, (long)3L}))).Equals((new List<long>(new long[]{(long)10L, (long)20L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "413",
        "title": "extract_nth_element",
        "text": "Write a function to extract the nth element from a given list of tuples.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<object> ExtractNthElement(List<Tuple<string, long, long>> list1, long n) {\n        List<object> list2 = new ArrayList<>();\n        for (int i = 0; i < list1.size(); i++) {\n            list2.add(list1.get(i).get(n));\n        }\n        return list2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ExtractNthElement((new List<Tuple<string, long, long>>(new Tuple<string, long, long>[]{(Tuple<string, long, long>)Tuple.Create(\"Greyson Fulton\", 98L, 99L), (Tuple<string, long, long>)Tuple.Create(\"Brady Kent\", 97L, 96L), (Tuple<string, long, long>)Tuple.Create(\"Wyatt Knott\", 91L, 94L), (Tuple<string, long, long>)Tuple.Create(\"Beau Turnbull\", 94L, 98L)})), (0L)).Equals((new List<object>(new string[]{(string)\"Greyson Fulton\", (string)\"Brady Kent\", (string)\"Wyatt Knott\", (string)\"Beau Turnbull\"}))));",
            "Debug.Assert(ExtractNthElement((new List<Tuple<string, long, long>>(new Tuple<string, long, long>[]{(Tuple<string, long, long>)Tuple.Create(\"Greyson Fulton\", 98L, 99L), (Tuple<string, long, long>)Tuple.Create(\"Brady Kent\", 97L, 96L), (Tuple<string, long, long>)Tuple.Create(\"Wyatt Knott\", 91L, 94L), (Tuple<string, long, long>)Tuple.Create(\"Beau Turnbull\", 94L, 98L)})), (2L)).Equals((new List<object>(new long[]{(long)99L, (long)96L, (long)94L, (long)98L}))));",
            "Debug.Assert(ExtractNthElement((new List<Tuple<string, long, long>>(new Tuple<string, long, long>[]{(Tuple<string, long, long>)Tuple.Create(\"Greyson Fulton\", 98L, 99L), (Tuple<string, long, long>)Tuple.Create(\"Brady Kent\", 97L, 96L), (Tuple<string, long, long>)Tuple.Create(\"Wyatt Knott\", 91L, 94L), (Tuple<string, long, long>)Tuple.Create(\"Beau Turnbull\", 94L, 98L)})), (1L)).Equals((new List<object>(new long[]{(long)98L, (long)97L, (long)91L, (long)94L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "Write a csthon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool Overlapping(List<long> list1, List<long> list2) {\n        long sum = 0;\n        for (long i : list1) {\n            sum += i;\n        }\n        for (long i : list2) {\n            sum += i;\n        }\n        return sum == 0;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Overlapping((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L}))) == (false));",
            "Debug.Assert(Overlapping((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))) == (false));",
            "Debug.Assert(Overlapping((new List<long>(new long[]{(long)1L, (long)4L, (long)5L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "Write a csthon function to find a pair with highest product from a given list of integers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long> MaxProduct(List<long> arr) {\n        long max = 0;\n        long maxProduct = 1;\n        for (long i : arr) {\n            maxProduct = Math.max(maxProduct, i * i);\n        }\n        return new Tuple<>(max, maxProduct);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)7L, (long)0L, (long)8L, (long)4L}))).Equals((Tuple.Create(7L, 8L))));",
            "Debug.Assert(MaxProduct((new List<long>(new long[]{(long)0L, (long)-1L, (long)-2L, (long)-4L, (long)5L, (long)0L, (long)-6L}))).Equals((Tuple.Create(-4L, -6L))));",
            "Debug.Assert(MaxProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((Tuple.Create(2L, 3L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "Write a function to find common first element in given list of lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<string>> GroupTuples(List<List<string>> Input) {\n        List<List<string>> Output = new ArrayList<List<string>>();\n        for (int i = 0; i < Input.Length; i++) {\n            List<string> temp = new ArrayList<string>();\n            for (int j = 0; j < Input[i].Length; j++) {\n                temp.Add(Input[i][j]);\n            }\n            Output.Add(temp);\n        }\n        return Output;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(GroupTuples((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\"}), (List<string>)new List<string>(new string[]{(string)\"x\", (string)\"z\"}), (List<string>)new List<string>(new string[]{(string)\"w\", (string)\"t\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}), (List<string>)new List<string>(new string[]{(string)\"w\", (string)\"t\"})}))));",
            "Debug.Assert(GroupTuples((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"a\", (string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"e\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"e\"})}))));",
            "Debug.Assert(GroupTuples((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"f\", (string)\"g\"}), (List<string>)new List<string>(new string[]{(string)\"f\", (string)\"g\"}), (List<string>)new List<string>(new string[]{(string)\"h\", (string)\"i\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"f\", (string)\"g\", (string)\"g\"}), (List<string>)new List<string>(new string[]{(string)\"h\", (string)\"i\"})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "418",
        "title": "Find_Max",
        "text": "Write a csthon function to find the element of a list having maximum length.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<object> FindMax(List<List<object>> lst) {\n        List<object> max = new ArrayList<>();\n        for (List<object> list : lst) {\n            if (list.size() > max.size()) {\n                max = list;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindMax((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"A\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"B\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"B\", (string)\"C\"})}))).Equals((new List<object>(new string[]{(string)\"A\", (string)\"B\", (string)\"C\"}))));",
            "Debug.Assert(FindMax((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})}))).Equals((new List<object>(new long[]{(long)1L, (long)2L, (long)3L}))));",
            "Debug.Assert(FindMax((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)1L, (long)5L, (long)6L, (long)1L})}))).Equals((new List<object>(new long[]{(long)1L, (long)5L, (long)6L, (long)1L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "Write a csthon function to find the cube sum of first n even natural numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CubeSum(long n) {\n        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CubeSum((2L)) == (72L));",
            "Debug.Assert(CubeSum((3L)) == (288L));",
            "Debug.Assert(CubeSum((4L)) == (800L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "Write a function to concatenate each element of tuple by the delimiter.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string ConcatenateTuple(Tuple<string, string, long, string> test_tup) {\n        string result = \"\";\n        for (int i = 0; i < test_tup.Length(); i++) {\n            result += test_tup.Get(i);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ConcatenateTuple((Tuple.Create(\"ID\", \"is\", 4L, \"UTS\"))).Equals((\"ID-is-4-UTS\")));",
            "Debug.Assert(ConcatenateTuple((Tuple.Create(\"QWE\", \"is\", 4L, \"RTY\"))).Equals((\"QWE-is-4-RTY\")));",
            "Debug.Assert(ConcatenateTuple((Tuple.Create(\"ZEN\", \"is\", 4L, \"OP\"))).Equals((\"ZEN-is-4-OP\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "Write a csthon function to find the average of cubes of first n natural numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float FindAverageOfCube(long n) {\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum / n;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindAverageOfCube((2L)) == (4.5f));",
            "Debug.Assert(FindAverageOfCube((3L)) == (float)12L);",
            "Debug.Assert(FindAverageOfCube((1L)) == (float)1L);",
            "}",
            "}"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> ExtractRear(Tuple<string, string, string> test_tuple) {\n        List<string> result = new ArrayList<string>();\n        for (int i = 0; i < test_tuple.Length(); i++) {\n            result.Add(test_tuple.Get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ExtractRear((Tuple.Create(\"Mers\", \"for\", \"Vers\"))).Equals((new List<string>(new string[]{(string)\"s\", (string)\"r\", (string)\"s\"}))));",
            "Debug.Assert(ExtractRear((Tuple.Create(\"Avenge\", \"for\", \"People\"))).Equals((new List<string>(new string[]{(string)\"e\", (string)\"r\", (string)\"e\"}))));",
            "Debug.Assert(ExtractRear((Tuple.Create(\"Gotta\", \"get\", \"go\"))).Equals((new List<string>(new string[]{(string)\"a\", (string)\"t\", (string)\"o\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "425",
        "title": "count_element_in_list",
        "text": "Write a function to count the number of sublists containing a particular element.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountElementInList(List<List<object>> list1, object x) {\n        long count = 0;\n        for (List<object> list : list1) {\n            if (list.contains(x)) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountElementInList((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)1L, (long)11L}), (List<long>)new List<long>(new long[]{(long)1L, (long)15L, (long)7L})})), (object(1L))) == (3L));",
            "Debug.Assert(CountElementInList((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"A\", (string)\"B\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"C\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"D\", (string)\"E\"}), (List<string>)new List<string>(new string[]{(string)\"B\", (string)\"C\", (string)\"D\"})})), (object(\"A\"))) == (3L));",
            "Debug.Assert(CountElementInList((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"A\", (string)\"B\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"C\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"D\", (string)\"E\"}), (List<string>)new List<string>(new string[]{(string)\"B\", (string)\"C\", (string)\"D\"})})), (object(\"E\"))) == (1L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "Write a function to filter odd numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> FilterOddnumbers(List<long> nums) {\n        List<long> odd = new ArrayList<long>();\n        for (long i : nums) {\n            if (i % 2 == 0) odd.add(i);\n        }\n        return odd;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FilterOddnumbers((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L}))));",
            "Debug.Assert(FilterOddnumbers((new List<long>(new long[]{(long)10L, (long)20L, (long)45L, (long)67L, (long)84L, (long)93L}))).Equals((new List<long>(new long[]{(long)45L, (long)67L, (long)93L}))));",
            "Debug.Assert(FilterOddnumbers((new List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)8L, (long)6L, (long)4L, (long)3L}))).Equals((new List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)3L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "Convert the string to a string of the form dd-mm-yyyy",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string ChangeDateFormat(string dt) {\n        String dtStr = dt.substring(0, 4);\n        String dtStr2 = dtStr.substring(4, 6);\n        String dtStr3 = dtStr2.substring(6, 8);\n        String dtStr4 = dtStr3.substring(8, 10);\n        String dtStr5 = dtStr4.substring(10, 12);\n        String dtStr6 = dtStr5.substring(12, 14);\n        String dtStr7 = dtStr6.substring(14, 16);\n        String dtStr8 = dtStr7.substring(16, 18);\n        String dtStr9 = dtStr8.substring(18, 20);\n        String dtStr10 = dtStr9.substring(20, 22);\n        String dtStr11 = dtStr10.substring(22, 24);\n\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ChangeDateFormat((\"2026-01-02\")).Equals((\"02-01-2026\")));",
            "Debug.Assert(ChangeDateFormat((\"2020-11-13\")).Equals((\"13-11-2020\")));",
            "Debug.Assert(ChangeDateFormat((\"2021-04-26\")).Equals((\"26-04-2021\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "Write a function to sort the given list by using shell sort.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> ShellSort(List<long> my_list) {\n        List<long> sorted_list = new ArrayList<long>();\n        long temp = 0;\n        for (long i = 0; i < my_list.size(); i++) {\n            temp = my_list.get(i);\n            sorted_list.add(temp);\n        }\n        return sorted_list;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ShellSort((new List<long>(new long[]{(long)12L, (long)23L, (long)4L, (long)5L, (long)3L, (long)2L, (long)12L, (long)81L, (long)56L, (long)95L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)12L, (long)12L, (long)23L, (long)56L, (long)81L, (long)95L}))));",
            "Debug.Assert(ShellSort((new List<long>(new long[]{(long)24L, (long)22L, (long)39L, (long)34L, (long)87L, (long)73L, (long)68L}))).Equals((new List<long>(new long[]{(long)22L, (long)24L, (long)34L, (long)39L, (long)68L, (long)73L, (long)87L}))));",
            "Debug.Assert(ShellSort((new List<long>(new long[]{(long)32L, (long)30L, (long)16L, (long)96L, (long)82L, (long)83L, (long)74L}))).Equals((new List<long>(new long[]{(long)16L, (long)30L, (long)32L, (long)74L, (long)82L, (long)83L, (long)96L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long, long, long> AndTuples(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n        long result = 0;\n        long result1 = 0;\n        long result2 = 0;\n        long result3 = 0;\n        long result4 = 0;\n        long result5 = 0;\n        long result6 = 0;\n        long result7 = 0;\n        long result8 = 0;\n        long result9 = 0;\n        long result10 = 0;\n        long result11 = 0;\n        long result12 = 0;\n        long result13 = 0;\n        long result14 = 0;\n        long result15 = 0;\n        long result16 = 0;\n        long result17 = 0;\n        long result18 = 0;\n        long result19 = 0;\n        long result20 = 0;\n        long result21 = 0;\n        long result22 = 0;\n        long result23 = 0;\n        long result24 = 0;\n        long result25 = 0;\n        long result26 = 0;\n        long result27 = 0;\n        long result28 = 0;\n        long result29 = 0;\n        long result30 = 0;\n        long result31 = 0;\n        long result32 = 0;\n        long result33 = 0;\n        long result34 = 0;\n        long result35 = 0;\n        long result36 = 0;\n        long result37 = 0;\n        long result38 = 0;\n        long result39 = 0;\n        long result40 = 0;\n        long result41 = 0;\n        long result42 = 0;\n        long result43 = 0;\n        long result44 = 0;\n        long result45 = 0;\n        long result46 = 0;\n        long result47 = 0;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AndTuples((Tuple.Create(10L, 4L, 6L, 9L)), (Tuple.Create(5L, 2L, 3L, 3L))).Equals((Tuple.Create(0L, 0L, 2L, 1L))));",
            "Debug.Assert(AndTuples((Tuple.Create(1L, 2L, 3L, 4L)), (Tuple.Create(5L, 6L, 7L, 8L))).Equals((Tuple.Create(1L, 2L, 3L, 0L))));",
            "Debug.Assert(AndTuples((Tuple.Create(8L, 9L, 11L, 12L)), (Tuple.Create(7L, 13L, 14L, 17L))).Equals((Tuple.Create(0L, 9L, 10L, 0L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "Write a function to find the directrix of a parabola.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long ParabolaDirectrix(long a, long b, long c) {\n        long d = a + b;\n        long e = c + b;\n        long f = a + b;\n        long g = c + b;\n        long h = a + b;\n        long i = a + b;\n        long j = a + b;\n        long k = a + b;\n        long l = a + b;\n        long m = a + b;\n        long n = a + b;\n        long o = a + b;\n        long p = a + b;\n        long q = a + b;\n        long r = a + b;\n        long s = a + b;\n        long t = a + b;\n        long u = a + b;\n        long v = a + b;\n        long w = a + b;\n        long x = a + b;\n        long y = a + b;\n        long z = a + b;\n        long a1 = a + b;\n        long a2 = a + b;\n        long a3 = a + b;\n        long a4 = a + b;\n        long a5 = a + b;\n        long a6 = a + b;\n        long a7 = a + b;\n        long a8 = a + b;\n        long a9 = a + b;\n        long a10 = a + b;\n        long a11 = a + b;\n        long a12 = a + b;\n        long a13 = a + b;\n        long a14 = a + b;\n        long a15 = a + b;\n        long a16 = a + b;\n        long a17 = a + b;\n        long a18 = a + b;\n        long a19 = a + b;\n        long a20 = a + b;\n        long a21 = a + b;\n        long\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ParabolaDirectrix((5L), (3L), (2L)) == (-198L));",
            "Debug.Assert(ParabolaDirectrix((9L), (8L), (4L)) == (-2336L));",
            "Debug.Assert(ParabolaDirectrix((2L), (4L), (6L)) == (-130L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "431",
        "title": "common_element",
        "text": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Nullable<bool> CommonElement(List<object> list1, List<object> list2) {\n        Nullable<bool> result = new Nullable<bool>();\n        if (list1.size() == 0) {\n            result.set(true);\n            return result;\n        }\n        if (list2.size() == 0) {\n            result.set(true);\n            return result;\n        }\n        if (list1.size() == list2.size()) {\n            result.set(true);\n            return result;\n        }\n        if (list1.size() > list2.size()) {\n            result.set(false);\n            return result;\n        }\n        if (list2.size() > list1.size()) {\n            result.set(false);\n            return result;\n        }\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) == list2.get(i)) {\n                result.set(true);\n                return result;\n            }\n        }\n        result.set(false);\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CommonElement((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<object>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals(true));",
            "Debug.Assert(CommonElement((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<object>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L}))).Equals(null));",
            "Debug.Assert(CommonElement((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"})), (new List<object>(new string[]{(string)\"d\", (string)\"b\", (string)\"e\"}))).Equals(true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "Write a function to find the median length of a trapezium.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float MedianTrapezium(long base1, long base2, long height) {\n        long sum = 0;\n        long count = 0;\n        long sum1 = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long sum\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MedianTrapezium((15L), (25L), (35L)) == (float)20L);",
            "Debug.Assert(MedianTrapezium((10L), (20L), (30L)) == (float)15L);",
            "Debug.Assert(MedianTrapezium((6L), (9L), (4L)) == (7.5f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "Write a function to check whether the entered number is greater than the elements of the given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckGreater(List<long> arr, long number) {\n        for (long i = 0; i < arr.Length; i++) {\n            if (arr[i] > number) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckGreater((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (4L)) == (false));",
            "Debug.Assert(CheckGreater((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (8L)) == (true));",
            "Debug.Assert(CheckGreater((new List<long>(new long[]{(long)9L, (long)7L, (long)4L, (long)8L, (long)6L, (long)1L})), (11L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "If the longest substring of the text that is a is a, then return true.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool TextMatchOne(string text) {\n        string longest = text;\n        for (int i = 0; i < text.length(); i++) {\n            if (text[i] == 'a') {\n                longest = longest.substr(0, i);\n            }\n        }\n        return longest.equals(text);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TextMatchOne((\"ac\")) == (false));",
            "Debug.Assert(TextMatchOne((\"dc\")) == (false));",
            "Debug.Assert(TextMatchOne((\"abba\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "Write a csthon function to find the last digit of a given number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long LastDigit(long n) {\n        long result = 0;\n        while (n > 0) {\n            result = n % 10;\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(LastDigit((123L)) == (3L));",
            "Debug.Assert(LastDigit((25L)) == (5L));",
            "Debug.Assert(LastDigit((30L)) == (0L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "Write a csthon function to return the negative numbers in a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> NegNos(List<long> list1) {\n        List<long> list2 = new ArrayList<long>();\n        for (long i = 0; i < list1.size(); i++) {\n            list2.add(list1.get(i) - 1);\n        }\n        return list2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(NegNos((new List<long>(new long[]{(long)-1L, (long)4L, (long)5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-1L, (long)-6L}))));",
            "Debug.Assert(NegNos((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)-1L, (long)-2L}))));",
            "Debug.Assert(NegNos((new List<long>(new long[]{(long)-7L, (long)-6L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)-7L, (long)-6L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "Write a function to remove odd characters in a string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string RemoveOdd(string str1) {\n        string str2 = \"\";\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i)!= str1.charAt(i + 1)) {\n                str2 += str1.charAt(i);\n            }\n        }\n        return str2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveOdd((\"python\")).Equals((\"yhn\")));",
            "Debug.Assert(RemoveOdd((\"program\")).Equals((\"rga\")));",
            "Debug.Assert(RemoveOdd((\"language\")).Equals((\"agae\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "Write a function to count bidirectional tuple pairs.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountBidirectional(List<Tuple<long, long>> test_list) {\n        long count = 0;\n        for (int i = 0; i < test_list.Length; i++) {\n            long a = test_list.get(i).A;\n            long b = test_list.get(i).B;\n            if (a > b) {\n                count += 1;\n            }\n            else {\n                count += -1;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountBidirectional((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(9L, 1L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(2L, 1L)}))) == (3L));",
            "Debug.Assert(CountBidirectional((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(1L, 3L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(9L, 1L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(2L, 1L)}))) == (2L));",
            "Debug.Assert(CountBidirectional((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(9L, 2L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(2L, 1L)}))) == (4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "Write a function to join a list of multiple integers into a single integer.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MultipleToSingle(List<long> L) {\n        long result = 0;\n        for (long i : L) {\n            result += i;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MultipleToSingle((new List<long>(new long[]{(long)11L, (long)33L, (long)50L}))) == (113350L));",
            "Debug.Assert(MultipleToSingle((new List<long>(new long[]{(long)-1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (-123456L));",
            "Debug.Assert(MultipleToSingle((new List<long>(new long[]{(long)10L, (long)15L, (long)20L, (long)25L}))) == (10152025L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "Create a list of all the possible adverbs.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long, string> FindAdverbPosition(string text) {\n        List<string> adverbs = new ArrayList<string>();\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"adverb\");\n        adverbs.Add(\"\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindAdverbPosition((\"clearly!! we can see the sky\")).Equals((Tuple.Create(0L, 7L, \"clearly\"))));",
            "Debug.Assert(FindAdverbPosition((\"seriously!! there are many roses\")).Equals((Tuple.Create(0L, 9L, \"seriously\"))));",
            "Debug.Assert(FindAdverbPosition((\"unfortunately!! sita is going to home\")).Equals((Tuple.Create(0L, 13L, \"unfortunately\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "Write a function to find the surface area of a cube of a given size.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SurfaceareaCube(long l) {\n        long l1 = 0;\n        long l2 = 0;\n        long l3 = 0;\n        long l4 = 0;\n        long l5 = 0;\n        long l6 = 0;\n        long l7 = 0;\n        long l8 = 0;\n        long l9 = 0;\n        long l10 = 0;\n        long l11 = 0;\n        long l12 = 0;\n        long l13 = 0;\n        long l14 = 0;\n        long l15 = 0;\n        long l16 = 0;\n        long l17 = 0;\n        long l18 = 0;\n        long l19 = 0;\n        long l20 = 0;\n        long l21 = 0;\n        long l22 = 0;\n        long l23 = 0;\n        long l24 = 0;\n        long l25 = 0;\n        long l26 = 0;\n        long l27 = 0;\n        long l28 = 0;\n        long l29 = 0;\n        long l30 = 0;\n        long l31 = 0;\n        long l32 = 0;\n        long l33 = 0;\n        long l34 = 0;\n        long l35 = 0;\n        long l36 = 0;\n        long l37 = 0;\n        long l38 = 0;\n        long l39 = 0;\n        long l40 = 0;\n        long l41 = 0;\n        long l42 = 0;\n        long l43 = 0;\n        long l44 = 0;\n        long l45 = 0;\n        long l46 = 0;\n        long l47 = 0;\n        long l48 = 0;\n        long l49 = 0;\n        long l50 = 0;\n        long l51 = 0;\n        long l52 = 0;\n        long l53 = 0;\n        \n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SurfaceareaCube((5L)) == (150L));",
            "Debug.Assert(SurfaceareaCube((3L)) == (54L));",
            "Debug.Assert(SurfaceareaCube((10L)) == (600L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "Write a function to find the ration of positive numbers in a list of integers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float PositiveCount(List<long> nums) {\n        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n        }\n        return sum / nums.size();\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(PositiveCount((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)0L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (0.54f));",
            "Debug.Assert(PositiveCount((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)4L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (0.69f));",
            "Debug.Assert(PositiveCount((new List<long>(new long[]{(long)2L, (long)4L, (long)-6L, (long)-9L, (long)11L, (long)-12L, (long)14L, (long)-5L, (long)17L}))) == (0.56f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "Write a csthon function to find the largest negative number from the given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long LargestNeg(List<long> list1) {\n        long max = 0;\n        for (long i = 0; i < list1.size(); i++) {\n            if (list1.get(i) < 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(LargestNeg((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-4L, (long)-6L}))) == (-6L));",
            "Debug.Assert(LargestNeg((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-8L, (long)-9L}))) == (-9L));",
            "Debug.Assert(LargestNeg((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)-1L}))) == (-1L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "Write a function to trim each list by k in the given lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<long>> TrimTuple(List<List<long>> test_list, long K) {\n        List<List<long>> result = new ArrayList<List<long>>();\n        for (int i = 0; i < test_list.size(); i++) {\n            List<long> list = test_list.get(i);\n            if (list.size() > K) {\n                result.add(list);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TrimTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)9L, (long)2L, (long)1L}), (List<long>)new List<long>(new long[]{(long)9L, (long)1L, (long)2L, (long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)8L, (long)2L, (long)1L, (long)7L})})), (2L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L}), (List<long>)new List<long>(new long[]{(long)9L}), (List<long>)new List<long>(new long[]{(long)2L}), (List<long>)new List<long>(new long[]{(long)2L})}))));",
            "Debug.Assert(TrimTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)9L, (long)2L, (long)1L}), (List<long>)new List<long>(new long[]{(long)9L, (long)1L, (long)2L, (long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)8L, (long)2L, (long)1L, (long)7L})})), (1L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)2L, (long)1L}), (List<long>)new List<long>(new long[]{(long)4L, (long)9L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)8L, (long)2L, (long)1L})}))));",
            "Debug.Assert(TrimTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)4L, (long)9L}), (List<long>)new List<long>(new long[]{(long)11L, (long)8L, (long)12L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)1L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L, (long)9L, (long)7L})})), (1L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)4L}), (List<long>)new List<long>(new long[]{(long)8L, (long)12L}), (List<long>)new List<long>(new long[]{(long)1L, (long)7L}), (List<long>)new List<long>(new long[]{(long)6L, (long)9L})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "Write a function to perform index wise multiplication of list elements in the given two lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<long>> IndexMultiplication(List<List<long>> test_tup1, List<List<long>> test_tup2) {\n        List<List<long>> result = new ArrayList<List<long>>();\n        for (int i = 0; i < test_tup1.size(); i++) {\n            for (int j = 0; j < test_tup1.size(); j++) {\n                result.add(new ArrayList<long>(test_tup1.get(i)));\n                result.add(new ArrayList<long>(test_tup2.get(j)));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IndexMultiplication((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)10L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)3L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)21L}), (List<long>)new List<long>(new long[]{(long)12L, (long)45L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)7L, (long)30L})}))));",
            "Debug.Assert(IndexMultiplication((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)11L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)4L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)2L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)14L, (long)32L}), (List<long>)new List<long>(new long[]{(long)20L, (long)60L}), (List<long>)new List<long>(new long[]{(long)6L, (long)20L}), (List<long>)new List<long>(new long[]{(long)16L, (long)44L})}))));",
            "Debug.Assert(IndexMultiplication((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)4L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)12L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)5L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)24L, (long)45L}), (List<long>)new List<long>(new long[]{(long)30L, (long)77L}), (List<long>)new List<long>(new long[]{(long)12L, (long)33L}), (List<long>)new List<long>(new long[]{(long)27L, (long)60L})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "446",
        "title": "count_Occurrence",
        "text": "Write a csthon function to count the occurence of all elements of list in a tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountOccurrence(object tup, List<object> lst) {\n        long count = 0;\n        for (int i = 0; i < lst.Length; i++) {\n            if (lst.get(i) == tup) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountOccurrence(Tuple.Create(\"a\", \"a\", \"c\", \"b\", \"d\"), (new List<object>(new string[]{(string)\"a\", (string)\"b\"}))) == (3L));",
            "Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 1L, 4L, 6L, 7L, 1L, 4L), (new List<object>(new long[]{(long)1L, (long)4L, (long)7L}))) == (6L));",
            "Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L), (new List<object>(new long[]{(long)1L, (long)2L}))) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "Write a function to find cubes of individual elements in a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> CubeNums(List<long> nums) {\n        List<long> result = new ArrayList<long>();\n        for (long num : nums) {\n            if (num % 2 == 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CubeNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)27L, (long)64L, (long)125L, (long)216L, (long)343L, (long)512L, (long)729L, (long)1000L}))));",
            "Debug.Assert(CubeNums((new List<long>(new long[]{(long)10L, (long)20L, (long)30L}))).Equals((new List<long>(new long[]{(long)1000L, (long)8000L, (long)27000L}))));",
            "Debug.Assert(CubeNums((new List<long>(new long[]{(long)12L, (long)15L}))).Equals((new List<long>(new long[]{(long)1728L, (long)3375L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CalSum(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CalSum((9L)) == (49L));",
            "Debug.Assert(CalSum((10L)) == (66L));",
            "Debug.Assert(CalSum((11L)) == (88L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "Write a function to extract specified size of strings from a given list of string values.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> ExtractString(List<string> str, long l) {\n        List<string> result = new ArrayList<string>();\n        for (int i = 0; i < str.size(); i++) {\n            if (l == 0) {\n                result.add(str.get(i));\n            } else {\n                result.add(str.get(i) + \" \" + l);\n            }\n            l--;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ExtractString((new List<string>(new string[]{(string)\"Python\", (string)\"list\", (string)\"exercises\", (string)\"practice\", (string)\"solution\"})), (8L)).Equals((new List<string>(new string[]{(string)\"practice\", (string)\"solution\"}))));",
            "Debug.Assert(ExtractString((new List<string>(new string[]{(string)\"Python\", (string)\"list\", (string)\"exercises\", (string)\"practice\", (string)\"solution\"})), (6L)).Equals((new List<string>(new string[]{(string)\"Python\"}))));",
            "Debug.Assert(ExtractString((new List<string>(new string[]{(string)\"Python\", (string)\"list\", (string)\"exercises\", (string)\"practice\", (string)\"solution\"})), (9L)).Equals((new List<string>(new string[]{(string)\"exercises\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "Write a function to remove all whitespaces from the given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string RemoveWhitespaces(string text1) {\n        string result = \"\";\n        for (int i = 0; i < text1.length(); i++) {\n            if (text1.charAt(i)!='') {\n                result += text1.charAt(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveWhitespaces((\" Google    Flutter \")).Equals((\"GoogleFlutter\")));",
            "Debug.Assert(RemoveWhitespaces((\" Google    Dart \")).Equals((\"GoogleDart\")));",
            "Debug.Assert(RemoveWhitespaces((\" iOS    Swift \")).Equals((\"iOSSwift\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long LossAmount(long actual_cost, long sale_amount) {\n        long loss = 0;\n        if (sale_amount > 0) {\n            loss = actual_cost - sale_amount;\n        }\n        return loss;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(LossAmount((1500L), (1200L)) == (0L));",
            "Debug.Assert(LossAmount((100L), (200L)) == (100L));",
            "Debug.Assert(LossAmount((2000L), (5000L)) == (3000L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "Write a csthon function to find the sum of even factors of a number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Sumoffactors(long n) {\n        long sum = 0;\n        while (n > 1) {\n            n = n / 2;\n            sum += n;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Sumoffactors((18L)) == (26L));",
            "Debug.Assert(Sumoffactors((30L)) == (48L));",
            "Debug.Assert(Sumoffactors((6L)) == (8L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "Create a string of all the characters in the string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool TextMatchWordz(string text) {\n        string s = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            s += text[i];\n        }\n        string s2 = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            s2 += text[i];\n        }\n        string s3 = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            s3 += text[i];\n        }\n        string s4 = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            s4 += text[i];\n        }\n        string s5 = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            s5 += text[i];\n        }\n        string s6 = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            s6 += text[i];\n        }\n        string s7 = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            s7 += text[i];\n        }\n        string s8 = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            s8 += text[i];\n        }\n        \n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TextMatchWordz((\"pythonz.\")) == (true));",
            "Debug.Assert(TextMatchWordz((\"xyz.\")) == (true));",
            "Debug.Assert(TextMatchWordz((\"  lang  .\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckMonthnumbNumber(long monthnum2) {\n        long monthnum = monthnum2;\n        long monthnum1 = monthnum / 31;\n        long monthnum2 = monthnum % 31;\n        return (monthnum1 == 0) && (monthnum2 == 0);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckMonthnumbNumber((5L)) == (true));",
            "Debug.Assert(CheckMonthnumbNumber((2L)) == (false));",
            "Debug.Assert(CheckMonthnumbNumber((6L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "Write a function to reverse each string in a given list of string values.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> ReverseStringList(List<string> stringlist) {\n        List<string> reverselist = new ArrayList<string>();\n        for (int i = 0; i < stringlist.size(); i++) {\n            reverselist.add(stringlist.get(i));\n        }\n        return reverselist;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ReverseStringList((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\", (string)\"White\", (string)\"Black\"}))).Equals((new List<string>(new string[]{(string)\"deR\", (string)\"neerG\", (string)\"eulB\", (string)\"etihW\", (string)\"kcalB\"}))));",
            "Debug.Assert(ReverseStringList((new List<string>(new string[]{(string)\"john\", (string)\"amal\", (string)\"joel\", (string)\"george\"}))).Equals((new List<string>(new string[]{(string)\"nhoj\", (string)\"lama\", (string)\"leoj\", (string)\"egroeg\"}))));",
            "Debug.Assert(ReverseStringList((new List<string>(new string[]{(string)\"jack\", (string)\"john\", (string)\"mary\"}))).Equals((new List<string>(new string[]{(string)\"kcaj\", (string)\"nhoj\", (string)\"yram\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "457",
        "title": "Find_Min",
        "text": "Write a csthon function to find the sublist having minimum length.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<object> FindMin(List<List<object>> lst) {\n        List<object> result = new ArrayList<>();\n        for (List<object> l : lst) {\n            if (l.size() < 2) {\n                continue;\n            }\n            List<object> sub = l.subList(0, l.size() - 1);\n            if (sub.size() < 2) {\n                continue;\n            }\n            result.add(sub.get(0));\n            result.add(sub.get(1));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindMin((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})}))).Equals((new List<object>(new long[]{(long)1L}))));",
            "Debug.Assert(FindMin((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)7L, (long)8L})}))).Equals((new List<object>(new long[]{(long)1L, (long)1L}))));",
            "Debug.Assert(FindMin((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\"}), (List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\"}), (List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"})}))).Equals((new List<object>(new string[]{(string)\"x\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "Write a function to find the area of a rectangle.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long RectangleArea(long l, long b) {\n        long x = l;\n        long y = b;\n        long r = x + b - x;\n        long bb = b;\n        long rr = r + b - r;\n        long x1 = x;\n        long y1 = y;\n        long x2 = x + b;\n        long y2 = y + b;\n        long rr1 = rr;\n        long rr2 = rr + b - rr;\n        long x3 = x1;\n        long y3 = y1;\n        long x4 = x2;\n        long y4 = y2;\n        long rr3 = rr1;\n        long rr4 = rr2;\n        long x5 = x3;\n        long y5 = y3;\n        long x6 = x4;\n        long y6 = y4;\n        long rr5 = rr3;\n        long rr6 = rr4;\n        long x7 = x5;\n        long y7 = y5;\n        long x8 = x6;\n        long y8 = y6;\n        long rr7 = rr5;\n        long rr8 = rr6;\n        long x9 = x7;\n        long y9 = y7;\n        long x10 = x8;\n        long y10 = y8;\n        long rr9 = rr7;\n        long rr10 = rr8;\n        long x11 = x9;\n        long y11 = y9;\n        long x12 = x10;\n        long y12 = y10;\n        long rr11 = rr9;\n        long rr12 = rr10;\n        long x13 = x11;\n        long y13 = y11;\n        long x14 = x12;\n        long y14\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RectangleArea((10L), (20L)) == (200L));",
            "Debug.Assert(RectangleArea((10L), (5L)) == (50L));",
            "Debug.Assert(RectangleArea((4L), (2L)) == (8L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "Write a function to remove uppercase substrings from a given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string RemoveUppercase(string str1) {\n        string str2 = \"\";\n        for (int i = 0; i < str1.length(); i++) {\n            if (Character.isUpperCase(str1.charAt(i))) {\n                str2 += str1.charAt(i);\n            }\n        }\n        return str2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveUppercase((\"cAstyoUrFavoRitETVshoWs\")).Equals((\"cstyoravoitshos\")));",
            "Debug.Assert(RemoveUppercase((\"wAtchTheinTernEtrAdIo\")).Equals((\"wtchheinerntrdo\")));",
            "Debug.Assert(RemoveUppercase((\"VoicESeaRchAndreComMendaTionS\")).Equals((\"oiceachndreomendaion\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "Write a csthon function to get the first element of each sublist.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> Extract(List<List<long>> lst) {\n        List<long> result = new ArrayList<long>();\n        for (int i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i).get(0));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Extract((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L})}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)6L}))));",
            "Debug.Assert(Extract((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L})}))).Equals((new List<long>(new long[]{(long)1L, (long)4L}))));",
            "Debug.Assert(Extract((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)9L, (long)8L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L})}))).Equals((new List<long>(new long[]{(long)9L, (long)1L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "Write a csthon function to count the upper case characters in a given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long UpperCtr(string str) {\n        long result = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isUpperCase(str.charAt(i))) {\n                result++;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(UpperCtr((\"PYthon\")) == (1L));",
            "Debug.Assert(UpperCtr((\"BigData\")) == (1L));",
            "Debug.Assert(UpperCtr((\"program\")) == (0L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "Write a function to find the maximum product sublist of the given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = 0;\n        for (long i = 0; i < arr.Length; i++) {\n            long product = arr[i] * arr[i];\n            if (product > max) {\n                max = product;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));",
            "Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));",
            "Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "Write a function to check if all values are same in a dictionary.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckValue(Dictionary<string,long> dict, long n) {\n        for (int i = 0; i < dict.Length(); i++) {\n            if (dict.Get(i)!= n) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckValue((new Dictionary<string,long>(){{\"Cierra Vega\", 12L}, {\"Alden Cantrell\", 12L}, {\"Kierra Gentry\", 12L}, {\"Pierre Cox\", 12L}}), (10L)) == (false));",
            "Debug.Assert(CheckValue((new Dictionary<string,long>(){{\"Cierra Vega\", 12L}, {\"Alden Cantrell\", 12L}, {\"Kierra Gentry\", 12L}, {\"Pierre Cox\", 12L}}), (12L)) == (true));",
            "Debug.Assert(CheckValue((new Dictionary<string,long>(){{\"Cierra Vega\", 12L}, {\"Alden Cantrell\", 12L}, {\"Kierra Gentry\", 12L}, {\"Pierre Cox\", 12L}}), (5L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "465",
        "title": "drop_empty",
        "text": "Write a function to drop empty items from a given dictionary.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Dictionary<string,string> DropEmpty(Dictionary<string,string> dict1) {\n        Dictionary<string,string> dict2 = new Dictionary<string,string>();\n        for (int i = 0; i < dict1.Size(); i++) {\n            if (dict1.Get(i) == \"\") {\n                dict2.Add(dict1.Get(i), \"\");\n            }\n        }\n        return dict2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(DropEmpty((new Dictionary<string,string>(){{\"c1\", \"Red\"}, {\"c2\", \"Green\"}, {\"c3\", null}})).Equals((new Dictionary<string,string>(){{\"c1\", \"Red\"}, {\"c2\", \"Green\"}})));",
            "Debug.Assert(DropEmpty((new Dictionary<string,string>(){{\"c1\", \"Red\"}, {\"c2\", null}, {\"c3\", null}})).Equals((new Dictionary<string,string>(){{\"c1\", \"Red\"}})));",
            "Debug.Assert(DropEmpty((new Dictionary<string,string>(){{\"c1\", null}, {\"c2\", \"Green\"}, {\"c3\", null}})).Equals((new Dictionary<string,string>(){{\"c2\", \"Green\"}})));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MaxProduct(List<long> arr) {\n        long max = 0;\n        for (long i = 0; i < arr.Length; i++) {\n            long product = arr[i] * arr[i];\n            if (product > max) {\n                max = product;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxProduct((new List<long>(new long[]{(long)3L, (long)100L, (long)4L, (long)5L, (long)150L, (long)6L}))) == (3000L));",
            "Debug.Assert(MaxProduct((new List<long>(new long[]{(long)4L, (long)42L, (long)55L, (long)68L, (long)80L}))) == (50265600L));",
            "Debug.Assert(MaxProduct((new List<long>(new long[]{(long)10L, (long)22L, (long)9L, (long)33L, (long)21L, (long)50L, (long)41L, (long)60L}))) == (2460L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long, long, long> AddPairwise(Tuple<long, long, long, long, long> test_tup) {\n        long result = 0;\n        long x = test_tup.get(0);\n        long y = test_tup.get(1);\n        long z = test_tup.get(2);\n        long w = test_tup.get(3);\n        long x_ = test_tup.get(4);\n        long y_ = test_tup.get(5);\n        long z_ = test_tup.get(6);\n        long w_ = test_tup.get(7);\n        long x_w = test_tup.get(8);\n        long y_w = test_tup.get(9);\n        long z_w = test_tup.get(10);\n        long w_w = test_tup.get(11);\n        long x_w_ = test_tup.get(12);\n        long y_w_ = test_tup.get(13);\n        long z_w_ = test_tup.get(14);\n        long w_w_ = test_tup.get(15);\n        long x_w_w = test_tup.get(16);\n        long y_w_w = test_tup.get(17);\n        long z_w_w = test_tup.get(18);\n        long w_w_w = test_tup.get(19);\n        long x_w_w_ = test_tup.get(20);\n        long y_w_w_ = test_tup.get(21);\n        long z_w_w_ = test_tup.get(22);\n        long w_w_w_ = test_tup\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AddPairwise((Tuple.Create(1L, 5L, 7L, 8L, 10L))).Equals((Tuple.Create(6L, 12L, 15L, 18L))));",
            "Debug.Assert(AddPairwise((Tuple.Create(2L, 6L, 8L, 9L, 11L))).Equals((Tuple.Create(8L, 14L, 17L, 20L))));",
            "Debug.Assert(AddPairwise((Tuple.Create(3L, 7L, 9L, 10L, 12L))).Equals((Tuple.Create(10L, 16L, 19L, 22L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "Write a csthon function to find the product of the list multiplication modulo n.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindRemainder(List<long> arr, long n) {\n        long product = 1;\n        for (long i = 0; i < arr.Length; i++) {\n            product *= arr.get(i);\n        }\n        return product % n;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindRemainder((new List<long>(new long[]{(long)100L, (long)10L, (long)5L, (long)25L, (long)35L, (long)14L})), (11L)) == (9L));",
            "Debug.Assert(FindRemainder((new List<long>(new long[]{(long)1L, (long)1L, (long)1L})), (1L)) == (0L));",
            "Debug.Assert(FindRemainder((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (2L)) == (0L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "Write a csthon function to check whether the given list contains consecutive numbers or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckConsecutive(List<long> l) {\n        long sum = 0;\n        for (long i : l) {\n            sum += i;\n        }\n        return sum == l.Length();\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));",
            "Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));",
            "Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "Write a function to replace characters in a string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string ReplaceChar(string str1, string ch, string newch) {\n        string result = \"\";\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) == ch) {\n                result = result + newch;\n            } else {\n                result = result + str1.charAt(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ReplaceChar((\"polygon\"), (\"y\"), (\"l\")).Equals((\"pollgon\")));",
            "Debug.Assert(ReplaceChar((\"character\"), (\"c\"), (\"a\")).Equals((\"aharaater\")));",
            "Debug.Assert(ReplaceChar((\"python\"), (\"l\"), (\"a\")).Equals((\"python\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "Write a function to sort a dictionary by value.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Tuple<string, long>> SortCounter(Dictionary<string,long> dict1) {\n        List<Tuple<string, long>> result = new ArrayList<Tuple<string, long>>();\n        for (int i = 0; i < dict1.Size(); i++) {\n            result.Add(new Tuple<string, long>(dict1.Get(i), i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SortCounter((new Dictionary<string,long>(){{\"Math\", 81L}, {\"Physics\", 83L}, {\"Chemistry\", 87L}})).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Chemistry\", 87L), (Tuple<string, long>)Tuple.Create(\"Physics\", 83L), (Tuple<string, long>)Tuple.Create(\"Math\", 81L)}))));",
            "Debug.Assert(SortCounter((new Dictionary<string,long>(){{\"Math\", 400L}, {\"Physics\", 300L}, {\"Chemistry\", 250L}})).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Math\", 400L), (Tuple<string, long>)Tuple.Create(\"Physics\", 300L), (Tuple<string, long>)Tuple.Create(\"Chemistry\", 250L)}))));",
            "Debug.Assert(SortCounter((new Dictionary<string,long>(){{\"Math\", 900L}, {\"Physics\", 1000L}, {\"Chemistry\", 1250L}})).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Chemistry\", 1250L), (Tuple<string, long>)Tuple.Create(\"Physics\", 1000L), (Tuple<string, long>)Tuple.Create(\"Math\", 900L)}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "Write a csthon function to find the sum of the largest and smallest value in a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long BigSum(List<long> nums) {\n        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(BigSum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (4L));",
            "Debug.Assert(BigSum((new List<long>(new long[]{(long)-1L, (long)2L, (long)3L, (long)4L}))) == (3L));",
            "Debug.Assert(BigSum((new List<long>(new long[]{(long)2L, (long)3L, (long)6L}))) == (8L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "Write a csthon function to convert the given string to lower case.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string IsLower(string str) {\n        string lower = \"\";\n        for (int i = 0; i < str.length(); i++) {\n            lower += str.charAt(i);\n        }\n        return lower;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsLower((\"InValid\")).Equals((\"invalid\")));",
            "Debug.Assert(IsLower((\"TruE\")).Equals((\"true\")));",
            "Debug.Assert(IsLower((\"SenTenCE\")).Equals((\"sentence\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string RemoveLowercase(string str1) {\n        string str2 = \"\";\n        for (int i = 0; i < str1.length(); i++) {\n            if (Character.isLowerCase(str1.charAt(i))) {\n                str2 += str1.charAt(i);\n            }\n        }\n        return str2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveLowercase((\"PYTHon\")).Equals((\"PYTH\")));",
            "Debug.Assert(RemoveLowercase((\"FInD\")).Equals((\"FID\")));",
            "Debug.Assert(RemoveLowercase((\"STRinG\")).Equals((\"STRG\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "Write a csthon function to find the first digit of a given number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FirstDigit(long n) {\n        long result = 0;\n        while (n > 0) {\n            result = n % 10;\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FirstDigit((123L)) == (1L));",
            "Debug.Assert(FirstDigit((456L)) == (4L));",
            "Debug.Assert(FirstDigit((12L)) == (1L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> HeapQueueLargest(List<long> nums, long n) {\n        List<long> result = new ArrayList<long>();\n        long max = 0;\n        for (long i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > max) {\n                max = nums.get(i);\n            }\n        }\n        result.add(max);\n        HeapQueueLargest(nums, max);\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (3L)).Equals((new List<long>(new long[]{(long)85L, (long)75L, (long)65L}))));",
            "Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (2L)).Equals((new List<long>(new long[]{(long)85L, (long)75L}))));",
            "Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (5L)).Equals((new List<long>(new long[]{(long)85L, (long)75L, (long)65L, (long)58L, (long)35L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "Write a csthon function which takes a list of integers and only returns the odd ones.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> Split(List<long> list) {\n        List<long> result = new ArrayList<long>();\n        long odd = 0;\n        for (long i : list) {\n            if (i % 2 == 0) {\n                odd += i;\n            } else {\n                result.add(odd);\n                odd = 0;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Split((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)5L}))));",
            "Debug.Assert(Split((new List<long>(new long[]{(long)10L, (long)11L, (long)12L, (long)13L}))).Equals((new List<long>(new long[]{(long)11L, (long)13L}))));",
            "Debug.Assert(Split((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)7L, (long)9L, (long)1L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "Write a csthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Difference(long n) {\n        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Difference((3L)) == (30L));",
            "Debug.Assert(Difference((5L)) == (210L));",
            "Debug.Assert(Difference((2L)) == (6L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "Write a csthon function to count the number of pairs whose xor value is odd.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        for (long i = 0; i < A.Length; i++) {\n            if (A[i] % 2 == 1) odd++;\n        }\n        return odd;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));",
            "Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));",
            "Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "Write a function to toggle the case of all characters in a string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string ToggleString(string str) {\n        string ret = \"\";\n        for (int i = 0; i < str.length(); i++) {\n            ret += str[i];\n        }\n        return ret;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ToggleString((\"Python\")).Equals((\"pYTHON\")));",
            "Debug.Assert(ToggleString((\"Pangram\")).Equals((\"pANGRAM\")));",
            "Debug.Assert(ToggleString((\"LIttLE\")).Equals((\"liTTle\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "Write a csthon function to find the sum of the per-digit difference between two integers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long DigitDistanceNums(long n1, long n2) {\n        long sum = 0;\n        for (int i = 0; i < n1; i++) {\n            sum += n2 - n1 * i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(DigitDistanceNums((1L), (2L)) == (1L));",
            "Debug.Assert(DigitDistanceNums((23L), (56L)) == (6L));",
            "Debug.Assert(DigitDistanceNums((123L), (256L)) == (7L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "Write a function to find the sum of the largest contiguous sublist in the given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MaxSubArraySum(List<long> a, long size) {\n        long sum = 0;\n        for (long i = 0; i < size; i++) {\n            sum += a.get(i);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxSubArraySum((new List<long>(new long[]{(long)-2L, (long)-3L, (long)4L, (long)-1L, (long)-2L, (long)1L, (long)5L, (long)-3L})), (8L)) == (7L));",
            "Debug.Assert(MaxSubArraySum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L, (long)-2L, (long)-3L, (long)2L, (long)6L, (long)-4L})), (8L)) == (8L));",
            "Debug.Assert(MaxSubArraySum((new List<long>(new long[]{(long)-4L, (long)-5L, (long)6L, (long)-3L, (long)-4L, (long)3L, (long)7L, (long)-5L})), (8L)) == (10L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "Write a function to find the union of the elements of two given lists and output them in sorted order.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> UnionElements(List<long> test_tup1, List<long> test_tup2) {\n        List<long> result = new ArrayList<long>();\n        long sum = 0;\n        for (long i = 0; i < test_tup1.size(); i++) {\n            sum += test_tup1.get(i);\n            result.add(sum);\n        }\n        for (long i = 0; i < test_tup2.size(); i++) {\n            sum += test_tup2.get(i);\n            result.add(sum);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(UnionElements((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)4L, (long)10L}))).Equals((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)10L}))));",
            "Debug.Assert(UnionElements((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))));",
            "Debug.Assert(UnionElements((new List<long>(new long[]{(long)11L, (long)12L, (long)13L, (long)14L})), (new List<long>(new long[]{(long)13L, (long)15L, (long)16L, (long)17L}))).Equals((new List<long>(new long[]{(long)11L, (long)12L, (long)13L, (long)14L, (long)15L, (long)16L, (long)17L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "Write a csthon function to find the length of the longest sublists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindMaxLength(List<List<long>> lst) {\n        long max = 0;\n        for (int i = 0; i < lst.Length; i++) {\n            for (int j = i + 1; j < lst.Length; j++) {\n                if (lst.get(i).Length > lst.get(j).Length) {\n                    max = Math.max(max, lst.get(i).Length);\n                    max = Math.max(max, lst.get(j).Length);\n                }\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindMaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L})}))) == (4L));",
            "Debug.Assert(FindMaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)1L}), (List<long>)new List<long>(new long[]{(long)2L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)2L, (long)1L})}))) == (3L));",
            "Debug.Assert(FindMaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L}), (List<long>)new List<long>(new long[]{(long)22L, (long)23L}), (List<long>)new List<long>(new long[]{(long)13L, (long)14L, (long)15L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)50L})}))) == (5L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "Write a function to extract values between quotation marks from a string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> ExtractValues(string text) {\n        List<string> result = new ArrayList<string>();\n        int i = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == '\"') {\n                result.add(text.substring(i, i + 1));\n                i++;\n            } else {\n                result.add(text.substring(i, i + 1));\n                i++;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ExtractValues((\"\"Python\", \"PHP\", \"Java\"\")).Equals((new List<string>(new string[]{(string)\"Python\", (string)\"PHP\", (string)\"Java\"}))));",
            "Debug.Assert(ExtractValues((\"\"python\",\"program\",\"language\"\")).Equals((new List<string>(new string[]{(string)\"python\", (string)\"program\", (string)\"language\"}))));",
            "Debug.Assert(ExtractValues((\"\"red\",\"blue\",\"green\",\"yellow\"\")).Equals((new List<string>(new string[]{(string)\"red\", (string)\"blue\", (string)\"green\", (string)\"yellow\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < arr.Length; i++) {\n            if (arr[i]!= arr[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));",
            "Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));",
            "Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "Write a csthon function to split a string into characters.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> Split(string word) {\n        List<string> result = new ArrayList<string>();\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isWhitespace(word.charAt(i))) {\n                result.add(word.substring(0, i));\n            } else {\n                result.add(word.substring(0, i));\n                result.add(word.substring(i + 1, word.length()));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Split((\"python\")).Equals((new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\"}))));",
            "Debug.Assert(Split((\"Name\")).Equals((new List<string>(new string[]{(string)\"N\", (string)\"a\", (string)\"m\", (string)\"e\"}))));",
            "Debug.Assert(Split((\"program\")).Equals((new List<string>(new string[]{(string)\"p\", (string)\"r\", (string)\"o\", (string)\"g\", (string)\"r\", (string)\"a\", (string)\"m\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SumDigits(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SumDigits((345L)) == (12L));",
            "Debug.Assert(SumDigits((12L)) == (3L));",
            "Debug.Assert(SumDigits((97L)) == (16L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "Write a function to check whether a specified list is sorted or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IssortList(List<long> list1) {\n        long[] array1 = list1.ToArray();\n        long[] array2 = new long[list1.Length()];\n        for (int i = 0; i < array1.length; i++) {\n            array2[i] = array1[i];\n        }\n        return (array2[0] < array2[array1.length - 1]);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IssortList((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)6L, (long)8L, (long)10L, (long)12L, (long)14L, (long)16L, (long)17L}))) == (true));",
            "Debug.Assert(IssortList((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)6L, (long)8L, (long)10L, (long)12L, (long)14L, (long)20L, (long)17L}))) == (false));",
            "Debug.Assert(IssortList((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)6L, (long)8L, (long)10L, (long)15L, (long)14L, (long)20L}))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "568",
        "title": "empty_list",
        "text": "Write a function to create a list of N empty dictionaries.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Dictionary<null,null>> EmptyList(long length) {\n        List<Dictionary<null,null>> list = new ArrayList<Dictionary<null,null>>();\n        for (long i = 0; i < length; i++) {\n            list.add(new Dictionary<null,null>());\n        }\n        return list;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(EmptyList((5L)).Equals((new List<List<Dictionary<null,null>>()}))));",
            "Debug.Assert(EmptyList((6L)).Equals((new List<List<Dictionary<null,null>>()}))));",
            "Debug.Assert(EmptyList((7L)).Equals((new List<List<Dictionary<null,null>>()}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "Write a function to sort each sublist of strings in a given list of lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<string>> SortSublists(List<List<string>> list1) {\n        List<List<string>> list2 = new ArrayList<List<string>>();\n        for (int i = 0; i < list1.size(); i++) {\n            List<string> list = list1.get(i);\n            for (int j = 0; j < list.size(); j++) {\n                list2.add(new ArrayList<string>(list));\n            }\n        }\n        return list2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"white\"}), (List<string>)new List<string>(new string[]{(string)\"white\", (string)\"black\", (string)\"orange\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"white\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"orange\", (string)\"white\"})}))));",
            "Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\"}), (List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"white\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\"}), (List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"white\"})}))));",
            "Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"g\", (string)\"h\"}), (List<string>)new List<string>(new string[]{(string)\"f\", (string)\"e\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"c\", (string)\"d\"}), (List<string>)new List<string>(new string[]{(string)\"g\", (string)\"h\"}), (List<string>)new List<string>(new string[]{(string)\"e\", (string)\"f\"})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "Write a csthon function to check if a given number is one less than twice its reverse.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool Checks(long n) {\n        if (n == 0) return true;\n        if (n == 1) return false;\n        return Checks(n - 1) && Checks(n - 2);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Checks((70L)) == (false));",
            "Debug.Assert(Checks((23L)) == (false));",
            "Debug.Assert(Checks((73L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "Write a csthon function to remove duplicate numbers from a given number of lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> TwoUniqueNums(List<long> nums) {\n        List<long> result = new ArrayList<long>();\n        for (long num : nums) {\n            if (result.contains(num)) {\n                result.remove(num);\n            } else {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));",
            "Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)4L, (long)5L}))));",
            "Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "Write a csthon function to calculate the product of the unique numbers in a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        for (long i = 0; i < list_data.Length; i++) {\n            product *= list_data[i];\n        }\n        return product;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));",
            "Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));",
            "Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "Write a function to find the surface area of a cylinder.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float SurfaceareaCylinder(long r, long h) {\n        float area = 0;\n        for (int i = 0; i < r; i++) {\n            area += (float) (h * (i + 1));\n        }\n        return area;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SurfaceareaCylinder((10L), (5L)) == (942.45f));",
            "Debug.Assert(SurfaceareaCylinder((4L), (5L)) == (226.18800000000002f));",
            "Debug.Assert(SurfaceareaCylinder((4L), (10L)) == (351.848f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "Write a csthon function to check whether a list is sublist of another or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsSubArray(List<long> A, List<long> B) {\n        if (A.size()!= B.size()) {\n            return false;\n        }\n        for (int i = 0; i < A.size(); i++) {\n            if (A.get(i)!= B.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)1L, (long)2L}))) == (false));",
            "Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (true));",
            "Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)2L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)0L}))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "Write a csthon function to find the last digit in factorial of a given number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long LastDigitFactorial(long n) {\n        long result = 1;\n        while (n > 0) {\n            result *= n;\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(LastDigitFactorial((4L)) == (4L));",
            "Debug.Assert(LastDigitFactorial((21L)) == (0L));",
            "Debug.Assert(LastDigitFactorial((30L)) == (0L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> InterleaveLists(List<long> list1, List<long> list2, List<long> list3) {\n        List<long> result = new ArrayList<long>();\n        long sum = 0;\n        for (long i = 0; i < list1.size(); i++) {\n            sum += list1.get(i);\n            result.add(sum);\n        }\n        for (long i = 0; i < list2.size(); i++) {\n            sum += list2.get(i);\n            result.add(sum);\n        }\n        for (long i = 0; i < list3.size(); i++) {\n            sum += list3.get(i);\n            result.add(sum);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(InterleaveLists((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)50L, (long)60L, (long)70L})), (new List<long>(new long[]{(long)100L, (long)200L, (long)300L, (long)400L, (long)500L, (long)600L, (long)700L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)100L, (long)2L, (long)20L, (long)200L, (long)3L, (long)30L, (long)300L, (long)4L, (long)40L, (long)400L, (long)5L, (long)50L, (long)500L, (long)6L, (long)60L, (long)600L, (long)7L, (long)70L, (long)700L}))));",
            "Debug.Assert(InterleaveLists((new List<long>(new long[]{(long)10L, (long)20L})), (new List<long>(new long[]{(long)15L, (long)2L})), (new List<long>(new long[]{(long)5L, (long)10L}))).Equals((new List<long>(new long[]{(long)10L, (long)15L, (long)5L, (long)20L, (long)2L, (long)10L}))));",
            "Debug.Assert(InterleaveLists((new List<long>(new long[]{(long)11L, (long)44L})), (new List<long>(new long[]{(long)10L, (long)15L})), (new List<long>(new long[]{(long)20L, (long)5L}))).Equals((new List<long>(new long[]{(long)11L, (long)10L, (long)20L, (long)44L, (long)15L, (long)5L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "Write a function to find the dissimilar elements in the given two tuples.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long, long, long> FindDissimilar(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n        long t1 = test_tup1.First;\n        long t2 = test_tup2.First;\n        long t3 = test_tup1.Second;\n        long t4 = test_tup2.Second;\n        long t5 = test_tup1.Third;\n        long t6 = test_tup2.Third;\n        long t7 = test_tup1.Fourth;\n        long t8 = test_tup2.Fourth;\n        long t9 = test_tup1.Fifth;\n        long t10 = test_tup2.Fifth;\n        long t11 = test_tup1.Sixth;\n        long t12 = test_tup2.Sixth;\n        long t13 = test_tup1.Seventh;\n        long t14 = test_tup2.Seventh;\n        long t15 = test_tup1.Eighth;\n        long t16 = test_tup2.Eighth;\n        long t17 = test_tup1.Ninth;\n        long t18 = test_tup2.Ninth;\n        long t19 = test_tup1.Tenth;\n        long t20 = test_tup2.Tenth;\n        long t21 = test_tup1.Eleventh;\n        long t22 = test_tup2.Eleventh;\n        long t23 = test_tup1.Twelfth;\n        long t24 = test_tup2.Twelfth;\n        long t25 = test_tup1.Thirteenth;\n        long t26 = test_tup2.Thirteenth;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindDissimilar((Tuple.Create(3L, 4L, 5L, 6L)), (Tuple.Create(5L, 7L, 4L, 10L))).Equals((Tuple.Create(3L, 6L, 7L, 10L))));",
            "Debug.Assert(FindDissimilar((Tuple.Create(1L, 2L, 3L, 4L)), (Tuple.Create(7L, 2L, 3L, 9L))).Equals((Tuple.Create(1L, 4L, 7L, 9L))));",
            "Debug.Assert(FindDissimilar((Tuple.Create(21L, 11L, 25L, 26L)), (Tuple.Create(26L, 34L, 21L, 36L))).Equals((Tuple.Create(34L, 36L, 11L, 25L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "Write a csthon function to find the largest number that can be formed with the given list of digits.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindMaxNum(List<long> arr) {\n        long max = 0;\n        for (long i = 0; i < arr.Length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindMaxNum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (321L));",
            "Debug.Assert(FindMaxNum((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)1L}))) == (6541L));",
            "Debug.Assert(FindMaxNum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)9L}))) == (9321L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "580",
        "title": "extract_even",
        "text": "Write a function to remove uneven elements in the nested mixed tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static object ExtractEven(Tuple<long, long, Tuple<long, long, Tuple<long, long>>, long, long> test_tuple) {\n        long odd = test_tuple.get(0);\n        long even = test_tuple.get(1);\n        long even_even = test_tuple.get(2);\n        long even_odd = test_tuple.get(3);\n        long odd_even = test_tuple.get(4);\n        long odd_odd = test_tuple.get(5);\n        long even_even_odd = test_tuple.get(6);\n        long even_odd_odd = test_tuple.get(7);\n        long odd_even_odd = test_tuple.get(8);\n        long odd_odd_odd = test_tuple.get(9);\n        long odd_even_odd_odd = test_tuple.get(10);\n        long odd_odd_odd_odd = test_tuple.get(11);\n        long odd_even_odd_odd_odd = test_tuple.get(12);\n        long odd_odd_odd_odd_odd = test_tuple.get(13);\n        long odd_even_odd_odd_odd_odd = test_tuple.get(14);\n        long odd_odd_odd_odd_odd_odd = test_tuple.get(15);\n        long odd_even_odd_odd_odd_odd_odd = test_tuple.get(16);\n        long odd_odd_odd_odd_odd_odd_odd = test_tuple.get(17);\n        long odd_even_odd_odd_odd_odd_odd_odd = test_tuple.get(18);\n        long odd_odd_odd_odd_odd_odd_odd_odd_odd = test_tuple.\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ExtractEven((Tuple.Create(4L, 5L, Tuple.Create(7L, 6L, Tuple.Create(2L, 4L)), 6L, 8L))).Equals(Tuple.Create(4L, Tuple.Create(6L, Tuple.Create(2L, 4L)), 6L, 8L)));",
            "Debug.Assert(ExtractEven((Tuple.Create(5L, 6L, Tuple.Create(8L, 7L, Tuple.Create(4L, 8L)), 7L, 9L))).Equals(Tuple.Create(6L, Tuple.Create(8L, Tuple.Create(4L, 8L)))));",
            "Debug.Assert(ExtractEven((Tuple.Create(5L, 6L, Tuple.Create(9L, 8L, Tuple.Create(4L, 6L)), 8L, 10L))).Equals(Tuple.Create(6L, Tuple.Create(8L, Tuple.Create(4L, 6L)), 8L, 10L)));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "Write a csthon function to find the surface area of a square csramid with a given base edge and height.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SurfaceArea(long b, long s) {\n        long a = b;\n        long c = s;\n        long d = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long n = 0;\n        long o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long a = 0;\n        long b = 0;\n        long c = 0;\n        long d = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long n = 0;\n        long o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long a = 0;\n        long b = 0;\n        long c = 0;\n        long d = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n        long\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SurfaceArea((3L), (4L)) == (33L));",
            "Debug.Assert(SurfaceArea((4L), (5L)) == (56L));",
            "Debug.Assert(SurfaceArea((1L), (2L)) == (5L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "Write a function which returns nth catalan number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CatalanNumber(long num) {\n        long result = 1;\n        while (num > 0) {\n            result *= num / 10;\n            num = num % 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CatalanNumber((10L)) == (16796L));",
            "Debug.Assert(CatalanNumber((9L)) == (4862L));",
            "Debug.Assert(CatalanNumber((7L)) == (429L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "Return the first adverb ending with ly.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string FindAdverbs(string text) {\n        List<String> adverbs = new ArrayList<String>();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'ly') {\n                adverbs.add(text.substring(i, i + 1));\n            }\n        }\n        int index = 0;\n        while (index < adverbs.size()) {\n            if (adverbs.get(index).equals(\"ly\")) {\n                break;\n            }\n            index++;\n        }\n        return adverbs.get(index);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindAdverbs((\"Clearly, he has no excuse for such behavior.\")).Equals((\"0-7: Clearly\")));",
            "Debug.Assert(FindAdverbs((\"Please handle the situation carefuly\")).Equals((\"28-36: carefuly\")));",
            "Debug.Assert(FindAdverbs((\"Complete the task quickly\")).Equals((\"18-25: quickly\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "Write a csthon function to split a list at the nth eelment and add the first part to the end.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> SplitArr(List<long> l, long n) {\n        List<long> r = new ArrayList<long>();\n        long i = 0;\n        while (i < l.size() && i < n) {\n            r.add(l.get(i));\n            i++;\n        }\n        return r;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SplitArr((new List<long>(new long[]{(long)12L, (long)10L, (long)5L, (long)6L, (long)52L, (long)36L})), (2L)).Equals((new List<long>(new long[]{(long)5L, (long)6L, (long)52L, (long)36L, (long)12L, (long)10L}))));",
            "Debug.Assert(SplitArr((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (1L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L}))));",
            "Debug.Assert(SplitArr((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (3L)).Equals((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)0L, (long)1L, (long)2L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "587",
        "title": "list_tuple",
        "text": "Return the tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static object ListTuple(List<long> listx) {\n        Tuple<long[]> tuple = new Tuple<long[]>();\n        for (long l : listx) {\n            tuple.Add(new long[] {l});\n        }\n        return tuple;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ListTuple((new List<long>(new long[]{(long)5L, (long)10L, (long)7L, (long)4L, (long)15L, (long)3L}))).Equals(Tuple.Create(5L, 10L, 7L, 4L, 15L, 3L)));",
            "Debug.Assert(ListTuple((new List<long>(new long[]{(long)2L, (long)4L, (long)5L, (long)6L, (long)2L, (long)3L, (long)4L, (long)4L, (long)7L}))).Equals(Tuple.Create(2L, 4L, 5L, 6L, 2L, 3L, 4L, 4L, 7L)));",
            "Debug.Assert(ListTuple((new List<long>(new long[]{(long)58L, (long)44L, (long)56L}))).Equals(Tuple.Create(58L, 44L, 56L)));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "Write a csthon function to find the difference between largest and smallest value in a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long BigDiff(List<long> nums) {\n        long max = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n            if (num > max) max = num;\n            if (num < min) min = num;\n        }\n        return max - min;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(BigDiff((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (3L));",
            "Debug.Assert(BigDiff((new List<long>(new long[]{(long)4L, (long)5L, (long)12L}))) == (8L));",
            "Debug.Assert(BigDiff((new List<long>(new long[]{(long)9L, (long)2L, (long)3L}))) == (7L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "Write a function to find perfect squares between two given numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> PerfectSquares(long a, long b) {\n        List<long> result = new ArrayList<long>();\n        long sum = a + b;\n        while (sum > 0) {\n            long temp = sum % 2;\n            if (temp == 0) {\n                result.add(sum);\n            } else {\n                sum = sum / 2;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(PerfectSquares((1L), (30L)).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)9L, (long)16L, (long)25L}))));",
            "Debug.Assert(PerfectSquares((50L), (100L)).Equals((new List<long>(new long[]{(long)64L, (long)81L, (long)100L}))));",
            "Debug.Assert(PerfectSquares((100L), (200L)).Equals((new List<long>(new long[]{(long)100L, (long)121L, (long)144L, (long)169L, (long)196L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "Write a csthon function to check whether the given two integers have opposite sign or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool OppositeSigns(long x, long y) {\n        return (x < 0 && y < 0) || (x > 0 && y > 0);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(OppositeSigns((1L), (-2L)) == (true));",
            "Debug.Assert(OppositeSigns((3L), (2L)) == (false));",
            "Debug.Assert(OppositeSigns((-10L), (-10L)) == (false));",
            "Debug.Assert(OppositeSigns((-2L), (2L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "Write a csthon function to interchange the first and last elements in a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> SwapList(List<long> newList) {\n        List<long> oldList = new ArrayList<long>();\n        for (long i = 0; i < newList.size(); i++) {\n            oldList.add(newList.get(i));\n        }\n        newList.clear();\n        for (long i = 0; i < oldList.size(); i++) {\n            newList.add(oldList.get(i));\n        }\n        return newList;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SwapList((new List<long>(new long[]{(long)12L, (long)35L, (long)9L, (long)56L, (long)24L}))).Equals((new List<long>(new long[]{(long)24L, (long)35L, (long)9L, (long)56L, (long)12L}))));",
            "Debug.Assert(SwapList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))));",
            "Debug.Assert(SwapList((new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "Write a csthon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SumOfProduct(long n) {\n        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * (i - 1) * (i - 2) * (i - 3) * (i - 4) * (i - 5) * (i - 6) * (i - 7) * (i - 8) * (i - 9) * (i - 10) * (i - 11) * (i - 12) * (i - 13) * (i - 14) * (i - 15);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SumOfProduct((3L)) == (15L));",
            "Debug.Assert(SumOfProduct((4L)) == (56L));",
            "Debug.Assert(SumOfProduct((1L)) == (1L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "Write a function to remove leading zeroes from an ip address.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string RemovezeroIp(string ip) {\n        string result = \"\";\n        for (int i = 0; i < ip.length(); i++) {\n            if (ip.charAt(i) == '0') {\n                result += ip.substring(i, i + 1);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemovezeroIp((\"216.08.094.196\")).Equals((\"216.8.94.196\")));",
            "Debug.Assert(RemovezeroIp((\"12.01.024\")).Equals((\"12.1.24\")));",
            "Debug.Assert(RemovezeroIp((\"216.08.094.0196\")).Equals((\"216.8.94.196\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "Write a function to find the difference of the first even and first odd number of a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long DiffEvenOdd(List<long> list1) {\n        long sum = 0;\n        for (long i = 0; i < list1.Length; i++) {\n            sum += list1[i];\n        }\n        return sum % 2 == 0? sum - 1 : sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(DiffEvenOdd((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)1L, (long)6L, (long)8L}))) == (3L));",
            "Debug.Assert(DiffEvenOdd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (1L));",
            "Debug.Assert(DiffEvenOdd((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L, (long)10L}))) == (9L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "595",
        "title": "min_Swaps",
        "text": "Write a csthon function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static object MinSwaps(string str1, string str2) {\n        int n = str1.length();\n        int m = str2.length();\n        int[] a = new int[n + 1];\n        int[] b = new int[m + 1];\n        int[] c = new int[n + 1];\n        int[] d = new int[m + 1];\n        int[] e = new int[n + 1];\n        int[] f = new int[m + 1];\n        int[] g = new int[n + 1];\n        int[] h = new int[n + 1];\n        int[] i = new int[n + 1];\n        int[] j = new int[n + 1];\n        int[] k = new int[n + 1];\n        int[] l = new int[n + 1];\n        int[] m = new int[n + 1];\n        int[] n = new int[n + 1];\n        int[] o = new int[n + 1];\n        int[] p = new int[n + 1];\n        int[] q = new int[n + 1];\n        int[] r = new int[n + 1];\n        int[] s = new int[n + 1];\n        int[] t = new int[n + 1];\n        int[] u = new int[n + 1];\n        int[] v = new int[n + 1];\n        int[] w = new int[n + 1];\n        int[] x = new int[n + 1];\n        int[] y = new int[n + 1];\n        int[] z = new int[n + 1];\n        int[] w1 = new int[n + 1];\n        int[] w2 = new int[n + 1];\n        int[] w3 = new int[n + 1];\n        int[] w4 = new int[n +\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MinSwaps((\"1101\"), (\"1110\")).Equals((object(1L))));",
            "Debug.Assert(MinSwaps((\"111\"), (\"000\")).Equals((object(\"Not Possible\"))));",
            "Debug.Assert(MinSwaps((\"111\"), (\"110\")).Equals((object(\"Not Possible\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "Write a function to find kth element from the given two sorted lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        long count = 0;\n        for (int i = 0; i < arr1.size(); i++) {\n            if (arr1.get(i) < arr2.get(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));",
            "Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));",
            "Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "Write a function to check whether the given number is armstrong or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool ArmstrongNumber(long number) {\n        if (number == 0) {\n            return true;\n        }\n        if (number == 1) {\n            return true;\n        }\n        if (number == 2) {\n            return true;\n        }\n        if (number == 3) {\n            return true;\n        }\n        if (number == 4) {\n            return true;\n        }\n        if (number == 5) {\n            return true;\n        }\n        if (number == 6) {\n            return true;\n        }\n        if (number == 7) {\n            return true;\n        }\n        if (number == 8) {\n            return true;\n        }\n        if (number == 9) {\n            return true;\n        }\n        if (number == 10) {\n            return true;\n        }\n        if (number == 11) {\n            return true;\n        }\n        if (number == 12) {\n            return true;\n        }\n        if (number == 13) {\n            return true;\n        }\n        if (number == 14) {\n            return true;\n        }\n        if (number == 15) {\n            return true;\n        }\n        if (number == 16) {\n            return true;\n        }\n        if (number == 17) {\n            return true;\n        }\n        if (number == 18) {\n            return true;\n        }\n        if (number == 19) {\n            return true;\n        }\n        if (number == 20) {\n            return true;\n        }\n        if (number == 21) {\n            return true;\n        }\n        if (number == 22) {\n            return true;\n        }\n        if (number == 23) {\n            return true;\n        }\n        if (number == 24) {\n            return true;\n        }\n        if\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ArmstrongNumber((153L)) == (true));",
            "Debug.Assert(ArmstrongNumber((259L)) == (false));",
            "Debug.Assert(ArmstrongNumber((4458L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "Write a function to find sum and average of first n natural numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, float> SumAverage(long number) {\n        long sum = 0;\n        float average = 0;\n        for (int i = 0; i < number; i++) {\n            sum += number;\n            average += number;\n        }\n        return new Tuple<>(sum, average);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SumAverage((10L)).Equals((Tuple.Create(55L, 5.5f))));",
            "Debug.Assert(SumAverage((15L)).Equals((Tuple.Create(120L, 8.0f))));",
            "Debug.Assert(SumAverage((20L)).Equals((Tuple.Create(210L, 10.5f))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "Write a function to find the nth octagonal number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long IsOctagonal(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        if (n == 6) return 6;\n        if (n == 7) return 7;\n        if (n == 8) return 8;\n        if (n == 9) return 9;\n        if (n == 10) return 10;\n        if (n == 11) return 11;\n        if (n == 12) return 12;\n        if (n == 13) return 13;\n        if (n == 14) return 14;\n        if (n == 15) return 15;\n        if (n == 16) return 16;\n        if (n == 17) return 17;\n        if (n == 18) return 18;\n        if (n == 19) return 19;\n        if (n == 20) return 20;\n        if (n == 21) return 21;\n        if (n == 22) return 22;\n        if (n == 23) return 23;\n        if (n == 24) return 24;\n        if (n == 25) return 25;\n        if (n == 26) return 26;\n        if (n == 27) return 27;\n        if (n == 28) return 28;\n        if (n == 29) return 29;\n        if (n == 30) return 30;\n        if (n == 31) return 31;\n        if (n == 32) return 32;\n        if (n == 33) return 33;\n        if (n == 34) return 34;\n        if (n == 35) return 35;\n        if (n == 36) return 36;\n        if (n == 37) return 37;\n        if (n == 38) return 38;\n\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsOctagonal((5L)) == (65L));",
            "Debug.Assert(IsOctagonal((10L)) == (280L));",
            "Debug.Assert(IsOctagonal((15L)) == (645L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "Write a csthon function to check whether the given number is even or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsEven(long n) {\n        return n % 2 == 0;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsEven((1L)) == (false));",
            "Debug.Assert(IsEven((2L)) == (true));",
            "Debug.Assert(IsEven((3L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "Write a csthon function to find the first repeated character in a given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string FirstRepeatedChar(string str1) {\n        string str2 = \"\";\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) == str2.charAt(i)) {\n                str2 = str2 + str1.charAt(i);\n            }\n        }\n        return str2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FirstRepeatedChar((\"abcabc\")).Equals((\"a\")));",
            "Debug.Assert(FirstRepeatedChar((\"abc\")).Equals(null));",
            "Debug.Assert(FirstRepeatedChar((\"123123\")).Equals((\"1\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> GetLudic(long n) {\n        List<long> result = new ArrayList<long>();\n        while (n > 0) {\n            result.add(n % 10);\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(GetLudic((10L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L}))));",
            "Debug.Assert(GetLudic((25L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)23L, (long)25L}))));",
            "Debug.Assert(GetLudic((45L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)23L, (long)25L, (long)29L, (long)37L, (long)41L, (long)43L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string ReverseWords(string s) {\n        string result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c =='') {\n                result += c;\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ReverseWords((\"python program\")).Equals((\"program python\")));",
            "Debug.Assert(ReverseWords((\"java language\")).Equals((\"language java\")));",
            "Debug.Assert(ReverseWords((\"indian man\")).Equals((\"man indian\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "Write a function to check if the given integer is a prime number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool PrimeNum(long num) {\n        if (num == 0) return false;\n        if (num == 1) return true;\n        if (num % 2 == 0) return false;\n        if (num % 3 == 0) return false;\n        if (num % 5 == 0) return false;\n        if (num % 7 == 0) return false;\n        if (num % 11 == 0) return false;\n        if (num % 13 == 0) return false;\n        if (num % 17 == 0) return false;\n        if (num % 19 == 0) return false;\n        if (num % 23 == 0) return false;\n        if (num % 29 == 0) return false;\n        if (num % 31 == 0) return false;\n        if (num % 37 == 0) return false;\n        if (num % 41 == 0) return false;\n        if (num % 43 == 0) return false;\n        if (num % 47 == 0) return false;\n        if (num % 53 == 0) return false;\n        if (num % 59 == 0) return false;\n        if (num % 61 == 0) return false;\n        if (num % 67 == 0) return false;\n        if (num % 71 == 0) return false;\n        if (num % 73 == 0) return false;\n        if (num % 79 == 0) return false;\n        if (num % 83 == 0) return false;\n        if (num % 89 == 0) return false;\n        if (num % 97 == 0) return false;\n        if (num % 101 == 0) return false;\n        if (num % 103 == 0) return false;\n        if (num % 107 == 0) return false;\n        if (num % 109 == 0) return false;\n        if (num % 113 == 0) return false;\n        if (num % 127 == 0) return false;\n        if (\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(PrimeNum((13L)) == (true));",
            "Debug.Assert(PrimeNum((7L)) == (true));",
            "Debug.Assert(PrimeNum((-1010L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "Write a function to convert degrees to radians.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float RadianDegree(long degree) {\n        return (float) (degree * Math.PI / 180.0);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RadianDegree((90L)) == (1.5707963267948966f));",
            "Debug.Assert(RadianDegree((60L)) == (1.0471975511965976f));",
            "Debug.Assert(RadianDegree((120L)) == (2.0943951023931953f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "Create a string",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, long, long> FindLiterals(string text, string pattern) {\n        string patternRegex = pattern;\n        string regex = \"\";\n        string str = text;\n        string str2 = \"\";\n        string str3 = \"\";\n        string str4 = \"\";\n        string str5 = \"\";\n        string str6 = \"\";\n        string str7 = \"\";\n        string str8 = \"\";\n        string str9 = \"\";\n        string str10 = \"\";\n        string str11 = \"\";\n        string str12 = \"\";\n        string str13 = \"\";\n        string str14 = \"\";\n        string str15 = \"\";\n        string str16 = \"\";\n        string str17 = \"\";\n        string str18 = \"\";\n        string str19 = \"\";\n        string str20 = \"\";\n        string str21 = \"\";\n        string str22 = \"\";\n        string str23 = \"\";\n        string str24 = \"\";\n        string str25 = \"\";\n        string str26 = \"\";\n        string str\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).Equals((Tuple.Create(\"fox\", 16L, 19L))));",
            "Debug.Assert(FindLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).Equals((Tuple.Create(\"crazy\", 16L, 21L))));",
            "Debug.Assert(FindLiterals((\"Hardest choices required strongest will\"), (\"will\")).Equals((Tuple.Create(\"will\", 35L, 39L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "Write a csthon function to find nth bell number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long BellNumber(long n) {\n        long result = 1;\n        while (n > 0) {\n            result *= n;\n            n--;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(BellNumber((2L)) == (2L));",
            "Debug.Assert(BellNumber((3L)) == (5L));",
            "Debug.Assert(BellNumber((4L)) == (15L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "Write a csthon function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> RemoveKthElement(List<long> list1, long L) {\n        List<long> list2 = new ArrayList<long>();\n        for (long i = 0; i < list1.size(); i++) {\n            if (list1.get(i) == L) {\n                list2.add(i);\n            }\n        }\n        return list2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveKthElement((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)1L})), (3L)).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)4L, (long)5L, (long)1L}))));",
            "Debug.Assert(RemoveKthElement((new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L}))));",
            "Debug.Assert(RemoveKthElement((new List<long>(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L})), (5L)).Equals((new List<long>(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "Write a function which given a matrix represented as a list of lists returns the max of then'th column.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MaxOfNth(List<List<long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.Length; i++) {\n            for (int j = 0; j < test_list[i].Length; j++) {\n                if (test_list[i][j] > max) {\n                    max = test_list[i][j];\n                }\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxOfNth((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)1L, (long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)9L, (long)19L})})), (2L)) == (19L));",
            "Debug.Assert(MaxOfNth((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)20L})})), (1L)) == (10L));",
            "Debug.Assert(MaxOfNth((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)10L, (long)11L, (long)21L})})), (1L)) == (11L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "612",
        "title": "merge",
        "text": "Write a csthon function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<object>> Merge(List<List<object>> lst) {\n        List<List<object>> result = new ArrayList<List<object>>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<object> list = lst.get(i);\n            List<List<object>> sublist = Merge(list);\n            result.add(sublist);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Merge((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\"}), (List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"m\", (string)\"n\"})}))).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"a\", (string)\"m\"}), (List<string>)new List<string>(new string[]{(string)\"y\", (string)\"b\", (string)\"n\"})}))));",
            "Debug.Assert(Merge((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L})}))).Equals((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L})}))));",
            "Debug.Assert(Merge((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}), (List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"m\", (string)\"n\", (string)\"o\"})}))).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"a\", (string)\"m\"}), (List<string>)new List<string>(new string[]{(string)\"y\", (string)\"b\", (string)\"n\"}), (List<string>)new List<string>(new string[]{(string)\"z\", (string)\"c\", (string)\"o\"})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "Write a function to find the cumulative sum of all the values that are present in the given list of lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CummulativeSum(List<List<long>> test_list) {\n        long sum = 0;\n        for (int i = 0; i < test_list.length; i++) {\n            for (int j = 0; j < test_list[i].length; j++) {\n                sum += test_list[i][j];\n            }\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CummulativeSum((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)2L, (long)6L})}))) == (30L));",
            "Debug.Assert(CummulativeSum((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)3L, (long)7L})}))) == (37L));",
            "Debug.Assert(CummulativeSum((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)4L, (long)8L})}))) == (44L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "Write a function which takes a lists of lists and returns the average value for each sublist as a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<float> AverageTuple(List<List<long>> nums) {\n        List<float> result = new ArrayList<float>();\n        for (int i = 0; i < nums.size(); i++) {\n            for (int j = 0; j < nums.get(i).size(); j++) {\n                result.add(nums.get(i).get(j) / nums.get(i).size());\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AverageTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)10L, (long)10L, (long)10L, (long)12L}), (List<long>)new List<long>(new long[]{(long)30L, (long)45L, (long)56L, (long)45L}), (List<long>)new List<long>(new long[]{(long)81L, (long)80L, (long)39L, (long)32L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})}))).Equals((new List<float>(new float[]{(float)30.5f, (float)34.25f, (float)27.0f, (float)23.25f}))));",
            "Debug.Assert(AverageTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)30L, (long)-15L, (long)56L}), (List<long>)new List<long>(new long[]{(long)81L, (long)-60L, (long)-39L}), (List<long>)new List<long>(new long[]{(long)-10L, (long)2L, (long)3L})}))).Equals((new List<float>(new float[]{(float)25.5f, (float)-18.0f, (float)3.75f}))));",
            "Debug.Assert(AverageTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)100L, (long)100L, (long)100L, (long)120L}), (List<long>)new List<long>(new long[]{(long)300L, (long)450L, (long)560L, (long)450L}), (List<long>)new List<long>(new long[]{(long)810L, (long)800L, (long)390L, (long)320L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new List<float>(new float[]{(float)305.0f, (float)342.5f, (float)270.0f, (float)232.5f}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long, long, long> TupleModulo(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n        long result = 0;\n        long test_tup1_mod = test_tup1.First();\n        long test_tup2_mod = test_tup2.First();\n        long test_tup1_mod_mod = test_tup1.Second();\n        long test_tup2_mod_mod = test_tup2.Second();\n        while (test_tup1_mod_mod!= test_tup2_mod_mod) {\n            result += test_tup1_mod % test_tup2_mod;\n            test_tup1_mod = test_tup1.Second();\n            test_tup2_mod = test_tup2.Second();\n            test_tup1_mod_mod = test_tup1.First();\n            test_tup2_mod_mod = test_tup2.First();\n        }\n        return Tuple(result, test_tup1.Second(), test_tup2.Second(), test_tup1.First());\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TupleModulo((Tuple.Create(10L, 4L, 5L, 6L)), (Tuple.Create(5L, 6L, 7L, 5L))).Equals((Tuple.Create(0L, 4L, 5L, 1L))));",
            "Debug.Assert(TupleModulo((Tuple.Create(11L, 5L, 6L, 7L)), (Tuple.Create(6L, 7L, 8L, 6L))).Equals((Tuple.Create(5L, 5L, 6L, 1L))));",
            "Debug.Assert(TupleModulo((Tuple.Create(12L, 6L, 7L, 8L)), (Tuple.Create(7L, 8L, 9L, 7L))).Equals((Tuple.Create(5L, 6L, 7L, 1L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float MinJumps(Tuple<long, long> steps, long d) {\n        long n = steps.get(0);\n        long m = steps.get(1);\n        long n2 = steps.get(2);\n        long m2 = steps.get(3);\n        long n3 = steps.get(4);\n        long m3 = steps.get(5);\n        long n4 = steps.get(6);\n        long m4 = steps.get(7);\n        long n5 = steps.get(8);\n        long m5 = steps.get(9);\n        long n6 = steps.get(10);\n        long m6 = steps.get(11);\n        long n7 = steps.get(12);\n        long m7 = steps.get(13);\n        long n8 = steps.get(14);\n        long m8 = steps.get(15);\n        long n9 = steps.get(16);\n        long m9 = steps.get(17);\n        long n10 = steps.get(18);\n        long m10 = steps.get(19);\n        long n11 = steps.get(20);\n        long m11 = steps.get(21);\n        long n12 = steps.get(22);\n        long m12 = steps.get(23);\n        long n13 = steps.get(24);\n        long m13 = steps.get(25);\n        long n14 = steps.get(26);\n        long m14 = steps.get(27);\n        long n15 = steps.get(28);\n        long m15 = steps.get(29);\n        long n16 = steps.get(30);\n        long m16 = steps.get(31);\n        long n17 = steps.get(32);\n        long m17 =\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MinJumps((Tuple.Create(3L, 4L)), (11L)) == (3.5f));",
            "Debug.Assert(MinJumps((Tuple.Create(3L, 4L)), (0L)) == (float)0L);",
            "Debug.Assert(MinJumps((Tuple.Create(11L, 14L)), (11L)) == (float)1L);",
            "}",
            "}"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "Write a function to divide two lists element wise.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<float> DivList(List<long> nums1, List<long> nums2) {\n        List<float> result = new ArrayList<float>();\n        for (long num : nums1) {\n            result.add(num / nums2.get(0));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(DivList((new List<long>(new long[]{(long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<float>(new float[]{(float)4.0f, (float)2.5f, (float)2.0f}))));",
            "Debug.Assert(DivList((new List<long>(new long[]{(long)3L, (long)2L})), (new List<long>(new long[]{(long)1L, (long)4L}))).Equals((new List<float>(new float[]{(float)3.0f, (float)0.5f}))));",
            "Debug.Assert(DivList((new List<long>(new long[]{(long)90L, (long)120L})), (new List<long>(new long[]{(long)50L, (long)70L}))).Equals((new List<float>(new float[]{(float)1.8f, (float)1.7142857142857142f}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "Write a function to move all the numbers to the end of the given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string MoveNum(string test_str) {\n        string result = \"\";\n        for (int i = 0; i < test_str.length(); i++) {\n            result += test_str[i];\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MoveNum((\"I1love143you55three3000thousand\")).Equals((\"Iloveyouthreethousand1143553000\")));",
            "Debug.Assert(MoveNum((\"Avengers124Assemble\")).Equals((\"AvengersAssemble124\")));",
            "Debug.Assert(MoveNum((\"Its11our12path13to14see15things16do17things\")).Equals((\"Itsourpathtoseethingsdothings11121314151617\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "Write a csthon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountSubstrings(string s) {\n        long count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '0') {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountSubstrings((\"112112\")) == (6L));",
            "Debug.Assert(CountSubstrings((\"111\")) == (6L));",
            "Debug.Assert(CountSubstrings((\"1101112\")) == (12L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "Write a function to find the median of two sorted lists of same size.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        long m = Math.min(arr1.size(), arr2.size());\n        long n1 = Math.max(arr1.size(), arr2.size());\n        long n2 = Math.min(arr1.size(), arr2.size());\n        long m1 = Math.max(arr1.size(), arr2.size());\n        long m2 = Math.min(arr1.size(), arr2.size());\n        long m = Math.min(m1, m2);\n        long n = Math.max(m1, m2);\n        long m1 = Math.max(arr1.size(), arr2.size());\n        long m2 = Math.min(arr1.size(), arr2.size());\n        long n1 = Math.max(arr1.size(), arr2.size());\n        long n2 = Math.min(arr1.size(), arr2.size());\n        long m1 = Math.max(arr1.size(), arr2.size());\n        long m2 = Math.min(arr1.size(), arr2.size());\n        long n = Math.max(m1, m2);\n        long n1 = Math.max(arr1.size(), arr2.size());\n        long n2 = Math.min(arr1.size(), arr2.size());\n        long m = Math.min(n1, n2);\n        long n = Math.max(n1, n2);\n        long m = Math.min(m, m2);\n        long n = Math.max(m, m2);\n        long m1 = Math.max(arr1.size(), arr2.size());\n        long m2 = Math.min(arr1.size(), arr2.size());\n        long n1 = Math.max(arr\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));",
            "Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));",
            "Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "Write a function to compute the n-th power of each number in a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> NthNums(List<long> nums, long n) {\n        List<long> result = new ArrayList<long>();\n        for (long i = 0; i < nums.size(); i++) {\n            long num = nums.get(i);\n            if (n % num == 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(NthNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)9L, (long)16L, (long)25L, (long)36L, (long)49L, (long)64L, (long)81L, (long)100L}))));",
            "Debug.Assert(NthNums((new List<long>(new long[]{(long)10L, (long)20L, (long)30L})), (3L)).Equals((new List<long>(new long[]{(long)1000L, (long)8000L, (long)27000L}))));",
            "Debug.Assert(NthNums((new List<long>(new long[]{(long)12L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)248832L, (long)759375L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "Write a csthon function to convert a given string to uppercase.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string IsUpper(string str) {\n        string result = \"\";\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) >= 'a' && str.charAt(i) <= 'z') {\n                result += str.charAt(i);\n            } else {\n                result += \" \" + str.charAt(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsUpper((\"person\")).Equals((\"PERSON\")));",
            "Debug.Assert(IsUpper((\"final\")).Equals((\"FINAL\")));",
            "Debug.Assert(IsUpper((\"Valid\")).Equals((\"VALID\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "Write a csthon function to interchange the first and last element in a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> SwapList(List<long> newList) {\n        List<long> oldList = new ArrayList<long>();\n        long temp = newList.get(0);\n        newList.set(0, newList.get(newList.size() - 1));\n        newList.set(newList.size() - 1, temp);\n        return oldList;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SwapList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))));",
            "Debug.Assert(SwapList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))).Equals((new List<long>(new long[]{(long)4L, (long)2L, (long)3L, (long)4L, (long)1L}))));",
            "Debug.Assert(SwapList((new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "Write a csthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Nullable<long> TriangleArea(long r) {\n        Nullable<long> area = null;\n        if (r == 0) {\n            return area;\n        }\n        if (r == 1) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r == 2) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r == 3) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r == 4) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r == 5) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r == 6) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r == 7) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r == 8) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r == 9) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r == 10) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r == 11) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r == 12) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r == 13) {\n            area = new Nullable<long>(0);\n            return area;\n        }\n        if (r ==\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TriangleArea((-1L)).Equals(null));",
            "Debug.Assert(TriangleArea((0L)).Equals(0L));",
            "Debug.Assert(TriangleArea((2L)).Equals(4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "Write a csthon function to find the smallest missing number from a sorted list of natural numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindFirstMissing(List<long> array) {\n        long result = array.get(0);\n        for (int i = 1; i < array.size(); i++) {\n            if (array.get(i) < result) {\n                result = array.get(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));",
            "Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));",
            "Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string ReplaceSpaces(string str) {\n        string result = \"\";\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) =='') {\n                result += '%20';\n            } else {\n                result += str.charAt(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ReplaceSpaces((\"My Name is Dawood\")).Equals((\"My%20Name%20is%20Dawood\")));",
            "Debug.Assert(ReplaceSpaces((\"I am a Programmer\")).Equals((\"I%20am%20a%20Programmer\")));",
            "Debug.Assert(ReplaceSpaces((\"I love Coding\")).Equals((\"I%20love%20Coding\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "Write a csthon function to find even numbers from a list of numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> Split(List<long> list) {\n        List<long> result = new ArrayList<long>();\n        long sum = 0;\n        for (long i = 0; i < list.size(); i++) {\n            sum += list.get(i);\n            if (sum % 2 == 0) {\n                result.add(list.get(i));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Split((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L}))));",
            "Debug.Assert(Split((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)0L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)6L, (long)8L, (long)0L}))));",
            "Debug.Assert(Split((new List<long>(new long[]{(long)8L, (long)12L, (long)15L, (long)19L}))).Equals((new List<long>(new long[]{(long)8L, (long)12L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "Write a csthon function to find smallest number in a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SmallestNum(List<long> xs) {\n        long smallest = xs.get(0);\n        for (int i = 1; i < xs.size(); i++) {\n            if (xs.get(i) < smallest) {\n                smallest = xs.get(i);\n            }\n        }\n        return smallest;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SmallestNum((new List<long>(new long[]{(long)10L, (long)20L, (long)1L, (long)45L, (long)99L}))) == (1L));",
            "Debug.Assert(SmallestNum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (1L));",
            "Debug.Assert(SmallestNum((new List<long>(new long[]{(long)45L, (long)46L, (long)50L, (long)60L}))) == (45L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<long>> GetCoordinates(Tuple<long, long> test_tup) {\n        List<List<long>> result = new ArrayList<List<long>>();\n        List<long> coord_list = new ArrayList<long>();\n        coord_list.Add(test_tup.X);\n        coord_list.Add(test_tup.Y);\n        coord_list.Add(test_tup.Z);\n        coord_list.Add(test_tup.W);\n        coord_list.Add(test_tup.X);\n        coord_list.Add(test_tup.Y);\n        coord_list.Add(test_tup.Z);\n        coord_list.Add(test_tup.W);\n        coord_list.Add(test_tup.X);\n        coord_list.Add(test_tup.Y);\n        coord_list.Add(test_tup.Z);\n        coord_list.Add(test_tup.W);\n        coord_list.Add(test_tup.X);\n        coord_list.Add(test_tup.Y);\n        coord_list.Add(test_tup.Z);\n        coord_list.Add(test_tup.W);\n        coord_list.Add(test_tup.X);\n        coord_list.Add(test_tup.Y);\n        coord_list.Add(test_tup.Z);\n        coord_list.Add(test_tup.W);\n        coord_list.Add(test_tup.X);\n        coord_list.Add(test_tup.Y);\n        coord_list.Add(test_tup.Z);\n        coord_list.Add(test_tup.W);\n        coord_list.Add(test_tup.X);\n\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(GetCoordinates((Tuple.Create(3L, 4L))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)2L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L})}))));",
            "Debug.Assert(GetCoordinates((Tuple.Create(4L, 5L))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)5L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L})}))));",
            "Debug.Assert(GetCoordinates((Tuple.Create(5L, 6L))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)4L, (long)7L}), (List<long>)new List<long>(new long[]{(long)5L, (long)5L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)6L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string ReplaceSpaces(string text) {\n        string result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) =='') {\n                result += \"_\";\n            }\n            result += text.charAt(i);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ReplaceSpaces((\"Jumanji The Jungle\")).Equals((\"Jumanji_The_Jungle\")));",
            "Debug.Assert(ReplaceSpaces((\"The_Avengers\")).Equals((\"The Avengers\")));",
            "Debug.Assert(ReplaceSpaces((\"Fast and Furious\")).Equals((\"Fast_and_Furious\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "Write a csthon function to move all zeroes to the end of the given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> MoveZero(List<long> num_list) {\n        List<long> result = new ArrayList<long>();\n        for (long i = 0; i < num_list.size(); i++) {\n            if (num_list.get(i) == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MoveZero((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)0L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)0L, (long)0L}))));",
            "Debug.Assert(MoveZero((new List<long>(new long[]{(long)2L, (long)3L, (long)2L, (long)0L, (long)0L, (long)4L, (long)0L, (long)5L, (long)0L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)2L, (long)4L, (long)5L, (long)0L, (long)0L, (long)0L, (long)0L}))));",
            "Debug.Assert(MoveZero((new List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)1L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)0L, (long)0L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "Write a csthon function to find the sum of xor of all pairs of numbers in the given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long PairXorSum(List<long> arr, long n) {\n        long sum = 0;\n        for (long i = 0; i < arr.size(); i++) {\n            sum += arr.get(i) ^ n;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(PairXorSum((new List<long>(new long[]{(long)5L, (long)9L, (long)7L, (long)6L})), (4L)) == (47L));",
            "Debug.Assert(PairXorSum((new List<long>(new long[]{(long)7L, (long)3L, (long)5L})), (3L)) == (12L));",
            "Debug.Assert(PairXorSum((new List<long>(new long[]{(long)7L, (long)3L})), (2L)) == (4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "Write a function to sort the given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> HeapSort(List<long> iterable) {\n        List<long> result = new ArrayList<long>();\n        long temp = 0;\n        for (long i = 0; i < iterable.size(); i++) {\n            temp = iterable.get(i);\n            result.add(temp);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(HeapSort((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L, (long)2L, (long)4L, (long)6L, (long)8L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));",
            "Debug.Assert(HeapSort((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)25L, (long)58L}))).Equals((new List<long>(new long[]{(long)14L, (long)22L, (long)25L, (long)25L, (long)35L, (long)58L, (long)65L, (long)75L, (long)85L}))));",
            "Debug.Assert(HeapSort((new List<long>(new long[]{(long)7L, (long)1L, (long)9L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "Write a function to check whether the given amount has no profit and no loss",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool NoprofitNoloss(long actual_cost, long sale_amount) {\n        return actual_cost == 0 && sale_amount == 0;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(NoprofitNoloss((1500L), (1200L)) == (false));",
            "Debug.Assert(NoprofitNoloss((100L), (100L)) == (true));",
            "Debug.Assert(NoprofitNoloss((2000L), (5000L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long WindChill(long v, long t) {\n        long wind_chill = 0;\n        if (v > 0) {\n            wind_chill = (v * (t / 100)) / (1 + (v / 100));\n        }\n        return wind_chill;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(WindChill((120L), (35L)) == (40L));",
            "Debug.Assert(WindChill((40L), (20L)) == (19L));",
            "Debug.Assert(WindChill((10L), (8L)) == (6L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SampleNam(List<string> sample_names) {\n        long sum = 0;\n        for (int i = 0; i < sample_names.size(); i++) {\n            string name = sample_names.get(i);\n            if (name.length() > 0 && name.charAt(0) >= 'a' && name.charAt(0) <= 'z') {\n                sum += name.length();\n            }\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SampleNam((new List<string>(new string[]{(string)\"sally\", (string)\"Dylan\", (string)\"rebecca\", (string)\"Diana\", (string)\"Joanne\", (string)\"keith\"}))) == (16L));",
            "Debug.Assert(SampleNam((new List<string>(new string[]{(string)\"php\", (string)\"res\", (string)\"Python\", (string)\"abcd\", (string)\"Java\", (string)\"aaa\"}))) == (10L));",
            "Debug.Assert(SampleNam((new List<string>(new string[]{(string)\"abcd\", (string)\"Python\", (string)\"abba\", (string)\"aba\"}))) == (6L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MaxDifference(List<Tuple<long, long>> test_list) {\n        long max_difference = 0;\n        for (int i = 0; i < test_list.Length; i++) {\n            long diff = test_list[i].A - test_list[i].B;\n            if (diff > max_difference) {\n                max_difference = diff;\n            }\n        }\n        return max_difference;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxDifference((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(3L, 5L), (Tuple<long, long>)Tuple.Create(1L, 7L), (Tuple<long, long>)Tuple.Create(10L, 3L), (Tuple<long, long>)Tuple.Create(1L, 2L)}))) == (7L));",
            "Debug.Assert(MaxDifference((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 6L), (Tuple<long, long>)Tuple.Create(2L, 17L), (Tuple<long, long>)Tuple.Create(9L, 13L), (Tuple<long, long>)Tuple.Create(11L, 12L)}))) == (15L));",
            "Debug.Assert(MaxDifference((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(12L, 35L), (Tuple<long, long>)Tuple.Create(21L, 27L), (Tuple<long, long>)Tuple.Create(13L, 23L), (Tuple<long, long>)Tuple.Create(41L, 22L)}))) == (23L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string RemoveParenthesis(List<string> items) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < items.size(); i++) {\n            if (items.get(i).equals(\"(\")) {\n                sb.append(items.get(i));\n            } else {\n                sb.append(items.get(i));\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"python (chrome)\"}))).Equals((\"python\")));",
            "Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"string(.abc)\"}))).Equals((\"string\")));",
            "Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"alpha(num)\"}))).Equals((\"alpha\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "Write a function to find the nth nonagonal number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long IsNonagonal(long n) {\n        long result = 1;\n        while (result < n) {\n            result *= 2;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsNonagonal((10L)) == (325L));",
            "Debug.Assert(IsNonagonal((15L)) == (750L));",
            "Debug.Assert(IsNonagonal((18L)) == (1089L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool TextMatchWordzMiddle(string text) {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 = 0;\n        int i\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TextMatchWordzMiddle((\"pythonzabc.\")) == (true));",
            "Debug.Assert(TextMatchWordzMiddle((\"zxyabc.\")) == (false));",
            "Debug.Assert(TextMatchWordzMiddle((\"  lang  .\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "Write a csthon function to reverse a list upto a given position.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> ReverseArrayUptoK(List<long> input, long k) {\n        List<long> output = new ArrayList<long>();\n        long i = 0;\n        while (i < input.size() && i < k) {\n            output.add(input.get(i));\n            i++;\n        }\n        return output;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (4L)).Equals((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L, (long)5L, (long)6L}))));",
            "Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L})), (2L)).Equals((new List<long>(new long[]{(long)5L, (long)4L, (long)6L, (long)7L}))));",
            "Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)9L, (long)8L, (long)7L, (long)6L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)6L, (long)5L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "Write a function to sort a list of tuples using the second value of each tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Tuple<string, long>> SubjectMarks(List<Tuple<string, long>> subjectmarks) {\n        List<Tuple<string, long>> sorted = new ArrayList<Tuple<string, long>>();\n        for (Tuple<string, long> t : subjectmarks) {\n            sorted.add(new Tuple<string, long>(t.first, t.second));\n        }\n        return sorted;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SubjectMarks((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"English\", 88L), (Tuple<string, long>)Tuple.Create(\"Science\", 90L), (Tuple<string, long>)Tuple.Create(\"Maths\", 97L), (Tuple<string, long>)Tuple.Create(\"Social sciences\", 82L)}))).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Social sciences\", 82L), (Tuple<string, long>)Tuple.Create(\"English\", 88L), (Tuple<string, long>)Tuple.Create(\"Science\", 90L), (Tuple<string, long>)Tuple.Create(\"Maths\", 97L)}))));",
            "Debug.Assert(SubjectMarks((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Telugu\", 49L), (Tuple<string, long>)Tuple.Create(\"Hindhi\", 54L), (Tuple<string, long>)Tuple.Create(\"Social\", 33L)}))).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Social\", 33L), (Tuple<string, long>)Tuple.Create(\"Telugu\", 49L), (Tuple<string, long>)Tuple.Create(\"Hindhi\", 54L)}))));",
            "Debug.Assert(SubjectMarks((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Physics\", 96L), (Tuple<string, long>)Tuple.Create(\"Chemistry\", 97L), (Tuple<string, long>)Tuple.Create(\"Biology\", 45L)}))).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Biology\", 45L), (Tuple<string, long>)Tuple.Create(\"Physics\", 96L), (Tuple<string, long>)Tuple.Create(\"Chemistry\", 97L)}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "Write a csthon function to count the number of positive numbers in a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long PosCount(List<long> list) {\n        long count = 0;\n        for (long i : list) {\n            if (i > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(PosCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L, (long)-4L}))) == (2L));",
            "Debug.Assert(PosCount((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)-1L}))) == (3L));",
            "Debug.Assert(PosCount((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long BellNumber(long n) {\n        long result = 1;\n        while (n > 1) {\n            result *= n;\n            n /= 2;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(BellNumber((2L)) == (2L));",
            "Debug.Assert(BellNumber((10L)) == (115975L));",
            "Debug.Assert(BellNumber((56L)) == (6775685320645824322581483068371419745979053216268760300L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "Write a csthon function to check whether the given list is monotonic or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsMonotonic(List<long> A) {\n        long max = A.Last();\n        long min = A.First();\n        for (long i = min; i <= max; i++) {\n            if (i == max) {\n                return false;\n            }\n            if (i < min) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));",
            "Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));",
            "Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "Write a function to check whether a list contains the given sublist or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsSublist(List<long> l, List<long> s) {\n        if (l.size()!= s.size()) {\n            return false;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i)!= s.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsSublist((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)3L, (long)7L}))) == (false));",
            "Debug.Assert(IsSublist((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)4L, (long)3L}))) == (true));",
            "Debug.Assert(IsSublist((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)1L, (long)6L}))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "Write a csthon function to check whether the two numbers differ at one bit position only or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool DifferAtOneBitPos(long a, long b) {\n        return (a & b) == a;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(DifferAtOneBitPos((13L), (9L)) == (true));",
            "Debug.Assert(DifferAtOneBitPos((15L), (8L)) == (false));",
            "Debug.Assert(DifferAtOneBitPos((2L), (4L)) == (false));",
            "Debug.Assert(DifferAtOneBitPos((2L), (3L)) == (true));",
            "Debug.Assert(DifferAtOneBitPos((5L), (1L)) == (true));",
            "Debug.Assert(DifferAtOneBitPos((1L), (5L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "Write a function to find whether all the given lists have equal length or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool GetEqual(List<List<long>> Input) {\n        for (int i = 0; i < Input.Length; i++) {\n            if (Input[i].Length!= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(GetEqual((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)11L, (long)22L, (long)33L}), (List<long>)new List<long>(new long[]{(long)44L, (long)55L, (long)66L})}))) == (true));",
            "Debug.Assert(GetEqual((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L})}))) == (false));",
            "Debug.Assert(GetEqual((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L})}))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "Write a function to sort a list of elements.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> CombSort(List<long> nums) {\n        List<long> result = new ArrayList<long>();\n        long max = 0;\n        for (long num : nums) {\n            if (num > max) {\n                max = num;\n            }\n            result.add(num);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CombSort((new List<long>(new long[]{(long)5L, (long)15L, (long)37L, (long)25L, (long)79L}))).Equals((new List<long>(new long[]{(long)5L, (long)15L, (long)25L, (long)37L, (long)79L}))));",
            "Debug.Assert(CombSort((new List<long>(new long[]{(long)41L, (long)32L, (long)15L, (long)19L, (long)22L}))).Equals((new List<long>(new long[]{(long)15L, (long)19L, (long)22L, (long)32L, (long)41L}))));",
            "Debug.Assert(CombSort((new List<long>(new long[]{(long)99L, (long)15L, (long)13L, (long)47L}))).Equals((new List<long>(new long[]{(long)13L, (long)15L, (long)47L, (long)99L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long, long, Dictionary<string,long>> AddDictToTuple(Tuple<long, long, long> test_tup, Dictionary<string,long> test_dict) {\n        long result = 0;\n        long test_tuple_size = test_tup.Size();\n        for (int i = 0; i < test_tuple_size; i++) {\n            result += test_dict.Get(test_tup.Get(i));\n        }\n        return new Tuple<long, long, long, Dictionary<string,long>>(result, test_tuple_size, test_tup.Size(), test_dict);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AddDictToTuple((Tuple.Create(4L, 5L, 6L)), (new Dictionary<string,long>(){{\"MSAM\", 1L}, {\"is\", 2L}, {\"best\", 3L}})).Equals((Tuple.Create(4L, 5L, 6L, new Dictionary<string,long>(){{\"MSAM\", 1L}, {\"is\", 2L}, {\"best\", 3L}}))));",
            "Debug.Assert(AddDictToTuple((Tuple.Create(1L, 2L, 3L)), (new Dictionary<string,long>(){{\"UTS\", 2L}, {\"is\", 3L}, {\"Worst\", 4L}})).Equals((Tuple.Create(1L, 2L, 3L, new Dictionary<string,long>(){{\"UTS\", 2L}, {\"is\", 3L}, {\"Worst\", 4L}}))));",
            "Debug.Assert(AddDictToTuple((Tuple.Create(8L, 9L, 10L)), (new Dictionary<string,long>(){{\"POS\", 3L}, {\"is\", 4L}, {\"Okay\", 5L}})).Equals((Tuple.Create(8L, 9L, 10L, new Dictionary<string,long>(){{\"POS\", 3L}, {\"is\", 4L}, {\"Okay\", 5L}}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "Initialize the cost matrix",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        cost.add(new List<long[]>());\n        \n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));",
            "Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));",
            "Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));",
            "Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "722",
        "title": "filter_data",
        "text": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Dictionary<string,Tuple<float, long>> FilterData(Dictionary<string,Tuple<float, long>> students, float h, long w) {\n        Dictionary<string,Tuple<float, long>> filteredStudents = new Dictionary<string,Tuple<float, long>>();\n        for (string student : students.keySet()) {\n            if (students.get(student).get(0) > h && students.get(student).get(1) > w) {\n                filteredStudents.Put(student, students.get(student));\n            }\n        }\n        return filteredStudents;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FilterData((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Alden Cantrell\", Tuple.Create(5.9f, 65L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}, {\"Pierre Cox\", Tuple.Create(5.8f, 66L)}}), (6.0f), (70L)).Equals((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}})));",
            "Debug.Assert(FilterData((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Alden Cantrell\", Tuple.Create(5.9f, 65L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}, {\"Pierre Cox\", Tuple.Create(5.8f, 66L)}}), (5.9f), (67L)).Equals((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}})));",
            "Debug.Assert(FilterData((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Alden Cantrell\", Tuple.Create(5.9f, 65L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}, {\"Pierre Cox\", Tuple.Create(5.8f, 66L)}}), (5.7f), (64L)).Equals((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Alden Cantrell\", Tuple.Create(5.9f, 65L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}, {\"Pierre Cox\", Tuple.Create(5.8f, 66L)}})));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountSamePair(List<long> nums1, List<long> nums2) {\n        long count = 0;\n        for (long i = 0; i < nums1.size(); i++) {\n            if (nums1.get(i) == nums2.get(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountSamePair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (4L));",
            "Debug.Assert(CountSamePair((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)0L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)4L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (11L));",
            "Debug.Assert(CountSamePair((new List<long>(new long[]{(long)2L, (long)4L, (long)-6L, (long)-9L, (long)11L, (long)-12L, (long)14L, (long)-5L, (long)17L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)4L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (1L));",
            "Debug.Assert(CountSamePair((new List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)2L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)2L}))) == (3L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long PowerBaseSum(long numBase, long power) {\n        long sum = 0;\n        while (numBase > 0) {\n            sum += numBase % power;\n            numBase /= power;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(PowerBaseSum((2L), (100L)) == (115L));",
            "Debug.Assert(PowerBaseSum((8L), (10L)) == (37L));",
            "Debug.Assert(PowerBaseSum((8L), (15L)) == (62L));",
            "Debug.Assert(PowerBaseSum((3L), (3L)) == (9L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "725",
        "title": "extract_quotation",
        "text": "Write a function to extract values between quotation marks \" \" of the given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<object> ExtractQuotation(string text1) {\n        List<object> result = new ArrayList<object>();\n        for (int i = 0; i < text1.length(); i++) {\n            if (text1.charAt(i) == '\"') {\n                result.add(new object(text1.charAt(i)));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ExtractQuotation((\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")).Equals((new List<object>(new string[]{(string)\"A53\", (string)\"multi\", (string)\"Processor\"}))));",
            "Debug.Assert(ExtractQuotation((\"Cast your \"favorite\" entertainment \"apps\"\")).Equals((new List<object>(new string[]{(string)\"favorite\", (string)\"apps\"}))));",
            "Debug.Assert(ExtractQuotation((\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")).Equals((new List<object>(new string[]{(string)\"4k Ultra HD\", (string)\"HDR 10\"}))));",
            "Debug.Assert(ExtractQuotation((\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")).Equals((new List<object>())));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "726",
        "title": "multiply_elements",
        "text": "Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<object> MultiplyElements(List<long> test_tup) {\n        List<object> result = new ArrayList<>();\n        for (long i = 0; i < test_tup.size(); i++) {\n            long t = test_tup.get(i);\n            long t_i = t / t;\n            long t_i_1 = t_i * t;\n            long t_i_2 = t_i_1 * t;\n            long t_i_3 = t_i_2 * t;\n            long t_i_4 = t_i_3 * t;\n            long t_i_5 = t_i_4 * t;\n            long t_i_6 = t_i_5 * t;\n            long t_i_7 = t_i_6 * t;\n            long t_i_8 = t_i_7 * t;\n            long t_i_9 = t_i_8 * t;\n            long t_i_10 = t_i_9 * t;\n            long t_i_11 = t_i_10 * t;\n            long t_i_12 = t_i_11 * t;\n            long t_i_13 = t_i_12 * t;\n            long t_i_14 = t_i_13 * t;\n            long t_i_15 = t_i_14 * t;\n            long t_i_16 = t_i_15 * t;\n            long t_i_17 = t_i_16 * t;\n            long t_i_18 = t_i_17 * t;\n            long t_i_19 = t_i_18 *\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MultiplyElements((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)8L, (long)10L}))).Equals((new List<object>(new long[]{(long)5L, (long)35L, (long)56L, (long)80L}))));",
            "Debug.Assert(MultiplyElements((new List<long>(new long[]{(long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))).Equals((new List<object>(new long[]{(long)8L, (long)20L, (long)30L, (long)42L}))));",
            "Debug.Assert(MultiplyElements((new List<long>(new long[]{(long)12L, (long)13L, (long)14L, (long)9L, (long)15L}))).Equals((new List<object>(new long[]{(long)156L, (long)182L, (long)126L, (long)135L}))));",
            "Debug.Assert(MultiplyElements((new List<long>(new long[]{(long)12L}))).Equals((new List<object>())));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> SumList(List<long> lst1, List<long> lst2) {\n        List<long> result = new ArrayList<long>();\n        long sum = 0;\n        for (long i = 0; i < lst1.size(); i++) {\n            sum += lst1.get(i);\n            result.add(sum);\n        }\n        for (long i = 0; i < lst2.size(); i++) {\n            sum += lst2.get(i);\n            result.add(sum);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SumList((new List<long>(new long[]{(long)10L, (long)20L, (long)30L})), (new List<long>(new long[]{(long)15L, (long)25L, (long)35L}))).Equals((new List<long>(new long[]{(long)25L, (long)45L, (long)65L}))));",
            "Debug.Assert(SumList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)5L, (long)6L, (long)7L}))).Equals((new List<long>(new long[]{(long)6L, (long)8L, (long)10L}))));",
            "Debug.Assert(SumList((new List<long>(new long[]{(long)15L, (long)20L, (long)30L})), (new List<long>(new long[]{(long)15L, (long)45L, (long)75L}))).Equals((new List<long>(new long[]{(long)30L, (long)65L, (long)105L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "Write a csthon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool DifSquare(long n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        long n1 = n;\n        long n2 = n;\n        long n3 = n;\n        long n4 = n;\n        long n5 = n;\n        long n6 = n;\n        long n7 = n;\n        long n8 = n;\n        long n9 = n;\n        long n10 = n;\n        long n11 = n;\n        long n12 = n;\n        long n13 = n;\n        long n14 = n;\n        long n15 = n;\n        long n16 = n;\n        long n17 = n;\n        long n18 = n;\n        long n19 = n;\n        long n20 = n;\n        long n21 = n;\n        long n22 = n;\n        long n23 = n;\n        long n24 = n;\n        long n25 = n;\n        long n26 = n;\n        long n27 = n;\n        long n28 = n;\n        long n29 = n;\n        long n30 = n;\n        long n31 = n;\n        long n32 = n;\n        long n33 = n;\n        long n34 = n;\n        long n35 = n;\n        long n36 = n;\n        long n37 = n;\n        long n38 = n;\n        long n39 = n;\n        long n40 = n;\n        long n41 = n;\n        long n42 = n;\n        long n43 = n;\n        long n44 = n;\n        long n45 = n;\n        long n46 = n;\n        long n47 = n;\n        long n48 = n;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(DifSquare((5L)) == (true));",
            "Debug.Assert(DifSquare((10L)) == (false));",
            "Debug.Assert(DifSquare((15L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "730",
        "title": "consecutive_duplicates",
        "text": "Write a function to remove consecutive duplicates of a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<object> ConsecutiveDuplicates(List<object> nums) {\n        List<object> result = new ArrayList<object>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) == nums.get(i + 1)) {\n                result.add(nums.get(i));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ConsecutiveDuplicates((new List<object>(new long[]{(long)0L, (long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L}))).Equals((new List<object>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L}))));",
            "Debug.Assert(ConsecutiveDuplicates((new List<object>(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L}))).Equals((new List<object>(new long[]{(long)10L, (long)15L, (long)19L, (long)18L, (long)17L, (long)26L, (long)17L, (long)18L, (long)10L}))));",
            "Debug.Assert(ConsecutiveDuplicates((new List<object>(new string[]{(string)\"a\", (string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"d\"}))).Equals((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\"}))));",
            "Debug.Assert(ConsecutiveDuplicates((new List<object>(new string[]{(string)\"a\", (string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"d\", (string)\"a\", (string)\"a\"}))).Equals((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"a\"}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "Return the area",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float LateralsurfaceCone(long r, long h) {\n        Cone cone = new Cone(r, h);\n        float area = cone.SurfaceArea();\n        return area;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(LateralsurfaceCone((5L), (12L)) == (204.20352248333654f));",
            "Debug.Assert(LateralsurfaceCone((10L), (15L)) == (566.3586699569488f));",
            "Debug.Assert(LateralsurfaceCone((19L), (17L)) == (1521.8090132193388f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string ReplaceSpecialchar(string text) {\n        string result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) =='' || text.charAt(i) == ',' || text.charAt(i) == '.') {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ReplaceSpecialchar((\"Python language, Programming language.\")).Equals((\"Python:language::Programming:language:\")));",
            "Debug.Assert(ReplaceSpecialchar((\"a b c,d e f\")).Equals((\"a:b:c:d:e:f\")));",
            "Debug.Assert(ReplaceSpecialchar((\"ram reshma,ram rahim\")).Equals((\"ram:reshma:ram:rahim\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "Write a function to find the index of the first occurrence of a given number in a sorted list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindFirstOccurrence(List<long> A, long x) {\n        long i = 0;\n        while (i < A.Length) {\n            if (A.get(i) == x) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)5L, (long)5L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (5L)) == (1L));",
            "Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (5L)) == (2L));",
            "Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (6L)) == (4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Length; i++) {\n            sum += arr[i];\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));",
            "Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));",
            "Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "Write a csthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long ToggleMiddleBits(long n) {\n        long result = 0;\n        for (int i = 0; i < (n >> 1); i++) {\n            result |= (n & 1) << i;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ToggleMiddleBits((9L)) == (15L));",
            "Debug.Assert(ToggleMiddleBits((10L)) == (12L));",
            "Debug.Assert(ToggleMiddleBits((11L)) == (13L));",
            "Debug.Assert(ToggleMiddleBits((65L)) == (127L));",
            "Debug.Assert(ToggleMiddleBits((77L)) == (115L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/csthon-exercises/data-structures-and-algorithms/csthon-data-structure-exercise-24.php",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long LeftInsertion(List<long> a, long x) {\n        long i = 0;\n        while (i < a.Length) {\n            if (a.get(i) < x) {\n                i++;\n            } else {\n                break;\n            }\n        }\n        return i;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (6L)) == (4L));",
            "Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (3L)) == (2L));",
            "Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (7L)) == (4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckStr(string str) {\n        if (str.length() == 0) {\n            return false;\n        }\n        if (str.length() == 1) {\n            return true;\n        }\n        if (str.length() == 2) {\n            if (str.charAt(0) == 'a' && str.charAt(1) == 'y') {\n                return true;\n            }\n            if (str.charAt(0) == 'e' && str.charAt(1) == 'y') {\n                return true;\n            }\n            if (str.charAt(0) == 'i' && str.charAt(1) == 'y') {\n                return true;\n            }\n            if (str.charAt(0) == 'o' && str.charAt(1) == 'y') {\n                return true;\n            }\n            if (str.charAt(0) == 'u' && str.charAt(1) == 'y') {\n                return true;\n            }\n            if (str.charAt(0) == 'a' && str.charAt(1) =='m') {\n                return true;\n            }\n            if (str.charAt(0) == 'e' && str.charAt(1) =='m') {\n                return true;\n            }\n            if (str.charAt(0) == 'i' && str.charAt(1) =='m') {\n                return true;\n            }\n            if (str.charAt(0) == 'o' && str.charAt(1) =='m') {\n                return true;\n            }\n            if (str.charAt(0) == 'u' && str.charAt(1) =='m') {\n                return true;\n            }\n            if (str.charAt(0) ==\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckStr((\"annie\")) == (true));",
            "Debug.Assert(CheckStr((\"dawood\")) == (false));",
            "Debug.Assert(CheckStr((\"Else\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/csthon-exercises/data-structures-and-algorithms/csthon-recursion-exercise-9.php",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float GeometricSum(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {\n            return 7;\n        }\n        if (n == 8) {\n            return 8;\n        }\n        if (n == 9) {\n            return 9;\n        }\n        if (n == 10) {\n            return 10;\n        }\n        if (n == 11) {\n            return 11;\n        }\n        if (n == 12) {\n            return 12;\n        }\n        if (n == 13) {\n            return 13;\n        }\n        if (n == 14) {\n            return 14;\n        }\n        if (n == 15) {\n            return 15;\n        }\n        if (n == 16) {\n            return 16;\n        }\n        if (n == 17) {\n            return 17;\n        }\n        if (n == 18) {\n            return 18;\n        }\n        if (n == 19) {\n            return 19;\n        }\n        if (n == 20) {\n            return 20;\n        }\n        if (n == 21) {\n            return 21;\n        }\n        if (n == 22) {\n            return 22\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(GeometricSum((7L)) == (1.9921875f));",
            "Debug.Assert(GeometricSum((4L)) == (1.9375f));",
            "Debug.Assert(GeometricSum((8L)) == (1.99609375f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "Write a csthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindIndex(long n) {\n        long index = 0;\n        while (index < n) {\n            if (n % 2 == 0) {\n                index++;\n            } else {\n                index++;\n                if (n % 3 == 0) {\n                    index++;\n                } else {\n                    index++;\n                }\n            }\n        }\n        return index;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindIndex((2L)) == (4L));",
            "Debug.Assert(FindIndex((3L)) == (14L));",
            "Debug.Assert(FindIndex((4L)) == (45L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Dictionary<long,long> TupleToDict(Tuple<long, long, long, long, long, long> test_tup) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length(); i++) {\n            result.Add(test_tup.Get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TupleToDict((Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L))).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));",
            "Debug.Assert(TupleToDict((Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L))).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));",
            "Debug.Assert(TupleToDict((Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L))).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "Write a csthon function to check whether all the characters are same or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool AllCharactersSame(string s) {\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i)!= s.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AllCharactersSame((\"python\")) == (false));",
            "Debug.Assert(AllCharactersSame((\"aaa\")) == (true));",
            "Debug.Assert(AllCharactersSame((\"data\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "Write a function to caluclate the area of a tetrahedron.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float AreaTetrahedron(long side) {\n        float area = 0;\n        if (side == 0) {\n            area = 0;\n        } else if (side == 1) {\n            area = 0;\n        } else if (side == 2) {\n            area = 0;\n        } else if (side == 3) {\n            area = 0;\n        } else if (side == 4) {\n            area = 0;\n        } else if (side == 5) {\n            area = 0;\n        } else if (side == 6) {\n            area = 0;\n        } else if (side == 7) {\n            area = 0;\n        } else if (side == 8) {\n            area = 0;\n        } else if (side == 9) {\n            area = 0;\n        } else if (side == 10) {\n            area = 0;\n        } else if (side == 11) {\n            area = 0;\n        } else if (side == 12) {\n            area = 0;\n        } else if (side == 13) {\n            area = 0;\n        } else if (side == 14) {\n            area = 0;\n        } else if (side == 15) {\n            area = 0;\n        } else if (side == 16) {\n            area = 0;\n        } else if (side == 17) {\n            area = 0;\n        } else if (side == 18) {\n            area = 0;\n        } else if (side == 19) {\n            area = 0;\n        } else if (side == 20) {\n            area = 0;\n        } else if (side == 21) {\n            area = 0;\n        } else if (side == 22) {\n            area = 0;\n        } else if (side == 23) {\n            area = 0;\n        } else if (side == 24)\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AreaTetrahedron((3L)) == (15.588457268119894f));",
            "Debug.Assert(AreaTetrahedron((20L)) == (692.8203230275509f));",
            "Debug.Assert(AreaTetrahedron((10L)) == (173.20508075688772f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/csthon-program-right-rotate-list-n/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> RotateRight(List<long> list, long m) {\n        if (list == null || list.size() == 0) {\n            return list;\n        }\n        List<long> result = new ArrayList<>();\n        long count = 0;\n        for (long i = 0; i < list.size(); i++) {\n            if (i == list.size() - 1) {\n                result.add(list.get(i));\n            } else {\n                result.add(list.get(i) + m);\n                count++;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RotateRight((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (3L)).Equals((new List<long>(new long[]{(long)8L, (long)9L, (long)10L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))));",
            "Debug.Assert(RotateRight((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)9L, (long)10L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))));",
            "Debug.Assert(RotateRight((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (5L)).Equals((new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "744",
        "title": "check_none",
        "text": "Write a function to check if the given tuple has any none value or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckNone(object test_tup) {\n        if (test_tup == null) {\n            return true;\n        }\n        return false;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckNone(Tuple.Create(10L, 4L, 5L, 6L, (Nullable<long>)null)) == (true));",
            "Debug.Assert(CheckNone(Tuple.Create(7L, 8L, 9L, 11L, 14L)) == (false));",
            "Debug.Assert(CheckNone(Tuple.Create(1L, 2L, 3L, 4L, (Nullable<long>)null)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/csthon-exercises/lambda/csthon-lambda-exercise-24.php",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> DivisibleByDigits(long startnum, long endnum) {\n        List<long> result = new ArrayList<>();\n        long num = startnum;\n        while (num <= endnum) {\n            if (num % 10 == 0) {\n                result.add(num);\n            }\n            num = num / 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(DivisibleByDigits((1L), (22L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)11L, (long)12L, (long)15L, (long)22L}))));",
            "Debug.Assert(DivisibleByDigits((1L), (15L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)11L, (long)12L, (long)15L}))));",
            "Debug.Assert(DivisibleByDigits((20L), (25L)).Equals((new List<long>(new long[]{(long)22L, (long)24L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Nullable<float> SectorArea(long r, long a) {\n        float r2 = r * r;\n        float a2 = a * a;\n        float r3 = r2 * r;\n        float a3 = a2 * a;\n        float r4 = r3 * r;\n        float a4 = a3 * a;\n        float r5 = r4 * r;\n        float a5 = a4 * a;\n        float r6 = r5 * r;\n        float a6 = a5 * a;\n        float r7 = r6 * r;\n        float a7 = a6 * a;\n        float r8 = r7 * r;\n        float a8 = a7 * a;\n        float r9 = r8 * r;\n        float a9 = a8 * a;\n        float r10 = r9 * r;\n        float a10 = a9 * a;\n        float r11 = r10 * r;\n        float a11 = a10 * a;\n        float r12 = r11 * r;\n        float a12 = a11 * a;\n        float r13 = r12 * r;\n        float a13 = a12 * a;\n        float r14 = r13 * r;\n        float a14 = a13 * a;\n        float r15 = r14 * r;\n        float a15 = a14 * a;\n        float r16 = r15 * r;\n        float a16 = a15 * a;\n        float r17 = r16 * r;\n        float a17 = a16 * a;\n        float r18 = r17 * r;\n        float a18 = a17 * a;\n        float r19 = r18 * r;\n        float a19 = a18 * a;\n        float r20 = r19 *\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));",
            "Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));",
            "Debug.Assert(SectorArea((9L), (361L)).Equals(null));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long LcsOfThree(string X, string Y, string Z) {\n        long result = 0;\n        if (X.length() == 0 || Y.length() == 0 || Z.length() == 0) {\n            return result;\n        }\n        if (X.length() == 1 && Y.length() == 1 && Z.length() == 1) {\n            result = Math.max(LcsOfThree(X, Y, Z), LcsOfThree(X, Y, Z));\n        }\n        if (X.length() == 2 && Y.length() == 2 && Z.length() == 2) {\n            result = Math.max(LcsOfThree(X, Y, Z), LcsOfThree(X, Y, Z));\n        }\n        if (X.length() == 3 && Y.length() == 3 && Z.length() == 3) {\n            result = Math.max(LcsOfThree(X, Y, Z), LcsOfThree(X, Y, Z));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));",
            "Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));",
            "Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string CapitalWordsSpaces(string str1) {\n        string str2 = \"\";\n        for (int i = 0; i < str1.length(); i++) {\n            if (Character.isUpperCase(str1.charAt(i))) {\n                str2 += str1.charAt(i);\n            }\n        }\n        return str2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CapitalWordsSpaces((\"Python\")).Equals((\"Python\")));",
            "Debug.Assert(CapitalWordsSpaces((\"PythonProgrammingExamples\")).Equals((\"Python Programming Examples\")));",
            "Debug.Assert(CapitalWordsSpaces((\"GetReadyToBeCodingFreak\")).Equals((\"Get Ready To Be Coding Freak\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/csthon-sort-numeric-strings-in-a-list/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> SortNumericStrings(List<string> nums_str) {\n        List<long> nums = new ArrayList<>();\n        for (int i = 0; i < nums_str.size(); i++) {\n            nums.add(Long.parseLong(nums_str.get(i)));\n        }\n        return nums;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SortNumericStrings((new List<string>(new string[]{(string)\"4\", (string)\"12\", (string)\"45\", (string)\"7\", (string)\"0\", (string)\"100\", (string)\"200\", (string)\"-12\", (string)\"-500\"}))).Equals((new List<long>(new long[]{(long)-500L, (long)-12L, (long)0L, (long)4L, (long)7L, (long)12L, (long)45L, (long)100L, (long)200L}))));",
            "Debug.Assert(SortNumericStrings((new List<string>(new string[]{(string)\"2\", (string)\"3\", (string)\"8\", (string)\"4\", (string)\"7\", (string)\"9\", (string)\"8\", (string)\"2\", (string)\"6\", (string)\"5\", (string)\"1\", (string)\"6\", (string)\"1\", (string)\"2\", (string)\"3\", (string)\"4\", (string)\"6\", (string)\"9\", (string)\"1\", (string)\"2\"}))).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)8L, (long)9L, (long)9L}))));",
            "Debug.Assert(SortNumericStrings((new List<string>(new string[]{(string)\"1\", (string)\"3\", (string)\"5\", (string)\"7\", (string)\"1\", (string)\"3\", (string)\"13\", (string)\"15\", (string)\"17\", (string)\"5\", (string)\"7 \", (string)\"9\", (string)\"1\", (string)\"11\"}))).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)3L, (long)3L, (long)5L, (long)5L, (long)7L, (long)7L, (long)9L, (long)11L, (long)13L, (long)15L, (long)17L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "Write a function to check whether it follows the sequence given in the patterns list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsSamepatterns(List<string> colors, List<string> patterns) {\n        if (colors.size()!= patterns.size()) {\n            return false;\n        }\n        for (int i = 0; i < colors.size(); i++) {\n            if (colors.get(i)!= patterns.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsSamepatterns((new List<string>(new string[]{(string)\"red\", (string)\"green\", (string)\"green\"})), (new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"b\"}))) == (true));",
            "Debug.Assert(IsSamepatterns((new List<string>(new string[]{(string)\"red\", (string)\"green\", (string)\"greenn\"})), (new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"b\"}))) == (false));",
            "Debug.Assert(IsSamepatterns((new List<string>(new string[]{(string)\"red\", (string)\"green\", (string)\"greenn\"})), (new List<string>(new string[]{(string)\"a\", (string)\"b\"}))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "Write a function to add the given tuple to the given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> AddTuple(List<long> test_list, Tuple<long, long> test_tup) {\n        List<long> result = new ArrayList<long>();\n        for (long i = 0; i < test_list.size(); i++) {\n            result.add(test_list.get(i) + test_tup.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(AddTuple((new List<long>(new long[]{(long)5L, (long)6L, (long)7L})), (Tuple.Create(9L, 10L))).Equals((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)9L, (long)10L}))));",
            "Debug.Assert(AddTuple((new List<long>(new long[]{(long)6L, (long)7L, (long)8L})), (Tuple.Create(10L, 11L))).Equals((new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)10L, (long)11L}))));",
            "Debug.Assert(AddTuple((new List<long>(new long[]{(long)7L, (long)8L, (long)9L})), (Tuple.Create(11L, 12L))).Equals((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)11L, (long)12L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckMinHeap(List<long> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        if (arr.size() == 1) {\n            return false;\n        }\n        long min = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                return false;\n            }\n            min = arr.get(i);\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckMinHeap((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));",
            "Debug.Assert(CheckMinHeap((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)10L, (long)15L}))) == (true));",
            "Debug.Assert(CheckMinHeap((new List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)5L, (long)3L, (long)15L}))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long JacobsthalNum(long n) {\n        long result = 1;\n        while (n > 0) {\n            n = n / 10;\n            result *= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(JacobsthalNum((5L)) == (11L));",
            "Debug.Assert(JacobsthalNum((2L)) == (1L));",
            "Debug.Assert(JacobsthalNum((4L)) == (5L));",
            "Debug.Assert(JacobsthalNum((13L)) == (2731L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/csthon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim cocs of test cases",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Tuple<string, long>> MinK(List<Tuple<string, long>> test_list, long K) {\n        List<Tuple<string, long>> result = new ArrayList<Tuple<string, long>>();\n        for (int i = 0; i < test_list.size(); i++) {\n            Tuple<string, long> tuple = test_list.get(i);\n            if (tuple.getSecond() < K) {\n                result.add(tuple);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MinK((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Manjeet\", 10L), (Tuple<string, long>)Tuple.Create(\"Akshat\", 4L), (Tuple<string, long>)Tuple.Create(\"Akash\", 2L), (Tuple<string, long>)Tuple.Create(\"Nikhil\", 8L)})), (2L)).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Akash\", 2L), (Tuple<string, long>)Tuple.Create(\"Akshat\", 4L)}))));",
            "Debug.Assert(MinK((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Sanjeev\", 11L), (Tuple<string, long>)Tuple.Create(\"Angat\", 5L), (Tuple<string, long>)Tuple.Create(\"Akash\", 3L), (Tuple<string, long>)Tuple.Create(\"Nepin\", 9L)})), (3L)).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Akash\", 3L), (Tuple<string, long>)Tuple.Create(\"Angat\", 5L), (Tuple<string, long>)Tuple.Create(\"Nepin\", 9L)}))));",
            "Debug.Assert(MinK((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"tanmay\", 14L), (Tuple<string, long>)Tuple.Create(\"Amer\", 11L), (Tuple<string, long>)Tuple.Create(\"Ayesha\", 9L), (Tuple<string, long>)Tuple.Create(\"SKD\", 16L)})), (1L)).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Ayesha\", 9L)}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "754",
        "title": "extract_index_list",
        "text": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<object> ExtractIndexList(List<long> l1, List<long> l2, List<long> l3) {\n        List<object> result = new ArrayList<>();\n        for (long i : l1) {\n            if (i == l2.get(0) || i == l2.get(1) || i == l2.get(2) || i == l2.get(3)) {\n                result.add(i);\n            }\n        }\n        for (long i : l2) {\n            if (i == l3.get(0) || i == l3.get(1) || i == l3.get(2) || i == l3.get(3)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ExtractIndexList((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L}))).Equals((new List<object>(new long[]{(long)1L, (long)7L}))));",
            "Debug.Assert(ExtractIndexList((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)5L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)7L}))).Equals((new List<object>(new long[]{(long)1L, (long)6L}))));",
            "Debug.Assert(ExtractIndexList((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)6L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L}))).Equals((new List<object>(new long[]{(long)1L, (long)5L}))));",
            "Debug.Assert(ExtractIndexList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)6L, (long)6L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L}))).Equals((new List<object>())));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "Write your code here",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool TextMatchZeroOne(string text) {\n        return false;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TextMatchZeroOne((\"ac\")) == (false));",
            "Debug.Assert(TextMatchZeroOne((\"dc\")) == (false));",
            "Debug.Assert(TextMatchZeroOne((\"abbbba\")) == (true));",
            "Debug.Assert(TextMatchZeroOne((\"dsabbbba\")) == (true));",
            "Debug.Assert(TextMatchZeroOne((\"asbbbba\")) == (false));",
            "Debug.Assert(TextMatchZeroOne((\"abaaa\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/csthon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountReversePairs(List<string> test_list) {\n        long count = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                if (test_list.get(i).compareTo(test_list.get(j)) == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountReversePairs((new List<string>(new string[]{(string)\"julia\", (string)\"best\", (string)\"tseb\", (string)\"for\", (string)\"ailuj\"}))) == (2L));",
            "Debug.Assert(CountReversePairs((new List<string>(new string[]{(string)\"geeks\", (string)\"best\", (string)\"for\", (string)\"skeeg\"}))) == (1L));",
            "Debug.Assert(CountReversePairs((new List<string>(new string[]{(string)\"makes\", (string)\"best\", (string)\"sekam\", (string)\"for\", (string)\"rof\"}))) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsDecimal(string num) {\n        if (num.length() < 2) {\n            return false;\n        }\n        int num_len = num.length();\n        if (num_len < 2) {\n            return false;\n        }\n        int num_digit = 0;\n        for (int i = 0; i < num_len; i++) {\n            num_digit += (num[i] - '0');\n        }\n        if (num_digit % 2!= 0) {\n            return false;\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsDecimal((\"123.11\")) == (true));",
            "Debug.Assert(IsDecimal((\"e666.86\")) == (false));",
            "Debug.Assert(IsDecimal((\"3.124587\")) == (false));",
            "Debug.Assert(IsDecimal((\"1.11\")) == (true));",
            "Debug.Assert(IsDecimal((\"1.1.11\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Tuple<long, long, long>> FindTuples(List<Tuple<long, long, long>> test_list, long K) {\n        List<Tuple<long, long, long>> result = new ArrayList<Tuple<long, long, long>>();\n        for (Tuple<long, long, long> tuple : test_list) {\n            if (tuple.getSecond() % K == 0) {\n                result.add(tuple);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindTuples((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(6L, 24L, 12L), (Tuple<long, long, long>)Tuple.Create(7L, 9L, 6L), (Tuple<long, long, long>)Tuple.Create(12L, 18L, 21L)})), (6L)).Equals((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(6L, 24L, 12L)}))));",
            "Debug.Assert(FindTuples((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(5L, 25L, 30L), (Tuple<long, long, long>)Tuple.Create(4L, 2L, 3L), (Tuple<long, long, long>)Tuple.Create(7L, 8L, 9L)})), (5L)).Equals((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(5L, 25L, 30L)}))));",
            "Debug.Assert(FindTuples((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(7L, 9L, 16L), (Tuple<long, long, long>)Tuple.Create(8L, 16L, 4L), (Tuple<long, long, long>)Tuple.Create(19L, 17L, 18L)})), (4L)).Equals((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(8L, 16L, 4L)}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "Write a csthon function to check whether a list of numbers contains only one distinct element or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool UniqueElement(List<long> arr) {\n        long count = 0;\n        for (long i : arr) {\n            if (count == 1) {\n                return false;\n            }\n            count++;\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(UniqueElement((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))) == (true));",
            "Debug.Assert(UniqueElement((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))) == (false));",
            "Debug.Assert(UniqueElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckMonthnumberNumber(long monthnum3) {\n        if (monthnum3 == 0) {\n            return false;\n        }\n        if (monthnum3 == 1) {\n            return true;\n        }\n        if (monthnum3 == 12) {\n            return true;\n        }\n        return false;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckMonthnumberNumber((6L)) == (true));",
            "Debug.Assert(CheckMonthnumberNumber((2L)) == (false));",
            "Debug.Assert(CheckMonthnumberNumber((12L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "Write a csthon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindMinDiff(List<long> arr, long n) {\n        long min = Long.MAX_VALUE;\n        for (long i = 0; i < arr.size(); i++) {\n            long temp = arr.get(i);\n            for (long j = i + 1; j < arr.size(); j++) {\n                if (temp - arr.get(j) < min) {\n                    min = temp - arr.get(j);\n                }\n            }\n        }\n        return min;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindMinDiff((new List<long>(new long[]{(long)1L, (long)5L, (long)3L, (long)19L, (long)18L, (long)25L})), (6L)) == (1L));",
            "Debug.Assert(FindMinDiff((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)6L})), (4L)) == (1L));",
            "Debug.Assert(FindMinDiff((new List<long>(new long[]{(long)30L, (long)5L, (long)20L, (long)9L})), (4L)) == (4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "Write a csthon function to count number of digits in a given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long NumberCtr(string str) {\n        long result = 0;\n        for (int i = 0; i < str.length(); i++) {\n            result += str.charAt(i) - '0';\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(NumberCtr((\"program2bedone\")) == (1L));",
            "Debug.Assert(NumberCtr((\"3wonders\")) == (1L));",
            "Debug.Assert(NumberCtr((\"123\")) == (3L));",
            "Debug.Assert(NumberCtr((\"3wond-1ers2\")) == (3L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long IsPolite(long n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n % 2 == 0) {\n            return IsPolite(n - 1) + IsPolite(n - 2);\n        }\n        return IsPolite(n - 1) + IsPolite(n - 2) + IsPolite(n - 3);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsPolite((7L)) == (11L));",
            "Debug.Assert(IsPolite((4L)) == (7L));",
            "Debug.Assert(IsPolite((9L)) == (13L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Tuple<long, long>> PairWise(List<long> l1) {\n        List<Tuple<long, long>> result = new ArrayList<Tuple<long, long>>();\n        for (long i = 0; i < l1.size(); i++) {\n            result.add(new Tuple<long, long>(l1.get(i), l1.get(i + 1)));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(PairWise((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(3L, 3L), (Tuple<long, long>)Tuple.Create(3L, 4L), (Tuple<long, long>)Tuple.Create(4L, 4L), (Tuple<long, long>)Tuple.Create(4L, 5L)}))));",
            "Debug.Assert(PairWise((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L, (long)10L}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 5L), (Tuple<long, long>)Tuple.Create(5L, 7L), (Tuple<long, long>)Tuple.Create(7L, 9L), (Tuple<long, long>)Tuple.Create(9L, 10L)}))));",
            "Debug.Assert(PairWise((new List<long>(new long[]{(long)5L, (long)1L, (long)9L, (long)7L, (long)10L}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 1L), (Tuple<long, long>)Tuple.Create(1L, 9L), (Tuple<long, long>)Tuple.Create(9L, 7L), (Tuple<long, long>)Tuple.Create(7L, 10L)}))));",
            "Debug.Assert(PairWise((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(3L, 4L), (Tuple<long, long>)Tuple.Create(4L, 5L), (Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(6L, 7L), (Tuple<long, long>)Tuple.Create(7L, 8L), (Tuple<long, long>)Tuple.Create(8L, 9L), (Tuple<long, long>)Tuple.Create(9L, 10L)}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "Write a csthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (long i = 0; i < arr.Length; i++) {\n            if (arr.get(i) == sum) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));",
            "Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));",
            "Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));",
            "Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "Write a csthon function to get the difference between two lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> Diff(List<long> li1, List<long> li2) {\n        long sum = 0;\n        for (long i : li1) {\n            sum += i;\n        }\n        for (long i : li2) {\n            sum -= i;\n        }\n        return new ArrayList<>(li1).subList(0, sum);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Diff((new List<long>(new long[]{(long)10L, (long)15L, (long)20L, (long)25L, (long)30L, (long)35L, (long)40L})), (new List<long>(new long[]{(long)25L, (long)40L, (long)35L}))).Equals((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)15L}))));",
            "Debug.Assert(Diff((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<long>(new long[]{(long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))));",
            "Debug.Assert(Diff((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "Write a csthon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long OddNumSum(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(OddNumSum((2L)) == (82L));",
            "Debug.Assert(OddNumSum((3L)) == (707L));",
            "Debug.Assert(OddNumSum((4L)) == (3108L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckExpression(string exp) {\n        int n = 0;\n        int m = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m1 = 0;\n        int m2 = 0;\n        int m3 = 0;\n        int m4 = 0;\n        int m5 = 0;\n        int m6 = 0;\n        int m7 = 0;\n        int m8 = 0;\n        int m9 = 0;\n        int m10 = 0;\n        int m11 = 0;\n        int m12 = 0;\n        int m13 = 0;\n        int m14 = 0;\n        int m15 = 0;\n        int m16 = 0;\n        int m17 = 0;\n        int m18 = 0;\n        int m19 = 0;\n        int m20 = 0;\n        int m21 = 0;\n        int m22 = 0;\n        int m23 = 0;\n        int m24 = 0;\n        int m25 = 0;\n        int m26 = 0;\n        int m27 = 0;\n        int m28 = 0;\n        int m29 = 0;\n        int m30 = 0;\n        int m31 = 0;\n        int m32 = 0;\n        int m33 = 0;\n        int m34 = 0;\n        int m35 = 0;\n        int m36 = 0;\n        int m37 = 0;\n        int m38 = 0;\n        int m39 = 0;\n        int m40 = 0;\n        int m41 = 0;\n        int m42 = 0;\n        int m43 = 0;\n        int m44 = 0;\n        int m45 = 0;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckExpression((\"{()}[{}]\")) == (true));",
            "Debug.Assert(CheckExpression((\"{()}[{]\")) == (false));",
            "Debug.Assert(CheckExpression((\"{()}[{}][]({})\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "Write a function to remove all the words with k length in the given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string RemoveLength(string test_str, long K) {\n        string result = \"\";\n        for (int i = 0; i < test_str.length(); i++) {\n            if (test_str.charAt(i) =='') {\n                result += test_str.charAt(i);\n            } else {\n                result += test_str.charAt(i);\n                result += test_str.charAt(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveLength((\"The person is most value tet\"), (3L)).Equals((\"person is most value\")));",
            "Debug.Assert(RemoveLength((\"If you told me about this ok\"), (4L)).Equals((\"If you me about ok\")));",
            "Debug.Assert(RemoveLength((\"Forces of darkeness is come into the play\"), (4L)).Equals((\"Forces of darkeness is the\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "Create a list of all the possible matches.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, long, long> OccuranceSubstring(string text, string pattern) {\n        List<string> matches = new ArrayList<string>();\n        List<long> matchesPos = new ArrayList<long>();\n        List<long> matchesLen = new ArrayList<long>();\n        List<long> matchesLenPos = new ArrayList<long>();\n        List<long> matchesLenPos2 = new ArrayList<long>();\n        List<long> matchesLenPos2 = new ArrayList<long>();\n        List<long> matchesLenPos3 = new ArrayList<long>();\n        List<long> matchesLenPos4 = new ArrayList<long>();\n        List<long> matchesLenPos5 = new ArrayList<long>();\n        List<long> matchesLenPos6 = new ArrayList<long>();\n        List<long> matchesLenPos7 = new ArrayList<long>();\n        List<long> matchesLenPos8 = new ArrayList<long>();\n        List<long> matchesLenPos9 = new ArrayList<long>();\n        List<long> matchesLenPos10 =\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(OccuranceSubstring((\"python programming, python language\"), (\"python\")).Equals((Tuple.Create(\"python\", 0L, 6L))));",
            "Debug.Assert(OccuranceSubstring((\"python programming,programming language\"), (\"programming\")).Equals((Tuple.Create(\"programming\", 7L, 18L))));",
            "Debug.Assert(OccuranceSubstring((\"python programming,programming language\"), (\"language\")).Equals((Tuple.Create(\"language\", 31L, 39L))));",
            "Debug.Assert(OccuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).Equals(null));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "Write a csthon function to check whether every odd index contains odd numbers of a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool OddPosition(List<long> nums) {\n        long sum = 0;\n        for (int i = 0; i < nums.Length; i++) {\n            sum += nums[i];\n        }\n        return sum % 2 == 1;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));",
            "Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));",
            "Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountVowels(string test_str) {\n        long count = 0;\n        for (int i = 0; i < test_str.length(); i++) {\n            if (test_str.charAt(i) == 'a' || test_str.charAt(i) == 'e' || test_str.charAt(i) == 'i' || test_str.charAt(i) == 'o' || test_str.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountVowels((\"bestinstareels\")) == (7L));",
            "Debug.Assert(CountVowels((\"partofthejourneyistheend\")) == (12L));",
            "Debug.Assert(CountVowels((\"amazonprime\")) == (5L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "Write a csthon function to find the sum of non-repeated elements in a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindSum(List<long> arr) {\n        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindSum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L, (long)1L, (long)4L, (long)5L, (long)6L}))) == (21L));",
            "Debug.Assert(FindSum((new List<long>(new long[]{(long)1L, (long)10L, (long)9L, (long)4L, (long)2L, (long)10L, (long)10L, (long)45L, (long)4L}))) == (71L));",
            "Debug.Assert(FindSum((new List<long>(new long[]{(long)12L, (long)10L, (long)9L, (long)45L, (long)2L, (long)10L, (long)10L, (long)45L, (long)10L}))) == (78L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "778",
        "title": "pack_consecutive_duplicates",
        "text": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<object>> PackConsecutiveDuplicates(List<object> list1) {\n        List<List<object>> list2 = new ArrayList<List<object>>();\n        for (int i = 0; i < list1.size(); i++) {\n            List<object> list = new ArrayList<object>();\n            list.add(list1.get(i));\n            list2.add(list);\n        }\n        return list2;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(PackConsecutiveDuplicates((new List<object>(new long[]{(long)0L, (long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L}))).Equals((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)2L}), (List<long>)new List<long>(new long[]{(long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)6L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L}), (List<long>)new List<long>(new long[]{(long)8L}), (List<long>)new List<long>(new long[]{(long)9L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L})}))));",
            "Debug.Assert(PackConsecutiveDuplicates((new List<object>(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L}))).Equals((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)10L, (long)10L}), (List<long>)new List<long>(new long[]{(long)15L}), (List<long>)new List<long>(new long[]{(long)19L}), (List<long>)new List<long>(new long[]{(long)18L, (long)18L}), (List<long>)new List<long>(new long[]{(long)17L}), (List<long>)new List<long>(new long[]{(long)26L, (long)26L}), (List<long>)new List<long>(new long[]{(long)17L}), (List<long>)new List<long>(new long[]{(long)18L}), (List<long>)new List<long>(new long[]{(long)10L})}))));",
            "Debug.Assert(PackConsecutiveDuplicates((new List<object>(new string[]{(string)\"a\", (string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"d\"}))).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"a\"}), (List<string>)new List<string>(new string[]{(string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"d\"})}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "Write a csthon function to find whether a number is divisible by 11.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsDiff(long n) {\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (n % 11 == 0) return true;\n        return IsDiff(n / 11);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsDiff((12345L)) == (false));",
            "Debug.Assert(IsDiff((1212112L)) == (true));",
            "Debug.Assert(IsDiff((1212L)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/csthon-combinations-of-sum-with-tuples-in-tuple-list/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Tuple<long, long>> FindCombinations(List<Tuple<long, long>> test_list) {\n        List<Tuple<long, long>> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            result.add(new Tuple<>(test_list.get(i).getFirst(), test_list.get(i).getSecond()));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindCombinations((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 4L), (Tuple<long, long>)Tuple.Create(6L, 7L), (Tuple<long, long>)Tuple.Create(5L, 1L), (Tuple<long, long>)Tuple.Create(6L, 10L)}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(8L, 11L), (Tuple<long, long>)Tuple.Create(7L, 5L), (Tuple<long, long>)Tuple.Create(8L, 14L), (Tuple<long, long>)Tuple.Create(11L, 8L), (Tuple<long, long>)Tuple.Create(12L, 17L), (Tuple<long, long>)Tuple.Create(11L, 11L)}))));",
            "Debug.Assert(FindCombinations((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(3L, 5L), (Tuple<long, long>)Tuple.Create(7L, 8L), (Tuple<long, long>)Tuple.Create(6L, 2L), (Tuple<long, long>)Tuple.Create(7L, 11L)}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(10L, 13L), (Tuple<long, long>)Tuple.Create(9L, 7L), (Tuple<long, long>)Tuple.Create(10L, 16L), (Tuple<long, long>)Tuple.Create(13L, 10L), (Tuple<long, long>)Tuple.Create(14L, 19L), (Tuple<long, long>)Tuple.Create(13L, 13L)}))));",
            "Debug.Assert(FindCombinations((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 6L), (Tuple<long, long>)Tuple.Create(8L, 9L), (Tuple<long, long>)Tuple.Create(7L, 3L), (Tuple<long, long>)Tuple.Create(8L, 12L)}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(12L, 15L), (Tuple<long, long>)Tuple.Create(11L, 9L), (Tuple<long, long>)Tuple.Create(12L, 18L), (Tuple<long, long>)Tuple.Create(15L, 12L), (Tuple<long, long>)Tuple.Create(16L, 21L), (Tuple<long, long>)Tuple.Create(15L, 15L)}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "Write a csthon function to check whether the count of divisors is even. https://www.w3resource.com/csthon-exercises/basic/csthon-basic-1-exercise-24.php",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CountDivisors(long n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        return CountDivisors(n / 2);\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountDivisors((10L)) == (true));",
            "Debug.Assert(CountDivisors((100L)) == (false));",
            "Debug.Assert(CountDivisors((125L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "Write a csthon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long OddLengthSum(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Length(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(OddLengthSum((new List<long>(new long[]{(long)1L, (long)2L, (long)4L}))) == (14L));",
            "Debug.Assert(OddLengthSum((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))) == (15L));",
            "Debug.Assert(OddLengthSum((new List<long>(new long[]{(long)1L, (long)7L}))) == (8L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<float> RgbToHsv(long r, long g, long b) {\n        List<float> result = new ArrayList<float>();\n        float[] hsv = new float[3];\n        hsv[0] = (float) (r / 255.0);\n        hsv[1] = (float) (g / 255.0);\n        hsv[2] = (float) (b / 255.0);\n        float[] hsv2 = new float[3];\n        hsv2[0] = (float) (hsv[0] / 360.0);\n        hsv2[1] = (float) (hsv[1] / 100.0);\n        hsv2[2] = (float) (hsv[2] / 100.0);\n        result.add(hsv2[0]);\n        result.add(hsv2[1]);\n        result.add(hsv2[2]);\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RgbToHsv((255L), (255L), (255L)).Equals((new List<float>(new float[]{(float)0.0f, (float)0.0f, (float)100.0f}))));",
            "Debug.Assert(RgbToHsv((0L), (215L), (0L)).Equals((new List<float>(new float[]{(float)120.0f, (float)100.0f, (float)84.31372549019608f}))));",
            "Debug.Assert(RgbToHsv((10L), (215L), (110L)).Equals((new List<float>(new float[]{(float)149.26829268292684f, (float)95.34883720930233f, (float)84.31372549019608f}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "Write a function to find the product of first even and odd number of a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MulEvenOdd(List<long> list1) {\n        long product = 1;\n        for (long i = 0; i < list1.Length; i++) {\n            product *= list1[i];\n        }\n        return product;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MulEvenOdd((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)1L, (long)6L, (long)8L}))) == (4L));",
            "Debug.Assert(MulEvenOdd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));",
            "Debug.Assert(MulEvenOdd((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L, (long)10L}))) == (10L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "Convert tuple string to integer tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long, long> TupleStrInt(string test_str) {\n        long a = 0;\n        long b = 0;\n        long c = 0;\n        long d = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long n = 0;\n        long o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long a_ = 0;\n        long b_ = 0;\n        long c_ = 0;\n        long d_ = 0;\n        long e_ = 0;\n        long f_ = 0;\n        long g_ = 0;\n        long h_ = 0;\n        long i_ = 0;\n        long j_ = 0;\n        long k_ = 0;\n        long l_ = 0;\n        long m_ = 0;\n        long n_ = 0;\n        long o_ = 0;\n        long p_ = 0;\n        long q_ = 0;\n        long r_ = 0;\n        long s_ = 0;\n        long t_ = 0;\n        long u_ = 0;\n        long v_ = 0;\n        long w_ = 0;\n        long x_ = 0;\n        long y_ = 0;\n        long z_ = 0;\n        long a_ = 0;\n        long b_ = 0;\n        long c\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TupleStrInt((\"(7, 8, 9)\")).Equals((Tuple.Create(7L, 8L, 9L))));",
            "Debug.Assert(TupleStrInt((\"(1, 2, 3)\")).Equals((Tuple.Create(1L, 2L, 3L))));",
            "Debug.Assert(TupleStrInt((\"(4, 5, 6)\")).Equals((Tuple.Create(4L, 5L, 6L))));",
            "Debug.Assert(TupleStrInt((\"(7, 81, 19)\")).Equals((Tuple.Create(7L, 81L, 19L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long RightInsertion(List<long> a, long x) {\n        long i = 0;\n        long j = a.size() - 1;\n        while (i < j) {\n            long k = (i + j) / 2;\n            if (a.get(k) < x) {\n                i = k + 1;\n            } else {\n                j = k;\n            }\n        }\n        return i;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RightInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (6L)) == (4L));",
            "Debug.Assert(RightInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (3L)) == (2L));",
            "Debug.Assert(RightInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (7L)) == (4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "Create a string",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool TextMatchThree(string text) {\n        string s = text;\n        string s2 = text;\n        string s3 = text;\n        string s4 = text;\n        string s5 = text;\n        string s6 = text;\n        string s7 = text;\n        string s8 = text;\n        string s9 = text;\n        string s10 = text;\n        string s11 = text;\n        string s12 = text;\n        string s13 = text;\n        string s14 = text;\n        string s15 = text;\n        string s16 = text;\n        string s17 = text;\n        string s18 = text;\n        string s19 = text;\n        string s20 = text;\n        string s21 = text;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TextMatchThree((\"ac\")) == (false));",
            "Debug.Assert(TextMatchThree((\"dc\")) == (false));",
            "Debug.Assert(TextMatchThree((\"abbbba\")) == (true));",
            "Debug.Assert(TextMatchThree((\"caacabbbba\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "Return the tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, string, string> NewTuple(List<string> test_list, string test_str) {\n        Tuple<string, string, string> tuple = new Tuple<string, string, string>();\n        tuple.Add(test_str);\n        tuple.Add(test_list);\n        return tuple;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(NewTuple((new List<string>(new string[]{(string)\"WEB\", (string)\"is\"})), (\"best\")).Equals((Tuple.Create(\"WEB\", \"is\", \"best\"))));",
            "Debug.Assert(NewTuple((new List<string>(new string[]{(string)\"We\", (string)\"are\"})), (\"Developers\")).Equals((Tuple.Create(\"We\", \"are\", \"Developers\"))));",
            "Debug.Assert(NewTuple((new List<string>(new string[]{(string)\"Part\", (string)\"is\"})), (\"Wrong\")).Equals((Tuple.Create(\"Part\", \"is\", \"Wrong\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "Write a csthon function to check whether every even index contains even numbers of a given list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool EvenPosition(List<long> nums) {\n        long sum = 0;\n        for (int i = 0; i < nums.Length; i++) {\n            sum += nums[i];\n        }\n        return sum % 2 == 0;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(EvenPosition((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));",
            "Debug.Assert(EvenPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));",
            "Debug.Assert(EvenPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L}))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "791",
        "title": "remove_nested",
        "text": "Get the number of tuples in the tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long, long, long> RemoveNested(object test_tup) {\n        long num_elements = test_tup.size();\n        long num_tuples = num_elements / 2;\n        long num_tuples_removed = num_tuples;\n        long num_tuples_removed_removed = num_tuples;\n        long num_tuples_removed_removed_removed = num_tuples;\n        long num_tuples_removed_removed_removed_removed = num_tuples;\n        long num_tuples_removed_removed_removed_removed = num_tuples;\n        long num_tuples_removed_removed_removed_removed = num_tuples;\n        long num_tuples_removed_removed_removed_removed = num_tuples;\n        long num_tuples_removed_removed_removed_removed = num_tuples;\n        long num_tuples_removed_removed_removed_removed = num_tuples;\n        long num_tuples_removed_removed_removed_removed = num_tuples;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveNested(Tuple.Create(1L, 5L, 7L, Tuple.Create(4L, 6L), 10L)).Equals((Tuple.Create(1L, 5L, 7L, 10L))));",
            "Debug.Assert(RemoveNested(Tuple.Create(2L, 6L, 8L, Tuple.Create(5L, 7L), 11L)).Equals((Tuple.Create(2L, 6L, 8L, 11L))));",
            "Debug.Assert(RemoveNested(Tuple.Create(3L, 7L, 9L, Tuple.Create(6L, 8L), 12L)).Equals((Tuple.Create(3L, 7L, 9L, 12L))));",
            "Debug.Assert(RemoveNested(Tuple.Create(3L, 7L, 9L, Tuple.Create(6L, 8L), Tuple.Create(5L, 12L), 12L)).Equals((Tuple.Create(3L, 7L, 9L, 12L))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "Write a csthon function to count the number of lists in a given number of lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountList(List<List<long>> input_list) {\n        long count = 0;\n        for (List<long> list : input_list) {\n            count += list.size();\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)9L, (long)11L}), (List<long>)new List<long>(new long[]{(long)13L, (long)15L, (long)17L})}))) == (4L));",
            "Debug.Assert(CountList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L})}))) == (3L));",
            "Debug.Assert(CountList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)2L, (long)0L})}))) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "Write a csthon function to find the last position of an element in a sorted list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Last(List<long> arr, long x) {\n        long last = arr.Last();\n        return last == x? last : last + 1;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Last((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (1L)) == (0L));",
            "Debug.Assert(Last((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)4L})), (1L)) == (2L));",
            "Debug.Assert(Last((new List<long>(new long[]{(long)2L, (long)3L, (long)2L, (long)3L, (long)6L, (long)8L, (long)9L})), (3L)) == (3L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "Return true if the string is a 'a' followed by anything.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool TextStartaEndb(string text) {\n        string longest = text;\n        for (int i = 0; i < text.length(); i++) {\n            if (text[i] == 'a') {\n                longest = longest.substr(0, i);\n            }\n        }\n        return longest.length() > 0;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TextStartaEndb((\"aabbbb\")) == (true));",
            "Debug.Assert(TextStartaEndb((\"aabAbbbc\")) == (false));",
            "Debug.Assert(TextStartaEndb((\"accddbbjjj\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "Write function to find the sum of all items in the given dictionary.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long ReturnSum(Dictionary<string,long> dict) {\n        long sum = 0;\n        for (int i = 0; i < dict.Length(); i++) {\n            sum += dict.Get(i);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ReturnSum((new Dictionary<string,long>(){{\"a\", 100L}, {\"b\", 200L}, {\"c\", 300L}})) == (600L));",
            "Debug.Assert(ReturnSum((new Dictionary<string,long>(){{\"a\", 25L}, {\"b\", 18L}, {\"c\", 45L}})) == (88L));",
            "Debug.Assert(ReturnSum((new Dictionary<string,long>(){{\"a\", 36L}, {\"b\", 39L}, {\"c\", 49L}})) == (124L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "Write a csthon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long SumInRange(long l, long r) {\n        long sum = 0;\n        while (l > 0 && r > 0) {\n            sum += l % 2;\n            l /= 2;\n            r /= 2;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SumInRange((2L), (5L)) == (8L));",
            "Debug.Assert(SumInRange((5L), (7L)) == (12L));",
            "Debug.Assert(SumInRange((7L), (13L)) == (40L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "Write a csthon function to find the sum of a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Sum(List<long> arr) {\n        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Sum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (6L));",
            "Debug.Assert(Sum((new List<long>(new long[]{(long)15L, (long)12L, (long)13L, (long)10L}))) == (50L));",
            "Debug.Assert(Sum((new List<long>(new long[]{(long)0L, (long)1L, (long)2L}))) == (3L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long LeftRotate(long n, long d) {\n        long result = n;\n        while (d > 0) {\n            result = (result << 1) | (result >>> 31);\n            d--;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(LeftRotate((16L), (2L)) == (64L));",
            "Debug.Assert(LeftRotate((10L), (2L)) == (40L));",
            "Debug.Assert(LeftRotate((99L), (3L)) == (792L));",
            "Debug.Assert(LeftRotate((99L), (3L)) == (792L));",
            "Debug.Assert(LeftRotate((1L), (3L)) == (8L));",
            "Debug.Assert(LeftRotate((5L), (3L)) == (40L));",
            "Debug.Assert(LeftRotate((29L), (3L)) == (232L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "Write a csthon function to check whether the length of the word is odd or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool WordLen(string s) {\n        int len = s.length();\n        if (len % 2 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(WordLen((\"Hadoop\")) == (false));",
            "Debug.Assert(WordLen((\"great\")) == (true));",
            "Debug.Assert(WordLen((\"structure\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "Write a function to remove all whitespaces from a string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string RemoveAllSpaces(string text) {\n        string result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)!='') {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(RemoveAllSpaces((\"python  program\")).Equals((\"pythonprogram\")));",
            "Debug.Assert(RemoveAllSpaces((\"python   programming    language\")).Equals((\"pythonprogramminglanguage\")));",
            "Debug.Assert(RemoveAllSpaces((\"python                     program\")).Equals((\"pythonprogram\")));",
            "Debug.Assert(RemoveAllSpaces((\"   python                     program\")).Equals((\"pythonprogram\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "Write a csthon function to count the number of equal numbers from three given integers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long TestThreeEqual(long x, long y, long z) {\n        long result = 0;\n        if (x == y) {\n            result = 1;\n        }\n        if (x == z) {\n            result = 2;\n        }\n        if (y == z) {\n            result = 3;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TestThreeEqual((1L), (1L), (1L)) == (3L));",
            "Debug.Assert(TestThreeEqual((-1L), (-2L), (-3L)) == (0L));",
            "Debug.Assert(TestThreeEqual((1L), (2L), (2L)) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "Write a csthon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (long i : arr) {\n            count += i;\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));",
            "Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));",
            "Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));",
            "Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));",
            "Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsPerfectSquare(long n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {\n            return true;\n        }\n        if (n == 8) {\n            return true;\n        }\n        if (n == 9) {\n            return true;\n        }\n        if (n == 10) {\n            return true;\n        }\n        if (n == 11) {\n            return true;\n        }\n        if (n == 12) {\n            return true;\n        }\n        if (n == 13) {\n            return true;\n        }\n        if (n == 14) {\n            return true;\n        }\n        if (n == 15) {\n            return true;\n        }\n        if (n == 16) {\n            return true;\n        }\n        if (n == 17) {\n            return true;\n        }\n        if (n == 18) {\n            return true;\n        }\n        if (n == 19) {\n            return true;\n        }\n        if (n == 20) {\n            return true;\n        }\n        if (n == 21) {\n            return true;\n        }\n        if (n == 22) {\n            return true;\n        }\n        if (n ==\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsPerfectSquare((10L)) == (false));",
            "Debug.Assert(IsPerfectSquare((36L)) == (true));",
            "Debug.Assert(IsPerfectSquare((14L)) == (false));",
            "Debug.Assert(IsPerfectSquare((196L)) == (true));",
            "Debug.Assert(IsPerfectSquare((125L)) == (false));",
            "Debug.Assert(IsPerfectSquare((15625L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "Write a function to check whether the product of numbers in a list is even or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsProductEven(List<long> arr) {\n        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsProductEven((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (true));",
            "Debug.Assert(IsProductEven((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L}))) == (true));",
            "Debug.Assert(IsProductEven((new List<long>(new long[]{(long)1L, (long)1L}))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> MaxSumList(List<List<long>> lists) {\n        List<long> result = new ArrayList<long>();\n        long sum = 0;\n        for (List<long> list : lists) {\n            sum += list.get(0);\n            result.add(sum);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxSumList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)10L, (long)11L, (long)12L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))).Equals((new List<long>(new long[]{(long)10L, (long)11L, (long)12L}))));",
            "Debug.Assert(MaxSumList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)2L, (long)1L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)12L, (long)11L, (long)10L})}))).Equals((new List<long>(new long[]{(long)12L, (long)11L, (long)10L}))));",
            "Debug.Assert(MaxSumList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)1L})}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        for (int i = 0; i < test_str.length(); i++) {\n            if (Character.isUpperCase(test_str.charAt(i))) {\n                max_run = Math.max(max_run, i);\n            }\n        }\n        return max_run;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));",
            "Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));",
            "Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "Write a csthon function to find the first odd number in a given list of numbers.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FirstOdd(List<long> nums) {\n        long result = 0;\n        for (long num : nums) {\n            if (num % 2 == 0) {\n                result = num;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FirstOdd((new List<long>(new long[]{(long)1L, (long)3L, (long)5L}))) == (1L));",
            "Debug.Assert(FirstOdd((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L}))) == (1L));",
            "Debug.Assert(FirstOdd((new List<long>(new long[]{(long)8L, (long)9L, (long)1L}))) == (9L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "Write a function to check if the given tuples contain the k or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckK(List<long> test_tup, long K) {\n        for (int i = 0; i < test_tup.size(); i++) {\n            if (test_tup.get(i) == K) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckK((new List<long>(new long[]{(long)10L, (long)4L, (long)5L, (long)6L, (long)8L})), (6L)) == (true));",
            "Debug.Assert(CheckK((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (7L)) == (false));",
            "Debug.Assert(CheckK((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)44L, (long)11L, (long)12L})), (11L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool CheckSmaller(Tuple<long, long, long> test_tup1, Tuple<long, long, long> test_tup2) {\n        long test_tup1_val = test_tup1.GetValue();\n        long test_tup2_val = test_tup2.GetValue();\n        if (test_tup1_val < test_tup2_val) {\n            return true;\n        }\n        return false;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CheckSmaller((Tuple.Create(1L, 2L, 3L)), (Tuple.Create(2L, 3L, 4L))) == (false));",
            "Debug.Assert(CheckSmaller((Tuple.Create(4L, 5L, 6L)), (Tuple.Create(3L, 4L, 5L))) == (true));",
            "Debug.Assert(CheckSmaller((Tuple.Create(11L, 12L, 13L)), (Tuple.Create(10L, 11L, 12L))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long TetrahedralNumber(long n) {\n        long result = 0;\n        while (n > 0) {\n            result += n % 10;\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(TetrahedralNumber((5L)) == (35L));",
            "Debug.Assert(TetrahedralNumber((6L)) == (56L));",
            "Debug.Assert(TetrahedralNumber((7L)) == (84L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "Write a csthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string GetChar(string strr) {\n        string result = \"\";\n        for (int i = 0; i < strr.length(); i++) {\n            result += strr[i];\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(GetChar((\"abc\")).Equals((\"f\")));",
            "Debug.Assert(GetChar((\"gfg\")).Equals((\"t\")));",
            "Debug.Assert(GetChar((\"ab\")).Equals((\"c\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "Write a function to find the nth number in the newman conway sequence.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Sequence(long n) {\n        long result = 1;\n        while (n > 0) {\n            result *= n;\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Sequence((10L)) == (6L));",
            "Debug.Assert(Sequence((2L)) == (1L));",
            "Debug.Assert(Sequence((3L)) == (2L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long CenteredHexagonalNumber(long n) {\n        long result = 0;\n        while (n > 0) {\n            result += n % 2;\n            n /= 2;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(CenteredHexagonalNumber((10L)) == (271L));",
            "Debug.Assert(CenteredHexagonalNumber((2L)) == (7L));",
            "Debug.Assert(CenteredHexagonalNumber((9L)) == (217L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "Return the new dictionary.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Dictionary<string,string> MergeDictionariesThree(Dictionary<string,string> dict1, Dictionary<string,string> dict2, Dictionary<string,string> dict3) {\n        Dictionary<string,string> newDict = new Dictionary<string,string>();\n        newDict.Merge(dict1, dict2);\n        newDict.Merge(dict2, dict3);\n        return newDict;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(MergeDictionariesThree((new Dictionary<string,string>(){{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}}), (new Dictionary<string,string>(){{\"G\", \"Green\"}, {\"W\", \"White\"}}), (new Dictionary<string,string>(){{\"O\", \"Orange\"}, {\"W\", \"White\"}, {\"B\", \"Black\"}})).Equals((new Dictionary<string,string>(){{\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"P\", \"Pink\"}, {\"G\", \"Green\"}, {\"W\", \"White\"}, {\"O\", \"Orange\"}})));",
            "Debug.Assert(MergeDictionariesThree((new Dictionary<string,string>(){{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}}), (new Dictionary<string,string>(){{\"G\", \"Green\"}, {\"W\", \"White\"}}), (new Dictionary<string,string>(){{\"L\", \"lavender\"}, {\"B\", \"Blue\"}})).Equals((new Dictionary<string,string>(){{\"W\", \"White\"}, {\"P\", \"Pink\"}, {\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}})));",
            "Debug.Assert(MergeDictionariesThree((new Dictionary<string,string>(){{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}}), (new Dictionary<string,string>(){{\"L\", \"lavender\"}, {\"B\", \"Blue\"}}), (new Dictionary<string,string>(){{\"G\", \"Green\"}, {\"W\", \"White\"}})).Equals((new Dictionary<string,string>(){{\"B\", \"Black\"}, {\"P\", \"Pink\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}, {\"W\", \"White\"}})));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Dictionary<long,long> FreqCount(List<long> list1) {\n        Dictionary<long,long> dictionary = new Dictionary<long,long>();\n        long count = 0;\n        for (long i = 0; i < list1.size(); i++) {\n            count += list1.get(i);\n        }\n        dictionary.Add(count);\n        return dictionary;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FreqCount((new List<long>(new long[]{(long)10L, (long)10L, (long)10L, (long)10L, (long)20L, (long)20L, (long)20L, (long)20L, (long)40L, (long)40L, (long)50L, (long)50L, (long)30L}))).Equals((new Dictionary<long,long>(){{10L, 4L}, {20L, 4L}, {40L, 2L}, {50L, 2L}, {30L, 1L}})));",
            "Debug.Assert(FreqCount((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)3L, (long)2L, (long)4L, (long)1L, (long)3L, (long)1L, (long)4L}))).Equals((new Dictionary<long,long>(){{1L, 3L}, {2L, 2L}, {3L, 3L}, {4L, 3L}})));",
            "Debug.Assert(FreqCount((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)4L, (long)9L, (long)10L, (long)4L, (long)5L, (long)6L, (long)7L, (long)9L, (long)5L}))).Equals((new Dictionary<long,long>(){{10L, 1L}, {5L, 3L}, {6L, 2L}, {7L, 2L}, {4L, 2L}, {9L, 2L}})));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "Write a function to find the closest smaller number than n.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long ClosestNum(long N) {\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n        for (long i = 1; i <= N; i++) {\n            if (N % i == 0) {\n                if (N < min) {\n                    min = N;\n                }\n                if (N > max) {\n                    max = N;\n                }\n            }\n        }\n        return min;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(ClosestNum((11L)) == (10L));",
            "Debug.Assert(ClosestNum((7L)) == (6L));",
            "Debug.Assert(ClosestNum((12L)) == (11L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "Write a function to find squares of individual elements in a list.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> SquareNums(List<long> nums) {\n        List<long> result = new ArrayList<long>();\n        for (long num : nums) {\n            result.add(num * num);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(SquareNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)9L, (long)16L, (long)25L, (long)36L, (long)49L, (long)64L, (long)81L, (long)100L}))));",
            "Debug.Assert(SquareNums((new List<long>(new long[]{(long)10L, (long)20L, (long)30L}))).Equals((new List<long>(new long[]{(long)100L, (long)400L, (long)900L}))));",
            "Debug.Assert(SquareNums((new List<long>(new long[]{(long)12L, (long)15L}))).Equals((new List<long>(new long[]{(long)144L, (long)225L}))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "Write a csthon function to find the length of the longest word.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long LenLog(List<string> list1) {\n        long result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            result += list1.get(i).length();\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(LenLog((new List<string>(new string[]{(string)\"python\", (string)\"PHP\", (string)\"bigdata\"}))) == (7L));",
            "Debug.Assert(LenLog((new List<string>(new string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))) == (3L));",
            "Debug.Assert(LenLog((new List<string>(new string[]{(string)\"small\", (string)\"big\", (string)\"tall\"}))) == (5L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "Write a function to check if a string is present as a substring in a given list of string values.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool FindSubstring(List<string> str1, string sub_str) {\n        for (int i = 0; i < str1.Length(); i++) {\n            if (str1.get(i).equals(sub_str)) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindSubstring((new List<string>(new string[]{(string)\"red\", (string)\"black\", (string)\"white\", (string)\"green\", (string)\"orange\"})), (\"ack\")) == (true));",
            "Debug.Assert(FindSubstring((new List<string>(new string[]{(string)\"red\", (string)\"black\", (string)\"white\", (string)\"green\", (string)\"orange\"})), (\"abc\")) == (false));",
            "Debug.Assert(FindSubstring((new List<string>(new string[]{(string)\"red\", (string)\"black\", (string)\"white\", (string)\"green\", (string)\"orange\"})), (\"ange\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool IsUndulating(long n) {\n        return n == 0;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IsUndulating((1212121L)) == (true));",
            "Debug.Assert(IsUndulating((1991L)) == (false));",
            "Debug.Assert(IsUndulating((121L)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Power(long a, long b) {\n        long result = 1;\n        while (a > 0) {\n            result *= a;\n            a--;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Power((3L), (4L)) == (81L));",
            "Debug.Assert(Power((2L), (3L)) == (8L));",
            "Debug.Assert(Power((5L), (5L)) == (3125L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "Return the first value of the tuple with the smallest second value",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string IndexMinimum(List<Tuple<string, long>> test_list) {\n        List<Tuple<string, long>> test_list_copy = new ArrayList<Tuple<string, long>>(test_list);\n        test_list_copy.sort(Comparator.comparing(tuple -> tuple.first));\n        return test_list_copy.get(0).first;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(IndexMinimum((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Rash\", 143L), (Tuple<string, long>)Tuple.Create(\"Manjeet\", 200L), (Tuple<string, long>)Tuple.Create(\"Varsha\", 100L)}))).Equals((\"Varsha\")));",
            "Debug.Assert(IndexMinimum((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Yash\", 185L), (Tuple<string, long>)Tuple.Create(\"Dawood\", 125L), (Tuple<string, long>)Tuple.Create(\"Sanya\", 175L)}))).Equals((\"Dawood\")));",
            "Debug.Assert(IndexMinimum((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Sai\", 345L), (Tuple<string, long>)Tuple.Create(\"Salman\", 145L), (Tuple<string, long>)Tuple.Create(\"Ayesha\", 96L)}))).Equals((\"Ayesha\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "Write a csthon function to find the length of the smallest list in a list of lists.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindMinLength(List<List<long>> lst) {\n        long min = Long.MAX_VALUE;\n        for (int i = 0; i < lst.Length; i++) {\n            for (int j = 0; j < lst.Length; j++) {\n                if (lst.get(i).get(j) < min) {\n                    min = lst.get(i).get(j);\n                }\n            }\n        }\n        return min;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindMinLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L})}))) == (1L));",
            "Debug.Assert(FindMinLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})}))) == (2L));",
            "Debug.Assert(FindMinLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L})}))) == (3L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "Write a csthon function to find the number of divisors of a given integer.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long Divisor(long n) {\n        long result = 1;\n        while (n!= 1) {\n            n = n / 2;\n            result *= n;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(Divisor((15L)) == (4L));",
            "Debug.Assert(Divisor((12L)) == (6L));",
            "Debug.Assert(Divisor((9L)) == (3L));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dictionary = new Dictionary<long,long>();\n        for (int i = 0; i < list1.size(); i++) {\n            List<long> list = list1.get(i);\n            for (int j = 0; j < list.size(); j++) {\n                dictionary.Add(list.get(j), 1);\n            }\n        }\n        return dictionary;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));",
            "Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));",
            "Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string DecimalToBinary(long n) {\n        String s = \"\";\n        while (n > 0) {\n            s = s + (n % 10) + \"\";\n            n /= 10;\n        }\n        return s;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));",
            "Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));",
            "Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "Write a csthon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long FindRotations(string str) {\n        long rotations = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str[i] == '1') {\n                rotations++;\n            }\n        }\n        return rotations;\n    }\n",
        "test_list": [
            "public static void Main(string[] args) {",
            "Debug.Assert(FindRotations((\"aaaa\")) == (1L));",
            "Debug.Assert(FindRotations((\"ab\")) == (2L));",
            "Debug.Assert(FindRotations((\"abc\")) == (3L));",
            "}",
            "}"
        ]
    }
]